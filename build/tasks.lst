ARM GAS  /tmp/ccpNfLZa.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	pxCurrentTCB
  17              		.section	.bss.pxCurrentTCB,"aw",%nobits
  18              		.align	2
  21              	pxCurrentTCB:
  22 0000 00000000 		.space	4
  23              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  24              		.align	2
  27              	pxReadyTasksLists:
  28 0000 00000000 		.space	1120
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  30              		.align	2
  33              	xDelayedTaskList1:
  34 0000 00000000 		.space	20
  34      00000000 
  34      00000000 
  34      00000000 
  34      00000000 
  35              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  36              		.align	2
  39              	xDelayedTaskList2:
  40 0000 00000000 		.space	20
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  42              		.align	2
  45              	pxDelayedTaskList:
  46 0000 00000000 		.space	4
  47              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  48              		.align	2
  51              	pxOverflowDelayedTaskList:
  52 0000 00000000 		.space	4
  53              		.section	.bss.xPendingReadyList,"aw",%nobits
  54              		.align	2
  57              	xPendingReadyList:
  58 0000 00000000 		.space	20
  58      00000000 
ARM GAS  /tmp/ccpNfLZa.s 			page 2


  58      00000000 
  58      00000000 
  58      00000000 
  59              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  60              		.align	2
  63              	xTasksWaitingTermination:
  64 0000 00000000 		.space	20
  64      00000000 
  64      00000000 
  64      00000000 
  64      00000000 
  65              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  66              		.align	2
  69              	uxDeletedTasksWaitingCleanUp:
  70 0000 00000000 		.space	4
  71              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  72              		.align	2
  75              	xSuspendedTaskList:
  76 0000 00000000 		.space	20
  76      00000000 
  76      00000000 
  76      00000000 
  76      00000000 
  77              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  78              		.align	2
  81              	uxCurrentNumberOfTasks:
  82 0000 00000000 		.space	4
  83              		.section	.bss.xTickCount,"aw",%nobits
  84              		.align	2
  87              	xTickCount:
  88 0000 00000000 		.space	4
  89              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  90              		.align	2
  93              	uxTopReadyPriority:
  94 0000 00000000 		.space	4
  95              		.section	.bss.xSchedulerRunning,"aw",%nobits
  96              		.align	2
  99              	xSchedulerRunning:
 100 0000 00000000 		.space	4
 101              		.section	.bss.xPendedTicks,"aw",%nobits
 102              		.align	2
 105              	xPendedTicks:
 106 0000 00000000 		.space	4
 107              		.section	.bss.xYieldPending,"aw",%nobits
 108              		.align	2
 111              	xYieldPending:
 112 0000 00000000 		.space	4
 113              		.section	.bss.xNumOfOverflows,"aw",%nobits
 114              		.align	2
 117              	xNumOfOverflows:
 118 0000 00000000 		.space	4
 119              		.section	.bss.uxTaskNumber,"aw",%nobits
 120              		.align	2
 123              	uxTaskNumber:
 124 0000 00000000 		.space	4
 125              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 126              		.align	2
ARM GAS  /tmp/ccpNfLZa.s 			page 3


 129              	xNextTaskUnblockTime:
 130 0000 00000000 		.space	4
 131              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 132              		.align	2
 135              	xIdleTaskHandle:
 136 0000 00000000 		.space	4
 137              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 138              		.align	2
 141              	uxSchedulerSuspended:
 142 0000 00000000 		.space	4
 143              		.section	.text.xTaskCreateStatic,"ax",%progbits
 144              		.align	1
 145              		.global	xTaskCreateStatic
 146              		.arch armv7e-m
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-d16
 152              	xTaskCreateStatic:
 153              	.LFB4:
 154              		.file 1 "./Libraries/FreeRTOS/Source/tasks.c"
   1:./Libraries/FreeRTOS/Source/tasks.c **** /*
   2:./Libraries/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/tasks.c ****  *
   5:./Libraries/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/tasks.c ****  *
  12:./Libraries/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/tasks.c ****  *
  15:./Libraries/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/tasks.c ****  *
  22:./Libraries/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/tasks.c ****  *
  25:./Libraries/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/tasks.c ****  */
  27:./Libraries/FreeRTOS/Source/tasks.c **** 
  28:./Libraries/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:./Libraries/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:./Libraries/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:./Libraries/FreeRTOS/Source/tasks.c **** 
  32:./Libraries/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:./Libraries/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:./Libraries/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:./Libraries/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 4


  37:./Libraries/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:./Libraries/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:./Libraries/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:./Libraries/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:./Libraries/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:./Libraries/FreeRTOS/Source/tasks.c **** 
  43:./Libraries/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:./Libraries/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:./Libraries/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:./Libraries/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:./Libraries/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:./Libraries/FreeRTOS/Source/tasks.c **** 
  49:./Libraries/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:./Libraries/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:./Libraries/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:./Libraries/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:./Libraries/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:./Libraries/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:./Libraries/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:./Libraries/FreeRTOS/Source/tasks.c **** 
  59:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:./Libraries/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:./Libraries/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:./Libraries/FreeRTOS/Source/tasks.c **** #else
  64:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:./Libraries/FreeRTOS/Source/tasks.c **** #endif
  66:./Libraries/FreeRTOS/Source/tasks.c **** 
  67:./Libraries/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:./Libraries/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:./Libraries/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:./Libraries/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:./Libraries/FreeRTOS/Source/tasks.c **** 
  72:./Libraries/FreeRTOS/Source/tasks.c **** /*
  73:./Libraries/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:./Libraries/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:./Libraries/FreeRTOS/Source/tasks.c ****  */
  76:./Libraries/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:./Libraries/FreeRTOS/Source/tasks.c **** 
  78:./Libraries/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:./Libraries/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:./Libraries/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:./Libraries/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:./Libraries/FreeRTOS/Source/tasks.c **** 
  83:./Libraries/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:./Libraries/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:./Libraries/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:./Libraries/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:./Libraries/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:./Libraries/FreeRTOS/Source/tasks.c **** #else
  89:./Libraries/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:./Libraries/FreeRTOS/Source/tasks.c **** #endif
  91:./Libraries/FreeRTOS/Source/tasks.c **** 
  92:./Libraries/FreeRTOS/Source/tasks.c **** /*
  93:./Libraries/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
ARM GAS  /tmp/ccpNfLZa.s 			page 5


  94:./Libraries/FreeRTOS/Source/tasks.c ****  */
  95:./Libraries/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:./Libraries/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:./Libraries/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:./Libraries/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:./Libraries/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:./Libraries/FreeRTOS/Source/tasks.c **** 
 101:./Libraries/FreeRTOS/Source/tasks.c **** /*
 102:./Libraries/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:./Libraries/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:./Libraries/FreeRTOS/Source/tasks.c ****  */
 105:./Libraries/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:./Libraries/FreeRTOS/Source/tasks.c **** 	#define static
 107:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 108:./Libraries/FreeRTOS/Source/tasks.c **** 
 109:./Libraries/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:./Libraries/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:./Libraries/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:./Libraries/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 114:./Libraries/FreeRTOS/Source/tasks.c **** 
 115:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:./Libraries/FreeRTOS/Source/tasks.c **** 
 117:./Libraries/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:./Libraries/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:./Libraries/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:./Libraries/FreeRTOS/Source/tasks.c **** 
 121:./Libraries/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:./Libraries/FreeRTOS/Source/tasks.c **** 	state task. */
 123:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:./Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 125:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:./Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 127:./Libraries/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:./Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 129:./Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:./Libraries/FreeRTOS/Source/tasks.c **** 
 131:./Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:./Libraries/FreeRTOS/Source/tasks.c **** 
 133:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:./Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 135:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:./Libraries/FreeRTOS/Source/tasks.c **** 																										\
 137:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:./Libraries/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:./Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 140:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:./Libraries/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:./Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 143:./Libraries/FreeRTOS/Source/tasks.c **** 																										\
 144:./Libraries/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:./Libraries/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:./Libraries/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:./Libraries/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:./Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:./Libraries/FreeRTOS/Source/tasks.c **** 
 150:./Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccpNfLZa.s 			page 6


 151:./Libraries/FreeRTOS/Source/tasks.c **** 
 152:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:./Libraries/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:./Libraries/FreeRTOS/Source/tasks.c **** 	being used. */
 155:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:./Libraries/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:./Libraries/FreeRTOS/Source/tasks.c **** 
 158:./Libraries/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:./Libraries/FreeRTOS/Source/tasks.c **** 
 160:./Libraries/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:./Libraries/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:./Libraries/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:./Libraries/FreeRTOS/Source/tasks.c **** 
 164:./Libraries/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:./Libraries/FreeRTOS/Source/tasks.c **** 
 167:./Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:./Libraries/FreeRTOS/Source/tasks.c **** 
 169:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:./Libraries/FreeRTOS/Source/tasks.c **** 	{																								\
 171:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:./Libraries/FreeRTOS/Source/tasks.c **** 																									\
 173:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:./Libraries/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:./Libraries/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:./Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:./Libraries/FreeRTOS/Source/tasks.c **** 
 179:./Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:./Libraries/FreeRTOS/Source/tasks.c **** 
 181:./Libraries/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:./Libraries/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:./Libraries/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:./Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 186:./Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:./Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 188:./Libraries/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:./Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 190:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 191:./Libraries/FreeRTOS/Source/tasks.c **** 
 192:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:./Libraries/FreeRTOS/Source/tasks.c **** 
 194:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:./Libraries/FreeRTOS/Source/tasks.c **** 
 196:./Libraries/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:./Libraries/FreeRTOS/Source/tasks.c **** count overflows. */
 198:./Libraries/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:./Libraries/FreeRTOS/Source/tasks.c **** {																									\
 200:./Libraries/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:./Libraries/FreeRTOS/Source/tasks.c **** 																									\
 202:./Libraries/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:./Libraries/FreeRTOS/Source/tasks.c **** 																									\
 205:./Libraries/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:./Libraries/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:./Libraries/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
ARM GAS  /tmp/ccpNfLZa.s 			page 7


 208:./Libraries/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:./Libraries/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:./Libraries/FreeRTOS/Source/tasks.c **** }
 211:./Libraries/FreeRTOS/Source/tasks.c **** 
 212:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:./Libraries/FreeRTOS/Source/tasks.c **** 
 214:./Libraries/FreeRTOS/Source/tasks.c **** /*
 215:./Libraries/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:./Libraries/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:./Libraries/FreeRTOS/Source/tasks.c ****  */
 218:./Libraries/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:./Libraries/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:./Libraries/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:./Libraries/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:./Libraries/FreeRTOS/Source/tasks.c **** 
 225:./Libraries/FreeRTOS/Source/tasks.c **** /*
 226:./Libraries/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:./Libraries/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:./Libraries/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:./Libraries/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:./Libraries/FreeRTOS/Source/tasks.c ****  */
 231:./Libraries/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:./Libraries/FreeRTOS/Source/tasks.c **** 
 233:./Libraries/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:./Libraries/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:./Libraries/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:./Libraries/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:./Libraries/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:./Libraries/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:./Libraries/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:./Libraries/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:./Libraries/FreeRTOS/Source/tasks.c **** #else
 244:./Libraries/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 246:./Libraries/FreeRTOS/Source/tasks.c **** 
 247:./Libraries/FreeRTOS/Source/tasks.c **** /*
 248:./Libraries/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:./Libraries/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:./Libraries/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:./Libraries/FreeRTOS/Source/tasks.c ****  */
 252:./Libraries/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:./Libraries/FreeRTOS/Source/tasks.c **** {
 254:./Libraries/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:./Libraries/FreeRTOS/Source/tasks.c **** 
 256:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:./Libraries/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 259:./Libraries/FreeRTOS/Source/tasks.c **** 
 260:./Libraries/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:./Libraries/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:./Libraries/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:./Libraries/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
ARM GAS  /tmp/ccpNfLZa.s 			page 8


 265:./Libraries/FreeRTOS/Source/tasks.c **** 
 266:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:./Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 269:./Libraries/FreeRTOS/Source/tasks.c **** 
 270:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:./Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 273:./Libraries/FreeRTOS/Source/tasks.c **** 
 274:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:./Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:./Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 278:./Libraries/FreeRTOS/Source/tasks.c **** 
 279:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:./Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:./Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 283:./Libraries/FreeRTOS/Source/tasks.c **** 
 284:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:./Libraries/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 287:./Libraries/FreeRTOS/Source/tasks.c **** 
 288:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:./Libraries/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 291:./Libraries/FreeRTOS/Source/tasks.c **** 
 292:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:./Libraries/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 295:./Libraries/FreeRTOS/Source/tasks.c **** 
 296:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:./Libraries/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:./Libraries/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:./Libraries/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:./Libraries/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:./Libraries/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:./Libraries/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:./Libraries/FreeRTOS/Source/tasks.c **** 
 305:./Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:./Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:./Libraries/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 309:./Libraries/FreeRTOS/Source/tasks.c **** 
 310:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:./Libraries/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:./Libraries/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 314:./Libraries/FreeRTOS/Source/tasks.c **** 
 315:./Libraries/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:./Libraries/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:./Libraries/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 320:./Libraries/FreeRTOS/Source/tasks.c **** 
 321:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccpNfLZa.s 			page 9


 322:./Libraries/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 324:./Libraries/FreeRTOS/Source/tasks.c **** 
 325:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:./Libraries/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 328:./Libraries/FreeRTOS/Source/tasks.c **** 
 329:./Libraries/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:./Libraries/FreeRTOS/Source/tasks.c **** 
 331:./Libraries/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:./Libraries/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:./Libraries/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:./Libraries/FreeRTOS/Source/tasks.c **** 
 335:./Libraries/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:./Libraries/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:./Libraries/FreeRTOS/Source/tasks.c **** 
 339:./Libraries/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:./Libraries/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:./Libraries/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:./Libraries/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:./Libraries/FreeRTOS/Source/tasks.c **** 
 350:./Libraries/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:./Libraries/FreeRTOS/Source/tasks.c **** 
 352:./Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:./Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:./Libraries/FreeRTOS/Source/tasks.c **** 
 355:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 356:./Libraries/FreeRTOS/Source/tasks.c **** 
 357:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:./Libraries/FreeRTOS/Source/tasks.c **** 
 359:./Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:./Libraries/FreeRTOS/Source/tasks.c **** 
 361:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 362:./Libraries/FreeRTOS/Source/tasks.c **** 
 363:./Libraries/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:./Libraries/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:./Libraries/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 368:./Libraries/FreeRTOS/Source/tasks.c **** 
 369:./Libraries/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
ARM GAS  /tmp/ccpNfLZa.s 			page 10


 379:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:./Libraries/FreeRTOS/Source/tasks.c **** 
 381:./Libraries/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:./Libraries/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:./Libraries/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:./Libraries/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:./Libraries/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:./Libraries/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:./Libraries/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:./Libraries/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:./Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:./Libraries/FreeRTOS/Source/tasks.c **** 
 391:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:./Libraries/FreeRTOS/Source/tasks.c **** 
 393:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:./Libraries/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:./Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:./Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:./Libraries/FreeRTOS/Source/tasks.c **** 
 398:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 399:./Libraries/FreeRTOS/Source/tasks.c **** 
 400:./Libraries/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:./Libraries/FreeRTOS/Source/tasks.c **** 
 402:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:./Libraries/FreeRTOS/Source/tasks.c **** 
 404:./Libraries/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:./Libraries/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:./Libraries/FreeRTOS/Source/tasks.c **** 
 407:./Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:./Libraries/FreeRTOS/Source/tasks.c **** 
 409:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 410:./Libraries/FreeRTOS/Source/tasks.c **** 
 411:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:./Libraries/FreeRTOS/Source/tasks.c **** 
 413:./Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:./Libraries/FreeRTOS/Source/tasks.c **** 
 415:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 416:./Libraries/FreeRTOS/Source/tasks.c **** 
 417:./Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:./Libraries/FreeRTOS/Source/tasks.c **** 
 419:./Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:./Libraries/FreeRTOS/Source/tasks.c **** 
 421:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 422:./Libraries/FreeRTOS/Source/tasks.c **** 
 423:./Libraries/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:./Libraries/FreeRTOS/Source/tasks.c **** 
 425:./Libraries/FreeRTOS/Source/tasks.c **** /**
 426:./Libraries/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:./Libraries/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:./Libraries/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:./Libraries/FreeRTOS/Source/tasks.c ****  */
 430:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:./Libraries/FreeRTOS/Source/tasks.c **** 
 432:./Libraries/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:./Libraries/FreeRTOS/Source/tasks.c **** 
 434:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 11


 436:./Libraries/FreeRTOS/Source/tasks.c **** /*
 437:./Libraries/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:./Libraries/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:./Libraries/FreeRTOS/Source/tasks.c ****  */
 440:./Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:./Libraries/FreeRTOS/Source/tasks.c **** 
 442:./Libraries/FreeRTOS/Source/tasks.c **** /*
 443:./Libraries/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:./Libraries/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:./Libraries/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:./Libraries/FreeRTOS/Source/tasks.c ****  *
 447:./Libraries/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:./Libraries/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:./Libraries/FreeRTOS/Source/tasks.c ****  *
 450:./Libraries/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:./Libraries/FreeRTOS/Source/tasks.c ****  *
 452:./Libraries/FreeRTOS/Source/tasks.c ****  */
 453:./Libraries/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:./Libraries/FreeRTOS/Source/tasks.c **** 
 455:./Libraries/FreeRTOS/Source/tasks.c **** /*
 456:./Libraries/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:./Libraries/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:./Libraries/FreeRTOS/Source/tasks.c ****  *
 459:./Libraries/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:./Libraries/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:./Libraries/FreeRTOS/Source/tasks.c ****  */
 462:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:./Libraries/FreeRTOS/Source/tasks.c **** 
 464:./Libraries/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:./Libraries/FreeRTOS/Source/tasks.c **** 
 466:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 467:./Libraries/FreeRTOS/Source/tasks.c **** 
 468:./Libraries/FreeRTOS/Source/tasks.c **** /*
 469:./Libraries/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:./Libraries/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:./Libraries/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:./Libraries/FreeRTOS/Source/tasks.c ****  */
 473:./Libraries/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:./Libraries/FreeRTOS/Source/tasks.c **** 
 475:./Libraries/FreeRTOS/Source/tasks.c **** /*
 476:./Libraries/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:./Libraries/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:./Libraries/FreeRTOS/Source/tasks.c ****  */
 479:./Libraries/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:./Libraries/FreeRTOS/Source/tasks.c **** 
 481:./Libraries/FreeRTOS/Source/tasks.c **** /*
 482:./Libraries/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:./Libraries/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:./Libraries/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:./Libraries/FreeRTOS/Source/tasks.c ****  *
 486:./Libraries/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:./Libraries/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:./Libraries/FreeRTOS/Source/tasks.c ****  */
 489:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:./Libraries/FreeRTOS/Source/tasks.c **** 
 491:./Libraries/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 12


 493:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 494:./Libraries/FreeRTOS/Source/tasks.c **** 
 495:./Libraries/FreeRTOS/Source/tasks.c **** /*
 496:./Libraries/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:./Libraries/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:./Libraries/FreeRTOS/Source/tasks.c ****  */
 499:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:./Libraries/FreeRTOS/Source/tasks.c **** 
 501:./Libraries/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:./Libraries/FreeRTOS/Source/tasks.c **** 
 503:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 504:./Libraries/FreeRTOS/Source/tasks.c **** 
 505:./Libraries/FreeRTOS/Source/tasks.c **** /*
 506:./Libraries/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:./Libraries/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:./Libraries/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:./Libraries/FreeRTOS/Source/tasks.c ****  */
 510:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:./Libraries/FreeRTOS/Source/tasks.c **** 
 512:./Libraries/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:./Libraries/FreeRTOS/Source/tasks.c **** 
 514:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 515:./Libraries/FreeRTOS/Source/tasks.c **** 
 516:./Libraries/FreeRTOS/Source/tasks.c **** /*
 517:./Libraries/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:./Libraries/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:./Libraries/FreeRTOS/Source/tasks.c ****  *
 520:./Libraries/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:./Libraries/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:./Libraries/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:./Libraries/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:./Libraries/FreeRTOS/Source/tasks.c ****  */
 525:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:./Libraries/FreeRTOS/Source/tasks.c **** 
 527:./Libraries/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:./Libraries/FreeRTOS/Source/tasks.c **** 
 529:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 530:./Libraries/FreeRTOS/Source/tasks.c **** 
 531:./Libraries/FreeRTOS/Source/tasks.c **** /*
 532:./Libraries/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:./Libraries/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:./Libraries/FreeRTOS/Source/tasks.c ****  */
 535:./Libraries/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:./Libraries/FreeRTOS/Source/tasks.c **** 
 537:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:./Libraries/FreeRTOS/Source/tasks.c **** 
 539:./Libraries/FreeRTOS/Source/tasks.c **** 	/*
 540:./Libraries/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:./Libraries/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:./Libraries/FreeRTOS/Source/tasks.c **** 	 */
 543:./Libraries/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:./Libraries/FreeRTOS/Source/tasks.c **** 
 545:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 546:./Libraries/FreeRTOS/Source/tasks.c **** 
 547:./Libraries/FreeRTOS/Source/tasks.c **** /*
 548:./Libraries/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:./Libraries/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  /tmp/ccpNfLZa.s 			page 13


 550:./Libraries/FreeRTOS/Source/tasks.c ****  */
 551:./Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:./Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:./Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:./Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:./Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:./Libraries/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:./Libraries/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:./Libraries/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:./Libraries/FreeRTOS/Source/tasks.c **** 
 560:./Libraries/FreeRTOS/Source/tasks.c **** /*
 561:./Libraries/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:./Libraries/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:./Libraries/FreeRTOS/Source/tasks.c ****  */
 564:./Libraries/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:./Libraries/FreeRTOS/Source/tasks.c **** 
 566:./Libraries/FreeRTOS/Source/tasks.c **** /*
 567:./Libraries/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:./Libraries/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:./Libraries/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:./Libraries/FreeRTOS/Source/tasks.c ****  */
 571:./Libraries/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:./Libraries/FreeRTOS/Source/tasks.c **** 
 573:./Libraries/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:./Libraries/FreeRTOS/Source/tasks.c **** 
 575:./Libraries/FreeRTOS/Source/tasks.c **** #endif
 576:./Libraries/FreeRTOS/Source/tasks.c **** 
 577:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:./Libraries/FreeRTOS/Source/tasks.c **** 
 579:./Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:./Libraries/FreeRTOS/Source/tasks.c **** 
 581:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:./Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:./Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:./Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:./Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:./Libraries/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:./Libraries/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 588 2
 156              		.cfi_startproc
 157              		@ args = 12, pretend = 0, frame = 40
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8EB0     		sub	sp, sp, #56
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 64
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 48
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccpNfLZa.s 			page 14


 173 000c 3B60     		str	r3, [r7]
 589:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:./Libraries/FreeRTOS/Source/tasks.c **** 
 592:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 174              		.loc 1 592 3
 175 000e 7B6B     		ldr	r3, [r7, #52]
 176 0010 002B     		cmp	r3, #0
 177 0012 0AD1     		bne	.L2
 178              	.LBB119:
 179              	.LBB120:
 180              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 15


  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
ARM GAS  /tmp/ccpNfLZa.s 			page 16


 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 17


 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 181              		.loc 2 195 2
 182              		.syntax unified
 183              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 184 0014 4FF05003 			mov r3, #80												
 185 0018 83F31188 		msr basepri, r3											
 186 001c BFF36F8F 		isb														
 187 0020 BFF34F8F 		dsb														
 188              	
 189              	@ 0 "" 2
 190              		.thumb
 191              		.syntax unified
 192 0024 3B62     		str	r3, [r7, #32]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 193              		.loc 2 203 1
ARM GAS  /tmp/ccpNfLZa.s 			page 18


 194 0026 00BF     		nop
 195              	.L3:
 196              	.LBE120:
 197              	.LBE119:
 198              		.loc 1 592 3 discriminator 1
 199 0028 FEE7     		b	.L3
 200              	.L2:
 593:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 201              		.loc 1 593 3
 202 002a BB6B     		ldr	r3, [r7, #56]
 203 002c 002B     		cmp	r3, #0
 204 002e 0AD1     		bne	.L4
 205              	.LBB121:
 206              	.LBB122:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 207              		.loc 2 195 2
 208              		.syntax unified
 209              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 210 0030 4FF05003 			mov r3, #80												
 211 0034 83F31188 		msr basepri, r3											
 212 0038 BFF36F8F 		isb														
 213 003c BFF34F8F 		dsb														
 214              	
 215              	@ 0 "" 2
 216              		.thumb
 217              		.syntax unified
 218 0040 FB61     		str	r3, [r7, #28]
 219              		.loc 2 203 1
 220 0042 00BF     		nop
 221              	.L5:
 222              	.LBE122:
 223              	.LBE121:
 224              		.loc 1 593 3 discriminator 2
 225 0044 FEE7     		b	.L5
 226              	.L4:
 227              	.LBB123:
 594:./Libraries/FreeRTOS/Source/tasks.c **** 
 595:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 597:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:./Libraries/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:./Libraries/FreeRTOS/Source/tasks.c **** 			structure. */
 600:./Libraries/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 228              		.loc 1 600 20
 229 0046 5C23     		movs	r3, #92
 230 0048 3B61     		str	r3, [r7, #16]
 601:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 231              		.loc 1 601 4
 232 004a 3B69     		ldr	r3, [r7, #16]
 233 004c 5C2B     		cmp	r3, #92
 234 004e 0AD0     		beq	.L6
 235              	.LBB124:
 236              	.LBB125:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 237              		.loc 2 195 2
 238              		.syntax unified
 239              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccpNfLZa.s 			page 19


 240 0050 4FF05003 			mov r3, #80												
 241 0054 83F31188 		msr basepri, r3											
 242 0058 BFF36F8F 		isb														
 243 005c BFF34F8F 		dsb														
 244              	
 245              	@ 0 "" 2
 246              		.thumb
 247              		.syntax unified
 248 0060 BB61     		str	r3, [r7, #24]
 249              		.loc 2 203 1
 250 0062 00BF     		nop
 251              	.L7:
 252              	.LBE125:
 253              	.LBE124:
 254              		.loc 1 601 4 discriminator 3
 255 0064 FEE7     		b	.L7
 256              	.L6:
 602:./Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 257              		.loc 1 602 4
 258 0066 3B69     		ldr	r3, [r7, #16]
 259              	.LBE123:
 603:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 604:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:./Libraries/FreeRTOS/Source/tasks.c **** 
 606:./Libraries/FreeRTOS/Source/tasks.c **** 
 607:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 260              		.loc 1 607 5
 261 0068 BB6B     		ldr	r3, [r7, #56]
 262 006a 002B     		cmp	r3, #0
 263 006c 1ED0     		beq	.L8
 264              		.loc 1 607 32 discriminator 1
 265 006e 7B6B     		ldr	r3, [r7, #52]
 266 0070 002B     		cmp	r3, #0
 267 0072 1BD0     		beq	.L8
 608:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 609:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:./Libraries/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 268              		.loc 1 611 13
 269 0074 BB6B     		ldr	r3, [r7, #56]
 270 0076 7B62     		str	r3, [r7, #36]
 612:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 271              		.loc 1 612 22
 272 0078 7B6A     		ldr	r3, [r7, #36]
 273 007a 7A6B     		ldr	r2, [r7, #52]
 274 007c 1A63     		str	r2, [r3, #48]
 613:./Libraries/FreeRTOS/Source/tasks.c **** 
 614:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 616:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:./Libraries/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 275              		.loc 1 618 37
 276 007e 7B6A     		ldr	r3, [r7, #36]
 277 0080 0222     		movs	r2, #2
 278 0082 83F85920 		strb	r2, [r3, #89]
 619:./Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccpNfLZa.s 			page 20


 620:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:./Libraries/FreeRTOS/Source/tasks.c **** 
 622:./Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 279              		.loc 1 622 4
 280 0086 0023     		movs	r3, #0
 281 0088 0393     		str	r3, [sp, #12]
 282 008a 7B6A     		ldr	r3, [r7, #36]
 283 008c 0293     		str	r3, [sp, #8]
 284 008e 07F11403 		add	r3, r7, #20
 285 0092 0193     		str	r3, [sp, #4]
 286 0094 3B6B     		ldr	r3, [r7, #48]
 287 0096 0093     		str	r3, [sp]
 288 0098 3B68     		ldr	r3, [r7]
 289 009a 7A68     		ldr	r2, [r7, #4]
 290 009c B968     		ldr	r1, [r7, #8]
 291 009e F868     		ldr	r0, [r7, #12]
 292 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 623:./Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 293              		.loc 1 623 4
 294 00a4 786A     		ldr	r0, [r7, #36]
 295 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 296 00aa 01E0     		b	.L9
 297              	.L8:
 624:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 625:./Libraries/FreeRTOS/Source/tasks.c **** 		else
 626:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 627:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 298              		.loc 1 627 12
 299 00ac 0023     		movs	r3, #0
 300 00ae 7B61     		str	r3, [r7, #20]
 301              	.L9:
 628:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 629:./Libraries/FreeRTOS/Source/tasks.c **** 
 630:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 302              		.loc 1 630 10
 303 00b0 7B69     		ldr	r3, [r7, #20]
 631:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 304              		.loc 1 631 2
 305 00b2 1846     		mov	r0, r3
 306 00b4 2837     		adds	r7, r7, #40
 307              	.LCFI3:
 308              		.cfi_def_cfa_offset 8
 309 00b6 BD46     		mov	sp, r7
 310              	.LCFI4:
 311              		.cfi_def_cfa_register 13
 312              		@ sp needed
 313 00b8 80BD     		pop	{r7, pc}
 314              		.cfi_endproc
 315              	.LFE4:
 317              		.section	.text.xTaskCreate,"ax",%progbits
 318              		.align	1
 319              		.global	xTaskCreate
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv5-d16
 325              	xTaskCreate:
ARM GAS  /tmp/ccpNfLZa.s 			page 21


 326              	.LFB5:
 632:./Libraries/FreeRTOS/Source/tasks.c **** 
 633:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:./Libraries/FreeRTOS/Source/tasks.c **** 
 636:./Libraries/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:./Libraries/FreeRTOS/Source/tasks.c **** 
 638:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 640:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:./Libraries/FreeRTOS/Source/tasks.c **** 
 643:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:./Libraries/FreeRTOS/Source/tasks.c **** 
 646:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 648:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:./Libraries/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:./Libraries/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:./Libraries/FreeRTOS/Source/tasks.c **** 
 653:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:./Libraries/FreeRTOS/Source/tasks.c **** 
 656:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 658:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:./Libraries/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 662:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:./Libraries/FreeRTOS/Source/tasks.c **** 
 664:./Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:./Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:./Libraries/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:./Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:./Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:./Libraries/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:./Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:./Libraries/FreeRTOS/Source/tasks.c **** 
 672:./Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 675:./Libraries/FreeRTOS/Source/tasks.c **** 
 676:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 678:./Libraries/FreeRTOS/Source/tasks.c **** 
 679:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:./Libraries/FreeRTOS/Source/tasks.c **** 
 682:./Libraries/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:./Libraries/FreeRTOS/Source/tasks.c **** 
 684:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 686:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  /tmp/ccpNfLZa.s 			page 22


 688:./Libraries/FreeRTOS/Source/tasks.c **** 
 689:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:./Libraries/FreeRTOS/Source/tasks.c **** 
 691:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 693:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:./Libraries/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:./Libraries/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:./Libraries/FreeRTOS/Source/tasks.c **** 
 698:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 700:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:./Libraries/FreeRTOS/Source/tasks.c **** 
 703:./Libraries/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 705:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:./Libraries/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:./Libraries/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:./Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 710:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:./Libraries/FreeRTOS/Source/tasks.c **** 
 712:./Libraries/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:./Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:./Libraries/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:./Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:./Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:./Libraries/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:./Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:./Libraries/FreeRTOS/Source/tasks.c **** 
 720:./Libraries/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 723:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 724:./Libraries/FreeRTOS/Source/tasks.c **** 
 725:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 727:./Libraries/FreeRTOS/Source/tasks.c **** 
 728:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:./Libraries/FreeRTOS/Source/tasks.c **** 
 731:./Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:./Libraries/FreeRTOS/Source/tasks.c **** 
 733:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:./Libraries/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:./Libraries/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:./Libraries/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:./Libraries/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:./Libraries/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 739 2
 328              		.cfi_startproc
 329              		@ args = 8, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccpNfLZa.s 			page 23


 332              	.LCFI5:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 8CB0     		sub	sp, sp, #48
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 56
 339 0004 04AF     		add	r7, sp, #16
 340              	.LCFI7:
 341              		.cfi_def_cfa 7, 40
 342 0006 F860     		str	r0, [r7, #12]
 343 0008 B960     		str	r1, [r7, #8]
 344 000a 3B60     		str	r3, [r7]
 345 000c 1346     		mov	r3, r2	@ movhi
 346 000e FB80     		strh	r3, [r7, #6]	@ movhi
 347              	.LBB126:
 740:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:./Libraries/FreeRTOS/Source/tasks.c **** 
 743:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:./Libraries/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:./Libraries/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 748:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:./Libraries/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:./Libraries/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:./Libraries/FreeRTOS/Source/tasks.c **** 
 753:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 755:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:./Libraries/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:./Libraries/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:./Libraries/FreeRTOS/Source/tasks.c **** 
 760:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 762:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:./Libraries/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:./Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 766:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 767:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 768:./Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 770:./Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:./Libraries/FreeRTOS/Source/tasks.c **** 
 772:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:./Libraries/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 348              		.loc 1 773 32
 349 0010 FB88     		ldrh	r3, [r7, #6]
 350              		.loc 1 773 14
 351 0012 9B00     		lsls	r3, r3, #2
 352 0014 1846     		mov	r0, r3
 353 0016 FFF7FEFF 		bl	pvPortMalloc
 354 001a 7861     		str	r0, [r7, #20]
ARM GAS  /tmp/ccpNfLZa.s 			page 24


 774:./Libraries/FreeRTOS/Source/tasks.c **** 
 775:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 355              		.loc 1 775 6
 356 001c 7B69     		ldr	r3, [r7, #20]
 357 001e 002B     		cmp	r3, #0
 358 0020 0ED0     		beq	.L12
 776:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 777:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 359              		.loc 1 778 28
 360 0022 5C20     		movs	r0, #92
 361 0024 FFF7FEFF 		bl	pvPortMalloc
 362 0028 F861     		str	r0, [r7, #28]
 779:./Libraries/FreeRTOS/Source/tasks.c **** 
 780:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 363              		.loc 1 780 7
 364 002a FB69     		ldr	r3, [r7, #28]
 365 002c 002B     		cmp	r3, #0
 366 002e 03D0     		beq	.L13
 781:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 782:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:./Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 367              		.loc 1 783 24
 368 0030 FB69     		ldr	r3, [r7, #28]
 369 0032 7A69     		ldr	r2, [r7, #20]
 370 0034 1A63     		str	r2, [r3, #48]
 371 0036 05E0     		b	.L14
 372              	.L13:
 784:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 785:./Libraries/FreeRTOS/Source/tasks.c **** 				else
 786:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 787:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:./Libraries/FreeRTOS/Source/tasks.c **** 					it again. */
 789:./Libraries/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 373              		.loc 1 789 6
 374 0038 7869     		ldr	r0, [r7, #20]
 375 003a FFF7FEFF 		bl	vPortFree
 376 003e 01E0     		b	.L14
 377              	.L12:
 790:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 791:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 792:./Libraries/FreeRTOS/Source/tasks.c **** 			else
 793:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 794:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 378              		.loc 1 794 14
 379 0040 0023     		movs	r3, #0
 380 0042 FB61     		str	r3, [r7, #28]
 381              	.L14:
 382              	.LBE126:
 795:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 796:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 797:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:./Libraries/FreeRTOS/Source/tasks.c **** 
 799:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 383              		.loc 1 799 5
 384 0044 FB69     		ldr	r3, [r7, #28]
 385 0046 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 25


 386 0048 17D0     		beq	.L15
 800:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 801:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 803:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:./Libraries/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 387              		.loc 1 805 37
 388 004a FB69     		ldr	r3, [r7, #28]
 389 004c 0022     		movs	r2, #0
 390 004e 83F85920 		strb	r2, [r3, #89]
 806:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 807:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:./Libraries/FreeRTOS/Source/tasks.c **** 
 809:./Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 391              		.loc 1 809 4
 392 0052 FA88     		ldrh	r2, [r7, #6]
 393 0054 0023     		movs	r3, #0
 394 0056 0393     		str	r3, [sp, #12]
 395 0058 FB69     		ldr	r3, [r7, #28]
 396 005a 0293     		str	r3, [sp, #8]
 397 005c FB6A     		ldr	r3, [r7, #44]
 398 005e 0193     		str	r3, [sp, #4]
 399 0060 BB6A     		ldr	r3, [r7, #40]
 400 0062 0093     		str	r3, [sp]
 401 0064 3B68     		ldr	r3, [r7]
 402 0066 B968     		ldr	r1, [r7, #8]
 403 0068 F868     		ldr	r0, [r7, #12]
 404 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:./Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 405              		.loc 1 810 4
 406 006e F869     		ldr	r0, [r7, #28]
 407 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 408              		.loc 1 811 12
 409 0074 0123     		movs	r3, #1
 410 0076 BB61     		str	r3, [r7, #24]
 411 0078 02E0     		b	.L16
 412              	.L15:
 812:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 813:./Libraries/FreeRTOS/Source/tasks.c **** 		else
 814:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 815:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 413              		.loc 1 815 12
 414 007a 4FF0FF33 		mov	r3, #-1
 415 007e BB61     		str	r3, [r7, #24]
 416              	.L16:
 816:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 817:./Libraries/FreeRTOS/Source/tasks.c **** 
 818:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 417              		.loc 1 818 10
 418 0080 BB69     		ldr	r3, [r7, #24]
 819:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 419              		.loc 1 819 2
 420 0082 1846     		mov	r0, r3
 421 0084 2037     		adds	r7, r7, #32
 422              	.LCFI8:
ARM GAS  /tmp/ccpNfLZa.s 			page 26


 423              		.cfi_def_cfa_offset 8
 424 0086 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0088 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu fpv5-d16
 439              	prvInitialiseNewTask:
 440              	.LFB6:
 820:./Libraries/FreeRTOS/Source/tasks.c **** 
 821:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:./Libraries/FreeRTOS/Source/tasks.c **** 
 824:./Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:./Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:./Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:./Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:./Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:./Libraries/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:./Libraries/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:./Libraries/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:./Libraries/FreeRTOS/Source/tasks.c **** {
 441              		.loc 1 832 1
 442              		.cfi_startproc
 443              		@ args = 16, pretend = 0, frame = 32
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445 0000 80B5     		push	{r7, lr}
 446              	.LCFI10:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 88B0     		sub	sp, sp, #32
 451              	.LCFI11:
 452              		.cfi_def_cfa_offset 40
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI12:
 455              		.cfi_def_cfa_register 7
 456 0006 F860     		str	r0, [r7, #12]
 457 0008 B960     		str	r1, [r7, #8]
 458 000a 7A60     		str	r2, [r7, #4]
 459 000c 3B60     		str	r3, [r7]
 833:./Libraries/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:./Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:./Libraries/FreeRTOS/Source/tasks.c **** 
 836:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:./Libraries/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 841:./Libraries/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
ARM GAS  /tmp/ccpNfLZa.s 			page 27


 842:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 843:./Libraries/FreeRTOS/Source/tasks.c **** 		else
 844:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 845:./Libraries/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 847:./Libraries/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:./Libraries/FreeRTOS/Source/tasks.c **** 
 850:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 853:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 460              		.loc 1 854 28
 461 000e 3B6B     		ldr	r3, [r7, #48]
 462 0010 186B     		ldr	r0, [r3, #48]
 463              		.loc 1 854 12
 464 0012 7B68     		ldr	r3, [r7, #4]
 465 0014 9B00     		lsls	r3, r3, #2
 466 0016 1A46     		mov	r2, r3
 467 0018 A521     		movs	r1, #165
 468 001a FFF7FEFF 		bl	memset
 855:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 856:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:./Libraries/FreeRTOS/Source/tasks.c **** 
 858:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:./Libraries/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:./Libraries/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:./Libraries/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 864:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 469              		.loc 1 864 29
 470 001e 3B6B     		ldr	r3, [r7, #48]
 471 0020 1A6B     		ldr	r2, [r3, #48]
 472              		.loc 1 864 38
 473 0022 7968     		ldr	r1, [r7, #4]
 474 0024 6FF04043 		mvn	r3, #-1073741824
 475 0028 0B44     		add	r3, r3, r1
 476 002a 9B00     		lsls	r3, r3, #2
 477              		.loc 1 864 16
 478 002c 1344     		add	r3, r3, r2
 479 002e BB61     		str	r3, [r7, #24]
 865:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 480              		.loc 1 865 40
 481 0030 BB69     		ldr	r3, [r7, #24]
 482              		.loc 1 865 81
 483 0032 23F00703 		bic	r3, r3, #7
 484              		.loc 1 865 16
 485 0036 BB61     		str	r3, [r7, #24]
 866:./Libraries/FreeRTOS/Source/tasks.c **** 
 867:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 486              		.loc 1 868 3
 487 0038 BB69     		ldr	r3, [r7, #24]
 488 003a 03F00703 		and	r3, r3, #7
 489 003e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 28


 490 0040 0AD0     		beq	.L19
 491              	.LBB127:
 492              	.LBB128:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 493              		.loc 2 195 2
 494              		.syntax unified
 495              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 496 0042 4FF05003 			mov r3, #80												
 497 0046 83F31188 		msr basepri, r3											
 498 004a BFF36F8F 		isb														
 499 004e BFF34F8F 		dsb														
 500              	
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504 0052 7B61     		str	r3, [r7, #20]
 505              		.loc 2 203 1
 506 0054 00BF     		nop
 507              	.L20:
 508              	.LBE128:
 509              	.LBE127:
 510              		.loc 1 868 3 discriminator 1
 511 0056 FEE7     		b	.L20
 512              	.L19:
 869:./Libraries/FreeRTOS/Source/tasks.c **** 
 870:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 872:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:./Libraries/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 876:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 878:./Libraries/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 880:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:./Libraries/FreeRTOS/Source/tasks.c **** 
 882:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:./Libraries/FreeRTOS/Source/tasks.c **** 
 885:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:./Libraries/FreeRTOS/Source/tasks.c **** 		performed. */
 887:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 889:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:./Libraries/FreeRTOS/Source/tasks.c **** 
 891:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:./Libraries/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 513              		.loc 1 892 4
 514 0058 BB68     		ldr	r3, [r7, #8]
 515 005a 002B     		cmp	r3, #0
 516 005c 1FD0     		beq	.L21
 893:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 894:./Libraries/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 517              		.loc 1 894 10
 518 005e 0023     		movs	r3, #0
 519 0060 FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/ccpNfLZa.s 			page 29


 520              		.loc 1 894 3
 521 0062 12E0     		b	.L22
 522              	.L25:
 895:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 896:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 523              		.loc 1 896 38
 524 0064 BA68     		ldr	r2, [r7, #8]
 525 0066 FB69     		ldr	r3, [r7, #28]
 526 0068 1344     		add	r3, r3, r2
 527 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 528              		.loc 1 896 30
 529 006c 3A6B     		ldr	r2, [r7, #48]
 530 006e FB69     		ldr	r3, [r7, #28]
 531 0070 1344     		add	r3, r3, r2
 532 0072 3433     		adds	r3, r3, #52
 533 0074 0A46     		mov	r2, r1
 534 0076 1A70     		strb	r2, [r3]
 897:./Libraries/FreeRTOS/Source/tasks.c **** 
 898:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:./Libraries/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:./Libraries/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 535              		.loc 1 901 14
 536 0078 BA68     		ldr	r2, [r7, #8]
 537 007a FB69     		ldr	r3, [r7, #28]
 538 007c 1344     		add	r3, r3, r2
 539 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540              		.loc 1 901 6
 541 0080 002B     		cmp	r3, #0
 542 0082 06D0     		beq	.L29
 894:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 543              		.loc 1 894 77 discriminator 2
 544 0084 FB69     		ldr	r3, [r7, #28]
 545 0086 0133     		adds	r3, r3, #1
 546 0088 FB61     		str	r3, [r7, #28]
 547              	.L22:
 894:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 548              		.loc 1 894 3 discriminator 1
 549 008a FB69     		ldr	r3, [r7, #28]
 550 008c 0F2B     		cmp	r3, #15
 551 008e E9D9     		bls	.L25
 552 0090 00E0     		b	.L24
 553              	.L29:
 902:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 903:./Libraries/FreeRTOS/Source/tasks.c **** 				break;
 554              		.loc 1 903 5
 555 0092 00BF     		nop
 556              	.L24:
 904:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 905:./Libraries/FreeRTOS/Source/tasks.c **** 			else
 906:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 907:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 909:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 910:./Libraries/FreeRTOS/Source/tasks.c **** 
 911:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:./Libraries/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
ARM GAS  /tmp/ccpNfLZa.s 			page 30


 913:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 557              		.loc 1 913 55
 558 0094 3B6B     		ldr	r3, [r7, #48]
 559 0096 0022     		movs	r2, #0
 560 0098 83F84320 		strb	r2, [r3, #67]
 561 009c 03E0     		b	.L26
 562              	.L21:
 914:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 915:./Libraries/FreeRTOS/Source/tasks.c **** 	else
 916:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 917:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:./Libraries/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 563              		.loc 1 919 29
 564 009e 3B6B     		ldr	r3, [r7, #48]
 565 00a0 0022     		movs	r2, #0
 566 00a2 83F83420 		strb	r2, [r3, #52]
 567              	.L26:
 920:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 921:./Libraries/FreeRTOS/Source/tasks.c **** 
 922:./Libraries/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:./Libraries/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:./Libraries/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 568              		.loc 1 924 4
 569 00a6 BB6A     		ldr	r3, [r7, #40]
 570 00a8 372B     		cmp	r3, #55
 571 00aa 01D9     		bls	.L27
 925:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 926:./Libraries/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 572              		.loc 1 926 14
 573 00ac 3723     		movs	r3, #55
 574 00ae BB62     		str	r3, [r7, #40]
 575              	.L27:
 927:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 928:./Libraries/FreeRTOS/Source/tasks.c **** 	else
 929:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 930:./Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 932:./Libraries/FreeRTOS/Source/tasks.c **** 
 933:./Libraries/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 576              		.loc 1 933 23
 577 00b0 3B6B     		ldr	r3, [r7, #48]
 578 00b2 BA6A     		ldr	r2, [r7, #40]
 579 00b4 DA62     		str	r2, [r3, #44]
 934:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 936:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 580              		.loc 1 936 28
 581 00b6 3B6B     		ldr	r3, [r7, #48]
 582 00b8 BA6A     		ldr	r2, [r7, #40]
 583 00ba DA64     		str	r2, [r3, #76]
 937:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 584              		.loc 1 937 27
 585 00bc 3B6B     		ldr	r3, [r7, #48]
 586 00be 0022     		movs	r2, #0
 587 00c0 1A65     		str	r2, [r3, #80]
 938:./Libraries/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccpNfLZa.s 			page 31


 939:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:./Libraries/FreeRTOS/Source/tasks.c **** 
 941:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 588              		.loc 1 941 2
 589 00c2 3B6B     		ldr	r3, [r7, #48]
 590 00c4 0433     		adds	r3, r3, #4
 591 00c6 1846     		mov	r0, r3
 592 00c8 FFF7FEFF 		bl	vListInitialiseItem
 942:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 593              		.loc 1 942 2
 594 00cc 3B6B     		ldr	r3, [r7, #48]
 595 00ce 1833     		adds	r3, r3, #24
 596 00d0 1846     		mov	r0, r3
 597 00d2 FFF7FEFF 		bl	vListInitialiseItem
 943:./Libraries/FreeRTOS/Source/tasks.c **** 
 944:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:./Libraries/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 598              		.loc 1 946 2
 599 00d6 3B6B     		ldr	r3, [r7, #48]
 600 00d8 3A6B     		ldr	r2, [r7, #48]
 601 00da 1A61     		str	r2, [r3, #16]
 947:./Libraries/FreeRTOS/Source/tasks.c **** 
 948:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 602              		.loc 1 949 2
 603 00dc BB6A     		ldr	r3, [r7, #40]
 604 00de C3F13802 		rsb	r2, r3, #56
 605 00e2 3B6B     		ldr	r3, [r7, #48]
 606 00e4 9A61     		str	r2, [r3, #24]
 950:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 607              		.loc 1 950 2
 608 00e6 3B6B     		ldr	r3, [r7, #48]
 609 00e8 3A6B     		ldr	r2, [r7, #48]
 610 00ea 5A62     		str	r2, [r3, #36]
 951:./Libraries/FreeRTOS/Source/tasks.c **** 
 952:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 954:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 956:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:./Libraries/FreeRTOS/Source/tasks.c **** 
 958:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 960:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 962:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:./Libraries/FreeRTOS/Source/tasks.c **** 
 964:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 966:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 968:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:./Libraries/FreeRTOS/Source/tasks.c **** 
 970:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 972:./Libraries/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
ARM GAS  /tmp/ccpNfLZa.s 			page 32


 973:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 974:./Libraries/FreeRTOS/Source/tasks.c **** 	#else
 975:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 976:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 979:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 980:./Libraries/FreeRTOS/Source/tasks.c **** 
 981:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 983:./Libraries/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 985:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 987:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 988:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 989:./Libraries/FreeRTOS/Source/tasks.c **** 
 990:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 992:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 611              		.loc 1 992 29
 612 00ec 3B6B     		ldr	r3, [r7, #48]
 613 00ee 0022     		movs	r2, #0
 614 00f0 5A65     		str	r2, [r3, #84]
 993:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 615              		.loc 1 993 27
 616 00f2 3B6B     		ldr	r3, [r7, #48]
 617 00f4 0022     		movs	r2, #0
 618 00f6 83F85820 		strb	r2, [r3, #88]
 994:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 995:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 996:./Libraries/FreeRTOS/Source/tasks.c **** 
 997:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 999:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:./Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:./Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:./Libraries/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1004:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
1005:./Libraries/FreeRTOS/Source/tasks.c **** 
1006:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1008:./Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1010:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
1011:./Libraries/FreeRTOS/Source/tasks.c **** 
1012:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:./Libraries/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:./Libraries/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:./Libraries/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1018:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:./Libraries/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:./Libraries/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
ARM GAS  /tmp/ccpNfLZa.s 			page 33


1022:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1023:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1025:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1027:./Libraries/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1029:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1031:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1033:./Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1035:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1037:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1039:./Libraries/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1041:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:./Libraries/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:./Libraries/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1046:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1048:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1050:./Libraries/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1052:./Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1054:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1056:./Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1058:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 619              		.loc 1 1058 29
 620 00fa 3A68     		ldr	r2, [r7]
 621 00fc F968     		ldr	r1, [r7, #12]
 622 00fe B869     		ldr	r0, [r7, #24]
 623 0100 FFF7FEFF 		bl	pxPortInitialiseStack
 624 0104 0246     		mov	r2, r0
 625              		.loc 1 1058 27
 626 0106 3B6B     		ldr	r3, [r7, #48]
 627 0108 1A60     		str	r2, [r3]
1059:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1060:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1062:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:./Libraries/FreeRTOS/Source/tasks.c **** 
1064:./Libraries/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 628              		.loc 1 1064 4
 629 010a FB6A     		ldr	r3, [r7, #44]
 630 010c 002B     		cmp	r3, #0
 631 010e 02D0     		beq	.L30
1065:./Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccpNfLZa.s 			page 34


1066:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:./Libraries/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:./Libraries/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 632              		.loc 1 1068 18
 633 0110 FB6A     		ldr	r3, [r7, #44]
 634 0112 3A6B     		ldr	r2, [r7, #48]
 635 0114 1A60     		str	r2, [r3]
 636              	.L30:
1069:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1070:./Libraries/FreeRTOS/Source/tasks.c **** 	else
1071:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1072:./Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1074:./Libraries/FreeRTOS/Source/tasks.c **** }
 637              		.loc 1 1074 1
 638 0116 00BF     		nop
 639 0118 2037     		adds	r7, r7, #32
 640              	.LCFI13:
 641              		.cfi_def_cfa_offset 8
 642 011a BD46     		mov	sp, r7
 643              	.LCFI14:
 644              		.cfi_def_cfa_register 13
 645              		@ sp needed
 646 011c 80BD     		pop	{r7, pc}
 647              		.cfi_endproc
 648              	.LFE6:
 650              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 651              		.align	1
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv5-d16
 657              	prvAddNewTaskToReadyList:
 658              	.LFB7:
1075:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:./Libraries/FreeRTOS/Source/tasks.c **** 
1077:./Libraries/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:./Libraries/FreeRTOS/Source/tasks.c **** {
 659              		.loc 1 1078 1
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663 0000 80B5     		push	{r7, lr}
 664              	.LCFI15:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 82B0     		sub	sp, sp, #8
 669              	.LCFI16:
 670              		.cfi_def_cfa_offset 16
 671 0004 00AF     		add	r7, sp, #0
 672              	.LCFI17:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
1079:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:./Libraries/FreeRTOS/Source/tasks.c **** 	updated. */
1081:./Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccpNfLZa.s 			page 35


 675              		.loc 1 1081 2
 676 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1083:./Libraries/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 677              		.loc 1 1083 25
 678 000c 2D4B     		ldr	r3, .L37
 679 000e 1B68     		ldr	r3, [r3]
 680 0010 0133     		adds	r3, r3, #1
 681 0012 2C4A     		ldr	r2, .L37
 682 0014 1360     		str	r3, [r2]
1084:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 683              		.loc 1 1084 20
 684 0016 2C4B     		ldr	r3, .L37+4
 685 0018 1B68     		ldr	r3, [r3]
 686              		.loc 1 1084 5
 687 001a 002B     		cmp	r3, #0
 688 001c 09D1     		bne	.L32
1085:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1086:./Libraries/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:./Libraries/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:./Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 689              		.loc 1 1088 17
 690 001e 2A4A     		ldr	r2, .L37+4
 691 0020 7B68     		ldr	r3, [r7, #4]
 692 0022 1360     		str	r3, [r2]
1089:./Libraries/FreeRTOS/Source/tasks.c **** 
1090:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 693              		.loc 1 1090 31
 694 0024 274B     		ldr	r3, .L37
 695 0026 1B68     		ldr	r3, [r3]
 696              		.loc 1 1090 6
 697 0028 012B     		cmp	r3, #1
 698 002a 10D1     		bne	.L33
1091:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1092:./Libraries/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:./Libraries/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:./Libraries/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:./Libraries/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 699              		.loc 1 1095 5
 700 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 701 0030 0DE0     		b	.L33
 702              	.L32:
1096:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1097:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1098:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1099:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1101:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1102:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1103:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1104:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:./Libraries/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:./Libraries/FreeRTOS/Source/tasks.c **** 			so far. */
1107:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 703              		.loc 1 1107 26
 704 0032 264B     		ldr	r3, .L37+8
 705 0034 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 36


 706              		.loc 1 1107 6
 707 0036 002B     		cmp	r3, #0
 708 0038 09D1     		bne	.L33
1108:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1109:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 709              		.loc 1 1109 21
 710 003a 234B     		ldr	r3, .L37+4
 711 003c 1B68     		ldr	r3, [r3]
 712 003e DA6A     		ldr	r2, [r3, #44]
 713              		.loc 1 1109 45
 714 0040 7B68     		ldr	r3, [r7, #4]
 715 0042 DB6A     		ldr	r3, [r3, #44]
 716              		.loc 1 1109 7
 717 0044 9A42     		cmp	r2, r3
 718 0046 02D8     		bhi	.L33
1110:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1111:./Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 719              		.loc 1 1111 19
 720 0048 1F4A     		ldr	r2, .L37+4
 721 004a 7B68     		ldr	r3, [r7, #4]
 722 004c 1360     		str	r3, [r2]
 723              	.L33:
1112:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1113:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1114:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1115:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1117:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1118:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1119:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1120:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1122:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1123:./Libraries/FreeRTOS/Source/tasks.c **** 
1124:./Libraries/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 724              		.loc 1 1124 15
 725 004e 204B     		ldr	r3, .L37+12
 726 0050 1B68     		ldr	r3, [r3]
 727 0052 0133     		adds	r3, r3, #1
 728 0054 1E4A     		ldr	r2, .L37+12
 729 0056 1360     		str	r3, [r2]
1125:./Libraries/FreeRTOS/Source/tasks.c **** 
1126:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1128:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:./Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 730              		.loc 1 1129 26
 731 0058 1D4B     		ldr	r3, .L37+12
 732 005a 1A68     		ldr	r2, [r3]
 733 005c 7B68     		ldr	r3, [r7, #4]
 734 005e 5A64     		str	r2, [r3, #68]
1130:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1131:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:./Libraries/FreeRTOS/Source/tasks.c **** 
1134:./Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 735              		.loc 1 1134 3
ARM GAS  /tmp/ccpNfLZa.s 			page 37


 736 0060 7B68     		ldr	r3, [r7, #4]
 737 0062 DA6A     		ldr	r2, [r3, #44]
 738 0064 1B4B     		ldr	r3, .L37+16
 739 0066 1B68     		ldr	r3, [r3]
 740 0068 9A42     		cmp	r2, r3
 741 006a 03D9     		bls	.L34
 742              		.loc 1 1134 3 is_stmt 0 discriminator 1
 743 006c 7B68     		ldr	r3, [r7, #4]
 744 006e DB6A     		ldr	r3, [r3, #44]
 745 0070 184A     		ldr	r2, .L37+16
 746 0072 1360     		str	r3, [r2]
 747              	.L34:
 748              		.loc 1 1134 3 discriminator 3
 749 0074 7B68     		ldr	r3, [r7, #4]
 750 0076 DA6A     		ldr	r2, [r3, #44]
 751 0078 1346     		mov	r3, r2
 752 007a 9B00     		lsls	r3, r3, #2
 753 007c 1344     		add	r3, r3, r2
 754 007e 9B00     		lsls	r3, r3, #2
 755 0080 154A     		ldr	r2, .L37+20
 756 0082 1A44     		add	r2, r2, r3
 757 0084 7B68     		ldr	r3, [r7, #4]
 758 0086 0433     		adds	r3, r3, #4
 759 0088 1946     		mov	r1, r3
 760 008a 1046     		mov	r0, r2
 761 008c FFF7FEFF 		bl	vListInsertEnd
1135:./Libraries/FreeRTOS/Source/tasks.c **** 
1136:./Libraries/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1138:./Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 762              		.loc 1 1138 2 is_stmt 1 discriminator 3
 763 0090 FFF7FEFF 		bl	vPortExitCritical
1139:./Libraries/FreeRTOS/Source/tasks.c **** 
1140:./Libraries/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 764              		.loc 1 1140 24 discriminator 3
 765 0094 0D4B     		ldr	r3, .L37+8
 766 0096 1B68     		ldr	r3, [r3]
 767              		.loc 1 1140 4 discriminator 3
 768 0098 002B     		cmp	r3, #0
 769 009a 0ED0     		beq	.L36
1141:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1142:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:./Libraries/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 770              		.loc 1 1144 19
 771 009c 0A4B     		ldr	r3, .L37+4
 772 009e 1B68     		ldr	r3, [r3]
 773 00a0 DA6A     		ldr	r2, [r3, #44]
 774              		.loc 1 1144 42
 775 00a2 7B68     		ldr	r3, [r7, #4]
 776 00a4 DB6A     		ldr	r3, [r3, #44]
 777              		.loc 1 1144 5
 778 00a6 9A42     		cmp	r2, r3
 779 00a8 07D2     		bcs	.L36
1145:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1146:./Libraries/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 780              		.loc 1 1146 4
ARM GAS  /tmp/ccpNfLZa.s 			page 38


 781 00aa 0C4B     		ldr	r3, .L37+24
 782 00ac 4FF08052 		mov	r2, #268435456
 783 00b0 1A60     		str	r2, [r3]
 784              		.syntax unified
 785              	@ 1146 "./Libraries/FreeRTOS/Source/tasks.c" 1
 786 00b2 BFF34F8F 		dsb
 787              	@ 0 "" 2
 788              	@ 1146 "./Libraries/FreeRTOS/Source/tasks.c" 1
 789 00b6 BFF36F8F 		isb
 790              	@ 0 "" 2
 791              		.thumb
 792              		.syntax unified
 793              	.L36:
1147:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1148:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1149:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1150:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1152:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1153:./Libraries/FreeRTOS/Source/tasks.c **** 	else
1154:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1155:./Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:./Libraries/FreeRTOS/Source/tasks.c **** 	}
1157:./Libraries/FreeRTOS/Source/tasks.c **** }
 794              		.loc 1 1157 1
 795 00ba 00BF     		nop
 796 00bc 0837     		adds	r7, r7, #8
 797              	.LCFI18:
 798              		.cfi_def_cfa_offset 8
 799 00be BD46     		mov	sp, r7
 800              	.LCFI19:
 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 00c0 80BD     		pop	{r7, pc}
 804              	.L38:
 805 00c2 00BF     		.align	2
 806              	.L37:
 807 00c4 00000000 		.word	uxCurrentNumberOfTasks
 808 00c8 00000000 		.word	pxCurrentTCB
 809 00cc 00000000 		.word	xSchedulerRunning
 810 00d0 00000000 		.word	uxTaskNumber
 811 00d4 00000000 		.word	uxTopReadyPriority
 812 00d8 00000000 		.word	pxReadyTasksLists
 813 00dc 04ED00E0 		.word	-536810236
 814              		.cfi_endproc
 815              	.LFE7:
 817              		.section	.text.vTaskDelete,"ax",%progbits
 818              		.align	1
 819              		.global	vTaskDelete
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv5-d16
 825              	vTaskDelete:
 826              	.LFB8:
1158:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 39


1160:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:./Libraries/FreeRTOS/Source/tasks.c **** 
1162:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 827              		.loc 1 1163 2
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 0000 80B5     		push	{r7, lr}
 832              	.LCFI20:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 84B0     		sub	sp, sp, #16
 837              	.LCFI21:
 838              		.cfi_def_cfa_offset 24
 839 0004 00AF     		add	r7, sp, #0
 840              	.LCFI22:
 841              		.cfi_def_cfa_register 7
 842 0006 7860     		str	r0, [r7, #4]
1164:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:./Libraries/FreeRTOS/Source/tasks.c **** 
1166:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 843              		.loc 1 1166 3
 844 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1168:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:./Libraries/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 845              		.loc 1 1170 12
 846 000c 7B68     		ldr	r3, [r7, #4]
 847 000e 002B     		cmp	r3, #0
 848 0010 02D1     		bne	.L40
 849              		.loc 1 1170 12 is_stmt 0 discriminator 1
 850 0012 2C4B     		ldr	r3, .L49
 851 0014 1B68     		ldr	r3, [r3]
 852 0016 00E0     		b	.L41
 853              	.L40:
 854              		.loc 1 1170 12 discriminator 2
 855 0018 7B68     		ldr	r3, [r7, #4]
 856              	.L41:
 857              		.loc 1 1170 10 is_stmt 1 discriminator 4
 858 001a FB60     		str	r3, [r7, #12]
1171:./Libraries/FreeRTOS/Source/tasks.c **** 
1172:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 859              		.loc 1 1173 8 discriminator 4
 860 001c FB68     		ldr	r3, [r7, #12]
 861 001e 0433     		adds	r3, r3, #4
 862 0020 1846     		mov	r0, r3
 863 0022 FFF7FEFF 		bl	uxListRemove
1174:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1175:./Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1177:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1178:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1179:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccpNfLZa.s 			page 40


1180:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1181:./Libraries/FreeRTOS/Source/tasks.c **** 
1182:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 864              		.loc 1 1183 8 discriminator 4
 865 0026 FB68     		ldr	r3, [r7, #12]
 866 0028 9B6A     		ldr	r3, [r3, #40]
 867              		.loc 1 1183 6 discriminator 4
 868 002a 002B     		cmp	r3, #0
 869 002c 04D0     		beq	.L42
1184:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1185:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 870              		.loc 1 1185 14
 871 002e FB68     		ldr	r3, [r7, #12]
 872 0030 1833     		adds	r3, r3, #24
 873 0032 1846     		mov	r0, r3
 874 0034 FFF7FEFF 		bl	uxListRemove
 875              	.L42:
1186:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1187:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1188:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1189:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1191:./Libraries/FreeRTOS/Source/tasks.c **** 
1192:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:./Libraries/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:./Libraries/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:./Libraries/FreeRTOS/Source/tasks.c **** 			not return. */
1196:./Libraries/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 876              		.loc 1 1196 16
 877 0038 234B     		ldr	r3, .L49+4
 878 003a 1B68     		ldr	r3, [r3]
 879 003c 0133     		adds	r3, r3, #1
 880 003e 224A     		ldr	r2, .L49+4
 881 0040 1360     		str	r3, [r2]
1197:./Libraries/FreeRTOS/Source/tasks.c **** 
1198:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 882              		.loc 1 1198 14
 883 0042 204B     		ldr	r3, .L49
 884 0044 1B68     		ldr	r3, [r3]
 885              		.loc 1 1198 6
 886 0046 FA68     		ldr	r2, [r7, #12]
 887 0048 9A42     		cmp	r2, r3
 888 004a 0BD1     		bne	.L43
1199:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1200:./Libraries/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:./Libraries/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:./Libraries/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:./Libraries/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:./Libraries/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:./Libraries/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 889              		.loc 1 1205 5
 890 004c FB68     		ldr	r3, [r7, #12]
 891 004e 0433     		adds	r3, r3, #4
 892 0050 1946     		mov	r1, r3
 893 0052 1E48     		ldr	r0, .L49+8
 894 0054 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccpNfLZa.s 			page 41


1206:./Libraries/FreeRTOS/Source/tasks.c **** 
1207:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:./Libraries/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:./Libraries/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:./Libraries/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 895              		.loc 1 1210 5
 896 0058 1D4B     		ldr	r3, .L49+12
 897 005a 1B68     		ldr	r3, [r3]
 898 005c 0133     		adds	r3, r3, #1
 899 005e 1C4A     		ldr	r2, .L49+12
 900 0060 1360     		str	r3, [r2]
 901 0062 09E0     		b	.L44
 902              	.L43:
1211:./Libraries/FreeRTOS/Source/tasks.c **** 
1212:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:./Libraries/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:./Libraries/FreeRTOS/Source/tasks.c **** 
1216:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:./Libraries/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:./Libraries/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:./Libraries/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:./Libraries/FreeRTOS/Source/tasks.c **** 				required. */
1221:./Libraries/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1223:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1224:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1225:./Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 903              		.loc 1 1225 5
 904 0064 1B4B     		ldr	r3, .L49+16
 905 0066 1B68     		ldr	r3, [r3]
 906 0068 013B     		subs	r3, r3, #1
 907 006a 1A4A     		ldr	r2, .L49+16
 908 006c 1360     		str	r3, [r2]
1226:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:./Libraries/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 909              		.loc 1 1227 5
 910 006e F868     		ldr	r0, [r7, #12]
 911 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:./Libraries/FreeRTOS/Source/tasks.c **** 
1229:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:./Libraries/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:./Libraries/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 912              		.loc 1 1231 5
 913 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 914              	.L44:
1232:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1233:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1234:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 915              		.loc 1 1234 3
 916 0078 FFF7FEFF 		bl	vPortExitCritical
1235:./Libraries/FreeRTOS/Source/tasks.c **** 
1236:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:./Libraries/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 917              		.loc 1 1238 25
 918 007c 164B     		ldr	r3, .L49+20
ARM GAS  /tmp/ccpNfLZa.s 			page 42


 919 007e 1B68     		ldr	r3, [r3]
 920              		.loc 1 1238 5
 921 0080 002B     		cmp	r3, #0
 922 0082 1BD0     		beq	.L48
1239:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1240:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 923              		.loc 1 1240 14
 924 0084 0F4B     		ldr	r3, .L49
 925 0086 1B68     		ldr	r3, [r3]
 926              		.loc 1 1240 6
 927 0088 FA68     		ldr	r2, [r7, #12]
 928 008a 9A42     		cmp	r2, r3
 929 008c 16D1     		bne	.L48
1241:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1242:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 930              		.loc 1 1242 5
 931 008e 134B     		ldr	r3, .L49+24
 932 0090 1B68     		ldr	r3, [r3]
 933 0092 002B     		cmp	r3, #0
 934 0094 0AD0     		beq	.L46
 935              	.LBB129:
 936              	.LBB130:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 937              		.loc 2 195 2
 938              		.syntax unified
 939              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 940 0096 4FF05003 			mov r3, #80												
 941 009a 83F31188 		msr basepri, r3											
 942 009e BFF36F8F 		isb														
 943 00a2 BFF34F8F 		dsb														
 944              	
 945              	@ 0 "" 2
 946              		.thumb
 947              		.syntax unified
 948 00a6 BB60     		str	r3, [r7, #8]
 949              		.loc 2 203 1
 950 00a8 00BF     		nop
 951              	.L47:
 952              	.LBE130:
 953              	.LBE129:
 954              		.loc 1 1242 5 discriminator 1
 955 00aa FEE7     		b	.L47
 956              	.L46:
1243:./Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 957              		.loc 1 1243 5
 958 00ac 0C4B     		ldr	r3, .L49+28
 959 00ae 4FF08052 		mov	r2, #268435456
 960 00b2 1A60     		str	r2, [r3]
 961              		.syntax unified
 962              	@ 1243 "./Libraries/FreeRTOS/Source/tasks.c" 1
 963 00b4 BFF34F8F 		dsb
 964              	@ 0 "" 2
 965              	@ 1243 "./Libraries/FreeRTOS/Source/tasks.c" 1
 966 00b8 BFF36F8F 		isb
 967              	@ 0 "" 2
 968              		.thumb
 969              		.syntax unified
ARM GAS  /tmp/ccpNfLZa.s 			page 43


 970              	.L48:
1244:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1245:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1246:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1247:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1249:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1250:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 971              		.loc 1 1250 2
 972 00bc 00BF     		nop
 973 00be 1037     		adds	r7, r7, #16
 974              	.LCFI23:
 975              		.cfi_def_cfa_offset 8
 976 00c0 BD46     		mov	sp, r7
 977              	.LCFI24:
 978              		.cfi_def_cfa_register 13
 979              		@ sp needed
 980 00c2 80BD     		pop	{r7, pc}
 981              	.L50:
 982              		.align	2
 983              	.L49:
 984 00c4 00000000 		.word	pxCurrentTCB
 985 00c8 00000000 		.word	uxTaskNumber
 986 00cc 00000000 		.word	xTasksWaitingTermination
 987 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 988 00d4 00000000 		.word	uxCurrentNumberOfTasks
 989 00d8 00000000 		.word	xSchedulerRunning
 990 00dc 00000000 		.word	uxSchedulerSuspended
 991 00e0 04ED00E0 		.word	-536810236
 992              		.cfi_endproc
 993              	.LFE8:
 995              		.section	.text.vTaskDelayUntil,"ax",%progbits
 996              		.align	1
 997              		.global	vTaskDelayUntil
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1001              		.fpu fpv5-d16
 1003              	vTaskDelayUntil:
 1004              	.LFB9:
1251:./Libraries/FreeRTOS/Source/tasks.c **** 
1252:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:./Libraries/FreeRTOS/Source/tasks.c **** 
1255:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:./Libraries/FreeRTOS/Source/tasks.c **** 
1257:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1005              		.loc 1 1258 2
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 40
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009 0000 80B5     		push	{r7, lr}
 1010              	.LCFI25:
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
ARM GAS  /tmp/ccpNfLZa.s 			page 44


 1014 0002 8AB0     		sub	sp, sp, #40
 1015              	.LCFI26:
 1016              		.cfi_def_cfa_offset 48
 1017 0004 00AF     		add	r7, sp, #0
 1018              	.LCFI27:
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 1021 0008 3960     		str	r1, [r7]
1259:./Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1022              		.loc 1 1260 30
 1023 000a 0023     		movs	r3, #0
 1024 000c 7B62     		str	r3, [r7, #36]
1261:./Libraries/FreeRTOS/Source/tasks.c **** 
1262:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1025              		.loc 1 1262 3
 1026 000e 7B68     		ldr	r3, [r7, #4]
 1027 0010 002B     		cmp	r3, #0
 1028 0012 0AD1     		bne	.L52
 1029              	.LBB131:
 1030              	.LBB132:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1031              		.loc 2 195 2
 1032              		.syntax unified
 1033              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1034 0014 4FF05003 			mov r3, #80												
 1035 0018 83F31188 		msr basepri, r3											
 1036 001c BFF36F8F 		isb														
 1037 0020 BFF34F8F 		dsb														
 1038              	
 1039              	@ 0 "" 2
 1040              		.thumb
 1041              		.syntax unified
 1042 0024 7B61     		str	r3, [r7, #20]
 1043              		.loc 2 203 1
 1044 0026 00BF     		nop
 1045              	.L53:
 1046              	.LBE132:
 1047              	.LBE131:
 1048              		.loc 1 1262 3 discriminator 1
 1049 0028 FEE7     		b	.L53
 1050              	.L52:
1263:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1051              		.loc 1 1263 3
 1052 002a 3B68     		ldr	r3, [r7]
 1053 002c 002B     		cmp	r3, #0
 1054 002e 0AD1     		bne	.L54
 1055              	.LBB133:
 1056              	.LBB134:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1057              		.loc 2 195 2
 1058              		.syntax unified
 1059              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1060 0030 4FF05003 			mov r3, #80												
 1061 0034 83F31188 		msr basepri, r3											
 1062 0038 BFF36F8F 		isb														
 1063 003c BFF34F8F 		dsb														
ARM GAS  /tmp/ccpNfLZa.s 			page 45


 1064              	
 1065              	@ 0 "" 2
 1066              		.thumb
 1067              		.syntax unified
 1068 0040 3B61     		str	r3, [r7, #16]
 1069              		.loc 2 203 1
 1070 0042 00BF     		nop
 1071              	.L55:
 1072              	.LBE134:
 1073              	.LBE133:
 1074              		.loc 1 1263 3 discriminator 2
 1075 0044 FEE7     		b	.L55
 1076              	.L54:
1264:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1077              		.loc 1 1264 3
 1078 0046 2A4B     		ldr	r3, .L64
 1079 0048 1B68     		ldr	r3, [r3]
 1080 004a 002B     		cmp	r3, #0
 1081 004c 0AD0     		beq	.L56
 1082              	.LBB135:
 1083              	.LBB136:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1084              		.loc 2 195 2
 1085              		.syntax unified
 1086              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1087 004e 4FF05003 			mov r3, #80												
 1088 0052 83F31188 		msr basepri, r3											
 1089 0056 BFF36F8F 		isb														
 1090 005a BFF34F8F 		dsb														
 1091              	
 1092              	@ 0 "" 2
 1093              		.thumb
 1094              		.syntax unified
 1095 005e FB60     		str	r3, [r7, #12]
 1096              		.loc 2 203 1
 1097 0060 00BF     		nop
 1098              	.L57:
 1099              	.LBE136:
 1100              	.LBE135:
 1101              		.loc 1 1264 3 discriminator 3
 1102 0062 FEE7     		b	.L57
 1103              	.L56:
1265:./Libraries/FreeRTOS/Source/tasks.c **** 
1266:./Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1104              		.loc 1 1266 3
 1105 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1106              	.LBB137:
1267:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1268:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:./Libraries/FreeRTOS/Source/tasks.c **** 			block. */
1270:./Libraries/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1107              		.loc 1 1270 21
 1108 0068 224B     		ldr	r3, .L64+4
 1109 006a 1B68     		ldr	r3, [r3]
 1110 006c 3B62     		str	r3, [r7, #32]
1271:./Libraries/FreeRTOS/Source/tasks.c **** 
1272:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
ARM GAS  /tmp/ccpNfLZa.s 			page 46


1273:./Libraries/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1111              		.loc 1 1273 18
 1112 006e 7B68     		ldr	r3, [r7, #4]
 1113 0070 1B68     		ldr	r3, [r3]
 1114              		.loc 1 1273 16
 1115 0072 3A68     		ldr	r2, [r7]
 1116 0074 1344     		add	r3, r3, r2
 1117 0076 FB61     		str	r3, [r7, #28]
1274:./Libraries/FreeRTOS/Source/tasks.c **** 
1275:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1118              		.loc 1 1275 26
 1119 0078 7B68     		ldr	r3, [r7, #4]
 1120 007a 1B68     		ldr	r3, [r3]
 1121              		.loc 1 1275 6
 1122 007c 3A6A     		ldr	r2, [r7, #32]
 1123 007e 9A42     		cmp	r2, r3
 1124 0080 0BD2     		bcs	.L58
1276:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1277:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:./Libraries/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:./Libraries/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:./Libraries/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:./Libraries/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:./Libraries/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1125              		.loc 1 1282 25
 1126 0082 7B68     		ldr	r3, [r7, #4]
 1127 0084 1B68     		ldr	r3, [r3]
 1128              		.loc 1 1282 7
 1129 0086 FA69     		ldr	r2, [r7, #28]
 1130 0088 9A42     		cmp	r2, r3
 1131 008a 11D2     		bcs	.L59
 1132              		.loc 1 1282 47 discriminator 1
 1133 008c FA69     		ldr	r2, [r7, #28]
 1134 008e 3B6A     		ldr	r3, [r7, #32]
 1135 0090 9A42     		cmp	r2, r3
 1136 0092 0DD9     		bls	.L59
1283:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1284:./Libraries/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1137              		.loc 1 1284 19
 1138 0094 0123     		movs	r3, #1
 1139 0096 7B62     		str	r3, [r7, #36]
 1140 0098 0AE0     		b	.L59
 1141              	.L58:
1285:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1286:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1287:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1288:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1290:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1291:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1292:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1293:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:./Libraries/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:./Libraries/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:./Libraries/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1142              		.loc 1 1296 25
 1143 009a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccpNfLZa.s 			page 47


 1144 009c 1B68     		ldr	r3, [r3]
 1145              		.loc 1 1296 7
 1146 009e FA69     		ldr	r2, [r7, #28]
 1147 00a0 9A42     		cmp	r2, r3
 1148 00a2 03D3     		bcc	.L60
 1149              		.loc 1 1296 47 discriminator 1
 1150 00a4 FA69     		ldr	r2, [r7, #28]
 1151 00a6 3B6A     		ldr	r3, [r7, #32]
 1152 00a8 9A42     		cmp	r2, r3
 1153 00aa 01D9     		bls	.L59
 1154              	.L60:
1297:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1298:./Libraries/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1155              		.loc 1 1298 19
 1156 00ac 0123     		movs	r3, #1
 1157 00ae 7B62     		str	r3, [r7, #36]
 1158              	.L59:
1299:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1300:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1301:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1302:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1304:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1305:./Libraries/FreeRTOS/Source/tasks.c **** 
1306:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:./Libraries/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1159              		.loc 1 1307 24
 1160 00b0 7B68     		ldr	r3, [r7, #4]
 1161 00b2 FA69     		ldr	r2, [r7, #28]
 1162 00b4 1A60     		str	r2, [r3]
1308:./Libraries/FreeRTOS/Source/tasks.c **** 
1309:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1163              		.loc 1 1309 6
 1164 00b6 7B6A     		ldr	r3, [r7, #36]
 1165 00b8 002B     		cmp	r3, #0
 1166 00ba 06D0     		beq	.L61
1310:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1311:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:./Libraries/FreeRTOS/Source/tasks.c **** 
1313:./Libraries/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:./Libraries/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:./Libraries/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1167              		.loc 1 1315 5
 1168 00bc FA69     		ldr	r2, [r7, #28]
 1169 00be 3B6A     		ldr	r3, [r7, #32]
 1170 00c0 D31A     		subs	r3, r2, r3
 1171 00c2 0021     		movs	r1, #0
 1172 00c4 1846     		mov	r0, r3
 1173 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1174              	.L61:
 1175              	.LBE137:
1316:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1317:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1318:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1319:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1321:./Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccpNfLZa.s 			page 48


1322:./Libraries/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1176              		.loc 1 1322 21
 1177 00ca FFF7FEFF 		bl	xTaskResumeAll
 1178 00ce B861     		str	r0, [r7, #24]
1323:./Libraries/FreeRTOS/Source/tasks.c **** 
1324:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:./Libraries/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1179              		.loc 1 1326 5
 1180 00d0 BB69     		ldr	r3, [r7, #24]
 1181 00d2 002B     		cmp	r3, #0
 1182 00d4 07D1     		bne	.L63
1327:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1328:./Libraries/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1183              		.loc 1 1328 4
 1184 00d6 084B     		ldr	r3, .L64+8
 1185 00d8 4FF08052 		mov	r2, #268435456
 1186 00dc 1A60     		str	r2, [r3]
 1187              		.syntax unified
 1188              	@ 1328 "./Libraries/FreeRTOS/Source/tasks.c" 1
 1189 00de BFF34F8F 		dsb
 1190              	@ 0 "" 2
 1191              	@ 1328 "./Libraries/FreeRTOS/Source/tasks.c" 1
 1192 00e2 BFF36F8F 		isb
 1193              	@ 0 "" 2
 1194              		.thumb
 1195              		.syntax unified
 1196              	.L63:
1329:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1330:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1331:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1332:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1334:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 1197              		.loc 1 1334 2
 1198 00e6 00BF     		nop
 1199 00e8 2837     		adds	r7, r7, #40
 1200              	.LCFI28:
 1201              		.cfi_def_cfa_offset 8
 1202 00ea BD46     		mov	sp, r7
 1203              	.LCFI29:
 1204              		.cfi_def_cfa_register 13
 1205              		@ sp needed
 1206 00ec 80BD     		pop	{r7, pc}
 1207              	.L65:
 1208 00ee 00BF     		.align	2
 1209              	.L64:
 1210 00f0 00000000 		.word	uxSchedulerSuspended
 1211 00f4 00000000 		.word	xTickCount
 1212 00f8 04ED00E0 		.word	-536810236
 1213              		.cfi_endproc
 1214              	.LFE9:
 1216              		.section	.text.vTaskDelay,"ax",%progbits
 1217              		.align	1
 1218              		.global	vTaskDelay
 1219              		.syntax unified
 1220              		.thumb
ARM GAS  /tmp/ccpNfLZa.s 			page 49


 1221              		.thumb_func
 1222              		.fpu fpv5-d16
 1224              	vTaskDelay:
 1225              	.LFB10:
1335:./Libraries/FreeRTOS/Source/tasks.c **** 
1336:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:./Libraries/FreeRTOS/Source/tasks.c **** 
1339:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:./Libraries/FreeRTOS/Source/tasks.c **** 
1341:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1226              		.loc 1 1342 2
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 16
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230 0000 80B5     		push	{r7, lr}
 1231              	.LCFI30:
 1232              		.cfi_def_cfa_offset 8
 1233              		.cfi_offset 7, -8
 1234              		.cfi_offset 14, -4
 1235 0002 84B0     		sub	sp, sp, #16
 1236              	.LCFI31:
 1237              		.cfi_def_cfa_offset 24
 1238 0004 00AF     		add	r7, sp, #0
 1239              	.LCFI32:
 1240              		.cfi_def_cfa_register 7
 1241 0006 7860     		str	r0, [r7, #4]
1343:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1242              		.loc 1 1343 13
 1243 0008 0023     		movs	r3, #0
 1244 000a FB60     		str	r3, [r7, #12]
1344:./Libraries/FreeRTOS/Source/tasks.c **** 
1345:./Libraries/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1245              		.loc 1 1346 5
 1246 000c 7B68     		ldr	r3, [r7, #4]
 1247 000e 002B     		cmp	r3, #0
 1248 0010 17D0     		beq	.L67
1347:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1348:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1249              		.loc 1 1348 4
 1250 0012 134B     		ldr	r3, .L72
 1251 0014 1B68     		ldr	r3, [r3]
 1252 0016 002B     		cmp	r3, #0
 1253 0018 0AD0     		beq	.L68
 1254              	.LBB138:
 1255              	.LBB139:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1256              		.loc 2 195 2
 1257              		.syntax unified
 1258              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1259 001a 4FF05003 			mov r3, #80												
 1260 001e 83F31188 		msr basepri, r3											
 1261 0022 BFF36F8F 		isb														
 1262 0026 BFF34F8F 		dsb														
 1263              	
ARM GAS  /tmp/ccpNfLZa.s 			page 50


 1264              	@ 0 "" 2
 1265              		.thumb
 1266              		.syntax unified
 1267 002a BB60     		str	r3, [r7, #8]
 1268              		.loc 2 203 1
 1269 002c 00BF     		nop
 1270              	.L69:
 1271              	.LBE139:
 1272              	.LBE138:
 1273              		.loc 1 1348 4 discriminator 1
 1274 002e FEE7     		b	.L69
 1275              	.L68:
1349:./Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1276              		.loc 1 1349 4
 1277 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1351:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:./Libraries/FreeRTOS/Source/tasks.c **** 
1353:./Libraries/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:./Libraries/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:./Libraries/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:./Libraries/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:./Libraries/FreeRTOS/Source/tasks.c **** 
1358:./Libraries/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:./Libraries/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:./Libraries/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1278              		.loc 1 1360 5
 1279 0034 0021     		movs	r1, #0
 1280 0036 7868     		ldr	r0, [r7, #4]
 1281 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1362:./Libraries/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1282              		.loc 1 1362 22
 1283 003c FFF7FEFF 		bl	xTaskResumeAll
 1284 0040 F860     		str	r0, [r7, #12]
 1285              	.L67:
1363:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1364:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1365:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1366:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1368:./Libraries/FreeRTOS/Source/tasks.c **** 
1369:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:./Libraries/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1286              		.loc 1 1371 5
 1287 0042 FB68     		ldr	r3, [r7, #12]
 1288 0044 002B     		cmp	r3, #0
 1289 0046 07D1     		bne	.L71
1372:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1373:./Libraries/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1290              		.loc 1 1373 4
 1291 0048 064B     		ldr	r3, .L72+4
 1292 004a 4FF08052 		mov	r2, #268435456
 1293 004e 1A60     		str	r2, [r3]
 1294              		.syntax unified
 1295              	@ 1373 "./Libraries/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccpNfLZa.s 			page 51


 1296 0050 BFF34F8F 		dsb
 1297              	@ 0 "" 2
 1298              	@ 1373 "./Libraries/FreeRTOS/Source/tasks.c" 1
 1299 0054 BFF36F8F 		isb
 1300              	@ 0 "" 2
 1301              		.thumb
 1302              		.syntax unified
 1303              	.L71:
1374:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1375:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1376:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1377:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1379:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 1304              		.loc 1 1379 2
 1305 0058 00BF     		nop
 1306 005a 1037     		adds	r7, r7, #16
 1307              	.LCFI33:
 1308              		.cfi_def_cfa_offset 8
 1309 005c BD46     		mov	sp, r7
 1310              	.LCFI34:
 1311              		.cfi_def_cfa_register 13
 1312              		@ sp needed
 1313 005e 80BD     		pop	{r7, pc}
 1314              	.L73:
 1315              		.align	2
 1316              	.L72:
 1317 0060 00000000 		.word	uxSchedulerSuspended
 1318 0064 04ED00E0 		.word	-536810236
 1319              		.cfi_endproc
 1320              	.LFE10:
 1322              		.section	.text.eTaskGetState,"ax",%progbits
 1323              		.align	1
 1324              		.global	eTaskGetState
 1325              		.syntax unified
 1326              		.thumb
 1327              		.thumb_func
 1328              		.fpu fpv5-d16
 1330              	eTaskGetState:
 1331              	.LFB11:
1380:./Libraries/FreeRTOS/Source/tasks.c **** 
1381:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:./Libraries/FreeRTOS/Source/tasks.c **** 
1384:./Libraries/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:./Libraries/FreeRTOS/Source/tasks.c **** 
1386:./Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1332              		.loc 1 1387 2
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 32
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336 0000 80B5     		push	{r7, lr}
 1337              	.LCFI35:
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
ARM GAS  /tmp/ccpNfLZa.s 			page 52


 1341 0002 88B0     		sub	sp, sp, #32
 1342              	.LCFI36:
 1343              		.cfi_def_cfa_offset 40
 1344 0004 00AF     		add	r7, sp, #0
 1345              	.LCFI37:
 1346              		.cfi_def_cfa_register 7
 1347 0006 7860     		str	r0, [r7, #4]
1388:./Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:./Libraries/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:./Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1348              		.loc 1 1390 22
 1349 0008 7B68     		ldr	r3, [r7, #4]
 1350 000a BB61     		str	r3, [r7, #24]
1391:./Libraries/FreeRTOS/Source/tasks.c **** 
1392:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1351              		.loc 1 1392 3
 1352 000c BB69     		ldr	r3, [r7, #24]
 1353 000e 002B     		cmp	r3, #0
 1354 0010 0AD1     		bne	.L75
 1355              	.LBB140:
 1356              	.LBB141:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1357              		.loc 2 195 2
 1358              		.syntax unified
 1359              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1360 0012 4FF05003 			mov r3, #80												
 1361 0016 83F31188 		msr basepri, r3											
 1362 001a BFF36F8F 		isb														
 1363 001e BFF34F8F 		dsb														
 1364              	
 1365              	@ 0 "" 2
 1366              		.thumb
 1367              		.syntax unified
 1368 0022 BB60     		str	r3, [r7, #8]
 1369              		.loc 2 203 1
 1370 0024 00BF     		nop
 1371              	.L76:
 1372              	.LBE141:
 1373              	.LBE140:
 1374              		.loc 1 1392 3 discriminator 1
 1375 0026 FEE7     		b	.L76
 1376              	.L75:
1393:./Libraries/FreeRTOS/Source/tasks.c **** 
1394:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1377              		.loc 1 1394 13
 1378 0028 234B     		ldr	r3, .L87
 1379 002a 1B68     		ldr	r3, [r3]
 1380              		.loc 1 1394 5
 1381 002c BA69     		ldr	r2, [r7, #24]
 1382 002e 9A42     		cmp	r2, r3
 1383 0030 02D1     		bne	.L77
1395:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1396:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:./Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1384              		.loc 1 1397 12
 1385 0032 0023     		movs	r3, #0
 1386 0034 FB77     		strb	r3, [r7, #31]
ARM GAS  /tmp/ccpNfLZa.s 			page 53


 1387 0036 3AE0     		b	.L78
 1388              	.L77:
1398:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1399:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1400:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1401:./Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1389              		.loc 1 1401 4
 1390 0038 FFF7FEFF 		bl	vPortEnterCritical
1402:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1403:./Libraries/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1391              		.loc 1 1403 17
 1392 003c BB69     		ldr	r3, [r7, #24]
 1393 003e 5B69     		ldr	r3, [r3, #20]
 1394 0040 7B61     		str	r3, [r7, #20]
1404:./Libraries/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1395              		.loc 1 1404 19
 1396 0042 1E4B     		ldr	r3, .L87+4
 1397 0044 1B68     		ldr	r3, [r3]
 1398 0046 3B61     		str	r3, [r7, #16]
1405:./Libraries/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1399              		.loc 1 1405 29
 1400 0048 1D4B     		ldr	r3, .L87+8
 1401 004a 1B68     		ldr	r3, [r3]
 1402 004c FB60     		str	r3, [r7, #12]
1406:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1407:./Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1403              		.loc 1 1407 4
 1404 004e FFF7FEFF 		bl	vPortExitCritical
1408:./Libraries/FreeRTOS/Source/tasks.c **** 
1409:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1405              		.loc 1 1409 6
 1406 0052 7A69     		ldr	r2, [r7, #20]
 1407 0054 3B69     		ldr	r3, [r7, #16]
 1408 0056 9A42     		cmp	r2, r3
 1409 0058 03D0     		beq	.L79
 1410              		.loc 1 1409 41 discriminator 1
 1411 005a 7A69     		ldr	r2, [r7, #20]
 1412 005c FB68     		ldr	r3, [r7, #12]
 1413 005e 9A42     		cmp	r2, r3
 1414 0060 02D1     		bne	.L80
 1415              	.L79:
1410:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1411:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:./Libraries/FreeRTOS/Source/tasks.c **** 				lists. */
1413:./Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1416              		.loc 1 1413 13
 1417 0062 0223     		movs	r3, #2
 1418 0064 FB77     		strb	r3, [r7, #31]
 1419 0066 22E0     		b	.L78
 1420              	.L80:
1414:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1415:./Libraries/FreeRTOS/Source/tasks.c **** 
1416:./Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:./Libraries/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1421              		.loc 1 1417 12
 1422 0068 7B69     		ldr	r3, [r7, #20]
 1423 006a 164A     		ldr	r2, .L87+12
ARM GAS  /tmp/ccpNfLZa.s 			page 54


 1424 006c 9342     		cmp	r3, r2
 1425 006e 12D1     		bne	.L81
1418:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1419:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:./Libraries/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:./Libraries/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:./Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1426              		.loc 1 1422 10
 1427 0070 BB69     		ldr	r3, [r7, #24]
 1428 0072 9B6A     		ldr	r3, [r3, #40]
 1429              		.loc 1 1422 8
 1430 0074 002B     		cmp	r3, #0
 1431 0076 0BD1     		bne	.L82
1423:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1424:./Libraries/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:./Libraries/FreeRTOS/Source/tasks.c **** 						{
1426:./Libraries/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:./Libraries/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:./Libraries/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:./Libraries/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:./Libraries/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1432              		.loc 1 1430 17
 1433 0078 BB69     		ldr	r3, [r7, #24]
 1434 007a 93F85830 		ldrb	r3, [r3, #88]
 1435 007e DBB2     		uxtb	r3, r3
 1436              		.loc 1 1430 10
 1437 0080 012B     		cmp	r3, #1
 1438 0082 02D1     		bne	.L83
1431:./Libraries/FreeRTOS/Source/tasks.c **** 							{
1432:./Libraries/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1439              		.loc 1 1432 17
 1440 0084 0223     		movs	r3, #2
 1441 0086 FB77     		strb	r3, [r7, #31]
 1442 0088 11E0     		b	.L78
 1443              	.L83:
1433:./Libraries/FreeRTOS/Source/tasks.c **** 							}
1434:./Libraries/FreeRTOS/Source/tasks.c **** 							else
1435:./Libraries/FreeRTOS/Source/tasks.c **** 							{
1436:./Libraries/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1444              		.loc 1 1436 17
 1445 008a 0323     		movs	r3, #3
 1446 008c FB77     		strb	r3, [r7, #31]
 1447 008e 0EE0     		b	.L78
 1448              	.L82:
1437:./Libraries/FreeRTOS/Source/tasks.c **** 							}
1438:./Libraries/FreeRTOS/Source/tasks.c **** 						}
1439:./Libraries/FreeRTOS/Source/tasks.c **** 						#else
1440:./Libraries/FreeRTOS/Source/tasks.c **** 						{
1441:./Libraries/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:./Libraries/FreeRTOS/Source/tasks.c **** 						}
1443:./Libraries/FreeRTOS/Source/tasks.c **** 						#endif
1444:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1445:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1446:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1447:./Libraries/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1449              		.loc 1 1447 15
 1450 0090 0223     		movs	r3, #2
ARM GAS  /tmp/ccpNfLZa.s 			page 55


 1451 0092 FB77     		strb	r3, [r7, #31]
 1452 0094 0BE0     		b	.L78
 1453              	.L81:
1448:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1449:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1450:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1451:./Libraries/FreeRTOS/Source/tasks.c **** 
1452:./Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:./Libraries/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1454              		.loc 1 1453 12
 1455 0096 7B69     		ldr	r3, [r7, #20]
 1456 0098 0B4A     		ldr	r2, .L87+16
 1457 009a 9342     		cmp	r3, r2
 1458 009c 02D0     		beq	.L84
 1459              		.loc 1 1453 59 discriminator 1
 1460 009e 7B69     		ldr	r3, [r7, #20]
 1461 00a0 002B     		cmp	r3, #0
 1462 00a2 02D1     		bne	.L85
 1463              	.L84:
1454:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1455:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:./Libraries/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:./Libraries/FreeRTOS/Source/tasks.c **** 					all. */
1458:./Libraries/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1464              		.loc 1 1458 14
 1465 00a4 0423     		movs	r3, #4
 1466 00a6 FB77     		strb	r3, [r7, #31]
 1467 00a8 01E0     		b	.L78
 1468              	.L85:
1459:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1460:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1461:./Libraries/FreeRTOS/Source/tasks.c **** 
1462:./Libraries/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1464:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:./Libraries/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:./Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1469              		.loc 1 1466 13
 1470 00aa 0123     		movs	r3, #1
 1471 00ac FB77     		strb	r3, [r7, #31]
 1472              	.L78:
1467:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1468:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1469:./Libraries/FreeRTOS/Source/tasks.c **** 
1470:./Libraries/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1473              		.loc 1 1470 10
 1474 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:./Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1475              		.loc 1 1471 2
 1476 00b0 1846     		mov	r0, r3
 1477 00b2 2037     		adds	r7, r7, #32
 1478              	.LCFI38:
 1479              		.cfi_def_cfa_offset 8
 1480 00b4 BD46     		mov	sp, r7
 1481              	.LCFI39:
 1482              		.cfi_def_cfa_register 13
 1483              		@ sp needed
ARM GAS  /tmp/ccpNfLZa.s 			page 56


 1484 00b6 80BD     		pop	{r7, pc}
 1485              	.L88:
 1486              		.align	2
 1487              	.L87:
 1488 00b8 00000000 		.word	pxCurrentTCB
 1489 00bc 00000000 		.word	pxDelayedTaskList
 1490 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1491 00c4 00000000 		.word	xSuspendedTaskList
 1492 00c8 00000000 		.word	xTasksWaitingTermination
 1493              		.cfi_endproc
 1494              	.LFE11:
 1496              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1497              		.align	1
 1498              		.global	uxTaskPriorityGet
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv5-d16
 1504              	uxTaskPriorityGet:
 1505              	.LFB12:
1472:./Libraries/FreeRTOS/Source/tasks.c **** 
1473:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:./Libraries/FreeRTOS/Source/tasks.c **** 
1476:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:./Libraries/FreeRTOS/Source/tasks.c **** 
1478:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1506              		.loc 1 1479 2
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 16
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510 0000 80B5     		push	{r7, lr}
 1511              	.LCFI40:
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 84B0     		sub	sp, sp, #16
 1516              	.LCFI41:
 1517              		.cfi_def_cfa_offset 24
 1518 0004 00AF     		add	r7, sp, #0
 1519              	.LCFI42:
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
1480:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:./Libraries/FreeRTOS/Source/tasks.c **** 
1483:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1522              		.loc 1 1483 3
 1523 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1485:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:./Libraries/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1524              		.loc 1 1487 12
 1525 000c 7B68     		ldr	r3, [r7, #4]
 1526 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 57


 1527 0010 02D1     		bne	.L90
 1528              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1529 0012 074B     		ldr	r3, .L93
 1530 0014 1B68     		ldr	r3, [r3]
 1531 0016 00E0     		b	.L91
 1532              	.L90:
 1533              		.loc 1 1487 12 discriminator 2
 1534 0018 7B68     		ldr	r3, [r7, #4]
 1535              	.L91:
 1536              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1537 001a FB60     		str	r3, [r7, #12]
1488:./Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1538              		.loc 1 1488 13 discriminator 4
 1539 001c FB68     		ldr	r3, [r7, #12]
 1540 001e DB6A     		ldr	r3, [r3, #44]
 1541 0020 BB60     		str	r3, [r7, #8]
1489:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1490:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1542              		.loc 1 1490 3 discriminator 4
 1543 0022 FFF7FEFF 		bl	vPortExitCritical
1491:./Libraries/FreeRTOS/Source/tasks.c **** 
1492:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1544              		.loc 1 1492 10 discriminator 4
 1545 0026 BB68     		ldr	r3, [r7, #8]
1493:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 1546              		.loc 1 1493 2 discriminator 4
 1547 0028 1846     		mov	r0, r3
 1548 002a 1037     		adds	r7, r7, #16
 1549              	.LCFI43:
 1550              		.cfi_def_cfa_offset 8
 1551 002c BD46     		mov	sp, r7
 1552              	.LCFI44:
 1553              		.cfi_def_cfa_register 13
 1554              		@ sp needed
 1555 002e 80BD     		pop	{r7, pc}
 1556              	.L94:
 1557              		.align	2
 1558              	.L93:
 1559 0030 00000000 		.word	pxCurrentTCB
 1560              		.cfi_endproc
 1561              	.LFE12:
 1563              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1564              		.align	1
 1565              		.global	uxTaskPriorityGetFromISR
 1566              		.syntax unified
 1567              		.thumb
 1568              		.thumb_func
 1569              		.fpu fpv5-d16
 1571              	uxTaskPriorityGetFromISR:
 1572              	.LFB13:
1494:./Libraries/FreeRTOS/Source/tasks.c **** 
1495:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:./Libraries/FreeRTOS/Source/tasks.c **** 
1498:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:./Libraries/FreeRTOS/Source/tasks.c **** 
1500:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
ARM GAS  /tmp/ccpNfLZa.s 			page 58


1501:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1573              		.loc 1 1501 2
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 32
 1576              		@ frame_needed = 1, uses_anonymous_args = 0
 1577 0000 80B5     		push	{r7, lr}
 1578              	.LCFI45:
 1579              		.cfi_def_cfa_offset 8
 1580              		.cfi_offset 7, -8
 1581              		.cfi_offset 14, -4
 1582 0002 88B0     		sub	sp, sp, #32
 1583              	.LCFI46:
 1584              		.cfi_def_cfa_offset 40
 1585 0004 00AF     		add	r7, sp, #0
 1586              	.LCFI47:
 1587              		.cfi_def_cfa_register 7
 1588 0006 7860     		str	r0, [r7, #4]
1502:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:./Libraries/FreeRTOS/Source/tasks.c **** 
1505:./Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:./Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:./Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:./Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:./Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:./Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:./Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:./Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:./Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:./Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:./Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:./Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:./Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:./Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:./Libraries/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1589              		.loc 1 1521 3
 1590 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1591              	.LBB142:
 1592              	.LBB143:
 204:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1593              		.loc 2 211 2
 1594              		.syntax unified
 1595              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1596 000c EFF31182 			mrs r2, basepri											
 1597 0010 4FF05003 		mov r3, #80												
 1598 0014 83F31188 		msr basepri, r3											
 1599 0018 BFF36F8F 		isb														
 1600 001c BFF34F8F 		dsb														
ARM GAS  /tmp/ccpNfLZa.s 			page 59


 1601              	
 1602              	@ 0 "" 2
 1603              		.thumb
 1604              		.syntax unified
 1605 0020 3A61     		str	r2, [r7, #16]
 1606 0022 FB60     		str	r3, [r7, #12]
 212:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1607              		.loc 2 223 9
 1608 0024 3B69     		ldr	r3, [r7, #16]
 1609              	.LBE143:
 1610              	.LBE142:
1522:./Libraries/FreeRTOS/Source/tasks.c **** 
1523:./Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1611              		.loc 1 1523 27
 1612 0026 FB61     		str	r3, [r7, #28]
1524:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1525:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:./Libraries/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1613              		.loc 1 1527 12
 1614 0028 7B68     		ldr	r3, [r7, #4]
 1615 002a 002B     		cmp	r3, #0
 1616 002c 02D1     		bne	.L97
 1617              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1618 002e 094B     		ldr	r3, .L100
 1619 0030 1B68     		ldr	r3, [r3]
 1620 0032 00E0     		b	.L98
 1621              	.L97:
 1622              		.loc 1 1527 12 discriminator 2
 1623 0034 7B68     		ldr	r3, [r7, #4]
 1624              	.L98:
 1625              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1626 0036 BB61     		str	r3, [r7, #24]
1528:./Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1627              		.loc 1 1528 13 discriminator 4
 1628 0038 BB69     		ldr	r3, [r7, #24]
 1629 003a DB6A     		ldr	r3, [r3, #44]
 1630 003c 7B61     		str	r3, [r7, #20]
 1631 003e FB69     		ldr	r3, [r7, #28]
 1632 0040 BB60     		str	r3, [r7, #8]
 1633              	.LBB144:
 1634              	.LBB145:
 224:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
ARM GAS  /tmp/ccpNfLZa.s 			page 60


 228:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1635              		.loc 2 229 2 discriminator 4
 1636 0042 BB68     		ldr	r3, [r7, #8]
 1637              		.syntax unified
 1638              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1639 0044 83F31188 			msr basepri, r3	
 1640              	@ 0 "" 2
 230:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1641              		.loc 2 233 1 discriminator 4
 1642              		.thumb
 1643              		.syntax unified
 1644 0048 00BF     		nop
 1645              	.LBE145:
 1646              	.LBE144:
1529:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1530:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:./Libraries/FreeRTOS/Source/tasks.c **** 
1532:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1647              		.loc 1 1532 10 discriminator 4
 1648 004a 7B69     		ldr	r3, [r7, #20]
1533:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 1649              		.loc 1 1533 2 discriminator 4
 1650 004c 1846     		mov	r0, r3
 1651 004e 2037     		adds	r7, r7, #32
 1652              	.LCFI48:
 1653              		.cfi_def_cfa_offset 8
 1654 0050 BD46     		mov	sp, r7
 1655              	.LCFI49:
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 0052 80BD     		pop	{r7, pc}
 1659              	.L101:
 1660              		.align	2
 1661              	.L100:
 1662 0054 00000000 		.word	pxCurrentTCB
 1663              		.cfi_endproc
 1664              	.LFE13:
 1666              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1667              		.align	1
 1668              		.global	vTaskPrioritySet
 1669              		.syntax unified
 1670              		.thumb
 1671              		.thumb_func
 1672              		.fpu fpv5-d16
 1674              	vTaskPrioritySet:
 1675              	.LFB14:
1534:./Libraries/FreeRTOS/Source/tasks.c **** 
1535:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:./Libraries/FreeRTOS/Source/tasks.c **** 
1538:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:./Libraries/FreeRTOS/Source/tasks.c **** 
1540:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
ARM GAS  /tmp/ccpNfLZa.s 			page 61


1541:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1676              		.loc 1 1541 2
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 32
 1679              		@ frame_needed = 1, uses_anonymous_args = 0
 1680 0000 80B5     		push	{r7, lr}
 1681              	.LCFI50:
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 88B0     		sub	sp, sp, #32
 1686              	.LCFI51:
 1687              		.cfi_def_cfa_offset 40
 1688 0004 00AF     		add	r7, sp, #0
 1689              	.LCFI52:
 1690              		.cfi_def_cfa_register 7
 1691 0006 7860     		str	r0, [r7, #4]
 1692 0008 3960     		str	r1, [r7]
1542:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1693              		.loc 1 1544 13
 1694 000a 0023     		movs	r3, #0
 1695 000c FB61     		str	r3, [r7, #28]
1545:./Libraries/FreeRTOS/Source/tasks.c **** 
1546:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1696              		.loc 1 1546 3
 1697 000e 3B68     		ldr	r3, [r7]
 1698 0010 372B     		cmp	r3, #55
 1699 0012 0AD9     		bls	.L103
 1700              	.LBB146:
 1701              	.LBB147:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1702              		.loc 2 195 2
 1703              		.syntax unified
 1704              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1705 0014 4FF05003 			mov r3, #80												
 1706 0018 83F31188 		msr basepri, r3											
 1707 001c BFF36F8F 		isb														
 1708 0020 BFF34F8F 		dsb														
 1709              	
 1710              	@ 0 "" 2
 1711              		.thumb
 1712              		.syntax unified
 1713 0024 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1714              		.loc 2 203 1
 1715 0026 00BF     		nop
 1716              	.L104:
 1717              	.LBE147:
 1718              	.LBE146:
 1719              		.loc 1 1546 3 discriminator 1
 1720 0028 FEE7     		b	.L104
 1721              	.L103:
1547:./Libraries/FreeRTOS/Source/tasks.c **** 
1548:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:./Libraries/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
ARM GAS  /tmp/ccpNfLZa.s 			page 62


 1722              		.loc 1 1549 5
 1723 002a 3B68     		ldr	r3, [r7]
 1724 002c 372B     		cmp	r3, #55
 1725 002e 01D9     		bls	.L105
1550:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1551:./Libraries/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1726              		.loc 1 1551 18
 1727 0030 3723     		movs	r3, #55
 1728 0032 3B60     		str	r3, [r7]
 1729              	.L105:
1552:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1553:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1554:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1555:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1557:./Libraries/FreeRTOS/Source/tasks.c **** 
1558:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1730              		.loc 1 1558 3
 1731 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1560:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:./Libraries/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1732              		.loc 1 1562 12
 1733 0038 7B68     		ldr	r3, [r7, #4]
 1734 003a 002B     		cmp	r3, #0
 1735 003c 02D1     		bne	.L106
 1736              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1737 003e 3B4B     		ldr	r3, .L115
 1738 0040 1B68     		ldr	r3, [r3]
 1739 0042 00E0     		b	.L107
 1740              	.L106:
 1741              		.loc 1 1562 12 discriminator 2
 1742 0044 7B68     		ldr	r3, [r7, #4]
 1743              	.L107:
 1744              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1745 0046 BB61     		str	r3, [r7, #24]
1563:./Libraries/FreeRTOS/Source/tasks.c **** 
1564:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:./Libraries/FreeRTOS/Source/tasks.c **** 
1566:./Libraries/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1568:./Libraries/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1746              		.loc 1 1568 27 discriminator 4
 1747 0048 BB69     		ldr	r3, [r7, #24]
 1748 004a DB6C     		ldr	r3, [r3, #76]
 1749 004c 7B61     		str	r3, [r7, #20]
1569:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1570:./Libraries/FreeRTOS/Source/tasks.c **** 			#else
1571:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1572:./Libraries/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1574:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1575:./Libraries/FreeRTOS/Source/tasks.c **** 
1576:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1750              		.loc 1 1576 6 discriminator 4
 1751 004e 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp/ccpNfLZa.s 			page 63


 1752 0050 3B68     		ldr	r3, [r7]
 1753 0052 9A42     		cmp	r2, r3
 1754 0054 63D0     		beq	.L108
1577:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1578:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:./Libraries/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:./Libraries/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1755              		.loc 1 1580 7
 1756 0056 3A68     		ldr	r2, [r7]
 1757 0058 7B69     		ldr	r3, [r7, #20]
 1758 005a 9A42     		cmp	r2, r3
 1759 005c 0DD9     		bls	.L109
1581:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1582:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1760              		.loc 1 1582 16
 1761 005e 334B     		ldr	r3, .L115
 1762 0060 1B68     		ldr	r3, [r3]
 1763              		.loc 1 1582 8
 1764 0062 BA69     		ldr	r2, [r7, #24]
 1765 0064 9A42     		cmp	r2, r3
 1766 0066 0FD0     		beq	.L110
1583:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1584:./Libraries/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:./Libraries/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:./Libraries/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:./Libraries/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1767              		.loc 1 1587 40
 1768 0068 304B     		ldr	r3, .L115
 1769 006a 1B68     		ldr	r3, [r3]
 1770 006c DB6A     		ldr	r3, [r3, #44]
 1771              		.loc 1 1587 9
 1772 006e 3A68     		ldr	r2, [r7]
 1773 0070 9A42     		cmp	r2, r3
 1774 0072 09D3     		bcc	.L110
1588:./Libraries/FreeRTOS/Source/tasks.c **** 						{
1589:./Libraries/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1775              		.loc 1 1589 23
 1776 0074 0123     		movs	r3, #1
 1777 0076 FB61     		str	r3, [r7, #28]
 1778 0078 06E0     		b	.L110
 1779              	.L109:
1590:./Libraries/FreeRTOS/Source/tasks.c **** 						}
1591:./Libraries/FreeRTOS/Source/tasks.c **** 						else
1592:./Libraries/FreeRTOS/Source/tasks.c **** 						{
1593:./Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:./Libraries/FreeRTOS/Source/tasks.c **** 						}
1595:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1596:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1597:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1598:./Libraries/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:./Libraries/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:./Libraries/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1602:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1603:./Libraries/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1780              		.loc 1 1603 20
 1781 007a 2C4B     		ldr	r3, .L115
ARM GAS  /tmp/ccpNfLZa.s 			page 64


 1782 007c 1B68     		ldr	r3, [r3]
 1783              		.loc 1 1603 12
 1784 007e BA69     		ldr	r2, [r7, #24]
 1785 0080 9A42     		cmp	r2, r3
 1786 0082 01D1     		bne	.L110
1604:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1605:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:./Libraries/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:./Libraries/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:./Libraries/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1787              		.loc 1 1608 21
 1788 0084 0123     		movs	r3, #1
 1789 0086 FB61     		str	r3, [r7, #28]
 1790              	.L110:
1609:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1610:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1611:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1612:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:./Libraries/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:./Libraries/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1616:./Libraries/FreeRTOS/Source/tasks.c **** 
1617:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:./Libraries/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:./Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:./Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1791              		.loc 1 1620 27
 1792 0088 BB69     		ldr	r3, [r7, #24]
 1793 008a DB6A     		ldr	r3, [r3, #44]
 1794 008c 3B61     		str	r3, [r7, #16]
1621:./Libraries/FreeRTOS/Source/tasks.c **** 
1622:./Libraries/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1624:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:./Libraries/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1795              		.loc 1 1626 15
 1796 008e BB69     		ldr	r3, [r7, #24]
 1797 0090 DA6C     		ldr	r2, [r3, #76]
 1798              		.loc 1 1626 40
 1799 0092 BB69     		ldr	r3, [r7, #24]
 1800 0094 DB6A     		ldr	r3, [r3, #44]
 1801              		.loc 1 1626 8
 1802 0096 9A42     		cmp	r2, r3
 1803 0098 02D1     		bne	.L111
1627:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1628:./Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1804              		.loc 1 1628 25
 1805 009a BB69     		ldr	r3, [r7, #24]
 1806 009c 3A68     		ldr	r2, [r7]
 1807 009e DA62     		str	r2, [r3, #44]
 1808              	.L111:
1629:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1630:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1631:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1632:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:./Libraries/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccpNfLZa.s 			page 65


1634:./Libraries/FreeRTOS/Source/tasks.c **** 
1635:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1809              		.loc 1 1636 28
 1810 00a0 BB69     		ldr	r3, [r7, #24]
 1811 00a2 3A68     		ldr	r2, [r7]
 1812 00a4 DA64     		str	r2, [r3, #76]
1637:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1638:./Libraries/FreeRTOS/Source/tasks.c **** 				#else
1639:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1640:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1642:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif
1643:./Libraries/FreeRTOS/Source/tasks.c **** 
1644:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:./Libraries/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:./Libraries/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1813              		.loc 1 1646 11
 1814 00a6 BB69     		ldr	r3, [r7, #24]
 1815 00a8 9B69     		ldr	r3, [r3, #24]
 1816              		.loc 1 1646 7
 1817 00aa 002B     		cmp	r3, #0
 1818 00ac 04DB     		blt	.L112
1647:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1648:./Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1819              		.loc 1 1648 6
 1820 00ae 3B68     		ldr	r3, [r7]
 1821 00b0 C3F13802 		rsb	r2, r3, #56
 1822 00b4 BB69     		ldr	r3, [r7, #24]
 1823 00b6 9A61     		str	r2, [r3, #24]
 1824              	.L112:
1649:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1650:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1651:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1652:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1654:./Libraries/FreeRTOS/Source/tasks.c **** 
1655:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:./Libraries/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:./Libraries/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:./Libraries/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:./Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1825              		.loc 1 1659 9
 1826 00b8 BB69     		ldr	r3, [r7, #24]
 1827 00ba 5969     		ldr	r1, [r3, #20]
 1828 00bc 3A69     		ldr	r2, [r7, #16]
 1829 00be 1346     		mov	r3, r2
 1830 00c0 9B00     		lsls	r3, r3, #2
 1831 00c2 1344     		add	r3, r3, r2
 1832 00c4 9B00     		lsls	r3, r3, #2
 1833 00c6 1A4A     		ldr	r2, .L115+4
 1834 00c8 1344     		add	r3, r3, r2
 1835              		.loc 1 1659 7
 1836 00ca 9942     		cmp	r1, r3
 1837 00cc 1CD1     		bne	.L113
1660:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1661:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
ARM GAS  /tmp/ccpNfLZa.s 			page 66


1662:./Libraries/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:./Libraries/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:./Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1838              		.loc 1 1664 10
 1839 00ce BB69     		ldr	r3, [r7, #24]
 1840 00d0 0433     		adds	r3, r3, #4
 1841 00d2 1846     		mov	r0, r3
 1842 00d4 FFF7FEFF 		bl	uxListRemove
1665:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1666:./Libraries/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:./Libraries/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:./Libraries/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:./Libraries/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1671:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1672:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1673:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1675:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1843              		.loc 1 1675 6
 1844 00d8 BB69     		ldr	r3, [r7, #24]
 1845 00da DA6A     		ldr	r2, [r3, #44]
 1846 00dc 154B     		ldr	r3, .L115+8
 1847 00de 1B68     		ldr	r3, [r3]
 1848 00e0 9A42     		cmp	r2, r3
 1849 00e2 03D9     		bls	.L114
 1850              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1851 00e4 BB69     		ldr	r3, [r7, #24]
 1852 00e6 DB6A     		ldr	r3, [r3, #44]
 1853 00e8 124A     		ldr	r2, .L115+8
 1854 00ea 1360     		str	r3, [r2]
 1855              	.L114:
 1856              		.loc 1 1675 6 discriminator 3
 1857 00ec BB69     		ldr	r3, [r7, #24]
 1858 00ee DA6A     		ldr	r2, [r3, #44]
 1859 00f0 1346     		mov	r3, r2
 1860 00f2 9B00     		lsls	r3, r3, #2
 1861 00f4 1344     		add	r3, r3, r2
 1862 00f6 9B00     		lsls	r3, r3, #2
 1863 00f8 0D4A     		ldr	r2, .L115+4
 1864 00fa 1A44     		add	r2, r2, r3
 1865 00fc BB69     		ldr	r3, [r7, #24]
 1866 00fe 0433     		adds	r3, r3, #4
 1867 0100 1946     		mov	r1, r3
 1868 0102 1046     		mov	r0, r2
 1869 0104 FFF7FEFF 		bl	vListInsertEnd
 1870              	.L113:
1676:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1677:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1678:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1679:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1681:./Libraries/FreeRTOS/Source/tasks.c **** 
1682:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1871              		.loc 1 1682 7 is_stmt 1
 1872 0108 FB69     		ldr	r3, [r7, #28]
 1873 010a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 67


 1874 010c 07D0     		beq	.L108
1683:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1684:./Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1875              		.loc 1 1684 6
 1876 010e 0A4B     		ldr	r3, .L115+12
 1877 0110 4FF08052 		mov	r2, #268435456
 1878 0114 1A60     		str	r2, [r3]
 1879              		.syntax unified
 1880              	@ 1684 "./Libraries/FreeRTOS/Source/tasks.c" 1
 1881 0116 BFF34F8F 		dsb
 1882              	@ 0 "" 2
 1883              	@ 1684 "./Libraries/FreeRTOS/Source/tasks.c" 1
 1884 011a BFF36F8F 		isb
 1885              	@ 0 "" 2
 1886              		.thumb
 1887              		.syntax unified
 1888              	.L108:
1685:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1686:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1687:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1688:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1690:./Libraries/FreeRTOS/Source/tasks.c **** 
1691:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:./Libraries/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1695:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1696:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1889              		.loc 1 1696 3
 1890 011e FFF7FEFF 		bl	vPortExitCritical
1697:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 1891              		.loc 1 1697 2
 1892 0122 00BF     		nop
 1893 0124 2037     		adds	r7, r7, #32
 1894              	.LCFI53:
 1895              		.cfi_def_cfa_offset 8
 1896 0126 BD46     		mov	sp, r7
 1897              	.LCFI54:
 1898              		.cfi_def_cfa_register 13
 1899              		@ sp needed
 1900 0128 80BD     		pop	{r7, pc}
 1901              	.L116:
 1902 012a 00BF     		.align	2
 1903              	.L115:
 1904 012c 00000000 		.word	pxCurrentTCB
 1905 0130 00000000 		.word	pxReadyTasksLists
 1906 0134 00000000 		.word	uxTopReadyPriority
 1907 0138 04ED00E0 		.word	-536810236
 1908              		.cfi_endproc
 1909              	.LFE14:
 1911              		.section	.text.vTaskSuspend,"ax",%progbits
 1912              		.align	1
 1913              		.global	vTaskSuspend
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
ARM GAS  /tmp/ccpNfLZa.s 			page 68


 1917              		.fpu fpv5-d16
 1919              	vTaskSuspend:
 1920              	.LFB15:
1698:./Libraries/FreeRTOS/Source/tasks.c **** 
1699:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:./Libraries/FreeRTOS/Source/tasks.c **** 
1702:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:./Libraries/FreeRTOS/Source/tasks.c **** 
1704:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 1921              		.loc 1 1705 2
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 16
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925 0000 80B5     		push	{r7, lr}
 1926              	.LCFI55:
 1927              		.cfi_def_cfa_offset 8
 1928              		.cfi_offset 7, -8
 1929              		.cfi_offset 14, -4
 1930 0002 84B0     		sub	sp, sp, #16
 1931              	.LCFI56:
 1932              		.cfi_def_cfa_offset 24
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI57:
 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
1706:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:./Libraries/FreeRTOS/Source/tasks.c **** 
1708:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1937              		.loc 1 1708 3
 1938 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1710:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:./Libraries/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1939              		.loc 1 1712 12
 1940 000c 7B68     		ldr	r3, [r7, #4]
 1941 000e 002B     		cmp	r3, #0
 1942 0010 02D1     		bne	.L118
 1943              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1944 0012 304B     		ldr	r3, .L129
 1945 0014 1B68     		ldr	r3, [r3]
 1946 0016 00E0     		b	.L119
 1947              	.L118:
 1948              		.loc 1 1712 12 discriminator 2
 1949 0018 7B68     		ldr	r3, [r7, #4]
 1950              	.L119:
 1951              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1952 001a FB60     		str	r3, [r7, #12]
1713:./Libraries/FreeRTOS/Source/tasks.c **** 
1714:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:./Libraries/FreeRTOS/Source/tasks.c **** 
1716:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:./Libraries/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1953              		.loc 1 1718 8 discriminator 4
ARM GAS  /tmp/ccpNfLZa.s 			page 69


 1954 001c FB68     		ldr	r3, [r7, #12]
 1955 001e 0433     		adds	r3, r3, #4
 1956 0020 1846     		mov	r0, r3
 1957 0022 FFF7FEFF 		bl	uxListRemove
1719:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1720:./Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1722:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1723:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1724:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1726:./Libraries/FreeRTOS/Source/tasks.c **** 
1727:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1958              		.loc 1 1728 8 discriminator 4
 1959 0026 FB68     		ldr	r3, [r7, #12]
 1960 0028 9B6A     		ldr	r3, [r3, #40]
 1961              		.loc 1 1728 6 discriminator 4
 1962 002a 002B     		cmp	r3, #0
 1963 002c 04D0     		beq	.L120
1729:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1730:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1964              		.loc 1 1730 14
 1965 002e FB68     		ldr	r3, [r7, #12]
 1966 0030 1833     		adds	r3, r3, #24
 1967 0032 1846     		mov	r0, r3
 1968 0034 FFF7FEFF 		bl	uxListRemove
 1969              	.L120:
1731:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1732:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1733:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1734:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1736:./Libraries/FreeRTOS/Source/tasks.c **** 
1737:./Libraries/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1970              		.loc 1 1737 4
 1971 0038 FB68     		ldr	r3, [r7, #12]
 1972 003a 0433     		adds	r3, r3, #4
 1973 003c 1946     		mov	r1, r3
 1974 003e 2648     		ldr	r0, .L129+4
 1975 0040 FFF7FEFF 		bl	vListInsertEnd
1738:./Libraries/FreeRTOS/Source/tasks.c **** 
1739:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1741:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1976              		.loc 1 1741 14
 1977 0044 FB68     		ldr	r3, [r7, #12]
 1978 0046 93F85830 		ldrb	r3, [r3, #88]
 1979 004a DBB2     		uxtb	r3, r3
 1980              		.loc 1 1741 7
 1981 004c 012B     		cmp	r3, #1
 1982 004e 03D1     		bne	.L121
1742:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1743:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:./Libraries/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1983              		.loc 1 1745 27
ARM GAS  /tmp/ccpNfLZa.s 			page 70


 1984 0050 FB68     		ldr	r3, [r7, #12]
 1985 0052 0022     		movs	r2, #0
 1986 0054 83F85820 		strb	r2, [r3, #88]
 1987              	.L121:
1746:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1747:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1748:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1749:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1750:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1988              		.loc 1 1750 3
 1989 0058 FFF7FEFF 		bl	vPortExitCritical
1751:./Libraries/FreeRTOS/Source/tasks.c **** 
1752:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1990              		.loc 1 1752 25
 1991 005c 1F4B     		ldr	r3, .L129+8
 1992 005e 1B68     		ldr	r3, [r3]
 1993              		.loc 1 1752 5
 1994 0060 002B     		cmp	r3, #0
 1995 0062 05D0     		beq	.L122
1753:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1754:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:./Libraries/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:./Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1996              		.loc 1 1756 4
 1997 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1758:./Libraries/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1998              		.loc 1 1758 5
 1999 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1760:./Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2000              		.loc 1 1760 4
 2001 006c FFF7FEFF 		bl	vPortExitCritical
 2002              	.L122:
1761:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1762:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1763:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1764:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1766:./Libraries/FreeRTOS/Source/tasks.c **** 
1767:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2003              		.loc 1 1767 13
 2004 0070 184B     		ldr	r3, .L129
 2005 0072 1B68     		ldr	r3, [r3]
 2006              		.loc 1 1767 5
 2007 0074 FA68     		ldr	r2, [r7, #12]
 2008 0076 9A42     		cmp	r2, r3
 2009 0078 27D1     		bne	.L128
1768:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1769:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2010              		.loc 1 1769 26
 2011 007a 184B     		ldr	r3, .L129+8
 2012 007c 1B68     		ldr	r3, [r3]
 2013              		.loc 1 1769 6
 2014 007e 002B     		cmp	r3, #0
 2015 0080 17D0     		beq	.L124
1770:./Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccpNfLZa.s 			page 71


1771:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2016              		.loc 1 1772 5
 2017 0082 174B     		ldr	r3, .L129+12
 2018 0084 1B68     		ldr	r3, [r3]
 2019 0086 002B     		cmp	r3, #0
 2020 0088 0AD0     		beq	.L125
 2021              	.LBB148:
 2022              	.LBB149:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2023              		.loc 2 195 2
 2024              		.syntax unified
 2025              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2026 008a 4FF05003 			mov r3, #80												
 2027 008e 83F31188 		msr basepri, r3											
 2028 0092 BFF36F8F 		isb														
 2029 0096 BFF34F8F 		dsb														
 2030              	
 2031              	@ 0 "" 2
 2032              		.thumb
 2033              		.syntax unified
 2034 009a BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2035              		.loc 2 203 1
 2036 009c 00BF     		nop
 2037              	.L126:
 2038              	.LBE149:
 2039              	.LBE148:
 2040              		.loc 1 1772 5 discriminator 1
 2041 009e FEE7     		b	.L126
 2042              	.L125:
1773:./Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2043              		.loc 1 1773 5
 2044 00a0 104B     		ldr	r3, .L129+16
 2045 00a2 4FF08052 		mov	r2, #268435456
 2046 00a6 1A60     		str	r2, [r3]
 2047              		.syntax unified
 2048              	@ 1773 "./Libraries/FreeRTOS/Source/tasks.c" 1
 2049 00a8 BFF34F8F 		dsb
 2050              	@ 0 "" 2
 2051              	@ 1773 "./Libraries/FreeRTOS/Source/tasks.c" 1
 2052 00ac BFF36F8F 		isb
 2053              	@ 0 "" 2
1774:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1775:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1776:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1777:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:./Libraries/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:./Libraries/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:./Libraries/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1782:./Libraries/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:./Libraries/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:./Libraries/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:./Libraries/FreeRTOS/Source/tasks.c **** 					is. */
1786:./Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:./Libraries/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccpNfLZa.s 			page 72


1788:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1789:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1790:./Libraries/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1792:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1793:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1794:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1795:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1796:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1798:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 2054              		.loc 1 1798 2
 2055              		.thumb
 2056              		.syntax unified
 2057 00b0 0BE0     		b	.L128
 2058              	.L124:
1780:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 2059              		.loc 1 1780 9
 2060 00b2 094B     		ldr	r3, .L129+4
 2061 00b4 1A68     		ldr	r2, [r3]
1780:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 2062              		.loc 1 1780 56
 2063 00b6 0C4B     		ldr	r3, .L129+20
 2064 00b8 1B68     		ldr	r3, [r3]
1780:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 2065              		.loc 1 1780 7
 2066 00ba 9A42     		cmp	r2, r3
 2067 00bc 03D1     		bne	.L127
1786:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 2068              		.loc 1 1786 19
 2069 00be 054B     		ldr	r3, .L129
 2070 00c0 0022     		movs	r2, #0
 2071 00c2 1A60     		str	r2, [r3]
 2072              		.loc 1 1798 2
 2073 00c4 01E0     		b	.L128
 2074              	.L127:
1790:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 2075              		.loc 1 1790 6
 2076 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2077              	.L128:
 2078              		.loc 1 1798 2
 2079 00ca 00BF     		nop
 2080 00cc 1037     		adds	r7, r7, #16
 2081              	.LCFI58:
 2082              		.cfi_def_cfa_offset 8
 2083 00ce BD46     		mov	sp, r7
 2084              	.LCFI59:
 2085              		.cfi_def_cfa_register 13
 2086              		@ sp needed
 2087 00d0 80BD     		pop	{r7, pc}
 2088              	.L130:
 2089 00d2 00BF     		.align	2
 2090              	.L129:
 2091 00d4 00000000 		.word	pxCurrentTCB
 2092 00d8 00000000 		.word	xSuspendedTaskList
 2093 00dc 00000000 		.word	xSchedulerRunning
 2094 00e0 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccpNfLZa.s 			page 73


 2095 00e4 04ED00E0 		.word	-536810236
 2096 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2097              		.cfi_endproc
 2098              	.LFE15:
 2100              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2101              		.align	1
 2102              		.syntax unified
 2103              		.thumb
 2104              		.thumb_func
 2105              		.fpu fpv5-d16
 2107              	prvTaskIsTaskSuspended:
 2108              	.LFB16:
1799:./Libraries/FreeRTOS/Source/tasks.c **** 
1800:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:./Libraries/FreeRTOS/Source/tasks.c **** 
1803:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:./Libraries/FreeRTOS/Source/tasks.c **** 
1805:./Libraries/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 2109              		.loc 1 1806 2
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 24
 2112              		@ frame_needed = 1, uses_anonymous_args = 0
 2113              		@ link register save eliminated.
 2114 0000 80B4     		push	{r7}
 2115              	.LCFI60:
 2116              		.cfi_def_cfa_offset 4
 2117              		.cfi_offset 7, -4
 2118 0002 87B0     		sub	sp, sp, #28
 2119              	.LCFI61:
 2120              		.cfi_def_cfa_offset 32
 2121 0004 00AF     		add	r7, sp, #0
 2122              	.LCFI62:
 2123              		.cfi_def_cfa_register 7
 2124 0006 7860     		str	r0, [r7, #4]
1807:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2125              		.loc 1 1807 13
 2126 0008 0023     		movs	r3, #0
 2127 000a 7B61     		str	r3, [r7, #20]
1808:./Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2128              		.loc 1 1808 22
 2129 000c 7B68     		ldr	r3, [r7, #4]
 2130 000e 3B61     		str	r3, [r7, #16]
1809:./Libraries/FreeRTOS/Source/tasks.c **** 
1810:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:./Libraries/FreeRTOS/Source/tasks.c **** 		section. */
1812:./Libraries/FreeRTOS/Source/tasks.c **** 
1813:./Libraries/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2131              		.loc 1 1814 3
 2132 0010 7B68     		ldr	r3, [r7, #4]
 2133 0012 002B     		cmp	r3, #0
 2134 0014 0AD1     		bne	.L132
 2135              	.LBB150:
 2136              	.LBB151:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccpNfLZa.s 			page 74


 2137              		.loc 2 195 2
 2138              		.syntax unified
 2139              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2140 0016 4FF05003 			mov r3, #80												
 2141 001a 83F31188 		msr basepri, r3											
 2142 001e BFF36F8F 		isb														
 2143 0022 BFF34F8F 		dsb														
 2144              	
 2145              	@ 0 "" 2
 2146              		.thumb
 2147              		.syntax unified
 2148 0026 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2149              		.loc 2 203 1
 2150 0028 00BF     		nop
 2151              	.L133:
 2152              	.LBE151:
 2153              	.LBE150:
 2154              		.loc 1 1814 3 discriminator 1
 2155 002a FEE7     		b	.L133
 2156              	.L132:
1815:./Libraries/FreeRTOS/Source/tasks.c **** 
1816:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:./Libraries/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2157              		.loc 1 1817 7
 2158 002c 3B69     		ldr	r3, [r7, #16]
 2159 002e 5B69     		ldr	r3, [r3, #20]
 2160              		.loc 1 1817 5
 2161 0030 0A4A     		ldr	r2, .L136
 2162 0032 9342     		cmp	r3, r2
 2163 0034 0AD1     		bne	.L134
1818:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1819:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2164              		.loc 1 1820 8
 2165 0036 3B69     		ldr	r3, [r7, #16]
 2166 0038 9B6A     		ldr	r3, [r3, #40]
 2167              		.loc 1 1820 6
 2168 003a 094A     		ldr	r2, .L136+4
 2169 003c 9342     		cmp	r3, r2
 2170 003e 05D0     		beq	.L134
1821:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1822:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:./Libraries/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:./Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2171              		.loc 1 1824 9
 2172 0040 3B69     		ldr	r3, [r7, #16]
 2173 0042 9B6A     		ldr	r3, [r3, #40]
 2174              		.loc 1 1824 7
 2175 0044 002B     		cmp	r3, #0
 2176 0046 01D1     		bne	.L134
1825:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1826:./Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2177              		.loc 1 1826 14
 2178 0048 0123     		movs	r3, #1
 2179 004a 7B61     		str	r3, [r7, #20]
 2180              	.L134:
ARM GAS  /tmp/ccpNfLZa.s 			page 75


1827:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1828:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1829:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1830:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1832:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1833:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1834:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1835:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1837:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1838:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1839:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1840:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1842:./Libraries/FreeRTOS/Source/tasks.c **** 
1843:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2181              		.loc 1 1843 10
 2182 004c 7B69     		ldr	r3, [r7, #20]
1844:./Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2183              		.loc 1 1844 2
 2184 004e 1846     		mov	r0, r3
 2185 0050 1C37     		adds	r7, r7, #28
 2186              	.LCFI63:
 2187              		.cfi_def_cfa_offset 4
 2188 0052 BD46     		mov	sp, r7
 2189              	.LCFI64:
 2190              		.cfi_def_cfa_register 13
 2191              		@ sp needed
 2192 0054 5DF8047B 		ldr	r7, [sp], #4
 2193              	.LCFI65:
 2194              		.cfi_restore 7
 2195              		.cfi_def_cfa_offset 0
 2196 0058 7047     		bx	lr
 2197              	.L137:
 2198 005a 00BF     		.align	2
 2199              	.L136:
 2200 005c 00000000 		.word	xSuspendedTaskList
 2201 0060 00000000 		.word	xPendingReadyList
 2202              		.cfi_endproc
 2203              	.LFE16:
 2205              		.section	.text.vTaskResume,"ax",%progbits
 2206              		.align	1
 2207              		.global	vTaskResume
 2208              		.syntax unified
 2209              		.thumb
 2210              		.thumb_func
 2211              		.fpu fpv5-d16
 2213              	vTaskResume:
 2214              	.LFB17:
1845:./Libraries/FreeRTOS/Source/tasks.c **** 
1846:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:./Libraries/FreeRTOS/Source/tasks.c **** 
1849:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:./Libraries/FreeRTOS/Source/tasks.c **** 
1851:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
ARM GAS  /tmp/ccpNfLZa.s 			page 76


1852:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 2215              		.loc 1 1852 2
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0000 80B5     		push	{r7, lr}
 2220              	.LCFI66:
 2221              		.cfi_def_cfa_offset 8
 2222              		.cfi_offset 7, -8
 2223              		.cfi_offset 14, -4
 2224 0002 84B0     		sub	sp, sp, #16
 2225              	.LCFI67:
 2226              		.cfi_def_cfa_offset 24
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI68:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
1853:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2231              		.loc 1 1853 16
 2232 0008 7B68     		ldr	r3, [r7, #4]
 2233 000a FB60     		str	r3, [r7, #12]
1854:./Libraries/FreeRTOS/Source/tasks.c **** 
1855:./Libraries/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2234              		.loc 1 1856 3
 2235 000c 7B68     		ldr	r3, [r7, #4]
 2236 000e 002B     		cmp	r3, #0
 2237 0010 0AD1     		bne	.L139
 2238              	.LBB152:
 2239              	.LBB153:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2240              		.loc 2 195 2
 2241              		.syntax unified
 2242              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2243 0012 4FF05003 			mov r3, #80												
 2244 0016 83F31188 		msr basepri, r3											
 2245 001a BFF36F8F 		isb														
 2246 001e BFF34F8F 		dsb														
 2247              	
 2248              	@ 0 "" 2
 2249              		.thumb
 2250              		.syntax unified
 2251 0022 BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2252              		.loc 2 203 1
 2253 0024 00BF     		nop
 2254              	.L140:
 2255              	.LBE153:
 2256              	.LBE152:
 2257              		.loc 1 1856 3 discriminator 1
 2258 0026 FEE7     		b	.L140
 2259              	.L139:
1857:./Libraries/FreeRTOS/Source/tasks.c **** 
1858:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:./Libraries/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2260              		.loc 1 1860 15
ARM GAS  /tmp/ccpNfLZa.s 			page 77


 2261 0028 204B     		ldr	r3, .L145
 2262 002a 1B68     		ldr	r3, [r3]
 2263              		.loc 1 1860 5
 2264 002c FA68     		ldr	r2, [r7, #12]
 2265 002e 9A42     		cmp	r2, r3
 2266 0030 38D0     		beq	.L144
 2267              		.loc 1 1860 33 discriminator 1
 2268 0032 FB68     		ldr	r3, [r7, #12]
 2269 0034 002B     		cmp	r3, #0
 2270 0036 35D0     		beq	.L144
1861:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1862:./Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2271              		.loc 1 1862 4
 2272 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1864:./Libraries/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2273              		.loc 1 1864 9
 2274 003c F868     		ldr	r0, [r7, #12]
 2275 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2276 0042 0346     		mov	r3, r0
 2277              		.loc 1 1864 7
 2278 0044 002B     		cmp	r3, #0
 2279 0046 2BD0     		beq	.L142
1865:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1866:./Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:./Libraries/FreeRTOS/Source/tasks.c **** 
1868:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:./Libraries/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2280              		.loc 1 1870 15
 2281 0048 FB68     		ldr	r3, [r7, #12]
 2282 004a 0433     		adds	r3, r3, #4
 2283 004c 1846     		mov	r0, r3
 2284 004e FFF7FEFF 		bl	uxListRemove
1871:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2285              		.loc 1 1871 6
 2286 0052 FB68     		ldr	r3, [r7, #12]
 2287 0054 DA6A     		ldr	r2, [r3, #44]
 2288 0056 164B     		ldr	r3, .L145+4
 2289 0058 1B68     		ldr	r3, [r3]
 2290 005a 9A42     		cmp	r2, r3
 2291 005c 03D9     		bls	.L143
 2292              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2293 005e FB68     		ldr	r3, [r7, #12]
 2294 0060 DB6A     		ldr	r3, [r3, #44]
 2295 0062 134A     		ldr	r2, .L145+4
 2296 0064 1360     		str	r3, [r2]
 2297              	.L143:
 2298              		.loc 1 1871 6 discriminator 3
 2299 0066 FB68     		ldr	r3, [r7, #12]
 2300 0068 DA6A     		ldr	r2, [r3, #44]
 2301 006a 1346     		mov	r3, r2
 2302 006c 9B00     		lsls	r3, r3, #2
 2303 006e 1344     		add	r3, r3, r2
 2304 0070 9B00     		lsls	r3, r3, #2
 2305 0072 104A     		ldr	r2, .L145+8
 2306 0074 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccpNfLZa.s 			page 78


 2307 0076 FB68     		ldr	r3, [r7, #12]
 2308 0078 0433     		adds	r3, r3, #4
 2309 007a 1946     		mov	r1, r3
 2310 007c 1046     		mov	r0, r2
 2311 007e FFF7FEFF 		bl	vListInsertEnd
1872:./Libraries/FreeRTOS/Source/tasks.c **** 
1873:./Libraries/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2312              		.loc 1 1874 15 is_stmt 1 discriminator 3
 2313 0082 FB68     		ldr	r3, [r7, #12]
 2314 0084 DA6A     		ldr	r2, [r3, #44]
 2315              		.loc 1 1874 43 discriminator 3
 2316 0086 094B     		ldr	r3, .L145
 2317 0088 1B68     		ldr	r3, [r3]
 2318 008a DB6A     		ldr	r3, [r3, #44]
 2319              		.loc 1 1874 8 discriminator 3
 2320 008c 9A42     		cmp	r2, r3
 2321 008e 07D3     		bcc	.L142
1875:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1876:./Libraries/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:./Libraries/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:./Libraries/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:./Libraries/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2322              		.loc 1 1879 7
 2323 0090 094B     		ldr	r3, .L145+12
 2324 0092 4FF08052 		mov	r2, #268435456
 2325 0096 1A60     		str	r2, [r3]
 2326              		.syntax unified
 2327              	@ 1879 "./Libraries/FreeRTOS/Source/tasks.c" 1
 2328 0098 BFF34F8F 		dsb
 2329              	@ 0 "" 2
 2330              	@ 1879 "./Libraries/FreeRTOS/Source/tasks.c" 1
 2331 009c BFF36F8F 		isb
 2332              	@ 0 "" 2
 2333              		.thumb
 2334              		.syntax unified
 2335              	.L142:
1880:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1881:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1882:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1883:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1885:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1886:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1887:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1888:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1890:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1891:./Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2336              		.loc 1 1891 4
 2337 00a0 FFF7FEFF 		bl	vPortExitCritical
 2338              	.L144:
1892:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1893:./Libraries/FreeRTOS/Source/tasks.c **** 		else
1894:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1895:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:./Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccpNfLZa.s 			page 79


1897:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 2339              		.loc 1 1897 2
 2340 00a4 00BF     		nop
 2341 00a6 1037     		adds	r7, r7, #16
 2342              	.LCFI69:
 2343              		.cfi_def_cfa_offset 8
 2344 00a8 BD46     		mov	sp, r7
 2345              	.LCFI70:
 2346              		.cfi_def_cfa_register 13
 2347              		@ sp needed
 2348 00aa 80BD     		pop	{r7, pc}
 2349              	.L146:
 2350              		.align	2
 2351              	.L145:
 2352 00ac 00000000 		.word	pxCurrentTCB
 2353 00b0 00000000 		.word	uxTopReadyPriority
 2354 00b4 00000000 		.word	pxReadyTasksLists
 2355 00b8 04ED00E0 		.word	-536810236
 2356              		.cfi_endproc
 2357              	.LFE17:
 2359              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2360              		.align	1
 2361              		.global	xTaskResumeFromISR
 2362              		.syntax unified
 2363              		.thumb
 2364              		.thumb_func
 2365              		.fpu fpv5-d16
 2367              	xTaskResumeFromISR:
 2368              	.LFB18:
1898:./Libraries/FreeRTOS/Source/tasks.c **** 
1899:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:./Libraries/FreeRTOS/Source/tasks.c **** 
1901:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:./Libraries/FreeRTOS/Source/tasks.c **** 
1903:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:./Libraries/FreeRTOS/Source/tasks.c **** 
1905:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 2369              		.loc 1 1906 2
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 40
 2372              		@ frame_needed = 1, uses_anonymous_args = 0
 2373 0000 80B5     		push	{r7, lr}
 2374              	.LCFI71:
 2375              		.cfi_def_cfa_offset 8
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378 0002 8AB0     		sub	sp, sp, #40
 2379              	.LCFI72:
 2380              		.cfi_def_cfa_offset 48
 2381 0004 00AF     		add	r7, sp, #0
 2382              	.LCFI73:
 2383              		.cfi_def_cfa_register 7
 2384 0006 7860     		str	r0, [r7, #4]
1907:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2385              		.loc 1 1907 13
 2386 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 80


 2387 000a 7B62     		str	r3, [r7, #36]
1908:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2388              		.loc 1 1908 16
 2389 000c 7B68     		ldr	r3, [r7, #4]
 2390 000e 3B62     		str	r3, [r7, #32]
1909:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:./Libraries/FreeRTOS/Source/tasks.c **** 
1911:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2391              		.loc 1 1911 3
 2392 0010 7B68     		ldr	r3, [r7, #4]
 2393 0012 002B     		cmp	r3, #0
 2394 0014 0AD1     		bne	.L148
 2395              	.LBB154:
 2396              	.LBB155:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2397              		.loc 2 195 2
 2398              		.syntax unified
 2399              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2400 0016 4FF05003 			mov r3, #80												
 2401 001a 83F31188 		msr basepri, r3											
 2402 001e BFF36F8F 		isb														
 2403 0022 BFF34F8F 		dsb														
 2404              	
 2405              	@ 0 "" 2
 2406              		.thumb
 2407              		.syntax unified
 2408 0026 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2409              		.loc 2 203 1
 2410 0028 00BF     		nop
 2411              	.L149:
 2412              	.LBE155:
 2413              	.LBE154:
 2414              		.loc 1 1911 3 discriminator 1
 2415 002a FEE7     		b	.L149
 2416              	.L148:
1912:./Libraries/FreeRTOS/Source/tasks.c **** 
1913:./Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:./Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:./Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:./Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:./Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:./Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:./Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:./Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:./Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:./Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:./Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:./Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:./Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:./Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:./Libraries/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2417              		.loc 1 1929 3
 2418 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2419              	.LBB156:
ARM GAS  /tmp/ccpNfLZa.s 			page 81


 2420              	.LBB157:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2421              		.loc 2 211 2
 2422              		.syntax unified
 2423              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2424 0030 EFF31182 			mrs r2, basepri											
 2425 0034 4FF05003 		mov r3, #80												
 2426 0038 83F31188 		msr basepri, r3											
 2427 003c BFF36F8F 		isb														
 2428 0040 BFF34F8F 		dsb														
 2429              	
 2430              	@ 0 "" 2
 2431              		.thumb
 2432              		.syntax unified
 2433 0044 7A61     		str	r2, [r7, #20]
 2434 0046 3B61     		str	r3, [r7, #16]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2435              		.loc 2 223 9
 2436 0048 7B69     		ldr	r3, [r7, #20]
 2437              	.LBE157:
 2438              	.LBE156:
1930:./Libraries/FreeRTOS/Source/tasks.c **** 
1931:./Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2439              		.loc 1 1931 28
 2440 004a FB61     		str	r3, [r7, #28]
1932:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1933:./Libraries/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2441              		.loc 1 1933 8
 2442 004c 386A     		ldr	r0, [r7, #32]
 2443 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2444 0052 0346     		mov	r3, r0
 2445              		.loc 1 1933 6
 2446 0054 002B     		cmp	r3, #0
 2447 0056 30D0     		beq	.L151
1934:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1935:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:./Libraries/FreeRTOS/Source/tasks.c **** 
1937:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:./Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2448              		.loc 1 1938 30
 2449 0058 1D4B     		ldr	r3, .L156
 2450 005a 1B68     		ldr	r3, [r3]
 2451              		.loc 1 1938 7
 2452 005c 002B     		cmp	r3, #0
 2453 005e 26D1     		bne	.L152
1939:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1940:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:./Libraries/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2454              		.loc 1 1942 15
 2455 0060 3B6A     		ldr	r3, [r7, #32]
 2456 0062 DA6A     		ldr	r2, [r3, #44]
 2457              		.loc 1 1942 43
 2458 0064 1B4B     		ldr	r3, .L156+4
 2459 0066 1B68     		ldr	r3, [r3]
 2460 0068 DB6A     		ldr	r3, [r3, #44]
 2461              		.loc 1 1942 8
ARM GAS  /tmp/ccpNfLZa.s 			page 82


 2462 006a 9A42     		cmp	r2, r3
 2463 006c 01D3     		bcc	.L153
1943:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1944:./Libraries/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2464              		.loc 1 1944 22
 2465 006e 0123     		movs	r3, #1
 2466 0070 7B62     		str	r3, [r7, #36]
 2467              	.L153:
1945:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1946:./Libraries/FreeRTOS/Source/tasks.c **** 					else
1947:./Libraries/FreeRTOS/Source/tasks.c **** 					{
1948:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:./Libraries/FreeRTOS/Source/tasks.c **** 					}
1950:./Libraries/FreeRTOS/Source/tasks.c **** 
1951:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2468              		.loc 1 1951 15
 2469 0072 3B6A     		ldr	r3, [r7, #32]
 2470 0074 0433     		adds	r3, r3, #4
 2471 0076 1846     		mov	r0, r3
 2472 0078 FFF7FEFF 		bl	uxListRemove
1952:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2473              		.loc 1 1952 6
 2474 007c 3B6A     		ldr	r3, [r7, #32]
 2475 007e DA6A     		ldr	r2, [r3, #44]
 2476 0080 154B     		ldr	r3, .L156+8
 2477 0082 1B68     		ldr	r3, [r3]
 2478 0084 9A42     		cmp	r2, r3
 2479 0086 03D9     		bls	.L154
 2480              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2481 0088 3B6A     		ldr	r3, [r7, #32]
 2482 008a DB6A     		ldr	r3, [r3, #44]
 2483 008c 124A     		ldr	r2, .L156+8
 2484 008e 1360     		str	r3, [r2]
 2485              	.L154:
 2486              		.loc 1 1952 6 discriminator 3
 2487 0090 3B6A     		ldr	r3, [r7, #32]
 2488 0092 DA6A     		ldr	r2, [r3, #44]
 2489 0094 1346     		mov	r3, r2
 2490 0096 9B00     		lsls	r3, r3, #2
 2491 0098 1344     		add	r3, r3, r2
 2492 009a 9B00     		lsls	r3, r3, #2
 2493 009c 0F4A     		ldr	r2, .L156+12
 2494 009e 1A44     		add	r2, r2, r3
 2495 00a0 3B6A     		ldr	r3, [r7, #32]
 2496 00a2 0433     		adds	r3, r3, #4
 2497 00a4 1946     		mov	r1, r3
 2498 00a6 1046     		mov	r0, r2
 2499 00a8 FFF7FEFF 		bl	vListInsertEnd
 2500 00ac 05E0     		b	.L151
 2501              	.L152:
1953:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1954:./Libraries/FreeRTOS/Source/tasks.c **** 				else
1955:./Libraries/FreeRTOS/Source/tasks.c **** 				{
1956:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:./Libraries/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:./Libraries/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:./Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/ccpNfLZa.s 			page 83


 2502              		.loc 1 1959 6 is_stmt 1
 2503 00ae 3B6A     		ldr	r3, [r7, #32]
 2504 00b0 1833     		adds	r3, r3, #24
 2505 00b2 1946     		mov	r1, r3
 2506 00b4 0A48     		ldr	r0, .L156+16
 2507 00b6 FFF7FEFF 		bl	vListInsertEnd
 2508              	.L151:
 2509 00ba FB69     		ldr	r3, [r7, #28]
 2510 00bc FB60     		str	r3, [r7, #12]
 2511              	.LBB158:
 2512              	.LBB159:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2513              		.loc 2 229 2
 2514 00be FB68     		ldr	r3, [r7, #12]
 2515              		.syntax unified
 2516              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2517 00c0 83F31188 			msr basepri, r3	
 2518              	@ 0 "" 2
 2519              		.loc 2 233 1
 2520              		.thumb
 2521              		.syntax unified
 2522 00c4 00BF     		nop
 2523              	.LBE159:
 2524              	.LBE158:
1960:./Libraries/FreeRTOS/Source/tasks.c **** 				}
1961:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1962:./Libraries/FreeRTOS/Source/tasks.c **** 			else
1963:./Libraries/FreeRTOS/Source/tasks.c **** 			{
1964:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:./Libraries/FreeRTOS/Source/tasks.c **** 			}
1966:./Libraries/FreeRTOS/Source/tasks.c **** 		}
1967:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:./Libraries/FreeRTOS/Source/tasks.c **** 
1969:./Libraries/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2525              		.loc 1 1969 10
 2526 00c6 7B6A     		ldr	r3, [r7, #36]
1970:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 2527              		.loc 1 1970 2
 2528 00c8 1846     		mov	r0, r3
 2529 00ca 2837     		adds	r7, r7, #40
 2530              	.LCFI74:
 2531              		.cfi_def_cfa_offset 8
 2532 00cc BD46     		mov	sp, r7
 2533              	.LCFI75:
 2534              		.cfi_def_cfa_register 13
 2535              		@ sp needed
 2536 00ce 80BD     		pop	{r7, pc}
 2537              	.L157:
 2538              		.align	2
 2539              	.L156:
 2540 00d0 00000000 		.word	uxSchedulerSuspended
 2541 00d4 00000000 		.word	pxCurrentTCB
 2542 00d8 00000000 		.word	uxTopReadyPriority
 2543 00dc 00000000 		.word	pxReadyTasksLists
 2544 00e0 00000000 		.word	xPendingReadyList
 2545              		.cfi_endproc
 2546              	.LFE18:
ARM GAS  /tmp/ccpNfLZa.s 			page 84


 2548              		.section	.rodata
 2549              		.align	2
 2550              	.LC0:
 2551 0000 49444C45 		.ascii	"IDLE\000"
 2551      00
 2552              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2553              		.align	1
 2554              		.global	vTaskStartScheduler
 2555              		.syntax unified
 2556              		.thumb
 2557              		.thumb_func
 2558              		.fpu fpv5-d16
 2560              	vTaskStartScheduler:
 2561              	.LFB19:
1971:./Libraries/FreeRTOS/Source/tasks.c **** 
1972:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:./Libraries/FreeRTOS/Source/tasks.c **** 
1975:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:./Libraries/FreeRTOS/Source/tasks.c **** {
 2562              		.loc 1 1976 1
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 24
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566 0000 80B5     		push	{r7, lr}
 2567              	.LCFI76:
 2568              		.cfi_def_cfa_offset 8
 2569              		.cfi_offset 7, -8
 2570              		.cfi_offset 14, -4
 2571 0002 8AB0     		sub	sp, sp, #40
 2572              	.LCFI77:
 2573              		.cfi_def_cfa_offset 48
 2574 0004 04AF     		add	r7, sp, #16
 2575              	.LCFI78:
 2576              		.cfi_def_cfa 7, 32
 2577              	.LBB160:
1977:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:./Libraries/FreeRTOS/Source/tasks.c **** 
1979:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:./Libraries/FreeRTOS/Source/tasks.c **** 	{
1982:./Libraries/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2578              		.loc 1 1982 17
 2579 0006 0023     		movs	r3, #0
 2580 0008 BB60     		str	r3, [r7, #8]
1983:./Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2581              		.loc 1 1983 16
 2582 000a 0023     		movs	r3, #0
 2583 000c 7B60     		str	r3, [r7, #4]
1984:./Libraries/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:./Libraries/FreeRTOS/Source/tasks.c **** 
1986:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:./Libraries/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:./Libraries/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2584              		.loc 1 1988 3
 2585 000e 3A46     		mov	r2, r7
 2586 0010 391D     		adds	r1, r7, #4
ARM GAS  /tmp/ccpNfLZa.s 			page 85


 2587 0012 07F10803 		add	r3, r7, #8
 2588 0016 1846     		mov	r0, r3
 2589 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:./Libraries/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2590              		.loc 1 1989 21
 2591 001c 3968     		ldr	r1, [r7]
 2592 001e 7B68     		ldr	r3, [r7, #4]
 2593 0020 BA68     		ldr	r2, [r7, #8]
 2594 0022 0292     		str	r2, [sp, #8]
 2595 0024 0193     		str	r3, [sp, #4]
 2596 0026 0023     		movs	r3, #0
 2597 0028 0093     		str	r3, [sp]
 2598 002a 0023     		movs	r3, #0
 2599 002c 0A46     		mov	r2, r1
 2600 002e 2149     		ldr	r1, .L166
 2601 0030 2148     		ldr	r0, .L166+4
 2602 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2603 0036 0346     		mov	r3, r0
 2604              		.loc 1 1989 19
 2605 0038 204A     		ldr	r2, .L166+8
 2606 003a 1360     		str	r3, [r2]
1990:./Libraries/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:./Libraries/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:./Libraries/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:./Libraries/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:./Libraries/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:./Libraries/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:./Libraries/FreeRTOS/Source/tasks.c **** 
1997:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2607              		.loc 1 1997 23
 2608 003c 1F4B     		ldr	r3, .L166+8
 2609 003e 1B68     		ldr	r3, [r3]
 2610              		.loc 1 1997 5
 2611 0040 002B     		cmp	r3, #0
 2612 0042 02D0     		beq	.L159
1998:./Libraries/FreeRTOS/Source/tasks.c **** 		{
1999:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2613              		.loc 1 1999 12
 2614 0044 0123     		movs	r3, #1
 2615 0046 7B61     		str	r3, [r7, #20]
 2616 0048 01E0     		b	.L160
 2617              	.L159:
2000:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2001:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2002:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2003:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2618              		.loc 1 2003 12
 2619 004a 0023     		movs	r3, #0
 2620 004c 7B61     		str	r3, [r7, #20]
 2621              	.L160:
 2622              	.LBE160:
2004:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2005:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2006:./Libraries/FreeRTOS/Source/tasks.c **** 	#else
2007:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2008:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:./Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
ARM GAS  /tmp/ccpNfLZa.s 			page 86


2010:./Libraries/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:./Libraries/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:./Libraries/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:./Libraries/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:./Libraries/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2016:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:./Libraries/FreeRTOS/Source/tasks.c **** 
2018:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2020:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2623              		.loc 1 2020 5
 2624 004e 7B69     		ldr	r3, [r7, #20]
 2625 0050 012B     		cmp	r3, #1
 2626 0052 02D1     		bne	.L161
2021:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2022:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2627              		.loc 1 2022 14
 2628 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2629 0058 7861     		str	r0, [r7, #20]
 2630              	.L161:
2023:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2024:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2025:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2026:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2028:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2029:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:./Libraries/FreeRTOS/Source/tasks.c **** 
2031:./Libraries/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2631              		.loc 1 2031 4
 2632 005a 7B69     		ldr	r3, [r7, #20]
 2633 005c 012B     		cmp	r3, #1
 2634 005e 16D1     		bne	.L162
 2635              	.LBB161:
 2636              	.LBB162:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2637              		.loc 2 195 2
 2638              		.syntax unified
 2639              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2640 0060 4FF05003 			mov r3, #80												
 2641 0064 83F31188 		msr basepri, r3											
 2642 0068 BFF36F8F 		isb														
 2643 006c BFF34F8F 		dsb														
 2644              	
 2645              	@ 0 "" 2
 2646              		.thumb
 2647              		.syntax unified
 2648 0070 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2649              		.loc 2 203 1
 2650 0072 00BF     		nop
 2651              	.LBE162:
 2652              	.LBE161:
2032:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2033:./Libraries/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:./Libraries/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
ARM GAS  /tmp/ccpNfLZa.s 			page 87


2035:./Libraries/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:./Libraries/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2038:./Libraries/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2040:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2041:./Libraries/FreeRTOS/Source/tasks.c **** 
2042:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:./Libraries/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:./Libraries/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:./Libraries/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:./Libraries/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:./Libraries/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:./Libraries/FreeRTOS/Source/tasks.c **** 
2049:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2051:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:./Libraries/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:./Libraries/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:./Libraries/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:./Libraries/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2057:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:./Libraries/FreeRTOS/Source/tasks.c **** 
2059:./Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2653              		.loc 1 2059 24
 2654 0074 124B     		ldr	r3, .L166+12
 2655 0076 4FF0FF32 		mov	r2, #-1
 2656 007a 1A60     		str	r2, [r3]
2060:./Libraries/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2657              		.loc 1 2060 21
 2658 007c 114B     		ldr	r3, .L166+16
 2659 007e 0122     		movs	r2, #1
 2660 0080 1A60     		str	r2, [r3]
2061:./Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2661              		.loc 1 2061 14
 2662 0082 114B     		ldr	r3, .L166+20
 2663 0084 0022     		movs	r2, #0
 2664 0086 1A60     		str	r2, [r3]
2062:./Libraries/FreeRTOS/Source/tasks.c **** 
2063:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:./Libraries/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:./Libraries/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:./Libraries/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:./Libraries/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:./Libraries/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:./Libraries/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:./Libraries/FreeRTOS/Source/tasks.c **** 
2071:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:./Libraries/FreeRTOS/Source/tasks.c **** 
2073:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:./Libraries/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2665              		.loc 1 2075 7
 2666 0088 FFF7FEFF 		bl	xPortStartScheduler
2076:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2077:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
ARM GAS  /tmp/ccpNfLZa.s 			page 88


2078:./Libraries/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2080:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2081:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2082:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2084:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2085:./Libraries/FreeRTOS/Source/tasks.c **** 	else
2086:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2087:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:./Libraries/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:./Libraries/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2092:./Libraries/FreeRTOS/Source/tasks.c **** 
2093:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:./Libraries/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:./Libraries/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:./Libraries/FreeRTOS/Source/tasks.c **** }
 2667              		.loc 1 2096 1
 2668 008c 0EE0     		b	.L165
 2669              	.L162:
2090:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 2670              		.loc 1 2090 3
 2671 008e 7B69     		ldr	r3, [r7, #20]
 2672 0090 B3F1FF3F 		cmp	r3, #-1
 2673 0094 0AD1     		bne	.L165
 2674              	.LBB163:
 2675              	.LBB164:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2676              		.loc 2 195 2
 2677              		.syntax unified
 2678              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2679 0096 4FF05003 			mov r3, #80												
 2680 009a 83F31188 		msr basepri, r3											
 2681 009e BFF36F8F 		isb														
 2682 00a2 BFF34F8F 		dsb														
 2683              	
 2684              	@ 0 "" 2
 2685              		.thumb
 2686              		.syntax unified
 2687 00a6 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2688              		.loc 2 203 1
 2689 00a8 00BF     		nop
 2690              	.L164:
 2691              	.LBE164:
 2692              	.LBE163:
2090:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 2693              		.loc 1 2090 3 discriminator 2
 2694 00aa FEE7     		b	.L164
 2695              	.L165:
 2696              		.loc 1 2096 1
 2697 00ac 00BF     		nop
 2698 00ae 1837     		adds	r7, r7, #24
 2699              	.LCFI79:
 2700              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpNfLZa.s 			page 89


 2701 00b0 BD46     		mov	sp, r7
 2702              	.LCFI80:
 2703              		.cfi_def_cfa_register 13
 2704              		@ sp needed
 2705 00b2 80BD     		pop	{r7, pc}
 2706              	.L167:
 2707              		.align	2
 2708              	.L166:
 2709 00b4 00000000 		.word	.LC0
 2710 00b8 00000000 		.word	prvIdleTask
 2711 00bc 00000000 		.word	xIdleTaskHandle
 2712 00c0 00000000 		.word	xNextTaskUnblockTime
 2713 00c4 00000000 		.word	xSchedulerRunning
 2714 00c8 00000000 		.word	xTickCount
 2715              		.cfi_endproc
 2716              	.LFE19:
 2718              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2719              		.align	1
 2720              		.global	vTaskEndScheduler
 2721              		.syntax unified
 2722              		.thumb
 2723              		.thumb_func
 2724              		.fpu fpv5-d16
 2726              	vTaskEndScheduler:
 2727              	.LFB20:
2097:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:./Libraries/FreeRTOS/Source/tasks.c **** 
2099:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:./Libraries/FreeRTOS/Source/tasks.c **** {
 2728              		.loc 1 2100 1
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 8
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0000 80B5     		push	{r7, lr}
 2733              	.LCFI81:
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 7, -8
 2736              		.cfi_offset 14, -4
 2737 0002 82B0     		sub	sp, sp, #8
 2738              	.LCFI82:
 2739              		.cfi_def_cfa_offset 16
 2740 0004 00AF     		add	r7, sp, #0
 2741              	.LCFI83:
 2742              		.cfi_def_cfa_register 7
 2743              	.LBB165:
 2744              	.LBB166:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2745              		.loc 2 195 2
 2746              		.syntax unified
 2747              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2748 0006 4FF05003 			mov r3, #80												
 2749 000a 83F31188 		msr basepri, r3											
 2750 000e BFF36F8F 		isb														
 2751 0012 BFF34F8F 		dsb														
 2752              	
 2753              	@ 0 "" 2
 2754              		.thumb
ARM GAS  /tmp/ccpNfLZa.s 			page 90


 2755              		.syntax unified
 2756 0016 7B60     		str	r3, [r7, #4]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2757              		.loc 2 203 1
 2758 0018 00BF     		nop
 2759              	.LBE166:
 2760              	.LBE165:
2101:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:./Libraries/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:./Libraries/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:./Libraries/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:./Libraries/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2761              		.loc 1 2105 20
 2762 001a 044B     		ldr	r3, .L169
 2763 001c 0022     		movs	r2, #0
 2764 001e 1A60     		str	r2, [r3]
2106:./Libraries/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2765              		.loc 1 2106 2
 2766 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:./Libraries/FreeRTOS/Source/tasks.c **** }
 2767              		.loc 1 2107 1
 2768 0024 00BF     		nop
 2769 0026 0837     		adds	r7, r7, #8
 2770              	.LCFI84:
 2771              		.cfi_def_cfa_offset 8
 2772 0028 BD46     		mov	sp, r7
 2773              	.LCFI85:
 2774              		.cfi_def_cfa_register 13
 2775              		@ sp needed
 2776 002a 80BD     		pop	{r7, pc}
 2777              	.L170:
 2778              		.align	2
 2779              	.L169:
 2780 002c 00000000 		.word	xSchedulerRunning
 2781              		.cfi_endproc
 2782              	.LFE20:
 2784              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2785              		.align	1
 2786              		.global	vTaskSuspendAll
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2790              		.fpu fpv5-d16
 2792              	vTaskSuspendAll:
 2793              	.LFB21:
2108:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:./Libraries/FreeRTOS/Source/tasks.c **** 
2110:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:./Libraries/FreeRTOS/Source/tasks.c **** {
 2794              		.loc 1 2111 1
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 0
 2797              		@ frame_needed = 1, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799 0000 80B4     		push	{r7}
 2800              	.LCFI86:
 2801              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccpNfLZa.s 			page 91


 2802              		.cfi_offset 7, -4
 2803 0002 00AF     		add	r7, sp, #0
 2804              	.LCFI87:
 2805              		.cfi_def_cfa_register 7
2112:./Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:./Libraries/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:./Libraries/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:./Libraries/FreeRTOS/Source/tasks.c **** 
2117:./Libraries/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:./Libraries/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:./Libraries/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:./Libraries/FreeRTOS/Source/tasks.c **** 
2121:./Libraries/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:./Libraries/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:./Libraries/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2806              		.loc 1 2123 2
 2807 0004 044B     		ldr	r3, .L172
 2808 0006 1B68     		ldr	r3, [r3]
 2809 0008 0133     		adds	r3, r3, #1
 2810 000a 034A     		ldr	r2, .L172
 2811 000c 1360     		str	r3, [r2]
2124:./Libraries/FreeRTOS/Source/tasks.c **** 
2125:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:./Libraries/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:./Libraries/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2812              		.loc 1 2127 2
2128:./Libraries/FreeRTOS/Source/tasks.c **** }
 2813              		.loc 1 2128 1
 2814 000e 00BF     		nop
 2815 0010 BD46     		mov	sp, r7
 2816              	.LCFI88:
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0012 5DF8047B 		ldr	r7, [sp], #4
 2820              	.LCFI89:
 2821              		.cfi_restore 7
 2822              		.cfi_def_cfa_offset 0
 2823 0016 7047     		bx	lr
 2824              	.L173:
 2825              		.align	2
 2826              	.L172:
 2827 0018 00000000 		.word	uxSchedulerSuspended
 2828              		.cfi_endproc
 2829              	.LFE21:
 2831              		.section	.text.xTaskResumeAll,"ax",%progbits
 2832              		.align	1
 2833              		.global	xTaskResumeAll
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu fpv5-d16
 2839              	xTaskResumeAll:
 2840              	.LFB22:
2129:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:./Libraries/FreeRTOS/Source/tasks.c **** 
2131:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /tmp/ccpNfLZa.s 			page 92


2132:./Libraries/FreeRTOS/Source/tasks.c **** 
2133:./Libraries/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2135:./Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:./Libraries/FreeRTOS/Source/tasks.c **** 
2138:./Libraries/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:./Libraries/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:./Libraries/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:./Libraries/FreeRTOS/Source/tasks.c **** 		running. */
2142:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2144:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2146:./Libraries/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2148:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2149:./Libraries/FreeRTOS/Source/tasks.c **** 		#else
2150:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2151:./Libraries/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:./Libraries/FreeRTOS/Source/tasks.c **** 
2153:./Libraries/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:./Libraries/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:./Libraries/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:./Libraries/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:./Libraries/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2160:./Libraries/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2162:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2163:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2164:./Libraries/FreeRTOS/Source/tasks.c **** 
2165:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2167:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2169:./Libraries/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2171:./Libraries/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:./Libraries/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:./Libraries/FreeRTOS/Source/tasks.c **** 			processed. */
2174:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2176:./Libraries/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2178:./Libraries/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:./Libraries/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:./Libraries/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2183:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2184:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2185:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2187:./Libraries/FreeRTOS/Source/tasks.c **** 
2188:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccpNfLZa.s 			page 93


2189:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2190:./Libraries/FreeRTOS/Source/tasks.c **** 
2191:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:./Libraries/FreeRTOS/Source/tasks.c **** 
2194:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:./Libraries/FreeRTOS/Source/tasks.c **** {
 2841              		.loc 1 2195 1
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 16
 2844              		@ frame_needed = 1, uses_anonymous_args = 0
 2845 0000 80B5     		push	{r7, lr}
 2846              	.LCFI90:
 2847              		.cfi_def_cfa_offset 8
 2848              		.cfi_offset 7, -8
 2849              		.cfi_offset 14, -4
 2850 0002 84B0     		sub	sp, sp, #16
 2851              	.LCFI91:
 2852              		.cfi_def_cfa_offset 24
 2853 0004 00AF     		add	r7, sp, #0
 2854              	.LCFI92:
 2855              		.cfi_def_cfa_register 7
2196:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2856              		.loc 1 2196 8
 2857 0006 0023     		movs	r3, #0
 2858 0008 FB60     		str	r3, [r7, #12]
2197:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2859              		.loc 1 2197 12
 2860 000a 0023     		movs	r3, #0
 2861 000c BB60     		str	r3, [r7, #8]
2198:./Libraries/FreeRTOS/Source/tasks.c **** 
2199:./Libraries/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:./Libraries/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2862              		.loc 1 2201 2
 2863 000e 424B     		ldr	r3, .L186
 2864 0010 1B68     		ldr	r3, [r3]
 2865 0012 002B     		cmp	r3, #0
 2866 0014 0AD1     		bne	.L175
 2867              	.LBB167:
 2868              	.LBB168:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2869              		.loc 2 195 2
 2870              		.syntax unified
 2871              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2872 0016 4FF05003 			mov r3, #80												
 2873 001a 83F31188 		msr basepri, r3											
 2874 001e BFF36F8F 		isb														
 2875 0022 BFF34F8F 		dsb														
 2876              	
 2877              	@ 0 "" 2
 2878              		.thumb
 2879              		.syntax unified
 2880 0026 3B60     		str	r3, [r7]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2881              		.loc 2 203 1
 2882 0028 00BF     		nop
ARM GAS  /tmp/ccpNfLZa.s 			page 94


 2883              	.L176:
 2884              	.LBE168:
 2885              	.LBE167:
 2886              		.loc 1 2201 2 discriminator 1
 2887 002a FEE7     		b	.L176
 2888              	.L175:
2202:./Libraries/FreeRTOS/Source/tasks.c **** 
2203:./Libraries/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:./Libraries/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:./Libraries/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:./Libraries/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:./Libraries/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:./Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2889              		.loc 1 2208 2
 2890 002c FFF7FEFF 		bl	vPortEnterCritical
2209:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2210:./Libraries/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2891              		.loc 1 2210 3
 2892 0030 394B     		ldr	r3, .L186
 2893 0032 1B68     		ldr	r3, [r3]
 2894 0034 013B     		subs	r3, r3, #1
 2895 0036 384A     		ldr	r2, .L186
 2896 0038 1360     		str	r3, [r2]
2211:./Libraries/FreeRTOS/Source/tasks.c **** 
2212:./Libraries/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2897              		.loc 1 2212 28
 2898 003a 374B     		ldr	r3, .L186
 2899 003c 1B68     		ldr	r3, [r3]
 2900              		.loc 1 2212 5
 2901 003e 002B     		cmp	r3, #0
 2902 0040 62D1     		bne	.L177
2213:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2214:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2903              		.loc 1 2214 31
 2904 0042 364B     		ldr	r3, .L186+4
 2905 0044 1B68     		ldr	r3, [r3]
 2906              		.loc 1 2214 6
 2907 0046 002B     		cmp	r3, #0
 2908 0048 5ED0     		beq	.L177
2215:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2216:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:./Libraries/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:./Libraries/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2909              		.loc 1 2218 10
 2910 004a 2FE0     		b	.L178
 2911              	.L180:
2219:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2220:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2912              		.loc 1 2220 14
 2913 004c 344B     		ldr	r3, .L186+8
 2914 004e DB68     		ldr	r3, [r3, #12]
 2915              		.loc 1 2220 12
 2916 0050 DB68     		ldr	r3, [r3, #12]
 2917 0052 FB60     		str	r3, [r7, #12]
2221:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2918              		.loc 1 2221 15
 2919 0054 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccpNfLZa.s 			page 95


 2920 0056 1833     		adds	r3, r3, #24
 2921 0058 1846     		mov	r0, r3
 2922 005a FFF7FEFF 		bl	uxListRemove
2222:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2923              		.loc 1 2222 15
 2924 005e FB68     		ldr	r3, [r7, #12]
 2925 0060 0433     		adds	r3, r3, #4
 2926 0062 1846     		mov	r0, r3
 2927 0064 FFF7FEFF 		bl	uxListRemove
2223:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2928              		.loc 1 2223 6
 2929 0068 FB68     		ldr	r3, [r7, #12]
 2930 006a DA6A     		ldr	r2, [r3, #44]
 2931 006c 2D4B     		ldr	r3, .L186+12
 2932 006e 1B68     		ldr	r3, [r3]
 2933 0070 9A42     		cmp	r2, r3
 2934 0072 03D9     		bls	.L179
 2935              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2936 0074 FB68     		ldr	r3, [r7, #12]
 2937 0076 DB6A     		ldr	r3, [r3, #44]
 2938 0078 2A4A     		ldr	r2, .L186+12
 2939 007a 1360     		str	r3, [r2]
 2940              	.L179:
 2941              		.loc 1 2223 6 discriminator 3
 2942 007c FB68     		ldr	r3, [r7, #12]
 2943 007e DA6A     		ldr	r2, [r3, #44]
 2944 0080 1346     		mov	r3, r2
 2945 0082 9B00     		lsls	r3, r3, #2
 2946 0084 1344     		add	r3, r3, r2
 2947 0086 9B00     		lsls	r3, r3, #2
 2948 0088 274A     		ldr	r2, .L186+16
 2949 008a 1A44     		add	r2, r2, r3
 2950 008c FB68     		ldr	r3, [r7, #12]
 2951 008e 0433     		adds	r3, r3, #4
 2952 0090 1946     		mov	r1, r3
 2953 0092 1046     		mov	r0, r2
 2954 0094 FFF7FEFF 		bl	vListInsertEnd
2224:./Libraries/FreeRTOS/Source/tasks.c **** 
2225:./Libraries/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:./Libraries/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2955              		.loc 1 2227 15 is_stmt 1 discriminator 3
 2956 0098 FB68     		ldr	r3, [r7, #12]
 2957 009a DA6A     		ldr	r2, [r3, #44]
 2958              		.loc 1 2227 43 discriminator 3
 2959 009c 234B     		ldr	r3, .L186+20
 2960 009e 1B68     		ldr	r3, [r3]
 2961 00a0 DB6A     		ldr	r3, [r3, #44]
 2962              		.loc 1 2227 8 discriminator 3
 2963 00a2 9A42     		cmp	r2, r3
 2964 00a4 02D3     		bcc	.L178
2228:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2229:./Libraries/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2965              		.loc 1 2229 21
 2966 00a6 224B     		ldr	r3, .L186+24
 2967 00a8 0122     		movs	r2, #1
 2968 00aa 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 96


 2969              	.L178:
2218:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 2970              		.loc 1 2218 12
 2971 00ac 1C4B     		ldr	r3, .L186+8
 2972 00ae 1B68     		ldr	r3, [r3]
2218:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 2973              		.loc 1 2218 10
 2974 00b0 002B     		cmp	r3, #0
 2975 00b2 CBD1     		bne	.L180
2230:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2231:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2232:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2233:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2235:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2236:./Libraries/FreeRTOS/Source/tasks.c **** 
2237:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2976              		.loc 1 2237 7
 2977 00b4 FB68     		ldr	r3, [r7, #12]
 2978 00b6 002B     		cmp	r3, #0
 2979 00b8 01D0     		beq	.L181
2238:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2239:./Libraries/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:./Libraries/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:./Libraries/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:./Libraries/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:./Libraries/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:./Libraries/FreeRTOS/Source/tasks.c **** 					state. */
2245:./Libraries/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2980              		.loc 1 2245 6
 2981 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2982              	.L181:
 2983              	.LBB169:
2246:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2247:./Libraries/FreeRTOS/Source/tasks.c **** 
2248:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:./Libraries/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:./Libraries/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:./Libraries/FreeRTOS/Source/tasks.c **** 				time. */
2252:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2253:./Libraries/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2984              		.loc 1 2253 17
 2985 00be 1D4B     		ldr	r3, .L186+28
 2986 00c0 1B68     		ldr	r3, [r3]
 2987 00c2 7B60     		str	r3, [r7, #4]
2254:./Libraries/FreeRTOS/Source/tasks.c **** 
2255:./Libraries/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2988              		.loc 1 2255 8
 2989 00c4 7B68     		ldr	r3, [r7, #4]
 2990 00c6 002B     		cmp	r3, #0
 2991 00c8 10D0     		beq	.L182
 2992              	.L184:
2256:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2257:./Libraries/FreeRTOS/Source/tasks.c **** 						do
2258:./Libraries/FreeRTOS/Source/tasks.c **** 						{
2259:./Libraries/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2993              		.loc 1 2259 12
ARM GAS  /tmp/ccpNfLZa.s 			page 97


 2994 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2995 00ce 0346     		mov	r3, r0
 2996              		.loc 1 2259 10
 2997 00d0 002B     		cmp	r3, #0
 2998 00d2 02D0     		beq	.L183
2260:./Libraries/FreeRTOS/Source/tasks.c **** 							{
2261:./Libraries/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2999              		.loc 1 2261 23
 3000 00d4 164B     		ldr	r3, .L186+24
 3001 00d6 0122     		movs	r2, #1
 3002 00d8 1A60     		str	r2, [r3]
 3003              	.L183:
2262:./Libraries/FreeRTOS/Source/tasks.c **** 							}
2263:./Libraries/FreeRTOS/Source/tasks.c **** 							else
2264:./Libraries/FreeRTOS/Source/tasks.c **** 							{
2265:./Libraries/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:./Libraries/FreeRTOS/Source/tasks.c **** 							}
2267:./Libraries/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3004              		.loc 1 2267 8
 3005 00da 7B68     		ldr	r3, [r7, #4]
 3006 00dc 013B     		subs	r3, r3, #1
 3007 00de 7B60     		str	r3, [r7, #4]
2268:./Libraries/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3008              		.loc 1 2268 7
 3009 00e0 7B68     		ldr	r3, [r7, #4]
 3010 00e2 002B     		cmp	r3, #0
 3011 00e4 F1D1     		bne	.L184
2269:./Libraries/FreeRTOS/Source/tasks.c **** 
2270:./Libraries/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3012              		.loc 1 2270 20
 3013 00e6 134B     		ldr	r3, .L186+28
 3014 00e8 0022     		movs	r2, #0
 3015 00ea 1A60     		str	r2, [r3]
 3016              	.L182:
 3017              	.LBE169:
2271:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2272:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2273:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2274:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2276:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2277:./Libraries/FreeRTOS/Source/tasks.c **** 
2278:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3018              		.loc 1 2278 23
 3019 00ec 104B     		ldr	r3, .L186+24
 3020 00ee 1B68     		ldr	r3, [r3]
 3021              		.loc 1 2278 7
 3022 00f0 002B     		cmp	r3, #0
 3023 00f2 09D0     		beq	.L177
2279:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2280:./Libraries/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2282:./Libraries/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3024              		.loc 1 2282 23
 3025 00f4 0123     		movs	r3, #1
 3026 00f6 BB60     		str	r3, [r7, #8]
2283:./Libraries/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccpNfLZa.s 			page 98


2284:./Libraries/FreeRTOS/Source/tasks.c **** 					#endif
2285:./Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3027              		.loc 1 2285 6
 3028 00f8 0F4B     		ldr	r3, .L186+32
 3029 00fa 4FF08052 		mov	r2, #268435456
 3030 00fe 1A60     		str	r2, [r3]
 3031              		.syntax unified
 3032              	@ 2285 "./Libraries/FreeRTOS/Source/tasks.c" 1
 3033 0100 BFF34F8F 		dsb
 3034              	@ 0 "" 2
 3035              	@ 2285 "./Libraries/FreeRTOS/Source/tasks.c" 1
 3036 0104 BFF36F8F 		isb
 3037              	@ 0 "" 2
 3038              		.thumb
 3039              		.syntax unified
 3040              	.L177:
2286:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2287:./Libraries/FreeRTOS/Source/tasks.c **** 				else
2288:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2289:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2291:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2292:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2293:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2294:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2295:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2297:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2298:./Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3041              		.loc 1 2298 2
 3042 0108 FFF7FEFF 		bl	vPortExitCritical
2299:./Libraries/FreeRTOS/Source/tasks.c **** 
2300:./Libraries/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3043              		.loc 1 2300 9
 3044 010c BB68     		ldr	r3, [r7, #8]
2301:./Libraries/FreeRTOS/Source/tasks.c **** }
 3045              		.loc 1 2301 1
 3046 010e 1846     		mov	r0, r3
 3047 0110 1037     		adds	r7, r7, #16
 3048              	.LCFI93:
 3049              		.cfi_def_cfa_offset 8
 3050 0112 BD46     		mov	sp, r7
 3051              	.LCFI94:
 3052              		.cfi_def_cfa_register 13
 3053              		@ sp needed
 3054 0114 80BD     		pop	{r7, pc}
 3055              	.L187:
 3056 0116 00BF     		.align	2
 3057              	.L186:
 3058 0118 00000000 		.word	uxSchedulerSuspended
 3059 011c 00000000 		.word	uxCurrentNumberOfTasks
 3060 0120 00000000 		.word	xPendingReadyList
 3061 0124 00000000 		.word	uxTopReadyPriority
 3062 0128 00000000 		.word	pxReadyTasksLists
 3063 012c 00000000 		.word	pxCurrentTCB
 3064 0130 00000000 		.word	xYieldPending
 3065 0134 00000000 		.word	xPendedTicks
ARM GAS  /tmp/ccpNfLZa.s 			page 99


 3066 0138 04ED00E0 		.word	-536810236
 3067              		.cfi_endproc
 3068              	.LFE22:
 3070              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3071              		.align	1
 3072              		.global	xTaskGetTickCount
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv5-d16
 3078              	xTaskGetTickCount:
 3079              	.LFB23:
2302:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:./Libraries/FreeRTOS/Source/tasks.c **** 
2304:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:./Libraries/FreeRTOS/Source/tasks.c **** {
 3080              		.loc 1 2305 1
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 8
 3083              		@ frame_needed = 1, uses_anonymous_args = 0
 3084              		@ link register save eliminated.
 3085 0000 80B4     		push	{r7}
 3086              	.LCFI95:
 3087              		.cfi_def_cfa_offset 4
 3088              		.cfi_offset 7, -4
 3089 0002 83B0     		sub	sp, sp, #12
 3090              	.LCFI96:
 3091              		.cfi_def_cfa_offset 16
 3092 0004 00AF     		add	r7, sp, #0
 3093              	.LCFI97:
 3094              		.cfi_def_cfa_register 7
2306:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:./Libraries/FreeRTOS/Source/tasks.c **** 
2308:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:./Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2311:./Libraries/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3095              		.loc 1 2311 10
 3096 0006 054B     		ldr	r3, .L190
 3097 0008 1B68     		ldr	r3, [r3]
 3098 000a 7B60     		str	r3, [r7, #4]
2312:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2313:./Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:./Libraries/FreeRTOS/Source/tasks.c **** 
2315:./Libraries/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3099              		.loc 1 2315 9
 3100 000c 7B68     		ldr	r3, [r7, #4]
2316:./Libraries/FreeRTOS/Source/tasks.c **** }
 3101              		.loc 1 2316 1
 3102 000e 1846     		mov	r0, r3
 3103 0010 0C37     		adds	r7, r7, #12
 3104              	.LCFI98:
 3105              		.cfi_def_cfa_offset 4
 3106 0012 BD46     		mov	sp, r7
 3107              	.LCFI99:
 3108              		.cfi_def_cfa_register 13
 3109              		@ sp needed
ARM GAS  /tmp/ccpNfLZa.s 			page 100


 3110 0014 5DF8047B 		ldr	r7, [sp], #4
 3111              	.LCFI100:
 3112              		.cfi_restore 7
 3113              		.cfi_def_cfa_offset 0
 3114 0018 7047     		bx	lr
 3115              	.L191:
 3116 001a 00BF     		.align	2
 3117              	.L190:
 3118 001c 00000000 		.word	xTickCount
 3119              		.cfi_endproc
 3120              	.LFE23:
 3122              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3123              		.align	1
 3124              		.global	xTaskGetTickCountFromISR
 3125              		.syntax unified
 3126              		.thumb
 3127              		.thumb_func
 3128              		.fpu fpv5-d16
 3130              	xTaskGetTickCountFromISR:
 3131              	.LFB24:
2317:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:./Libraries/FreeRTOS/Source/tasks.c **** 
2319:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:./Libraries/FreeRTOS/Source/tasks.c **** {
 3132              		.loc 1 2320 1
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 8
 3135              		@ frame_needed = 1, uses_anonymous_args = 0
 3136 0000 80B5     		push	{r7, lr}
 3137              	.LCFI101:
 3138              		.cfi_def_cfa_offset 8
 3139              		.cfi_offset 7, -8
 3140              		.cfi_offset 14, -4
 3141 0002 82B0     		sub	sp, sp, #8
 3142              	.LCFI102:
 3143              		.cfi_def_cfa_offset 16
 3144 0004 00AF     		add	r7, sp, #0
 3145              	.LCFI103:
 3146              		.cfi_def_cfa_register 7
2321:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:./Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:./Libraries/FreeRTOS/Source/tasks.c **** 
2324:./Libraries/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:./Libraries/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:./Libraries/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:./Libraries/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:./Libraries/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:./Libraries/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:./Libraries/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:./Libraries/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:./Libraries/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:./Libraries/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:./Libraries/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:./Libraries/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:./Libraries/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:./Libraries/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:./Libraries/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /tmp/ccpNfLZa.s 			page 101


 3147              		.loc 1 2338 2
 3148 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:./Libraries/FreeRTOS/Source/tasks.c **** 
2340:./Libraries/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3149              		.loc 1 2340 25
 3150 000a 0023     		movs	r3, #0
 3151 000c 7B60     		str	r3, [r7, #4]
2341:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2342:./Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3152              		.loc 1 2342 11
 3153 000e 044B     		ldr	r3, .L194
 3154 0010 1B68     		ldr	r3, [r3]
 3155 0012 3B60     		str	r3, [r7]
2343:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2344:./Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:./Libraries/FreeRTOS/Source/tasks.c **** 
2346:./Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3156              		.loc 1 2346 9
 3157 0014 3B68     		ldr	r3, [r7]
2347:./Libraries/FreeRTOS/Source/tasks.c **** }
 3158              		.loc 1 2347 1
 3159 0016 1846     		mov	r0, r3
 3160 0018 0837     		adds	r7, r7, #8
 3161              	.LCFI104:
 3162              		.cfi_def_cfa_offset 8
 3163 001a BD46     		mov	sp, r7
 3164              	.LCFI105:
 3165              		.cfi_def_cfa_register 13
 3166              		@ sp needed
 3167 001c 80BD     		pop	{r7, pc}
 3168              	.L195:
 3169 001e 00BF     		.align	2
 3170              	.L194:
 3171 0020 00000000 		.word	xTickCount
 3172              		.cfi_endproc
 3173              	.LFE24:
 3175              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3176              		.align	1
 3177              		.global	uxTaskGetNumberOfTasks
 3178              		.syntax unified
 3179              		.thumb
 3180              		.thumb_func
 3181              		.fpu fpv5-d16
 3183              	uxTaskGetNumberOfTasks:
 3184              	.LFB25:
2348:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:./Libraries/FreeRTOS/Source/tasks.c **** 
2350:./Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:./Libraries/FreeRTOS/Source/tasks.c **** {
 3185              		.loc 1 2351 1
 3186              		.cfi_startproc
 3187              		@ args = 0, pretend = 0, frame = 0
 3188              		@ frame_needed = 1, uses_anonymous_args = 0
 3189              		@ link register save eliminated.
 3190 0000 80B4     		push	{r7}
 3191              	.LCFI106:
 3192              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccpNfLZa.s 			page 102


 3193              		.cfi_offset 7, -4
 3194 0002 00AF     		add	r7, sp, #0
 3195              	.LCFI107:
 3196              		.cfi_def_cfa_register 7
2352:./Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:./Libraries/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3197              		.loc 1 2354 9
 3198 0004 034B     		ldr	r3, .L198
 3199 0006 1B68     		ldr	r3, [r3]
2355:./Libraries/FreeRTOS/Source/tasks.c **** }
 3200              		.loc 1 2355 1
 3201 0008 1846     		mov	r0, r3
 3202 000a BD46     		mov	sp, r7
 3203              	.LCFI108:
 3204              		.cfi_def_cfa_register 13
 3205              		@ sp needed
 3206 000c 5DF8047B 		ldr	r7, [sp], #4
 3207              	.LCFI109:
 3208              		.cfi_restore 7
 3209              		.cfi_def_cfa_offset 0
 3210 0010 7047     		bx	lr
 3211              	.L199:
 3212 0012 00BF     		.align	2
 3213              	.L198:
 3214 0014 00000000 		.word	uxCurrentNumberOfTasks
 3215              		.cfi_endproc
 3216              	.LFE25:
 3218              		.section	.text.pcTaskGetName,"ax",%progbits
 3219              		.align	1
 3220              		.global	pcTaskGetName
 3221              		.syntax unified
 3222              		.thumb
 3223              		.thumb_func
 3224              		.fpu fpv5-d16
 3226              	pcTaskGetName:
 3227              	.LFB26:
2356:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:./Libraries/FreeRTOS/Source/tasks.c **** 
2358:./Libraries/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:./Libraries/FreeRTOS/Source/tasks.c **** {
 3228              		.loc 1 2359 1
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 16
 3231              		@ frame_needed = 1, uses_anonymous_args = 0
 3232              		@ link register save eliminated.
 3233 0000 80B4     		push	{r7}
 3234              	.LCFI110:
 3235              		.cfi_def_cfa_offset 4
 3236              		.cfi_offset 7, -4
 3237 0002 85B0     		sub	sp, sp, #20
 3238              	.LCFI111:
 3239              		.cfi_def_cfa_offset 24
 3240 0004 00AF     		add	r7, sp, #0
 3241              	.LCFI112:
 3242              		.cfi_def_cfa_register 7
 3243 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccpNfLZa.s 			page 103


2360:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:./Libraries/FreeRTOS/Source/tasks.c **** 
2362:./Libraries/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:./Libraries/FreeRTOS/Source/tasks.c **** 	queried. */
2364:./Libraries/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3244              		.loc 1 2364 10
 3245 0008 7B68     		ldr	r3, [r7, #4]
 3246 000a 002B     		cmp	r3, #0
 3247 000c 02D1     		bne	.L201
 3248              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3249 000e 0D4B     		ldr	r3, .L206
 3250 0010 1B68     		ldr	r3, [r3]
 3251 0012 00E0     		b	.L202
 3252              	.L201:
 3253              		.loc 1 2364 10 discriminator 2
 3254 0014 7B68     		ldr	r3, [r7, #4]
 3255              	.L202:
 3256              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3257 0016 FB60     		str	r3, [r7, #12]
2365:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3258              		.loc 1 2365 2 discriminator 4
 3259 0018 FB68     		ldr	r3, [r7, #12]
 3260 001a 002B     		cmp	r3, #0
 3261 001c 0AD1     		bne	.L203
 3262              	.LBB170:
 3263              	.LBB171:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3264              		.loc 2 195 2
 3265              		.syntax unified
 3266              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3267 001e 4FF05003 			mov r3, #80												
 3268 0022 83F31188 		msr basepri, r3											
 3269 0026 BFF36F8F 		isb														
 3270 002a BFF34F8F 		dsb														
 3271              	
 3272              	@ 0 "" 2
 3273              		.thumb
 3274              		.syntax unified
 3275 002e BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3276              		.loc 2 203 1
 3277 0030 00BF     		nop
 3278              	.L204:
 3279              	.LBE171:
 3280              	.LBE170:
 3281              		.loc 1 2365 2 discriminator 1
 3282 0032 FEE7     		b	.L204
 3283              	.L203:
2366:./Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3284              		.loc 1 2366 9
 3285 0034 FB68     		ldr	r3, [r7, #12]
 3286 0036 3433     		adds	r3, r3, #52
2367:./Libraries/FreeRTOS/Source/tasks.c **** }
 3287              		.loc 1 2367 1
 3288 0038 1846     		mov	r0, r3
 3289 003a 1437     		adds	r7, r7, #20
 3290              	.LCFI113:
ARM GAS  /tmp/ccpNfLZa.s 			page 104


 3291              		.cfi_def_cfa_offset 4
 3292 003c BD46     		mov	sp, r7
 3293              	.LCFI114:
 3294              		.cfi_def_cfa_register 13
 3295              		@ sp needed
 3296 003e 5DF8047B 		ldr	r7, [sp], #4
 3297              	.LCFI115:
 3298              		.cfi_restore 7
 3299              		.cfi_def_cfa_offset 0
 3300 0042 7047     		bx	lr
 3301              	.L207:
 3302              		.align	2
 3303              	.L206:
 3304 0044 00000000 		.word	pxCurrentTCB
 3305              		.cfi_endproc
 3306              	.LFE26:
 3308              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3309              		.align	1
 3310              		.global	uxTaskGetSystemState
 3311              		.syntax unified
 3312              		.thumb
 3313              		.thumb_func
 3314              		.fpu fpv5-d16
 3316              	uxTaskGetSystemState:
 3317              	.LFB27:
2368:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:./Libraries/FreeRTOS/Source/tasks.c **** 
2370:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:./Libraries/FreeRTOS/Source/tasks.c **** 
2372:./Libraries/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2374:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:./Libraries/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:./Libraries/FreeRTOS/Source/tasks.c **** 
2379:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:./Libraries/FreeRTOS/Source/tasks.c **** 
2381:./Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2383:./Libraries/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:./Libraries/FreeRTOS/Source/tasks.c **** 
2385:./Libraries/FreeRTOS/Source/tasks.c **** 			do
2386:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2387:./Libraries/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:./Libraries/FreeRTOS/Source/tasks.c **** 
2389:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:./Libraries/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:./Libraries/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:./Libraries/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2394:./Libraries/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:./Libraries/FreeRTOS/Source/tasks.c **** 
2396:./Libraries/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2398:./Libraries/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:./Libraries/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
ARM GAS  /tmp/ccpNfLZa.s 			page 105


2400:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2401:./Libraries/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2403:./Libraries/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:./Libraries/FreeRTOS/Source/tasks.c **** 						found. */
2405:./Libraries/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:./Libraries/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2408:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2409:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2410:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2412:./Libraries/FreeRTOS/Source/tasks.c **** 
2413:./Libraries/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2415:./Libraries/FreeRTOS/Source/tasks.c **** 						break;
2416:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2417:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2418:./Libraries/FreeRTOS/Source/tasks.c **** 
2419:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2421:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
2423:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2424:./Libraries/FreeRTOS/Source/tasks.c **** 
2425:./Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2427:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2428:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2429:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2431:./Libraries/FreeRTOS/Source/tasks.c **** 
2432:./Libraries/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2434:./Libraries/FreeRTOS/Source/tasks.c **** 
2435:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:./Libraries/FreeRTOS/Source/tasks.c **** 
2438:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:./Libraries/FreeRTOS/Source/tasks.c **** 
2440:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2442:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:./Libraries/FreeRTOS/Source/tasks.c **** 
2445:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:./Libraries/FreeRTOS/Source/tasks.c **** 
2448:./Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2450:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:./Libraries/FreeRTOS/Source/tasks.c **** 			do
2452:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2453:./Libraries/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:./Libraries/FreeRTOS/Source/tasks.c **** 
2456:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  /tmp/ccpNfLZa.s 			page 106


2457:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2458:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
2460:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2461:./Libraries/FreeRTOS/Source/tasks.c **** 
2462:./Libraries/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:./Libraries/FreeRTOS/Source/tasks.c **** 
2464:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2467:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2469:./Libraries/FreeRTOS/Source/tasks.c **** 
2470:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2472:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2474:./Libraries/FreeRTOS/Source/tasks.c **** 
2475:./Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2477:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2479:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2482:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2483:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
2484:./Libraries/FreeRTOS/Source/tasks.c **** 
2485:./Libraries/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2487:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2489:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2492:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2493:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
2494:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2495:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:./Libraries/FreeRTOS/Source/tasks.c **** 
2497:./Libraries/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2499:./Libraries/FreeRTOS/Source/tasks.c **** 
2500:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:./Libraries/FreeRTOS/Source/tasks.c **** 
2503:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:./Libraries/FreeRTOS/Source/tasks.c **** 
2505:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 3318              		.loc 1 2506 2
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 24
 3321              		@ frame_needed = 1, uses_anonymous_args = 0
 3322 0000 80B5     		push	{r7, lr}
 3323              	.LCFI116:
 3324              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpNfLZa.s 			page 107


 3325              		.cfi_offset 7, -8
 3326              		.cfi_offset 14, -4
 3327 0002 86B0     		sub	sp, sp, #24
 3328              	.LCFI117:
 3329              		.cfi_def_cfa_offset 32
 3330 0004 00AF     		add	r7, sp, #0
 3331              	.LCFI118:
 3332              		.cfi_def_cfa_register 7
 3333 0006 F860     		str	r0, [r7, #12]
 3334 0008 B960     		str	r1, [r7, #8]
 3335 000a 7A60     		str	r2, [r7, #4]
2507:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3336              		.loc 1 2507 14
 3337 000c 0023     		movs	r3, #0
 3338 000e 7B61     		str	r3, [r7, #20]
 3339              		.loc 1 2507 26
 3340 0010 3823     		movs	r3, #56
 3341 0012 3B61     		str	r3, [r7, #16]
2508:./Libraries/FreeRTOS/Source/tasks.c **** 
2509:./Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3342              		.loc 1 2509 3
 3343 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2511:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3344              		.loc 1 2512 20
 3345 0018 3A4B     		ldr	r3, .L212
 3346 001a 1B68     		ldr	r3, [r3]
 3347              		.loc 1 2512 6
 3348 001c BA68     		ldr	r2, [r7, #8]
 3349 001e 9A42     		cmp	r2, r3
 3350 0020 68D3     		bcc	.L209
 3351              	.L210:
2513:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2514:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:./Libraries/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:./Libraries/FreeRTOS/Source/tasks.c **** 				do
2517:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2518:./Libraries/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3352              		.loc 1 2518 13 discriminator 1
 3353 0022 3B69     		ldr	r3, [r7, #16]
 3354 0024 013B     		subs	r3, r3, #1
 3355 0026 3B61     		str	r3, [r7, #16]
2519:./Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3356              		.loc 1 2519 66 discriminator 1
 3357 0028 7A69     		ldr	r2, [r7, #20]
 3358 002a 1346     		mov	r3, r2
 3359 002c DB00     		lsls	r3, r3, #3
 3360 002e 1344     		add	r3, r3, r2
 3361 0030 9B00     		lsls	r3, r3, #2
 3362 0032 1A46     		mov	r2, r3
 3363              		.loc 1 2519 16 discriminator 1
 3364 0034 FB68     		ldr	r3, [r7, #12]
 3365 0036 9818     		adds	r0, r3, r2
 3366 0038 3A69     		ldr	r2, [r7, #16]
 3367 003a 1346     		mov	r3, r2
 3368 003c 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccpNfLZa.s 			page 108


 3369 003e 1344     		add	r3, r3, r2
 3370 0040 9B00     		lsls	r3, r3, #2
 3371 0042 314A     		ldr	r2, .L212+4
 3372 0044 1344     		add	r3, r3, r2
 3373 0046 0122     		movs	r2, #1
 3374 0048 1946     		mov	r1, r3
 3375 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3376 004e 0246     		mov	r2, r0
 3377              		.loc 1 2519 13 discriminator 1
 3378 0050 7B69     		ldr	r3, [r7, #20]
 3379 0052 1344     		add	r3, r3, r2
 3380 0054 7B61     		str	r3, [r7, #20]
2520:./Libraries/FreeRTOS/Source/tasks.c **** 
2521:./Libraries/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3381              		.loc 1 2521 5 discriminator 1
 3382 0056 3B69     		ldr	r3, [r7, #16]
 3383 0058 002B     		cmp	r3, #0
 3384 005a E2D1     		bne	.L210
2522:./Libraries/FreeRTOS/Source/tasks.c **** 
2523:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:./Libraries/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:./Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3385              		.loc 1 2525 65
 3386 005c 7A69     		ldr	r2, [r7, #20]
 3387 005e 1346     		mov	r3, r2
 3388 0060 DB00     		lsls	r3, r3, #3
 3389 0062 1344     		add	r3, r3, r2
 3390 0064 9B00     		lsls	r3, r3, #2
 3391 0066 1A46     		mov	r2, r3
 3392              		.loc 1 2525 15
 3393 0068 FB68     		ldr	r3, [r7, #12]
 3394 006a 1344     		add	r3, r3, r2
 3395 006c 274A     		ldr	r2, .L212+8
 3396 006e 1168     		ldr	r1, [r2]
 3397 0070 0222     		movs	r2, #2
 3398 0072 1846     		mov	r0, r3
 3399 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3400 0078 0246     		mov	r2, r0
 3401              		.loc 1 2525 12
 3402 007a 7B69     		ldr	r3, [r7, #20]
 3403 007c 1344     		add	r3, r3, r2
 3404 007e 7B61     		str	r3, [r7, #20]
2526:./Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3405              		.loc 1 2526 65
 3406 0080 7A69     		ldr	r2, [r7, #20]
 3407 0082 1346     		mov	r3, r2
 3408 0084 DB00     		lsls	r3, r3, #3
 3409 0086 1344     		add	r3, r3, r2
 3410 0088 9B00     		lsls	r3, r3, #2
 3411 008a 1A46     		mov	r2, r3
 3412              		.loc 1 2526 15
 3413 008c FB68     		ldr	r3, [r7, #12]
 3414 008e 1344     		add	r3, r3, r2
 3415 0090 1F4A     		ldr	r2, .L212+12
 3416 0092 1168     		ldr	r1, [r2]
 3417 0094 0222     		movs	r2, #2
 3418 0096 1846     		mov	r0, r3
ARM GAS  /tmp/ccpNfLZa.s 			page 109


 3419 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3420 009c 0246     		mov	r2, r0
 3421              		.loc 1 2526 12
 3422 009e 7B69     		ldr	r3, [r7, #20]
 3423 00a0 1344     		add	r3, r3, r2
 3424 00a2 7B61     		str	r3, [r7, #20]
2527:./Libraries/FreeRTOS/Source/tasks.c **** 
2528:./Libraries/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2530:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:./Libraries/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:./Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3425              		.loc 1 2532 66
 3426 00a4 7A69     		ldr	r2, [r7, #20]
 3427 00a6 1346     		mov	r3, r2
 3428 00a8 DB00     		lsls	r3, r3, #3
 3429 00aa 1344     		add	r3, r3, r2
 3430 00ac 9B00     		lsls	r3, r3, #2
 3431 00ae 1A46     		mov	r2, r3
 3432              		.loc 1 2532 16
 3433 00b0 FB68     		ldr	r3, [r7, #12]
 3434 00b2 1344     		add	r3, r3, r2
 3435 00b4 0422     		movs	r2, #4
 3436 00b6 1749     		ldr	r1, .L212+16
 3437 00b8 1846     		mov	r0, r3
 3438 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3439 00be 0246     		mov	r2, r0
 3440              		.loc 1 2532 13
 3441 00c0 7B69     		ldr	r3, [r7, #20]
 3442 00c2 1344     		add	r3, r3, r2
 3443 00c4 7B61     		str	r3, [r7, #20]
2533:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2534:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2535:./Libraries/FreeRTOS/Source/tasks.c **** 
2536:./Libraries/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2538:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:./Libraries/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:./Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3444              		.loc 1 2540 66
 3445 00c6 7A69     		ldr	r2, [r7, #20]
 3446 00c8 1346     		mov	r3, r2
 3447 00ca DB00     		lsls	r3, r3, #3
 3448 00cc 1344     		add	r3, r3, r2
 3449 00ce 9B00     		lsls	r3, r3, #2
 3450 00d0 1A46     		mov	r2, r3
 3451              		.loc 1 2540 16
 3452 00d2 FB68     		ldr	r3, [r7, #12]
 3453 00d4 1344     		add	r3, r3, r2
 3454 00d6 0322     		movs	r2, #3
 3455 00d8 0F49     		ldr	r1, .L212+20
 3456 00da 1846     		mov	r0, r3
 3457 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3458 00e0 0246     		mov	r2, r0
 3459              		.loc 1 2540 13
 3460 00e2 7B69     		ldr	r3, [r7, #20]
 3461 00e4 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccpNfLZa.s 			page 110


 3462 00e6 7B61     		str	r3, [r7, #20]
2541:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2542:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2543:./Libraries/FreeRTOS/Source/tasks.c **** 
2544:./Libraries/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2546:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2548:./Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:./Libraries/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:./Libraries/FreeRTOS/Source/tasks.c **** 						#else
2551:./Libraries/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:./Libraries/FreeRTOS/Source/tasks.c **** 						#endif
2553:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2554:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2555:./Libraries/FreeRTOS/Source/tasks.c **** 				#else
2556:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2557:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3463              		.loc 1 2557 8
 3464 00e8 7B68     		ldr	r3, [r7, #4]
 3465 00ea 002B     		cmp	r3, #0
 3466 00ec 02D0     		beq	.L209
2558:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2559:./Libraries/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3467              		.loc 1 2559 24
 3468 00ee 7B68     		ldr	r3, [r7, #4]
 3469 00f0 0022     		movs	r2, #0
 3470 00f2 1A60     		str	r2, [r3]
 3471              	.L209:
2560:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2561:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2562:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2563:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2564:./Libraries/FreeRTOS/Source/tasks.c **** 			else
2565:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2566:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2568:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2569:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3472              		.loc 1 2569 12
 3473 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:./Libraries/FreeRTOS/Source/tasks.c **** 
2571:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3474              		.loc 1 2571 10
 3475 00f8 7B69     		ldr	r3, [r7, #20]
2572:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 3476              		.loc 1 2572 2
 3477 00fa 1846     		mov	r0, r3
 3478 00fc 1837     		adds	r7, r7, #24
 3479              	.LCFI119:
 3480              		.cfi_def_cfa_offset 8
 3481 00fe BD46     		mov	sp, r7
 3482              	.LCFI120:
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 0100 80BD     		pop	{r7, pc}
 3486              	.L213:
ARM GAS  /tmp/ccpNfLZa.s 			page 111


 3487 0102 00BF     		.align	2
 3488              	.L212:
 3489 0104 00000000 		.word	uxCurrentNumberOfTasks
 3490 0108 00000000 		.word	pxReadyTasksLists
 3491 010c 00000000 		.word	pxDelayedTaskList
 3492 0110 00000000 		.word	pxOverflowDelayedTaskList
 3493 0114 00000000 		.word	xTasksWaitingTermination
 3494 0118 00000000 		.word	xSuspendedTaskList
 3495              		.cfi_endproc
 3496              	.LFE27:
 3498              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3499              		.align	1
 3500              		.global	xTaskCatchUpTicks
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3504              		.fpu fpv5-d16
 3506              	xTaskCatchUpTicks:
 3507              	.LFB28:
2573:./Libraries/FreeRTOS/Source/tasks.c **** 
2574:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:./Libraries/FreeRTOS/Source/tasks.c **** 
2577:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:./Libraries/FreeRTOS/Source/tasks.c **** 
2579:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2581:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:./Libraries/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:./Libraries/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2586:./Libraries/FreeRTOS/Source/tasks.c **** 
2587:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:./Libraries/FreeRTOS/Source/tasks.c **** 
2590:./Libraries/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:./Libraries/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:./Libraries/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:./Libraries/FreeRTOS/Source/tasks.c **** 1. */
2594:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:./Libraries/FreeRTOS/Source/tasks.c **** 
2596:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2598:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:./Libraries/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:./Libraries/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:./Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:./Libraries/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2605:./Libraries/FreeRTOS/Source/tasks.c **** 
2606:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:./Libraries/FreeRTOS/Source/tasks.c **** 
2609:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:./Libraries/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccpNfLZa.s 			page 112


 3508              		.loc 1 2610 1
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 16
 3511              		@ frame_needed = 1, uses_anonymous_args = 0
 3512 0000 80B5     		push	{r7, lr}
 3513              	.LCFI121:
 3514              		.cfi_def_cfa_offset 8
 3515              		.cfi_offset 7, -8
 3516              		.cfi_offset 14, -4
 3517 0002 84B0     		sub	sp, sp, #16
 3518              	.LCFI122:
 3519              		.cfi_def_cfa_offset 24
 3520 0004 00AF     		add	r7, sp, #0
 3521              	.LCFI123:
 3522              		.cfi_def_cfa_register 7
 3523 0006 7860     		str	r0, [r7, #4]
2611:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3524              		.loc 1 2611 12
 3525 0008 0023     		movs	r3, #0
 3526 000a FB60     		str	r3, [r7, #12]
2612:./Libraries/FreeRTOS/Source/tasks.c **** 
2613:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:./Libraries/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3527              		.loc 1 2615 2
 3528 000c 0F4B     		ldr	r3, .L218
 3529 000e 1B68     		ldr	r3, [r3]
 3530 0010 002B     		cmp	r3, #0
 3531 0012 0AD0     		beq	.L215
 3532              	.LBB172:
 3533              	.LBB173:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3534              		.loc 2 195 2
 3535              		.syntax unified
 3536              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3537 0014 4FF05003 			mov r3, #80												
 3538 0018 83F31188 		msr basepri, r3											
 3539 001c BFF36F8F 		isb														
 3540 0020 BFF34F8F 		dsb														
 3541              	
 3542              	@ 0 "" 2
 3543              		.thumb
 3544              		.syntax unified
 3545 0024 BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3546              		.loc 2 203 1
 3547 0026 00BF     		nop
 3548              	.L216:
 3549              	.LBE173:
 3550              	.LBE172:
 3551              		.loc 1 2615 2 discriminator 1
 3552 0028 FEE7     		b	.L216
 3553              	.L215:
2616:./Libraries/FreeRTOS/Source/tasks.c **** 
2617:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:./Libraries/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:./Libraries/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
ARM GAS  /tmp/ccpNfLZa.s 			page 113


 3554              		.loc 1 2619 2
 3555 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:./Libraries/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3556              		.loc 1 2620 15
 3557 002e 084B     		ldr	r3, .L218+4
 3558 0030 1A68     		ldr	r2, [r3]
 3559 0032 7B68     		ldr	r3, [r7, #4]
 3560 0034 1344     		add	r3, r3, r2
 3561 0036 064A     		ldr	r2, .L218+4
 3562 0038 1360     		str	r3, [r2]
2621:./Libraries/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3563              		.loc 1 2621 19
 3564 003a FFF7FEFF 		bl	xTaskResumeAll
 3565 003e F860     		str	r0, [r7, #12]
2622:./Libraries/FreeRTOS/Source/tasks.c **** 
2623:./Libraries/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3566              		.loc 1 2623 9
 3567 0040 FB68     		ldr	r3, [r7, #12]
2624:./Libraries/FreeRTOS/Source/tasks.c **** }
 3568              		.loc 1 2624 1
 3569 0042 1846     		mov	r0, r3
 3570 0044 1037     		adds	r7, r7, #16
 3571              	.LCFI124:
 3572              		.cfi_def_cfa_offset 8
 3573 0046 BD46     		mov	sp, r7
 3574              	.LCFI125:
 3575              		.cfi_def_cfa_register 13
 3576              		@ sp needed
 3577 0048 80BD     		pop	{r7, pc}
 3578              	.L219:
 3579 004a 00BF     		.align	2
 3580              	.L218:
 3581 004c 00000000 		.word	uxSchedulerSuspended
 3582 0050 00000000 		.word	xPendedTicks
 3583              		.cfi_endproc
 3584              	.LFE28:
 3586              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3587              		.align	1
 3588              		.global	xTaskIncrementTick
 3589              		.syntax unified
 3590              		.thumb
 3591              		.thumb_func
 3592              		.fpu fpv5-d16
 3594              	xTaskIncrementTick:
 3595              	.LFB29:
2625:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:./Libraries/FreeRTOS/Source/tasks.c **** 
2627:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:./Libraries/FreeRTOS/Source/tasks.c **** 
2629:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2631:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:./Libraries/FreeRTOS/Source/tasks.c **** 
2634:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:./Libraries/FreeRTOS/Source/tasks.c **** 
2636:./Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
ARM GAS  /tmp/ccpNfLZa.s 			page 114


2637:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2638:./Libraries/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:./Libraries/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:./Libraries/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2642:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:./Libraries/FreeRTOS/Source/tasks.c **** 
2644:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:./Libraries/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:./Libraries/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:./Libraries/FreeRTOS/Source/tasks.c **** 
2649:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:./Libraries/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:./Libraries/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:./Libraries/FreeRTOS/Source/tasks.c **** 				is used. */
2653:./Libraries/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2655:./Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2657:./Libraries/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:./Libraries/FreeRTOS/Source/tasks.c **** 
2659:./Libraries/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:./Libraries/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:./Libraries/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:./Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2664:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2665:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2666:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2668:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2669:./Libraries/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:./Libraries/FreeRTOS/Source/tasks.c **** 
2671:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:./Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:./Libraries/FreeRTOS/Source/tasks.c **** 
2674:./Libraries/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:./Libraries/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:./Libraries/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2678:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:./Libraries/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:./Libraries/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2683:./Libraries/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:./Libraries/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:./Libraries/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2687:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2688:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2689:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2691:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2692:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:./Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccpNfLZa.s 			page 115


2694:./Libraries/FreeRTOS/Source/tasks.c **** 			else
2695:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2696:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2698:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2699:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:./Libraries/FreeRTOS/Source/tasks.c **** 
2701:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2703:./Libraries/FreeRTOS/Source/tasks.c **** 
2704:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:./Libraries/FreeRTOS/Source/tasks.c **** 
2707:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:./Libraries/FreeRTOS/Source/tasks.c **** {
 3596              		.loc 1 2708 1
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 24
 3599              		@ frame_needed = 1, uses_anonymous_args = 0
 3600 0000 80B5     		push	{r7, lr}
 3601              	.LCFI126:
 3602              		.cfi_def_cfa_offset 8
 3603              		.cfi_offset 7, -8
 3604              		.cfi_offset 14, -4
 3605 0002 86B0     		sub	sp, sp, #24
 3606              	.LCFI127:
 3607              		.cfi_def_cfa_offset 32
 3608 0004 00AF     		add	r7, sp, #0
 3609              	.LCFI128:
 3610              		.cfi_def_cfa_register 7
2709:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3611              		.loc 1 2711 12
 3612 0006 0023     		movs	r3, #0
 3613 0008 7B61     		str	r3, [r7, #20]
2712:./Libraries/FreeRTOS/Source/tasks.c **** 
2713:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:./Libraries/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:./Libraries/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:./Libraries/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:./Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3614              		.loc 1 2717 27
 3615 000a 4F4B     		ldr	r3, .L235
 3616 000c 1B68     		ldr	r3, [r3]
 3617              		.loc 1 2717 4
 3618 000e 002B     		cmp	r3, #0
 3619 0010 40F08F80 		bne	.L221
 3620              	.LBB174:
2718:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2719:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:./Libraries/FreeRTOS/Source/tasks.c **** 		block. */
2721:./Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3621              		.loc 1 2721 49
 3622 0014 4D4B     		ldr	r3, .L235+4
 3623 0016 1B68     		ldr	r3, [r3]
 3624              		.loc 1 2721 20
ARM GAS  /tmp/ccpNfLZa.s 			page 116


 3625 0018 0133     		adds	r3, r3, #1
 3626 001a 3B61     		str	r3, [r7, #16]
2722:./Libraries/FreeRTOS/Source/tasks.c **** 
2723:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:./Libraries/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:./Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3627              		.loc 1 2725 14
 3628 001c 4B4A     		ldr	r2, .L235+4
 3629 001e 3B69     		ldr	r3, [r7, #16]
 3630 0020 1360     		str	r3, [r2]
2726:./Libraries/FreeRTOS/Source/tasks.c **** 
2727:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3631              		.loc 1 2727 5
 3632 0022 3B69     		ldr	r3, [r7, #16]
 3633 0024 002B     		cmp	r3, #0
 3634 0026 20D1     		bne	.L222
 3635              	.LBB175:
2728:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2729:./Libraries/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3636              		.loc 1 2729 4
 3637 0028 494B     		ldr	r3, .L235+8
 3638 002a 1B68     		ldr	r3, [r3]
 3639 002c 1B68     		ldr	r3, [r3]
 3640 002e 002B     		cmp	r3, #0
 3641 0030 0AD0     		beq	.L223
 3642              	.LBB176:
 3643              	.LBB177:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3644              		.loc 2 195 2
 3645              		.syntax unified
 3646              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3647 0032 4FF05003 			mov r3, #80												
 3648 0036 83F31188 		msr basepri, r3											
 3649 003a BFF36F8F 		isb														
 3650 003e BFF34F8F 		dsb														
 3651              	
 3652              	@ 0 "" 2
 3653              		.thumb
 3654              		.syntax unified
 3655 0042 3B60     		str	r3, [r7]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3656              		.loc 2 203 1
 3657 0044 00BF     		nop
 3658              	.L224:
 3659              	.LBE177:
 3660              	.LBE176:
 3661              		.loc 1 2729 4 discriminator 1
 3662 0046 FEE7     		b	.L224
 3663              	.L223:
 3664              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3665 0048 414B     		ldr	r3, .L235+8
 3666 004a 1B68     		ldr	r3, [r3]
 3667 004c FB60     		str	r3, [r7, #12]
 3668 004e 414B     		ldr	r3, .L235+12
 3669 0050 1B68     		ldr	r3, [r3]
 3670 0052 3F4A     		ldr	r2, .L235+8
 3671 0054 1360     		str	r3, [r2]
ARM GAS  /tmp/ccpNfLZa.s 			page 117


 3672 0056 3F4A     		ldr	r2, .L235+12
 3673 0058 FB68     		ldr	r3, [r7, #12]
 3674 005a 1360     		str	r3, [r2]
 3675 005c 3E4B     		ldr	r3, .L235+16
 3676 005e 1B68     		ldr	r3, [r3]
 3677 0060 0133     		adds	r3, r3, #1
 3678 0062 3D4A     		ldr	r2, .L235+16
 3679 0064 1360     		str	r3, [r2]
 3680 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3681              	.L222:
 3682              	.LBE175:
2730:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2731:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2732:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2733:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2735:./Libraries/FreeRTOS/Source/tasks.c **** 
2736:./Libraries/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:./Libraries/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:./Libraries/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:./Libraries/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3683              		.loc 1 2740 23 is_stmt 1
 3684 006a 3C4B     		ldr	r3, .L235+20
 3685 006c 1B68     		ldr	r3, [r3]
 3686              		.loc 1 2740 5
 3687 006e 3A69     		ldr	r2, [r7, #16]
 3688 0070 9A42     		cmp	r2, r3
 3689 0072 49D3     		bcc	.L225
 3690              	.L231:
2741:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2742:./Libraries/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2744:./Libraries/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3691              		.loc 1 2744 9
 3692 0074 364B     		ldr	r3, .L235+8
 3693 0076 1B68     		ldr	r3, [r3]
 3694 0078 1B68     		ldr	r3, [r3]
 3695              		.loc 1 2744 7
 3696 007a 002B     		cmp	r3, #0
 3697 007c 04D1     		bne	.L226
2745:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2746:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:./Libraries/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:./Libraries/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:./Libraries/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:./Libraries/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:./Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3698              		.loc 1 2751 27
 3699 007e 374B     		ldr	r3, .L235+20
 3700 0080 4FF0FF32 		mov	r2, #-1
 3701 0084 1A60     		str	r2, [r3]
2752:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 3702              		.loc 1 2752 6
 3703 0086 3FE0     		b	.L225
 3704              	.L226:
2753:./Libraries/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccpNfLZa.s 			page 118


2754:./Libraries/FreeRTOS/Source/tasks.c **** 				else
2755:./Libraries/FreeRTOS/Source/tasks.c **** 				{
2756:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:./Libraries/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:./Libraries/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:./Libraries/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3705              		.loc 1 2760 14
 3706 0088 314B     		ldr	r3, .L235+8
 3707 008a 1B68     		ldr	r3, [r3]
 3708 008c DB68     		ldr	r3, [r3, #12]
 3709              		.loc 1 2760 12
 3710 008e DB68     		ldr	r3, [r3, #12]
 3711 0090 BB60     		str	r3, [r7, #8]
2761:./Libraries/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3712              		.loc 1 2761 17
 3713 0092 BB68     		ldr	r3, [r7, #8]
 3714 0094 5B68     		ldr	r3, [r3, #4]
 3715 0096 7B60     		str	r3, [r7, #4]
2762:./Libraries/FreeRTOS/Source/tasks.c **** 
2763:./Libraries/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3716              		.loc 1 2763 8
 3717 0098 3A69     		ldr	r2, [r7, #16]
 3718 009a 7B68     		ldr	r3, [r7, #4]
 3719 009c 9A42     		cmp	r2, r3
 3720 009e 03D2     		bcs	.L227
2764:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2765:./Libraries/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:./Libraries/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:./Libraries/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:./Libraries/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:./Libraries/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:./Libraries/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3721              		.loc 1 2770 28
 3722 00a0 2E4A     		ldr	r2, .L235+20
 3723 00a2 7B68     		ldr	r3, [r7, #4]
 3724 00a4 1360     		str	r3, [r2]
2771:./Libraries/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3725              		.loc 1 2771 7
 3726 00a6 2FE0     		b	.L225
 3727              	.L227:
2772:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2773:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2774:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2775:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2777:./Libraries/FreeRTOS/Source/tasks.c **** 
2778:./Libraries/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3728              		.loc 1 2779 15
 3729 00a8 BB68     		ldr	r3, [r7, #8]
 3730 00aa 0433     		adds	r3, r3, #4
 3731 00ac 1846     		mov	r0, r3
 3732 00ae FFF7FEFF 		bl	uxListRemove
2780:./Libraries/FreeRTOS/Source/tasks.c **** 
2781:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:./Libraries/FreeRTOS/Source/tasks.c **** 					it from the event list. */
ARM GAS  /tmp/ccpNfLZa.s 			page 119


2783:./Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3733              		.loc 1 2783 10
 3734 00b2 BB68     		ldr	r3, [r7, #8]
 3735 00b4 9B6A     		ldr	r3, [r3, #40]
 3736              		.loc 1 2783 8
 3737 00b6 002B     		cmp	r3, #0
 3738 00b8 04D0     		beq	.L228
2784:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2785:./Libraries/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3739              		.loc 1 2785 16
 3740 00ba BB68     		ldr	r3, [r7, #8]
 3741 00bc 1833     		adds	r3, r3, #24
 3742 00be 1846     		mov	r0, r3
 3743 00c0 FFF7FEFF 		bl	uxListRemove
 3744              	.L228:
2786:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2787:./Libraries/FreeRTOS/Source/tasks.c **** 					else
2788:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2789:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2791:./Libraries/FreeRTOS/Source/tasks.c **** 
2792:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:./Libraries/FreeRTOS/Source/tasks.c **** 					list. */
2794:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3745              		.loc 1 2794 6
 3746 00c4 BB68     		ldr	r3, [r7, #8]
 3747 00c6 DA6A     		ldr	r2, [r3, #44]
 3748 00c8 254B     		ldr	r3, .L235+24
 3749 00ca 1B68     		ldr	r3, [r3]
 3750 00cc 9A42     		cmp	r2, r3
 3751 00ce 03D9     		bls	.L229
 3752              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3753 00d0 BB68     		ldr	r3, [r7, #8]
 3754 00d2 DB6A     		ldr	r3, [r3, #44]
 3755 00d4 224A     		ldr	r2, .L235+24
 3756 00d6 1360     		str	r3, [r2]
 3757              	.L229:
 3758              		.loc 1 2794 6 discriminator 3
 3759 00d8 BB68     		ldr	r3, [r7, #8]
 3760 00da DA6A     		ldr	r2, [r3, #44]
 3761 00dc 1346     		mov	r3, r2
 3762 00de 9B00     		lsls	r3, r3, #2
 3763 00e0 1344     		add	r3, r3, r2
 3764 00e2 9B00     		lsls	r3, r3, #2
 3765 00e4 1F4A     		ldr	r2, .L235+28
 3766 00e6 1A44     		add	r2, r2, r3
 3767 00e8 BB68     		ldr	r3, [r7, #8]
 3768 00ea 0433     		adds	r3, r3, #4
 3769 00ec 1946     		mov	r1, r3
 3770 00ee 1046     		mov	r0, r2
 3771 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:./Libraries/FreeRTOS/Source/tasks.c **** 
2796:./Libraries/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:./Libraries/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:./Libraries/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:./Libraries/FreeRTOS/Source/tasks.c **** 					{
2800:./Libraries/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
ARM GAS  /tmp/ccpNfLZa.s 			page 120


2801:./Libraries/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:./Libraries/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:./Libraries/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:./Libraries/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3772              		.loc 1 2804 16 is_stmt 1 discriminator 3
 3773 00f4 BB68     		ldr	r3, [r7, #8]
 3774 00f6 DA6A     		ldr	r2, [r3, #44]
 3775              		.loc 1 2804 44 discriminator 3
 3776 00f8 1B4B     		ldr	r3, .L235+32
 3777 00fa 1B68     		ldr	r3, [r3]
 3778 00fc DB6A     		ldr	r3, [r3, #44]
 3779              		.loc 1 2804 9 discriminator 3
 3780 00fe 9A42     		cmp	r2, r3
 3781 0100 B8D3     		bcc	.L231
2805:./Libraries/FreeRTOS/Source/tasks.c **** 						{
2806:./Libraries/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3782              		.loc 1 2806 24
 3783 0102 0123     		movs	r3, #1
 3784 0104 7B61     		str	r3, [r7, #20]
2744:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 3785              		.loc 1 2744 7
 3786 0106 B5E7     		b	.L231
 3787              	.L225:
2807:./Libraries/FreeRTOS/Source/tasks.c **** 						}
2808:./Libraries/FreeRTOS/Source/tasks.c **** 						else
2809:./Libraries/FreeRTOS/Source/tasks.c **** 						{
2810:./Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:./Libraries/FreeRTOS/Source/tasks.c **** 						}
2812:./Libraries/FreeRTOS/Source/tasks.c **** 					}
2813:./Libraries/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:./Libraries/FreeRTOS/Source/tasks.c **** 				}
2815:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2816:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2817:./Libraries/FreeRTOS/Source/tasks.c **** 
2818:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:./Libraries/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:./Libraries/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2823:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3788              		.loc 1 2823 8
 3789 0108 174B     		ldr	r3, .L235+32
 3790 010a 1B68     		ldr	r3, [r3]
 3791 010c DA6A     		ldr	r2, [r3, #44]
 3792 010e 1549     		ldr	r1, .L235+28
 3793 0110 1346     		mov	r3, r2
 3794 0112 9B00     		lsls	r3, r3, #2
 3795 0114 1344     		add	r3, r3, r2
 3796 0116 9B00     		lsls	r3, r3, #2
 3797 0118 0B44     		add	r3, r3, r1
 3798 011a 1B68     		ldr	r3, [r3]
 3799              		.loc 1 2823 6
 3800 011c 012B     		cmp	r3, #1
 3801 011e 01D9     		bls	.L232
2824:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2825:./Libraries/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3802              		.loc 1 2825 21
ARM GAS  /tmp/ccpNfLZa.s 			page 121


 3803 0120 0123     		movs	r3, #1
 3804 0122 7B61     		str	r3, [r7, #20]
 3805              	.L232:
2826:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2827:./Libraries/FreeRTOS/Source/tasks.c **** 			else
2828:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2829:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2831:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2832:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:./Libraries/FreeRTOS/Source/tasks.c **** 
2834:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2836:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:./Libraries/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2840:./Libraries/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2842:./Libraries/FreeRTOS/Source/tasks.c **** 			else
2843:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2844:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2846:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2847:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:./Libraries/FreeRTOS/Source/tasks.c **** 
2849:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2851:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3806              		.loc 1 2851 22
 3807 0124 114B     		ldr	r3, .L235+36
 3808 0126 1B68     		ldr	r3, [r3]
 3809              		.loc 1 2851 6
 3810 0128 002B     		cmp	r3, #0
 3811 012a 07D0     		beq	.L233
2852:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2853:./Libraries/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3812              		.loc 1 2853 21
 3813 012c 0123     		movs	r3, #1
 3814 012e 7B61     		str	r3, [r7, #20]
 3815 0130 04E0     		b	.L233
 3816              	.L221:
 3817              	.LBE174:
2854:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2855:./Libraries/FreeRTOS/Source/tasks.c **** 			else
2856:./Libraries/FreeRTOS/Source/tasks.c **** 			{
2857:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:./Libraries/FreeRTOS/Source/tasks.c **** 			}
2859:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2860:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2862:./Libraries/FreeRTOS/Source/tasks.c **** 	else
2863:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2864:./Libraries/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3818              		.loc 1 2864 3
 3819 0132 0F4B     		ldr	r3, .L235+40
 3820 0134 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 122


 3821 0136 0133     		adds	r3, r3, #1
 3822 0138 0D4A     		ldr	r2, .L235+40
 3823 013a 1360     		str	r3, [r2]
 3824              	.L233:
2865:./Libraries/FreeRTOS/Source/tasks.c **** 
2866:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:./Libraries/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2870:./Libraries/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2872:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2873:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2874:./Libraries/FreeRTOS/Source/tasks.c **** 
2875:./Libraries/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3825              		.loc 1 2875 9
 3826 013c 7B69     		ldr	r3, [r7, #20]
2876:./Libraries/FreeRTOS/Source/tasks.c **** }
 3827              		.loc 1 2876 1
 3828 013e 1846     		mov	r0, r3
 3829 0140 1837     		adds	r7, r7, #24
 3830              	.LCFI129:
 3831              		.cfi_def_cfa_offset 8
 3832 0142 BD46     		mov	sp, r7
 3833              	.LCFI130:
 3834              		.cfi_def_cfa_register 13
 3835              		@ sp needed
 3836 0144 80BD     		pop	{r7, pc}
 3837              	.L236:
 3838 0146 00BF     		.align	2
 3839              	.L235:
 3840 0148 00000000 		.word	uxSchedulerSuspended
 3841 014c 00000000 		.word	xTickCount
 3842 0150 00000000 		.word	pxDelayedTaskList
 3843 0154 00000000 		.word	pxOverflowDelayedTaskList
 3844 0158 00000000 		.word	xNumOfOverflows
 3845 015c 00000000 		.word	xNextTaskUnblockTime
 3846 0160 00000000 		.word	uxTopReadyPriority
 3847 0164 00000000 		.word	pxReadyTasksLists
 3848 0168 00000000 		.word	pxCurrentTCB
 3849 016c 00000000 		.word	xYieldPending
 3850 0170 00000000 		.word	xPendedTicks
 3851              		.cfi_endproc
 3852              	.LFE29:
 3854              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3855              		.align	1
 3856              		.global	vTaskSwitchContext
 3857              		.syntax unified
 3858              		.thumb
 3859              		.thumb_func
 3860              		.fpu fpv5-d16
 3862              	vTaskSwitchContext:
 3863              	.LFB30:
2877:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:./Libraries/FreeRTOS/Source/tasks.c **** 
2879:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 123


2881:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2883:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:./Libraries/FreeRTOS/Source/tasks.c **** 
2885:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:./Libraries/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2889:./Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2891:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2892:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2893:./Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2895:./Libraries/FreeRTOS/Source/tasks.c **** 
2896:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:./Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2900:./Libraries/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2902:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2904:./Libraries/FreeRTOS/Source/tasks.c **** 
2905:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:./Libraries/FreeRTOS/Source/tasks.c **** 
2908:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:./Libraries/FreeRTOS/Source/tasks.c **** 
2910:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2912:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:./Libraries/FreeRTOS/Source/tasks.c **** 
2915:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:./Libraries/FreeRTOS/Source/tasks.c **** 
2918:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:./Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2922:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2924:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:./Libraries/FreeRTOS/Source/tasks.c **** 
2926:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2928:./Libraries/FreeRTOS/Source/tasks.c **** 
2929:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:./Libraries/FreeRTOS/Source/tasks.c **** 
2932:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:./Libraries/FreeRTOS/Source/tasks.c **** 
2934:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2936:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
ARM GAS  /tmp/ccpNfLZa.s 			page 124


2938:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:./Libraries/FreeRTOS/Source/tasks.c **** 
2940:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:./Libraries/FreeRTOS/Source/tasks.c **** 
2943:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:./Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:./Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2947:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2949:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:./Libraries/FreeRTOS/Source/tasks.c **** 
2951:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2953:./Libraries/FreeRTOS/Source/tasks.c **** 
2954:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:./Libraries/FreeRTOS/Source/tasks.c **** 
2957:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:./Libraries/FreeRTOS/Source/tasks.c **** 
2959:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2961:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:./Libraries/FreeRTOS/Source/tasks.c **** 
2964:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2967:./Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2969:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2970:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2971:./Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2973:./Libraries/FreeRTOS/Source/tasks.c **** 
2974:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2976:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2978:./Libraries/FreeRTOS/Source/tasks.c **** 		else
2979:./Libraries/FreeRTOS/Source/tasks.c **** 		{
2980:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:./Libraries/FreeRTOS/Source/tasks.c **** 		}
2982:./Libraries/FreeRTOS/Source/tasks.c **** 
2983:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2985:./Libraries/FreeRTOS/Source/tasks.c **** 
2986:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:./Libraries/FreeRTOS/Source/tasks.c **** 
2989:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:./Libraries/FreeRTOS/Source/tasks.c **** {
 3864              		.loc 1 2990 1
 3865              		.cfi_startproc
 3866              		@ args = 0, pretend = 0, frame = 16
 3867              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccpNfLZa.s 			page 125


 3868              		@ link register save eliminated.
 3869 0000 80B4     		push	{r7}
 3870              	.LCFI131:
 3871              		.cfi_def_cfa_offset 4
 3872              		.cfi_offset 7, -4
 3873 0002 85B0     		sub	sp, sp, #20
 3874              	.LCFI132:
 3875              		.cfi_def_cfa_offset 24
 3876 0004 00AF     		add	r7, sp, #0
 3877              	.LCFI133:
 3878              		.cfi_def_cfa_register 7
2991:./Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3879              		.loc 1 2991 27
 3880 0006 284B     		ldr	r3, .L246
 3881 0008 1B68     		ldr	r3, [r3]
 3882              		.loc 1 2991 4
 3883 000a 002B     		cmp	r3, #0
 3884 000c 03D0     		beq	.L238
2992:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2993:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:./Libraries/FreeRTOS/Source/tasks.c **** 		switch. */
2995:./Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3885              		.loc 1 2995 17
 3886 000e 274B     		ldr	r3, .L246+4
 3887 0010 0122     		movs	r2, #1
 3888 0012 1A60     		str	r2, [r3]
2996:./Libraries/FreeRTOS/Source/tasks.c **** 	}
2997:./Libraries/FreeRTOS/Source/tasks.c **** 	else
2998:./Libraries/FreeRTOS/Source/tasks.c **** 	{
2999:./Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:./Libraries/FreeRTOS/Source/tasks.c **** 
3002:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3004:./Libraries/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:./Libraries/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:./Libraries/FreeRTOS/Source/tasks.c **** 			#else
3007:./Libraries/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
3009:./Libraries/FreeRTOS/Source/tasks.c **** 
3010:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:./Libraries/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:./Libraries/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:./Libraries/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:./Libraries/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:./Libraries/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:./Libraries/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3019:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3021:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3022:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3023:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3025:./Libraries/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:./Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccpNfLZa.s 			page 126


3027:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:./Libraries/FreeRTOS/Source/tasks.c **** 
3029:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:./Libraries/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:./Libraries/FreeRTOS/Source/tasks.c **** 
3032:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3035:./Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3037:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3038:./Libraries/FreeRTOS/Source/tasks.c **** 
3039:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:./Libraries/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:./Libraries/FreeRTOS/Source/tasks.c **** 
3044:./Libraries/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3047:./Libraries/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3049:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3050:./Libraries/FreeRTOS/Source/tasks.c **** 
3051:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3053:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:./Libraries/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:./Libraries/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:./Libraries/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:./Libraries/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3059:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3061:./Libraries/FreeRTOS/Source/tasks.c **** }
 3889              		.loc 1 3061 1
 3890 0014 41E0     		b	.L245
 3891              	.L238:
2999:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3892              		.loc 1 2999 17
 3893 0016 254B     		ldr	r3, .L246+4
 3894 0018 0022     		movs	r2, #0
 3895 001a 1A60     		str	r2, [r3]
 3896              	.LBB178:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3897              		.loc 1 3041 3
 3898 001c 244B     		ldr	r3, .L246+8
 3899 001e 1B68     		ldr	r3, [r3]
 3900 0020 FB60     		str	r3, [r7, #12]
 3901 0022 10E0     		b	.L240
 3902              	.L243:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3903              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3904 0024 FB68     		ldr	r3, [r7, #12]
 3905 0026 002B     		cmp	r3, #0
 3906 0028 0AD1     		bne	.L241
 3907              	.LBB179:
ARM GAS  /tmp/ccpNfLZa.s 			page 127


 3908              	.LBB180:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3909              		.loc 2 195 2 is_stmt 1
 3910              		.syntax unified
 3911              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3912 002a 4FF05003 			mov r3, #80												
 3913 002e 83F31188 		msr basepri, r3											
 3914 0032 BFF36F8F 		isb														
 3915 0036 BFF34F8F 		dsb														
 3916              	
 3917              	@ 0 "" 2
 3918              		.thumb
 3919              		.syntax unified
 3920 003a 7B60     		str	r3, [r7, #4]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3921              		.loc 2 203 1
 3922 003c 00BF     		nop
 3923              	.L242:
 3924              	.LBE180:
 3925              	.LBE179:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3926              		.loc 1 3041 3 discriminator 1
 3927 003e FEE7     		b	.L242
 3928              	.L241:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3929              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3930 0040 FB68     		ldr	r3, [r7, #12]
 3931 0042 013B     		subs	r3, r3, #1
 3932 0044 FB60     		str	r3, [r7, #12]
 3933              	.L240:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3934              		.loc 1 3041 3 discriminator 4
 3935 0046 1B49     		ldr	r1, .L246+12
 3936 0048 FA68     		ldr	r2, [r7, #12]
 3937 004a 1346     		mov	r3, r2
 3938 004c 9B00     		lsls	r3, r3, #2
 3939 004e 1344     		add	r3, r3, r2
 3940 0050 9B00     		lsls	r3, r3, #2
 3941 0052 0B44     		add	r3, r3, r1
 3942 0054 1B68     		ldr	r3, [r3]
 3943 0056 002B     		cmp	r3, #0
 3944 0058 E4D0     		beq	.L243
 3945              	.LBB181:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3946              		.loc 1 3041 3 discriminator 6
 3947 005a FA68     		ldr	r2, [r7, #12]
 3948 005c 1346     		mov	r3, r2
 3949 005e 9B00     		lsls	r3, r3, #2
 3950 0060 1344     		add	r3, r3, r2
 3951 0062 9B00     		lsls	r3, r3, #2
 3952 0064 134A     		ldr	r2, .L246+12
 3953 0066 1344     		add	r3, r3, r2
 3954 0068 BB60     		str	r3, [r7, #8]
 3955 006a BB68     		ldr	r3, [r7, #8]
 3956 006c 5B68     		ldr	r3, [r3, #4]
 3957 006e 5A68     		ldr	r2, [r3, #4]
 3958 0070 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccpNfLZa.s 			page 128


 3959 0072 5A60     		str	r2, [r3, #4]
 3960 0074 BB68     		ldr	r3, [r7, #8]
 3961 0076 5A68     		ldr	r2, [r3, #4]
 3962 0078 BB68     		ldr	r3, [r7, #8]
 3963 007a 0833     		adds	r3, r3, #8
 3964 007c 9A42     		cmp	r2, r3
 3965 007e 04D1     		bne	.L244
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3966              		.loc 1 3041 3 discriminator 7
 3967 0080 BB68     		ldr	r3, [r7, #8]
 3968 0082 5B68     		ldr	r3, [r3, #4]
 3969 0084 5A68     		ldr	r2, [r3, #4]
 3970 0086 BB68     		ldr	r3, [r7, #8]
 3971 0088 5A60     		str	r2, [r3, #4]
 3972              	.L244:
3041:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3973              		.loc 1 3041 3 discriminator 9
 3974 008a BB68     		ldr	r3, [r7, #8]
 3975 008c 5B68     		ldr	r3, [r3, #4]
 3976 008e DB68     		ldr	r3, [r3, #12]
 3977 0090 094A     		ldr	r2, .L246+16
 3978 0092 1360     		str	r3, [r2]
 3979              	.LBE181:
 3980 0094 064A     		ldr	r2, .L246+8
 3981 0096 FB68     		ldr	r3, [r7, #12]
 3982 0098 1360     		str	r3, [r2]
 3983              	.L245:
 3984              	.LBE178:
 3985              		.loc 1 3061 1 is_stmt 1
 3986 009a 00BF     		nop
 3987 009c 1437     		adds	r7, r7, #20
 3988              	.LCFI134:
 3989              		.cfi_def_cfa_offset 4
 3990 009e BD46     		mov	sp, r7
 3991              	.LCFI135:
 3992              		.cfi_def_cfa_register 13
 3993              		@ sp needed
 3994 00a0 5DF8047B 		ldr	r7, [sp], #4
 3995              	.LCFI136:
 3996              		.cfi_restore 7
 3997              		.cfi_def_cfa_offset 0
 3998 00a4 7047     		bx	lr
 3999              	.L247:
 4000 00a6 00BF     		.align	2
 4001              	.L246:
 4002 00a8 00000000 		.word	uxSchedulerSuspended
 4003 00ac 00000000 		.word	xYieldPending
 4004 00b0 00000000 		.word	uxTopReadyPriority
 4005 00b4 00000000 		.word	pxReadyTasksLists
 4006 00b8 00000000 		.word	pxCurrentTCB
 4007              		.cfi_endproc
 4008              	.LFE30:
 4010              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4011              		.align	1
 4012              		.global	vTaskPlaceOnEventList
 4013              		.syntax unified
 4014              		.thumb
ARM GAS  /tmp/ccpNfLZa.s 			page 129


 4015              		.thumb_func
 4016              		.fpu fpv5-d16
 4018              	vTaskPlaceOnEventList:
 4019              	.LFB31:
3062:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:./Libraries/FreeRTOS/Source/tasks.c **** 
3064:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:./Libraries/FreeRTOS/Source/tasks.c **** {
 4020              		.loc 1 3065 1
 4021              		.cfi_startproc
 4022              		@ args = 0, pretend = 0, frame = 16
 4023              		@ frame_needed = 1, uses_anonymous_args = 0
 4024 0000 80B5     		push	{r7, lr}
 4025              	.LCFI137:
 4026              		.cfi_def_cfa_offset 8
 4027              		.cfi_offset 7, -8
 4028              		.cfi_offset 14, -4
 4029 0002 84B0     		sub	sp, sp, #16
 4030              	.LCFI138:
 4031              		.cfi_def_cfa_offset 24
 4032 0004 00AF     		add	r7, sp, #0
 4033              	.LCFI139:
 4034              		.cfi_def_cfa_register 7
 4035 0006 7860     		str	r0, [r7, #4]
 4036 0008 3960     		str	r1, [r7]
3066:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4037              		.loc 1 3066 2
 4038 000a 7B68     		ldr	r3, [r7, #4]
 4039 000c 002B     		cmp	r3, #0
 4040 000e 0AD1     		bne	.L249
 4041              	.LBB182:
 4042              	.LBB183:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4043              		.loc 2 195 2
 4044              		.syntax unified
 4045              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4046 0010 4FF05003 			mov r3, #80												
 4047 0014 83F31188 		msr basepri, r3											
 4048 0018 BFF36F8F 		isb														
 4049 001c BFF34F8F 		dsb														
 4050              	
 4051              	@ 0 "" 2
 4052              		.thumb
 4053              		.syntax unified
 4054 0020 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4055              		.loc 2 203 1
 4056 0022 00BF     		nop
 4057              	.L250:
 4058              	.LBE183:
 4059              	.LBE182:
 4060              		.loc 1 3066 2 discriminator 1
 4061 0024 FEE7     		b	.L250
 4062              	.L249:
3067:./Libraries/FreeRTOS/Source/tasks.c **** 
3068:./Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:./Libraries/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
ARM GAS  /tmp/ccpNfLZa.s 			page 130


3070:./Libraries/FreeRTOS/Source/tasks.c **** 
3071:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:./Libraries/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:./Libraries/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:./Libraries/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4063              		.loc 1 3075 43
 4064 0026 074B     		ldr	r3, .L251
 4065 0028 1B68     		ldr	r3, [r3]
 4066              		.loc 1 3075 2
 4067 002a 1833     		adds	r3, r3, #24
 4068 002c 1946     		mov	r1, r3
 4069 002e 7868     		ldr	r0, [r7, #4]
 4070 0030 FFF7FEFF 		bl	vListInsert
3076:./Libraries/FreeRTOS/Source/tasks.c **** 
3077:./Libraries/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4071              		.loc 1 3077 2
 4072 0034 0121     		movs	r1, #1
 4073 0036 3868     		ldr	r0, [r7]
 4074 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:./Libraries/FreeRTOS/Source/tasks.c **** }
 4075              		.loc 1 3078 1
 4076 003c 00BF     		nop
 4077 003e 1037     		adds	r7, r7, #16
 4078              	.LCFI140:
 4079              		.cfi_def_cfa_offset 8
 4080 0040 BD46     		mov	sp, r7
 4081              	.LCFI141:
 4082              		.cfi_def_cfa_register 13
 4083              		@ sp needed
 4084 0042 80BD     		pop	{r7, pc}
 4085              	.L252:
 4086              		.align	2
 4087              	.L251:
 4088 0044 00000000 		.word	pxCurrentTCB
 4089              		.cfi_endproc
 4090              	.LFE31:
 4092              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4093              		.align	1
 4094              		.global	vTaskPlaceOnUnorderedEventList
 4095              		.syntax unified
 4096              		.thumb
 4097              		.thumb_func
 4098              		.fpu fpv5-d16
 4100              	vTaskPlaceOnUnorderedEventList:
 4101              	.LFB32:
3079:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:./Libraries/FreeRTOS/Source/tasks.c **** 
3081:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:./Libraries/FreeRTOS/Source/tasks.c **** {
 4102              		.loc 1 3082 1
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 24
 4105              		@ frame_needed = 1, uses_anonymous_args = 0
 4106 0000 80B5     		push	{r7, lr}
 4107              	.LCFI142:
 4108              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpNfLZa.s 			page 131


 4109              		.cfi_offset 7, -8
 4110              		.cfi_offset 14, -4
 4111 0002 86B0     		sub	sp, sp, #24
 4112              	.LCFI143:
 4113              		.cfi_def_cfa_offset 32
 4114 0004 00AF     		add	r7, sp, #0
 4115              	.LCFI144:
 4116              		.cfi_def_cfa_register 7
 4117 0006 F860     		str	r0, [r7, #12]
 4118 0008 B960     		str	r1, [r7, #8]
 4119 000a 7A60     		str	r2, [r7, #4]
3083:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4120              		.loc 1 3083 2
 4121 000c FB68     		ldr	r3, [r7, #12]
 4122 000e 002B     		cmp	r3, #0
 4123 0010 0AD1     		bne	.L254
 4124              	.LBB184:
 4125              	.LBB185:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4126              		.loc 2 195 2
 4127              		.syntax unified
 4128              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4129 0012 4FF05003 			mov r3, #80												
 4130 0016 83F31188 		msr basepri, r3											
 4131 001a BFF36F8F 		isb														
 4132 001e BFF34F8F 		dsb														
 4133              	
 4134              	@ 0 "" 2
 4135              		.thumb
 4136              		.syntax unified
 4137 0022 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4138              		.loc 2 203 1
 4139 0024 00BF     		nop
 4140              	.L255:
 4141              	.LBE185:
 4142              	.LBE184:
 4143              		.loc 1 3083 2 discriminator 1
 4144 0026 FEE7     		b	.L255
 4145              	.L254:
3084:./Libraries/FreeRTOS/Source/tasks.c **** 
3085:./Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:./Libraries/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4146              		.loc 1 3087 2
 4147 0028 114B     		ldr	r3, .L258
 4148 002a 1B68     		ldr	r3, [r3]
 4149 002c 002B     		cmp	r3, #0
 4150 002e 0AD1     		bne	.L256
 4151              	.LBB186:
 4152              	.LBB187:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4153              		.loc 2 195 2
 4154              		.syntax unified
 4155              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4156 0030 4FF05003 			mov r3, #80												
 4157 0034 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccpNfLZa.s 			page 132


 4158 0038 BFF36F8F 		isb														
 4159 003c BFF34F8F 		dsb														
 4160              	
 4161              	@ 0 "" 2
 4162              		.thumb
 4163              		.syntax unified
 4164 0040 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4165              		.loc 2 203 1
 4166 0042 00BF     		nop
 4167              	.L257:
 4168              	.LBE187:
 4169              	.LBE186:
 4170              		.loc 1 3087 2 discriminator 2
 4171 0044 FEE7     		b	.L257
 4172              	.L256:
3088:./Libraries/FreeRTOS/Source/tasks.c **** 
3089:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:./Libraries/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:./Libraries/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4173              		.loc 1 3092 2
 4174 0046 0B4B     		ldr	r3, .L258+4
 4175 0048 1B68     		ldr	r3, [r3]
 4176 004a BA68     		ldr	r2, [r7, #8]
 4177 004c 42F00042 		orr	r2, r2, #-2147483648
 4178 0050 9A61     		str	r2, [r3, #24]
3093:./Libraries/FreeRTOS/Source/tasks.c **** 
3094:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:./Libraries/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:./Libraries/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:./Libraries/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:./Libraries/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4179              		.loc 1 3099 46
 4180 0052 084B     		ldr	r3, .L258+4
 4181 0054 1B68     		ldr	r3, [r3]
 4182              		.loc 1 3099 2
 4183 0056 1833     		adds	r3, r3, #24
 4184 0058 1946     		mov	r1, r3
 4185 005a F868     		ldr	r0, [r7, #12]
 4186 005c FFF7FEFF 		bl	vListInsertEnd
3100:./Libraries/FreeRTOS/Source/tasks.c **** 
3101:./Libraries/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4187              		.loc 1 3101 2
 4188 0060 0121     		movs	r1, #1
 4189 0062 7868     		ldr	r0, [r7, #4]
 4190 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:./Libraries/FreeRTOS/Source/tasks.c **** }
 4191              		.loc 1 3102 1
 4192 0068 00BF     		nop
 4193 006a 1837     		adds	r7, r7, #24
 4194              	.LCFI145:
 4195              		.cfi_def_cfa_offset 8
 4196 006c BD46     		mov	sp, r7
 4197              	.LCFI146:
 4198              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccpNfLZa.s 			page 133


 4199              		@ sp needed
 4200 006e 80BD     		pop	{r7, pc}
 4201              	.L259:
 4202              		.align	2
 4203              	.L258:
 4204 0070 00000000 		.word	uxSchedulerSuspended
 4205 0074 00000000 		.word	pxCurrentTCB
 4206              		.cfi_endproc
 4207              	.LFE32:
 4209              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4210              		.align	1
 4211              		.global	vTaskPlaceOnEventListRestricted
 4212              		.syntax unified
 4213              		.thumb
 4214              		.thumb_func
 4215              		.fpu fpv5-d16
 4217              	vTaskPlaceOnEventListRestricted:
 4218              	.LFB33:
3103:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:./Libraries/FreeRTOS/Source/tasks.c **** 
3105:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:./Libraries/FreeRTOS/Source/tasks.c **** 
3107:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 4219              		.loc 1 3108 2
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 24
 4222              		@ frame_needed = 1, uses_anonymous_args = 0
 4223 0000 80B5     		push	{r7, lr}
 4224              	.LCFI147:
 4225              		.cfi_def_cfa_offset 8
 4226              		.cfi_offset 7, -8
 4227              		.cfi_offset 14, -4
 4228 0002 86B0     		sub	sp, sp, #24
 4229              	.LCFI148:
 4230              		.cfi_def_cfa_offset 32
 4231 0004 00AF     		add	r7, sp, #0
 4232              	.LCFI149:
 4233              		.cfi_def_cfa_register 7
 4234 0006 F860     		str	r0, [r7, #12]
 4235 0008 B960     		str	r1, [r7, #8]
 4236 000a 7A60     		str	r2, [r7, #4]
3109:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4237              		.loc 1 3109 3
 4238 000c FB68     		ldr	r3, [r7, #12]
 4239 000e 002B     		cmp	r3, #0
 4240 0010 0AD1     		bne	.L261
 4241              	.LBB188:
 4242              	.LBB189:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4243              		.loc 2 195 2
 4244              		.syntax unified
 4245              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4246 0012 4FF05003 			mov r3, #80												
 4247 0016 83F31188 		msr basepri, r3											
 4248 001a BFF36F8F 		isb														
 4249 001e BFF34F8F 		dsb														
ARM GAS  /tmp/ccpNfLZa.s 			page 134


 4250              	
 4251              	@ 0 "" 2
 4252              		.thumb
 4253              		.syntax unified
 4254 0022 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4255              		.loc 2 203 1
 4256 0024 00BF     		nop
 4257              	.L262:
 4258              	.LBE189:
 4259              	.LBE188:
 4260              		.loc 1 3109 3 discriminator 1
 4261 0026 FEE7     		b	.L262
 4262              	.L261:
3110:./Libraries/FreeRTOS/Source/tasks.c **** 
3111:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:./Libraries/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:./Libraries/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:./Libraries/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:./Libraries/FreeRTOS/Source/tasks.c **** 
3116:./Libraries/FreeRTOS/Source/tasks.c **** 
3117:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:./Libraries/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:./Libraries/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:./Libraries/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:./Libraries/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4263              		.loc 1 3121 47
 4264 0028 0A4B     		ldr	r3, .L264
 4265 002a 1B68     		ldr	r3, [r3]
 4266              		.loc 1 3121 3
 4267 002c 1833     		adds	r3, r3, #24
 4268 002e 1946     		mov	r1, r3
 4269 0030 F868     		ldr	r0, [r7, #12]
 4270 0032 FFF7FEFF 		bl	vListInsertEnd
3122:./Libraries/FreeRTOS/Source/tasks.c **** 
3123:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:./Libraries/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:./Libraries/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4271              		.loc 1 3126 5
 4272 0036 7B68     		ldr	r3, [r7, #4]
 4273 0038 002B     		cmp	r3, #0
 4274 003a 02D0     		beq	.L263
3127:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3128:./Libraries/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4275              		.loc 1 3128 17
 4276 003c 4FF0FF33 		mov	r3, #-1
 4277 0040 BB60     		str	r3, [r7, #8]
 4278              	.L263:
3129:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3130:./Libraries/FreeRTOS/Source/tasks.c **** 
3131:./Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:./Libraries/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4279              		.loc 1 3132 3
 4280 0042 7968     		ldr	r1, [r7, #4]
 4281 0044 B868     		ldr	r0, [r7, #8]
 4282 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/ccpNfLZa.s 			page 135


3133:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 4283              		.loc 1 3133 2
 4284 004a 00BF     		nop
 4285 004c 1837     		adds	r7, r7, #24
 4286              	.LCFI150:
 4287              		.cfi_def_cfa_offset 8
 4288 004e BD46     		mov	sp, r7
 4289              	.LCFI151:
 4290              		.cfi_def_cfa_register 13
 4291              		@ sp needed
 4292 0050 80BD     		pop	{r7, pc}
 4293              	.L265:
 4294 0052 00BF     		.align	2
 4295              	.L264:
 4296 0054 00000000 		.word	pxCurrentTCB
 4297              		.cfi_endproc
 4298              	.LFE33:
 4300              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4301              		.align	1
 4302              		.global	xTaskRemoveFromEventList
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv5-d16
 4308              	xTaskRemoveFromEventList:
 4309              	.LFB34:
3134:./Libraries/FreeRTOS/Source/tasks.c **** 
3135:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:./Libraries/FreeRTOS/Source/tasks.c **** 
3138:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:./Libraries/FreeRTOS/Source/tasks.c **** {
 4310              		.loc 1 3139 1
 4311              		.cfi_startproc
 4312              		@ args = 0, pretend = 0, frame = 24
 4313              		@ frame_needed = 1, uses_anonymous_args = 0
 4314 0000 80B5     		push	{r7, lr}
 4315              	.LCFI152:
 4316              		.cfi_def_cfa_offset 8
 4317              		.cfi_offset 7, -8
 4318              		.cfi_offset 14, -4
 4319 0002 86B0     		sub	sp, sp, #24
 4320              	.LCFI153:
 4321              		.cfi_def_cfa_offset 32
 4322 0004 00AF     		add	r7, sp, #0
 4323              	.LCFI154:
 4324              		.cfi_def_cfa_register 7
 4325 0006 7860     		str	r0, [r7, #4]
3140:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:./Libraries/FreeRTOS/Source/tasks.c **** 
3143:./Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:./Libraries/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:./Libraries/FreeRTOS/Source/tasks.c **** 
3146:./Libraries/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:./Libraries/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:./Libraries/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
ARM GAS  /tmp/ccpNfLZa.s 			page 136


3149:./Libraries/FreeRTOS/Source/tasks.c **** 
3150:./Libraries/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:./Libraries/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:./Libraries/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:./Libraries/FreeRTOS/Source/tasks.c **** 
3154:./Libraries/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:./Libraries/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:./Libraries/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4326              		.loc 1 3156 19
 4327 0008 7B68     		ldr	r3, [r7, #4]
 4328 000a DB68     		ldr	r3, [r3, #12]
 4329              		.loc 1 3156 17
 4330 000c DB68     		ldr	r3, [r3, #12]
 4331 000e 3B61     		str	r3, [r7, #16]
3157:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4332              		.loc 1 3157 2
 4333 0010 3B69     		ldr	r3, [r7, #16]
 4334 0012 002B     		cmp	r3, #0
 4335 0014 0AD1     		bne	.L267
 4336              	.LBB190:
 4337              	.LBB191:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4338              		.loc 2 195 2
 4339              		.syntax unified
 4340              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4341 0016 4FF05003 			mov r3, #80												
 4342 001a 83F31188 		msr basepri, r3											
 4343 001e BFF36F8F 		isb														
 4344 0022 BFF34F8F 		dsb														
 4345              	
 4346              	@ 0 "" 2
 4347              		.thumb
 4348              		.syntax unified
 4349 0026 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4350              		.loc 2 203 1
 4351 0028 00BF     		nop
 4352              	.L268:
 4353              	.LBE191:
 4354              	.LBE190:
 4355              		.loc 1 3157 2 discriminator 1
 4356 002a FEE7     		b	.L268
 4357              	.L267:
3158:./Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4358              		.loc 1 3158 11
 4359 002c 3B69     		ldr	r3, [r7, #16]
 4360 002e 1833     		adds	r3, r3, #24
 4361 0030 1846     		mov	r0, r3
 4362 0032 FFF7FEFF 		bl	uxListRemove
3159:./Libraries/FreeRTOS/Source/tasks.c **** 
3160:./Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4363              		.loc 1 3160 27
 4364 0036 1E4B     		ldr	r3, .L275
 4365 0038 1B68     		ldr	r3, [r3]
 4366              		.loc 1 3160 4
 4367 003a 002B     		cmp	r3, #0
 4368 003c 1DD1     		bne	.L269
ARM GAS  /tmp/ccpNfLZa.s 			page 137


3161:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3162:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4369              		.loc 1 3162 12
 4370 003e 3B69     		ldr	r3, [r7, #16]
 4371 0040 0433     		adds	r3, r3, #4
 4372 0042 1846     		mov	r0, r3
 4373 0044 FFF7FEFF 		bl	uxListRemove
3163:./Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4374              		.loc 1 3163 3
 4375 0048 3B69     		ldr	r3, [r7, #16]
 4376 004a DA6A     		ldr	r2, [r3, #44]
 4377 004c 194B     		ldr	r3, .L275+4
 4378 004e 1B68     		ldr	r3, [r3]
 4379 0050 9A42     		cmp	r2, r3
 4380 0052 03D9     		bls	.L270
 4381              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4382 0054 3B69     		ldr	r3, [r7, #16]
 4383 0056 DB6A     		ldr	r3, [r3, #44]
 4384 0058 164A     		ldr	r2, .L275+4
 4385 005a 1360     		str	r3, [r2]
 4386              	.L270:
 4387              		.loc 1 3163 3 discriminator 3
 4388 005c 3B69     		ldr	r3, [r7, #16]
 4389 005e DA6A     		ldr	r2, [r3, #44]
 4390 0060 1346     		mov	r3, r2
 4391 0062 9B00     		lsls	r3, r3, #2
 4392 0064 1344     		add	r3, r3, r2
 4393 0066 9B00     		lsls	r3, r3, #2
 4394 0068 134A     		ldr	r2, .L275+8
 4395 006a 1A44     		add	r2, r2, r3
 4396 006c 3B69     		ldr	r3, [r7, #16]
 4397 006e 0433     		adds	r3, r3, #4
 4398 0070 1946     		mov	r1, r3
 4399 0072 1046     		mov	r0, r2
 4400 0074 FFF7FEFF 		bl	vListInsertEnd
 4401 0078 05E0     		b	.L271
 4402              	.L269:
3164:./Libraries/FreeRTOS/Source/tasks.c **** 
3165:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3167:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:./Libraries/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:./Libraries/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:./Libraries/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:./Libraries/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:./Libraries/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:./Libraries/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:./Libraries/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:./Libraries/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3177:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3178:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3179:./Libraries/FreeRTOS/Source/tasks.c **** 	else
3180:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3181:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:./Libraries/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:./Libraries/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
ARM GAS  /tmp/ccpNfLZa.s 			page 138


 4403              		.loc 1 3183 3 is_stmt 1
 4404 007a 3B69     		ldr	r3, [r7, #16]
 4405 007c 1833     		adds	r3, r3, #24
 4406 007e 1946     		mov	r1, r3
 4407 0080 0E48     		ldr	r0, .L275+12
 4408 0082 FFF7FEFF 		bl	vListInsertEnd
 4409              	.L271:
3184:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3185:./Libraries/FreeRTOS/Source/tasks.c **** 
3186:./Libraries/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4410              		.loc 1 3186 20
 4411 0086 3B69     		ldr	r3, [r7, #16]
 4412 0088 DA6A     		ldr	r2, [r3, #44]
 4413              		.loc 1 3186 47
 4414 008a 0D4B     		ldr	r3, .L275+16
 4415 008c 1B68     		ldr	r3, [r3]
 4416 008e DB6A     		ldr	r3, [r3, #44]
 4417              		.loc 1 3186 4
 4418 0090 9A42     		cmp	r2, r3
 4419 0092 05D9     		bls	.L272
3187:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3188:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:./Libraries/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:./Libraries/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:./Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4420              		.loc 1 3191 11
 4421 0094 0123     		movs	r3, #1
 4422 0096 7B61     		str	r3, [r7, #20]
3192:./Libraries/FreeRTOS/Source/tasks.c **** 
3193:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:./Libraries/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:./Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4423              		.loc 1 3195 17
 4424 0098 0A4B     		ldr	r3, .L275+20
 4425 009a 0122     		movs	r2, #1
 4426 009c 1A60     		str	r2, [r3]
 4427 009e 01E0     		b	.L273
 4428              	.L272:
3196:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3197:./Libraries/FreeRTOS/Source/tasks.c **** 	else
3198:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3199:./Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4429              		.loc 1 3199 11
 4430 00a0 0023     		movs	r3, #0
 4431 00a2 7B61     		str	r3, [r7, #20]
 4432              	.L273:
3200:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3201:./Libraries/FreeRTOS/Source/tasks.c **** 
3202:./Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4433              		.loc 1 3202 9
 4434 00a4 7B69     		ldr	r3, [r7, #20]
3203:./Libraries/FreeRTOS/Source/tasks.c **** }
 4435              		.loc 1 3203 1
 4436 00a6 1846     		mov	r0, r3
 4437 00a8 1837     		adds	r7, r7, #24
 4438              	.LCFI155:
 4439              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccpNfLZa.s 			page 139


 4440 00aa BD46     		mov	sp, r7
 4441              	.LCFI156:
 4442              		.cfi_def_cfa_register 13
 4443              		@ sp needed
 4444 00ac 80BD     		pop	{r7, pc}
 4445              	.L276:
 4446 00ae 00BF     		.align	2
 4447              	.L275:
 4448 00b0 00000000 		.word	uxSchedulerSuspended
 4449 00b4 00000000 		.word	uxTopReadyPriority
 4450 00b8 00000000 		.word	pxReadyTasksLists
 4451 00bc 00000000 		.word	xPendingReadyList
 4452 00c0 00000000 		.word	pxCurrentTCB
 4453 00c4 00000000 		.word	xYieldPending
 4454              		.cfi_endproc
 4455              	.LFE34:
 4457              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4458              		.align	1
 4459              		.global	vTaskRemoveFromUnorderedEventList
 4460              		.syntax unified
 4461              		.thumb
 4462              		.thumb_func
 4463              		.fpu fpv5-d16
 4465              	vTaskRemoveFromUnorderedEventList:
 4466              	.LFB35:
3204:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:./Libraries/FreeRTOS/Source/tasks.c **** 
3206:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:./Libraries/FreeRTOS/Source/tasks.c **** {
 4467              		.loc 1 3207 1
 4468              		.cfi_startproc
 4469              		@ args = 0, pretend = 0, frame = 24
 4470              		@ frame_needed = 1, uses_anonymous_args = 0
 4471 0000 80B5     		push	{r7, lr}
 4472              	.LCFI157:
 4473              		.cfi_def_cfa_offset 8
 4474              		.cfi_offset 7, -8
 4475              		.cfi_offset 14, -4
 4476 0002 86B0     		sub	sp, sp, #24
 4477              	.LCFI158:
 4478              		.cfi_def_cfa_offset 32
 4479 0004 00AF     		add	r7, sp, #0
 4480              	.LCFI159:
 4481              		.cfi_def_cfa_register 7
 4482 0006 7860     		str	r0, [r7, #4]
 4483 0008 3960     		str	r1, [r7]
3208:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:./Libraries/FreeRTOS/Source/tasks.c **** 
3210:./Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:./Libraries/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4484              		.loc 1 3212 2
 4485 000a 294B     		ldr	r3, .L285
 4486 000c 1B68     		ldr	r3, [r3]
 4487 000e 002B     		cmp	r3, #0
 4488 0010 0AD1     		bne	.L278
 4489              	.LBB192:
ARM GAS  /tmp/ccpNfLZa.s 			page 140


 4490              	.LBB193:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4491              		.loc 2 195 2
 4492              		.syntax unified
 4493              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4494 0012 4FF05003 			mov r3, #80												
 4495 0016 83F31188 		msr basepri, r3											
 4496 001a BFF36F8F 		isb														
 4497 001e BFF34F8F 		dsb														
 4498              	
 4499              	@ 0 "" 2
 4500              		.thumb
 4501              		.syntax unified
 4502 0022 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4503              		.loc 2 203 1
 4504 0024 00BF     		nop
 4505              	.L279:
 4506              	.LBE193:
 4507              	.LBE192:
 4508              		.loc 1 3212 2 discriminator 1
 4509 0026 FEE7     		b	.L279
 4510              	.L278:
3213:./Libraries/FreeRTOS/Source/tasks.c **** 
3214:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4511              		.loc 1 3215 2
 4512 0028 3B68     		ldr	r3, [r7]
 4513 002a 43F00042 		orr	r2, r3, #-2147483648
 4514 002e 7B68     		ldr	r3, [r7, #4]
 4515 0030 1A60     		str	r2, [r3]
3216:./Libraries/FreeRTOS/Source/tasks.c **** 
3217:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:./Libraries/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:./Libraries/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4516              		.loc 1 3219 17
 4517 0032 7B68     		ldr	r3, [r7, #4]
 4518 0034 DB68     		ldr	r3, [r3, #12]
 4519 0036 7B61     		str	r3, [r7, #20]
3220:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4520              		.loc 1 3220 2
 4521 0038 7B69     		ldr	r3, [r7, #20]
 4522 003a 002B     		cmp	r3, #0
 4523 003c 0AD1     		bne	.L280
 4524              	.LBB194:
 4525              	.LBB195:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4526              		.loc 2 195 2
 4527              		.syntax unified
 4528              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4529 003e 4FF05003 			mov r3, #80												
 4530 0042 83F31188 		msr basepri, r3											
 4531 0046 BFF36F8F 		isb														
 4532 004a BFF34F8F 		dsb														
 4533              	
 4534              	@ 0 "" 2
 4535              		.thumb
ARM GAS  /tmp/ccpNfLZa.s 			page 141


 4536              		.syntax unified
 4537 004e FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4538              		.loc 2 203 1
 4539 0050 00BF     		nop
 4540              	.L281:
 4541              	.LBE195:
 4542              	.LBE194:
 4543              		.loc 1 3220 2 discriminator 2
 4544 0052 FEE7     		b	.L281
 4545              	.L280:
3221:./Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4546              		.loc 1 3221 11
 4547 0054 7868     		ldr	r0, [r7, #4]
 4548 0056 FFF7FEFF 		bl	uxListRemove
3222:./Libraries/FreeRTOS/Source/tasks.c **** 
3223:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3225:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:./Libraries/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:./Libraries/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:./Libraries/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:./Libraries/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:./Libraries/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:./Libraries/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:./Libraries/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:./Libraries/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3235:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
3236:./Libraries/FreeRTOS/Source/tasks.c **** 
3237:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:./Libraries/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:./Libraries/FreeRTOS/Source/tasks.c **** 	lists. */
3240:./Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4549              		.loc 1 3240 11
 4550 005a 7B69     		ldr	r3, [r7, #20]
 4551 005c 0433     		adds	r3, r3, #4
 4552 005e 1846     		mov	r0, r3
 4553 0060 FFF7FEFF 		bl	uxListRemove
3241:./Libraries/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4554              		.loc 1 3241 2
 4555 0064 7B69     		ldr	r3, [r7, #20]
 4556 0066 DA6A     		ldr	r2, [r3, #44]
 4557 0068 124B     		ldr	r3, .L285+4
 4558 006a 1B68     		ldr	r3, [r3]
 4559 006c 9A42     		cmp	r2, r3
 4560 006e 03D9     		bls	.L282
 4561              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4562 0070 7B69     		ldr	r3, [r7, #20]
 4563 0072 DB6A     		ldr	r3, [r3, #44]
 4564 0074 0F4A     		ldr	r2, .L285+4
 4565 0076 1360     		str	r3, [r2]
 4566              	.L282:
 4567              		.loc 1 3241 2 discriminator 3
 4568 0078 7B69     		ldr	r3, [r7, #20]
 4569 007a DA6A     		ldr	r2, [r3, #44]
 4570 007c 1346     		mov	r3, r2
ARM GAS  /tmp/ccpNfLZa.s 			page 142


 4571 007e 9B00     		lsls	r3, r3, #2
 4572 0080 1344     		add	r3, r3, r2
 4573 0082 9B00     		lsls	r3, r3, #2
 4574 0084 0C4A     		ldr	r2, .L285+8
 4575 0086 1A44     		add	r2, r2, r3
 4576 0088 7B69     		ldr	r3, [r7, #20]
 4577 008a 0433     		adds	r3, r3, #4
 4578 008c 1946     		mov	r1, r3
 4579 008e 1046     		mov	r0, r2
 4580 0090 FFF7FEFF 		bl	vListInsertEnd
3242:./Libraries/FreeRTOS/Source/tasks.c **** 
3243:./Libraries/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4581              		.loc 1 3243 20 is_stmt 1 discriminator 3
 4582 0094 7B69     		ldr	r3, [r7, #20]
 4583 0096 DA6A     		ldr	r2, [r3, #44]
 4584              		.loc 1 3243 47 discriminator 3
 4585 0098 084B     		ldr	r3, .L285+12
 4586 009a 1B68     		ldr	r3, [r3]
 4587 009c DB6A     		ldr	r3, [r3, #44]
 4588              		.loc 1 3243 4 discriminator 3
 4589 009e 9A42     		cmp	r2, r3
 4590 00a0 02D9     		bls	.L284
3244:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3245:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:./Libraries/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:./Libraries/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:./Libraries/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:./Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4591              		.loc 1 3249 17
 4592 00a2 074B     		ldr	r3, .L285+16
 4593 00a4 0122     		movs	r2, #1
 4594 00a6 1A60     		str	r2, [r3]
 4595              	.L284:
3250:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3251:./Libraries/FreeRTOS/Source/tasks.c **** }
 4596              		.loc 1 3251 1
 4597 00a8 00BF     		nop
 4598 00aa 1837     		adds	r7, r7, #24
 4599              	.LCFI160:
 4600              		.cfi_def_cfa_offset 8
 4601 00ac BD46     		mov	sp, r7
 4602              	.LCFI161:
 4603              		.cfi_def_cfa_register 13
 4604              		@ sp needed
 4605 00ae 80BD     		pop	{r7, pc}
 4606              	.L286:
 4607              		.align	2
 4608              	.L285:
 4609 00b0 00000000 		.word	uxSchedulerSuspended
 4610 00b4 00000000 		.word	uxTopReadyPriority
 4611 00b8 00000000 		.word	pxReadyTasksLists
 4612 00bc 00000000 		.word	pxCurrentTCB
 4613 00c0 00000000 		.word	xYieldPending
 4614              		.cfi_endproc
 4615              	.LFE35:
 4617              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4618              		.align	1
ARM GAS  /tmp/ccpNfLZa.s 			page 143


 4619              		.global	vTaskSetTimeOutState
 4620              		.syntax unified
 4621              		.thumb
 4622              		.thumb_func
 4623              		.fpu fpv5-d16
 4625              	vTaskSetTimeOutState:
 4626              	.LFB36:
3252:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:./Libraries/FreeRTOS/Source/tasks.c **** 
3254:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:./Libraries/FreeRTOS/Source/tasks.c **** {
 4627              		.loc 1 3255 1
 4628              		.cfi_startproc
 4629              		@ args = 0, pretend = 0, frame = 16
 4630              		@ frame_needed = 1, uses_anonymous_args = 0
 4631 0000 80B5     		push	{r7, lr}
 4632              	.LCFI162:
 4633              		.cfi_def_cfa_offset 8
 4634              		.cfi_offset 7, -8
 4635              		.cfi_offset 14, -4
 4636 0002 84B0     		sub	sp, sp, #16
 4637              	.LCFI163:
 4638              		.cfi_def_cfa_offset 24
 4639 0004 00AF     		add	r7, sp, #0
 4640              	.LCFI164:
 4641              		.cfi_def_cfa_register 7
 4642 0006 7860     		str	r0, [r7, #4]
3256:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4643              		.loc 1 3256 2
 4644 0008 7B68     		ldr	r3, [r7, #4]
 4645 000a 002B     		cmp	r3, #0
 4646 000c 0AD1     		bne	.L288
 4647              	.LBB196:
 4648              	.LBB197:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4649              		.loc 2 195 2
 4650              		.syntax unified
 4651              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4652 000e 4FF05003 			mov r3, #80												
 4653 0012 83F31188 		msr basepri, r3											
 4654 0016 BFF36F8F 		isb														
 4655 001a BFF34F8F 		dsb														
 4656              	
 4657              	@ 0 "" 2
 4658              		.thumb
 4659              		.syntax unified
 4660 001e FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4661              		.loc 2 203 1
 4662 0020 00BF     		nop
 4663              	.L289:
 4664              	.LBE197:
 4665              	.LBE196:
 4666              		.loc 1 3256 2 discriminator 1
 4667 0022 FEE7     		b	.L289
 4668              	.L288:
3257:./Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccpNfLZa.s 			page 144


 4669              		.loc 1 3257 2
 4670 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3259:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4671              		.loc 1 3259 29
 4672 0028 064B     		ldr	r3, .L290
 4673 002a 1A68     		ldr	r2, [r3]
 4674 002c 7B68     		ldr	r3, [r7, #4]
 4675 002e 1A60     		str	r2, [r3]
3260:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4676              		.loc 1 3260 30
 4677 0030 054B     		ldr	r3, .L290+4
 4678 0032 1A68     		ldr	r2, [r3]
 4679 0034 7B68     		ldr	r3, [r7, #4]
 4680 0036 5A60     		str	r2, [r3, #4]
3261:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3262:./Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4681              		.loc 1 3262 2
 4682 0038 FFF7FEFF 		bl	vPortExitCritical
3263:./Libraries/FreeRTOS/Source/tasks.c **** }
 4683              		.loc 1 3263 1
 4684 003c 00BF     		nop
 4685 003e 1037     		adds	r7, r7, #16
 4686              	.LCFI165:
 4687              		.cfi_def_cfa_offset 8
 4688 0040 BD46     		mov	sp, r7
 4689              	.LCFI166:
 4690              		.cfi_def_cfa_register 13
 4691              		@ sp needed
 4692 0042 80BD     		pop	{r7, pc}
 4693              	.L291:
 4694              		.align	2
 4695              	.L290:
 4696 0044 00000000 		.word	xNumOfOverflows
 4697 0048 00000000 		.word	xTickCount
 4698              		.cfi_endproc
 4699              	.LFE36:
 4701              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4702              		.align	1
 4703              		.global	vTaskInternalSetTimeOutState
 4704              		.syntax unified
 4705              		.thumb
 4706              		.thumb_func
 4707              		.fpu fpv5-d16
 4709              	vTaskInternalSetTimeOutState:
 4710              	.LFB37:
3264:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:./Libraries/FreeRTOS/Source/tasks.c **** 
3266:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:./Libraries/FreeRTOS/Source/tasks.c **** {
 4711              		.loc 1 3267 1
 4712              		.cfi_startproc
 4713              		@ args = 0, pretend = 0, frame = 8
 4714              		@ frame_needed = 1, uses_anonymous_args = 0
 4715              		@ link register save eliminated.
 4716 0000 80B4     		push	{r7}
 4717              	.LCFI167:
ARM GAS  /tmp/ccpNfLZa.s 			page 145


 4718              		.cfi_def_cfa_offset 4
 4719              		.cfi_offset 7, -4
 4720 0002 83B0     		sub	sp, sp, #12
 4721              	.LCFI168:
 4722              		.cfi_def_cfa_offset 16
 4723 0004 00AF     		add	r7, sp, #0
 4724              	.LCFI169:
 4725              		.cfi_def_cfa_register 7
 4726 0006 7860     		str	r0, [r7, #4]
3268:./Libraries/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:./Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4727              		.loc 1 3269 28
 4728 0008 064B     		ldr	r3, .L293
 4729 000a 1A68     		ldr	r2, [r3]
 4730 000c 7B68     		ldr	r3, [r7, #4]
 4731 000e 1A60     		str	r2, [r3]
3270:./Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4732              		.loc 1 3270 29
 4733 0010 054B     		ldr	r3, .L293+4
 4734 0012 1A68     		ldr	r2, [r3]
 4735 0014 7B68     		ldr	r3, [r7, #4]
 4736 0016 5A60     		str	r2, [r3, #4]
3271:./Libraries/FreeRTOS/Source/tasks.c **** }
 4737              		.loc 1 3271 1
 4738 0018 00BF     		nop
 4739 001a 0C37     		adds	r7, r7, #12
 4740              	.LCFI170:
 4741              		.cfi_def_cfa_offset 4
 4742 001c BD46     		mov	sp, r7
 4743              	.LCFI171:
 4744              		.cfi_def_cfa_register 13
 4745              		@ sp needed
 4746 001e 5DF8047B 		ldr	r7, [sp], #4
 4747              	.LCFI172:
 4748              		.cfi_restore 7
 4749              		.cfi_def_cfa_offset 0
 4750 0022 7047     		bx	lr
 4751              	.L294:
 4752              		.align	2
 4753              	.L293:
 4754 0024 00000000 		.word	xNumOfOverflows
 4755 0028 00000000 		.word	xTickCount
 4756              		.cfi_endproc
 4757              	.LFE37:
 4759              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4760              		.align	1
 4761              		.global	xTaskCheckForTimeOut
 4762              		.syntax unified
 4763              		.thumb
 4764              		.thumb_func
 4765              		.fpu fpv5-d16
 4767              	xTaskCheckForTimeOut:
 4768              	.LFB38:
3272:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:./Libraries/FreeRTOS/Source/tasks.c **** 
3274:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:./Libraries/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccpNfLZa.s 			page 146


 4769              		.loc 1 3275 1
 4770              		.cfi_startproc
 4771              		@ args = 0, pretend = 0, frame = 32
 4772              		@ frame_needed = 1, uses_anonymous_args = 0
 4773 0000 80B5     		push	{r7, lr}
 4774              	.LCFI173:
 4775              		.cfi_def_cfa_offset 8
 4776              		.cfi_offset 7, -8
 4777              		.cfi_offset 14, -4
 4778 0002 88B0     		sub	sp, sp, #32
 4779              	.LCFI174:
 4780              		.cfi_def_cfa_offset 40
 4781 0004 00AF     		add	r7, sp, #0
 4782              	.LCFI175:
 4783              		.cfi_def_cfa_register 7
 4784 0006 7860     		str	r0, [r7, #4]
 4785 0008 3960     		str	r1, [r7]
3276:./Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:./Libraries/FreeRTOS/Source/tasks.c **** 
3278:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4786              		.loc 1 3278 2
 4787 000a 7B68     		ldr	r3, [r7, #4]
 4788 000c 002B     		cmp	r3, #0
 4789 000e 0AD1     		bne	.L296
 4790              	.LBB198:
 4791              	.LBB199:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4792              		.loc 2 195 2
 4793              		.syntax unified
 4794              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4795 0010 4FF05003 			mov r3, #80												
 4796 0014 83F31188 		msr basepri, r3											
 4797 0018 BFF36F8F 		isb														
 4798 001c BFF34F8F 		dsb														
 4799              	
 4800              	@ 0 "" 2
 4801              		.thumb
 4802              		.syntax unified
 4803 0020 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4804              		.loc 2 203 1
 4805 0022 00BF     		nop
 4806              	.L297:
 4807              	.LBE199:
 4808              	.LBE198:
 4809              		.loc 1 3278 2 discriminator 1
 4810 0024 FEE7     		b	.L297
 4811              	.L296:
3279:./Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4812              		.loc 1 3279 2
 4813 0026 3B68     		ldr	r3, [r7]
 4814 0028 002B     		cmp	r3, #0
 4815 002a 0AD1     		bne	.L298
 4816              	.LBB200:
 4817              	.LBB201:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4818              		.loc 2 195 2
ARM GAS  /tmp/ccpNfLZa.s 			page 147


 4819              		.syntax unified
 4820              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4821 002c 4FF05003 			mov r3, #80												
 4822 0030 83F31188 		msr basepri, r3											
 4823 0034 BFF36F8F 		isb														
 4824 0038 BFF34F8F 		dsb														
 4825              	
 4826              	@ 0 "" 2
 4827              		.thumb
 4828              		.syntax unified
 4829 003c FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4830              		.loc 2 203 1
 4831 003e 00BF     		nop
 4832              	.L299:
 4833              	.LBE201:
 4834              	.LBE200:
 4835              		.loc 1 3279 2 discriminator 2
 4836 0040 FEE7     		b	.L299
 4837              	.L298:
3280:./Libraries/FreeRTOS/Source/tasks.c **** 
3281:./Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4838              		.loc 1 3281 2
 4839 0042 FFF7FEFF 		bl	vPortEnterCritical
 4840              	.LBB202:
3282:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3283:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:./Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4841              		.loc 1 3284 20
 4842 0046 1D4B     		ldr	r3, .L305
 4843 0048 1B68     		ldr	r3, [r3]
 4844 004a BB61     		str	r3, [r7, #24]
3285:./Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4845              		.loc 1 3285 62
 4846 004c 7B68     		ldr	r3, [r7, #4]
 4847 004e 5B68     		ldr	r3, [r3, #4]
 4848              		.loc 1 3285 20
 4849 0050 BA69     		ldr	r2, [r7, #24]
 4850 0052 D31A     		subs	r3, r2, r3
 4851 0054 7B61     		str	r3, [r7, #20]
3286:./Libraries/FreeRTOS/Source/tasks.c **** 
3287:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3290:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:./Libraries/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3295:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3296:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3297:./Libraries/FreeRTOS/Source/tasks.c **** 
3298:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:./Libraries/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4852              		.loc 1 3299 8
 4853 0056 3B68     		ldr	r3, [r7]
 4854 0058 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 148


 4855              		.loc 1 3299 6
 4856 005a B3F1FF3F 		cmp	r3, #-1
 4857 005e 02D1     		bne	.L300
3300:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3301:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:./Libraries/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:./Libraries/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4858              		.loc 1 3304 13
 4859 0060 0023     		movs	r3, #0
 4860 0062 FB61     		str	r3, [r7, #28]
 4861 0064 23E0     		b	.L301
 4862              	.L300:
3305:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3306:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3307:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3308:./Libraries/FreeRTOS/Source/tasks.c **** 
3309:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4863              		.loc 1 3309 37
 4864 0066 7B68     		ldr	r3, [r7, #4]
 4865 0068 1A68     		ldr	r2, [r3]
 4866              		.loc 1 3309 25
 4867 006a 154B     		ldr	r3, .L305+4
 4868 006c 1B68     		ldr	r3, [r3]
 4869              		.loc 1 3309 5
 4870 006e 9A42     		cmp	r2, r3
 4871 0070 07D0     		beq	.L302
 4872              		.loc 1 3309 89 discriminator 1
 4873 0072 7B68     		ldr	r3, [r7, #4]
 4874 0074 5B68     		ldr	r3, [r3, #4]
 4875              		.loc 1 3309 56 discriminator 1
 4876 0076 BA69     		ldr	r2, [r7, #24]
 4877 0078 9A42     		cmp	r2, r3
 4878 007a 02D3     		bcc	.L302
3310:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3311:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:./Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:./Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:./Libraries/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:./Libraries/FreeRTOS/Source/tasks.c **** 			was called. */
3316:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4879              		.loc 1 3316 12
 4880 007c 0123     		movs	r3, #1
 4881 007e FB61     		str	r3, [r7, #28]
 4882 0080 15E0     		b	.L301
 4883              	.L302:
3317:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3318:./Libraries/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4884              		.loc 1 3318 27
 4885 0082 3B68     		ldr	r3, [r7]
 4886 0084 1B68     		ldr	r3, [r3]
 4887              		.loc 1 3318 10
 4888 0086 7A69     		ldr	r2, [r7, #20]
 4889 0088 9A42     		cmp	r2, r3
 4890 008a 0BD2     		bcs	.L303
3319:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3320:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
ARM GAS  /tmp/ccpNfLZa.s 			page 149


3321:./Libraries/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4891              		.loc 1 3321 19
 4892 008c 3B68     		ldr	r3, [r7]
 4893 008e 1A68     		ldr	r2, [r3]
 4894 0090 7B69     		ldr	r3, [r7, #20]
 4895 0092 D21A     		subs	r2, r2, r3
 4896 0094 3B68     		ldr	r3, [r7]
 4897 0096 1A60     		str	r2, [r3]
3322:./Libraries/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4898              		.loc 1 3322 4
 4899 0098 7868     		ldr	r0, [r7, #4]
 4900 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4901              		.loc 1 3323 12
 4902 009e 0023     		movs	r3, #0
 4903 00a0 FB61     		str	r3, [r7, #28]
 4904 00a2 04E0     		b	.L301
 4905              	.L303:
3324:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3325:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3326:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3327:./Libraries/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4906              		.loc 1 3327 19
 4907 00a4 3B68     		ldr	r3, [r7]
 4908 00a6 0022     		movs	r2, #0
 4909 00a8 1A60     		str	r2, [r3]
3328:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4910              		.loc 1 3328 12
 4911 00aa 0123     		movs	r3, #1
 4912 00ac FB61     		str	r3, [r7, #28]
 4913              	.L301:
 4914              	.LBE202:
3329:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3330:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3331:./Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4915              		.loc 1 3331 2
 4916 00ae FFF7FEFF 		bl	vPortExitCritical
3332:./Libraries/FreeRTOS/Source/tasks.c **** 
3333:./Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4917              		.loc 1 3333 9
 4918 00b2 FB69     		ldr	r3, [r7, #28]
3334:./Libraries/FreeRTOS/Source/tasks.c **** }
 4919              		.loc 1 3334 1
 4920 00b4 1846     		mov	r0, r3
 4921 00b6 2037     		adds	r7, r7, #32
 4922              	.LCFI176:
 4923              		.cfi_def_cfa_offset 8
 4924 00b8 BD46     		mov	sp, r7
 4925              	.LCFI177:
 4926              		.cfi_def_cfa_register 13
 4927              		@ sp needed
 4928 00ba 80BD     		pop	{r7, pc}
 4929              	.L306:
 4930              		.align	2
 4931              	.L305:
 4932 00bc 00000000 		.word	xTickCount
 4933 00c0 00000000 		.word	xNumOfOverflows
ARM GAS  /tmp/ccpNfLZa.s 			page 150


 4934              		.cfi_endproc
 4935              	.LFE38:
 4937              		.section	.text.vTaskMissedYield,"ax",%progbits
 4938              		.align	1
 4939              		.global	vTaskMissedYield
 4940              		.syntax unified
 4941              		.thumb
 4942              		.thumb_func
 4943              		.fpu fpv5-d16
 4945              	vTaskMissedYield:
 4946              	.LFB39:
3335:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:./Libraries/FreeRTOS/Source/tasks.c **** 
3337:./Libraries/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:./Libraries/FreeRTOS/Source/tasks.c **** {
 4947              		.loc 1 3338 1
 4948              		.cfi_startproc
 4949              		@ args = 0, pretend = 0, frame = 0
 4950              		@ frame_needed = 1, uses_anonymous_args = 0
 4951              		@ link register save eliminated.
 4952 0000 80B4     		push	{r7}
 4953              	.LCFI178:
 4954              		.cfi_def_cfa_offset 4
 4955              		.cfi_offset 7, -4
 4956 0002 00AF     		add	r7, sp, #0
 4957              	.LCFI179:
 4958              		.cfi_def_cfa_register 7
3339:./Libraries/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4959              		.loc 1 3339 16
 4960 0004 034B     		ldr	r3, .L308
 4961 0006 0122     		movs	r2, #1
 4962 0008 1A60     		str	r2, [r3]
3340:./Libraries/FreeRTOS/Source/tasks.c **** }
 4963              		.loc 1 3340 1
 4964 000a 00BF     		nop
 4965 000c BD46     		mov	sp, r7
 4966              	.LCFI180:
 4967              		.cfi_def_cfa_register 13
 4968              		@ sp needed
 4969 000e 5DF8047B 		ldr	r7, [sp], #4
 4970              	.LCFI181:
 4971              		.cfi_restore 7
 4972              		.cfi_def_cfa_offset 0
 4973 0012 7047     		bx	lr
 4974              	.L309:
 4975              		.align	2
 4976              	.L308:
 4977 0014 00000000 		.word	xYieldPending
 4978              		.cfi_endproc
 4979              	.LFE39:
 4981              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4982              		.align	1
 4983              		.global	uxTaskGetTaskNumber
 4984              		.syntax unified
 4985              		.thumb
 4986              		.thumb_func
 4987              		.fpu fpv5-d16
ARM GAS  /tmp/ccpNfLZa.s 			page 151


 4989              	uxTaskGetTaskNumber:
 4990              	.LFB40:
3341:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:./Libraries/FreeRTOS/Source/tasks.c **** 
3343:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:./Libraries/FreeRTOS/Source/tasks.c **** 
3345:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 4991              		.loc 1 3346 2
 4992              		.cfi_startproc
 4993              		@ args = 0, pretend = 0, frame = 16
 4994              		@ frame_needed = 1, uses_anonymous_args = 0
 4995              		@ link register save eliminated.
 4996 0000 80B4     		push	{r7}
 4997              	.LCFI182:
 4998              		.cfi_def_cfa_offset 4
 4999              		.cfi_offset 7, -4
 5000 0002 85B0     		sub	sp, sp, #20
 5001              	.LCFI183:
 5002              		.cfi_def_cfa_offset 24
 5003 0004 00AF     		add	r7, sp, #0
 5004              	.LCFI184:
 5005              		.cfi_def_cfa_register 7
 5006 0006 7860     		str	r0, [r7, #4]
3347:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:./Libraries/FreeRTOS/Source/tasks.c **** 
3350:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5007              		.loc 1 3350 5
 5008 0008 7B68     		ldr	r3, [r7, #4]
 5009 000a 002B     		cmp	r3, #0
 5010 000c 05D0     		beq	.L311
3351:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3352:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5011              		.loc 1 3352 10
 5012 000e 7B68     		ldr	r3, [r7, #4]
 5013 0010 BB60     		str	r3, [r7, #8]
3353:./Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5014              		.loc 1 3353 13
 5015 0012 BB68     		ldr	r3, [r7, #8]
 5016 0014 9B6C     		ldr	r3, [r3, #72]
 5017 0016 FB60     		str	r3, [r7, #12]
 5018 0018 01E0     		b	.L312
 5019              	.L311:
3354:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3355:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3356:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3357:./Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5020              		.loc 1 3357 13
 5021 001a 0023     		movs	r3, #0
 5022 001c FB60     		str	r3, [r7, #12]
 5023              	.L312:
3358:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3359:./Libraries/FreeRTOS/Source/tasks.c **** 
3360:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5024              		.loc 1 3360 10
 5025 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccpNfLZa.s 			page 152


3361:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5026              		.loc 1 3361 2
 5027 0020 1846     		mov	r0, r3
 5028 0022 1437     		adds	r7, r7, #20
 5029              	.LCFI185:
 5030              		.cfi_def_cfa_offset 4
 5031 0024 BD46     		mov	sp, r7
 5032              	.LCFI186:
 5033              		.cfi_def_cfa_register 13
 5034              		@ sp needed
 5035 0026 5DF8047B 		ldr	r7, [sp], #4
 5036              	.LCFI187:
 5037              		.cfi_restore 7
 5038              		.cfi_def_cfa_offset 0
 5039 002a 7047     		bx	lr
 5040              		.cfi_endproc
 5041              	.LFE40:
 5043              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5044              		.align	1
 5045              		.global	vTaskSetTaskNumber
 5046              		.syntax unified
 5047              		.thumb
 5048              		.thumb_func
 5049              		.fpu fpv5-d16
 5051              	vTaskSetTaskNumber:
 5052              	.LFB41:
3362:./Libraries/FreeRTOS/Source/tasks.c **** 
3363:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:./Libraries/FreeRTOS/Source/tasks.c **** 
3366:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:./Libraries/FreeRTOS/Source/tasks.c **** 
3368:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5053              		.loc 1 3369 2
 5054              		.cfi_startproc
 5055              		@ args = 0, pretend = 0, frame = 16
 5056              		@ frame_needed = 1, uses_anonymous_args = 0
 5057              		@ link register save eliminated.
 5058 0000 80B4     		push	{r7}
 5059              	.LCFI188:
 5060              		.cfi_def_cfa_offset 4
 5061              		.cfi_offset 7, -4
 5062 0002 85B0     		sub	sp, sp, #20
 5063              	.LCFI189:
 5064              		.cfi_def_cfa_offset 24
 5065 0004 00AF     		add	r7, sp, #0
 5066              	.LCFI190:
 5067              		.cfi_def_cfa_register 7
 5068 0006 7860     		str	r0, [r7, #4]
 5069 0008 3960     		str	r1, [r7]
3370:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:./Libraries/FreeRTOS/Source/tasks.c **** 
3372:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5070              		.loc 1 3372 5
 5071 000a 7B68     		ldr	r3, [r7, #4]
 5072 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 153


 5073 000e 04D0     		beq	.L316
3373:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3374:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5074              		.loc 1 3374 10
 5075 0010 7B68     		ldr	r3, [r7, #4]
 5076 0012 FB60     		str	r3, [r7, #12]
3375:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5077              		.loc 1 3375 24
 5078 0014 FB68     		ldr	r3, [r7, #12]
 5079 0016 3A68     		ldr	r2, [r7]
 5080 0018 9A64     		str	r2, [r3, #72]
 5081              	.L316:
3376:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3377:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5082              		.loc 1 3377 2
 5083 001a 00BF     		nop
 5084 001c 1437     		adds	r7, r7, #20
 5085              	.LCFI191:
 5086              		.cfi_def_cfa_offset 4
 5087 001e BD46     		mov	sp, r7
 5088              	.LCFI192:
 5089              		.cfi_def_cfa_register 13
 5090              		@ sp needed
 5091 0020 5DF8047B 		ldr	r7, [sp], #4
 5092              	.LCFI193:
 5093              		.cfi_restore 7
 5094              		.cfi_def_cfa_offset 0
 5095 0024 7047     		bx	lr
 5096              		.cfi_endproc
 5097              	.LFE41:
 5099              		.section	.text.prvIdleTask,"ax",%progbits
 5100              		.align	1
 5101              		.syntax unified
 5102              		.thumb
 5103              		.thumb_func
 5104              		.fpu fpv5-d16
 5106              	prvIdleTask:
 5107              	.LFB42:
3378:./Libraries/FreeRTOS/Source/tasks.c **** 
3379:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:./Libraries/FreeRTOS/Source/tasks.c **** 
3381:./Libraries/FreeRTOS/Source/tasks.c **** /*
3382:./Libraries/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:./Libraries/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:./Libraries/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:./Libraries/FreeRTOS/Source/tasks.c ****  *
3386:./Libraries/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:./Libraries/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:./Libraries/FreeRTOS/Source/tasks.c ****  *
3389:./Libraries/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:./Libraries/FreeRTOS/Source/tasks.c ****  *
3391:./Libraries/FreeRTOS/Source/tasks.c ****  */
3392:./Libraries/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:./Libraries/FreeRTOS/Source/tasks.c **** {
 5108              		.loc 1 3393 1
 5109              		.cfi_startproc
 5110              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccpNfLZa.s 			page 154


 5111              		@ frame_needed = 1, uses_anonymous_args = 0
 5112 0000 80B5     		push	{r7, lr}
 5113              	.LCFI194:
 5114              		.cfi_def_cfa_offset 8
 5115              		.cfi_offset 7, -8
 5116              		.cfi_offset 14, -4
 5117 0002 82B0     		sub	sp, sp, #8
 5118              	.LCFI195:
 5119              		.cfi_def_cfa_offset 16
 5120 0004 00AF     		add	r7, sp, #0
 5121              	.LCFI196:
 5122              		.cfi_def_cfa_register 7
 5123 0006 7860     		str	r0, [r7, #4]
 5124              	.L319:
3394:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:./Libraries/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:./Libraries/FreeRTOS/Source/tasks.c **** 
3397:./Libraries/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:./Libraries/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:./Libraries/FreeRTOS/Source/tasks.c **** 
3400:./Libraries/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:./Libraries/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:./Libraries/FreeRTOS/Source/tasks.c **** 	any. */
3403:./Libraries/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:./Libraries/FreeRTOS/Source/tasks.c **** 
3405:./Libraries/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3407:./Libraries/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:./Libraries/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:./Libraries/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5125              		.loc 1 3409 3
 5126 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:./Libraries/FreeRTOS/Source/tasks.c **** 
3411:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3413:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:./Libraries/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:./Libraries/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:./Libraries/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:./Libraries/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3419:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:./Libraries/FreeRTOS/Source/tasks.c **** 
3421:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3423:./Libraries/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:./Libraries/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:./Libraries/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:./Libraries/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:./Libraries/FreeRTOS/Source/tasks.c **** 
3428:./Libraries/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:./Libraries/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:./Libraries/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:./Libraries/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5127              		.loc 1 3432 8
 5128 000c 064B     		ldr	r3, .L320
ARM GAS  /tmp/ccpNfLZa.s 			page 155


 5129 000e 1B68     		ldr	r3, [r3]
 5130              		.loc 1 3432 6
 5131 0010 012B     		cmp	r3, #1
 5132 0012 F9D9     		bls	.L319
3433:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3434:./Libraries/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5133              		.loc 1 3434 5
 5134 0014 054B     		ldr	r3, .L320+4
 5135 0016 4FF08052 		mov	r2, #268435456
 5136 001a 1A60     		str	r2, [r3]
 5137              		.syntax unified
 5138              	@ 3434 "./Libraries/FreeRTOS/Source/tasks.c" 1
 5139 001c BFF34F8F 		dsb
 5140              	@ 0 "" 2
 5141              	@ 3434 "./Libraries/FreeRTOS/Source/tasks.c" 1
 5142 0020 BFF36F8F 		isb
 5143              	@ 0 "" 2
3409:./Libraries/FreeRTOS/Source/tasks.c **** 
 5144              		.loc 1 3409 3
 5145              		.thumb
 5146              		.syntax unified
 5147 0024 F0E7     		b	.L319
 5148              	.L321:
 5149 0026 00BF     		.align	2
 5150              	.L320:
 5151 0028 00000000 		.word	pxReadyTasksLists
 5152 002c 04ED00E0 		.word	-536810236
 5153              		.cfi_endproc
 5154              	.LFE42:
 5156              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5157              		.align	1
 5158              		.syntax unified
 5159              		.thumb
 5160              		.thumb_func
 5161              		.fpu fpv5-d16
 5163              	prvInitialiseTaskLists:
 5164              	.LFB43:
3435:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3436:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3437:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3438:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3440:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3441:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:./Libraries/FreeRTOS/Source/tasks.c **** 
3443:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3445:./Libraries/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:./Libraries/FreeRTOS/Source/tasks.c **** 
3447:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:./Libraries/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:./Libraries/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:./Libraries/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:./Libraries/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:./Libraries/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3454:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
ARM GAS  /tmp/ccpNfLZa.s 			page 156


3455:./Libraries/FreeRTOS/Source/tasks.c **** 
3456:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:./Libraries/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:./Libraries/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:./Libraries/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3462:./Libraries/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:./Libraries/FreeRTOS/Source/tasks.c **** 
3464:./Libraries/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:./Libraries/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:./Libraries/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:./Libraries/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:./Libraries/FreeRTOS/Source/tasks.c **** 			valid. */
3469:./Libraries/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:./Libraries/FreeRTOS/Source/tasks.c **** 
3471:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3473:./Libraries/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:./Libraries/FreeRTOS/Source/tasks.c **** 				{
3475:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:./Libraries/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:./Libraries/FreeRTOS/Source/tasks.c **** 					be used. */
3478:./Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:./Libraries/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:./Libraries/FreeRTOS/Source/tasks.c **** 
3481:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:./Libraries/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:./Libraries/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:./Libraries/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:./Libraries/FreeRTOS/Source/tasks.c **** 
3486:./Libraries/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:./Libraries/FreeRTOS/Source/tasks.c **** 					{
3488:./Libraries/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:./Libraries/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:./Libraries/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:./Libraries/FreeRTOS/Source/tasks.c **** 					}
3492:./Libraries/FreeRTOS/Source/tasks.c **** 					else
3493:./Libraries/FreeRTOS/Source/tasks.c **** 					{
3494:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:./Libraries/FreeRTOS/Source/tasks.c **** 					}
3496:./Libraries/FreeRTOS/Source/tasks.c **** 				}
3497:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3499:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3500:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3501:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3503:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3504:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3506:./Libraries/FreeRTOS/Source/tasks.c **** }
3507:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:./Libraries/FreeRTOS/Source/tasks.c **** 
3509:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:./Libraries/FreeRTOS/Source/tasks.c **** 
3511:./Libraries/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  /tmp/ccpNfLZa.s 			page 157


3512:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3513:./Libraries/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:./Libraries/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:./Libraries/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:./Libraries/FreeRTOS/Source/tasks.c **** 
3517:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:./Libraries/FreeRTOS/Source/tasks.c **** 
3519:./Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3521:./Libraries/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:./Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3524:./Libraries/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3526:./Libraries/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:./Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3529:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3530:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3531:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:./Libraries/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:./Libraries/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:./Libraries/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:./Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3537:./Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3539:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3540:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3541:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3543:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3544:./Libraries/FreeRTOS/Source/tasks.c **** 
3545:./Libraries/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3547:./Libraries/FreeRTOS/Source/tasks.c **** 
3548:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:./Libraries/FreeRTOS/Source/tasks.c **** 
3551:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:./Libraries/FreeRTOS/Source/tasks.c **** 
3553:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3555:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:./Libraries/FreeRTOS/Source/tasks.c **** 
3557:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3559:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3563:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3564:./Libraries/FreeRTOS/Source/tasks.c **** 
3565:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:./Libraries/FreeRTOS/Source/tasks.c **** 
3568:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
ARM GAS  /tmp/ccpNfLZa.s 			page 158


3569:./Libraries/FreeRTOS/Source/tasks.c **** 
3570:./Libraries/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3572:./Libraries/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:./Libraries/FreeRTOS/Source/tasks.c **** 
3575:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3577:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:./Libraries/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3580:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3581:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3582:./Libraries/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3584:./Libraries/FreeRTOS/Source/tasks.c **** 
3585:./Libraries/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3587:./Libraries/FreeRTOS/Source/tasks.c **** 
3588:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:./Libraries/FreeRTOS/Source/tasks.c **** 
3591:./Libraries/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:./Libraries/FreeRTOS/Source/tasks.c **** 
3593:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3595:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:./Libraries/FreeRTOS/Source/tasks.c **** 
3597:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:./Libraries/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:./Libraries/FreeRTOS/Source/tasks.c **** 
3601:./Libraries/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3603:./Libraries/FreeRTOS/Source/tasks.c **** 
3604:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:./Libraries/FreeRTOS/Source/tasks.c **** 
3607:./Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:./Libraries/FreeRTOS/Source/tasks.c **** {
 5165              		.loc 1 3608 1
 5166              		.cfi_startproc
 5167              		@ args = 0, pretend = 0, frame = 8
 5168              		@ frame_needed = 1, uses_anonymous_args = 0
 5169 0000 80B5     		push	{r7, lr}
 5170              	.LCFI197:
 5171              		.cfi_def_cfa_offset 8
 5172              		.cfi_offset 7, -8
 5173              		.cfi_offset 14, -4
 5174 0002 82B0     		sub	sp, sp, #8
 5175              	.LCFI198:
 5176              		.cfi_def_cfa_offset 16
 5177 0004 00AF     		add	r7, sp, #0
 5178              	.LCFI199:
 5179              		.cfi_def_cfa_register 7
3609:./Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 159


3611:./Libraries/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5180              		.loc 1 3611 18
 5181 0006 0023     		movs	r3, #0
 5182 0008 7B60     		str	r3, [r7, #4]
 5183              		.loc 1 3611 2
 5184 000a 0CE0     		b	.L323
 5185              	.L324:
3612:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3613:./Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5186              		.loc 1 3613 3 discriminator 3
 5187 000c 7A68     		ldr	r2, [r7, #4]
 5188 000e 1346     		mov	r3, r2
 5189 0010 9B00     		lsls	r3, r3, #2
 5190 0012 1344     		add	r3, r3, r2
 5191 0014 9B00     		lsls	r3, r3, #2
 5192 0016 124A     		ldr	r2, .L325
 5193 0018 1344     		add	r3, r3, r2
 5194 001a 1846     		mov	r0, r3
 5195 001c FFF7FEFF 		bl	vListInitialise
3611:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5196              		.loc 1 3611 101 discriminator 3
 5197 0020 7B68     		ldr	r3, [r7, #4]
 5198 0022 0133     		adds	r3, r3, #1
 5199 0024 7B60     		str	r3, [r7, #4]
 5200              	.L323:
3611:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5201              		.loc 1 3611 2 discriminator 1
 5202 0026 7B68     		ldr	r3, [r7, #4]
 5203 0028 372B     		cmp	r3, #55
 5204 002a EFD9     		bls	.L324
3614:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3615:./Libraries/FreeRTOS/Source/tasks.c **** 
3616:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5205              		.loc 1 3616 2
 5206 002c 0D48     		ldr	r0, .L325+4
 5207 002e FFF7FEFF 		bl	vListInitialise
3617:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5208              		.loc 1 3617 2
 5209 0032 0D48     		ldr	r0, .L325+8
 5210 0034 FFF7FEFF 		bl	vListInitialise
3618:./Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5211              		.loc 1 3618 2
 5212 0038 0C48     		ldr	r0, .L325+12
 5213 003a FFF7FEFF 		bl	vListInitialise
3619:./Libraries/FreeRTOS/Source/tasks.c **** 
3620:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3622:./Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5214              		.loc 1 3622 3
 5215 003e 0C48     		ldr	r0, .L325+16
 5216 0040 FFF7FEFF 		bl	vListInitialise
3623:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3624:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:./Libraries/FreeRTOS/Source/tasks.c **** 
3626:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3628:./Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
ARM GAS  /tmp/ccpNfLZa.s 			page 160


 5217              		.loc 1 3628 3
 5218 0044 0B48     		ldr	r0, .L325+20
 5219 0046 FFF7FEFF 		bl	vListInitialise
3629:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3630:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:./Libraries/FreeRTOS/Source/tasks.c **** 
3632:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:./Libraries/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:./Libraries/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5220              		.loc 1 3634 20
 5221 004a 0B4B     		ldr	r3, .L325+24
 5222 004c 054A     		ldr	r2, .L325+4
 5223 004e 1A60     		str	r2, [r3]
3635:./Libraries/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5224              		.loc 1 3635 28
 5225 0050 0A4B     		ldr	r3, .L325+28
 5226 0052 054A     		ldr	r2, .L325+8
 5227 0054 1A60     		str	r2, [r3]
3636:./Libraries/FreeRTOS/Source/tasks.c **** }
 5228              		.loc 1 3636 1
 5229 0056 00BF     		nop
 5230 0058 0837     		adds	r7, r7, #8
 5231              	.LCFI200:
 5232              		.cfi_def_cfa_offset 8
 5233 005a BD46     		mov	sp, r7
 5234              	.LCFI201:
 5235              		.cfi_def_cfa_register 13
 5236              		@ sp needed
 5237 005c 80BD     		pop	{r7, pc}
 5238              	.L326:
 5239 005e 00BF     		.align	2
 5240              	.L325:
 5241 0060 00000000 		.word	pxReadyTasksLists
 5242 0064 00000000 		.word	xDelayedTaskList1
 5243 0068 00000000 		.word	xDelayedTaskList2
 5244 006c 00000000 		.word	xPendingReadyList
 5245 0070 00000000 		.word	xTasksWaitingTermination
 5246 0074 00000000 		.word	xSuspendedTaskList
 5247 0078 00000000 		.word	pxDelayedTaskList
 5248 007c 00000000 		.word	pxOverflowDelayedTaskList
 5249              		.cfi_endproc
 5250              	.LFE43:
 5252              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5253              		.align	1
 5254              		.syntax unified
 5255              		.thumb
 5256              		.thumb_func
 5257              		.fpu fpv5-d16
 5259              	prvCheckTasksWaitingTermination:
 5260              	.LFB44:
3637:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:./Libraries/FreeRTOS/Source/tasks.c **** 
3639:./Libraries/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:./Libraries/FreeRTOS/Source/tasks.c **** {
 5261              		.loc 1 3640 1
 5262              		.cfi_startproc
 5263              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccpNfLZa.s 			page 161


 5264              		@ frame_needed = 1, uses_anonymous_args = 0
 5265 0000 80B5     		push	{r7, lr}
 5266              	.LCFI202:
 5267              		.cfi_def_cfa_offset 8
 5268              		.cfi_offset 7, -8
 5269              		.cfi_offset 14, -4
 5270 0002 82B0     		sub	sp, sp, #8
 5271              	.LCFI203:
 5272              		.cfi_def_cfa_offset 16
 5273 0004 00AF     		add	r7, sp, #0
 5274              	.LCFI204:
 5275              		.cfi_def_cfa_register 7
 5276              	.LBB203:
3641:./Libraries/FreeRTOS/Source/tasks.c **** 
3642:./Libraries/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:./Libraries/FreeRTOS/Source/tasks.c **** 
3644:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3646:./Libraries/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:./Libraries/FreeRTOS/Source/tasks.c **** 
3648:./Libraries/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:./Libraries/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:./Libraries/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5277              		.loc 1 3650 8
 5278 0006 19E0     		b	.L328
 5279              	.L329:
3651:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3652:./Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5280              		.loc 1 3652 4
 5281 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3654:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5282              		.loc 1 3654 13
 5283 000c 104B     		ldr	r3, .L330
 5284 000e DB68     		ldr	r3, [r3, #12]
 5285              		.loc 1 3654 11
 5286 0010 DB68     		ldr	r3, [r3, #12]
 5287 0012 7B60     		str	r3, [r7, #4]
3655:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5288              		.loc 1 3655 14
 5289 0014 7B68     		ldr	r3, [r7, #4]
 5290 0016 0433     		adds	r3, r3, #4
 5291 0018 1846     		mov	r0, r3
 5292 001a FFF7FEFF 		bl	uxListRemove
3656:./Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5293              		.loc 1 3656 5
 5294 001e 0D4B     		ldr	r3, .L330+4
 5295 0020 1B68     		ldr	r3, [r3]
 5296 0022 013B     		subs	r3, r3, #1
 5297 0024 0B4A     		ldr	r2, .L330+4
 5298 0026 1360     		str	r3, [r2]
3657:./Libraries/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5299              		.loc 1 3657 5
 5300 0028 0B4B     		ldr	r3, .L330+8
 5301 002a 1B68     		ldr	r3, [r3]
 5302 002c 013B     		subs	r3, r3, #1
 5303 002e 0A4A     		ldr	r2, .L330+8
ARM GAS  /tmp/ccpNfLZa.s 			page 162


 5304 0030 1360     		str	r3, [r2]
3658:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3659:./Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5305              		.loc 1 3659 4
 5306 0032 FFF7FEFF 		bl	vPortExitCritical
3660:./Libraries/FreeRTOS/Source/tasks.c **** 
3661:./Libraries/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5307              		.loc 1 3661 4
 5308 0036 7868     		ldr	r0, [r7, #4]
 5309 0038 FFF7FEFF 		bl	prvDeleteTCB
 5310              	.L328:
3650:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 5311              		.loc 1 3650 39
 5312 003c 064B     		ldr	r3, .L330+8
 5313 003e 1B68     		ldr	r3, [r3]
3650:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 5314              		.loc 1 3650 8
 5315 0040 002B     		cmp	r3, #0
 5316 0042 E1D1     		bne	.L329
 5317              	.LBE203:
3662:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3663:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3664:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:./Libraries/FreeRTOS/Source/tasks.c **** }
 5318              		.loc 1 3665 1
 5319 0044 00BF     		nop
 5320 0046 00BF     		nop
 5321 0048 0837     		adds	r7, r7, #8
 5322              	.LCFI205:
 5323              		.cfi_def_cfa_offset 8
 5324 004a BD46     		mov	sp, r7
 5325              	.LCFI206:
 5326              		.cfi_def_cfa_register 13
 5327              		@ sp needed
 5328 004c 80BD     		pop	{r7, pc}
 5329              	.L331:
 5330 004e 00BF     		.align	2
 5331              	.L330:
 5332 0050 00000000 		.word	xTasksWaitingTermination
 5333 0054 00000000 		.word	uxCurrentNumberOfTasks
 5334 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5335              		.cfi_endproc
 5336              	.LFE44:
 5338              		.section	.text.vTaskGetInfo,"ax",%progbits
 5339              		.align	1
 5340              		.global	vTaskGetInfo
 5341              		.syntax unified
 5342              		.thumb
 5343              		.thumb_func
 5344              		.fpu fpv5-d16
 5346              	vTaskGetInfo:
 5347              	.LFB45:
3666:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:./Libraries/FreeRTOS/Source/tasks.c **** 
3668:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:./Libraries/FreeRTOS/Source/tasks.c **** 
3670:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
ARM GAS  /tmp/ccpNfLZa.s 			page 163


3671:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5348              		.loc 1 3671 2
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 24
 5351              		@ frame_needed = 1, uses_anonymous_args = 0
 5352 0000 80B5     		push	{r7, lr}
 5353              	.LCFI207:
 5354              		.cfi_def_cfa_offset 8
 5355              		.cfi_offset 7, -8
 5356              		.cfi_offset 14, -4
 5357 0002 86B0     		sub	sp, sp, #24
 5358              	.LCFI208:
 5359              		.cfi_def_cfa_offset 32
 5360 0004 00AF     		add	r7, sp, #0
 5361              	.LCFI209:
 5362              		.cfi_def_cfa_register 7
 5363 0006 F860     		str	r0, [r7, #12]
 5364 0008 B960     		str	r1, [r7, #8]
 5365 000a 7A60     		str	r2, [r7, #4]
 5366 000c FB70     		strb	r3, [r7, #3]
3672:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:./Libraries/FreeRTOS/Source/tasks.c **** 
3674:./Libraries/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5367              		.loc 1 3675 11
 5368 000e FB68     		ldr	r3, [r7, #12]
 5369 0010 002B     		cmp	r3, #0
 5370 0012 02D1     		bne	.L333
 5371              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5372 0014 2C4B     		ldr	r3, .L342
 5373 0016 1B68     		ldr	r3, [r3]
 5374 0018 00E0     		b	.L334
 5375              	.L333:
 5376              		.loc 1 3675 11 discriminator 2
 5377 001a FB68     		ldr	r3, [r7, #12]
 5378              	.L334:
 5379              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5380 001c 7B61     		str	r3, [r7, #20]
3676:./Libraries/FreeRTOS/Source/tasks.c **** 
3677:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5381              		.loc 1 3677 25 discriminator 4
 5382 001e BB68     		ldr	r3, [r7, #8]
 5383 0020 7A69     		ldr	r2, [r7, #20]
 5384 0022 1A60     		str	r2, [r3]
3678:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5385              		.loc 1 3678 47 discriminator 4
 5386 0024 7B69     		ldr	r3, [r7, #20]
 5387 0026 03F13402 		add	r2, r3, #52
 5388              		.loc 1 3678 28 discriminator 4
 5389 002a BB68     		ldr	r3, [r7, #8]
 5390 002c 5A60     		str	r2, [r3, #4]
3679:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5391              		.loc 1 3679 42 discriminator 4
 5392 002e 7B69     		ldr	r3, [r7, #20]
 5393 0030 DA6A     		ldr	r2, [r3, #44]
 5394              		.loc 1 3679 35 discriminator 4
 5395 0032 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccpNfLZa.s 			page 164


 5396 0034 1A61     		str	r2, [r3, #16]
3680:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5397              		.loc 1 3680 36 discriminator 4
 5398 0036 7B69     		ldr	r3, [r7, #20]
 5399 0038 1A6B     		ldr	r2, [r3, #48]
 5400              		.loc 1 3680 29 discriminator 4
 5401 003a BB68     		ldr	r3, [r7, #8]
 5402 003c DA61     		str	r2, [r3, #28]
3681:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5403              		.loc 1 3681 36 discriminator 4
 5404 003e 7B69     		ldr	r3, [r7, #20]
 5405 0040 5A6C     		ldr	r2, [r3, #68]
 5406              		.loc 1 3681 29 discriminator 4
 5407 0042 BB68     		ldr	r3, [r7, #8]
 5408 0044 9A60     		str	r2, [r3, #8]
3682:./Libraries/FreeRTOS/Source/tasks.c **** 
3683:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3685:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5409              		.loc 1 3685 40 discriminator 4
 5410 0046 7B69     		ldr	r3, [r7, #20]
 5411 0048 DA6C     		ldr	r2, [r3, #76]
 5412              		.loc 1 3685 33 discriminator 4
 5413 004a BB68     		ldr	r3, [r7, #8]
 5414 004c 5A61     		str	r2, [r3, #20]
3686:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3687:./Libraries/FreeRTOS/Source/tasks.c **** 		#else
3688:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3689:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3691:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3692:./Libraries/FreeRTOS/Source/tasks.c **** 
3693:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3695:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3697:./Libraries/FreeRTOS/Source/tasks.c **** 		#else
3698:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3699:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5415              		.loc 1 3699 35 discriminator 4
 5416 004e BB68     		ldr	r3, [r7, #8]
 5417 0050 0022     		movs	r2, #0
 5418 0052 9A61     		str	r2, [r3, #24]
3700:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3701:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3702:./Libraries/FreeRTOS/Source/tasks.c **** 
3703:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:./Libraries/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:./Libraries/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:./Libraries/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5419              		.loc 1 3706 5 discriminator 4
 5420 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5421 0056 052B     		cmp	r3, #5
 5422 0058 1AD0     		beq	.L335
3707:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3708:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5423              		.loc 1 3708 14
ARM GAS  /tmp/ccpNfLZa.s 			page 165


 5424 005a 1B4B     		ldr	r3, .L342
 5425 005c 1B68     		ldr	r3, [r3]
 5426              		.loc 1 3708 6
 5427 005e 7A69     		ldr	r2, [r7, #20]
 5428 0060 9A42     		cmp	r2, r3
 5429 0062 03D1     		bne	.L336
3709:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3710:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5430              		.loc 1 3710 33
 5431 0064 BB68     		ldr	r3, [r7, #8]
 5432 0066 0022     		movs	r2, #0
 5433 0068 1A73     		strb	r2, [r3, #12]
 5434 006a 18E0     		b	.L337
 5435              	.L336:
3711:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3712:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3713:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3714:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5436              		.loc 1 3714 33
 5437 006c BB68     		ldr	r3, [r7, #8]
 5438 006e FA78     		ldrb	r2, [r7, #3]
 5439 0070 1A73     		strb	r2, [r3, #12]
3715:./Libraries/FreeRTOS/Source/tasks.c **** 
3716:./Libraries/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:./Libraries/FreeRTOS/Source/tasks.c **** 				{
3718:./Libraries/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:./Libraries/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:./Libraries/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:./Libraries/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5440              		.loc 1 3721 8
 5441 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5442 0074 032B     		cmp	r3, #3
 5443 0076 12D1     		bne	.L337
3722:./Libraries/FreeRTOS/Source/tasks.c **** 					{
3723:./Libraries/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5444              		.loc 1 3723 7
 5445 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:./Libraries/FreeRTOS/Source/tasks.c **** 						{
3725:./Libraries/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5446              		.loc 1 3725 12
 5447 007c 7B69     		ldr	r3, [r7, #20]
 5448 007e 9B6A     		ldr	r3, [r3, #40]
 5449              		.loc 1 3725 10
 5450 0080 002B     		cmp	r3, #0
 5451 0082 02D0     		beq	.L338
3726:./Libraries/FreeRTOS/Source/tasks.c **** 							{
3727:./Libraries/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5452              		.loc 1 3727 37
 5453 0084 BB68     		ldr	r3, [r7, #8]
 5454 0086 0222     		movs	r2, #2
 5455 0088 1A73     		strb	r2, [r3, #12]
 5456              	.L338:
3728:./Libraries/FreeRTOS/Source/tasks.c **** 							}
3729:./Libraries/FreeRTOS/Source/tasks.c **** 						}
3730:./Libraries/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5457              		.loc 1 3730 16
 5458 008a FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccpNfLZa.s 			page 166


 5459 008e 06E0     		b	.L337
 5460              	.L335:
3731:./Libraries/FreeRTOS/Source/tasks.c **** 					}
3732:./Libraries/FreeRTOS/Source/tasks.c **** 				}
3733:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3735:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3736:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3737:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3738:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5461              		.loc 1 3738 34
 5462 0090 7869     		ldr	r0, [r7, #20]
 5463 0092 FFF7FEFF 		bl	eTaskGetState
 5464 0096 0346     		mov	r3, r0
 5465 0098 1A46     		mov	r2, r3
 5466              		.loc 1 3738 32
 5467 009a BB68     		ldr	r3, [r7, #8]
 5468 009c 1A73     		strb	r2, [r3, #12]
 5469              	.L337:
3739:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3740:./Libraries/FreeRTOS/Source/tasks.c **** 
3741:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:./Libraries/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5470              		.loc 1 3743 5
 5471 009e 7B68     		ldr	r3, [r7, #4]
 5472 00a0 002B     		cmp	r3, #0
 5473 00a2 09D0     		beq	.L339
3744:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3745:./Libraries/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3747:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3749:./Libraries/FreeRTOS/Source/tasks.c **** 			#else
3750:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3751:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5474              		.loc 1 3751 89
 5475 00a4 7B69     		ldr	r3, [r7, #20]
 5476 00a6 1B6B     		ldr	r3, [r3, #48]
 5477              		.loc 1 3751 42
 5478 00a8 1846     		mov	r0, r3
 5479 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5480 00ae 0346     		mov	r3, r0
 5481 00b0 1A46     		mov	r2, r3
 5482              		.loc 1 3751 40
 5483 00b2 BB68     		ldr	r3, [r7, #8]
 5484 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3753:./Libraries/FreeRTOS/Source/tasks.c **** 			#endif
3754:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3755:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3756:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3757:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3759:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5485              		.loc 1 3759 2
 5486 00b6 02E0     		b	.L341
ARM GAS  /tmp/ccpNfLZa.s 			page 167


 5487              	.L339:
3757:./Libraries/FreeRTOS/Source/tasks.c **** 		}
 5488              		.loc 1 3757 39
 5489 00b8 BB68     		ldr	r3, [r7, #8]
 5490 00ba 0022     		movs	r2, #0
 5491 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5492              	.L341:
 5493              		.loc 1 3759 2
 5494 00be 00BF     		nop
 5495 00c0 1837     		adds	r7, r7, #24
 5496              	.LCFI210:
 5497              		.cfi_def_cfa_offset 8
 5498 00c2 BD46     		mov	sp, r7
 5499              	.LCFI211:
 5500              		.cfi_def_cfa_register 13
 5501              		@ sp needed
 5502 00c4 80BD     		pop	{r7, pc}
 5503              	.L343:
 5504 00c6 00BF     		.align	2
 5505              	.L342:
 5506 00c8 00000000 		.word	pxCurrentTCB
 5507              		.cfi_endproc
 5508              	.LFE45:
 5510              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5511              		.align	1
 5512              		.syntax unified
 5513              		.thumb
 5514              		.thumb_func
 5515              		.fpu fpv5-d16
 5517              	prvListTasksWithinSingleList:
 5518              	.LFB46:
3760:./Libraries/FreeRTOS/Source/tasks.c **** 
3761:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:./Libraries/FreeRTOS/Source/tasks.c **** 
3764:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:./Libraries/FreeRTOS/Source/tasks.c **** 
3766:./Libraries/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5519              		.loc 1 3767 2
 5520              		.cfi_startproc
 5521              		@ args = 0, pretend = 0, frame = 40
 5522              		@ frame_needed = 1, uses_anonymous_args = 0
 5523 0000 80B5     		push	{r7, lr}
 5524              	.LCFI212:
 5525              		.cfi_def_cfa_offset 8
 5526              		.cfi_offset 7, -8
 5527              		.cfi_offset 14, -4
 5528 0002 8AB0     		sub	sp, sp, #40
 5529              	.LCFI213:
 5530              		.cfi_def_cfa_offset 48
 5531 0004 00AF     		add	r7, sp, #0
 5532              	.LCFI214:
 5533              		.cfi_def_cfa_register 7
 5534 0006 F860     		str	r0, [r7, #12]
 5535 0008 B960     		str	r1, [r7, #8]
 5536 000a 1346     		mov	r3, r2
ARM GAS  /tmp/ccpNfLZa.s 			page 168


 5537 000c FB71     		strb	r3, [r7, #7]
3768:./Libraries/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5538              		.loc 1 3769 14
 5539 000e 0023     		movs	r3, #0
 5540 0010 7B62     		str	r3, [r7, #36]
3770:./Libraries/FreeRTOS/Source/tasks.c **** 
3771:./Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5541              		.loc 1 3771 7
 5542 0012 BB68     		ldr	r3, [r7, #8]
 5543 0014 1B68     		ldr	r3, [r3]
 5544              		.loc 1 3771 5
 5545 0016 002B     		cmp	r3, #0
 5546 0018 3FD0     		beq	.L345
 5547              	.LBB204:
3772:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3773:./Libraries/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5548              		.loc 1 3773 4
 5549 001a BB68     		ldr	r3, [r7, #8]
 5550 001c 3B62     		str	r3, [r7, #32]
 5551 001e 3B6A     		ldr	r3, [r7, #32]
 5552 0020 5B68     		ldr	r3, [r3, #4]
 5553 0022 5A68     		ldr	r2, [r3, #4]
 5554 0024 3B6A     		ldr	r3, [r7, #32]
 5555 0026 5A60     		str	r2, [r3, #4]
 5556 0028 3B6A     		ldr	r3, [r7, #32]
 5557 002a 5A68     		ldr	r2, [r3, #4]
 5558 002c 3B6A     		ldr	r3, [r7, #32]
 5559 002e 0833     		adds	r3, r3, #8
 5560 0030 9A42     		cmp	r2, r3
 5561 0032 04D1     		bne	.L346
 5562              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5563 0034 3B6A     		ldr	r3, [r7, #32]
 5564 0036 5B68     		ldr	r3, [r3, #4]
 5565 0038 5A68     		ldr	r2, [r3, #4]
 5566 003a 3B6A     		ldr	r3, [r7, #32]
 5567 003c 5A60     		str	r2, [r3, #4]
 5568              	.L346:
 5569              		.loc 1 3773 4 discriminator 3
 5570 003e 3B6A     		ldr	r3, [r7, #32]
 5571 0040 5B68     		ldr	r3, [r3, #4]
 5572 0042 DB68     		ldr	r3, [r3, #12]
 5573 0044 FB61     		str	r3, [r7, #28]
 5574              	.L348:
 5575              	.LBE204:
 5576              	.LBB205:
3774:./Libraries/FreeRTOS/Source/tasks.c **** 
3775:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:./Libraries/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:./Libraries/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:./Libraries/FreeRTOS/Source/tasks.c **** 			do
3780:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3781:./Libraries/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5577              		.loc 1 3781 5 is_stmt 1
 5578 0046 BB68     		ldr	r3, [r7, #8]
 5579 0048 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccpNfLZa.s 			page 169


 5580 004a BB69     		ldr	r3, [r7, #24]
 5581 004c 5B68     		ldr	r3, [r3, #4]
 5582 004e 5A68     		ldr	r2, [r3, #4]
 5583 0050 BB69     		ldr	r3, [r7, #24]
 5584 0052 5A60     		str	r2, [r3, #4]
 5585 0054 BB69     		ldr	r3, [r7, #24]
 5586 0056 5A68     		ldr	r2, [r3, #4]
 5587 0058 BB69     		ldr	r3, [r7, #24]
 5588 005a 0833     		adds	r3, r3, #8
 5589 005c 9A42     		cmp	r2, r3
 5590 005e 04D1     		bne	.L347
 5591              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5592 0060 BB69     		ldr	r3, [r7, #24]
 5593 0062 5B68     		ldr	r3, [r3, #4]
 5594 0064 5A68     		ldr	r2, [r3, #4]
 5595 0066 BB69     		ldr	r3, [r7, #24]
 5596 0068 5A60     		str	r2, [r3, #4]
 5597              	.L347:
 5598              		.loc 1 3781 5 discriminator 3
 5599 006a BB69     		ldr	r3, [r7, #24]
 5600 006c 5B68     		ldr	r3, [r3, #4]
 5601 006e DB68     		ldr	r3, [r3, #12]
 5602 0070 7B61     		str	r3, [r7, #20]
 5603              	.LBE205:
3782:./Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5604              		.loc 1 3782 67 is_stmt 1 discriminator 3
 5605 0072 7A6A     		ldr	r2, [r7, #36]
 5606 0074 1346     		mov	r3, r2
 5607 0076 DB00     		lsls	r3, r3, #3
 5608 0078 1344     		add	r3, r3, r2
 5609 007a 9B00     		lsls	r3, r3, #2
 5610 007c 1A46     		mov	r2, r3
 5611              		.loc 1 3782 5 discriminator 3
 5612 007e FB68     		ldr	r3, [r7, #12]
 5613 0080 9918     		adds	r1, r3, r2
 5614 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5615 0084 0122     		movs	r2, #1
 5616 0086 7869     		ldr	r0, [r7, #20]
 5617 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:./Libraries/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5618              		.loc 1 3783 11 discriminator 3
 5619 008c 7B6A     		ldr	r3, [r7, #36]
 5620 008e 0133     		adds	r3, r3, #1
 5621 0090 7B62     		str	r3, [r7, #36]
3784:./Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5622              		.loc 1 3784 4 discriminator 3
 5623 0092 7A69     		ldr	r2, [r7, #20]
 5624 0094 FB69     		ldr	r3, [r7, #28]
 5625 0096 9A42     		cmp	r2, r3
 5626 0098 D5D1     		bne	.L348
 5627              	.L345:
3785:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3786:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3787:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3788:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3790:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 170


3791:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5628              		.loc 1 3791 10
 5629 009a 7B6A     		ldr	r3, [r7, #36]
3792:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5630              		.loc 1 3792 2
 5631 009c 1846     		mov	r0, r3
 5632 009e 2837     		adds	r7, r7, #40
 5633              	.LCFI215:
 5634              		.cfi_def_cfa_offset 8
 5635 00a0 BD46     		mov	sp, r7
 5636              	.LCFI216:
 5637              		.cfi_def_cfa_register 13
 5638              		@ sp needed
 5639 00a2 80BD     		pop	{r7, pc}
 5640              		.cfi_endproc
 5641              	.LFE46:
 5643              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5644              		.align	1
 5645              		.syntax unified
 5646              		.thumb
 5647              		.thumb_func
 5648              		.fpu fpv5-d16
 5650              	prvTaskCheckFreeStackSpace:
 5651              	.LFB47:
3793:./Libraries/FreeRTOS/Source/tasks.c **** 
3794:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:./Libraries/FreeRTOS/Source/tasks.c **** 
3797:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:./Libraries/FreeRTOS/Source/tasks.c **** 
3799:./Libraries/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5652              		.loc 1 3800 2
 5653              		.cfi_startproc
 5654              		@ args = 0, pretend = 0, frame = 16
 5655              		@ frame_needed = 1, uses_anonymous_args = 0
 5656              		@ link register save eliminated.
 5657 0000 80B4     		push	{r7}
 5658              	.LCFI217:
 5659              		.cfi_def_cfa_offset 4
 5660              		.cfi_offset 7, -4
 5661 0002 85B0     		sub	sp, sp, #20
 5662              	.LCFI218:
 5663              		.cfi_def_cfa_offset 24
 5664 0004 00AF     		add	r7, sp, #0
 5665              	.LCFI219:
 5666              		.cfi_def_cfa_register 7
 5667 0006 7860     		str	r0, [r7, #4]
3801:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5668              		.loc 1 3801 11
 5669 0008 0023     		movs	r3, #0
 5670 000a FB60     		str	r3, [r7, #12]
3802:./Libraries/FreeRTOS/Source/tasks.c **** 
3803:./Libraries/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5671              		.loc 1 3803 8
 5672 000c 05E0     		b	.L351
 5673              	.L352:
ARM GAS  /tmp/ccpNfLZa.s 			page 171


3804:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3805:./Libraries/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5674              		.loc 1 3805 17
 5675 000e 7B68     		ldr	r3, [r7, #4]
 5676 0010 0133     		adds	r3, r3, #1
 5677 0012 7B60     		str	r3, [r7, #4]
3806:./Libraries/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5678              		.loc 1 3806 11
 5679 0014 FB68     		ldr	r3, [r7, #12]
 5680 0016 0133     		adds	r3, r3, #1
 5681 0018 FB60     		str	r3, [r7, #12]
 5682              	.L351:
3803:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 5683              		.loc 1 3803 10
 5684 001a 7B68     		ldr	r3, [r7, #4]
 5685 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:./Libraries/FreeRTOS/Source/tasks.c **** 		{
 5686              		.loc 1 3803 8
 5687 001e A52B     		cmp	r3, #165
 5688 0020 F5D0     		beq	.L352
3807:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3808:./Libraries/FreeRTOS/Source/tasks.c **** 
3809:./Libraries/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5689              		.loc 1 3809 11
 5690 0022 FB68     		ldr	r3, [r7, #12]
 5691 0024 9B08     		lsrs	r3, r3, #2
 5692 0026 FB60     		str	r3, [r7, #12]
3810:./Libraries/FreeRTOS/Source/tasks.c **** 
3811:./Libraries/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5693              		.loc 1 3811 10
 5694 0028 FB68     		ldr	r3, [r7, #12]
 5695 002a 9BB2     		uxth	r3, r3
3812:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5696              		.loc 1 3812 2
 5697 002c 1846     		mov	r0, r3
 5698 002e 1437     		adds	r7, r7, #20
 5699              	.LCFI220:
 5700              		.cfi_def_cfa_offset 4
 5701 0030 BD46     		mov	sp, r7
 5702              	.LCFI221:
 5703              		.cfi_def_cfa_register 13
 5704              		@ sp needed
 5705 0032 5DF8047B 		ldr	r7, [sp], #4
 5706              	.LCFI222:
 5707              		.cfi_restore 7
 5708              		.cfi_def_cfa_offset 0
 5709 0036 7047     		bx	lr
 5710              		.cfi_endproc
 5711              	.LFE47:
 5713              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5714              		.align	1
 5715              		.global	uxTaskGetStackHighWaterMark
 5716              		.syntax unified
 5717              		.thumb
 5718              		.thumb_func
 5719              		.fpu fpv5-d16
 5721              	uxTaskGetStackHighWaterMark:
ARM GAS  /tmp/ccpNfLZa.s 			page 172


 5722              	.LFB48:
3813:./Libraries/FreeRTOS/Source/tasks.c **** 
3814:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:./Libraries/FreeRTOS/Source/tasks.c **** 
3817:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:./Libraries/FreeRTOS/Source/tasks.c **** 
3819:./Libraries/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:./Libraries/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:./Libraries/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:./Libraries/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:./Libraries/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:./Libraries/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3826:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:./Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:./Libraries/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:./Libraries/FreeRTOS/Source/tasks.c **** 
3830:./Libraries/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:./Libraries/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:./Libraries/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:./Libraries/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:./Libraries/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:./Libraries/FreeRTOS/Source/tasks.c **** 		type. */
3836:./Libraries/FreeRTOS/Source/tasks.c **** 
3837:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:./Libraries/FreeRTOS/Source/tasks.c **** 
3839:./Libraries/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3841:./Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3843:./Libraries/FreeRTOS/Source/tasks.c **** 		#else
3844:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3845:./Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3847:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3848:./Libraries/FreeRTOS/Source/tasks.c **** 
3849:./Libraries/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:./Libraries/FreeRTOS/Source/tasks.c **** 
3851:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3853:./Libraries/FreeRTOS/Source/tasks.c **** 
3854:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:./Libraries/FreeRTOS/Source/tasks.c **** 
3857:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:./Libraries/FreeRTOS/Source/tasks.c **** 
3859:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5723              		.loc 1 3860 2
 5724              		.cfi_startproc
 5725              		@ args = 0, pretend = 0, frame = 24
 5726              		@ frame_needed = 1, uses_anonymous_args = 0
 5727 0000 80B5     		push	{r7, lr}
 5728              	.LCFI223:
 5729              		.cfi_def_cfa_offset 8
 5730              		.cfi_offset 7, -8
ARM GAS  /tmp/ccpNfLZa.s 			page 173


 5731              		.cfi_offset 14, -4
 5732 0002 86B0     		sub	sp, sp, #24
 5733              	.LCFI224:
 5734              		.cfi_def_cfa_offset 32
 5735 0004 00AF     		add	r7, sp, #0
 5736              	.LCFI225:
 5737              		.cfi_def_cfa_register 7
 5738 0006 7860     		str	r0, [r7, #4]
3861:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:./Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:./Libraries/FreeRTOS/Source/tasks.c **** 
3865:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5739              		.loc 1 3865 11
 5740 0008 7B68     		ldr	r3, [r7, #4]
 5741 000a 002B     		cmp	r3, #0
 5742 000c 02D1     		bne	.L355
 5743              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5744 000e 094B     		ldr	r3, .L358
 5745 0010 1B68     		ldr	r3, [r3]
 5746 0012 00E0     		b	.L356
 5747              	.L355:
 5748              		.loc 1 3865 11 discriminator 2
 5749 0014 7B68     		ldr	r3, [r7, #4]
 5750              	.L356:
 5751              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5752 0016 7B61     		str	r3, [r7, #20]
3866:./Libraries/FreeRTOS/Source/tasks.c **** 
3867:./Libraries/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3869:./Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5753              		.loc 1 3869 18 discriminator 4
 5754 0018 7B69     		ldr	r3, [r7, #20]
 5755 001a 1B6B     		ldr	r3, [r3, #48]
 5756 001c 3B61     		str	r3, [r7, #16]
3870:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3871:./Libraries/FreeRTOS/Source/tasks.c **** 		#else
3872:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3873:./Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3875:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3876:./Libraries/FreeRTOS/Source/tasks.c **** 
3877:./Libraries/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5757              		.loc 1 3877 30 discriminator 4
 5758 001e 3869     		ldr	r0, [r7, #16]
 5759 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5760 0024 0346     		mov	r3, r0
 5761              		.loc 1 3877 12 discriminator 4
 5762 0026 FB60     		str	r3, [r7, #12]
3878:./Libraries/FreeRTOS/Source/tasks.c **** 
3879:./Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5763              		.loc 1 3879 10 discriminator 4
 5764 0028 FB68     		ldr	r3, [r7, #12]
3880:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5765              		.loc 1 3880 2 discriminator 4
 5766 002a 1846     		mov	r0, r3
 5767 002c 1837     		adds	r7, r7, #24
ARM GAS  /tmp/ccpNfLZa.s 			page 174


 5768              	.LCFI226:
 5769              		.cfi_def_cfa_offset 8
 5770 002e BD46     		mov	sp, r7
 5771              	.LCFI227:
 5772              		.cfi_def_cfa_register 13
 5773              		@ sp needed
 5774 0030 80BD     		pop	{r7, pc}
 5775              	.L359:
 5776 0032 00BF     		.align	2
 5777              	.L358:
 5778 0034 00000000 		.word	pxCurrentTCB
 5779              		.cfi_endproc
 5780              	.LFE48:
 5782              		.section	.text.prvDeleteTCB,"ax",%progbits
 5783              		.align	1
 5784              		.syntax unified
 5785              		.thumb
 5786              		.thumb_func
 5787              		.fpu fpv5-d16
 5789              	prvDeleteTCB:
 5790              	.LFB49:
3881:./Libraries/FreeRTOS/Source/tasks.c **** 
3882:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:./Libraries/FreeRTOS/Source/tasks.c **** 
3885:./Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:./Libraries/FreeRTOS/Source/tasks.c **** 
3887:./Libraries/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5791              		.loc 1 3888 2
 5792              		.cfi_startproc
 5793              		@ args = 0, pretend = 0, frame = 16
 5794              		@ frame_needed = 1, uses_anonymous_args = 0
 5795 0000 80B5     		push	{r7, lr}
 5796              	.LCFI228:
 5797              		.cfi_def_cfa_offset 8
 5798              		.cfi_offset 7, -8
 5799              		.cfi_offset 14, -4
 5800 0002 84B0     		sub	sp, sp, #16
 5801              	.LCFI229:
 5802              		.cfi_def_cfa_offset 24
 5803 0004 00AF     		add	r7, sp, #0
 5804              	.LCFI230:
 5805              		.cfi_def_cfa_register 7
 5806 0006 7860     		str	r0, [r7, #4]
3889:./Libraries/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:./Libraries/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:./Libraries/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:./Libraries/FreeRTOS/Source/tasks.c **** 
3894:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:./Libraries/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:./Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:./Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:./Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3900:./Libraries/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
ARM GAS  /tmp/ccpNfLZa.s 			page 175


3901:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3902:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:./Libraries/FreeRTOS/Source/tasks.c **** 
3904:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3906:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:./Libraries/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:./Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:./Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3911:./Libraries/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3913:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:./Libraries/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:./Libraries/FreeRTOS/Source/tasks.c **** 			memory. */
3916:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5807              		.loc 1 3916 13
 5808 0008 7B68     		ldr	r3, [r7, #4]
 5809 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5810              		.loc 1 3916 6
 5811 000e 002B     		cmp	r3, #0
 5812 0010 08D1     		bne	.L361
3917:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3918:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:./Libraries/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:./Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5813              		.loc 1 3920 21
 5814 0012 7B68     		ldr	r3, [r7, #4]
 5815 0014 1B6B     		ldr	r3, [r3, #48]
 5816              		.loc 1 3920 5
 5817 0016 1846     		mov	r0, r3
 5818 0018 FFF7FEFF 		bl	vPortFree
3921:./Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5819              		.loc 1 3921 5
 5820 001c 7868     		ldr	r0, [r7, #4]
 5821 001e FFF7FEFF 		bl	vPortFree
3922:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3923:./Libraries/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3925:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:./Libraries/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:./Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3929:./Libraries/FreeRTOS/Source/tasks.c **** 			else
3930:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3931:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:./Libraries/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:./Libraries/FreeRTOS/Source/tasks.c **** 			}
3936:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3937:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5822              		.loc 1 3938 2
 5823 0022 18E0     		b	.L365
 5824              	.L361:
3923:./Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccpNfLZa.s 			page 176


 5825              		.loc 1 3923 18
 5826 0024 7B68     		ldr	r3, [r7, #4]
 5827 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3923:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 5828              		.loc 1 3923 11
 5829 002a 012B     		cmp	r3, #1
 5830 002c 03D1     		bne	.L363
3927:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 5831              		.loc 1 3927 5
 5832 002e 7868     		ldr	r0, [r7, #4]
 5833 0030 FFF7FEFF 		bl	vPortFree
 5834              		.loc 1 3938 2
 5835 0034 0FE0     		b	.L365
 5836              	.L363:
3933:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5837              		.loc 1 3933 5
 5838 0036 7B68     		ldr	r3, [r7, #4]
 5839 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5840 003c 022B     		cmp	r3, #2
 5841 003e 0AD0     		beq	.L365
 5842              	.LBB206:
 5843              	.LBB207:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5844              		.loc 2 195 2
 5845              		.syntax unified
 5846              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5847 0040 4FF05003 			mov r3, #80												
 5848 0044 83F31188 		msr basepri, r3											
 5849 0048 BFF36F8F 		isb														
 5850 004c BFF34F8F 		dsb														
 5851              	
 5852              	@ 0 "" 2
 5853              		.thumb
 5854              		.syntax unified
 5855 0050 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5856              		.loc 2 203 1
 5857 0052 00BF     		nop
 5858              	.L364:
 5859              	.LBE207:
 5860              	.LBE206:
3933:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5861              		.loc 1 3933 5 discriminator 1
 5862 0054 FEE7     		b	.L364
 5863              	.L365:
 5864              		.loc 1 3938 2
 5865 0056 00BF     		nop
 5866 0058 1037     		adds	r7, r7, #16
 5867              	.LCFI231:
 5868              		.cfi_def_cfa_offset 8
 5869 005a BD46     		mov	sp, r7
 5870              	.LCFI232:
 5871              		.cfi_def_cfa_register 13
 5872              		@ sp needed
 5873 005c 80BD     		pop	{r7, pc}
 5874              		.cfi_endproc
 5875              	.LFE49:
ARM GAS  /tmp/ccpNfLZa.s 			page 177


 5877              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5878              		.align	1
 5879              		.syntax unified
 5880              		.thumb
 5881              		.thumb_func
 5882              		.fpu fpv5-d16
 5884              	prvResetNextTaskUnblockTime:
 5885              	.LFB50:
3939:./Libraries/FreeRTOS/Source/tasks.c **** 
3940:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:./Libraries/FreeRTOS/Source/tasks.c **** 
3943:./Libraries/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:./Libraries/FreeRTOS/Source/tasks.c **** {
 5886              		.loc 1 3944 1
 5887              		.cfi_startproc
 5888              		@ args = 0, pretend = 0, frame = 8
 5889              		@ frame_needed = 1, uses_anonymous_args = 0
 5890              		@ link register save eliminated.
 5891 0000 80B4     		push	{r7}
 5892              	.LCFI233:
 5893              		.cfi_def_cfa_offset 4
 5894              		.cfi_offset 7, -4
 5895 0002 83B0     		sub	sp, sp, #12
 5896              	.LCFI234:
 5897              		.cfi_def_cfa_offset 16
 5898 0004 00AF     		add	r7, sp, #0
 5899              	.LCFI235:
 5900              		.cfi_def_cfa_register 7
3945:./Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:./Libraries/FreeRTOS/Source/tasks.c **** 
3947:./Libraries/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5901              		.loc 1 3947 6
 5902 0006 0C4B     		ldr	r3, .L370
 5903 0008 1B68     		ldr	r3, [r3]
 5904 000a 1B68     		ldr	r3, [r3]
 5905              		.loc 1 3947 4
 5906 000c 002B     		cmp	r3, #0
 5907 000e 04D1     		bne	.L367
3948:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3949:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:./Libraries/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:./Libraries/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:./Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5908              		.loc 1 3953 24
 5909 0010 0A4B     		ldr	r3, .L370+4
 5910 0012 4FF0FF32 		mov	r2, #-1
 5911 0016 1A60     		str	r2, [r3]
3954:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3955:./Libraries/FreeRTOS/Source/tasks.c **** 	else
3956:./Libraries/FreeRTOS/Source/tasks.c **** 	{
3957:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:./Libraries/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:./Libraries/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:./Libraries/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:./Libraries/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
ARM GAS  /tmp/ccpNfLZa.s 			page 178


3962:./Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:./Libraries/FreeRTOS/Source/tasks.c **** 	}
3964:./Libraries/FreeRTOS/Source/tasks.c **** }
 5912              		.loc 1 3964 1
 5913 0018 08E0     		b	.L369
 5914              	.L367:
3961:./Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5915              		.loc 1 3961 15
 5916 001a 074B     		ldr	r3, .L370
 5917 001c 1B68     		ldr	r3, [r3]
 5918 001e DB68     		ldr	r3, [r3, #12]
3961:./Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5919              		.loc 1 3961 13
 5920 0020 DB68     		ldr	r3, [r3, #12]
 5921 0022 7B60     		str	r3, [r7, #4]
3962:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5922              		.loc 1 3962 26
 5923 0024 7B68     		ldr	r3, [r7, #4]
 5924 0026 5B68     		ldr	r3, [r3, #4]
3962:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5925              		.loc 1 3962 24
 5926 0028 044A     		ldr	r2, .L370+4
 5927 002a 1360     		str	r3, [r2]
 5928              	.L369:
 5929              		.loc 1 3964 1
 5930 002c 00BF     		nop
 5931 002e 0C37     		adds	r7, r7, #12
 5932              	.LCFI236:
 5933              		.cfi_def_cfa_offset 4
 5934 0030 BD46     		mov	sp, r7
 5935              	.LCFI237:
 5936              		.cfi_def_cfa_register 13
 5937              		@ sp needed
 5938 0032 5DF8047B 		ldr	r7, [sp], #4
 5939              	.LCFI238:
 5940              		.cfi_restore 7
 5941              		.cfi_def_cfa_offset 0
 5942 0036 7047     		bx	lr
 5943              	.L371:
 5944              		.align	2
 5945              	.L370:
 5946 0038 00000000 		.word	pxDelayedTaskList
 5947 003c 00000000 		.word	xNextTaskUnblockTime
 5948              		.cfi_endproc
 5949              	.LFE50:
 5951              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5952              		.align	1
 5953              		.global	xTaskGetCurrentTaskHandle
 5954              		.syntax unified
 5955              		.thumb
 5956              		.thumb_func
 5957              		.fpu fpv5-d16
 5959              	xTaskGetCurrentTaskHandle:
 5960              	.LFB51:
3965:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:./Libraries/FreeRTOS/Source/tasks.c **** 
3967:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
ARM GAS  /tmp/ccpNfLZa.s 			page 179


3968:./Libraries/FreeRTOS/Source/tasks.c **** 
3969:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 5961              		.loc 1 3970 2
 5962              		.cfi_startproc
 5963              		@ args = 0, pretend = 0, frame = 8
 5964              		@ frame_needed = 1, uses_anonymous_args = 0
 5965              		@ link register save eliminated.
 5966 0000 80B4     		push	{r7}
 5967              	.LCFI239:
 5968              		.cfi_def_cfa_offset 4
 5969              		.cfi_offset 7, -4
 5970 0002 83B0     		sub	sp, sp, #12
 5971              	.LCFI240:
 5972              		.cfi_def_cfa_offset 16
 5973 0004 00AF     		add	r7, sp, #0
 5974              	.LCFI241:
 5975              		.cfi_def_cfa_register 7
3971:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:./Libraries/FreeRTOS/Source/tasks.c **** 
3973:./Libraries/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:./Libraries/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:./Libraries/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:./Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5976              		.loc 1 3976 11
 5977 0006 054B     		ldr	r3, .L374
 5978 0008 1B68     		ldr	r3, [r3]
 5979 000a 7B60     		str	r3, [r7, #4]
3977:./Libraries/FreeRTOS/Source/tasks.c **** 
3978:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5980              		.loc 1 3978 10
 5981 000c 7B68     		ldr	r3, [r7, #4]
3979:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 5982              		.loc 1 3979 2
 5983 000e 1846     		mov	r0, r3
 5984 0010 0C37     		adds	r7, r7, #12
 5985              	.LCFI242:
 5986              		.cfi_def_cfa_offset 4
 5987 0012 BD46     		mov	sp, r7
 5988              	.LCFI243:
 5989              		.cfi_def_cfa_register 13
 5990              		@ sp needed
 5991 0014 5DF8047B 		ldr	r7, [sp], #4
 5992              	.LCFI244:
 5993              		.cfi_restore 7
 5994              		.cfi_def_cfa_offset 0
 5995 0018 7047     		bx	lr
 5996              	.L375:
 5997 001a 00BF     		.align	2
 5998              	.L374:
 5999 001c 00000000 		.word	pxCurrentTCB
 6000              		.cfi_endproc
 6001              	.LFE51:
 6003              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6004              		.align	1
 6005              		.global	xTaskGetSchedulerState
 6006              		.syntax unified
ARM GAS  /tmp/ccpNfLZa.s 			page 180


 6007              		.thumb
 6008              		.thumb_func
 6009              		.fpu fpv5-d16
 6011              	xTaskGetSchedulerState:
 6012              	.LFB52:
3980:./Libraries/FreeRTOS/Source/tasks.c **** 
3981:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:./Libraries/FreeRTOS/Source/tasks.c **** 
3984:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:./Libraries/FreeRTOS/Source/tasks.c **** 
3986:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6013              		.loc 1 3987 2
 6014              		.cfi_startproc
 6015              		@ args = 0, pretend = 0, frame = 8
 6016              		@ frame_needed = 1, uses_anonymous_args = 0
 6017              		@ link register save eliminated.
 6018 0000 80B4     		push	{r7}
 6019              	.LCFI245:
 6020              		.cfi_def_cfa_offset 4
 6021              		.cfi_offset 7, -4
 6022 0002 83B0     		sub	sp, sp, #12
 6023              	.LCFI246:
 6024              		.cfi_def_cfa_offset 16
 6025 0004 00AF     		add	r7, sp, #0
 6026              	.LCFI247:
 6027              		.cfi_def_cfa_register 7
3988:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:./Libraries/FreeRTOS/Source/tasks.c **** 
3990:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6028              		.loc 1 3990 25
 6029 0006 0B4B     		ldr	r3, .L381
 6030 0008 1B68     		ldr	r3, [r3]
 6031              		.loc 1 3990 5
 6032 000a 002B     		cmp	r3, #0
 6033 000c 02D1     		bne	.L377
3991:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3992:./Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6034              		.loc 1 3992 12
 6035 000e 0123     		movs	r3, #1
 6036 0010 7B60     		str	r3, [r7, #4]
 6037 0012 08E0     		b	.L378
 6038              	.L377:
3993:./Libraries/FreeRTOS/Source/tasks.c **** 		}
3994:./Libraries/FreeRTOS/Source/tasks.c **** 		else
3995:./Libraries/FreeRTOS/Source/tasks.c **** 		{
3996:./Libraries/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6039              		.loc 1 3996 29
 6040 0014 084B     		ldr	r3, .L381+4
 6041 0016 1B68     		ldr	r3, [r3]
 6042              		.loc 1 3996 6
 6043 0018 002B     		cmp	r3, #0
 6044 001a 02D1     		bne	.L379
3997:./Libraries/FreeRTOS/Source/tasks.c **** 			{
3998:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6045              		.loc 1 3998 13
ARM GAS  /tmp/ccpNfLZa.s 			page 181


 6046 001c 0223     		movs	r3, #2
 6047 001e 7B60     		str	r3, [r7, #4]
 6048 0020 01E0     		b	.L378
 6049              	.L379:
3999:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4000:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4001:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4002:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6050              		.loc 1 4002 13
 6051 0022 0023     		movs	r3, #0
 6052 0024 7B60     		str	r3, [r7, #4]
 6053              	.L378:
4003:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4004:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4005:./Libraries/FreeRTOS/Source/tasks.c **** 
4006:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6054              		.loc 1 4006 10
 6055 0026 7B68     		ldr	r3, [r7, #4]
4007:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6056              		.loc 1 4007 2
 6057 0028 1846     		mov	r0, r3
 6058 002a 0C37     		adds	r7, r7, #12
 6059              	.LCFI248:
 6060              		.cfi_def_cfa_offset 4
 6061 002c BD46     		mov	sp, r7
 6062              	.LCFI249:
 6063              		.cfi_def_cfa_register 13
 6064              		@ sp needed
 6065 002e 5DF8047B 		ldr	r7, [sp], #4
 6066              	.LCFI250:
 6067              		.cfi_restore 7
 6068              		.cfi_def_cfa_offset 0
 6069 0032 7047     		bx	lr
 6070              	.L382:
 6071              		.align	2
 6072              	.L381:
 6073 0034 00000000 		.word	xSchedulerRunning
 6074 0038 00000000 		.word	uxSchedulerSuspended
 6075              		.cfi_endproc
 6076              	.LFE52:
 6078              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6079              		.align	1
 6080              		.global	xTaskPriorityInherit
 6081              		.syntax unified
 6082              		.thumb
 6083              		.thumb_func
 6084              		.fpu fpv5-d16
 6086              	xTaskPriorityInherit:
 6087              	.LFB53:
4008:./Libraries/FreeRTOS/Source/tasks.c **** 
4009:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:./Libraries/FreeRTOS/Source/tasks.c **** 
4012:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:./Libraries/FreeRTOS/Source/tasks.c **** 
4014:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:./Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccpNfLZa.s 			page 182


 6088              		.loc 1 4015 2
 6089              		.cfi_startproc
 6090              		@ args = 0, pretend = 0, frame = 16
 6091              		@ frame_needed = 1, uses_anonymous_args = 0
 6092 0000 80B5     		push	{r7, lr}
 6093              	.LCFI251:
 6094              		.cfi_def_cfa_offset 8
 6095              		.cfi_offset 7, -8
 6096              		.cfi_offset 14, -4
 6097 0002 84B0     		sub	sp, sp, #16
 6098              	.LCFI252:
 6099              		.cfi_def_cfa_offset 24
 6100 0004 00AF     		add	r7, sp, #0
 6101              	.LCFI253:
 6102              		.cfi_def_cfa_register 7
 6103 0006 7860     		str	r0, [r7, #4]
4016:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6104              		.loc 1 4016 16
 6105 0008 7B68     		ldr	r3, [r7, #4]
 6106 000a BB60     		str	r3, [r7, #8]
4017:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6107              		.loc 1 4017 13
 6108 000c 0023     		movs	r3, #0
 6109 000e FB60     		str	r3, [r7, #12]
4018:./Libraries/FreeRTOS/Source/tasks.c **** 
4019:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:./Libraries/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:./Libraries/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6110              		.loc 1 4022 5
 6111 0010 7B68     		ldr	r3, [r7, #4]
 6112 0012 002B     		cmp	r3, #0
 6113 0014 51D0     		beq	.L384
4023:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4024:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:./Libraries/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:./Libraries/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6114              		.loc 1 4027 24
 6115 0016 BB68     		ldr	r3, [r7, #8]
 6116 0018 DA6A     		ldr	r2, [r3, #44]
 6117              		.loc 1 4027 51
 6118 001a 2A4B     		ldr	r3, .L391
 6119 001c 1B68     		ldr	r3, [r3]
 6120 001e DB6A     		ldr	r3, [r3, #44]
 6121              		.loc 1 4027 6
 6122 0020 9A42     		cmp	r2, r3
 6123 0022 41D2     		bcs	.L385
4028:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4029:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:./Libraries/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:./Libraries/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:./Libraries/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6124              		.loc 1 4032 11
 6125 0024 BB68     		ldr	r3, [r7, #8]
 6126 0026 9B69     		ldr	r3, [r3, #24]
 6127              		.loc 1 4032 7
ARM GAS  /tmp/ccpNfLZa.s 			page 183


 6128 0028 002B     		cmp	r3, #0
 6129 002a 06DB     		blt	.L386
4033:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4034:./Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6130              		.loc 1 4034 6
 6131 002c 254B     		ldr	r3, .L391
 6132 002e 1B68     		ldr	r3, [r3]
 6133 0030 DB6A     		ldr	r3, [r3, #44]
 6134 0032 C3F13802 		rsb	r2, r3, #56
 6135 0036 BB68     		ldr	r3, [r7, #8]
 6136 0038 9A61     		str	r2, [r3, #24]
 6137              	.L386:
4035:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4036:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4037:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4038:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4040:./Libraries/FreeRTOS/Source/tasks.c **** 
4041:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:./Libraries/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:./Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6138              		.loc 1 4043 9
 6139 003a BB68     		ldr	r3, [r7, #8]
 6140 003c 5969     		ldr	r1, [r3, #20]
 6141 003e BB68     		ldr	r3, [r7, #8]
 6142 0040 DA6A     		ldr	r2, [r3, #44]
 6143 0042 1346     		mov	r3, r2
 6144 0044 9B00     		lsls	r3, r3, #2
 6145 0046 1344     		add	r3, r3, r2
 6146 0048 9B00     		lsls	r3, r3, #2
 6147 004a 1F4A     		ldr	r2, .L391+4
 6148 004c 1344     		add	r3, r3, r2
 6149              		.loc 1 4043 7
 6150 004e 9942     		cmp	r1, r3
 6151 0050 22D1     		bne	.L387
4044:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4045:./Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6152              		.loc 1 4045 10
 6153 0052 BB68     		ldr	r3, [r7, #8]
 6154 0054 0433     		adds	r3, r3, #4
 6155 0056 1846     		mov	r0, r3
 6156 0058 FFF7FEFF 		bl	uxListRemove
4046:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4047:./Libraries/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:./Libraries/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:./Libraries/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:./Libraries/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4052:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4053:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4054:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4056:./Libraries/FreeRTOS/Source/tasks.c **** 
4057:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:./Libraries/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6157              		.loc 1 4058 49
 6158 005c 194B     		ldr	r3, .L391
ARM GAS  /tmp/ccpNfLZa.s 			page 184


 6159 005e 1B68     		ldr	r3, [r3]
 6160 0060 DA6A     		ldr	r2, [r3, #44]
 6161              		.loc 1 4058 35
 6162 0062 BB68     		ldr	r3, [r7, #8]
 6163 0064 DA62     		str	r2, [r3, #44]
4059:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6164              		.loc 1 4059 6
 6165 0066 BB68     		ldr	r3, [r7, #8]
 6166 0068 DA6A     		ldr	r2, [r3, #44]
 6167 006a 184B     		ldr	r3, .L391+8
 6168 006c 1B68     		ldr	r3, [r3]
 6169 006e 9A42     		cmp	r2, r3
 6170 0070 03D9     		bls	.L388
 6171              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6172 0072 BB68     		ldr	r3, [r7, #8]
 6173 0074 DB6A     		ldr	r3, [r3, #44]
 6174 0076 154A     		ldr	r2, .L391+8
 6175 0078 1360     		str	r3, [r2]
 6176              	.L388:
 6177              		.loc 1 4059 6 discriminator 3
 6178 007a BB68     		ldr	r3, [r7, #8]
 6179 007c DA6A     		ldr	r2, [r3, #44]
 6180 007e 1346     		mov	r3, r2
 6181 0080 9B00     		lsls	r3, r3, #2
 6182 0082 1344     		add	r3, r3, r2
 6183 0084 9B00     		lsls	r3, r3, #2
 6184 0086 104A     		ldr	r2, .L391+4
 6185 0088 1A44     		add	r2, r2, r3
 6186 008a BB68     		ldr	r3, [r7, #8]
 6187 008c 0433     		adds	r3, r3, #4
 6188 008e 1946     		mov	r1, r3
 6189 0090 1046     		mov	r0, r2
 6190 0092 FFF7FEFF 		bl	vListInsertEnd
 6191 0096 04E0     		b	.L389
 6192              	.L387:
4060:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4061:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4062:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4063:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:./Libraries/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6193              		.loc 1 4064 49 is_stmt 1
 6194 0098 0A4B     		ldr	r3, .L391
 6195 009a 1B68     		ldr	r3, [r3]
 6196 009c DA6A     		ldr	r2, [r3, #44]
 6197              		.loc 1 4064 35
 6198 009e BB68     		ldr	r3, [r7, #8]
 6199 00a0 DA62     		str	r2, [r3, #44]
 6200              	.L389:
4065:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4066:./Libraries/FreeRTOS/Source/tasks.c **** 
4067:./Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:./Libraries/FreeRTOS/Source/tasks.c **** 
4069:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6201              		.loc 1 4070 13
 6202 00a2 0123     		movs	r3, #1
 6203 00a4 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccpNfLZa.s 			page 185


 6204 00a6 08E0     		b	.L384
 6205              	.L385:
4071:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4072:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4073:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4074:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6206              		.loc 1 4074 25
 6207 00a8 BB68     		ldr	r3, [r7, #8]
 6208 00aa DA6C     		ldr	r2, [r3, #76]
 6209              		.loc 1 4074 56
 6210 00ac 054B     		ldr	r3, .L391
 6211 00ae 1B68     		ldr	r3, [r3]
 6212 00b0 DB6A     		ldr	r3, [r3, #44]
 6213              		.loc 1 4074 7
 6214 00b2 9A42     		cmp	r2, r3
 6215 00b4 01D2     		bcs	.L384
4075:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4076:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:./Libraries/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:./Libraries/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:./Libraries/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:./Libraries/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:./Libraries/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:./Libraries/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:./Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6216              		.loc 1 4083 14
 6217 00b6 0123     		movs	r3, #1
 6218 00b8 FB60     		str	r3, [r7, #12]
 6219              	.L384:
4084:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4085:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4086:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4087:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4089:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4090:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4091:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4092:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4093:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4095:./Libraries/FreeRTOS/Source/tasks.c **** 
4096:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6220              		.loc 1 4096 10
 6221 00ba FB68     		ldr	r3, [r7, #12]
4097:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6222              		.loc 1 4097 2
 6223 00bc 1846     		mov	r0, r3
 6224 00be 1037     		adds	r7, r7, #16
 6225              	.LCFI254:
 6226              		.cfi_def_cfa_offset 8
 6227 00c0 BD46     		mov	sp, r7
 6228              	.LCFI255:
 6229              		.cfi_def_cfa_register 13
 6230              		@ sp needed
 6231 00c2 80BD     		pop	{r7, pc}
 6232              	.L392:
 6233              		.align	2
ARM GAS  /tmp/ccpNfLZa.s 			page 186


 6234              	.L391:
 6235 00c4 00000000 		.word	pxCurrentTCB
 6236 00c8 00000000 		.word	pxReadyTasksLists
 6237 00cc 00000000 		.word	uxTopReadyPriority
 6238              		.cfi_endproc
 6239              	.LFE53:
 6241              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6242              		.align	1
 6243              		.global	xTaskPriorityDisinherit
 6244              		.syntax unified
 6245              		.thumb
 6246              		.thumb_func
 6247              		.fpu fpv5-d16
 6249              	xTaskPriorityDisinherit:
 6250              	.LFB54:
4098:./Libraries/FreeRTOS/Source/tasks.c **** 
4099:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:./Libraries/FreeRTOS/Source/tasks.c **** 
4102:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:./Libraries/FreeRTOS/Source/tasks.c **** 
4104:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6251              		.loc 1 4105 2
 6252              		.cfi_startproc
 6253              		@ args = 0, pretend = 0, frame = 24
 6254              		@ frame_needed = 1, uses_anonymous_args = 0
 6255 0000 80B5     		push	{r7, lr}
 6256              	.LCFI256:
 6257              		.cfi_def_cfa_offset 8
 6258              		.cfi_offset 7, -8
 6259              		.cfi_offset 14, -4
 6260 0002 86B0     		sub	sp, sp, #24
 6261              	.LCFI257:
 6262              		.cfi_def_cfa_offset 32
 6263 0004 00AF     		add	r7, sp, #0
 6264              	.LCFI258:
 6265              		.cfi_def_cfa_register 7
 6266 0006 7860     		str	r0, [r7, #4]
4106:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6267              		.loc 1 4106 16
 6268 0008 7B68     		ldr	r3, [r7, #4]
 6269 000a 3B61     		str	r3, [r7, #16]
4107:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6270              		.loc 1 4107 13
 6271 000c 0023     		movs	r3, #0
 6272 000e 7B61     		str	r3, [r7, #20]
4108:./Libraries/FreeRTOS/Source/tasks.c **** 
4109:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6273              		.loc 1 4109 5
 6274 0010 7B68     		ldr	r3, [r7, #4]
 6275 0012 002B     		cmp	r3, #0
 6276 0014 56D0     		beq	.L394
4110:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4111:./Libraries/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:./Libraries/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:./Libraries/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
ARM GAS  /tmp/ccpNfLZa.s 			page 187


4114:./Libraries/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6277              		.loc 1 4115 4
 6278 0016 2E4B     		ldr	r3, .L401
 6279 0018 1B68     		ldr	r3, [r3]
 6280 001a 3A69     		ldr	r2, [r7, #16]
 6281 001c 9A42     		cmp	r2, r3
 6282 001e 0AD0     		beq	.L395
 6283              	.LBB208:
 6284              	.LBB209:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6285              		.loc 2 195 2
 6286              		.syntax unified
 6287              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6288 0020 4FF05003 			mov r3, #80												
 6289 0024 83F31188 		msr basepri, r3											
 6290 0028 BFF36F8F 		isb														
 6291 002c BFF34F8F 		dsb														
 6292              	
 6293              	@ 0 "" 2
 6294              		.thumb
 6295              		.syntax unified
 6296 0030 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6297              		.loc 2 203 1
 6298 0032 00BF     		nop
 6299              	.L396:
 6300              	.LBE209:
 6301              	.LBE208:
 6302              		.loc 1 4115 4 discriminator 1
 6303 0034 FEE7     		b	.L396
 6304              	.L395:
4116:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6305              		.loc 1 4116 4
 6306 0036 3B69     		ldr	r3, [r7, #16]
 6307 0038 1B6D     		ldr	r3, [r3, #80]
 6308 003a 002B     		cmp	r3, #0
 6309 003c 0AD1     		bne	.L397
 6310              	.LBB210:
 6311              	.LBB211:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6312              		.loc 2 195 2
 6313              		.syntax unified
 6314              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6315 003e 4FF05003 			mov r3, #80												
 6316 0042 83F31188 		msr basepri, r3											
 6317 0046 BFF36F8F 		isb														
 6318 004a BFF34F8F 		dsb														
 6319              	
 6320              	@ 0 "" 2
 6321              		.thumb
 6322              		.syntax unified
 6323 004e BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6324              		.loc 2 203 1
 6325 0050 00BF     		nop
 6326              	.L398:
ARM GAS  /tmp/ccpNfLZa.s 			page 188


 6327              	.LBE211:
 6328              	.LBE210:
 6329              		.loc 1 4116 4 discriminator 2
 6330 0052 FEE7     		b	.L398
 6331              	.L397:
4117:./Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6332              		.loc 1 4117 11
 6333 0054 3B69     		ldr	r3, [r7, #16]
 6334 0056 1B6D     		ldr	r3, [r3, #80]
 6335              		.loc 1 4117 28
 6336 0058 5A1E     		subs	r2, r3, #1
 6337 005a 3B69     		ldr	r3, [r7, #16]
 6338 005c 1A65     		str	r2, [r3, #80]
4118:./Libraries/FreeRTOS/Source/tasks.c **** 
4119:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:./Libraries/FreeRTOS/Source/tasks.c **** 			task? */
4121:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6339              		.loc 1 4121 13
 6340 005e 3B69     		ldr	r3, [r7, #16]
 6341 0060 DA6A     		ldr	r2, [r3, #44]
 6342              		.loc 1 4121 34
 6343 0062 3B69     		ldr	r3, [r7, #16]
 6344 0064 DB6C     		ldr	r3, [r3, #76]
 6345              		.loc 1 4121 6
 6346 0066 9A42     		cmp	r2, r3
 6347 0068 2CD0     		beq	.L394
4122:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4123:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6348              		.loc 1 4124 14
 6349 006a 3B69     		ldr	r3, [r7, #16]
 6350 006c 1B6D     		ldr	r3, [r3, #80]
 6351              		.loc 1 4124 7
 6352 006e 002B     		cmp	r3, #0
 6353 0070 28D1     		bne	.L394
4125:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4126:./Libraries/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:./Libraries/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:./Libraries/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:./Libraries/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:./Libraries/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:./Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6354              		.loc 1 4131 10
 6355 0072 3B69     		ldr	r3, [r7, #16]
 6356 0074 0433     		adds	r3, r3, #4
 6357 0076 1846     		mov	r0, r3
 6358 0078 FFF7FEFF 		bl	uxListRemove
4132:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4133:./Libraries/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4135:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4136:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4137:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4139:./Libraries/FreeRTOS/Source/tasks.c **** 
4140:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:./Libraries/FreeRTOS/Source/tasks.c **** 					new	ready list. */
ARM GAS  /tmp/ccpNfLZa.s 			page 189


4142:./Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6359              		.loc 1 4143 31
 6360 007c 3B69     		ldr	r3, [r7, #16]
 6361 007e DA6C     		ldr	r2, [r3, #76]
 6362              		.loc 1 4143 24
 6363 0080 3B69     		ldr	r3, [r7, #16]
 6364 0082 DA62     		str	r2, [r3, #44]
4144:./Libraries/FreeRTOS/Source/tasks.c **** 
4145:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:./Libraries/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:./Libraries/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:./Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6365              		.loc 1 4148 6
 6366 0084 3B69     		ldr	r3, [r7, #16]
 6367 0086 DB6A     		ldr	r3, [r3, #44]
 6368 0088 C3F13802 		rsb	r2, r3, #56
 6369 008c 3B69     		ldr	r3, [r7, #16]
 6370 008e 9A61     		str	r2, [r3, #24]
4149:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6371              		.loc 1 4149 6
 6372 0090 3B69     		ldr	r3, [r7, #16]
 6373 0092 DA6A     		ldr	r2, [r3, #44]
 6374 0094 0F4B     		ldr	r3, .L401+4
 6375 0096 1B68     		ldr	r3, [r3]
 6376 0098 9A42     		cmp	r2, r3
 6377 009a 03D9     		bls	.L399
 6378              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6379 009c 3B69     		ldr	r3, [r7, #16]
 6380 009e DB6A     		ldr	r3, [r3, #44]
 6381 00a0 0C4A     		ldr	r2, .L401+4
 6382 00a2 1360     		str	r3, [r2]
 6383              	.L399:
 6384              		.loc 1 4149 6 discriminator 3
 6385 00a4 3B69     		ldr	r3, [r7, #16]
 6386 00a6 DA6A     		ldr	r2, [r3, #44]
 6387 00a8 1346     		mov	r3, r2
 6388 00aa 9B00     		lsls	r3, r3, #2
 6389 00ac 1344     		add	r3, r3, r2
 6390 00ae 9B00     		lsls	r3, r3, #2
 6391 00b0 094A     		ldr	r2, .L401+8
 6392 00b2 1A44     		add	r2, r2, r3
 6393 00b4 3B69     		ldr	r3, [r7, #16]
 6394 00b6 0433     		adds	r3, r3, #4
 6395 00b8 1946     		mov	r1, r3
 6396 00ba 1046     		mov	r0, r2
 6397 00bc FFF7FEFF 		bl	vListInsertEnd
4150:./Libraries/FreeRTOS/Source/tasks.c **** 
4151:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:./Libraries/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:./Libraries/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:./Libraries/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:./Libraries/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:./Libraries/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:./Libraries/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:./Libraries/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:./Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  /tmp/ccpNfLZa.s 			page 190


 6398              		.loc 1 4159 14 is_stmt 1 discriminator 3
 6399 00c0 0123     		movs	r3, #1
 6400 00c2 7B61     		str	r3, [r7, #20]
 6401              	.L394:
4160:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4161:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4162:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4163:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4165:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4166:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4167:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4168:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4170:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4171:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4172:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4173:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4175:./Libraries/FreeRTOS/Source/tasks.c **** 
4176:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6402              		.loc 1 4176 10
 6403 00c4 7B69     		ldr	r3, [r7, #20]
4177:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6404              		.loc 1 4177 2
 6405 00c6 1846     		mov	r0, r3
 6406 00c8 1837     		adds	r7, r7, #24
 6407              	.LCFI259:
 6408              		.cfi_def_cfa_offset 8
 6409 00ca BD46     		mov	sp, r7
 6410              	.LCFI260:
 6411              		.cfi_def_cfa_register 13
 6412              		@ sp needed
 6413 00cc 80BD     		pop	{r7, pc}
 6414              	.L402:
 6415 00ce 00BF     		.align	2
 6416              	.L401:
 6417 00d0 00000000 		.word	pxCurrentTCB
 6418 00d4 00000000 		.word	uxTopReadyPriority
 6419 00d8 00000000 		.word	pxReadyTasksLists
 6420              		.cfi_endproc
 6421              	.LFE54:
 6423              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6424              		.align	1
 6425              		.global	vTaskPriorityDisinheritAfterTimeout
 6426              		.syntax unified
 6427              		.thumb
 6428              		.thumb_func
 6429              		.fpu fpv5-d16
 6431              	vTaskPriorityDisinheritAfterTimeout:
 6432              	.LFB55:
4178:./Libraries/FreeRTOS/Source/tasks.c **** 
4179:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:./Libraries/FreeRTOS/Source/tasks.c **** 
4182:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 191


4184:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6433              		.loc 1 4185 2
 6434              		.cfi_startproc
 6435              		@ args = 0, pretend = 0, frame = 32
 6436              		@ frame_needed = 1, uses_anonymous_args = 0
 6437 0000 80B5     		push	{r7, lr}
 6438              	.LCFI261:
 6439              		.cfi_def_cfa_offset 8
 6440              		.cfi_offset 7, -8
 6441              		.cfi_offset 14, -4
 6442 0002 88B0     		sub	sp, sp, #32
 6443              	.LCFI262:
 6444              		.cfi_def_cfa_offset 40
 6445 0004 00AF     		add	r7, sp, #0
 6446              	.LCFI263:
 6447              		.cfi_def_cfa_register 7
 6448 0006 7860     		str	r0, [r7, #4]
 6449 0008 3960     		str	r1, [r7]
4186:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6450              		.loc 1 4186 16
 6451 000a 7B68     		ldr	r3, [r7, #4]
 6452 000c BB61     		str	r3, [r7, #24]
4187:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:./Libraries/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6453              		.loc 1 4188 20
 6454 000e 0123     		movs	r3, #1
 6455 0010 7B61     		str	r3, [r7, #20]
4189:./Libraries/FreeRTOS/Source/tasks.c **** 
4190:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6456              		.loc 1 4190 5
 6457 0012 7B68     		ldr	r3, [r7, #4]
 6458 0014 002B     		cmp	r3, #0
 6459 0016 6AD0     		beq	.L413
4191:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4192:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:./Libraries/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:./Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6460              		.loc 1 4194 4
 6461 0018 BB69     		ldr	r3, [r7, #24]
 6462 001a 1B6D     		ldr	r3, [r3, #80]
 6463 001c 002B     		cmp	r3, #0
 6464 001e 0AD1     		bne	.L405
 6465              	.LBB212:
 6466              	.LBB213:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6467              		.loc 2 195 2
 6468              		.syntax unified
 6469              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6470 0020 4FF05003 			mov r3, #80												
 6471 0024 83F31188 		msr basepri, r3											
 6472 0028 BFF36F8F 		isb														
 6473 002c BFF34F8F 		dsb														
 6474              	
 6475              	@ 0 "" 2
 6476              		.thumb
 6477              		.syntax unified
ARM GAS  /tmp/ccpNfLZa.s 			page 192


 6478 0030 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6479              		.loc 2 203 1
 6480 0032 00BF     		nop
 6481              	.L406:
 6482              	.LBE213:
 6483              	.LBE212:
 6484              		.loc 1 4194 4 discriminator 1
 6485 0034 FEE7     		b	.L406
 6486              	.L405:
4195:./Libraries/FreeRTOS/Source/tasks.c **** 
4196:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:./Libraries/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:./Libraries/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:./Libraries/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6487              		.loc 1 4200 13
 6488 0036 BB69     		ldr	r3, [r7, #24]
 6489 0038 DB6C     		ldr	r3, [r3, #76]
 6490              		.loc 1 4200 6
 6491 003a 3A68     		ldr	r2, [r7]
 6492 003c 9A42     		cmp	r2, r3
 6493 003e 02D9     		bls	.L407
4201:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4202:./Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6494              		.loc 1 4202 21
 6495 0040 3B68     		ldr	r3, [r7]
 6496 0042 FB61     		str	r3, [r7, #28]
 6497 0044 02E0     		b	.L408
 6498              	.L407:
4203:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4204:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4205:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4206:./Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6499              		.loc 1 4206 21
 6500 0046 BB69     		ldr	r3, [r7, #24]
 6501 0048 DB6C     		ldr	r3, [r3, #76]
 6502 004a FB61     		str	r3, [r7, #28]
 6503              	.L408:
4207:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4208:./Libraries/FreeRTOS/Source/tasks.c **** 
4209:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6504              		.loc 1 4210 13
 6505 004c BB69     		ldr	r3, [r7, #24]
 6506 004e DB6A     		ldr	r3, [r3, #44]
 6507              		.loc 1 4210 6
 6508 0050 FA69     		ldr	r2, [r7, #28]
 6509 0052 9A42     		cmp	r2, r3
 6510 0054 4BD0     		beq	.L413
4211:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4212:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:./Libraries/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:./Libraries/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:./Libraries/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6511              		.loc 1 4216 14
ARM GAS  /tmp/ccpNfLZa.s 			page 193


 6512 0056 BB69     		ldr	r3, [r7, #24]
 6513 0058 1B6D     		ldr	r3, [r3, #80]
 6514              		.loc 1 4216 7
 6515 005a 7A69     		ldr	r2, [r7, #20]
 6516 005c 9A42     		cmp	r2, r3
 6517 005e 46D1     		bne	.L413
4217:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4218:./Libraries/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:./Libraries/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:./Libraries/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:./Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6518              		.loc 1 4221 6
 6519 0060 254B     		ldr	r3, .L414
 6520 0062 1B68     		ldr	r3, [r3]
 6521 0064 BA69     		ldr	r2, [r7, #24]
 6522 0066 9A42     		cmp	r2, r3
 6523 0068 0AD1     		bne	.L409
 6524              	.LBB214:
 6525              	.LBB215:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6526              		.loc 2 195 2
 6527              		.syntax unified
 6528              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6529 006a 4FF05003 			mov r3, #80												
 6530 006e 83F31188 		msr basepri, r3											
 6531 0072 BFF36F8F 		isb														
 6532 0076 BFF34F8F 		dsb														
 6533              	
 6534              	@ 0 "" 2
 6535              		.thumb
 6536              		.syntax unified
 6537 007a BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6538              		.loc 2 203 1
 6539 007c 00BF     		nop
 6540              	.L410:
 6541              	.LBE215:
 6542              	.LBE214:
 6543              		.loc 1 4221 6 discriminator 2
 6544 007e FEE7     		b	.L410
 6545              	.L409:
4222:./Libraries/FreeRTOS/Source/tasks.c **** 
4223:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:./Libraries/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:./Libraries/FreeRTOS/Source/tasks.c **** 					state. */
4226:./Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:./Libraries/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6546              		.loc 1 4227 28
 6547 0080 BB69     		ldr	r3, [r7, #24]
 6548 0082 DB6A     		ldr	r3, [r3, #44]
 6549 0084 3B61     		str	r3, [r7, #16]
4228:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6550              		.loc 1 4228 24
 6551 0086 BB69     		ldr	r3, [r7, #24]
 6552 0088 FA69     		ldr	r2, [r7, #28]
 6553 008a DA62     		str	r2, [r3, #44]
4229:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 194


4230:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:./Libraries/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:./Libraries/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6554              		.loc 1 4232 12
 6555 008c BB69     		ldr	r3, [r7, #24]
 6556 008e 9B69     		ldr	r3, [r3, #24]
 6557              		.loc 1 4232 8
 6558 0090 002B     		cmp	r3, #0
 6559 0092 04DB     		blt	.L411
4233:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4234:./Libraries/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6560              		.loc 1 4234 7
 6561 0094 FB69     		ldr	r3, [r7, #28]
 6562 0096 C3F13802 		rsb	r2, r3, #56
 6563 009a BB69     		ldr	r3, [r7, #24]
 6564 009c 9A61     		str	r2, [r3, #24]
 6565              	.L411:
4235:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4236:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4237:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4238:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4240:./Libraries/FreeRTOS/Source/tasks.c **** 
4241:./Libraries/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:./Libraries/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:./Libraries/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:./Libraries/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:./Libraries/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:./Libraries/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:./Libraries/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6566              		.loc 1 4247 10
 6567 009e BB69     		ldr	r3, [r7, #24]
 6568 00a0 5969     		ldr	r1, [r3, #20]
 6569 00a2 3A69     		ldr	r2, [r7, #16]
 6570 00a4 1346     		mov	r3, r2
 6571 00a6 9B00     		lsls	r3, r3, #2
 6572 00a8 1344     		add	r3, r3, r2
 6573 00aa 9B00     		lsls	r3, r3, #2
 6574 00ac 134A     		ldr	r2, .L414+4
 6575 00ae 1344     		add	r3, r3, r2
 6576              		.loc 1 4247 8
 6577 00b0 9942     		cmp	r1, r3
 6578 00b2 1CD1     		bne	.L413
4248:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4249:./Libraries/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6579              		.loc 1 4249 11
 6580 00b4 BB69     		ldr	r3, [r7, #24]
 6581 00b6 0433     		adds	r3, r3, #4
 6582 00b8 1846     		mov	r0, r3
 6583 00ba FFF7FEFF 		bl	uxListRemove
4250:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4251:./Libraries/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:./Libraries/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:./Libraries/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:./Libraries/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4256:./Libraries/FreeRTOS/Source/tasks.c **** 						else
ARM GAS  /tmp/ccpNfLZa.s 			page 195


4257:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4258:./Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4260:./Libraries/FreeRTOS/Source/tasks.c **** 
4261:./Libraries/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6584              		.loc 1 4261 7
 6585 00be BB69     		ldr	r3, [r7, #24]
 6586 00c0 DA6A     		ldr	r2, [r3, #44]
 6587 00c2 0F4B     		ldr	r3, .L414+8
 6588 00c4 1B68     		ldr	r3, [r3]
 6589 00c6 9A42     		cmp	r2, r3
 6590 00c8 03D9     		bls	.L412
 6591              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6592 00ca BB69     		ldr	r3, [r7, #24]
 6593 00cc DB6A     		ldr	r3, [r3, #44]
 6594 00ce 0C4A     		ldr	r2, .L414+8
 6595 00d0 1360     		str	r3, [r2]
 6596              	.L412:
 6597              		.loc 1 4261 7 discriminator 3
 6598 00d2 BB69     		ldr	r3, [r7, #24]
 6599 00d4 DA6A     		ldr	r2, [r3, #44]
 6600 00d6 1346     		mov	r3, r2
 6601 00d8 9B00     		lsls	r3, r3, #2
 6602 00da 1344     		add	r3, r3, r2
 6603 00dc 9B00     		lsls	r3, r3, #2
 6604 00de 074A     		ldr	r2, .L414+4
 6605 00e0 1A44     		add	r2, r2, r3
 6606 00e2 BB69     		ldr	r3, [r7, #24]
 6607 00e4 0433     		adds	r3, r3, #4
 6608 00e6 1946     		mov	r1, r3
 6609 00e8 1046     		mov	r0, r2
 6610 00ea FFF7FEFF 		bl	vListInsertEnd
 6611              	.L413:
4262:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4263:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4264:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4265:./Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4267:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4268:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4269:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4270:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4272:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4273:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4274:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4275:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4277:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4278:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4279:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4280:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4282:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6612              		.loc 1 4282 2 is_stmt 1
 6613 00ee 00BF     		nop
 6614 00f0 2037     		adds	r7, r7, #32
ARM GAS  /tmp/ccpNfLZa.s 			page 196


 6615              	.LCFI264:
 6616              		.cfi_def_cfa_offset 8
 6617 00f2 BD46     		mov	sp, r7
 6618              	.LCFI265:
 6619              		.cfi_def_cfa_register 13
 6620              		@ sp needed
 6621 00f4 80BD     		pop	{r7, pc}
 6622              	.L415:
 6623 00f6 00BF     		.align	2
 6624              	.L414:
 6625 00f8 00000000 		.word	pxCurrentTCB
 6626 00fc 00000000 		.word	pxReadyTasksLists
 6627 0100 00000000 		.word	uxTopReadyPriority
 6628              		.cfi_endproc
 6629              	.LFE55:
 6631              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6632              		.align	1
 6633              		.global	uxTaskResetEventItemValue
 6634              		.syntax unified
 6635              		.thumb
 6636              		.thumb_func
 6637              		.fpu fpv5-d16
 6639              	uxTaskResetEventItemValue:
 6640              	.LFB56:
4283:./Libraries/FreeRTOS/Source/tasks.c **** 
4284:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:./Libraries/FreeRTOS/Source/tasks.c **** 
4287:./Libraries/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:./Libraries/FreeRTOS/Source/tasks.c **** 
4289:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:./Libraries/FreeRTOS/Source/tasks.c **** 	{
4291:./Libraries/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:./Libraries/FreeRTOS/Source/tasks.c **** 
4293:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4295:./Libraries/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:./Libraries/FreeRTOS/Source/tasks.c **** 
4297:./Libraries/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:./Libraries/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:./Libraries/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:./Libraries/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:./Libraries/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:./Libraries/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4305:./Libraries/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4307:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4308:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4309:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4310:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4312:./Libraries/FreeRTOS/Source/tasks.c **** 	}
4313:./Libraries/FreeRTOS/Source/tasks.c **** 
4314:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccpNfLZa.s 			page 197


4316:./Libraries/FreeRTOS/Source/tasks.c **** 
4317:./Libraries/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:./Libraries/FreeRTOS/Source/tasks.c **** 
4319:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:./Libraries/FreeRTOS/Source/tasks.c **** 	{
4321:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4323:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4325:./Libraries/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:./Libraries/FreeRTOS/Source/tasks.c **** 
4327:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4329:./Libraries/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4331:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4332:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4333:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4335:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4336:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4337:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4338:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4340:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4341:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4342:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4343:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4345:./Libraries/FreeRTOS/Source/tasks.c **** 	}
4346:./Libraries/FreeRTOS/Source/tasks.c **** 
4347:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:./Libraries/FreeRTOS/Source/tasks.c **** 
4350:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:./Libraries/FreeRTOS/Source/tasks.c **** 
4352:./Libraries/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:./Libraries/FreeRTOS/Source/tasks.c **** 	{
4354:./Libraries/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:./Libraries/FreeRTOS/Source/tasks.c **** 
4356:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:./Libraries/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:./Libraries/FreeRTOS/Source/tasks.c **** 
4359:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:./Libraries/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:./Libraries/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4363:./Libraries/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4365:./Libraries/FreeRTOS/Source/tasks.c **** 
4366:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:./Libraries/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:./Libraries/FreeRTOS/Source/tasks.c **** 
4369:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:./Libraries/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:./Libraries/FreeRTOS/Source/tasks.c **** 	}
4372:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 198


4373:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:./Libraries/FreeRTOS/Source/tasks.c **** 
4376:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:./Libraries/FreeRTOS/Source/tasks.c **** 
4378:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:./Libraries/FreeRTOS/Source/tasks.c **** 	{
4380:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:./Libraries/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:./Libraries/FreeRTOS/Source/tasks.c **** 
4384:./Libraries/FreeRTOS/Source/tasks.c **** 		/*
4385:./Libraries/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4387:./Libraries/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:./Libraries/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:./Libraries/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4391:./Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:./Libraries/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:./Libraries/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4395:./Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:./Libraries/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:./Libraries/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:./Libraries/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:./Libraries/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:./Libraries/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:./Libraries/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4403:./Libraries/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:./Libraries/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:./Libraries/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:./Libraries/FreeRTOS/Source/tasks.c **** 		 */
4407:./Libraries/FreeRTOS/Source/tasks.c **** 
4408:./Libraries/FreeRTOS/Source/tasks.c **** 
4409:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:./Libraries/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:./Libraries/FreeRTOS/Source/tasks.c **** 
4412:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:./Libraries/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:./Libraries/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:./Libraries/FreeRTOS/Source/tasks.c **** 
4416:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:./Libraries/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:./Libraries/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:./Libraries/FreeRTOS/Source/tasks.c **** 
4421:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4423:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:./Libraries/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:./Libraries/FreeRTOS/Source/tasks.c **** 
4426:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:./Libraries/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4429:./Libraries/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
ARM GAS  /tmp/ccpNfLZa.s 			page 199


4430:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4431:./Libraries/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4433:./Libraries/FreeRTOS/Source/tasks.c **** 
4434:./Libraries/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4436:./Libraries/FreeRTOS/Source/tasks.c **** 
4437:./Libraries/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4439:./Libraries/FreeRTOS/Source/tasks.c **** 
4440:./Libraries/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4442:./Libraries/FreeRTOS/Source/tasks.c **** 
4443:./Libraries/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4445:./Libraries/FreeRTOS/Source/tasks.c **** 
4446:./Libraries/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:./Libraries/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:./Libraries/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:./Libraries/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:./Libraries/FreeRTOS/Source/tasks.c **** 										break;
4451:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4452:./Libraries/FreeRTOS/Source/tasks.c **** 
4453:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:./Libraries/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:./Libraries/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:./Libraries/FreeRTOS/Source/tasks.c **** 
4457:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:./Libraries/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:./Libraries/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4461:./Libraries/FreeRTOS/Source/tasks.c **** 
4462:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:./Libraries/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:./Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4466:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4467:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4468:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4470:./Libraries/FreeRTOS/Source/tasks.c **** 	}
4471:./Libraries/FreeRTOS/Source/tasks.c **** 
4472:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:./Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:./Libraries/FreeRTOS/Source/tasks.c **** 
4475:./Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:./Libraries/FreeRTOS/Source/tasks.c **** 
4477:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:./Libraries/FreeRTOS/Source/tasks.c **** 	{
4479:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:./Libraries/FreeRTOS/Source/tasks.c **** 
4483:./Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4485:./Libraries/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:./Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccpNfLZa.s 			page 200


4487:./Libraries/FreeRTOS/Source/tasks.c **** 		#endif
4488:./Libraries/FreeRTOS/Source/tasks.c **** 
4489:./Libraries/FreeRTOS/Source/tasks.c **** 		/*
4490:./Libraries/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4492:./Libraries/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:./Libraries/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:./Libraries/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4496:./Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:./Libraries/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:./Libraries/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:./Libraries/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4501:./Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:./Libraries/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:./Libraries/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:./Libraries/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:./Libraries/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:./Libraries/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:./Libraries/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:./Libraries/FreeRTOS/Source/tasks.c **** 		 *
4509:./Libraries/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:./Libraries/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:./Libraries/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:./Libraries/FreeRTOS/Source/tasks.c **** 		 */
4513:./Libraries/FreeRTOS/Source/tasks.c **** 
4514:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:./Libraries/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:./Libraries/FreeRTOS/Source/tasks.c **** 
4517:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:./Libraries/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:./Libraries/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:./Libraries/FreeRTOS/Source/tasks.c **** 
4521:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:./Libraries/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:./Libraries/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:./Libraries/FreeRTOS/Source/tasks.c **** 
4526:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4528:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:./Libraries/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:./Libraries/FreeRTOS/Source/tasks.c **** 
4531:./Libraries/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:./Libraries/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:./Libraries/FreeRTOS/Source/tasks.c **** 
4534:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4537:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:./Libraries/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4540:./Libraries/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:./Libraries/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:./Libraries/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:./Libraries/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
ARM GAS  /tmp/ccpNfLZa.s 			page 201


4544:./Libraries/FreeRTOS/Source/tasks.c **** 
4545:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:./Libraries/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:./Libraries/FreeRTOS/Source/tasks.c **** 					easily. */
4548:./Libraries/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:./Libraries/FreeRTOS/Source/tasks.c **** 
4550:./Libraries/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4552:./Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4554:./Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4556:./Libraries/FreeRTOS/Source/tasks.c **** 						#else
4557:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4558:./Libraries/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:./Libraries/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:./Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4562:./Libraries/FreeRTOS/Source/tasks.c **** 						#endif
4563:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4564:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4565:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4566:./Libraries/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:./Libraries/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:./Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4570:./Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4572:./Libraries/FreeRTOS/Source/tasks.c **** 						#else
4573:./Libraries/FreeRTOS/Source/tasks.c **** 						{
4574:./Libraries/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:./Libraries/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:./Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:./Libraries/FreeRTOS/Source/tasks.c **** 						}
4578:./Libraries/FreeRTOS/Source/tasks.c **** 						#endif
4579:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4580:./Libraries/FreeRTOS/Source/tasks.c **** 
4581:./Libraries/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4583:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4584:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4585:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4586:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4588:./Libraries/FreeRTOS/Source/tasks.c **** 
4589:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:./Libraries/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:./Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4593:./Libraries/FreeRTOS/Source/tasks.c **** 		else
4594:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4595:./Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4597:./Libraries/FreeRTOS/Source/tasks.c **** 	}
4598:./Libraries/FreeRTOS/Source/tasks.c **** 
4599:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccpNfLZa.s 			page 202


4601:./Libraries/FreeRTOS/Source/tasks.c **** 
4602:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:./Libraries/FreeRTOS/Source/tasks.c **** {
 6641              		.loc 1 4603 1
 6642              		.cfi_startproc
 6643              		@ args = 0, pretend = 0, frame = 8
 6644              		@ frame_needed = 1, uses_anonymous_args = 0
 6645              		@ link register save eliminated.
 6646 0000 80B4     		push	{r7}
 6647              	.LCFI266:
 6648              		.cfi_def_cfa_offset 4
 6649              		.cfi_offset 7, -4
 6650 0002 83B0     		sub	sp, sp, #12
 6651              	.LCFI267:
 6652              		.cfi_def_cfa_offset 16
 6653 0004 00AF     		add	r7, sp, #0
 6654              	.LCFI268:
 6655              		.cfi_def_cfa_register 7
4604:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:./Libraries/FreeRTOS/Source/tasks.c **** 
4606:./Libraries/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6656              		.loc 1 4606 13
 6657 0006 094B     		ldr	r3, .L418
 6658 0008 1B68     		ldr	r3, [r3]
 6659              		.loc 1 4606 11
 6660 000a 9B69     		ldr	r3, [r3, #24]
 6661 000c 7B60     		str	r3, [r7, #4]
4607:./Libraries/FreeRTOS/Source/tasks.c **** 
4608:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:./Libraries/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:./Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6662              		.loc 1 4610 2
 6663 000e 074B     		ldr	r3, .L418
 6664 0010 1B68     		ldr	r3, [r3]
 6665 0012 DA6A     		ldr	r2, [r3, #44]
 6666 0014 054B     		ldr	r3, .L418
 6667 0016 1B68     		ldr	r3, [r3]
 6668 0018 C2F13802 		rsb	r2, r2, #56
 6669 001c 9A61     		str	r2, [r3, #24]
4611:./Libraries/FreeRTOS/Source/tasks.c **** 
4612:./Libraries/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6670              		.loc 1 4612 9
 6671 001e 7B68     		ldr	r3, [r7, #4]
4613:./Libraries/FreeRTOS/Source/tasks.c **** }
 6672              		.loc 1 4613 1
 6673 0020 1846     		mov	r0, r3
 6674 0022 0C37     		adds	r7, r7, #12
 6675              	.LCFI269:
 6676              		.cfi_def_cfa_offset 4
 6677 0024 BD46     		mov	sp, r7
 6678              	.LCFI270:
 6679              		.cfi_def_cfa_register 13
 6680              		@ sp needed
 6681 0026 5DF8047B 		ldr	r7, [sp], #4
 6682              	.LCFI271:
 6683              		.cfi_restore 7
 6684              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccpNfLZa.s 			page 203


 6685 002a 7047     		bx	lr
 6686              	.L419:
 6687              		.align	2
 6688              	.L418:
 6689 002c 00000000 		.word	pxCurrentTCB
 6690              		.cfi_endproc
 6691              	.LFE56:
 6693              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6694              		.align	1
 6695              		.global	pvTaskIncrementMutexHeldCount
 6696              		.syntax unified
 6697              		.thumb
 6698              		.thumb_func
 6699              		.fpu fpv5-d16
 6701              	pvTaskIncrementMutexHeldCount:
 6702              	.LFB57:
4614:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:./Libraries/FreeRTOS/Source/tasks.c **** 
4616:./Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:./Libraries/FreeRTOS/Source/tasks.c **** 
4618:./Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6703              		.loc 1 4619 2
 6704              		.cfi_startproc
 6705              		@ args = 0, pretend = 0, frame = 0
 6706              		@ frame_needed = 1, uses_anonymous_args = 0
 6707              		@ link register save eliminated.
 6708 0000 80B4     		push	{r7}
 6709              	.LCFI272:
 6710              		.cfi_def_cfa_offset 4
 6711              		.cfi_offset 7, -4
 6712 0002 00AF     		add	r7, sp, #0
 6713              	.LCFI273:
 6714              		.cfi_def_cfa_register 7
4620:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:./Libraries/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:./Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6715              		.loc 1 4622 20
 6716 0004 074B     		ldr	r3, .L423
 6717 0006 1B68     		ldr	r3, [r3]
 6718              		.loc 1 4622 5
 6719 0008 002B     		cmp	r3, #0
 6720 000a 04D0     		beq	.L421
4623:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4624:./Libraries/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6721              		.loc 1 4624 18
 6722 000c 054B     		ldr	r3, .L423
 6723 000e 1B68     		ldr	r3, [r3]
 6724 0010 1A6D     		ldr	r2, [r3, #80]
 6725              		.loc 1 4624 35
 6726 0012 0132     		adds	r2, r2, #1
 6727 0014 1A65     		str	r2, [r3, #80]
 6728              	.L421:
4625:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4626:./Libraries/FreeRTOS/Source/tasks.c **** 
4627:./Libraries/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6729              		.loc 1 4627 10
ARM GAS  /tmp/ccpNfLZa.s 			page 204


 6730 0016 034B     		ldr	r3, .L423
 6731 0018 1B68     		ldr	r3, [r3]
4628:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6732              		.loc 1 4628 2
 6733 001a 1846     		mov	r0, r3
 6734 001c BD46     		mov	sp, r7
 6735              	.LCFI274:
 6736              		.cfi_def_cfa_register 13
 6737              		@ sp needed
 6738 001e 5DF8047B 		ldr	r7, [sp], #4
 6739              	.LCFI275:
 6740              		.cfi_restore 7
 6741              		.cfi_def_cfa_offset 0
 6742 0022 7047     		bx	lr
 6743              	.L424:
 6744              		.align	2
 6745              	.L423:
 6746 0024 00000000 		.word	pxCurrentTCB
 6747              		.cfi_endproc
 6748              	.LFE57:
 6750              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6751              		.align	1
 6752              		.global	ulTaskNotifyTake
 6753              		.syntax unified
 6754              		.thumb
 6755              		.thumb_func
 6756              		.fpu fpv5-d16
 6758              	ulTaskNotifyTake:
 6759              	.LFB58:
4629:./Libraries/FreeRTOS/Source/tasks.c **** 
4630:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:./Libraries/FreeRTOS/Source/tasks.c **** 
4633:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:./Libraries/FreeRTOS/Source/tasks.c **** 
4635:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6760              		.loc 1 4636 2
 6761              		.cfi_startproc
 6762              		@ args = 0, pretend = 0, frame = 16
 6763              		@ frame_needed = 1, uses_anonymous_args = 0
 6764 0000 80B5     		push	{r7, lr}
 6765              	.LCFI276:
 6766              		.cfi_def_cfa_offset 8
 6767              		.cfi_offset 7, -8
 6768              		.cfi_offset 14, -4
 6769 0002 84B0     		sub	sp, sp, #16
 6770              	.LCFI277:
 6771              		.cfi_def_cfa_offset 24
 6772 0004 00AF     		add	r7, sp, #0
 6773              	.LCFI278:
 6774              		.cfi_def_cfa_register 7
 6775 0006 7860     		str	r0, [r7, #4]
 6776 0008 3960     		str	r1, [r7]
4637:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:./Libraries/FreeRTOS/Source/tasks.c **** 
4639:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccpNfLZa.s 			page 205


 6777              		.loc 1 4639 3
 6778 000a FFF7FEFF 		bl	vPortEnterCritical
4640:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4641:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6779              		.loc 1 4642 20
 6780 000e 1E4B     		ldr	r3, .L430
 6781 0010 1B68     		ldr	r3, [r3]
 6782 0012 5B6D     		ldr	r3, [r3, #84]
 6783              		.loc 1 4642 6
 6784 0014 002B     		cmp	r3, #0
 6785 0016 13D1     		bne	.L426
4643:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4644:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6786              		.loc 1 4645 17
 6787 0018 1B4B     		ldr	r3, .L430
 6788 001a 1B68     		ldr	r3, [r3]
 6789              		.loc 1 4645 33
 6790 001c 0122     		movs	r2, #1
 6791 001e 83F85820 		strb	r2, [r3, #88]
4646:./Libraries/FreeRTOS/Source/tasks.c **** 
4647:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6792              		.loc 1 4647 7
 6793 0022 3B68     		ldr	r3, [r7]
 6794 0024 002B     		cmp	r3, #0
 6795 0026 0BD0     		beq	.L426
4648:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4649:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6796              		.loc 1 4649 6
 6797 0028 0121     		movs	r1, #1
 6798 002a 3868     		ldr	r0, [r7]
 6799 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:./Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:./Libraries/FreeRTOS/Source/tasks.c **** 
4652:./Libraries/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:./Libraries/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:./Libraries/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:./Libraries/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:./Libraries/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6800              		.loc 1 4656 6
 6801 0030 164B     		ldr	r3, .L430+4
 6802 0032 4FF08052 		mov	r2, #268435456
 6803 0036 1A60     		str	r2, [r3]
 6804              		.syntax unified
 6805              	@ 4656 "./Libraries/FreeRTOS/Source/tasks.c" 1
 6806 0038 BFF34F8F 		dsb
 6807              	@ 0 "" 2
 6808              	@ 4656 "./Libraries/FreeRTOS/Source/tasks.c" 1
 6809 003c BFF36F8F 		isb
 6810              	@ 0 "" 2
 6811              		.thumb
 6812              		.syntax unified
 6813              	.L426:
4657:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4658:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4659:./Libraries/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccpNfLZa.s 			page 206


4660:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4662:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4663:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4664:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4665:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4667:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4668:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6814              		.loc 1 4668 3
 6815 0040 FFF7FEFF 		bl	vPortExitCritical
4669:./Libraries/FreeRTOS/Source/tasks.c **** 
4670:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6816              		.loc 1 4670 3
 6817 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4672:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:./Libraries/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6818              		.loc 1 4673 27
 6819 0048 0F4B     		ldr	r3, .L430
 6820 004a 1B68     		ldr	r3, [r3]
 6821              		.loc 1 4673 13
 6822 004c 5B6D     		ldr	r3, [r3, #84]
 6823 004e FB60     		str	r3, [r7, #12]
4674:./Libraries/FreeRTOS/Source/tasks.c **** 
4675:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6824              		.loc 1 4675 6
 6825 0050 FB68     		ldr	r3, [r7, #12]
 6826 0052 002B     		cmp	r3, #0
 6827 0054 0CD0     		beq	.L427
4676:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4677:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6828              		.loc 1 4677 7
 6829 0056 7B68     		ldr	r3, [r7, #4]
 6830 0058 002B     		cmp	r3, #0
 6831 005a 04D0     		beq	.L428
4678:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4679:./Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6832              		.loc 1 4679 18
 6833 005c 0A4B     		ldr	r3, .L430
 6834 005e 1B68     		ldr	r3, [r3]
 6835              		.loc 1 4679 36
 6836 0060 0022     		movs	r2, #0
 6837 0062 5A65     		str	r2, [r3, #84]
 6838 0064 04E0     		b	.L427
 6839              	.L428:
4680:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4681:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4682:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4683:./Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6840              		.loc 1 4683 18
 6841 0066 084B     		ldr	r3, .L430
 6842 0068 1B68     		ldr	r3, [r3]
 6843              		.loc 1 4683 47
 6844 006a FA68     		ldr	r2, [r7, #12]
 6845 006c 013A     		subs	r2, r2, #1
 6846              		.loc 1 4683 36
ARM GAS  /tmp/ccpNfLZa.s 			page 207


 6847 006e 5A65     		str	r2, [r3, #84]
 6848              	.L427:
4684:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4685:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4686:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4687:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4688:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4690:./Libraries/FreeRTOS/Source/tasks.c **** 
4691:./Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6849              		.loc 1 4691 16
 6850 0070 054B     		ldr	r3, .L430
 6851 0072 1B68     		ldr	r3, [r3]
 6852              		.loc 1 4691 32
 6853 0074 0022     		movs	r2, #0
 6854 0076 83F85820 		strb	r2, [r3, #88]
4692:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4693:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6855              		.loc 1 4693 3
 6856 007a FFF7FEFF 		bl	vPortExitCritical
4694:./Libraries/FreeRTOS/Source/tasks.c **** 
4695:./Libraries/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6857              		.loc 1 4695 10
 6858 007e FB68     		ldr	r3, [r7, #12]
4696:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 6859              		.loc 1 4696 2
 6860 0080 1846     		mov	r0, r3
 6861 0082 1037     		adds	r7, r7, #16
 6862              	.LCFI279:
 6863              		.cfi_def_cfa_offset 8
 6864 0084 BD46     		mov	sp, r7
 6865              	.LCFI280:
 6866              		.cfi_def_cfa_register 13
 6867              		@ sp needed
 6868 0086 80BD     		pop	{r7, pc}
 6869              	.L431:
 6870              		.align	2
 6871              	.L430:
 6872 0088 00000000 		.word	pxCurrentTCB
 6873 008c 04ED00E0 		.word	-536810236
 6874              		.cfi_endproc
 6875              	.LFE58:
 6877              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6878              		.align	1
 6879              		.global	xTaskNotifyWait
 6880              		.syntax unified
 6881              		.thumb
 6882              		.thumb_func
 6883              		.fpu fpv5-d16
 6885              	xTaskNotifyWait:
 6886              	.LFB59:
4697:./Libraries/FreeRTOS/Source/tasks.c **** 
4698:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:./Libraries/FreeRTOS/Source/tasks.c **** 
4701:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 208


4703:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 6887              		.loc 1 4704 2
 6888              		.cfi_startproc
 6889              		@ args = 0, pretend = 0, frame = 24
 6890              		@ frame_needed = 1, uses_anonymous_args = 0
 6891 0000 80B5     		push	{r7, lr}
 6892              	.LCFI281:
 6893              		.cfi_def_cfa_offset 8
 6894              		.cfi_offset 7, -8
 6895              		.cfi_offset 14, -4
 6896 0002 86B0     		sub	sp, sp, #24
 6897              	.LCFI282:
 6898              		.cfi_def_cfa_offset 32
 6899 0004 00AF     		add	r7, sp, #0
 6900              	.LCFI283:
 6901              		.cfi_def_cfa_register 7
 6902 0006 F860     		str	r0, [r7, #12]
 6903 0008 B960     		str	r1, [r7, #8]
 6904 000a 7A60     		str	r2, [r7, #4]
 6905 000c 3B60     		str	r3, [r7]
4705:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:./Libraries/FreeRTOS/Source/tasks.c **** 
4707:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6906              		.loc 1 4707 3
 6907 000e FFF7FEFF 		bl	vPortEnterCritical
4708:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4709:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6908              		.loc 1 4710 20
 6909 0012 264B     		ldr	r3, .L438
 6910 0014 1B68     		ldr	r3, [r3]
 6911 0016 93F85830 		ldrb	r3, [r3, #88]
 6912 001a DBB2     		uxtb	r3, r3
 6913              		.loc 1 4710 6
 6914 001c 022B     		cmp	r3, #2
 6915 001e 1AD0     		beq	.L433
4711:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4712:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:./Libraries/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:./Libraries/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6916              		.loc 1 4715 35
 6917 0020 224B     		ldr	r3, .L438
 6918 0022 1B68     		ldr	r3, [r3]
 6919 0024 596D     		ldr	r1, [r3, #84]
 6920              		.loc 1 4715 38
 6921 0026 FA68     		ldr	r2, [r7, #12]
 6922 0028 D243     		mvns	r2, r2
 6923              		.loc 1 4715 35
 6924 002a 0A40     		ands	r2, r2, r1
 6925 002c 5A65     		str	r2, [r3, #84]
4716:./Libraries/FreeRTOS/Source/tasks.c **** 
4717:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6926              		.loc 1 4718 17
 6927 002e 1F4B     		ldr	r3, .L438
ARM GAS  /tmp/ccpNfLZa.s 			page 209


 6928 0030 1B68     		ldr	r3, [r3]
 6929              		.loc 1 4718 33
 6930 0032 0122     		movs	r2, #1
 6931 0034 83F85820 		strb	r2, [r3, #88]
4719:./Libraries/FreeRTOS/Source/tasks.c **** 
4720:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6932              		.loc 1 4720 7
 6933 0038 3B68     		ldr	r3, [r7]
 6934 003a 002B     		cmp	r3, #0
 6935 003c 0BD0     		beq	.L433
4721:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4722:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6936              		.loc 1 4722 6
 6937 003e 0121     		movs	r1, #1
 6938 0040 3868     		ldr	r0, [r7]
 6939 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:./Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:./Libraries/FreeRTOS/Source/tasks.c **** 
4725:./Libraries/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:./Libraries/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:./Libraries/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:./Libraries/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:./Libraries/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6940              		.loc 1 4729 6
 6941 0046 1A4B     		ldr	r3, .L438+4
 6942 0048 4FF08052 		mov	r2, #268435456
 6943 004c 1A60     		str	r2, [r3]
 6944              		.syntax unified
 6945              	@ 4729 "./Libraries/FreeRTOS/Source/tasks.c" 1
 6946 004e BFF34F8F 		dsb
 6947              	@ 0 "" 2
 6948              	@ 4729 "./Libraries/FreeRTOS/Source/tasks.c" 1
 6949 0052 BFF36F8F 		isb
 6950              	@ 0 "" 2
 6951              		.thumb
 6952              		.syntax unified
 6953              	.L433:
4730:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4731:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4732:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4733:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4735:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4736:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4737:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4738:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4740:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4741:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6954              		.loc 1 4741 3
 6955 0056 FFF7FEFF 		bl	vPortExitCritical
4742:./Libraries/FreeRTOS/Source/tasks.c **** 
4743:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6956              		.loc 1 4743 3
 6957 005a FFF7FEFF 		bl	vPortEnterCritical
4744:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4745:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
ARM GAS  /tmp/ccpNfLZa.s 			page 210


4746:./Libraries/FreeRTOS/Source/tasks.c **** 
4747:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6958              		.loc 1 4747 6
 6959 005e 7B68     		ldr	r3, [r7, #4]
 6960 0060 002B     		cmp	r3, #0
 6961 0062 04D0     		beq	.L434
4748:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4749:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:./Libraries/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:./Libraries/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6962              		.loc 1 4751 41
 6963 0064 114B     		ldr	r3, .L438
 6964 0066 1B68     		ldr	r3, [r3]
 6965 0068 5A6D     		ldr	r2, [r3, #84]
 6966              		.loc 1 4751 27
 6967 006a 7B68     		ldr	r3, [r7, #4]
 6968 006c 1A60     		str	r2, [r3]
 6969              	.L434:
4752:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4753:./Libraries/FreeRTOS/Source/tasks.c **** 
4754:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:./Libraries/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:./Libraries/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:./Libraries/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6970              		.loc 1 4758 20
 6971 006e 0F4B     		ldr	r3, .L438
 6972 0070 1B68     		ldr	r3, [r3]
 6973 0072 93F85830 		ldrb	r3, [r3, #88]
 6974 0076 DBB2     		uxtb	r3, r3
 6975              		.loc 1 4758 6
 6976 0078 022B     		cmp	r3, #2
 6977 007a 02D0     		beq	.L435
4759:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4760:./Libraries/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6978              		.loc 1 4761 13
 6979 007c 0023     		movs	r3, #0
 6980 007e 7B61     		str	r3, [r7, #20]
 6981 0080 08E0     		b	.L436
 6982              	.L435:
4762:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4763:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4764:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4765:./Libraries/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:./Libraries/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:./Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6983              		.loc 1 4767 35
 6984 0082 0A4B     		ldr	r3, .L438
 6985 0084 1B68     		ldr	r3, [r3]
 6986 0086 596D     		ldr	r1, [r3, #84]
 6987              		.loc 1 4767 38
 6988 0088 BA68     		ldr	r2, [r7, #8]
 6989 008a D243     		mvns	r2, r2
 6990              		.loc 1 4767 35
 6991 008c 0A40     		ands	r2, r2, r1
 6992 008e 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccpNfLZa.s 			page 211


4768:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6993              		.loc 1 4768 13
 6994 0090 0123     		movs	r3, #1
 6995 0092 7B61     		str	r3, [r7, #20]
 6996              	.L436:
4769:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4770:./Libraries/FreeRTOS/Source/tasks.c **** 
4771:./Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6997              		.loc 1 4771 16
 6998 0094 054B     		ldr	r3, .L438
 6999 0096 1B68     		ldr	r3, [r3]
 7000              		.loc 1 4771 32
 7001 0098 0022     		movs	r2, #0
 7002 009a 83F85820 		strb	r2, [r3, #88]
4772:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4773:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7003              		.loc 1 4773 3
 7004 009e FFF7FEFF 		bl	vPortExitCritical
4774:./Libraries/FreeRTOS/Source/tasks.c **** 
4775:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7005              		.loc 1 4775 10
 7006 00a2 7B69     		ldr	r3, [r7, #20]
4776:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 7007              		.loc 1 4776 2
 7008 00a4 1846     		mov	r0, r3
 7009 00a6 1837     		adds	r7, r7, #24
 7010              	.LCFI284:
 7011              		.cfi_def_cfa_offset 8
 7012 00a8 BD46     		mov	sp, r7
 7013              	.LCFI285:
 7014              		.cfi_def_cfa_register 13
 7015              		@ sp needed
 7016 00aa 80BD     		pop	{r7, pc}
 7017              	.L439:
 7018              		.align	2
 7019              	.L438:
 7020 00ac 00000000 		.word	pxCurrentTCB
 7021 00b0 04ED00E0 		.word	-536810236
 7022              		.cfi_endproc
 7023              	.LFE59:
 7025              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7026              		.align	1
 7027              		.global	xTaskGenericNotify
 7028              		.syntax unified
 7029              		.thumb
 7030              		.thumb_func
 7031              		.fpu fpv5-d16
 7033              	xTaskGenericNotify:
 7034              	.LFB60:
4777:./Libraries/FreeRTOS/Source/tasks.c **** 
4778:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:./Libraries/FreeRTOS/Source/tasks.c **** 
4781:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:./Libraries/FreeRTOS/Source/tasks.c **** 
4783:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:./Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccpNfLZa.s 			page 212


 7035              		.loc 1 4784 2
 7036              		.cfi_startproc
 7037              		@ args = 0, pretend = 0, frame = 40
 7038              		@ frame_needed = 1, uses_anonymous_args = 0
 7039 0000 80B5     		push	{r7, lr}
 7040              	.LCFI286:
 7041              		.cfi_def_cfa_offset 8
 7042              		.cfi_offset 7, -8
 7043              		.cfi_offset 14, -4
 7044 0002 8AB0     		sub	sp, sp, #40
 7045              	.LCFI287:
 7046              		.cfi_def_cfa_offset 48
 7047 0004 00AF     		add	r7, sp, #0
 7048              	.LCFI288:
 7049              		.cfi_def_cfa_register 7
 7050 0006 F860     		str	r0, [r7, #12]
 7051 0008 B960     		str	r1, [r7, #8]
 7052 000a 3B60     		str	r3, [r7]
 7053 000c 1346     		mov	r3, r2
 7054 000e FB71     		strb	r3, [r7, #7]
4785:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7055              		.loc 1 4786 13
 7056 0010 0123     		movs	r3, #1
 7057 0012 7B62     		str	r3, [r7, #36]
4787:./Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:./Libraries/FreeRTOS/Source/tasks.c **** 
4789:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7058              		.loc 1 4789 3
 7059 0014 FB68     		ldr	r3, [r7, #12]
 7060 0016 002B     		cmp	r3, #0
 7061 0018 0AD1     		bne	.L441
 7062              	.LBB216:
 7063              	.LBB217:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7064              		.loc 2 195 2
 7065              		.syntax unified
 7066              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7067 001a 4FF05003 			mov r3, #80												
 7068 001e 83F31188 		msr basepri, r3											
 7069 0022 BFF36F8F 		isb														
 7070 0026 BFF34F8F 		dsb														
 7071              	
 7072              	@ 0 "" 2
 7073              		.thumb
 7074              		.syntax unified
 7075 002a BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7076              		.loc 2 203 1
 7077 002c 00BF     		nop
 7078              	.L442:
 7079              	.LBE217:
 7080              	.LBE216:
 7081              		.loc 1 4789 3 discriminator 1
 7082 002e FEE7     		b	.L442
 7083              	.L441:
4790:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
ARM GAS  /tmp/ccpNfLZa.s 			page 213


 7084              		.loc 1 4790 9
 7085 0030 FB68     		ldr	r3, [r7, #12]
 7086 0032 3B62     		str	r3, [r7, #32]
4791:./Libraries/FreeRTOS/Source/tasks.c **** 
4792:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7087              		.loc 1 4792 3
 7088 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4794:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7089              		.loc 1 4794 6
 7090 0038 3B68     		ldr	r3, [r7]
 7091 003a 002B     		cmp	r3, #0
 7092 003c 03D0     		beq	.L443
4795:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4796:./Libraries/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7093              		.loc 1 4796 42
 7094 003e 3B6A     		ldr	r3, [r7, #32]
 7095 0040 5A6D     		ldr	r2, [r3, #84]
 7096              		.loc 1 4796 35
 7097 0042 3B68     		ldr	r3, [r7]
 7098 0044 1A60     		str	r2, [r3]
 7099              	.L443:
4797:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4798:./Libraries/FreeRTOS/Source/tasks.c **** 
4799:./Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7100              		.loc 1 4799 26
 7101 0046 3B6A     		ldr	r3, [r7, #32]
 7102 0048 93F85830 		ldrb	r3, [r3, #88]
 7103 004c FB77     		strb	r3, [r7, #31]
4800:./Libraries/FreeRTOS/Source/tasks.c **** 
4801:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7104              		.loc 1 4801 25
 7105 004e 3B6A     		ldr	r3, [r7, #32]
 7106 0050 0222     		movs	r2, #2
 7107 0052 83F85820 		strb	r2, [r3, #88]
4802:./Libraries/FreeRTOS/Source/tasks.c **** 
4803:./Libraries/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7108              		.loc 1 4803 4
 7109 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7110 0058 042B     		cmp	r3, #4
 7111 005a 28D8     		bhi	.L444
 7112 005c 01A2     		adr	r2, .L446
 7113 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7114 0062 00BF     		.p2align 2
 7115              	.L446:
 7116 0064 CF000000 		.word	.L461+1
 7117 0068 79000000 		.word	.L449+1
 7118 006c 87000000 		.word	.L448+1
 7119 0070 93000000 		.word	.L447+1
 7120 0074 9B000000 		.word	.L445+1
 7121              		.p2align 1
 7122              	.L449:
4804:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4805:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7123              		.loc 1 4806 29
 7124 0078 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccpNfLZa.s 			page 214


 7125 007a 5A6D     		ldr	r2, [r3, #84]
 7126 007c BB68     		ldr	r3, [r7, #8]
 7127 007e 1A43     		orrs	r2, r2, r3
 7128 0080 3B6A     		ldr	r3, [r7, #32]
 7129 0082 5A65     		str	r2, [r3, #84]
4807:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7130              		.loc 1 4807 6
 7131 0084 26E0     		b	.L451
 7132              	.L448:
4808:./Libraries/FreeRTOS/Source/tasks.c **** 
4809:./Libraries/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:./Libraries/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7133              		.loc 1 4810 13
 7134 0086 3B6A     		ldr	r3, [r7, #32]
 7135 0088 5B6D     		ldr	r3, [r3, #84]
 7136              		.loc 1 4810 32
 7137 008a 5A1C     		adds	r2, r3, #1
 7138 008c 3B6A     		ldr	r3, [r7, #32]
 7139 008e 5A65     		str	r2, [r3, #84]
4811:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7140              		.loc 1 4811 6
 7141 0090 20E0     		b	.L451
 7142              	.L447:
4812:./Libraries/FreeRTOS/Source/tasks.c **** 
4813:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7143              		.loc 1 4814 29
 7144 0092 3B6A     		ldr	r3, [r7, #32]
 7145 0094 BA68     		ldr	r2, [r7, #8]
 7146 0096 5A65     		str	r2, [r3, #84]
4815:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7147              		.loc 1 4815 6
 7148 0098 1CE0     		b	.L451
 7149              	.L445:
4816:./Libraries/FreeRTOS/Source/tasks.c **** 
4817:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:./Libraries/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7150              		.loc 1 4818 8
 7151 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7152 009c 022B     		cmp	r3, #2
 7153 009e 03D0     		beq	.L452
4819:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4820:./Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7154              		.loc 1 4820 30
 7155 00a0 3B6A     		ldr	r3, [r7, #32]
 7156 00a2 BA68     		ldr	r2, [r7, #8]
 7157 00a4 5A65     		str	r2, [r3, #84]
4821:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4822:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4823:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4824:./Libraries/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:./Libraries/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4827:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7158              		.loc 1 4827 6
 7159 00a6 15E0     		b	.L451
 7160              	.L452:
ARM GAS  /tmp/ccpNfLZa.s 			page 215


4825:./Libraries/FreeRTOS/Source/tasks.c **** 					}
 7161              		.loc 1 4825 15
 7162 00a8 0023     		movs	r3, #0
 7163 00aa 7B62     		str	r3, [r7, #36]
 7164              		.loc 1 4827 6
 7165 00ac 12E0     		b	.L451
 7166              	.L444:
4828:./Libraries/FreeRTOS/Source/tasks.c **** 
4829:./Libraries/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:./Libraries/FreeRTOS/Source/tasks.c **** 					updated. */
4832:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
4833:./Libraries/FreeRTOS/Source/tasks.c **** 
4834:./Libraries/FreeRTOS/Source/tasks.c **** 				default:
4835:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:./Libraries/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:./Libraries/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:./Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7167              		.loc 1 4838 6
 7168 00ae 3B6A     		ldr	r3, [r7, #32]
 7169 00b0 5B6D     		ldr	r3, [r3, #84]
 7170 00b2 B3F1FF3F 		cmp	r3, #-1
 7171 00b6 0CD0     		beq	.L462
 7172              	.LBB218:
 7173              	.LBB219:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7174              		.loc 2 195 2
 7175              		.syntax unified
 7176              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7177 00b8 4FF05003 			mov r3, #80												
 7178 00bc 83F31188 		msr basepri, r3											
 7179 00c0 BFF36F8F 		isb														
 7180 00c4 BFF34F8F 		dsb														
 7181              	
 7182              	@ 0 "" 2
 7183              		.thumb
 7184              		.syntax unified
 7185 00c8 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7186              		.loc 2 203 1
 7187 00ca 00BF     		nop
 7188              	.L455:
 7189              	.LBE219:
 7190              	.LBE218:
 7191              		.loc 1 4838 6 discriminator 2
 7192 00cc FEE7     		b	.L455
 7193              	.L461:
4832:./Libraries/FreeRTOS/Source/tasks.c **** 
 7194              		.loc 1 4832 6
 7195 00ce 00BF     		nop
 7196 00d0 00E0     		b	.L451
 7197              	.L462:
4839:./Libraries/FreeRTOS/Source/tasks.c **** 
4840:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7198              		.loc 1 4840 6
 7199 00d2 00BF     		nop
 7200              	.L451:
ARM GAS  /tmp/ccpNfLZa.s 			page 216


4841:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4842:./Libraries/FreeRTOS/Source/tasks.c **** 
4843:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:./Libraries/FreeRTOS/Source/tasks.c **** 
4845:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:./Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7201              		.loc 1 4847 6
 7202 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7203 00d6 012B     		cmp	r3, #1
 7204 00d8 3AD1     		bne	.L456
4848:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4849:./Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7205              		.loc 1 4849 14
 7206 00da 3B6A     		ldr	r3, [r7, #32]
 7207 00dc 0433     		adds	r3, r3, #4
 7208 00de 1846     		mov	r0, r3
 7209 00e0 FFF7FEFF 		bl	uxListRemove
4850:./Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7210              		.loc 1 4850 5
 7211 00e4 3B6A     		ldr	r3, [r7, #32]
 7212 00e6 DA6A     		ldr	r2, [r3, #44]
 7213 00e8 1D4B     		ldr	r3, .L463
 7214 00ea 1B68     		ldr	r3, [r3]
 7215 00ec 9A42     		cmp	r2, r3
 7216 00ee 03D9     		bls	.L457
 7217              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7218 00f0 3B6A     		ldr	r3, [r7, #32]
 7219 00f2 DB6A     		ldr	r3, [r3, #44]
 7220 00f4 1A4A     		ldr	r2, .L463
 7221 00f6 1360     		str	r3, [r2]
 7222              	.L457:
 7223              		.loc 1 4850 5 discriminator 3
 7224 00f8 3B6A     		ldr	r3, [r7, #32]
 7225 00fa DA6A     		ldr	r2, [r3, #44]
 7226 00fc 1346     		mov	r3, r2
 7227 00fe 9B00     		lsls	r3, r3, #2
 7228 0100 1344     		add	r3, r3, r2
 7229 0102 9B00     		lsls	r3, r3, #2
 7230 0104 174A     		ldr	r2, .L463+4
 7231 0106 1A44     		add	r2, r2, r3
 7232 0108 3B6A     		ldr	r3, [r7, #32]
 7233 010a 0433     		adds	r3, r3, #4
 7234 010c 1946     		mov	r1, r3
 7235 010e 1046     		mov	r0, r2
 7236 0110 FFF7FEFF 		bl	vListInsertEnd
4851:./Libraries/FreeRTOS/Source/tasks.c **** 
4852:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7237              		.loc 1 4853 5 is_stmt 1 discriminator 3
 7238 0114 3B6A     		ldr	r3, [r7, #32]
 7239 0116 9B6A     		ldr	r3, [r3, #40]
 7240 0118 002B     		cmp	r3, #0
 7241 011a 0AD0     		beq	.L458
 7242              	.LBB220:
 7243              	.LBB221:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccpNfLZa.s 			page 217


 7244              		.loc 2 195 2
 7245              		.syntax unified
 7246              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7247 011c 4FF05003 			mov r3, #80												
 7248 0120 83F31188 		msr basepri, r3											
 7249 0124 BFF36F8F 		isb														
 7250 0128 BFF34F8F 		dsb														
 7251              	
 7252              	@ 0 "" 2
 7253              		.thumb
 7254              		.syntax unified
 7255 012c 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7256              		.loc 2 203 1
 7257 012e 00BF     		nop
 7258              	.L459:
 7259              	.LBE221:
 7260              	.LBE220:
 7261              		.loc 1 4853 5 discriminator 3
 7262 0130 FEE7     		b	.L459
 7263              	.L458:
4854:./Libraries/FreeRTOS/Source/tasks.c **** 
4855:./Libraries/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4857:./Libraries/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:./Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:./Libraries/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:./Libraries/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:./Libraries/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:./Libraries/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:./Libraries/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:./Libraries/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:./Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:./Libraries/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:./Libraries/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4869:./Libraries/FreeRTOS/Source/tasks.c **** 				#endif
4870:./Libraries/FreeRTOS/Source/tasks.c **** 
4871:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7264              		.loc 1 4871 14
 7265 0132 3B6A     		ldr	r3, [r7, #32]
 7266 0134 DA6A     		ldr	r2, [r3, #44]
 7267              		.loc 1 4871 41
 7268 0136 0C4B     		ldr	r3, .L463+8
 7269 0138 1B68     		ldr	r3, [r3]
 7270 013a DB6A     		ldr	r3, [r3, #44]
 7271              		.loc 1 4871 7
 7272 013c 9A42     		cmp	r2, r3
 7273 013e 07D9     		bls	.L456
4872:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4873:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:./Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:./Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7274              		.loc 1 4875 6
 7275 0140 0A4B     		ldr	r3, .L463+12
 7276 0142 4FF08052 		mov	r2, #268435456
 7277 0146 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 218


 7278              		.syntax unified
 7279              	@ 4875 "./Libraries/FreeRTOS/Source/tasks.c" 1
 7280 0148 BFF34F8F 		dsb
 7281              	@ 0 "" 2
 7282              	@ 4875 "./Libraries/FreeRTOS/Source/tasks.c" 1
 7283 014c BFF36F8F 		isb
 7284              	@ 0 "" 2
 7285              		.thumb
 7286              		.syntax unified
 7287              	.L456:
4876:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4877:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4878:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4879:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4881:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4882:./Libraries/FreeRTOS/Source/tasks.c **** 			else
4883:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4884:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4886:./Libraries/FreeRTOS/Source/tasks.c **** 		}
4887:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7288              		.loc 1 4887 3
 7289 0150 FFF7FEFF 		bl	vPortExitCritical
4888:./Libraries/FreeRTOS/Source/tasks.c **** 
4889:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7290              		.loc 1 4889 10
 7291 0154 7B6A     		ldr	r3, [r7, #36]
4890:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 7292              		.loc 1 4890 2
 7293 0156 1846     		mov	r0, r3
 7294 0158 2837     		adds	r7, r7, #40
 7295              	.LCFI289:
 7296              		.cfi_def_cfa_offset 8
 7297 015a BD46     		mov	sp, r7
 7298              	.LCFI290:
 7299              		.cfi_def_cfa_register 13
 7300              		@ sp needed
 7301 015c 80BD     		pop	{r7, pc}
 7302              	.L464:
 7303 015e 00BF     		.align	2
 7304              	.L463:
 7305 0160 00000000 		.word	uxTopReadyPriority
 7306 0164 00000000 		.word	pxReadyTasksLists
 7307 0168 00000000 		.word	pxCurrentTCB
 7308 016c 04ED00E0 		.word	-536810236
 7309              		.cfi_endproc
 7310              	.LFE60:
 7312              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7313              		.align	1
 7314              		.global	xTaskGenericNotifyFromISR
 7315              		.syntax unified
 7316              		.thumb
 7317              		.thumb_func
 7318              		.fpu fpv5-d16
 7320              	xTaskGenericNotifyFromISR:
 7321              	.LFB61:
ARM GAS  /tmp/ccpNfLZa.s 			page 219


4891:./Libraries/FreeRTOS/Source/tasks.c **** 
4892:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:./Libraries/FreeRTOS/Source/tasks.c **** 
4895:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:./Libraries/FreeRTOS/Source/tasks.c **** 
4897:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 7322              		.loc 1 4898 2
 7323              		.cfi_startproc
 7324              		@ args = 4, pretend = 0, frame = 56
 7325              		@ frame_needed = 1, uses_anonymous_args = 0
 7326 0000 80B5     		push	{r7, lr}
 7327              	.LCFI291:
 7328              		.cfi_def_cfa_offset 8
 7329              		.cfi_offset 7, -8
 7330              		.cfi_offset 14, -4
 7331 0002 8EB0     		sub	sp, sp, #56
 7332              	.LCFI292:
 7333              		.cfi_def_cfa_offset 64
 7334 0004 00AF     		add	r7, sp, #0
 7335              	.LCFI293:
 7336              		.cfi_def_cfa_register 7
 7337 0006 F860     		str	r0, [r7, #12]
 7338 0008 B960     		str	r1, [r7, #8]
 7339 000a 3B60     		str	r3, [r7]
 7340 000c 1346     		mov	r3, r2
 7341 000e FB71     		strb	r3, [r7, #7]
4899:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:./Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7342              		.loc 1 4901 13
 7343 0010 0123     		movs	r3, #1
 7344 0012 7B63     		str	r3, [r7, #52]
4902:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:./Libraries/FreeRTOS/Source/tasks.c **** 
4904:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7345              		.loc 1 4904 3
 7346 0014 FB68     		ldr	r3, [r7, #12]
 7347 0016 002B     		cmp	r3, #0
 7348 0018 0AD1     		bne	.L466
 7349              	.LBB222:
 7350              	.LBB223:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7351              		.loc 2 195 2
 7352              		.syntax unified
 7353              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7354 001a 4FF05003 			mov r3, #80												
 7355 001e 83F31188 		msr basepri, r3											
 7356 0022 BFF36F8F 		isb														
 7357 0026 BFF34F8F 		dsb														
 7358              	
 7359              	@ 0 "" 2
 7360              		.thumb
 7361              		.syntax unified
 7362 002a 7B62     		str	r3, [r7, #36]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 220


 7363              		.loc 2 203 1
 7364 002c 00BF     		nop
 7365              	.L467:
 7366              	.LBE223:
 7367              	.LBE222:
 7368              		.loc 1 4904 3 discriminator 1
 7369 002e FEE7     		b	.L467
 7370              	.L466:
4905:./Libraries/FreeRTOS/Source/tasks.c **** 
4906:./Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:./Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:./Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:./Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:./Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:./Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:./Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:./Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:./Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:./Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:./Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:./Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:./Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:./Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:./Libraries/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7371              		.loc 1 4922 3
 7372 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:./Libraries/FreeRTOS/Source/tasks.c **** 
4924:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7373              		.loc 1 4924 9
 7374 0034 FB68     		ldr	r3, [r7, #12]
 7375 0036 3B63     		str	r3, [r7, #48]
 7376              	.LBB224:
 7377              	.LBB225:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7378              		.loc 2 211 2
 7379              		.syntax unified
 7380              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7381 0038 EFF31182 			mrs r2, basepri											
 7382 003c 4FF05003 		mov r3, #80												
 7383 0040 83F31188 		msr basepri, r3											
 7384 0044 BFF36F8F 		isb														
 7385 0048 BFF34F8F 		dsb														
 7386              	
 7387              	@ 0 "" 2
 7388              		.thumb
 7389              		.syntax unified
 7390 004c 3A62     		str	r2, [r7, #32]
 7391 004e FB61     		str	r3, [r7, #28]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7392              		.loc 2 223 9
 7393 0050 3B6A     		ldr	r3, [r7, #32]
 7394              	.LBE225:
 7395              	.LBE224:
4925:./Libraries/FreeRTOS/Source/tasks.c **** 
4926:./Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/ccpNfLZa.s 			page 221


 7396              		.loc 1 4926 28
 7397 0052 FB62     		str	r3, [r7, #44]
4927:./Libraries/FreeRTOS/Source/tasks.c **** 		{
4928:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7398              		.loc 1 4928 6
 7399 0054 3B68     		ldr	r3, [r7]
 7400 0056 002B     		cmp	r3, #0
 7401 0058 03D0     		beq	.L469
4929:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4930:./Libraries/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7402              		.loc 1 4930 42
 7403 005a 3B6B     		ldr	r3, [r7, #48]
 7404 005c 5A6D     		ldr	r2, [r3, #84]
 7405              		.loc 1 4930 35
 7406 005e 3B68     		ldr	r3, [r7]
 7407 0060 1A60     		str	r2, [r3]
 7408              	.L469:
4931:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4932:./Libraries/FreeRTOS/Source/tasks.c **** 
4933:./Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7409              		.loc 1 4933 26
 7410 0062 3B6B     		ldr	r3, [r7, #48]
 7411 0064 93F85830 		ldrb	r3, [r3, #88]
 7412 0068 87F82B30 		strb	r3, [r7, #43]
4934:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7413              		.loc 1 4934 25
 7414 006c 3B6B     		ldr	r3, [r7, #48]
 7415 006e 0222     		movs	r2, #2
 7416 0070 83F85820 		strb	r2, [r3, #88]
4935:./Libraries/FreeRTOS/Source/tasks.c **** 
4936:./Libraries/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7417              		.loc 1 4936 4
 7418 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7419 0076 042B     		cmp	r3, #4
 7420 0078 28D8     		bhi	.L470
 7421 007a 01A2     		adr	r2, .L472
 7422 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7423              		.p2align 2
 7424              	.L472:
 7425 0080 ED000000 		.word	.L490+1
 7426 0084 95000000 		.word	.L475+1
 7427 0088 A3000000 		.word	.L474+1
 7428 008c AF000000 		.word	.L473+1
 7429 0090 B7000000 		.word	.L471+1
 7430              		.p2align 1
 7431              	.L475:
4937:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4938:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7432              		.loc 1 4939 29
 7433 0094 3B6B     		ldr	r3, [r7, #48]
 7434 0096 5A6D     		ldr	r2, [r3, #84]
 7435 0098 BB68     		ldr	r3, [r7, #8]
 7436 009a 1A43     		orrs	r2, r2, r3
 7437 009c 3B6B     		ldr	r3, [r7, #48]
 7438 009e 5A65     		str	r2, [r3, #84]
4940:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccpNfLZa.s 			page 222


 7439              		.loc 1 4940 6
 7440 00a0 27E0     		b	.L477
 7441              	.L474:
4941:./Libraries/FreeRTOS/Source/tasks.c **** 
4942:./Libraries/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:./Libraries/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7442              		.loc 1 4943 13
 7443 00a2 3B6B     		ldr	r3, [r7, #48]
 7444 00a4 5B6D     		ldr	r3, [r3, #84]
 7445              		.loc 1 4943 32
 7446 00a6 5A1C     		adds	r2, r3, #1
 7447 00a8 3B6B     		ldr	r3, [r7, #48]
 7448 00aa 5A65     		str	r2, [r3, #84]
4944:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7449              		.loc 1 4944 6
 7450 00ac 21E0     		b	.L477
 7451              	.L473:
4945:./Libraries/FreeRTOS/Source/tasks.c **** 
4946:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:./Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7452              		.loc 1 4947 29
 7453 00ae 3B6B     		ldr	r3, [r7, #48]
 7454 00b0 BA68     		ldr	r2, [r7, #8]
 7455 00b2 5A65     		str	r2, [r3, #84]
4948:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7456              		.loc 1 4948 6
 7457 00b4 1DE0     		b	.L477
 7458              	.L471:
4949:./Libraries/FreeRTOS/Source/tasks.c **** 
4950:./Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:./Libraries/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7459              		.loc 1 4951 8
 7460 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7461 00ba 022B     		cmp	r3, #2
 7462 00bc 03D0     		beq	.L478
4952:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4953:./Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7463              		.loc 1 4953 30
 7464 00be 3B6B     		ldr	r3, [r7, #48]
 7465 00c0 BA68     		ldr	r2, [r7, #8]
 7466 00c2 5A65     		str	r2, [r3, #84]
4954:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4955:./Libraries/FreeRTOS/Source/tasks.c **** 					else
4956:./Libraries/FreeRTOS/Source/tasks.c **** 					{
4957:./Libraries/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:./Libraries/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:./Libraries/FreeRTOS/Source/tasks.c **** 					}
4960:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7467              		.loc 1 4960 6
 7468 00c4 15E0     		b	.L477
 7469              	.L478:
4958:./Libraries/FreeRTOS/Source/tasks.c **** 					}
 7470              		.loc 1 4958 15
 7471 00c6 0023     		movs	r3, #0
 7472 00c8 7B63     		str	r3, [r7, #52]
 7473              		.loc 1 4960 6
 7474 00ca 12E0     		b	.L477
ARM GAS  /tmp/ccpNfLZa.s 			page 223


 7475              	.L470:
4961:./Libraries/FreeRTOS/Source/tasks.c **** 
4962:./Libraries/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:./Libraries/FreeRTOS/Source/tasks.c **** 					updated. */
4965:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
4966:./Libraries/FreeRTOS/Source/tasks.c **** 
4967:./Libraries/FreeRTOS/Source/tasks.c **** 				default:
4968:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:./Libraries/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:./Libraries/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:./Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7476              		.loc 1 4971 6
 7477 00cc 3B6B     		ldr	r3, [r7, #48]
 7478 00ce 5B6D     		ldr	r3, [r3, #84]
 7479 00d0 B3F1FF3F 		cmp	r3, #-1
 7480 00d4 0CD0     		beq	.L491
 7481              	.LBB226:
 7482              	.LBB227:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7483              		.loc 2 195 2
 7484              		.syntax unified
 7485              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7486 00d6 4FF05003 			mov r3, #80												
 7487 00da 83F31188 		msr basepri, r3											
 7488 00de BFF36F8F 		isb														
 7489 00e2 BFF34F8F 		dsb														
 7490              	
 7491              	@ 0 "" 2
 7492              		.thumb
 7493              		.syntax unified
 7494 00e6 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7495              		.loc 2 203 1
 7496 00e8 00BF     		nop
 7497              	.L481:
 7498              	.LBE227:
 7499              	.LBE226:
 7500              		.loc 1 4971 6 discriminator 2
 7501 00ea FEE7     		b	.L481
 7502              	.L490:
4965:./Libraries/FreeRTOS/Source/tasks.c **** 
 7503              		.loc 1 4965 6
 7504 00ec 00BF     		nop
 7505 00ee 00E0     		b	.L477
 7506              	.L491:
4972:./Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7507              		.loc 1 4972 6
 7508 00f0 00BF     		nop
 7509              	.L477:
4973:./Libraries/FreeRTOS/Source/tasks.c **** 			}
4974:./Libraries/FreeRTOS/Source/tasks.c **** 
4975:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:./Libraries/FreeRTOS/Source/tasks.c **** 
4977:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:./Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  /tmp/ccpNfLZa.s 			page 224


 7510              		.loc 1 4979 6
 7511 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7512 00f6 012B     		cmp	r3, #1
 7513 00f8 46D1     		bne	.L482
4980:./Libraries/FreeRTOS/Source/tasks.c **** 			{
4981:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7514              		.loc 1 4982 5
 7515 00fa 3B6B     		ldr	r3, [r7, #48]
 7516 00fc 9B6A     		ldr	r3, [r3, #40]
 7517 00fe 002B     		cmp	r3, #0
 7518 0100 0AD0     		beq	.L483
 7519              	.LBB228:
 7520              	.LBB229:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7521              		.loc 2 195 2
 7522              		.syntax unified
 7523              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7524 0102 4FF05003 			mov r3, #80												
 7525 0106 83F31188 		msr basepri, r3											
 7526 010a BFF36F8F 		isb														
 7527 010e BFF34F8F 		dsb														
 7528              	
 7529              	@ 0 "" 2
 7530              		.thumb
 7531              		.syntax unified
 7532 0112 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7533              		.loc 2 203 1
 7534 0114 00BF     		nop
 7535              	.L484:
 7536              	.LBE229:
 7537              	.LBE228:
 7538              		.loc 1 4982 5 discriminator 3
 7539 0116 FEE7     		b	.L484
 7540              	.L483:
4983:./Libraries/FreeRTOS/Source/tasks.c **** 
4984:./Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7541              		.loc 1 4984 30
 7542 0118 214B     		ldr	r3, .L492
 7543 011a 1B68     		ldr	r3, [r3]
 7544              		.loc 1 4984 7
 7545 011c 002B     		cmp	r3, #0
 7546 011e 1DD1     		bne	.L485
4985:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4986:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7547              		.loc 1 4986 15
 7548 0120 3B6B     		ldr	r3, [r7, #48]
 7549 0122 0433     		adds	r3, r3, #4
 7550 0124 1846     		mov	r0, r3
 7551 0126 FFF7FEFF 		bl	uxListRemove
4987:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7552              		.loc 1 4987 6
 7553 012a 3B6B     		ldr	r3, [r7, #48]
 7554 012c DA6A     		ldr	r2, [r3, #44]
 7555 012e 1D4B     		ldr	r3, .L492+4
 7556 0130 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccpNfLZa.s 			page 225


 7557 0132 9A42     		cmp	r2, r3
 7558 0134 03D9     		bls	.L486
 7559              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7560 0136 3B6B     		ldr	r3, [r7, #48]
 7561 0138 DB6A     		ldr	r3, [r3, #44]
 7562 013a 1A4A     		ldr	r2, .L492+4
 7563 013c 1360     		str	r3, [r2]
 7564              	.L486:
 7565              		.loc 1 4987 6 discriminator 3
 7566 013e 3B6B     		ldr	r3, [r7, #48]
 7567 0140 DA6A     		ldr	r2, [r3, #44]
 7568 0142 1346     		mov	r3, r2
 7569 0144 9B00     		lsls	r3, r3, #2
 7570 0146 1344     		add	r3, r3, r2
 7571 0148 9B00     		lsls	r3, r3, #2
 7572 014a 174A     		ldr	r2, .L492+8
 7573 014c 1A44     		add	r2, r2, r3
 7574 014e 3B6B     		ldr	r3, [r7, #48]
 7575 0150 0433     		adds	r3, r3, #4
 7576 0152 1946     		mov	r1, r3
 7577 0154 1046     		mov	r0, r2
 7578 0156 FFF7FEFF 		bl	vListInsertEnd
 7579 015a 05E0     		b	.L487
 7580              	.L485:
4988:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4989:./Libraries/FreeRTOS/Source/tasks.c **** 				else
4990:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4991:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:./Libraries/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:./Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7581              		.loc 1 4993 6 is_stmt 1
 7582 015c 3B6B     		ldr	r3, [r7, #48]
 7583 015e 1833     		adds	r3, r3, #24
 7584 0160 1946     		mov	r1, r3
 7585 0162 1248     		ldr	r0, .L492+12
 7586 0164 FFF7FEFF 		bl	vListInsertEnd
 7587              	.L487:
4994:./Libraries/FreeRTOS/Source/tasks.c **** 				}
4995:./Libraries/FreeRTOS/Source/tasks.c **** 
4996:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7588              		.loc 1 4996 14
 7589 0168 3B6B     		ldr	r3, [r7, #48]
 7590 016a DA6A     		ldr	r2, [r3, #44]
 7591              		.loc 1 4996 41
 7592 016c 104B     		ldr	r3, .L492+16
 7593 016e 1B68     		ldr	r3, [r3]
 7594 0170 DB6A     		ldr	r3, [r3, #44]
 7595              		.loc 1 4996 7
 7596 0172 9A42     		cmp	r2, r3
 7597 0174 08D9     		bls	.L482
4997:./Libraries/FreeRTOS/Source/tasks.c **** 				{
4998:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:./Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7598              		.loc 1 5000 8
 7599 0176 3B6C     		ldr	r3, [r7, #64]
 7600 0178 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpNfLZa.s 			page 226


 7601 017a 02D0     		beq	.L488
5001:./Libraries/FreeRTOS/Source/tasks.c **** 					{
5002:./Libraries/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7602              		.loc 1 5002 34
 7603 017c 3B6C     		ldr	r3, [r7, #64]
 7604 017e 0122     		movs	r2, #1
 7605 0180 1A60     		str	r2, [r3]
 7606              	.L488:
5003:./Libraries/FreeRTOS/Source/tasks.c **** 					}
5004:./Libraries/FreeRTOS/Source/tasks.c **** 
5005:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:./Libraries/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:./Libraries/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:./Libraries/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7607              		.loc 1 5008 20
 7608 0182 0C4B     		ldr	r3, .L492+20
 7609 0184 0122     		movs	r2, #1
 7610 0186 1A60     		str	r2, [r3]
 7611              	.L482:
 7612 0188 FB6A     		ldr	r3, [r7, #44]
 7613 018a 3B61     		str	r3, [r7, #16]
 7614              	.LBB230:
 7615              	.LBB231:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7616              		.loc 2 229 2
 7617 018c 3B69     		ldr	r3, [r7, #16]
 7618              		.syntax unified
 7619              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7620 018e 83F31188 			msr basepri, r3	
 7621              	@ 0 "" 2
 7622              		.loc 2 233 1
 7623              		.thumb
 7624              		.syntax unified
 7625 0192 00BF     		nop
 7626              	.LBE231:
 7627              	.LBE230:
5009:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5010:./Libraries/FreeRTOS/Source/tasks.c **** 				else
5011:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5012:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5014:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5015:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5016:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:./Libraries/FreeRTOS/Source/tasks.c **** 
5018:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7628              		.loc 1 5018 10
 7629 0194 7B6B     		ldr	r3, [r7, #52]
5019:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 7630              		.loc 1 5019 2
 7631 0196 1846     		mov	r0, r3
 7632 0198 3837     		adds	r7, r7, #56
 7633              	.LCFI294:
 7634              		.cfi_def_cfa_offset 8
 7635 019a BD46     		mov	sp, r7
 7636              	.LCFI295:
 7637              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccpNfLZa.s 			page 227


 7638              		@ sp needed
 7639 019c 80BD     		pop	{r7, pc}
 7640              	.L493:
 7641 019e 00BF     		.align	2
 7642              	.L492:
 7643 01a0 00000000 		.word	uxSchedulerSuspended
 7644 01a4 00000000 		.word	uxTopReadyPriority
 7645 01a8 00000000 		.word	pxReadyTasksLists
 7646 01ac 00000000 		.word	xPendingReadyList
 7647 01b0 00000000 		.word	pxCurrentTCB
 7648 01b4 00000000 		.word	xYieldPending
 7649              		.cfi_endproc
 7650              	.LFE61:
 7652              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7653              		.align	1
 7654              		.global	vTaskNotifyGiveFromISR
 7655              		.syntax unified
 7656              		.thumb
 7657              		.thumb_func
 7658              		.fpu fpv5-d16
 7660              	vTaskNotifyGiveFromISR:
 7661              	.LFB62:
5020:./Libraries/FreeRTOS/Source/tasks.c **** 
5021:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:./Libraries/FreeRTOS/Source/tasks.c **** 
5024:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:./Libraries/FreeRTOS/Source/tasks.c **** 
5026:./Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 7662              		.loc 1 5027 2
 7663              		.cfi_startproc
 7664              		@ args = 0, pretend = 0, frame = 40
 7665              		@ frame_needed = 1, uses_anonymous_args = 0
 7666 0000 80B5     		push	{r7, lr}
 7667              	.LCFI296:
 7668              		.cfi_def_cfa_offset 8
 7669              		.cfi_offset 7, -8
 7670              		.cfi_offset 14, -4
 7671 0002 8AB0     		sub	sp, sp, #40
 7672              	.LCFI297:
 7673              		.cfi_def_cfa_offset 48
 7674 0004 00AF     		add	r7, sp, #0
 7675              	.LCFI298:
 7676              		.cfi_def_cfa_register 7
 7677 0006 7860     		str	r0, [r7, #4]
 7678 0008 3960     		str	r1, [r7]
5028:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:./Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:./Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:./Libraries/FreeRTOS/Source/tasks.c **** 
5032:./Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7679              		.loc 1 5032 3
 7680 000a 7B68     		ldr	r3, [r7, #4]
 7681 000c 002B     		cmp	r3, #0
 7682 000e 0AD1     		bne	.L495
 7683              	.LBB232:
ARM GAS  /tmp/ccpNfLZa.s 			page 228


 7684              	.LBB233:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7685              		.loc 2 195 2
 7686              		.syntax unified
 7687              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7688 0010 4FF05003 			mov r3, #80												
 7689 0014 83F31188 		msr basepri, r3											
 7690 0018 BFF36F8F 		isb														
 7691 001c BFF34F8F 		dsb														
 7692              	
 7693              	@ 0 "" 2
 7694              		.thumb
 7695              		.syntax unified
 7696 0020 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7697              		.loc 2 203 1
 7698 0022 00BF     		nop
 7699              	.L496:
 7700              	.LBE233:
 7701              	.LBE232:
 7702              		.loc 1 5032 3 discriminator 1
 7703 0024 FEE7     		b	.L496
 7704              	.L495:
5033:./Libraries/FreeRTOS/Source/tasks.c **** 
5034:./Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:./Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:./Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:./Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:./Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:./Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:./Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:./Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:./Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:./Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:./Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:./Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:./Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:./Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:./Libraries/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:./Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7705              		.loc 1 5050 3
 7706 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:./Libraries/FreeRTOS/Source/tasks.c **** 
5052:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7707              		.loc 1 5052 9
 7708 002a 7B68     		ldr	r3, [r7, #4]
 7709 002c 7B62     		str	r3, [r7, #36]
 7710              	.LBB234:
 7711              	.LBB235:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7712              		.loc 2 211 2
 7713              		.syntax unified
 7714              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7715 002e EFF31182 			mrs r2, basepri											
 7716 0032 4FF05003 		mov r3, #80												
 7717 0036 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccpNfLZa.s 			page 229


 7718 003a BFF36F8F 		isb														
 7719 003e BFF34F8F 		dsb														
 7720              	
 7721              	@ 0 "" 2
 7722              		.thumb
 7723              		.syntax unified
 7724 0042 7A61     		str	r2, [r7, #20]
 7725 0044 3B61     		str	r3, [r7, #16]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7726              		.loc 2 223 9
 7727 0046 7B69     		ldr	r3, [r7, #20]
 7728              	.LBE235:
 7729              	.LBE234:
5053:./Libraries/FreeRTOS/Source/tasks.c **** 
5054:./Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7730              		.loc 1 5054 28
 7731 0048 3B62     		str	r3, [r7, #32]
5055:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5056:./Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7732              		.loc 1 5056 26
 7733 004a 7B6A     		ldr	r3, [r7, #36]
 7734 004c 93F85830 		ldrb	r3, [r3, #88]
 7735 0050 FB77     		strb	r3, [r7, #31]
5057:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7736              		.loc 1 5057 25
 7737 0052 7B6A     		ldr	r3, [r7, #36]
 7738 0054 0222     		movs	r2, #2
 7739 0056 83F85820 		strb	r2, [r3, #88]
5058:./Libraries/FreeRTOS/Source/tasks.c **** 
5059:./Libraries/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:./Libraries/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:./Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7740              		.loc 1 5061 11
 7741 005a 7B6A     		ldr	r3, [r7, #36]
 7742 005c 5B6D     		ldr	r3, [r3, #84]
 7743              		.loc 1 5061 30
 7744 005e 5A1C     		adds	r2, r3, #1
 7745 0060 7B6A     		ldr	r3, [r7, #36]
 7746 0062 5A65     		str	r2, [r3, #84]
5062:./Libraries/FreeRTOS/Source/tasks.c **** 
5063:./Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:./Libraries/FreeRTOS/Source/tasks.c **** 
5065:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:./Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:./Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7747              		.loc 1 5067 6
 7748 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7749 0066 012B     		cmp	r3, #1
 7750 0068 46D1     		bne	.L498
5068:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5069:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:./Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7751              		.loc 1 5070 5
 7752 006a 7B6A     		ldr	r3, [r7, #36]
 7753 006c 9B6A     		ldr	r3, [r3, #40]
 7754 006e 002B     		cmp	r3, #0
 7755 0070 0AD0     		beq	.L499
ARM GAS  /tmp/ccpNfLZa.s 			page 230


 7756              	.LBB236:
 7757              	.LBB237:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7758              		.loc 2 195 2
 7759              		.syntax unified
 7760              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7761 0072 4FF05003 			mov r3, #80												
 7762 0076 83F31188 		msr basepri, r3											
 7763 007a BFF36F8F 		isb														
 7764 007e BFF34F8F 		dsb														
 7765              	
 7766              	@ 0 "" 2
 7767              		.thumb
 7768              		.syntax unified
 7769 0082 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7770              		.loc 2 203 1
 7771 0084 00BF     		nop
 7772              	.L500:
 7773              	.LBE237:
 7774              	.LBE236:
 7775              		.loc 1 5070 5 discriminator 2
 7776 0086 FEE7     		b	.L500
 7777              	.L499:
5071:./Libraries/FreeRTOS/Source/tasks.c **** 
5072:./Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7778              		.loc 1 5072 30
 7779 0088 204B     		ldr	r3, .L505
 7780 008a 1B68     		ldr	r3, [r3]
 7781              		.loc 1 5072 7
 7782 008c 002B     		cmp	r3, #0
 7783 008e 1DD1     		bne	.L501
5073:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5074:./Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7784              		.loc 1 5074 15
 7785 0090 7B6A     		ldr	r3, [r7, #36]
 7786 0092 0433     		adds	r3, r3, #4
 7787 0094 1846     		mov	r0, r3
 7788 0096 FFF7FEFF 		bl	uxListRemove
5075:./Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7789              		.loc 1 5075 6
 7790 009a 7B6A     		ldr	r3, [r7, #36]
 7791 009c DA6A     		ldr	r2, [r3, #44]
 7792 009e 1C4B     		ldr	r3, .L505+4
 7793 00a0 1B68     		ldr	r3, [r3]
 7794 00a2 9A42     		cmp	r2, r3
 7795 00a4 03D9     		bls	.L502
 7796              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7797 00a6 7B6A     		ldr	r3, [r7, #36]
 7798 00a8 DB6A     		ldr	r3, [r3, #44]
 7799 00aa 194A     		ldr	r2, .L505+4
 7800 00ac 1360     		str	r3, [r2]
 7801              	.L502:
 7802              		.loc 1 5075 6 discriminator 3
 7803 00ae 7B6A     		ldr	r3, [r7, #36]
 7804 00b0 DA6A     		ldr	r2, [r3, #44]
 7805 00b2 1346     		mov	r3, r2
ARM GAS  /tmp/ccpNfLZa.s 			page 231


 7806 00b4 9B00     		lsls	r3, r3, #2
 7807 00b6 1344     		add	r3, r3, r2
 7808 00b8 9B00     		lsls	r3, r3, #2
 7809 00ba 164A     		ldr	r2, .L505+8
 7810 00bc 1A44     		add	r2, r2, r3
 7811 00be 7B6A     		ldr	r3, [r7, #36]
 7812 00c0 0433     		adds	r3, r3, #4
 7813 00c2 1946     		mov	r1, r3
 7814 00c4 1046     		mov	r0, r2
 7815 00c6 FFF7FEFF 		bl	vListInsertEnd
 7816 00ca 05E0     		b	.L503
 7817              	.L501:
5076:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5077:./Libraries/FreeRTOS/Source/tasks.c **** 				else
5078:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5079:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:./Libraries/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:./Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7818              		.loc 1 5081 6 is_stmt 1
 7819 00cc 7B6A     		ldr	r3, [r7, #36]
 7820 00ce 1833     		adds	r3, r3, #24
 7821 00d0 1946     		mov	r1, r3
 7822 00d2 1148     		ldr	r0, .L505+12
 7823 00d4 FFF7FEFF 		bl	vListInsertEnd
 7824              	.L503:
5082:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5083:./Libraries/FreeRTOS/Source/tasks.c **** 
5084:./Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7825              		.loc 1 5084 14
 7826 00d8 7B6A     		ldr	r3, [r7, #36]
 7827 00da DA6A     		ldr	r2, [r3, #44]
 7828              		.loc 1 5084 41
 7829 00dc 0F4B     		ldr	r3, .L505+16
 7830 00de 1B68     		ldr	r3, [r3]
 7831 00e0 DB6A     		ldr	r3, [r3, #44]
 7832              		.loc 1 5084 7
 7833 00e2 9A42     		cmp	r2, r3
 7834 00e4 08D9     		bls	.L498
5085:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5086:./Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:./Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:./Libraries/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7835              		.loc 1 5088 8
 7836 00e6 3B68     		ldr	r3, [r7]
 7837 00e8 002B     		cmp	r3, #0
 7838 00ea 02D0     		beq	.L504
5089:./Libraries/FreeRTOS/Source/tasks.c **** 					{
5090:./Libraries/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7839              		.loc 1 5090 34
 7840 00ec 3B68     		ldr	r3, [r7]
 7841 00ee 0122     		movs	r2, #1
 7842 00f0 1A60     		str	r2, [r3]
 7843              	.L504:
5091:./Libraries/FreeRTOS/Source/tasks.c **** 					}
5092:./Libraries/FreeRTOS/Source/tasks.c **** 
5093:./Libraries/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:./Libraries/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
ARM GAS  /tmp/ccpNfLZa.s 			page 232


5095:./Libraries/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:./Libraries/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7844              		.loc 1 5096 20
 7845 00f2 0B4B     		ldr	r3, .L505+20
 7846 00f4 0122     		movs	r2, #1
 7847 00f6 1A60     		str	r2, [r3]
 7848              	.L498:
 7849 00f8 3B6A     		ldr	r3, [r7, #32]
 7850 00fa BB60     		str	r3, [r7, #8]
 7851              	.LBB238:
 7852              	.LBB239:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7853              		.loc 2 229 2
 7854 00fc BB68     		ldr	r3, [r7, #8]
 7855              		.syntax unified
 7856              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7857 00fe 83F31188 			msr basepri, r3	
 7858              	@ 0 "" 2
 7859              		.loc 2 233 1
 7860              		.thumb
 7861              		.syntax unified
 7862 0102 00BF     		nop
 7863              	.LBE239:
 7864              	.LBE238:
5097:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5098:./Libraries/FreeRTOS/Source/tasks.c **** 				else
5099:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5100:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5102:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5103:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5104:./Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 7865              		.loc 1 5105 2
 7866 0104 00BF     		nop
 7867 0106 2837     		adds	r7, r7, #40
 7868              	.LCFI299:
 7869              		.cfi_def_cfa_offset 8
 7870 0108 BD46     		mov	sp, r7
 7871              	.LCFI300:
 7872              		.cfi_def_cfa_register 13
 7873              		@ sp needed
 7874 010a 80BD     		pop	{r7, pc}
 7875              	.L506:
 7876              		.align	2
 7877              	.L505:
 7878 010c 00000000 		.word	uxSchedulerSuspended
 7879 0110 00000000 		.word	uxTopReadyPriority
 7880 0114 00000000 		.word	pxReadyTasksLists
 7881 0118 00000000 		.word	xPendingReadyList
 7882 011c 00000000 		.word	pxCurrentTCB
 7883 0120 00000000 		.word	xYieldPending
 7884              		.cfi_endproc
 7885              	.LFE62:
 7887              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7888              		.align	1
 7889              		.global	xTaskNotifyStateClear
ARM GAS  /tmp/ccpNfLZa.s 			page 233


 7890              		.syntax unified
 7891              		.thumb
 7892              		.thumb_func
 7893              		.fpu fpv5-d16
 7895              	xTaskNotifyStateClear:
 7896              	.LFB63:
5106:./Libraries/FreeRTOS/Source/tasks.c **** 
5107:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:./Libraries/FreeRTOS/Source/tasks.c **** 
5110:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:./Libraries/FreeRTOS/Source/tasks.c **** 
5112:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 7897              		.loc 1 5113 2
 7898              		.cfi_startproc
 7899              		@ args = 0, pretend = 0, frame = 16
 7900              		@ frame_needed = 1, uses_anonymous_args = 0
 7901 0000 80B5     		push	{r7, lr}
 7902              	.LCFI301:
 7903              		.cfi_def_cfa_offset 8
 7904              		.cfi_offset 7, -8
 7905              		.cfi_offset 14, -4
 7906 0002 84B0     		sub	sp, sp, #16
 7907              	.LCFI302:
 7908              		.cfi_def_cfa_offset 24
 7909 0004 00AF     		add	r7, sp, #0
 7910              	.LCFI303:
 7911              		.cfi_def_cfa_register 7
 7912 0006 7860     		str	r0, [r7, #4]
5114:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:./Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:./Libraries/FreeRTOS/Source/tasks.c **** 
5117:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:./Libraries/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7913              		.loc 1 5119 11
 7914 0008 7B68     		ldr	r3, [r7, #4]
 7915 000a 002B     		cmp	r3, #0
 7916 000c 02D1     		bne	.L508
 7917              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7918 000e 0E4B     		ldr	r3, .L513
 7919 0010 1B68     		ldr	r3, [r3]
 7920 0012 00E0     		b	.L509
 7921              	.L508:
 7922              		.loc 1 5119 11 discriminator 2
 7923 0014 7B68     		ldr	r3, [r7, #4]
 7924              	.L509:
 7925              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7926 0016 BB60     		str	r3, [r7, #8]
5120:./Libraries/FreeRTOS/Source/tasks.c **** 
5121:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7927              		.loc 1 5121 3 discriminator 4
 7928 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5123:./Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7929              		.loc 1 5123 13 discriminator 4
ARM GAS  /tmp/ccpNfLZa.s 			page 234


 7930 001c BB68     		ldr	r3, [r7, #8]
 7931 001e 93F85830 		ldrb	r3, [r3, #88]
 7932 0022 DBB2     		uxtb	r3, r3
 7933              		.loc 1 5123 6 discriminator 4
 7934 0024 022B     		cmp	r3, #2
 7935 0026 06D1     		bne	.L510
5124:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5125:./Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7936              		.loc 1 5125 26
 7937 0028 BB68     		ldr	r3, [r7, #8]
 7938 002a 0022     		movs	r2, #0
 7939 002c 83F85820 		strb	r2, [r3, #88]
5126:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7940              		.loc 1 5126 13
 7941 0030 0123     		movs	r3, #1
 7942 0032 FB60     		str	r3, [r7, #12]
 7943 0034 01E0     		b	.L511
 7944              	.L510:
5127:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5128:./Libraries/FreeRTOS/Source/tasks.c **** 			else
5129:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5130:./Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7945              		.loc 1 5130 13
 7946 0036 0023     		movs	r3, #0
 7947 0038 FB60     		str	r3, [r7, #12]
 7948              	.L511:
5131:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5132:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5133:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7949              		.loc 1 5133 3
 7950 003a FFF7FEFF 		bl	vPortExitCritical
5134:./Libraries/FreeRTOS/Source/tasks.c **** 
5135:./Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7951              		.loc 1 5135 10
 7952 003e FB68     		ldr	r3, [r7, #12]
5136:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 7953              		.loc 1 5136 2
 7954 0040 1846     		mov	r0, r3
 7955 0042 1037     		adds	r7, r7, #16
 7956              	.LCFI304:
 7957              		.cfi_def_cfa_offset 8
 7958 0044 BD46     		mov	sp, r7
 7959              	.LCFI305:
 7960              		.cfi_def_cfa_register 13
 7961              		@ sp needed
 7962 0046 80BD     		pop	{r7, pc}
 7963              	.L514:
 7964              		.align	2
 7965              	.L513:
 7966 0048 00000000 		.word	pxCurrentTCB
 7967              		.cfi_endproc
 7968              	.LFE63:
 7970              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7971              		.align	1
 7972              		.global	ulTaskNotifyValueClear
 7973              		.syntax unified
 7974              		.thumb
ARM GAS  /tmp/ccpNfLZa.s 			page 235


 7975              		.thumb_func
 7976              		.fpu fpv5-d16
 7978              	ulTaskNotifyValueClear:
 7979              	.LFB64:
5137:./Libraries/FreeRTOS/Source/tasks.c **** 
5138:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:./Libraries/FreeRTOS/Source/tasks.c **** 
5141:./Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:./Libraries/FreeRTOS/Source/tasks.c **** 
5143:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:./Libraries/FreeRTOS/Source/tasks.c **** 	{
 7980              		.loc 1 5144 2
 7981              		.cfi_startproc
 7982              		@ args = 0, pretend = 0, frame = 16
 7983              		@ frame_needed = 1, uses_anonymous_args = 0
 7984 0000 80B5     		push	{r7, lr}
 7985              	.LCFI306:
 7986              		.cfi_def_cfa_offset 8
 7987              		.cfi_offset 7, -8
 7988              		.cfi_offset 14, -4
 7989 0002 84B0     		sub	sp, sp, #16
 7990              	.LCFI307:
 7991              		.cfi_def_cfa_offset 24
 7992 0004 00AF     		add	r7, sp, #0
 7993              	.LCFI308:
 7994              		.cfi_def_cfa_register 7
 7995 0006 7860     		str	r0, [r7, #4]
 7996 0008 3960     		str	r1, [r7]
5145:./Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:./Libraries/FreeRTOS/Source/tasks.c **** 
5148:./Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:./Libraries/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:./Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7997              		.loc 1 5150 11
 7998 000a 7B68     		ldr	r3, [r7, #4]
 7999 000c 002B     		cmp	r3, #0
 8000 000e 02D1     		bne	.L516
 8001              		.loc 1 5150 11 is_stmt 0 discriminator 1
 8002 0010 0C4B     		ldr	r3, .L519
 8003 0012 1B68     		ldr	r3, [r3]
 8004 0014 00E0     		b	.L517
 8005              	.L516:
 8006              		.loc 1 5150 11 discriminator 2
 8007 0016 7B68     		ldr	r3, [r7, #4]
 8008              	.L517:
 8009              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8010 0018 FB60     		str	r3, [r7, #12]
5151:./Libraries/FreeRTOS/Source/tasks.c **** 
5152:./Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8011              		.loc 1 5152 3 discriminator 4
 8012 001a FFF7FEFF 		bl	vPortEnterCritical
5153:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5154:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:./Libraries/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:./Libraries/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
ARM GAS  /tmp/ccpNfLZa.s 			page 236


 8013              		.loc 1 5156 27 discriminator 4
 8014 001e 094B     		ldr	r3, .L519
 8015 0020 1B68     		ldr	r3, [r3]
 8016              		.loc 1 5156 13 discriminator 4
 8017 0022 5B6D     		ldr	r3, [r3, #84]
 8018 0024 BB60     		str	r3, [r7, #8]
5157:./Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8019              		.loc 1 5157 27 discriminator 4
 8020 0026 FB68     		ldr	r3, [r7, #12]
 8021 0028 5A6D     		ldr	r2, [r3, #84]
 8022              		.loc 1 5157 30 discriminator 4
 8023 002a 3B68     		ldr	r3, [r7]
 8024 002c DB43     		mvns	r3, r3
 8025              		.loc 1 5157 27 discriminator 4
 8026 002e 1A40     		ands	r2, r2, r3
 8027 0030 FB68     		ldr	r3, [r7, #12]
 8028 0032 5A65     		str	r2, [r3, #84]
5158:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5159:./Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8029              		.loc 1 5159 3 discriminator 4
 8030 0034 FFF7FEFF 		bl	vPortExitCritical
5160:./Libraries/FreeRTOS/Source/tasks.c **** 
5161:./Libraries/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8031              		.loc 1 5161 10 discriminator 4
 8032 0038 BB68     		ldr	r3, [r7, #8]
5162:./Libraries/FreeRTOS/Source/tasks.c **** 	}
 8033              		.loc 1 5162 2 discriminator 4
 8034 003a 1846     		mov	r0, r3
 8035 003c 1037     		adds	r7, r7, #16
 8036              	.LCFI309:
 8037              		.cfi_def_cfa_offset 8
 8038 003e BD46     		mov	sp, r7
 8039              	.LCFI310:
 8040              		.cfi_def_cfa_register 13
 8041              		@ sp needed
 8042 0040 80BD     		pop	{r7, pc}
 8043              	.L520:
 8044 0042 00BF     		.align	2
 8045              	.L519:
 8046 0044 00000000 		.word	pxCurrentTCB
 8047              		.cfi_endproc
 8048              	.LFE64:
 8050              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8051              		.align	1
 8052              		.syntax unified
 8053              		.thumb
 8054              		.thumb_func
 8055              		.fpu fpv5-d16
 8057              	prvAddCurrentTaskToDelayedList:
 8058              	.LFB65:
5163:./Libraries/FreeRTOS/Source/tasks.c **** 
5164:./Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:./Libraries/FreeRTOS/Source/tasks.c **** 
5167:./Libraries/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:./Libraries/FreeRTOS/Source/tasks.c **** 
5169:./Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
ARM GAS  /tmp/ccpNfLZa.s 			page 237


5170:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5171:./Libraries/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:./Libraries/FreeRTOS/Source/tasks.c **** 	}
5173:./Libraries/FreeRTOS/Source/tasks.c **** 
5174:./Libraries/FreeRTOS/Source/tasks.c **** #endif
5175:./Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:./Libraries/FreeRTOS/Source/tasks.c **** 
5177:./Libraries/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:./Libraries/FreeRTOS/Source/tasks.c **** {
 8059              		.loc 1 5178 1
 8060              		.cfi_startproc
 8061              		@ args = 0, pretend = 0, frame = 16
 8062              		@ frame_needed = 1, uses_anonymous_args = 0
 8063 0000 80B5     		push	{r7, lr}
 8064              	.LCFI311:
 8065              		.cfi_def_cfa_offset 8
 8066              		.cfi_offset 7, -8
 8067              		.cfi_offset 14, -4
 8068 0002 84B0     		sub	sp, sp, #16
 8069              	.LCFI312:
 8070              		.cfi_def_cfa_offset 24
 8071 0004 00AF     		add	r7, sp, #0
 8072              	.LCFI313:
 8073              		.cfi_def_cfa_register 7
 8074 0006 7860     		str	r0, [r7, #4]
 8075 0008 3960     		str	r1, [r7]
5179:./Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:./Libraries/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8076              		.loc 1 5180 18
 8077 000a 214B     		ldr	r3, .L526
 8078 000c 1B68     		ldr	r3, [r3]
 8079 000e FB60     		str	r3, [r7, #12]
5181:./Libraries/FreeRTOS/Source/tasks.c **** 
5182:./Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5184:./Libraries/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:./Libraries/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:./Libraries/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:./Libraries/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:./Libraries/FreeRTOS/Source/tasks.c **** 	}
5189:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif
5190:./Libraries/FreeRTOS/Source/tasks.c **** 
5191:./Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:./Libraries/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:./Libraries/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8080              		.loc 1 5193 35
 8081 0010 204B     		ldr	r3, .L526+4
 8082 0012 1B68     		ldr	r3, [r3]
 8083              		.loc 1 5193 6
 8084 0014 0433     		adds	r3, r3, #4
 8085 0016 1846     		mov	r0, r3
 8086 0018 FFF7FEFF 		bl	uxListRemove
5194:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5195:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:./Libraries/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:./Libraries/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:./Libraries/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccpNfLZa.s 			page 238


5199:./Libraries/FreeRTOS/Source/tasks.c **** 	else
5200:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5201:./Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:./Libraries/FreeRTOS/Source/tasks.c **** 	}
5203:./Libraries/FreeRTOS/Source/tasks.c **** 
5204:./Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5206:./Libraries/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8087              		.loc 1 5206 5
 8088 001c 7B68     		ldr	r3, [r7, #4]
 8089 001e B3F1FF3F 		cmp	r3, #-1
 8090 0022 0AD1     		bne	.L522
 8091              		.loc 1 5206 41 discriminator 1
 8092 0024 3B68     		ldr	r3, [r7]
 8093 0026 002B     		cmp	r3, #0
 8094 0028 07D0     		beq	.L522
5207:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5208:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:./Libraries/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:./Libraries/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:./Libraries/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8095              		.loc 1 5211 56
 8096 002a 1A4B     		ldr	r3, .L526+4
 8097 002c 1B68     		ldr	r3, [r3]
 8098              		.loc 1 5211 4
 8099 002e 0433     		adds	r3, r3, #4
 8100 0030 1946     		mov	r1, r3
 8101 0032 1948     		ldr	r0, .L526+8
 8102 0034 FFF7FEFF 		bl	vListInsertEnd
5212:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5213:./Libraries/FreeRTOS/Source/tasks.c **** 		else
5214:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5215:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:./Libraries/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:./Libraries/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:./Libraries/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:./Libraries/FreeRTOS/Source/tasks.c **** 
5220:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:./Libraries/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:./Libraries/FreeRTOS/Source/tasks.c **** 
5223:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5225:./Libraries/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:./Libraries/FreeRTOS/Source/tasks.c **** 				list. */
5227:./Libraries/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5229:./Libraries/FreeRTOS/Source/tasks.c **** 			else
5230:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5231:./Libraries/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:./Libraries/FreeRTOS/Source/tasks.c **** 				is used. */
5233:./Libraries/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:./Libraries/FreeRTOS/Source/tasks.c **** 
5235:./Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:./Libraries/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:./Libraries/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:./Libraries/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:./Libraries/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccpNfLZa.s 			page 239


5240:./Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5242:./Libraries/FreeRTOS/Source/tasks.c **** 				else
5243:./Libraries/FreeRTOS/Source/tasks.c **** 				{
5244:./Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:./Libraries/FreeRTOS/Source/tasks.c **** 				}
5246:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5247:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5248:./Libraries/FreeRTOS/Source/tasks.c **** 	}
5249:./Libraries/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:./Libraries/FreeRTOS/Source/tasks.c **** 	{
5251:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:./Libraries/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:./Libraries/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:./Libraries/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:./Libraries/FreeRTOS/Source/tasks.c **** 
5256:./Libraries/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:./Libraries/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:./Libraries/FreeRTOS/Source/tasks.c **** 
5259:./Libraries/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5261:./Libraries/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:./Libraries/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5264:./Libraries/FreeRTOS/Source/tasks.c **** 		else
5265:./Libraries/FreeRTOS/Source/tasks.c **** 		{
5266:./Libraries/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:./Libraries/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:./Libraries/FreeRTOS/Source/tasks.c **** 
5269:./Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:./Libraries/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:./Libraries/FreeRTOS/Source/tasks.c **** 			too. */
5272:./Libraries/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5274:./Libraries/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5276:./Libraries/FreeRTOS/Source/tasks.c **** 			else
5277:./Libraries/FreeRTOS/Source/tasks.c **** 			{
5278:./Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:./Libraries/FreeRTOS/Source/tasks.c **** 			}
5280:./Libraries/FreeRTOS/Source/tasks.c **** 		}
5281:./Libraries/FreeRTOS/Source/tasks.c **** 
5282:./Libraries/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:./Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:./Libraries/FreeRTOS/Source/tasks.c **** 	}
5285:./Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:./Libraries/FreeRTOS/Source/tasks.c **** }
 8103              		.loc 1 5286 1
 8104 0038 26E0     		b	.L525
 8105              	.L522:
5218:./Libraries/FreeRTOS/Source/tasks.c **** 
 8106              		.loc 1 5218 16
 8107 003a FA68     		ldr	r2, [r7, #12]
 8108 003c 7B68     		ldr	r3, [r7, #4]
 8109 003e 1344     		add	r3, r3, r2
 8110 0040 BB60     		str	r3, [r7, #8]
5221:./Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccpNfLZa.s 			page 240


 8111              		.loc 1 5221 4
 8112 0042 144B     		ldr	r3, .L526+4
 8113 0044 1B68     		ldr	r3, [r3]
 8114 0046 BA68     		ldr	r2, [r7, #8]
 8115 0048 5A60     		str	r2, [r3, #4]
5223:./Libraries/FreeRTOS/Source/tasks.c **** 			{
 8116              		.loc 1 5223 6
 8117 004a BA68     		ldr	r2, [r7, #8]
 8118 004c FB68     		ldr	r3, [r7, #12]
 8119 004e 9A42     		cmp	r2, r3
 8120 0050 09D2     		bcs	.L524
5227:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 8121              		.loc 1 5227 5
 8122 0052 124B     		ldr	r3, .L526+12
 8123 0054 1A68     		ldr	r2, [r3]
5227:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 8124              		.loc 1 5227 60
 8125 0056 0F4B     		ldr	r3, .L526+4
 8126 0058 1B68     		ldr	r3, [r3]
5227:./Libraries/FreeRTOS/Source/tasks.c **** 			}
 8127              		.loc 1 5227 5
 8128 005a 0433     		adds	r3, r3, #4
 8129 005c 1946     		mov	r1, r3
 8130 005e 1046     		mov	r0, r2
 8131 0060 FFF7FEFF 		bl	vListInsert
 8132              		.loc 1 5286 1
 8133 0064 10E0     		b	.L525
 8134              	.L524:
5233:./Libraries/FreeRTOS/Source/tasks.c **** 
 8135              		.loc 1 5233 5
 8136 0066 0E4B     		ldr	r3, .L526+16
 8137 0068 1A68     		ldr	r2, [r3]
5233:./Libraries/FreeRTOS/Source/tasks.c **** 
 8138              		.loc 1 5233 52
 8139 006a 0A4B     		ldr	r3, .L526+4
 8140 006c 1B68     		ldr	r3, [r3]
5233:./Libraries/FreeRTOS/Source/tasks.c **** 
 8141              		.loc 1 5233 5
 8142 006e 0433     		adds	r3, r3, #4
 8143 0070 1946     		mov	r1, r3
 8144 0072 1046     		mov	r0, r2
 8145 0074 FFF7FEFF 		bl	vListInsert
5238:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 8146              		.loc 1 5238 21
 8147 0078 0A4B     		ldr	r3, .L526+20
 8148 007a 1B68     		ldr	r3, [r3]
5238:./Libraries/FreeRTOS/Source/tasks.c **** 				{
 8149              		.loc 1 5238 7
 8150 007c BA68     		ldr	r2, [r7, #8]
 8151 007e 9A42     		cmp	r2, r3
 8152 0080 02D2     		bcs	.L525
5240:./Libraries/FreeRTOS/Source/tasks.c **** 				}
 8153              		.loc 1 5240 27
 8154 0082 084A     		ldr	r2, .L526+20
 8155 0084 BB68     		ldr	r3, [r7, #8]
 8156 0086 1360     		str	r3, [r2]
 8157              	.L525:
ARM GAS  /tmp/ccpNfLZa.s 			page 241


 8158              		.loc 1 5286 1
 8159 0088 00BF     		nop
 8160 008a 1037     		adds	r7, r7, #16
 8161              	.LCFI314:
 8162              		.cfi_def_cfa_offset 8
 8163 008c BD46     		mov	sp, r7
 8164              	.LCFI315:
 8165              		.cfi_def_cfa_register 13
 8166              		@ sp needed
 8167 008e 80BD     		pop	{r7, pc}
 8168              	.L527:
 8169              		.align	2
 8170              	.L526:
 8171 0090 00000000 		.word	xTickCount
 8172 0094 00000000 		.word	pxCurrentTCB
 8173 0098 00000000 		.word	xSuspendedTaskList
 8174 009c 00000000 		.word	pxOverflowDelayedTaskList
 8175 00a0 00000000 		.word	pxDelayedTaskList
 8176 00a4 00000000 		.word	xNextTaskUnblockTime
 8177              		.cfi_endproc
 8178              	.LFE65:
 8180              		.text
 8181              	.Letext0:
 8182              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 8183              		.file 4 "/usr/include/newlib/sys/_types.h"
 8184              		.file 5 "/usr/include/newlib/sys/reent.h"
 8185              		.file 6 "/usr/include/newlib/sys/lock.h"
 8186              		.file 7 "/usr/include/newlib/stdlib.h"
 8187              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 8188              		.file 9 "./User/code/Inc/FreeRTOSConfig.h"
 8189              		.file 10 "./Libraries/FreeRTOS/Source/include/projdefs.h"
 8190              		.file 11 "./Libraries/FreeRTOS/Source/include/FreeRTOS.h"
 8191              		.file 12 "./Libraries/FreeRTOS/Source/include/list.h"
 8192              		.file 13 "./Libraries/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccpNfLZa.s 			page 242


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccpNfLZa.s:21     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccpNfLZa.s:18     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccpNfLZa.s:24     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccpNfLZa.s:27     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccpNfLZa.s:30     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccpNfLZa.s:33     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccpNfLZa.s:36     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccpNfLZa.s:39     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccpNfLZa.s:42     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccpNfLZa.s:45     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccpNfLZa.s:48     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccpNfLZa.s:51     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccpNfLZa.s:54     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccpNfLZa.s:57     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccpNfLZa.s:60     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccpNfLZa.s:63     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccpNfLZa.s:66     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccpNfLZa.s:69     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccpNfLZa.s:72     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccpNfLZa.s:75     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccpNfLZa.s:78     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccpNfLZa.s:81     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccpNfLZa.s:84     .bss.xTickCount:0000000000000000 $d
     /tmp/ccpNfLZa.s:87     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccpNfLZa.s:90     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccpNfLZa.s:93     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccpNfLZa.s:96     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccpNfLZa.s:99     .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccpNfLZa.s:102    .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccpNfLZa.s:105    .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccpNfLZa.s:108    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccpNfLZa.s:111    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccpNfLZa.s:114    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccpNfLZa.s:117    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccpNfLZa.s:120    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccpNfLZa.s:123    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccpNfLZa.s:126    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccpNfLZa.s:129    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccpNfLZa.s:132    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccpNfLZa.s:135    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccpNfLZa.s:138    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccpNfLZa.s:141    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccpNfLZa.s:144    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccpNfLZa.s:152    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccpNfLZa.s:439    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccpNfLZa.s:657    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccpNfLZa.s:318    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccpNfLZa.s:325    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccpNfLZa.s:433    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccpNfLZa.s:651    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccpNfLZa.s:5163   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccpNfLZa.s:807    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/ccpNfLZa.s:818    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccpNfLZa.s:825    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccpNfLZa.s:5789   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
ARM GAS  /tmp/ccpNfLZa.s 			page 243


     /tmp/ccpNfLZa.s:5884   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccpNfLZa.s:984    .text.vTaskDelete:00000000000000c4 $d
     /tmp/ccpNfLZa.s:996    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccpNfLZa.s:1003   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccpNfLZa.s:2792   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccpNfLZa.s:8057   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccpNfLZa.s:2839   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccpNfLZa.s:1210   .text.vTaskDelayUntil:00000000000000f0 $d
     /tmp/ccpNfLZa.s:1217   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccpNfLZa.s:1224   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccpNfLZa.s:1317   .text.vTaskDelay:0000000000000060 $d
     /tmp/ccpNfLZa.s:1323   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccpNfLZa.s:1330   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccpNfLZa.s:1488   .text.eTaskGetState:00000000000000b8 $d
     /tmp/ccpNfLZa.s:1497   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccpNfLZa.s:1504   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccpNfLZa.s:1559   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccpNfLZa.s:1564   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccpNfLZa.s:1571   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccpNfLZa.s:1662   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccpNfLZa.s:1667   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccpNfLZa.s:1674   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccpNfLZa.s:1904   .text.vTaskPrioritySet:000000000000012c $d
     /tmp/ccpNfLZa.s:1912   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccpNfLZa.s:1919   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccpNfLZa.s:3862   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccpNfLZa.s:2091   .text.vTaskSuspend:00000000000000d4 $d
     /tmp/ccpNfLZa.s:2101   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccpNfLZa.s:2107   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccpNfLZa.s:2200   .text.prvTaskIsTaskSuspended:000000000000005c $d
     /tmp/ccpNfLZa.s:2206   .text.vTaskResume:0000000000000000 $t
     /tmp/ccpNfLZa.s:2213   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccpNfLZa.s:2352   .text.vTaskResume:00000000000000ac $d
     /tmp/ccpNfLZa.s:2360   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccpNfLZa.s:2367   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccpNfLZa.s:2540   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccpNfLZa.s:2549   .rodata:0000000000000000 $d
     /tmp/ccpNfLZa.s:2553   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccpNfLZa.s:2560   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccpNfLZa.s:2709   .text.vTaskStartScheduler:00000000000000b4 $d
     /tmp/ccpNfLZa.s:5106   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccpNfLZa.s:2719   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccpNfLZa.s:2726   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccpNfLZa.s:2780   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccpNfLZa.s:2785   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccpNfLZa.s:2827   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccpNfLZa.s:2832   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccpNfLZa.s:3594   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccpNfLZa.s:3058   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccpNfLZa.s:3071   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccpNfLZa.s:3078   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccpNfLZa.s:3118   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccpNfLZa.s:3123   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccpNfLZa.s:3130   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccpNfLZa.s:3171   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccpNfLZa.s:3176   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccpNfLZa.s:3183   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
ARM GAS  /tmp/ccpNfLZa.s 			page 244


     /tmp/ccpNfLZa.s:3214   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccpNfLZa.s:3219   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccpNfLZa.s:3226   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccpNfLZa.s:3304   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccpNfLZa.s:3309   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccpNfLZa.s:3316   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccpNfLZa.s:5517   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccpNfLZa.s:3489   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/ccpNfLZa.s:3499   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccpNfLZa.s:3506   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccpNfLZa.s:3581   .text.xTaskCatchUpTicks:000000000000004c $d
     /tmp/ccpNfLZa.s:3587   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccpNfLZa.s:3840   .text.xTaskIncrementTick:0000000000000148 $d
     /tmp/ccpNfLZa.s:3855   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccpNfLZa.s:4002   .text.vTaskSwitchContext:00000000000000a8 $d
     /tmp/ccpNfLZa.s:4011   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccpNfLZa.s:4018   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccpNfLZa.s:4088   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccpNfLZa.s:4093   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccpNfLZa.s:4100   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccpNfLZa.s:4204   .text.vTaskPlaceOnUnorderedEventList:0000000000000070 $d
     /tmp/ccpNfLZa.s:4210   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccpNfLZa.s:4217   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccpNfLZa.s:4296   .text.vTaskPlaceOnEventListRestricted:0000000000000054 $d
     /tmp/ccpNfLZa.s:4301   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccpNfLZa.s:4308   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccpNfLZa.s:4448   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccpNfLZa.s:4458   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccpNfLZa.s:4465   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccpNfLZa.s:4609   .text.vTaskRemoveFromUnorderedEventList:00000000000000b0 $d
     /tmp/ccpNfLZa.s:4618   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccpNfLZa.s:4625   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccpNfLZa.s:4696   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccpNfLZa.s:4702   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccpNfLZa.s:4709   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccpNfLZa.s:4754   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccpNfLZa.s:4760   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccpNfLZa.s:4767   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccpNfLZa.s:4932   .text.xTaskCheckForTimeOut:00000000000000bc $d
     /tmp/ccpNfLZa.s:4938   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccpNfLZa.s:4945   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccpNfLZa.s:4977   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccpNfLZa.s:4982   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccpNfLZa.s:4989   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccpNfLZa.s:5044   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccpNfLZa.s:5051   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccpNfLZa.s:5100   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccpNfLZa.s:5259   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccpNfLZa.s:5151   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccpNfLZa.s:5157   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccpNfLZa.s:5241   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccpNfLZa.s:5253   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccpNfLZa.s:5332   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccpNfLZa.s:5339   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccpNfLZa.s:5346   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccpNfLZa.s:5650   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccpNfLZa.s:5506   .text.vTaskGetInfo:00000000000000c8 $d
ARM GAS  /tmp/ccpNfLZa.s 			page 245


     /tmp/ccpNfLZa.s:5511   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccpNfLZa.s:5644   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccpNfLZa.s:5714   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccpNfLZa.s:5721   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccpNfLZa.s:5778   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/ccpNfLZa.s:5783   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccpNfLZa.s:5878   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccpNfLZa.s:5946   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccpNfLZa.s:5952   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccpNfLZa.s:5959   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccpNfLZa.s:5999   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccpNfLZa.s:6004   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccpNfLZa.s:6011   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccpNfLZa.s:6073   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccpNfLZa.s:6079   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccpNfLZa.s:6086   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccpNfLZa.s:6235   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/ccpNfLZa.s:6242   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccpNfLZa.s:6249   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccpNfLZa.s:6417   .text.xTaskPriorityDisinherit:00000000000000d0 $d
     /tmp/ccpNfLZa.s:6424   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccpNfLZa.s:6431   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccpNfLZa.s:6625   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f8 $d
     /tmp/ccpNfLZa.s:6632   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccpNfLZa.s:6639   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccpNfLZa.s:6689   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccpNfLZa.s:6694   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccpNfLZa.s:6701   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccpNfLZa.s:6746   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccpNfLZa.s:6751   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccpNfLZa.s:6758   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccpNfLZa.s:6872   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccpNfLZa.s:6878   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccpNfLZa.s:6885   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccpNfLZa.s:7020   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccpNfLZa.s:7026   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccpNfLZa.s:7033   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccpNfLZa.s:7116   .text.xTaskGenericNotify:0000000000000064 $d
     /tmp/ccpNfLZa.s:7121   .text.xTaskGenericNotify:0000000000000078 $t
     /tmp/ccpNfLZa.s:7305   .text.xTaskGenericNotify:0000000000000160 $d
     /tmp/ccpNfLZa.s:7313   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccpNfLZa.s:7320   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccpNfLZa.s:7425   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccpNfLZa.s:7430   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccpNfLZa.s:7643   .text.xTaskGenericNotifyFromISR:00000000000001a0 $d
     /tmp/ccpNfLZa.s:7653   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccpNfLZa.s:7660   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccpNfLZa.s:7878   .text.vTaskNotifyGiveFromISR:000000000000010c $d
     /tmp/ccpNfLZa.s:7888   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccpNfLZa.s:7895   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccpNfLZa.s:7966   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccpNfLZa.s:7971   .text.ulTaskNotifyValueClear:0000000000000000 $t
     /tmp/ccpNfLZa.s:7978   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
     /tmp/ccpNfLZa.s:8046   .text.ulTaskNotifyValueClear:0000000000000044 $d
     /tmp/ccpNfLZa.s:8051   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccpNfLZa.s:8171   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d

ARM GAS  /tmp/ccpNfLZa.s 			page 246


UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
