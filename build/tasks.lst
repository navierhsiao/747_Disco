ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	prvAddNewTaskToReadyList:
  26              	.LVL0:
  27              	.LFB7:
  28              		.file 1 ".//Libraries/FreeRTOS/Source/tasks.c"
   1:.//Libraries/FreeRTOS/Source/tasks.c **** /*
   2:.//Libraries/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:.//Libraries/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.//Libraries/FreeRTOS/Source/tasks.c ****  *
   5:.//Libraries/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.//Libraries/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:.//Libraries/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:.//Libraries/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.//Libraries/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.//Libraries/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:.//Libraries/FreeRTOS/Source/tasks.c ****  *
  12:.//Libraries/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:.//Libraries/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:.//Libraries/FreeRTOS/Source/tasks.c ****  *
  15:.//Libraries/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.//Libraries/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.//Libraries/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.//Libraries/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.//Libraries/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.//Libraries/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.//Libraries/FreeRTOS/Source/tasks.c ****  *
  22:.//Libraries/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:.//Libraries/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:.//Libraries/FreeRTOS/Source/tasks.c ****  *
  25:.//Libraries/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:.//Libraries/FreeRTOS/Source/tasks.c ****  */
  27:.//Libraries/FreeRTOS/Source/tasks.c **** 
  28:.//Libraries/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:.//Libraries/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:.//Libraries/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 2


  31:.//Libraries/FreeRTOS/Source/tasks.c **** 
  32:.//Libraries/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:.//Libraries/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:.//Libraries/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:.//Libraries/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:.//Libraries/FreeRTOS/Source/tasks.c **** 
  37:.//Libraries/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:.//Libraries/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:.//Libraries/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:.//Libraries/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:.//Libraries/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:.//Libraries/FreeRTOS/Source/tasks.c **** 
  43:.//Libraries/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:.//Libraries/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:.//Libraries/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:.//Libraries/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:.//Libraries/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:.//Libraries/FreeRTOS/Source/tasks.c **** 
  49:.//Libraries/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:.//Libraries/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:.//Libraries/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:.//Libraries/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:.//Libraries/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:.//Libraries/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:.//Libraries/FreeRTOS/Source/tasks.c **** 
  59:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:.//Libraries/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:.//Libraries/FreeRTOS/Source/tasks.c **** #else
  64:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
  66:.//Libraries/FreeRTOS/Source/tasks.c **** 
  67:.//Libraries/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:.//Libraries/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:.//Libraries/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:.//Libraries/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:.//Libraries/FreeRTOS/Source/tasks.c **** 
  72:.//Libraries/FreeRTOS/Source/tasks.c **** /*
  73:.//Libraries/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:.//Libraries/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:.//Libraries/FreeRTOS/Source/tasks.c ****  */
  76:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:.//Libraries/FreeRTOS/Source/tasks.c **** 
  78:.//Libraries/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:.//Libraries/FreeRTOS/Source/tasks.c **** 
  83:.//Libraries/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:.//Libraries/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:.//Libraries/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:.//Libraries/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 3


  88:.//Libraries/FreeRTOS/Source/tasks.c **** #else
  89:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
  91:.//Libraries/FreeRTOS/Source/tasks.c **** 
  92:.//Libraries/FreeRTOS/Source/tasks.c **** /*
  93:.//Libraries/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:.//Libraries/FreeRTOS/Source/tasks.c ****  */
  95:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:.//Libraries/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:.//Libraries/FreeRTOS/Source/tasks.c **** 
 101:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 102:.//Libraries/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:.//Libraries/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 105:.//Libraries/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define static
 107:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 108:.//Libraries/FreeRTOS/Source/tasks.c **** 
 109:.//Libraries/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:.//Libraries/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:.//Libraries/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 114:.//Libraries/FreeRTOS/Source/tasks.c **** 
 115:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:.//Libraries/FreeRTOS/Source/tasks.c **** 
 117:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:.//Libraries/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:.//Libraries/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:.//Libraries/FreeRTOS/Source/tasks.c **** 
 121:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:.//Libraries/FreeRTOS/Source/tasks.c **** 	state task. */
 123:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:.//Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 125:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:.//Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 127:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:.//Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 129:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:.//Libraries/FreeRTOS/Source/tasks.c **** 
 131:.//Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:.//Libraries/FreeRTOS/Source/tasks.c **** 
 133:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:.//Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 135:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:.//Libraries/FreeRTOS/Source/tasks.c **** 																										\
 137:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:.//Libraries/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:.//Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 140:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:.//Libraries/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:.//Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 143:.//Libraries/FreeRTOS/Source/tasks.c **** 																										\
 144:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 4


 145:.//Libraries/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:.//Libraries/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 150:.//Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:.//Libraries/FreeRTOS/Source/tasks.c **** 
 152:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:.//Libraries/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:.//Libraries/FreeRTOS/Source/tasks.c **** 	being used. */
 155:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:.//Libraries/FreeRTOS/Source/tasks.c **** 
 158:.//Libraries/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:.//Libraries/FreeRTOS/Source/tasks.c **** 
 160:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:.//Libraries/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:.//Libraries/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 164:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:.//Libraries/FreeRTOS/Source/tasks.c **** 
 167:.//Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:.//Libraries/FreeRTOS/Source/tasks.c **** 
 169:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:.//Libraries/FreeRTOS/Source/tasks.c **** 	{																								\
 171:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:.//Libraries/FreeRTOS/Source/tasks.c **** 																									\
 173:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:.//Libraries/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:.//Libraries/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:.//Libraries/FreeRTOS/Source/tasks.c **** 
 179:.//Libraries/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:.//Libraries/FreeRTOS/Source/tasks.c **** 
 181:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:.//Libraries/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:.//Libraries/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:.//Libraries/FreeRTOS/Source/tasks.c **** 	{																									\
 186:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:.//Libraries/FreeRTOS/Source/tasks.c **** 		{																								\
 188:.//Libraries/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:.//Libraries/FreeRTOS/Source/tasks.c **** 		}																								\
 190:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 191:.//Libraries/FreeRTOS/Source/tasks.c **** 
 192:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:.//Libraries/FreeRTOS/Source/tasks.c **** 
 194:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:.//Libraries/FreeRTOS/Source/tasks.c **** 
 196:.//Libraries/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:.//Libraries/FreeRTOS/Source/tasks.c **** count overflows. */
 198:.//Libraries/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:.//Libraries/FreeRTOS/Source/tasks.c **** {																									\
 200:.//Libraries/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:.//Libraries/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 5


 202:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:.//Libraries/FreeRTOS/Source/tasks.c **** 																									\
 205:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:.//Libraries/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:.//Libraries/FreeRTOS/Source/tasks.c **** }
 211:.//Libraries/FreeRTOS/Source/tasks.c **** 
 212:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:.//Libraries/FreeRTOS/Source/tasks.c **** 
 214:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 215:.//Libraries/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:.//Libraries/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 218:.//Libraries/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:.//Libraries/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:.//Libraries/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:.//Libraries/FreeRTOS/Source/tasks.c **** 
 225:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 226:.//Libraries/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:.//Libraries/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:.//Libraries/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:.//Libraries/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 231:.//Libraries/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:.//Libraries/FreeRTOS/Source/tasks.c **** 
 233:.//Libraries/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:.//Libraries/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:.//Libraries/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:.//Libraries/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:.//Libraries/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:.//Libraries/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:.//Libraries/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:.//Libraries/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:.//Libraries/FreeRTOS/Source/tasks.c **** #else
 244:.//Libraries/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 246:.//Libraries/FreeRTOS/Source/tasks.c **** 
 247:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 248:.//Libraries/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:.//Libraries/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:.//Libraries/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 252:.//Libraries/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:.//Libraries/FreeRTOS/Source/tasks.c **** {
 254:.//Libraries/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:.//Libraries/FreeRTOS/Source/tasks.c **** 
 256:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:.//Libraries/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 6


 259:.//Libraries/FreeRTOS/Source/tasks.c **** 
 260:.//Libraries/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:.//Libraries/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:.//Libraries/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:.//Libraries/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:.//Libraries/FreeRTOS/Source/tasks.c **** 
 266:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:.//Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 269:.//Libraries/FreeRTOS/Source/tasks.c **** 
 270:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:.//Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 273:.//Libraries/FreeRTOS/Source/tasks.c **** 
 274:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:.//Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:.//Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 278:.//Libraries/FreeRTOS/Source/tasks.c **** 
 279:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:.//Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:.//Libraries/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 283:.//Libraries/FreeRTOS/Source/tasks.c **** 
 284:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:.//Libraries/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 287:.//Libraries/FreeRTOS/Source/tasks.c **** 
 288:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:.//Libraries/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 291:.//Libraries/FreeRTOS/Source/tasks.c **** 
 292:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:.//Libraries/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 295:.//Libraries/FreeRTOS/Source/tasks.c **** 
 296:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:.//Libraries/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:.//Libraries/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:.//Libraries/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:.//Libraries/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:.//Libraries/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:.//Libraries/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:.//Libraries/FreeRTOS/Source/tasks.c **** 
 305:.//Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:.//Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:.//Libraries/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 309:.//Libraries/FreeRTOS/Source/tasks.c **** 
 310:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:.//Libraries/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:.//Libraries/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 314:.//Libraries/FreeRTOS/Source/tasks.c **** 
 315:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 7


 316:.//Libraries/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:.//Libraries/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 320:.//Libraries/FreeRTOS/Source/tasks.c **** 
 321:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:.//Libraries/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 324:.//Libraries/FreeRTOS/Source/tasks.c **** 
 325:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:.//Libraries/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 328:.//Libraries/FreeRTOS/Source/tasks.c **** 
 329:.//Libraries/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:.//Libraries/FreeRTOS/Source/tasks.c **** 
 331:.//Libraries/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:.//Libraries/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:.//Libraries/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:.//Libraries/FreeRTOS/Source/tasks.c **** 
 335:.//Libraries/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:.//Libraries/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:.//Libraries/FreeRTOS/Source/tasks.c **** 
 339:.//Libraries/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:.//Libraries/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:.//Libraries/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:.//Libraries/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:.//Libraries/FreeRTOS/Source/tasks.c **** 
 350:.//Libraries/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:.//Libraries/FreeRTOS/Source/tasks.c **** 
 352:.//Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:.//Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:.//Libraries/FreeRTOS/Source/tasks.c **** 
 355:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 356:.//Libraries/FreeRTOS/Source/tasks.c **** 
 357:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:.//Libraries/FreeRTOS/Source/tasks.c **** 
 359:.//Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:.//Libraries/FreeRTOS/Source/tasks.c **** 
 361:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 362:.//Libraries/FreeRTOS/Source/tasks.c **** 
 363:.//Libraries/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:.//Libraries/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:.//Libraries/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 368:.//Libraries/FreeRTOS/Source/tasks.c **** 
 369:.//Libraries/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 8


 373:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:.//Libraries/FreeRTOS/Source/tasks.c **** 
 381:.//Libraries/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:.//Libraries/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:.//Libraries/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:.//Libraries/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:.//Libraries/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:.//Libraries/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:.//Libraries/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:.//Libraries/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:.//Libraries/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:.//Libraries/FreeRTOS/Source/tasks.c **** 
 391:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 393:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:.//Libraries/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:.//Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:.//Libraries/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:.//Libraries/FreeRTOS/Source/tasks.c **** 
 398:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 399:.//Libraries/FreeRTOS/Source/tasks.c **** 
 400:.//Libraries/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:.//Libraries/FreeRTOS/Source/tasks.c **** 
 402:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:.//Libraries/FreeRTOS/Source/tasks.c **** 
 404:.//Libraries/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:.//Libraries/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:.//Libraries/FreeRTOS/Source/tasks.c **** 
 407:.//Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:.//Libraries/FreeRTOS/Source/tasks.c **** 
 409:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 410:.//Libraries/FreeRTOS/Source/tasks.c **** 
 411:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:.//Libraries/FreeRTOS/Source/tasks.c **** 
 413:.//Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:.//Libraries/FreeRTOS/Source/tasks.c **** 
 415:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 416:.//Libraries/FreeRTOS/Source/tasks.c **** 
 417:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:.//Libraries/FreeRTOS/Source/tasks.c **** 
 419:.//Libraries/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:.//Libraries/FreeRTOS/Source/tasks.c **** 
 421:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 422:.//Libraries/FreeRTOS/Source/tasks.c **** 
 423:.//Libraries/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:.//Libraries/FreeRTOS/Source/tasks.c **** 
 425:.//Libraries/FreeRTOS/Source/tasks.c **** /**
 426:.//Libraries/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:.//Libraries/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:.//Libraries/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:.//Libraries/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 9


 430:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:.//Libraries/FreeRTOS/Source/tasks.c **** 
 432:.//Libraries/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:.//Libraries/FreeRTOS/Source/tasks.c **** 
 434:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:.//Libraries/FreeRTOS/Source/tasks.c **** 
 436:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 437:.//Libraries/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:.//Libraries/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 440:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:.//Libraries/FreeRTOS/Source/tasks.c **** 
 442:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 443:.//Libraries/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:.//Libraries/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:.//Libraries/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 447:.//Libraries/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:.//Libraries/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 450:.//Libraries/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 452:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 453:.//Libraries/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:.//Libraries/FreeRTOS/Source/tasks.c **** 
 455:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 456:.//Libraries/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:.//Libraries/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 459:.//Libraries/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:.//Libraries/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 462:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:.//Libraries/FreeRTOS/Source/tasks.c **** 
 464:.//Libraries/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:.//Libraries/FreeRTOS/Source/tasks.c **** 
 466:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 467:.//Libraries/FreeRTOS/Source/tasks.c **** 
 468:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 469:.//Libraries/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:.//Libraries/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:.//Libraries/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 473:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:.//Libraries/FreeRTOS/Source/tasks.c **** 
 475:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 476:.//Libraries/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:.//Libraries/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 479:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:.//Libraries/FreeRTOS/Source/tasks.c **** 
 481:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 482:.//Libraries/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:.//Libraries/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:.//Libraries/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 486:.//Libraries/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 10


 487:.//Libraries/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 489:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:.//Libraries/FreeRTOS/Source/tasks.c **** 
 491:.//Libraries/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:.//Libraries/FreeRTOS/Source/tasks.c **** 
 493:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 494:.//Libraries/FreeRTOS/Source/tasks.c **** 
 495:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 496:.//Libraries/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:.//Libraries/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 499:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:.//Libraries/FreeRTOS/Source/tasks.c **** 
 501:.//Libraries/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:.//Libraries/FreeRTOS/Source/tasks.c **** 
 503:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 504:.//Libraries/FreeRTOS/Source/tasks.c **** 
 505:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 506:.//Libraries/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:.//Libraries/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:.//Libraries/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 510:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:.//Libraries/FreeRTOS/Source/tasks.c **** 
 512:.//Libraries/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:.//Libraries/FreeRTOS/Source/tasks.c **** 
 514:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 515:.//Libraries/FreeRTOS/Source/tasks.c **** 
 516:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 517:.//Libraries/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:.//Libraries/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:.//Libraries/FreeRTOS/Source/tasks.c ****  *
 520:.//Libraries/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:.//Libraries/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:.//Libraries/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:.//Libraries/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 525:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:.//Libraries/FreeRTOS/Source/tasks.c **** 
 527:.//Libraries/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:.//Libraries/FreeRTOS/Source/tasks.c **** 
 529:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 530:.//Libraries/FreeRTOS/Source/tasks.c **** 
 531:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 532:.//Libraries/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:.//Libraries/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 535:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:.//Libraries/FreeRTOS/Source/tasks.c **** 
 537:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:.//Libraries/FreeRTOS/Source/tasks.c **** 
 539:.//Libraries/FreeRTOS/Source/tasks.c **** 	/*
 540:.//Libraries/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:.//Libraries/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:.//Libraries/FreeRTOS/Source/tasks.c **** 	 */
 543:.//Libraries/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 11


 544:.//Libraries/FreeRTOS/Source/tasks.c **** 
 545:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 547:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 548:.//Libraries/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:.//Libraries/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 551:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:.//Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:.//Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:.//Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:.//Libraries/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:.//Libraries/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:.//Libraries/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:.//Libraries/FreeRTOS/Source/tasks.c **** 
 560:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 561:.//Libraries/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:.//Libraries/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 564:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:.//Libraries/FreeRTOS/Source/tasks.c **** 
 566:.//Libraries/FreeRTOS/Source/tasks.c **** /*
 567:.//Libraries/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:.//Libraries/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:.//Libraries/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:.//Libraries/FreeRTOS/Source/tasks.c ****  */
 571:.//Libraries/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:.//Libraries/FreeRTOS/Source/tasks.c **** 
 573:.//Libraries/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:.//Libraries/FreeRTOS/Source/tasks.c **** 
 575:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
 576:.//Libraries/FreeRTOS/Source/tasks.c **** 
 577:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:.//Libraries/FreeRTOS/Source/tasks.c **** 
 579:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:.//Libraries/FreeRTOS/Source/tasks.c **** 
 581:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:.//Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:.//Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:.//Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:.//Libraries/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:.//Libraries/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 589:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:.//Libraries/FreeRTOS/Source/tasks.c **** 
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:.//Libraries/FreeRTOS/Source/tasks.c **** 
 595:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 597:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:.//Libraries/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:.//Libraries/FreeRTOS/Source/tasks.c **** 			structure. */
 600:.//Libraries/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 12


 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 604:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:.//Libraries/FreeRTOS/Source/tasks.c **** 
 606:.//Libraries/FreeRTOS/Source/tasks.c **** 
 607:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 609:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:.//Libraries/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:.//Libraries/FreeRTOS/Source/tasks.c **** 
 614:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 616:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:.//Libraries/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 620:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:.//Libraries/FreeRTOS/Source/tasks.c **** 
 622:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 625:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
 626:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 627:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 629:.//Libraries/FreeRTOS/Source/tasks.c **** 
 630:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 632:.//Libraries/FreeRTOS/Source/tasks.c **** 
 633:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:.//Libraries/FreeRTOS/Source/tasks.c **** 
 636:.//Libraries/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:.//Libraries/FreeRTOS/Source/tasks.c **** 
 638:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 640:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:.//Libraries/FreeRTOS/Source/tasks.c **** 
 643:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:.//Libraries/FreeRTOS/Source/tasks.c **** 
 646:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 648:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:.//Libraries/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:.//Libraries/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:.//Libraries/FreeRTOS/Source/tasks.c **** 
 653:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:.//Libraries/FreeRTOS/Source/tasks.c **** 
 656:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 13


 658:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:.//Libraries/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 662:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:.//Libraries/FreeRTOS/Source/tasks.c **** 
 664:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:.//Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:.//Libraries/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:.//Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:.//Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:.//Libraries/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:.//Libraries/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:.//Libraries/FreeRTOS/Source/tasks.c **** 
 672:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 676:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 678:.//Libraries/FreeRTOS/Source/tasks.c **** 
 679:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:.//Libraries/FreeRTOS/Source/tasks.c **** 
 682:.//Libraries/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:.//Libraries/FreeRTOS/Source/tasks.c **** 
 684:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 686:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:.//Libraries/FreeRTOS/Source/tasks.c **** 
 689:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:.//Libraries/FreeRTOS/Source/tasks.c **** 
 691:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 693:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:.//Libraries/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:.//Libraries/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:.//Libraries/FreeRTOS/Source/tasks.c **** 
 698:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 700:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:.//Libraries/FreeRTOS/Source/tasks.c **** 
 703:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 705:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:.//Libraries/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:.//Libraries/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 710:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:.//Libraries/FreeRTOS/Source/tasks.c **** 
 712:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:.//Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:.//Libraries/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 14


 715:.//Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:.//Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:.//Libraries/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:.//Libraries/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:.//Libraries/FreeRTOS/Source/tasks.c **** 
 720:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 723:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 724:.//Libraries/FreeRTOS/Source/tasks.c **** 
 725:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 727:.//Libraries/FreeRTOS/Source/tasks.c **** 
 728:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:.//Libraries/FreeRTOS/Source/tasks.c **** 
 731:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:.//Libraries/FreeRTOS/Source/tasks.c **** 
 733:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:.//Libraries/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:.//Libraries/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:.//Libraries/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:.//Libraries/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:.//Libraries/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 740:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:.//Libraries/FreeRTOS/Source/tasks.c **** 
 743:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:.//Libraries/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:.//Libraries/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 748:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:.//Libraries/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:.//Libraries/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:.//Libraries/FreeRTOS/Source/tasks.c **** 
 753:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 755:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:.//Libraries/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:.//Libraries/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:.//Libraries/FreeRTOS/Source/tasks.c **** 
 760:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 762:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:.//Libraries/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 766:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 767:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 768:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 770:.//Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 15


 772:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:.//Libraries/FreeRTOS/Source/tasks.c **** 
 775:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 777:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:.//Libraries/FreeRTOS/Source/tasks.c **** 
 780:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 782:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 785:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
 786:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 787:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:.//Libraries/FreeRTOS/Source/tasks.c **** 					it again. */
 789:.//Libraries/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 791:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 792:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
 793:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 794:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 796:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 797:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:.//Libraries/FreeRTOS/Source/tasks.c **** 
 799:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 801:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 803:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:.//Libraries/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 807:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:.//Libraries/FreeRTOS/Source/tasks.c **** 
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 813:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
 814:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 815:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 817:.//Libraries/FreeRTOS/Source/tasks.c **** 
 818:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 820:.//Libraries/FreeRTOS/Source/tasks.c **** 
 821:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:.//Libraries/FreeRTOS/Source/tasks.c **** 
 824:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:.//Libraries/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:.//Libraries/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:.//Libraries/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 16


 829:.//Libraries/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:.//Libraries/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:.//Libraries/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:.//Libraries/FreeRTOS/Source/tasks.c **** {
 833:.//Libraries/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:.//Libraries/FreeRTOS/Source/tasks.c **** 
 836:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:.//Libraries/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 841:.//Libraries/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 843:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
 844:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 845:.//Libraries/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 847:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:.//Libraries/FreeRTOS/Source/tasks.c **** 
 850:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 853:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 856:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:.//Libraries/FreeRTOS/Source/tasks.c **** 
 858:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:.//Libraries/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:.//Libraries/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:.//Libraries/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 864:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:.//Libraries/FreeRTOS/Source/tasks.c **** 
 867:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:.//Libraries/FreeRTOS/Source/tasks.c **** 
 870:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 872:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:.//Libraries/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 876:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 878:.//Libraries/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 880:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:.//Libraries/FreeRTOS/Source/tasks.c **** 
 882:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:.//Libraries/FreeRTOS/Source/tasks.c **** 
 885:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 17


 886:.//Libraries/FreeRTOS/Source/tasks.c **** 		performed. */
 887:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 889:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:.//Libraries/FreeRTOS/Source/tasks.c **** 
 891:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 894:.//Libraries/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 896:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:.//Libraries/FreeRTOS/Source/tasks.c **** 
 898:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:.//Libraries/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:.//Libraries/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 903:.//Libraries/FreeRTOS/Source/tasks.c **** 				break;
 904:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 905:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
 906:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 907:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 909:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 910:.//Libraries/FreeRTOS/Source/tasks.c **** 
 911:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:.//Libraries/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 915:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
 916:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 917:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:.//Libraries/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 921:.//Libraries/FreeRTOS/Source/tasks.c **** 
 922:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:.//Libraries/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 926:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 928:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
 929:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 930:.//Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 932:.//Libraries/FreeRTOS/Source/tasks.c **** 
 933:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 936:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 939:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:.//Libraries/FreeRTOS/Source/tasks.c **** 
 941:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 18


 943:.//Libraries/FreeRTOS/Source/tasks.c **** 
 944:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:.//Libraries/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:.//Libraries/FreeRTOS/Source/tasks.c **** 
 948:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:.//Libraries/FreeRTOS/Source/tasks.c **** 
 952:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 954:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 956:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:.//Libraries/FreeRTOS/Source/tasks.c **** 
 958:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 960:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 962:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:.//Libraries/FreeRTOS/Source/tasks.c **** 
 964:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 966:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 968:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:.//Libraries/FreeRTOS/Source/tasks.c **** 
 970:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 972:.//Libraries/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 974:.//Libraries/FreeRTOS/Source/tasks.c **** 	#else
 975:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 976:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 979:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 980:.//Libraries/FreeRTOS/Source/tasks.c **** 
 981:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 983:.//Libraries/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 985:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 987:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 988:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 989:.//Libraries/FreeRTOS/Source/tasks.c **** 
 990:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 992:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 995:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
 996:.//Libraries/FreeRTOS/Source/tasks.c **** 
 997:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 999:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 19


1000:.//Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:.//Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:.//Libraries/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1004:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
1005:.//Libraries/FreeRTOS/Source/tasks.c **** 
1006:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1008:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1010:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
1011:.//Libraries/FreeRTOS/Source/tasks.c **** 
1012:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:.//Libraries/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:.//Libraries/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:.//Libraries/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1018:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:.//Libraries/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:.//Libraries/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1023:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1025:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1027:.//Libraries/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1029:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1031:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1033:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1035:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1037:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1039:.//Libraries/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1041:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:.//Libraries/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:.//Libraries/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1046:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1048:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1050:.//Libraries/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1052:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1054:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1056:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 20


1057:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1058:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1060:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1062:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:.//Libraries/FreeRTOS/Source/tasks.c **** 
1064:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1066:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:.//Libraries/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:.//Libraries/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1070:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
1071:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1072:.//Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1074:.//Libraries/FreeRTOS/Source/tasks.c **** }
1075:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:.//Libraries/FreeRTOS/Source/tasks.c **** 
1077:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:.//Libraries/FreeRTOS/Source/tasks.c **** {
  29              		.loc 1 1078 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
1079:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:.//Libraries/FreeRTOS/Source/tasks.c **** 	updated. */
1081:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
  33              		.loc 1 1081 2 view .LVU1
1078:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
  34              		.loc 1 1078 1 is_stmt 0 view .LVU2
  35 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 32
  38              		.cfi_offset 3, -32
  39              		.cfi_offset 4, -28
  40              		.cfi_offset 5, -24
  41              		.cfi_offset 6, -20
  42              		.cfi_offset 7, -16
  43              		.cfi_offset 8, -12
  44              		.cfi_offset 9, -8
  45              		.cfi_offset 14, -4
1078:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
  46              		.loc 1 1078 1 view .LVU3
  47 0004 0446     		mov	r4, r0
  48              		.loc 1 1081 2 view .LVU4
  49 0006 FFF7FEFF 		bl	vPortEnterCritical
  50              	.LVL1:
1082:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1083:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
  51              		.loc 1 1083 3 is_stmt 1 view .LVU5
  52              		.loc 1 1083 25 is_stmt 0 view .LVU6
  53 000a 344A     		ldr	r2, .L18
1084:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
  54              		.loc 1 1084 20 view .LVU7
  55 000c 344E     		ldr	r6, .L18+4
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 21


1083:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
  56              		.loc 1 1083 25 view .LVU8
  57 000e 1368     		ldr	r3, [r2]
  58 0010 0133     		adds	r3, r3, #1
  59 0012 1360     		str	r3, [r2]
  60              		.loc 1 1084 3 is_stmt 1 view .LVU9
  61              		.loc 1 1084 20 is_stmt 0 view .LVU10
  62 0014 3368     		ldr	r3, [r6]
  63              		.loc 1 1084 5 view .LVU11
  64 0016 002B     		cmp	r3, #0
  65 0018 31D0     		beq	.L17
1085:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1086:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:.//Libraries/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:.//Libraries/FreeRTOS/Source/tasks.c **** 
1090:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1092:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:.//Libraries/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:.//Libraries/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1097:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1098:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1099:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1101:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1102:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1103:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1104:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:.//Libraries/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:.//Libraries/FreeRTOS/Source/tasks.c **** 			so far. */
1107:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
  66              		.loc 1 1107 4 is_stmt 1 view .LVU12
  67              		.loc 1 1107 26 is_stmt 0 view .LVU13
  68 001a 324D     		ldr	r5, .L18+8
  69 001c 2B68     		ldr	r3, [r5]
  70              		.loc 1 1107 6 view .LVU14
  71 001e 33B3     		cbz	r3, .L6
  72 0020 E06A     		ldr	r0, [r4, #44]
  73 0022 314F     		ldr	r7, .L18+12
  74              	.L4:
1108:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1109:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1111:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1113:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1114:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1115:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1117:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1118:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1119:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1120:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
  75              		.loc 1 1120 29 is_stmt 1 view .LVU15
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 22


1121:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1122:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1123:.//Libraries/FreeRTOS/Source/tasks.c **** 
1124:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
  76              		.loc 1 1124 3 view .LVU16
  77              		.loc 1 1124 15 is_stmt 0 view .LVU17
  78 0024 314A     		ldr	r2, .L18+16
1125:.//Libraries/FreeRTOS/Source/tasks.c **** 
1126:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1128:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1131:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:.//Libraries/FreeRTOS/Source/tasks.c **** 
1134:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
  79              		.loc 1 1134 3 view .LVU18
  80 0026 3249     		ldr	r1, .L18+20
1124:.//Libraries/FreeRTOS/Source/tasks.c **** 
  81              		.loc 1 1124 15 view .LVU19
  82 0028 1368     		ldr	r3, [r2]
  83              		.loc 1 1134 3 view .LVU20
  84 002a D1F800C0 		ldr	ip, [r1]
1124:.//Libraries/FreeRTOS/Source/tasks.c **** 
  85              		.loc 1 1124 15 view .LVU21
  86 002e 0133     		adds	r3, r3, #1
  87              		.loc 1 1134 3 view .LVU22
  88 0030 8445     		cmp	ip, r0
1124:.//Libraries/FreeRTOS/Source/tasks.c **** 
  89              		.loc 1 1124 15 view .LVU23
  90 0032 1360     		str	r3, [r2]
1129:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
  91              		.loc 1 1129 4 is_stmt 1 view .LVU24
1129:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
  92              		.loc 1 1129 26 is_stmt 0 view .LVU25
  93 0034 6364     		str	r3, [r4, #68]
1132:.//Libraries/FreeRTOS/Source/tasks.c **** 
  94              		.loc 1 1132 31 is_stmt 1 view .LVU26
  95              		.loc 1 1134 3 view .LVU27
  96              		.loc 1 1134 3 view .LVU28
  97 0036 00D2     		bcs	.L7
  98              		.loc 1 1134 3 discriminator 1 view .LVU29
  99 0038 0860     		str	r0, [r1]
 100              	.L7:
 101              		.loc 1 1134 3 discriminator 3 view .LVU30
 102              		.loc 1 1134 3 discriminator 3 view .LVU31
 103 003a 00EB8000 		add	r0, r0, r0, lsl #2
 104 003e 211D     		adds	r1, r4, #4
 105 0040 07EB8000 		add	r0, r7, r0, lsl #2
 106 0044 FFF7FEFF 		bl	vListInsertEnd
 107              	.LVL2:
 108              		.loc 1 1134 36 discriminator 3 view .LVU32
1135:.//Libraries/FreeRTOS/Source/tasks.c **** 
1136:.//Libraries/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
 109              		.loc 1 1136 3 discriminator 3 view .LVU33
1137:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 23


1138:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 110              		.loc 1 1138 2 discriminator 3 view .LVU34
 111 0048 FFF7FEFF 		bl	vPortExitCritical
 112              	.LVL3:
1139:.//Libraries/FreeRTOS/Source/tasks.c **** 
1140:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 113              		.loc 1 1140 2 discriminator 3 view .LVU35
 114              		.loc 1 1140 24 is_stmt 0 discriminator 3 view .LVU36
 115 004c 2B68     		ldr	r3, [r5]
 116              		.loc 1 1140 4 discriminator 3 view .LVU37
 117 004e 63B1     		cbz	r3, .L1
1141:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1142:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:.//Libraries/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 118              		.loc 1 1144 3 is_stmt 1 view .LVU38
 119              		.loc 1 1144 19 is_stmt 0 view .LVU39
 120 0050 3268     		ldr	r2, [r6]
 121              		.loc 1 1144 5 view .LVU40
 122 0052 E36A     		ldr	r3, [r4, #44]
 123 0054 D26A     		ldr	r2, [r2, #44]
 124 0056 9A42     		cmp	r2, r3
 125 0058 07D2     		bcs	.L1
1145:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1146:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 126              		.loc 1 1146 4 is_stmt 1 view .LVU41
 127 005a 264B     		ldr	r3, .L18+24
 128 005c 4FF08052 		mov	r2, #268435456
 129 0060 1A60     		str	r2, [r3]
 130              		.loc 1 1146 4 view .LVU42
 131              		.syntax unified
 132              	@ 1146 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 133 0062 BFF34F8F 		dsb
 134              	@ 0 "" 2
 135              		.loc 1 1146 4 view .LVU43
 136              	@ 1146 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 137 0066 BFF36F8F 		isb
 138              	@ 0 "" 2
 139              		.loc 1 1146 35 view .LVU44
1147:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1148:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1149:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1150:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1152:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1153:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
1154:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1155:.//Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 140              		.loc 1 1155 27 view .LVU45
 141              		.thumb
 142              		.syntax unified
 143              	.L1:
1156:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1157:.//Libraries/FreeRTOS/Source/tasks.c **** }
 144              		.loc 1 1157 1 is_stmt 0 view .LVU46
 145 006a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 146              	.LVL4:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 24


 147              	.L6:
1109:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 148              		.loc 1 1109 5 is_stmt 1 view .LVU47
1109:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 149              		.loc 1 1109 21 is_stmt 0 view .LVU48
 150 006e 3368     		ldr	r3, [r6]
1109:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 151              		.loc 1 1109 45 view .LVU49
 152 0070 E06A     		ldr	r0, [r4, #44]
1109:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 153              		.loc 1 1109 7 view .LVU50
 154 0072 DB6A     		ldr	r3, [r3, #44]
 155 0074 1C4F     		ldr	r7, .L18+12
 156 0076 8342     		cmp	r3, r0
 157 0078 D4D8     		bhi	.L4
1111:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 158              		.loc 1 1111 6 is_stmt 1 view .LVU51
1111:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 159              		.loc 1 1111 19 is_stmt 0 view .LVU52
 160 007a 3460     		str	r4, [r6]
 161 007c D2E7     		b	.L4
 162              	.L17:
1088:.//Libraries/FreeRTOS/Source/tasks.c **** 
 163              		.loc 1 1088 4 is_stmt 1 view .LVU53
1088:.//Libraries/FreeRTOS/Source/tasks.c **** 
 164              		.loc 1 1088 17 is_stmt 0 view .LVU54
 165 007e 3460     		str	r4, [r6]
1090:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 166              		.loc 1 1090 4 is_stmt 1 view .LVU55
1090:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 167              		.loc 1 1090 31 is_stmt 0 view .LVU56
 168 0080 1368     		ldr	r3, [r2]
1090:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 169              		.loc 1 1090 6 view .LVU57
 170 0082 012B     		cmp	r3, #1
 171 0084 03D0     		beq	.L3
1090:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 172              		.loc 1 1090 6 view .LVU58
 173 0086 E06A     		ldr	r0, [r4, #44]
 174 0088 174F     		ldr	r7, .L18+12
 175 008a 164D     		ldr	r5, .L18+8
 176 008c CAE7     		b	.L4
 177              	.L3:
 178 008e 164F     		ldr	r7, .L18+12
 179 0090 3D46     		mov	r5, r7
 180 0092 07F58C68 		add	r8, r7, #1120
 181              	.L5:
 182              	.LBB218:
 183              	.LBB219:
1158:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:.//Libraries/FreeRTOS/Source/tasks.c **** 
1160:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:.//Libraries/FreeRTOS/Source/tasks.c **** 
1162:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1164:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 25


1166:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1168:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:.//Libraries/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:.//Libraries/FreeRTOS/Source/tasks.c **** 
1172:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1175:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1177:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1178:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1179:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1181:.//Libraries/FreeRTOS/Source/tasks.c **** 
1182:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1185:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1187:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1188:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1189:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1191:.//Libraries/FreeRTOS/Source/tasks.c **** 
1192:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:.//Libraries/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:.//Libraries/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:.//Libraries/FreeRTOS/Source/tasks.c **** 			not return. */
1196:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:.//Libraries/FreeRTOS/Source/tasks.c **** 
1198:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1200:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:.//Libraries/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:.//Libraries/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:.//Libraries/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:.//Libraries/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:.//Libraries/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:.//Libraries/FreeRTOS/Source/tasks.c **** 
1207:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:.//Libraries/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:.//Libraries/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:.//Libraries/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:.//Libraries/FreeRTOS/Source/tasks.c **** 
1212:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:.//Libraries/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:.//Libraries/FreeRTOS/Source/tasks.c **** 
1216:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:.//Libraries/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:.//Libraries/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:.//Libraries/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:.//Libraries/FreeRTOS/Source/tasks.c **** 				required. */
1221:.//Libraries/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 26


1223:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1224:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1225:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:.//Libraries/FreeRTOS/Source/tasks.c **** 
1229:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:.//Libraries/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1233:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1234:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:.//Libraries/FreeRTOS/Source/tasks.c **** 
1236:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:.//Libraries/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1240:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1245:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1246:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1247:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1249:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1250:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1251:.//Libraries/FreeRTOS/Source/tasks.c **** 
1252:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:.//Libraries/FreeRTOS/Source/tasks.c **** 
1255:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:.//Libraries/FreeRTOS/Source/tasks.c **** 
1257:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1259:.//Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:.//Libraries/FreeRTOS/Source/tasks.c **** 
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:.//Libraries/FreeRTOS/Source/tasks.c **** 
1266:.//Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1268:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:.//Libraries/FreeRTOS/Source/tasks.c **** 			block. */
1270:.//Libraries/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:.//Libraries/FreeRTOS/Source/tasks.c **** 
1272:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:.//Libraries/FreeRTOS/Source/tasks.c **** 
1275:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1277:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:.//Libraries/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:.//Libraries/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 27


1280:.//Libraries/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:.//Libraries/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1284:.//Libraries/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1286:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1287:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1288:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1290:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1291:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1292:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1293:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:.//Libraries/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:.//Libraries/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1298:.//Libraries/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1300:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1301:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1302:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1304:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1305:.//Libraries/FreeRTOS/Source/tasks.c **** 
1306:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:.//Libraries/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:.//Libraries/FreeRTOS/Source/tasks.c **** 
1309:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1311:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:.//Libraries/FreeRTOS/Source/tasks.c **** 
1313:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:.//Libraries/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1317:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1318:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1319:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1321:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1322:.//Libraries/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:.//Libraries/FreeRTOS/Source/tasks.c **** 
1324:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:.//Libraries/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1328:.//Libraries/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1330:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1331:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1332:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1334:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1335:.//Libraries/FreeRTOS/Source/tasks.c **** 
1336:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 28


1337:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:.//Libraries/FreeRTOS/Source/tasks.c **** 
1339:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:.//Libraries/FreeRTOS/Source/tasks.c **** 
1341:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1343:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:.//Libraries/FreeRTOS/Source/tasks.c **** 
1345:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1351:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:.//Libraries/FreeRTOS/Source/tasks.c **** 
1353:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:.//Libraries/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:.//Libraries/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:.//Libraries/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:.//Libraries/FreeRTOS/Source/tasks.c **** 
1358:.//Libraries/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:.//Libraries/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1362:.//Libraries/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1364:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1365:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1366:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1368:.//Libraries/FreeRTOS/Source/tasks.c **** 
1369:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:.//Libraries/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1373:.//Libraries/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1375:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1376:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1377:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1379:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1380:.//Libraries/FreeRTOS/Source/tasks.c **** 
1381:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:.//Libraries/FreeRTOS/Source/tasks.c **** 
1384:.//Libraries/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:.//Libraries/FreeRTOS/Source/tasks.c **** 
1386:.//Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1388:.//Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:.//Libraries/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:.//Libraries/FreeRTOS/Source/tasks.c **** 
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 29


1394:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1396:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:.//Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1399:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1400:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1401:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1403:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1407:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:.//Libraries/FreeRTOS/Source/tasks.c **** 
1409:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1411:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:.//Libraries/FreeRTOS/Source/tasks.c **** 				lists. */
1413:.//Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1415:.//Libraries/FreeRTOS/Source/tasks.c **** 
1416:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:.//Libraries/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1419:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:.//Libraries/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:.//Libraries/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1424:.//Libraries/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
1426:.//Libraries/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:.//Libraries/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:.//Libraries/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:.//Libraries/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:.//Libraries/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
1432:.//Libraries/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
1434:.//Libraries/FreeRTOS/Source/tasks.c **** 							else
1435:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
1436:.//Libraries/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
1438:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
1439:.//Libraries/FreeRTOS/Source/tasks.c **** 						#else
1440:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
1441:.//Libraries/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
1443:.//Libraries/FreeRTOS/Source/tasks.c **** 						#endif
1444:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1445:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1446:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1447:.//Libraries/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1449:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1450:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 30


1451:.//Libraries/FreeRTOS/Source/tasks.c **** 
1452:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:.//Libraries/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1455:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:.//Libraries/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:.//Libraries/FreeRTOS/Source/tasks.c **** 					all. */
1458:.//Libraries/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1460:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1461:.//Libraries/FreeRTOS/Source/tasks.c **** 
1462:.//Libraries/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1464:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:.//Libraries/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:.//Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1468:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1469:.//Libraries/FreeRTOS/Source/tasks.c **** 
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:.//Libraries/FreeRTOS/Source/tasks.c **** 
1473:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:.//Libraries/FreeRTOS/Source/tasks.c **** 
1476:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:.//Libraries/FreeRTOS/Source/tasks.c **** 
1478:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1480:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:.//Libraries/FreeRTOS/Source/tasks.c **** 
1483:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1485:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:.//Libraries/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1490:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:.//Libraries/FreeRTOS/Source/tasks.c **** 
1492:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1494:.//Libraries/FreeRTOS/Source/tasks.c **** 
1495:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:.//Libraries/FreeRTOS/Source/tasks.c **** 
1498:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:.//Libraries/FreeRTOS/Source/tasks.c **** 
1500:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1502:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:.//Libraries/FreeRTOS/Source/tasks.c **** 
1505:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:.//Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:.//Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 31


1508:.//Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:.//Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:.//Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:.//Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:.//Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:.//Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:.//Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:.//Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:.//Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:.//Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:.//Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:.//Libraries/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:.//Libraries/FreeRTOS/Source/tasks.c **** 
1523:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1525:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:.//Libraries/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1530:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:.//Libraries/FreeRTOS/Source/tasks.c **** 
1532:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1534:.//Libraries/FreeRTOS/Source/tasks.c **** 
1535:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:.//Libraries/FreeRTOS/Source/tasks.c **** 
1538:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:.//Libraries/FreeRTOS/Source/tasks.c **** 
1540:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1542:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:.//Libraries/FreeRTOS/Source/tasks.c **** 
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:.//Libraries/FreeRTOS/Source/tasks.c **** 
1548:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1551:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1553:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1554:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1555:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1557:.//Libraries/FreeRTOS/Source/tasks.c **** 
1558:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1560:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:.//Libraries/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:.//Libraries/FreeRTOS/Source/tasks.c **** 
1564:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 32


1565:.//Libraries/FreeRTOS/Source/tasks.c **** 
1566:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1568:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1570:.//Libraries/FreeRTOS/Source/tasks.c **** 			#else
1571:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1572:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1574:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1575:.//Libraries/FreeRTOS/Source/tasks.c **** 
1576:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1578:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:.//Libraries/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1582:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1584:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:.//Libraries/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:.//Libraries/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:.//Libraries/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
1589:.//Libraries/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
1591:.//Libraries/FreeRTOS/Source/tasks.c **** 						else
1592:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
1593:.//Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
1595:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1596:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1597:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1598:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:.//Libraries/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:.//Libraries/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1602:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1603:.//Libraries/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1605:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:.//Libraries/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:.//Libraries/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:.//Libraries/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1610:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1611:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1612:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:.//Libraries/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:.//Libraries/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1616:.//Libraries/FreeRTOS/Source/tasks.c **** 
1617:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:.//Libraries/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 33


1622:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1624:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:.//Libraries/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1628:.//Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1630:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1631:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1632:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1634:.//Libraries/FreeRTOS/Source/tasks.c **** 
1635:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1638:.//Libraries/FreeRTOS/Source/tasks.c **** 				#else
1639:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1640:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1642:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif
1643:.//Libraries/FreeRTOS/Source/tasks.c **** 
1644:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:.//Libraries/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1648:.//Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1650:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1651:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1652:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1654:.//Libraries/FreeRTOS/Source/tasks.c **** 
1655:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:.//Libraries/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:.//Libraries/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:.//Libraries/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1661:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:.//Libraries/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:.//Libraries/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1666:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:.//Libraries/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:.//Libraries/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:.//Libraries/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1671:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1672:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1673:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1677:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1678:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 34


1679:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1681:.//Libraries/FreeRTOS/Source/tasks.c **** 
1682:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1684:.//Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1686:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1687:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1688:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1690:.//Libraries/FreeRTOS/Source/tasks.c **** 
1691:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:.//Libraries/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1695:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1696:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1698:.//Libraries/FreeRTOS/Source/tasks.c **** 
1699:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:.//Libraries/FreeRTOS/Source/tasks.c **** 
1702:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:.//Libraries/FreeRTOS/Source/tasks.c **** 
1704:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1706:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:.//Libraries/FreeRTOS/Source/tasks.c **** 
1708:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1710:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:.//Libraries/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:.//Libraries/FreeRTOS/Source/tasks.c **** 
1714:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:.//Libraries/FreeRTOS/Source/tasks.c **** 
1716:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:.//Libraries/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1720:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1722:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1723:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1724:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1726:.//Libraries/FreeRTOS/Source/tasks.c **** 
1727:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1730:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1732:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1733:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1734:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 35


1736:.//Libraries/FreeRTOS/Source/tasks.c **** 
1737:.//Libraries/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:.//Libraries/FreeRTOS/Source/tasks.c **** 
1739:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1741:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1743:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:.//Libraries/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1747:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1748:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
1749:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1750:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:.//Libraries/FreeRTOS/Source/tasks.c **** 
1752:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1754:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:.//Libraries/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1758:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1760:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1762:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1763:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1764:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1766:.//Libraries/FreeRTOS/Source/tasks.c **** 
1767:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1769:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1771:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1775:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1776:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1777:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:.//Libraries/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:.//Libraries/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1782:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:.//Libraries/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:.//Libraries/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:.//Libraries/FreeRTOS/Source/tasks.c **** 					is. */
1786:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1788:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1789:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1790:.//Libraries/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1792:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 36


1793:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1794:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1795:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1796:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1798:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1799:.//Libraries/FreeRTOS/Source/tasks.c **** 
1800:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:.//Libraries/FreeRTOS/Source/tasks.c **** 
1803:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:.//Libraries/FreeRTOS/Source/tasks.c **** 
1805:.//Libraries/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1807:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:.//Libraries/FreeRTOS/Source/tasks.c **** 
1810:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:.//Libraries/FreeRTOS/Source/tasks.c **** 		section. */
1812:.//Libraries/FreeRTOS/Source/tasks.c **** 
1813:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1815:.//Libraries/FreeRTOS/Source/tasks.c **** 
1816:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1818:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1819:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1821:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1822:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:.//Libraries/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
1825:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1826:.//Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1827:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1828:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1829:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1830:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1832:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1833:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1834:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1835:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1837:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1838:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1839:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1840:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1842:.//Libraries/FreeRTOS/Source/tasks.c **** 
1843:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1845:.//Libraries/FreeRTOS/Source/tasks.c **** 
1846:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:.//Libraries/FreeRTOS/Source/tasks.c **** 
1849:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 37


1850:.//Libraries/FreeRTOS/Source/tasks.c **** 
1851:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1853:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:.//Libraries/FreeRTOS/Source/tasks.c **** 
1855:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:.//Libraries/FreeRTOS/Source/tasks.c **** 
1858:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:.//Libraries/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1862:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1864:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1866:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:.//Libraries/FreeRTOS/Source/tasks.c **** 
1868:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:.//Libraries/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:.//Libraries/FreeRTOS/Source/tasks.c **** 
1873:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1876:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:.//Libraries/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:.//Libraries/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:.//Libraries/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1881:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1882:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1883:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1885:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1886:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1887:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1888:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1890:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1891:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1893:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
1894:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1895:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1897:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1898:.//Libraries/FreeRTOS/Source/tasks.c **** 
1899:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:.//Libraries/FreeRTOS/Source/tasks.c **** 
1901:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:.//Libraries/FreeRTOS/Source/tasks.c **** 
1903:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:.//Libraries/FreeRTOS/Source/tasks.c **** 
1905:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 38


1907:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:.//Libraries/FreeRTOS/Source/tasks.c **** 
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:.//Libraries/FreeRTOS/Source/tasks.c **** 
1913:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:.//Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:.//Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:.//Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:.//Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:.//Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:.//Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:.//Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:.//Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:.//Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:.//Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:.//Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:.//Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:.//Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:.//Libraries/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:.//Libraries/FreeRTOS/Source/tasks.c **** 
1931:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1933:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
1935:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:.//Libraries/FreeRTOS/Source/tasks.c **** 
1937:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1940:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:.//Libraries/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1944:.//Libraries/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1946:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
1947:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
1948:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
1950:.//Libraries/FreeRTOS/Source/tasks.c **** 
1951:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1954:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
1955:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
1956:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:.//Libraries/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:.//Libraries/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:.//Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
1961:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1962:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
1963:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 39


1964:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
1966:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
1967:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:.//Libraries/FreeRTOS/Source/tasks.c **** 
1969:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
1971:.//Libraries/FreeRTOS/Source/tasks.c **** 
1972:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:.//Libraries/FreeRTOS/Source/tasks.c **** 
1975:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:.//Libraries/FreeRTOS/Source/tasks.c **** {
1977:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:.//Libraries/FreeRTOS/Source/tasks.c **** 
1979:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
1982:.//Libraries/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:.//Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:.//Libraries/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:.//Libraries/FreeRTOS/Source/tasks.c **** 
1986:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:.//Libraries/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:.//Libraries/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:.//Libraries/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:.//Libraries/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:.//Libraries/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:.//Libraries/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:.//Libraries/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:.//Libraries/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:.//Libraries/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:.//Libraries/FreeRTOS/Source/tasks.c **** 
1997:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
1999:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2001:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2002:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2003:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2005:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2006:.//Libraries/FreeRTOS/Source/tasks.c **** 	#else
2007:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2008:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:.//Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:.//Libraries/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:.//Libraries/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:.//Libraries/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:.//Libraries/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:.//Libraries/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2016:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:.//Libraries/FreeRTOS/Source/tasks.c **** 
2018:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2020:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 40


2021:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2022:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2024:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2025:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2026:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2028:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2029:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:.//Libraries/FreeRTOS/Source/tasks.c **** 
2031:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2033:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:.//Libraries/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:.//Libraries/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:.//Libraries/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2038:.//Libraries/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2040:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2041:.//Libraries/FreeRTOS/Source/tasks.c **** 
2042:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:.//Libraries/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:.//Libraries/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:.//Libraries/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:.//Libraries/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:.//Libraries/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:.//Libraries/FreeRTOS/Source/tasks.c **** 
2049:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2051:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:.//Libraries/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:.//Libraries/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:.//Libraries/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:.//Libraries/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2057:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:.//Libraries/FreeRTOS/Source/tasks.c **** 
2059:.//Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:.//Libraries/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:.//Libraries/FreeRTOS/Source/tasks.c **** 
2063:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:.//Libraries/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:.//Libraries/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:.//Libraries/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:.//Libraries/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:.//Libraries/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:.//Libraries/FreeRTOS/Source/tasks.c **** 
2071:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:.//Libraries/FreeRTOS/Source/tasks.c **** 
2073:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:.//Libraries/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2077:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 41


2078:.//Libraries/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2080:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2081:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2082:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2084:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2085:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
2086:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2087:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:.//Libraries/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:.//Libraries/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2092:.//Libraries/FreeRTOS/Source/tasks.c **** 
2093:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:.//Libraries/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:.//Libraries/FreeRTOS/Source/tasks.c **** }
2097:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:.//Libraries/FreeRTOS/Source/tasks.c **** 
2099:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:.//Libraries/FreeRTOS/Source/tasks.c **** {
2101:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:.//Libraries/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:.//Libraries/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:.//Libraries/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:.//Libraries/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:.//Libraries/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:.//Libraries/FreeRTOS/Source/tasks.c **** }
2108:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:.//Libraries/FreeRTOS/Source/tasks.c **** 
2110:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:.//Libraries/FreeRTOS/Source/tasks.c **** {
2112:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:.//Libraries/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:.//Libraries/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:.//Libraries/FreeRTOS/Source/tasks.c **** 
2117:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:.//Libraries/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:.//Libraries/FreeRTOS/Source/tasks.c **** 
2121:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:.//Libraries/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:.//Libraries/FreeRTOS/Source/tasks.c **** 
2125:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:.//Libraries/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:.//Libraries/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:.//Libraries/FreeRTOS/Source/tasks.c **** }
2129:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:.//Libraries/FreeRTOS/Source/tasks.c **** 
2131:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:.//Libraries/FreeRTOS/Source/tasks.c **** 
2133:.//Libraries/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 42


2135:.//Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:.//Libraries/FreeRTOS/Source/tasks.c **** 
2138:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:.//Libraries/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:.//Libraries/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:.//Libraries/FreeRTOS/Source/tasks.c **** 		running. */
2142:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2144:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2146:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2148:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2149:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else
2150:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2151:.//Libraries/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:.//Libraries/FreeRTOS/Source/tasks.c **** 
2153:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:.//Libraries/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:.//Libraries/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:.//Libraries/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:.//Libraries/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2160:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2162:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2163:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2164:.//Libraries/FreeRTOS/Source/tasks.c **** 
2165:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2167:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2169:.//Libraries/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2171:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:.//Libraries/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:.//Libraries/FreeRTOS/Source/tasks.c **** 			processed. */
2174:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2176:.//Libraries/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2178:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:.//Libraries/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:.//Libraries/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2183:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2184:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2185:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2187:.//Libraries/FreeRTOS/Source/tasks.c **** 
2188:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2190:.//Libraries/FreeRTOS/Source/tasks.c **** 
2191:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 43


2192:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:.//Libraries/FreeRTOS/Source/tasks.c **** 
2194:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:.//Libraries/FreeRTOS/Source/tasks.c **** {
2196:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:.//Libraries/FreeRTOS/Source/tasks.c **** 
2199:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:.//Libraries/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:.//Libraries/FreeRTOS/Source/tasks.c **** 
2203:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:.//Libraries/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:.//Libraries/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:.//Libraries/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:.//Libraries/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2210:.//Libraries/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:.//Libraries/FreeRTOS/Source/tasks.c **** 
2212:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2214:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2216:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:.//Libraries/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2220:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:.//Libraries/FreeRTOS/Source/tasks.c **** 
2225:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:.//Libraries/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2229:.//Libraries/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2231:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2232:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2233:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2235:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2236:.//Libraries/FreeRTOS/Source/tasks.c **** 
2237:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2239:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:.//Libraries/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:.//Libraries/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:.//Libraries/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:.//Libraries/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:.//Libraries/FreeRTOS/Source/tasks.c **** 					state. */
2245:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2247:.//Libraries/FreeRTOS/Source/tasks.c **** 
2248:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 44


2249:.//Libraries/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:.//Libraries/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:.//Libraries/FreeRTOS/Source/tasks.c **** 				time. */
2252:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2253:.//Libraries/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:.//Libraries/FreeRTOS/Source/tasks.c **** 
2255:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2257:.//Libraries/FreeRTOS/Source/tasks.c **** 						do
2258:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
2259:.//Libraries/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
2261:.//Libraries/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
2263:.//Libraries/FreeRTOS/Source/tasks.c **** 							else
2264:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
2265:.//Libraries/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
2267:.//Libraries/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:.//Libraries/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:.//Libraries/FreeRTOS/Source/tasks.c **** 
2270:.//Libraries/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2272:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2273:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2274:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2276:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2277:.//Libraries/FreeRTOS/Source/tasks.c **** 
2278:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2280:.//Libraries/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2282:.//Libraries/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2284:.//Libraries/FreeRTOS/Source/tasks.c **** 					#endif
2285:.//Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2287:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
2288:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2289:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2291:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2292:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2293:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2294:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2295:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2297:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2298:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:.//Libraries/FreeRTOS/Source/tasks.c **** 
2300:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:.//Libraries/FreeRTOS/Source/tasks.c **** }
2302:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:.//Libraries/FreeRTOS/Source/tasks.c **** 
2304:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:.//Libraries/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 45


2306:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:.//Libraries/FreeRTOS/Source/tasks.c **** 
2308:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:.//Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2311:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2313:.//Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:.//Libraries/FreeRTOS/Source/tasks.c **** 
2315:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:.//Libraries/FreeRTOS/Source/tasks.c **** }
2317:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:.//Libraries/FreeRTOS/Source/tasks.c **** 
2319:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:.//Libraries/FreeRTOS/Source/tasks.c **** {
2321:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:.//Libraries/FreeRTOS/Source/tasks.c **** 
2324:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:.//Libraries/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:.//Libraries/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:.//Libraries/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:.//Libraries/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:.//Libraries/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:.//Libraries/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:.//Libraries/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:.//Libraries/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:.//Libraries/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:.//Libraries/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:.//Libraries/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:.//Libraries/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:.//Libraries/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:.//Libraries/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:.//Libraries/FreeRTOS/Source/tasks.c **** 
2340:.//Libraries/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2342:.//Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2344:.//Libraries/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:.//Libraries/FreeRTOS/Source/tasks.c **** 
2346:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:.//Libraries/FreeRTOS/Source/tasks.c **** }
2348:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:.//Libraries/FreeRTOS/Source/tasks.c **** 
2350:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:.//Libraries/FreeRTOS/Source/tasks.c **** {
2352:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:.//Libraries/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:.//Libraries/FreeRTOS/Source/tasks.c **** }
2356:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:.//Libraries/FreeRTOS/Source/tasks.c **** 
2358:.//Libraries/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:.//Libraries/FreeRTOS/Source/tasks.c **** {
2360:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:.//Libraries/FreeRTOS/Source/tasks.c **** 
2362:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 46


2363:.//Libraries/FreeRTOS/Source/tasks.c **** 	queried. */
2364:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:.//Libraries/FreeRTOS/Source/tasks.c **** }
2368:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:.//Libraries/FreeRTOS/Source/tasks.c **** 
2370:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:.//Libraries/FreeRTOS/Source/tasks.c **** 
2372:.//Libraries/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2374:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:.//Libraries/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:.//Libraries/FreeRTOS/Source/tasks.c **** 
2379:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:.//Libraries/FreeRTOS/Source/tasks.c **** 
2381:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2383:.//Libraries/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:.//Libraries/FreeRTOS/Source/tasks.c **** 
2385:.//Libraries/FreeRTOS/Source/tasks.c **** 			do
2386:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2387:.//Libraries/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:.//Libraries/FreeRTOS/Source/tasks.c **** 
2389:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:.//Libraries/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:.//Libraries/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:.//Libraries/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2394:.//Libraries/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:.//Libraries/FreeRTOS/Source/tasks.c **** 
2396:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2398:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:.//Libraries/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2401:.//Libraries/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2403:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:.//Libraries/FreeRTOS/Source/tasks.c **** 						found. */
2405:.//Libraries/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:.//Libraries/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2408:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2409:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2410:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2412:.//Libraries/FreeRTOS/Source/tasks.c **** 
2413:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2415:.//Libraries/FreeRTOS/Source/tasks.c **** 						break;
2416:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2417:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2418:.//Libraries/FreeRTOS/Source/tasks.c **** 
2419:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 47


2420:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2421:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
2423:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2424:.//Libraries/FreeRTOS/Source/tasks.c **** 
2425:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2427:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2428:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2429:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2431:.//Libraries/FreeRTOS/Source/tasks.c **** 
2432:.//Libraries/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2434:.//Libraries/FreeRTOS/Source/tasks.c **** 
2435:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:.//Libraries/FreeRTOS/Source/tasks.c **** 
2438:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:.//Libraries/FreeRTOS/Source/tasks.c **** 
2440:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2442:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:.//Libraries/FreeRTOS/Source/tasks.c **** 
2445:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:.//Libraries/FreeRTOS/Source/tasks.c **** 
2448:.//Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2450:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:.//Libraries/FreeRTOS/Source/tasks.c **** 			do
2452:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2453:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:.//Libraries/FreeRTOS/Source/tasks.c **** 
2456:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2458:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
2460:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2461:.//Libraries/FreeRTOS/Source/tasks.c **** 
2462:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:.//Libraries/FreeRTOS/Source/tasks.c **** 
2464:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2467:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2469:.//Libraries/FreeRTOS/Source/tasks.c **** 
2470:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2472:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2474:.//Libraries/FreeRTOS/Source/tasks.c **** 
2475:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 48


2477:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2479:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2482:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2483:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
2484:.//Libraries/FreeRTOS/Source/tasks.c **** 
2485:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2487:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2489:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2492:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2493:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
2494:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2495:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:.//Libraries/FreeRTOS/Source/tasks.c **** 
2497:.//Libraries/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2499:.//Libraries/FreeRTOS/Source/tasks.c **** 
2500:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:.//Libraries/FreeRTOS/Source/tasks.c **** 
2503:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:.//Libraries/FreeRTOS/Source/tasks.c **** 
2505:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2507:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:.//Libraries/FreeRTOS/Source/tasks.c **** 
2509:.//Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2511:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2514:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:.//Libraries/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:.//Libraries/FreeRTOS/Source/tasks.c **** 				do
2517:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2518:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:.//Libraries/FreeRTOS/Source/tasks.c **** 
2521:.//Libraries/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:.//Libraries/FreeRTOS/Source/tasks.c **** 
2523:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:.//Libraries/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:.//Libraries/FreeRTOS/Source/tasks.c **** 
2528:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2530:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:.//Libraries/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 49


2534:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2535:.//Libraries/FreeRTOS/Source/tasks.c **** 
2536:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2538:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:.//Libraries/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2542:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2543:.//Libraries/FreeRTOS/Source/tasks.c **** 
2544:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2546:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2548:.//Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:.//Libraries/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:.//Libraries/FreeRTOS/Source/tasks.c **** 						#else
2551:.//Libraries/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:.//Libraries/FreeRTOS/Source/tasks.c **** 						#endif
2553:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2554:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2555:.//Libraries/FreeRTOS/Source/tasks.c **** 				#else
2556:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2557:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2559:.//Libraries/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2561:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2562:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif
2563:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2564:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
2565:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2566:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2568:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2569:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:.//Libraries/FreeRTOS/Source/tasks.c **** 
2571:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2573:.//Libraries/FreeRTOS/Source/tasks.c **** 
2574:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:.//Libraries/FreeRTOS/Source/tasks.c **** 
2577:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:.//Libraries/FreeRTOS/Source/tasks.c **** 
2579:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2581:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:.//Libraries/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2586:.//Libraries/FreeRTOS/Source/tasks.c **** 
2587:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:.//Libraries/FreeRTOS/Source/tasks.c **** 
2590:.//Libraries/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 50


2591:.//Libraries/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:.//Libraries/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:.//Libraries/FreeRTOS/Source/tasks.c **** 1. */
2594:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:.//Libraries/FreeRTOS/Source/tasks.c **** 
2596:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2598:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:.//Libraries/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:.//Libraries/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2605:.//Libraries/FreeRTOS/Source/tasks.c **** 
2606:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:.//Libraries/FreeRTOS/Source/tasks.c **** 
2609:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:.//Libraries/FreeRTOS/Source/tasks.c **** {
2611:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:.//Libraries/FreeRTOS/Source/tasks.c **** 
2613:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:.//Libraries/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:.//Libraries/FreeRTOS/Source/tasks.c **** 
2617:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:.//Libraries/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:.//Libraries/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:.//Libraries/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:.//Libraries/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:.//Libraries/FreeRTOS/Source/tasks.c **** 
2623:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:.//Libraries/FreeRTOS/Source/tasks.c **** }
2625:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:.//Libraries/FreeRTOS/Source/tasks.c **** 
2627:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:.//Libraries/FreeRTOS/Source/tasks.c **** 
2629:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2631:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:.//Libraries/FreeRTOS/Source/tasks.c **** 
2634:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:.//Libraries/FreeRTOS/Source/tasks.c **** 
2636:.//Libraries/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2638:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:.//Libraries/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2642:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:.//Libraries/FreeRTOS/Source/tasks.c **** 
2644:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:.//Libraries/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:.//Libraries/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 51


2648:.//Libraries/FreeRTOS/Source/tasks.c **** 
2649:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:.//Libraries/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:.//Libraries/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:.//Libraries/FreeRTOS/Source/tasks.c **** 				is used. */
2653:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2655:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2657:.//Libraries/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:.//Libraries/FreeRTOS/Source/tasks.c **** 
2659:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:.//Libraries/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:.//Libraries/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:.//Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2664:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2665:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2666:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2668:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2669:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:.//Libraries/FreeRTOS/Source/tasks.c **** 
2671:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:.//Libraries/FreeRTOS/Source/tasks.c **** 
2674:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:.//Libraries/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2678:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:.//Libraries/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:.//Libraries/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2683:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:.//Libraries/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:.//Libraries/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2687:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2688:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2689:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2691:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2692:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2694:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
2695:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2696:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2698:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2699:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:.//Libraries/FreeRTOS/Source/tasks.c **** 
2701:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2703:.//Libraries/FreeRTOS/Source/tasks.c **** 
2704:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 52


2705:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:.//Libraries/FreeRTOS/Source/tasks.c **** 
2707:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:.//Libraries/FreeRTOS/Source/tasks.c **** {
2709:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:.//Libraries/FreeRTOS/Source/tasks.c **** 
2713:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:.//Libraries/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:.//Libraries/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:.//Libraries/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2719:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:.//Libraries/FreeRTOS/Source/tasks.c **** 		block. */
2721:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:.//Libraries/FreeRTOS/Source/tasks.c **** 
2723:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:.//Libraries/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:.//Libraries/FreeRTOS/Source/tasks.c **** 
2727:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2731:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2732:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2733:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2735:.//Libraries/FreeRTOS/Source/tasks.c **** 
2736:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:.//Libraries/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:.//Libraries/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:.//Libraries/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2742:.//Libraries/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2746:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:.//Libraries/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:.//Libraries/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:.//Libraries/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:.//Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
2753:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2754:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
2755:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
2756:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:.//Libraries/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:.//Libraries/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:.//Libraries/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:.//Libraries/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 53


2762:.//Libraries/FreeRTOS/Source/tasks.c **** 
2763:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2765:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:.//Libraries/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:.//Libraries/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:.//Libraries/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:.//Libraries/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:.//Libraries/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:.//Libraries/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2773:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2774:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2775:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2777:.//Libraries/FreeRTOS/Source/tasks.c **** 
2778:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:.//Libraries/FreeRTOS/Source/tasks.c **** 
2781:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:.//Libraries/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2785:.//Libraries/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2787:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
2788:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2789:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2791:.//Libraries/FreeRTOS/Source/tasks.c **** 
2792:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:.//Libraries/FreeRTOS/Source/tasks.c **** 					list. */
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:.//Libraries/FreeRTOS/Source/tasks.c **** 
2796:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:.//Libraries/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:.//Libraries/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
2800:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:.//Libraries/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:.//Libraries/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:.//Libraries/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:.//Libraries/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
2806:.//Libraries/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
2808:.//Libraries/FreeRTOS/Source/tasks.c **** 						else
2809:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
2810:.//Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
2812:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
2813:.//Libraries/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
2815:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2816:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2817:.//Libraries/FreeRTOS/Source/tasks.c **** 
2818:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 54


2819:.//Libraries/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:.//Libraries/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2823:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2825:.//Libraries/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2827:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
2828:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2829:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2831:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2832:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:.//Libraries/FreeRTOS/Source/tasks.c **** 
2834:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2836:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:.//Libraries/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2840:.//Libraries/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2842:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
2843:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2844:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2846:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2847:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:.//Libraries/FreeRTOS/Source/tasks.c **** 
2849:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2851:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2853:.//Libraries/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2855:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
2856:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
2857:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
2859:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2860:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2862:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
2863:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2864:.//Libraries/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:.//Libraries/FreeRTOS/Source/tasks.c **** 
2866:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:.//Libraries/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2870:.//Libraries/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2872:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
2873:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2874:.//Libraries/FreeRTOS/Source/tasks.c **** 
2875:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 55


2876:.//Libraries/FreeRTOS/Source/tasks.c **** }
2877:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:.//Libraries/FreeRTOS/Source/tasks.c **** 
2879:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:.//Libraries/FreeRTOS/Source/tasks.c **** 
2881:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2883:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:.//Libraries/FreeRTOS/Source/tasks.c **** 
2885:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:.//Libraries/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2889:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2891:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2892:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2893:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2895:.//Libraries/FreeRTOS/Source/tasks.c **** 
2896:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:.//Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2900:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2902:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2904:.//Libraries/FreeRTOS/Source/tasks.c **** 
2905:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:.//Libraries/FreeRTOS/Source/tasks.c **** 
2908:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:.//Libraries/FreeRTOS/Source/tasks.c **** 
2910:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2912:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:.//Libraries/FreeRTOS/Source/tasks.c **** 
2915:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:.//Libraries/FreeRTOS/Source/tasks.c **** 
2918:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:.//Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2922:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2924:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:.//Libraries/FreeRTOS/Source/tasks.c **** 
2926:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2928:.//Libraries/FreeRTOS/Source/tasks.c **** 
2929:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:.//Libraries/FreeRTOS/Source/tasks.c **** 
2932:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 56


2933:.//Libraries/FreeRTOS/Source/tasks.c **** 
2934:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2936:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:.//Libraries/FreeRTOS/Source/tasks.c **** 
2940:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:.//Libraries/FreeRTOS/Source/tasks.c **** 
2943:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:.//Libraries/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2947:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2949:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:.//Libraries/FreeRTOS/Source/tasks.c **** 
2951:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2953:.//Libraries/FreeRTOS/Source/tasks.c **** 
2954:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:.//Libraries/FreeRTOS/Source/tasks.c **** 
2957:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:.//Libraries/FreeRTOS/Source/tasks.c **** 
2959:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2961:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:.//Libraries/FreeRTOS/Source/tasks.c **** 
2964:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2967:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2969:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2970:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2971:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2973:.//Libraries/FreeRTOS/Source/tasks.c **** 
2974:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2976:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2978:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
2979:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
2980:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
2982:.//Libraries/FreeRTOS/Source/tasks.c **** 
2983:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2985:.//Libraries/FreeRTOS/Source/tasks.c **** 
2986:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:.//Libraries/FreeRTOS/Source/tasks.c **** 
2989:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 57


2990:.//Libraries/FreeRTOS/Source/tasks.c **** {
2991:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2993:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:.//Libraries/FreeRTOS/Source/tasks.c **** 		switch. */
2995:.//Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
2997:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
2998:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
2999:.//Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:.//Libraries/FreeRTOS/Source/tasks.c **** 
3002:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3004:.//Libraries/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:.//Libraries/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:.//Libraries/FreeRTOS/Source/tasks.c **** 			#else
3007:.//Libraries/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
3009:.//Libraries/FreeRTOS/Source/tasks.c **** 
3010:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:.//Libraries/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:.//Libraries/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:.//Libraries/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:.//Libraries/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:.//Libraries/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:.//Libraries/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3019:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3021:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3022:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3023:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3025:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3027:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:.//Libraries/FreeRTOS/Source/tasks.c **** 
3029:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:.//Libraries/FreeRTOS/Source/tasks.c **** 
3032:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3035:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3037:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3038:.//Libraries/FreeRTOS/Source/tasks.c **** 
3039:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:.//Libraries/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:.//Libraries/FreeRTOS/Source/tasks.c **** 
3044:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 58


3047:.//Libraries/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3049:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3050:.//Libraries/FreeRTOS/Source/tasks.c **** 
3051:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3053:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:.//Libraries/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:.//Libraries/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:.//Libraries/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:.//Libraries/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3059:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3061:.//Libraries/FreeRTOS/Source/tasks.c **** }
3062:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:.//Libraries/FreeRTOS/Source/tasks.c **** 
3064:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:.//Libraries/FreeRTOS/Source/tasks.c **** {
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:.//Libraries/FreeRTOS/Source/tasks.c **** 
3068:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:.//Libraries/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:.//Libraries/FreeRTOS/Source/tasks.c **** 
3071:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:.//Libraries/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:.//Libraries/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:.//Libraries/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:.//Libraries/FreeRTOS/Source/tasks.c **** 
3077:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:.//Libraries/FreeRTOS/Source/tasks.c **** }
3079:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:.//Libraries/FreeRTOS/Source/tasks.c **** 
3081:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:.//Libraries/FreeRTOS/Source/tasks.c **** {
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:.//Libraries/FreeRTOS/Source/tasks.c **** 
3085:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:.//Libraries/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:.//Libraries/FreeRTOS/Source/tasks.c **** 
3089:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:.//Libraries/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:.//Libraries/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:.//Libraries/FreeRTOS/Source/tasks.c **** 
3094:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:.//Libraries/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:.//Libraries/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:.//Libraries/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:.//Libraries/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:.//Libraries/FreeRTOS/Source/tasks.c **** 
3101:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:.//Libraries/FreeRTOS/Source/tasks.c **** }
3103:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 59


3104:.//Libraries/FreeRTOS/Source/tasks.c **** 
3105:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:.//Libraries/FreeRTOS/Source/tasks.c **** 
3107:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:.//Libraries/FreeRTOS/Source/tasks.c **** 
3111:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:.//Libraries/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:.//Libraries/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:.//Libraries/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:.//Libraries/FreeRTOS/Source/tasks.c **** 
3116:.//Libraries/FreeRTOS/Source/tasks.c **** 
3117:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:.//Libraries/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:.//Libraries/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:.//Libraries/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:.//Libraries/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:.//Libraries/FreeRTOS/Source/tasks.c **** 
3123:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:.//Libraries/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3128:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3130:.//Libraries/FreeRTOS/Source/tasks.c **** 
3131:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3134:.//Libraries/FreeRTOS/Source/tasks.c **** 
3135:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:.//Libraries/FreeRTOS/Source/tasks.c **** 
3138:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:.//Libraries/FreeRTOS/Source/tasks.c **** {
3140:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:.//Libraries/FreeRTOS/Source/tasks.c **** 
3143:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:.//Libraries/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:.//Libraries/FreeRTOS/Source/tasks.c **** 
3146:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:.//Libraries/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:.//Libraries/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:.//Libraries/FreeRTOS/Source/tasks.c **** 
3150:.//Libraries/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:.//Libraries/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:.//Libraries/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:.//Libraries/FreeRTOS/Source/tasks.c **** 
3154:.//Libraries/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:.//Libraries/FreeRTOS/Source/tasks.c **** 
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 60


3161:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3162:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:.//Libraries/FreeRTOS/Source/tasks.c **** 
3165:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3167:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:.//Libraries/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:.//Libraries/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:.//Libraries/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:.//Libraries/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:.//Libraries/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:.//Libraries/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:.//Libraries/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3177:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3178:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3179:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
3180:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3181:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:.//Libraries/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:.//Libraries/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3185:.//Libraries/FreeRTOS/Source/tasks.c **** 
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3188:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:.//Libraries/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:.//Libraries/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:.//Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:.//Libraries/FreeRTOS/Source/tasks.c **** 
3193:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:.//Libraries/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:.//Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3197:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
3198:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3199:.//Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3201:.//Libraries/FreeRTOS/Source/tasks.c **** 
3202:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:.//Libraries/FreeRTOS/Source/tasks.c **** }
3204:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:.//Libraries/FreeRTOS/Source/tasks.c **** 
3206:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:.//Libraries/FreeRTOS/Source/tasks.c **** {
3208:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:.//Libraries/FreeRTOS/Source/tasks.c **** 
3210:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:.//Libraries/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:.//Libraries/FreeRTOS/Source/tasks.c **** 
3214:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:.//Libraries/FreeRTOS/Source/tasks.c **** 
3217:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 61


3218:.//Libraries/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:.//Libraries/FreeRTOS/Source/tasks.c **** 
3223:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3225:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:.//Libraries/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:.//Libraries/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:.//Libraries/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:.//Libraries/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:.//Libraries/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:.//Libraries/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:.//Libraries/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3235:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
3236:.//Libraries/FreeRTOS/Source/tasks.c **** 
3237:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:.//Libraries/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:.//Libraries/FreeRTOS/Source/tasks.c **** 	lists. */
3240:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:.//Libraries/FreeRTOS/Source/tasks.c **** 
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3245:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:.//Libraries/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:.//Libraries/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:.//Libraries/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:.//Libraries/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3251:.//Libraries/FreeRTOS/Source/tasks.c **** }
3252:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:.//Libraries/FreeRTOS/Source/tasks.c **** 
3254:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:.//Libraries/FreeRTOS/Source/tasks.c **** {
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3259:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3262:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:.//Libraries/FreeRTOS/Source/tasks.c **** }
3264:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:.//Libraries/FreeRTOS/Source/tasks.c **** 
3266:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:.//Libraries/FreeRTOS/Source/tasks.c **** {
3268:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:.//Libraries/FreeRTOS/Source/tasks.c **** }
3272:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:.//Libraries/FreeRTOS/Source/tasks.c **** 
3274:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 62


3275:.//Libraries/FreeRTOS/Source/tasks.c **** {
3276:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:.//Libraries/FreeRTOS/Source/tasks.c **** 
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:.//Libraries/FreeRTOS/Source/tasks.c **** 
3281:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3283:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:.//Libraries/FreeRTOS/Source/tasks.c **** 
3287:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3290:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:.//Libraries/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3295:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3296:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3297:.//Libraries/FreeRTOS/Source/tasks.c **** 
3298:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3301:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:.//Libraries/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:.//Libraries/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3306:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3307:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3308:.//Libraries/FreeRTOS/Source/tasks.c **** 
3309:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3311:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:.//Libraries/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:.//Libraries/FreeRTOS/Source/tasks.c **** 			was called. */
3316:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3318:.//Libraries/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3320:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:.//Libraries/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3325:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3326:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3327:.//Libraries/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3330:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3331:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 63


3332:.//Libraries/FreeRTOS/Source/tasks.c **** 
3333:.//Libraries/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:.//Libraries/FreeRTOS/Source/tasks.c **** }
3335:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:.//Libraries/FreeRTOS/Source/tasks.c **** 
3337:.//Libraries/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:.//Libraries/FreeRTOS/Source/tasks.c **** {
3339:.//Libraries/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:.//Libraries/FreeRTOS/Source/tasks.c **** }
3341:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:.//Libraries/FreeRTOS/Source/tasks.c **** 
3343:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:.//Libraries/FreeRTOS/Source/tasks.c **** 
3345:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3347:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:.//Libraries/FreeRTOS/Source/tasks.c **** 
3350:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3352:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3355:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3356:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3357:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3359:.//Libraries/FreeRTOS/Source/tasks.c **** 
3360:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3362:.//Libraries/FreeRTOS/Source/tasks.c **** 
3363:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:.//Libraries/FreeRTOS/Source/tasks.c **** 
3366:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:.//Libraries/FreeRTOS/Source/tasks.c **** 
3368:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3370:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:.//Libraries/FreeRTOS/Source/tasks.c **** 
3372:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3374:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3377:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3378:.//Libraries/FreeRTOS/Source/tasks.c **** 
3379:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:.//Libraries/FreeRTOS/Source/tasks.c **** 
3381:.//Libraries/FreeRTOS/Source/tasks.c **** /*
3382:.//Libraries/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:.//Libraries/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:.//Libraries/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:.//Libraries/FreeRTOS/Source/tasks.c ****  *
3386:.//Libraries/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:.//Libraries/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:.//Libraries/FreeRTOS/Source/tasks.c ****  *
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 64


3389:.//Libraries/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:.//Libraries/FreeRTOS/Source/tasks.c ****  *
3391:.//Libraries/FreeRTOS/Source/tasks.c ****  */
3392:.//Libraries/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:.//Libraries/FreeRTOS/Source/tasks.c **** {
3394:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:.//Libraries/FreeRTOS/Source/tasks.c **** 
3397:.//Libraries/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:.//Libraries/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:.//Libraries/FreeRTOS/Source/tasks.c **** 
3400:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:.//Libraries/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:.//Libraries/FreeRTOS/Source/tasks.c **** 	any. */
3403:.//Libraries/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:.//Libraries/FreeRTOS/Source/tasks.c **** 
3405:.//Libraries/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3407:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:.//Libraries/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:.//Libraries/FreeRTOS/Source/tasks.c **** 
3411:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3413:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:.//Libraries/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:.//Libraries/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:.//Libraries/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3419:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:.//Libraries/FreeRTOS/Source/tasks.c **** 
3421:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3423:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:.//Libraries/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:.//Libraries/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:.//Libraries/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:.//Libraries/FreeRTOS/Source/tasks.c **** 
3428:.//Libraries/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:.//Libraries/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:.//Libraries/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:.//Libraries/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3436:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3437:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3438:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3440:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3441:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:.//Libraries/FreeRTOS/Source/tasks.c **** 
3443:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3445:.//Libraries/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 65


3446:.//Libraries/FreeRTOS/Source/tasks.c **** 
3447:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:.//Libraries/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:.//Libraries/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:.//Libraries/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:.//Libraries/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:.//Libraries/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3454:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:.//Libraries/FreeRTOS/Source/tasks.c **** 
3456:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:.//Libraries/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:.//Libraries/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:.//Libraries/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3462:.//Libraries/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:.//Libraries/FreeRTOS/Source/tasks.c **** 
3464:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:.//Libraries/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:.//Libraries/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:.//Libraries/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:.//Libraries/FreeRTOS/Source/tasks.c **** 			valid. */
3469:.//Libraries/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:.//Libraries/FreeRTOS/Source/tasks.c **** 
3471:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3473:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
3475:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:.//Libraries/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:.//Libraries/FreeRTOS/Source/tasks.c **** 					be used. */
3478:.//Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:.//Libraries/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:.//Libraries/FreeRTOS/Source/tasks.c **** 
3481:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:.//Libraries/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:.//Libraries/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:.//Libraries/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:.//Libraries/FreeRTOS/Source/tasks.c **** 
3486:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
3488:.//Libraries/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:.//Libraries/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:.//Libraries/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
3492:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
3493:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
3494:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
3496:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
3497:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3499:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3500:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3501:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 66


3503:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3504:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3506:.//Libraries/FreeRTOS/Source/tasks.c **** }
3507:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:.//Libraries/FreeRTOS/Source/tasks.c **** 
3509:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:.//Libraries/FreeRTOS/Source/tasks.c **** 
3511:.//Libraries/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3513:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:.//Libraries/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:.//Libraries/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:.//Libraries/FreeRTOS/Source/tasks.c **** 
3517:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:.//Libraries/FreeRTOS/Source/tasks.c **** 
3519:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3521:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:.//Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3524:.//Libraries/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3526:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:.//Libraries/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3529:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3530:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3531:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:.//Libraries/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:.//Libraries/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:.//Libraries/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3537:.//Libraries/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3539:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3540:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3541:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3543:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3544:.//Libraries/FreeRTOS/Source/tasks.c **** 
3545:.//Libraries/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3547:.//Libraries/FreeRTOS/Source/tasks.c **** 
3548:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:.//Libraries/FreeRTOS/Source/tasks.c **** 
3551:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:.//Libraries/FreeRTOS/Source/tasks.c **** 
3553:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3555:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:.//Libraries/FreeRTOS/Source/tasks.c **** 
3557:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3559:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 67


3560:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3563:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3564:.//Libraries/FreeRTOS/Source/tasks.c **** 
3565:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:.//Libraries/FreeRTOS/Source/tasks.c **** 
3568:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:.//Libraries/FreeRTOS/Source/tasks.c **** 
3570:.//Libraries/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3572:.//Libraries/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:.//Libraries/FreeRTOS/Source/tasks.c **** 
3575:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3577:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:.//Libraries/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3580:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3581:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3582:.//Libraries/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3584:.//Libraries/FreeRTOS/Source/tasks.c **** 
3585:.//Libraries/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3587:.//Libraries/FreeRTOS/Source/tasks.c **** 
3588:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:.//Libraries/FreeRTOS/Source/tasks.c **** 
3591:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:.//Libraries/FreeRTOS/Source/tasks.c **** 
3593:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3595:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:.//Libraries/FreeRTOS/Source/tasks.c **** 
3597:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:.//Libraries/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:.//Libraries/FreeRTOS/Source/tasks.c **** 
3601:.//Libraries/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3603:.//Libraries/FreeRTOS/Source/tasks.c **** 
3604:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:.//Libraries/FreeRTOS/Source/tasks.c **** 
3607:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:.//Libraries/FreeRTOS/Source/tasks.c **** {
3609:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:.//Libraries/FreeRTOS/Source/tasks.c **** 
3611:.//Libraries/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3613:.//Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 184              		.loc 1 3613 3 is_stmt 1 view .LVU59
 185 0096 2846     		mov	r0, r5
 186 0098 1435     		adds	r5, r5, #20
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 68


 187 009a FFF7FEFF 		bl	vListInitialise
 188              	.LVL5:
3611:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 189              		.loc 1 3611 91 view .LVU60
3611:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 190              		.loc 1 3611 40 view .LVU61
3611:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 191              		.loc 1 3611 2 is_stmt 0 view .LVU62
 192 009e A845     		cmp	r8, r5
 193 00a0 F9D1     		bne	.L5
3614:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3615:.//Libraries/FreeRTOS/Source/tasks.c **** 
3616:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 194              		.loc 1 3616 2 is_stmt 1 view .LVU63
 195 00a2 DFF86890 		ldr	r9, .L18+48
3617:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 196              		.loc 1 3617 2 is_stmt 0 view .LVU64
 197 00a6 DFF86880 		ldr	r8, .L18+52
3616:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 198              		.loc 1 3616 2 view .LVU65
 199 00aa 4846     		mov	r0, r9
 200 00ac 0D4D     		ldr	r5, .L18+8
 201 00ae FFF7FEFF 		bl	vListInitialise
 202              	.LVL6:
 203              		.loc 1 3617 2 is_stmt 1 view .LVU66
 204 00b2 4046     		mov	r0, r8
 205 00b4 FFF7FEFF 		bl	vListInitialise
 206              	.LVL7:
3618:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 207              		.loc 1 3618 2 view .LVU67
 208 00b8 0F48     		ldr	r0, .L18+28
 209 00ba FFF7FEFF 		bl	vListInitialise
 210              	.LVL8:
3619:.//Libraries/FreeRTOS/Source/tasks.c **** 
3620:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3622:.//Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 211              		.loc 1 3622 3 view .LVU68
 212 00be 0F48     		ldr	r0, .L18+32
 213 00c0 FFF7FEFF 		bl	vListInitialise
 214              	.LVL9:
3623:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3624:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:.//Libraries/FreeRTOS/Source/tasks.c **** 
3626:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3628:.//Libraries/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 215              		.loc 1 3628 3 view .LVU69
 216 00c4 0E48     		ldr	r0, .L18+36
 217 00c6 FFF7FEFF 		bl	vListInitialise
 218              	.LVL10:
3629:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3630:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:.//Libraries/FreeRTOS/Source/tasks.c **** 
3632:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:.//Libraries/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 69


 219              		.loc 1 3634 2 view .LVU70
 220              		.loc 1 3634 20 is_stmt 0 view .LVU71
 221 00ca 0E4A     		ldr	r2, .L18+40
3635:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 222              		.loc 1 3635 28 view .LVU72
 223 00cc 0E4B     		ldr	r3, .L18+44
3634:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 224              		.loc 1 3634 20 view .LVU73
 225 00ce C2F80090 		str	r9, [r2]
 226              		.loc 1 3635 2 is_stmt 1 view .LVU74
 227 00d2 E06A     		ldr	r0, [r4, #44]
 228              		.loc 1 3635 28 is_stmt 0 view .LVU75
 229 00d4 C3F80080 		str	r8, [r3]
3636:.//Libraries/FreeRTOS/Source/tasks.c **** }
 230              		.loc 1 3636 1 view .LVU76
 231 00d8 A4E7     		b	.L4
 232              	.L19:
 233 00da 00BF     		.align	2
 234              	.L18:
 235 00dc 00000000 		.word	.LANCHOR0
 236 00e0 00000000 		.word	.LANCHOR1
 237 00e4 00000000 		.word	.LANCHOR10
 238 00e8 00000000 		.word	.LANCHOR2
 239 00ec 00000000 		.word	.LANCHOR11
 240 00f0 00000000 		.word	.LANCHOR12
 241 00f4 04ED00E0 		.word	-536810236
 242 00f8 00000000 		.word	.LANCHOR5
 243 00fc 00000000 		.word	.LANCHOR6
 244 0100 00000000 		.word	.LANCHOR7
 245 0104 00000000 		.word	.LANCHOR8
 246 0108 00000000 		.word	.LANCHOR9
 247 010c 00000000 		.word	.LANCHOR3
 248 0110 00000000 		.word	.LANCHOR4
 249              	.LBE219:
 250              	.LBE218:
 251              		.cfi_endproc
 252              	.LFE7:
 254              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 255              		.align	1
 256              		.p2align 2,,3
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv5-d16
 262              	prvTaskIsTaskSuspended:
 263              	.LVL11:
 264              	.LFB16:
1806:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 265              		.loc 1 1806 2 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
1807:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 270              		.loc 1 1807 2 view .LVU78
1808:.//Libraries/FreeRTOS/Source/tasks.c **** 
 271              		.loc 1 1808 2 view .LVU79
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 70


1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 272              		.loc 1 1814 3 view .LVU80
 273 0000 50B1     		cbz	r0, .L25
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 274              		.loc 1 1814 24 discriminator 2 view .LVU81
1817:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 275              		.loc 1 1817 3 discriminator 2 view .LVU82
1817:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 276              		.loc 1 1817 5 is_stmt 0 discriminator 2 view .LVU83
 277 0002 0A4B     		ldr	r3, .L27
 278 0004 4269     		ldr	r2, [r0, #20]
 279 0006 9A42     		cmp	r2, r3
 280 0008 01D0     		beq	.L26
1807:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 281              		.loc 1 1807 13 view .LVU84
 282 000a 0020     		movs	r0, #0
 283              	.LVL12:
1840:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 284              		.loc 1 1840 28 is_stmt 1 view .LVU85
1843:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 285              		.loc 1 1843 3 view .LVU86
1844:.//Libraries/FreeRTOS/Source/tasks.c **** 
 286              		.loc 1 1844 2 is_stmt 0 view .LVU87
 287 000c 7047     		bx	lr
 288              	.LVL13:
 289              	.L26:
 290              	.LBB226:
 291              	.LBI226:
1805:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 292              		.loc 1 1805 20 is_stmt 1 view .LVU88
 293              	.LBB227:
1820:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 294              		.loc 1 1820 4 view .LVU89
1820:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 295              		.loc 1 1820 8 is_stmt 0 view .LVU90
 296 000e 806A     		ldr	r0, [r0, #40]
 297              	.LVL14:
1824:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 298              		.loc 1 1824 5 is_stmt 1 view .LVU91
 299              	.LBE227:
 300              	.LBE226:
1807:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 301              		.loc 1 1807 13 is_stmt 0 view .LVU92
 302 0010 B0FA80F0 		clz	r0, r0
 303 0014 4009     		lsrs	r0, r0, #5
 304              	.LBB229:
 305              	.LBB228:
 306 0016 7047     		bx	lr
 307              	.LVL15:
 308              	.L25:
1807:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 309              		.loc 1 1807 13 view .LVU93
 310              	.LBE228:
 311              	.LBE229:
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 312              		.loc 1 1814 3 is_stmt 1 view .LVU94
 313              	.LBB230:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 71


 314              	.LBI230:
 315              		.file 2 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 72


  56:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 73


 113:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 74


 170:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 316              		.loc 2 191 30 view .LVU95
 317              	.LBB231:
 192:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 318              		.loc 2 193 1 view .LVU96
 194:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 319              		.loc 2 195 2 view .LVU97
 320              		.syntax unified
 321              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 322 0018 4FF05003 			mov r3, #80												
 323 001c 83F31188 		msr basepri, r3											
 324 0020 BFF36F8F 		isb														
 325 0024 BFF34F8F 		dsb														
 326              	
 327              	@ 0 "" 2
 328              	.LVL16:
 329              		.thumb
 330              		.syntax unified
 331              	.L22:
 332              		.loc 2 195 2 is_stmt 0 view .LVU98
 333              	.LBE231:
 334              	.LBE230:
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 335              		.loc 1 1814 3 is_stmt 1 discriminator 1 view .LVU99
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 336              		.loc 1 1814 3 discriminator 1 view .LVU100
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 337              		.loc 1 1814 3 discriminator 1 view .LVU101
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 338              		.loc 1 1814 3 discriminator 1 view .LVU102
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 339              		.loc 1 1814 3 discriminator 1 view .LVU103
1814:.//Libraries/FreeRTOS/Source/tasks.c **** 
 340              		.loc 1 1814 3 discriminator 1 view .LVU104
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 75


 341 0028 FEE7     		b	.L22
 342              	.L28:
 343 002a 00BF     		.align	2
 344              	.L27:
 345 002c 00000000 		.word	.LANCHOR7
 346              		.cfi_endproc
 347              	.LFE16:
 349              		.section	.text.prvResetNextTaskUnblockTime.part.0,"ax",%progbits
 350              		.align	1
 351              		.p2align 2,,3
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu fpv5-d16
 357              	prvResetNextTaskUnblockTime.part.0:
 358              	.LFB67:
3637:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:.//Libraries/FreeRTOS/Source/tasks.c **** 
3639:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:.//Libraries/FreeRTOS/Source/tasks.c **** {
3641:.//Libraries/FreeRTOS/Source/tasks.c **** 
3642:.//Libraries/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:.//Libraries/FreeRTOS/Source/tasks.c **** 
3644:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3646:.//Libraries/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:.//Libraries/FreeRTOS/Source/tasks.c **** 
3648:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:.//Libraries/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:.//Libraries/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3652:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3654:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3659:.//Libraries/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:.//Libraries/FreeRTOS/Source/tasks.c **** 
3661:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3663:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3664:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:.//Libraries/FreeRTOS/Source/tasks.c **** }
3666:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:.//Libraries/FreeRTOS/Source/tasks.c **** 
3668:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:.//Libraries/FreeRTOS/Source/tasks.c **** 
3670:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3672:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:.//Libraries/FreeRTOS/Source/tasks.c **** 
3674:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:.//Libraries/FreeRTOS/Source/tasks.c **** 
3677:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 76


3678:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:.//Libraries/FreeRTOS/Source/tasks.c **** 
3683:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3685:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3687:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else
3688:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3689:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3691:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3692:.//Libraries/FreeRTOS/Source/tasks.c **** 
3693:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3695:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3697:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else
3698:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3699:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3701:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3702:.//Libraries/FreeRTOS/Source/tasks.c **** 
3703:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:.//Libraries/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:.//Libraries/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3708:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3710:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3712:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3713:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3714:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:.//Libraries/FreeRTOS/Source/tasks.c **** 
3716:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
3718:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:.//Libraries/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:.//Libraries/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
3723:.//Libraries/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
3725:.//Libraries/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
3727:.//Libraries/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
3729:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
3730:.//Libraries/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
3732:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
3733:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 77


3735:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3736:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3737:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3738:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3740:.//Libraries/FreeRTOS/Source/tasks.c **** 
3741:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:.//Libraries/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3745:.//Libraries/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3747:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3749:.//Libraries/FreeRTOS/Source/tasks.c **** 			#else
3750:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3751:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3753:.//Libraries/FreeRTOS/Source/tasks.c **** 			#endif
3754:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3755:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3756:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3757:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3759:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3760:.//Libraries/FreeRTOS/Source/tasks.c **** 
3761:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:.//Libraries/FreeRTOS/Source/tasks.c **** 
3764:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:.//Libraries/FreeRTOS/Source/tasks.c **** 
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:.//Libraries/FreeRTOS/Source/tasks.c **** 
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:.//Libraries/FreeRTOS/Source/tasks.c **** 
3775:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:.//Libraries/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:.//Libraries/FreeRTOS/Source/tasks.c **** 			do
3780:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3786:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
3787:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3790:.//Libraries/FreeRTOS/Source/tasks.c **** 
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxTask;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 78


3792:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3793:.//Libraries/FreeRTOS/Source/tasks.c **** 
3794:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:.//Libraries/FreeRTOS/Source/tasks.c **** 
3797:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:.//Libraries/FreeRTOS/Source/tasks.c **** 
3799:.//Libraries/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3801:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3802:.//Libraries/FreeRTOS/Source/tasks.c **** 
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3805:.//Libraries/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulCount++;
3807:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3808:.//Libraries/FreeRTOS/Source/tasks.c **** 
3809:.//Libraries/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:.//Libraries/FreeRTOS/Source/tasks.c **** 
3811:.//Libraries/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3813:.//Libraries/FreeRTOS/Source/tasks.c **** 
3814:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:.//Libraries/FreeRTOS/Source/tasks.c **** 
3817:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:.//Libraries/FreeRTOS/Source/tasks.c **** 
3819:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:.//Libraries/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:.//Libraries/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:.//Libraries/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:.//Libraries/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:.//Libraries/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3826:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:.//Libraries/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:.//Libraries/FreeRTOS/Source/tasks.c **** 
3830:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:.//Libraries/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:.//Libraries/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:.//Libraries/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:.//Libraries/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:.//Libraries/FreeRTOS/Source/tasks.c **** 		type. */
3836:.//Libraries/FreeRTOS/Source/tasks.c **** 
3837:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:.//Libraries/FreeRTOS/Source/tasks.c **** 
3839:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3841:.//Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3843:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else
3844:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3845:.//Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3847:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3848:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 79


3849:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:.//Libraries/FreeRTOS/Source/tasks.c **** 
3851:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3853:.//Libraries/FreeRTOS/Source/tasks.c **** 
3854:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:.//Libraries/FreeRTOS/Source/tasks.c **** 
3857:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:.//Libraries/FreeRTOS/Source/tasks.c **** 
3859:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3861:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:.//Libraries/FreeRTOS/Source/tasks.c **** 
3865:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:.//Libraries/FreeRTOS/Source/tasks.c **** 
3867:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3869:.//Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3871:.//Libraries/FreeRTOS/Source/tasks.c **** 		#else
3872:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3873:.//Libraries/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3875:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
3876:.//Libraries/FreeRTOS/Source/tasks.c **** 
3877:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:.//Libraries/FreeRTOS/Source/tasks.c **** 
3879:.//Libraries/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3881:.//Libraries/FreeRTOS/Source/tasks.c **** 
3882:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:.//Libraries/FreeRTOS/Source/tasks.c **** 
3885:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:.//Libraries/FreeRTOS/Source/tasks.c **** 
3887:.//Libraries/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3889:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:.//Libraries/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:.//Libraries/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:.//Libraries/FreeRTOS/Source/tasks.c **** 
3894:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:.//Libraries/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:.//Libraries/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:.//Libraries/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3900:.//Libraries/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3902:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:.//Libraries/FreeRTOS/Source/tasks.c **** 
3904:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 80


3906:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:.//Libraries/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:.//Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:.//Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3911:.//Libraries/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3913:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:.//Libraries/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:.//Libraries/FreeRTOS/Source/tasks.c **** 			memory. */
3916:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3918:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:.//Libraries/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3923:.//Libraries/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3925:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:.//Libraries/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3929:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
3930:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3931:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:.//Libraries/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
3936:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3937:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3939:.//Libraries/FreeRTOS/Source/tasks.c **** 
3940:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:.//Libraries/FreeRTOS/Source/tasks.c **** 
3943:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
 359              		.loc 1 3943 13 view -0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              		@ link register save eliminated.
3944:.//Libraries/FreeRTOS/Source/tasks.c **** {
3945:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:.//Libraries/FreeRTOS/Source/tasks.c **** 
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3948:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3949:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:.//Libraries/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:.//Libraries/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3955:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
3956:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3957:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 81


3958:.//Libraries/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:.//Libraries/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:.//Libraries/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:.//Libraries/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 364              		.loc 1 3961 3 view .LVU106
 365              		.loc 1 3961 15 is_stmt 0 view .LVU107
 366 0000 034A     		ldr	r2, .L30
3962:.//Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 367              		.loc 1 3962 24 view .LVU108
 368 0002 044B     		ldr	r3, .L30+4
3961:.//Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 369              		.loc 1 3961 15 view .LVU109
 370 0004 1268     		ldr	r2, [r2]
 371              	.LVL17:
 372              		.loc 1 3962 3 is_stmt 1 view .LVU110
3961:.//Libraries/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 373              		.loc 1 3961 13 is_stmt 0 view .LVU111
 374 0006 D268     		ldr	r2, [r2, #12]
 375              	.LVL18:
 376              		.loc 1 3962 26 view .LVU112
 377 0008 D268     		ldr	r2, [r2, #12]
 378              	.LVL19:
 379              		.loc 1 3962 26 view .LVU113
 380 000a 5268     		ldr	r2, [r2, #4]
 381              	.LVL20:
 382              		.loc 1 3962 24 view .LVU114
 383 000c 1A60     		str	r2, [r3]
3963:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3964:.//Libraries/FreeRTOS/Source/tasks.c **** }
 384              		.loc 1 3964 1 view .LVU115
 385 000e 7047     		bx	lr
 386              	.L31:
 387              		.align	2
 388              	.L30:
 389 0010 00000000 		.word	.LANCHOR8
 390 0014 00000000 		.word	.LANCHOR13
 391              		.cfi_endproc
 392              	.LFE67:
 394              		.section	.text.prvInitialiseNewTask.isra.0,"ax",%progbits
 395              		.align	1
 396              		.p2align 2,,3
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv5-d16
 402              	prvInitialiseNewTask.isra.0:
 403              	.LVL21:
 404              	.LFB68:
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 405              		.loc 1 824 13 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 12, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 409              		.loc 1 824 13 is_stmt 0 view .LVU117
 410 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 411              	.LCFI1:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 82


 412              		.cfi_def_cfa_offset 32
 413              		.cfi_offset 4, -32
 414              		.cfi_offset 5, -28
 415              		.cfi_offset 6, -24
 416              		.cfi_offset 7, -20
 417              		.cfi_offset 8, -16
 418              		.cfi_offset 9, -12
 419              		.cfi_offset 10, -8
 420              		.cfi_offset 14, -4
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 421              		.loc 1 824 13 view .LVU118
 422 0004 0A9C     		ldr	r4, [sp, #40]
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 423              		.loc 1 854 12 view .LVU119
 424 0006 4FEA820A 		lsl	r10, r2, #2
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 425              		.loc 1 824 13 view .LVU120
 426 000a 0746     		mov	r7, r0
 427 000c 0D46     		mov	r5, r1
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 428              		.loc 1 854 12 view .LVU121
 429 000e 5246     		mov	r2, r10
 430              	.LVL22:
 833:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 431              		.loc 1 833 1 is_stmt 1 view .LVU122
 834:.//Libraries/FreeRTOS/Source/tasks.c **** 
 432              		.loc 1 834 1 view .LVU123
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 433              		.loc 1 854 3 view .LVU124
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 434              		.loc 1 854 12 is_stmt 0 view .LVU125
 435 0010 206B     		ldr	r0, [r4, #48]
 436              	.LVL23:
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 437              		.loc 1 854 12 view .LVU126
 438 0012 A521     		movs	r1, #165
 439              	.LVL24:
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 440              		.loc 1 824 13 view .LVU127
 441 0014 9846     		mov	r8, r3
 864:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 442              		.loc 1 864 38 view .LVU128
 443 0016 AAF1040A 		sub	r10, r10, #4
 824:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 444              		.loc 1 824 13 view .LVU129
 445 001a DDE90869 		ldrd	r6, r9, [sp, #32]
 854:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 446              		.loc 1 854 12 view .LVU130
 447 001e FFF7FEFF 		bl	memset
 448              	.LVL25:
 864:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 449              		.loc 1 864 3 is_stmt 1 view .LVU131
 865:.//Libraries/FreeRTOS/Source/tasks.c **** 
 450              		.loc 1 865 3 view .LVU132
 864:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 451              		.loc 1 864 16 is_stmt 0 view .LVU133
 452 0022 236B     		ldr	r3, [r4, #48]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 83


 453 0024 9A44     		add	r10, r10, r3
 865:.//Libraries/FreeRTOS/Source/tasks.c **** 
 454              		.loc 1 865 81 view .LVU134
 455 0026 2AF0070A 		bic	r10, r10, #7
 456              	.LVL26:
 868:.//Libraries/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 868 3 is_stmt 1 view .LVU135
 868:.//Libraries/FreeRTOS/Source/tasks.c **** 
 458              		.loc 1 868 124 view .LVU136
 892:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 459              		.loc 1 892 2 view .LVU137
 892:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 460              		.loc 1 892 4 is_stmt 0 view .LVU138
 461 002a A5B3     		cbz	r5, .L33
 462 002c 6A1E     		subs	r2, r5, #1
 463 002e 05F10F01 		add	r1, r5, #15
 464 0032 04F13305 		add	r5, r4, #51
 465              	.LVL27:
 466              	.L35:
 896:.//Libraries/FreeRTOS/Source/tasks.c **** 
 467              		.loc 1 896 4 is_stmt 1 view .LVU139
 907:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 468              		.loc 1 907 29 view .LVU140
 894:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 469              		.loc 1 894 76 view .LVU141
 896:.//Libraries/FreeRTOS/Source/tasks.c **** 
 470              		.loc 1 896 38 is_stmt 0 view .LVU142
 471 0036 12F8013F 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 894:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 472              		.loc 1 894 31 is_stmt 1 view .LVU143
 896:.//Libraries/FreeRTOS/Source/tasks.c **** 
 473              		.loc 1 896 30 is_stmt 0 view .LVU144
 474 003a 05F8013F 		strb	r3, [r5, #1]!
 901:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 475              		.loc 1 901 4 is_stmt 1 view .LVU145
 901:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 476              		.loc 1 901 6 is_stmt 0 view .LVU146
 477 003e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 478 0040 0BB1     		cbz	r3, .L34
 894:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 479              		.loc 1 894 3 view .LVU147
 480 0042 8A42     		cmp	r2, r1
 481 0044 F7D1     		bne	.L35
 482              	.L34:
 913:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 483              		.loc 1 913 3 is_stmt 1 view .LVU148
 913:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 484              		.loc 1 913 55 is_stmt 0 view .LVU149
 485 0046 0023     		movs	r3, #0
 486 0048 84F84330 		strb	r3, [r4, #67]
 487              	.LVL28:
 488              	.L36:
 924:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 489              		.loc 1 924 2 is_stmt 1 view .LVU150
 490 004c 372E     		cmp	r6, #55
 937:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 491              		.loc 1 937 27 is_stmt 0 view .LVU151
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 84


 492 004e 4FF00005 		mov	r5, #0
 941:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 493              		.loc 1 941 2 view .LVU152
 494 0052 04F10400 		add	r0, r4, #4
 495 0056 28BF     		it	cs
 496 0058 3726     		movcs	r6, #55
 497              	.LVL29:
 930:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 498              		.loc 1 930 27 is_stmt 1 view .LVU153
 933:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 499              		.loc 1 933 2 view .LVU154
 933:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 500              		.loc 1 933 23 is_stmt 0 view .LVU155
 501 005a E662     		str	r6, [r4, #44]
 936:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 502              		.loc 1 936 3 is_stmt 1 view .LVU156
 937:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 503              		.loc 1 937 27 is_stmt 0 view .LVU157
 504 005c C4E91365 		strd	r6, r5, [r4, #76]
 941:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 505              		.loc 1 941 2 is_stmt 1 view .LVU158
 949:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 506              		.loc 1 949 2 is_stmt 0 view .LVU159
 507 0060 C6F13806 		rsb	r6, r6, #56
 508              	.LVL30:
 941:.//Libraries/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 509              		.loc 1 941 2 view .LVU160
 510 0064 FFF7FEFF 		bl	vListInitialiseItem
 511              	.LVL31:
 942:.//Libraries/FreeRTOS/Source/tasks.c **** 
 512              		.loc 1 942 2 is_stmt 1 view .LVU161
 513 0068 04F11800 		add	r0, r4, #24
 514 006c FFF7FEFF 		bl	vListInitialiseItem
 515              	.LVL32:
 946:.//Libraries/FreeRTOS/Source/tasks.c **** 
 516              		.loc 1 946 2 view .LVU162
 992:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 517              		.loc 1 992 29 is_stmt 0 view .LVU163
 518 0070 6565     		str	r5, [r4, #84]
1058:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 519              		.loc 1 1058 29 view .LVU164
 520 0072 4246     		mov	r2, r8
 521 0074 3946     		mov	r1, r7
 522 0076 5046     		mov	r0, r10
 949:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 523              		.loc 1 949 2 view .LVU165
 524 0078 A661     		str	r6, [r4, #24]
 993:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 525              		.loc 1 993 27 view .LVU166
 526 007a 84F85850 		strb	r5, [r4, #88]
 946:.//Libraries/FreeRTOS/Source/tasks.c **** 
 527              		.loc 1 946 2 view .LVU167
 528 007e 2461     		str	r4, [r4, #16]
 949:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 529              		.loc 1 949 2 is_stmt 1 view .LVU168
 950:.//Libraries/FreeRTOS/Source/tasks.c **** 
 530              		.loc 1 950 2 view .LVU169
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 85


 531 0080 6462     		str	r4, [r4, #36]
 977:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 532              		.loc 1 977 3 view .LVU170
 992:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 533              		.loc 1 992 3 view .LVU171
 993:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 534              		.loc 1 993 3 view .LVU172
1058:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 535              		.loc 1 1058 4 view .LVU173
1058:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 536              		.loc 1 1058 29 is_stmt 0 view .LVU174
 537 0082 FFF7FEFF 		bl	pxPortInitialiseStack
 538              	.LVL33:
1058:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 539              		.loc 1 1058 27 view .LVU175
 540 0086 2060     		str	r0, [r4]
1064:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 541              		.loc 1 1064 2 is_stmt 1 view .LVU176
1064:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 542              		.loc 1 1064 4 is_stmt 0 view .LVU177
 543 0088 B9F1000F 		cmp	r9, #0
 544 008c 01D0     		beq	.L32
1068:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 545              		.loc 1 1068 3 is_stmt 1 view .LVU178
1068:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 546              		.loc 1 1068 18 is_stmt 0 view .LVU179
 547 008e C9F80040 		str	r4, [r9]
1072:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 548              		.loc 1 1072 27 is_stmt 1 view .LVU180
 549              	.L32:
1074:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 550              		.loc 1 1074 1 is_stmt 0 view .LVU181
 551 0092 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 552              	.LVL34:
 553              	.L33:
 919:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 554              		.loc 1 919 3 is_stmt 1 view .LVU182
 919:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 555              		.loc 1 919 29 is_stmt 0 view .LVU183
 556 0096 84F83450 		strb	r5, [r4, #52]
 557 009a D7E7     		b	.L36
 558              		.cfi_endproc
 559              	.LFE68:
 561              		.section	.text.prvDeleteTCB,"ax",%progbits
 562              		.align	1
 563              		.p2align 2,,3
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv5-d16
 569              	prvDeleteTCB:
 570              	.LVL35:
 571              	.LFB49:
3888:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 572              		.loc 1 3888 2 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 86


 575              		@ frame_needed = 0, uses_anonymous_args = 0
3892:.//Libraries/FreeRTOS/Source/tasks.c **** 
 576              		.loc 1 3892 3 view .LVU185
3916:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 577              		.loc 1 3916 4 view .LVU186
3916:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 578              		.loc 1 3916 13 is_stmt 0 view .LVU187
 579 0000 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
3916:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 580              		.loc 1 3916 6 view .LVU188
 581 0004 63B1     		cbz	r3, .L54
3923:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 582              		.loc 1 3923 9 is_stmt 1 view .LVU189
3923:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 583              		.loc 1 3923 11 is_stmt 0 view .LVU190
 584 0006 012B     		cmp	r3, #1
 585 0008 15D0     		beq	.L55
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 586              		.loc 1 3933 5 is_stmt 1 view .LVU191
 587 000a 022B     		cmp	r3, #2
 588 000c 12D0     		beq	.L46
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 589              		.loc 1 3933 5 view .LVU192
 590              	.LBB238:
 591              	.LBI238:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 592              		.loc 2 191 30 view .LVU193
 593              	.LBB239:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 594              		.loc 2 193 1 view .LVU194
 595              		.loc 2 195 2 view .LVU195
 596              		.syntax unified
 597              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 598 000e 4FF05003 			mov r3, #80												
 599 0012 83F31188 		msr basepri, r3											
 600 0016 BFF36F8F 		isb														
 601 001a BFF34F8F 		dsb														
 602              	
 603              	@ 0 "" 2
 604              	.LVL36:
 605              		.thumb
 606              		.syntax unified
 607              	.L50:
 608              		.loc 2 195 2 is_stmt 0 view .LVU196
 609              	.LBE239:
 610              	.LBE238:
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 611              		.loc 1 3933 5 is_stmt 1 discriminator 1 view .LVU197
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 612              		.loc 1 3933 5 discriminator 1 view .LVU198
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 613              		.loc 1 3933 5 discriminator 1 view .LVU199
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 614              		.loc 1 3933 5 discriminator 1 view .LVU200
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 615              		.loc 1 3933 5 discriminator 1 view .LVU201
3933:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 87


 616              		.loc 1 3933 5 discriminator 1 view .LVU202
 617 001e FEE7     		b	.L50
 618              	.L54:
 619              	.LVL37:
 620              	.LBB240:
 621              	.LBI240:
3887:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 622              		.loc 1 3887 14 view .LVU203
 623              	.LBB241:
3920:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 624              		.loc 1 3920 5 view .LVU204
 625              	.LBE241:
 626              	.LBE240:
3888:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 627              		.loc 1 3888 2 is_stmt 0 view .LVU205
 628 0020 10B5     		push	{r4, lr}
 629              	.LCFI2:
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 4, -8
 632              		.cfi_offset 14, -4
 633 0022 0446     		mov	r4, r0
 634              	.LBB244:
 635              	.LBB242:
3920:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 636              		.loc 1 3920 5 view .LVU206
 637 0024 006B     		ldr	r0, [r0, #48]
 638              	.LVL38:
3920:.//Libraries/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 639              		.loc 1 3920 5 view .LVU207
 640 0026 FFF7FEFF 		bl	vPortFree
 641              	.LVL39:
3921:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 642              		.loc 1 3921 5 is_stmt 1 view .LVU208
 643 002a 2046     		mov	r0, r4
 644              	.LBE242:
 645              	.LBE244:
3938:.//Libraries/FreeRTOS/Source/tasks.c **** 
 646              		.loc 1 3938 2 is_stmt 0 view .LVU209
 647 002c BDE81040 		pop	{r4, lr}
 648              	.LCFI3:
 649              		.cfi_restore 14
 650              		.cfi_restore 4
 651              		.cfi_def_cfa_offset 0
 652              	.LVL40:
 653              	.LBB245:
 654              	.LBB243:
3921:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 655              		.loc 1 3921 5 view .LVU210
 656 0030 FFF7FEBF 		b	vPortFree
 657              	.LVL41:
 658              	.L46:
3921:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 659              		.loc 1 3921 5 view .LVU211
 660 0034 7047     		bx	lr
 661              	.L55:
 662              	.LBE243:
 663              	.LBE245:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 88


3927:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 664              		.loc 1 3927 5 is_stmt 1 view .LVU212
 665 0036 FFF7FEBF 		b	vPortFree
 666              	.LVL42:
3927:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 667              		.loc 1 3927 5 is_stmt 0 view .LVU213
 668              		.cfi_endproc
 669              	.LFE49:
 671 003a 00BF     		.section	.text.prvIdleTask,"ax",%progbits
 672              		.align	1
 673              		.p2align 2,,3
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu fpv5-d16
 679              	prvIdleTask:
 680              	.LVL43:
 681              	.LFB42:
3393:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 682              		.loc 1 3393 1 is_stmt 1 view -0
 683              		.cfi_startproc
 684              		@ Volatile: function does not return.
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
3393:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 687              		.loc 1 3393 1 is_stmt 0 view .LVU215
 688 0000 80B5     		push	{r7, lr}
 689              	.LCFI4:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 7, -8
 692              		.cfi_offset 14, -4
 693 0002 154C     		ldr	r4, .L68
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 694              		.loc 1 3434 5 view .LVU216
 695 0004 4FF08059 		mov	r9, #268435456
 696 0008 144E     		ldr	r6, .L68+4
 697 000a 154D     		ldr	r5, .L68+8
 698 000c 154F     		ldr	r7, .L68+12
 699 000e DFF85880 		ldr	r8, .L68+16
 700 0012 13E0     		b	.L67
 701              	.LVL44:
 702              	.L58:
 703              	.LBB249:
 704              	.LBB250:
3652:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 705              		.loc 1 3652 4 is_stmt 1 view .LVU217
 706 0014 FFF7FEFF 		bl	vPortEnterCritical
 707              	.LVL45:
3654:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 708              		.loc 1 3654 5 view .LVU218
3654:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 709              		.loc 1 3654 11 is_stmt 0 view .LVU219
 710 0018 F368     		ldr	r3, [r6, #12]
 711 001a D3F80CA0 		ldr	r10, [r3, #12]
 712              	.LVL46:
3655:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 713              		.loc 1 3655 5 is_stmt 1 view .LVU220
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 89


3655:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 714              		.loc 1 3655 14 is_stmt 0 view .LVU221
 715 001e 0AF10400 		add	r0, r10, #4
 716 0022 FFF7FEFF 		bl	uxListRemove
 717              	.LVL47:
3656:.//Libraries/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 718              		.loc 1 3656 5 is_stmt 1 view .LVU222
 719 0026 2B68     		ldr	r3, [r5]
 720 0028 013B     		subs	r3, r3, #1
 721 002a 2B60     		str	r3, [r5]
3657:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 722              		.loc 1 3657 5 view .LVU223
 723 002c 2368     		ldr	r3, [r4]
 724 002e 013B     		subs	r3, r3, #1
 725 0030 2360     		str	r3, [r4]
3659:.//Libraries/FreeRTOS/Source/tasks.c **** 
 726              		.loc 1 3659 4 view .LVU224
 727 0032 FFF7FEFF 		bl	vPortExitCritical
 728              	.LVL48:
3661:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 729              		.loc 1 3661 4 view .LVU225
 730 0036 5046     		mov	r0, r10
 731 0038 FFF7FEFF 		bl	prvDeleteTCB
 732              	.LVL49:
 733              	.L67:
3650:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 734              		.loc 1 3650 8 view .LVU226
3650:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 735              		.loc 1 3650 39 is_stmt 0 view .LVU227
 736 003c 2368     		ldr	r3, [r4]
3650:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 737              		.loc 1 3650 8 view .LVU228
 738 003e 002B     		cmp	r3, #0
 739 0040 E8D1     		bne	.L58
 740              	.LBE250:
 741              	.LBE249:
3432:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 742              		.loc 1 3432 4 is_stmt 1 view .LVU229
3432:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 743              		.loc 1 3432 8 is_stmt 0 view .LVU230
 744 0042 3B68     		ldr	r3, [r7]
3432:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 745              		.loc 1 3432 6 view .LVU231
 746 0044 012B     		cmp	r3, #1
 747 0046 F9D9     		bls	.L67
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 748              		.loc 1 3434 5 is_stmt 1 view .LVU232
 749 0048 C8F80090 		str	r9, [r8]
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 750              		.loc 1 3434 5 view .LVU233
 751              		.syntax unified
 752              	@ 3434 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 753 004c BFF34F8F 		dsb
 754              	@ 0 "" 2
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 755              		.loc 1 3434 5 view .LVU234
 756              	@ 3434 ".//Libraries/FreeRTOS/Source/tasks.c" 1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 90


 757 0050 BFF36F8F 		isb
 758              	@ 0 "" 2
3434:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 759              		.loc 1 3434 16 view .LVU235
 760              		.thumb
 761              		.syntax unified
 762 0054 F2E7     		b	.L67
 763              	.L69:
 764 0056 00BF     		.align	2
 765              	.L68:
 766 0058 00000000 		.word	.LANCHOR14
 767 005c 00000000 		.word	.LANCHOR6
 768 0060 00000000 		.word	.LANCHOR0
 769 0064 00000000 		.word	.LANCHOR2
 770 0068 04ED00E0 		.word	-536810236
 771              		.cfi_endproc
 772              	.LFE42:
 774              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 775              		.align	1
 776              		.p2align 2,,3
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv5-d16
 782              	prvAddCurrentTaskToDelayedList:
 783              	.LVL50:
 784              	.LFB65:
3965:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:.//Libraries/FreeRTOS/Source/tasks.c **** 
3967:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:.//Libraries/FreeRTOS/Source/tasks.c **** 
3969:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3971:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:.//Libraries/FreeRTOS/Source/tasks.c **** 
3973:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:.//Libraries/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:.//Libraries/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:.//Libraries/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:.//Libraries/FreeRTOS/Source/tasks.c **** 
3978:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
3980:.//Libraries/FreeRTOS/Source/tasks.c **** 
3981:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:.//Libraries/FreeRTOS/Source/tasks.c **** 
3984:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:.//Libraries/FreeRTOS/Source/tasks.c **** 
3986:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
3988:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:.//Libraries/FreeRTOS/Source/tasks.c **** 
3990:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3992:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
3994:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 91


3995:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
3996:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
3998:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4000:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4001:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4002:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4004:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4005:.//Libraries/FreeRTOS/Source/tasks.c **** 
4006:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4008:.//Libraries/FreeRTOS/Source/tasks.c **** 
4009:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:.//Libraries/FreeRTOS/Source/tasks.c **** 
4012:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:.//Libraries/FreeRTOS/Source/tasks.c **** 
4014:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4016:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:.//Libraries/FreeRTOS/Source/tasks.c **** 
4019:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:.//Libraries/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:.//Libraries/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4024:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:.//Libraries/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:.//Libraries/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4029:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:.//Libraries/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:.//Libraries/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4034:.//Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4036:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4037:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4038:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4040:.//Libraries/FreeRTOS/Source/tasks.c **** 
4041:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:.//Libraries/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4045:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4047:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:.//Libraries/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:.//Libraries/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:.//Libraries/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 92


4052:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4053:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4054:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4056:.//Libraries/FreeRTOS/Source/tasks.c **** 
4057:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4061:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4062:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4063:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4066:.//Libraries/FreeRTOS/Source/tasks.c **** 
4067:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:.//Libraries/FreeRTOS/Source/tasks.c **** 
4069:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4072:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4073:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4074:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4076:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:.//Libraries/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:.//Libraries/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:.//Libraries/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:.//Libraries/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:.//Libraries/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:.//Libraries/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:.//Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4085:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4086:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4087:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4089:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4090:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4091:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4092:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4093:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4095:.//Libraries/FreeRTOS/Source/tasks.c **** 
4096:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4098:.//Libraries/FreeRTOS/Source/tasks.c **** 
4099:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:.//Libraries/FreeRTOS/Source/tasks.c **** 
4102:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:.//Libraries/FreeRTOS/Source/tasks.c **** 
4104:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4106:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 93


4109:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4111:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:.//Libraries/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:.//Libraries/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:.//Libraries/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:.//Libraries/FreeRTOS/Source/tasks.c **** 
4119:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:.//Libraries/FreeRTOS/Source/tasks.c **** 			task? */
4121:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4123:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4126:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:.//Libraries/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:.//Libraries/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:.//Libraries/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:.//Libraries/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4133:.//Libraries/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4135:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4136:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4137:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4139:.//Libraries/FreeRTOS/Source/tasks.c **** 
4140:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:.//Libraries/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:.//Libraries/FreeRTOS/Source/tasks.c **** 
4145:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:.//Libraries/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:.//Libraries/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:.//Libraries/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:.//Libraries/FreeRTOS/Source/tasks.c **** 
4151:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:.//Libraries/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:.//Libraries/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:.//Libraries/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:.//Libraries/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:.//Libraries/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:.//Libraries/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:.//Libraries/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:.//Libraries/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4161:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4162:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4163:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4165:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 94


4166:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4167:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4168:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4170:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4171:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4172:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4173:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4175:.//Libraries/FreeRTOS/Source/tasks.c **** 
4176:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4178:.//Libraries/FreeRTOS/Source/tasks.c **** 
4179:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:.//Libraries/FreeRTOS/Source/tasks.c **** 
4182:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:.//Libraries/FreeRTOS/Source/tasks.c **** 
4184:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4186:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:.//Libraries/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:.//Libraries/FreeRTOS/Source/tasks.c **** 
4190:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4192:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:.//Libraries/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:.//Libraries/FreeRTOS/Source/tasks.c **** 
4196:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:.//Libraries/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:.//Libraries/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:.//Libraries/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4202:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4204:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4205:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4206:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4208:.//Libraries/FreeRTOS/Source/tasks.c **** 
4209:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4212:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:.//Libraries/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:.//Libraries/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:.//Libraries/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4218:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:.//Libraries/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:.//Libraries/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 95


4223:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:.//Libraries/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:.//Libraries/FreeRTOS/Source/tasks.c **** 					state. */
4226:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:.//Libraries/FreeRTOS/Source/tasks.c **** 
4230:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:.//Libraries/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4234:.//Libraries/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4236:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4237:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4238:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4240:.//Libraries/FreeRTOS/Source/tasks.c **** 
4241:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:.//Libraries/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:.//Libraries/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:.//Libraries/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:.//Libraries/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:.//Libraries/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4249:.//Libraries/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4251:.//Libraries/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:.//Libraries/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:.//Libraries/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:.//Libraries/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4256:.//Libraries/FreeRTOS/Source/tasks.c **** 						else
4257:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4258:.//Libraries/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4260:.//Libraries/FreeRTOS/Source/tasks.c **** 
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4263:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4264:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4265:.//Libraries/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4267:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4268:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4269:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4270:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4272:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4273:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4274:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4275:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4277:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4278:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4279:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 96


4280:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4282:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4283:.//Libraries/FreeRTOS/Source/tasks.c **** 
4284:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:.//Libraries/FreeRTOS/Source/tasks.c **** 
4287:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:.//Libraries/FreeRTOS/Source/tasks.c **** 
4289:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4291:.//Libraries/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:.//Libraries/FreeRTOS/Source/tasks.c **** 
4293:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4295:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:.//Libraries/FreeRTOS/Source/tasks.c **** 
4297:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:.//Libraries/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:.//Libraries/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:.//Libraries/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:.//Libraries/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:.//Libraries/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4305:.//Libraries/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4307:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4308:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4309:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4310:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4312:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4313:.//Libraries/FreeRTOS/Source/tasks.c **** 
4314:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:.//Libraries/FreeRTOS/Source/tasks.c **** 
4317:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:.//Libraries/FreeRTOS/Source/tasks.c **** 
4319:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4321:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4323:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4325:.//Libraries/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:.//Libraries/FreeRTOS/Source/tasks.c **** 
4327:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4329:.//Libraries/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4331:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4332:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4333:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4335:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4336:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 97


4337:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4338:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4340:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4341:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4342:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4343:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4345:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4346:.//Libraries/FreeRTOS/Source/tasks.c **** 
4347:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:.//Libraries/FreeRTOS/Source/tasks.c **** 
4350:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:.//Libraries/FreeRTOS/Source/tasks.c **** 
4352:.//Libraries/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4354:.//Libraries/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:.//Libraries/FreeRTOS/Source/tasks.c **** 
4356:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:.//Libraries/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:.//Libraries/FreeRTOS/Source/tasks.c **** 
4359:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:.//Libraries/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:.//Libraries/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4363:.//Libraries/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4365:.//Libraries/FreeRTOS/Source/tasks.c **** 
4366:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:.//Libraries/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:.//Libraries/FreeRTOS/Source/tasks.c **** 
4369:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:.//Libraries/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4372:.//Libraries/FreeRTOS/Source/tasks.c **** 
4373:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:.//Libraries/FreeRTOS/Source/tasks.c **** 
4376:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:.//Libraries/FreeRTOS/Source/tasks.c **** 
4378:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4380:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:.//Libraries/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:.//Libraries/FreeRTOS/Source/tasks.c **** 
4384:.//Libraries/FreeRTOS/Source/tasks.c **** 		/*
4385:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4387:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4391:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 98


4394:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4395:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4403:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:.//Libraries/FreeRTOS/Source/tasks.c **** 		 */
4407:.//Libraries/FreeRTOS/Source/tasks.c **** 
4408:.//Libraries/FreeRTOS/Source/tasks.c **** 
4409:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:.//Libraries/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:.//Libraries/FreeRTOS/Source/tasks.c **** 
4412:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:.//Libraries/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:.//Libraries/FreeRTOS/Source/tasks.c **** 
4416:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:.//Libraries/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:.//Libraries/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:.//Libraries/FreeRTOS/Source/tasks.c **** 
4421:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4423:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:.//Libraries/FreeRTOS/Source/tasks.c **** 
4426:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:.//Libraries/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4429:.//Libraries/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4431:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
4433:.//Libraries/FreeRTOS/Source/tasks.c **** 
4434:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
4436:.//Libraries/FreeRTOS/Source/tasks.c **** 
4437:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
4439:.//Libraries/FreeRTOS/Source/tasks.c **** 
4440:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
4442:.//Libraries/FreeRTOS/Source/tasks.c **** 
4443:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
4445:.//Libraries/FreeRTOS/Source/tasks.c **** 
4446:.//Libraries/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:.//Libraries/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:.//Libraries/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:.//Libraries/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:.//Libraries/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 99


4451:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4452:.//Libraries/FreeRTOS/Source/tasks.c **** 
4453:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:.//Libraries/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:.//Libraries/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:.//Libraries/FreeRTOS/Source/tasks.c **** 
4457:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:.//Libraries/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:.//Libraries/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4461:.//Libraries/FreeRTOS/Source/tasks.c **** 
4462:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:.//Libraries/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:.//Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4466:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4467:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4468:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4470:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4471:.//Libraries/FreeRTOS/Source/tasks.c **** 
4472:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:.//Libraries/FreeRTOS/Source/tasks.c **** 
4475:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:.//Libraries/FreeRTOS/Source/tasks.c **** 
4477:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4479:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:.//Libraries/FreeRTOS/Source/tasks.c **** 
4483:.//Libraries/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4485:.//Libraries/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4487:.//Libraries/FreeRTOS/Source/tasks.c **** 		#endif
4488:.//Libraries/FreeRTOS/Source/tasks.c **** 
4489:.//Libraries/FreeRTOS/Source/tasks.c **** 		/*
4490:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4492:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4496:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4501:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 100


4508:.//Libraries/FreeRTOS/Source/tasks.c **** 		 *
4509:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:.//Libraries/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:.//Libraries/FreeRTOS/Source/tasks.c **** 		 */
4513:.//Libraries/FreeRTOS/Source/tasks.c **** 
4514:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:.//Libraries/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:.//Libraries/FreeRTOS/Source/tasks.c **** 
4517:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:.//Libraries/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:.//Libraries/FreeRTOS/Source/tasks.c **** 
4521:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:.//Libraries/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:.//Libraries/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:.//Libraries/FreeRTOS/Source/tasks.c **** 
4526:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4528:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:.//Libraries/FreeRTOS/Source/tasks.c **** 
4531:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:.//Libraries/FreeRTOS/Source/tasks.c **** 
4534:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4537:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:.//Libraries/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4540:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:.//Libraries/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:.//Libraries/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:.//Libraries/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:.//Libraries/FreeRTOS/Source/tasks.c **** 
4545:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:.//Libraries/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:.//Libraries/FreeRTOS/Source/tasks.c **** 					easily. */
4548:.//Libraries/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:.//Libraries/FreeRTOS/Source/tasks.c **** 
4550:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4552:.//Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4554:.//Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4556:.//Libraries/FreeRTOS/Source/tasks.c **** 						#else
4557:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4558:.//Libraries/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:.//Libraries/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:.//Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4562:.//Libraries/FreeRTOS/Source/tasks.c **** 						#endif
4563:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4564:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 101


4565:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4566:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:.//Libraries/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:.//Libraries/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4570:.//Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4572:.//Libraries/FreeRTOS/Source/tasks.c **** 						#else
4573:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
4574:.//Libraries/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:.//Libraries/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:.//Libraries/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
4578:.//Libraries/FreeRTOS/Source/tasks.c **** 						#endif
4579:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4580:.//Libraries/FreeRTOS/Source/tasks.c **** 
4581:.//Libraries/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4583:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4584:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4585:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4586:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4588:.//Libraries/FreeRTOS/Source/tasks.c **** 
4589:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:.//Libraries/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:.//Libraries/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4593:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
4594:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4595:.//Libraries/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4597:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4598:.//Libraries/FreeRTOS/Source/tasks.c **** 
4599:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:.//Libraries/FreeRTOS/Source/tasks.c **** 
4602:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:.//Libraries/FreeRTOS/Source/tasks.c **** {
4604:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:.//Libraries/FreeRTOS/Source/tasks.c **** 
4606:.//Libraries/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:.//Libraries/FreeRTOS/Source/tasks.c **** 
4608:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:.//Libraries/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:.//Libraries/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:.//Libraries/FreeRTOS/Source/tasks.c **** 
4612:.//Libraries/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:.//Libraries/FreeRTOS/Source/tasks.c **** }
4614:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:.//Libraries/FreeRTOS/Source/tasks.c **** 
4616:.//Libraries/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:.//Libraries/FreeRTOS/Source/tasks.c **** 
4618:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4620:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:.//Libraries/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 102


4622:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4624:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4626:.//Libraries/FreeRTOS/Source/tasks.c **** 
4627:.//Libraries/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4629:.//Libraries/FreeRTOS/Source/tasks.c **** 
4630:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:.//Libraries/FreeRTOS/Source/tasks.c **** 
4633:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:.//Libraries/FreeRTOS/Source/tasks.c **** 
4635:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4637:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:.//Libraries/FreeRTOS/Source/tasks.c **** 
4639:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4641:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4644:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:.//Libraries/FreeRTOS/Source/tasks.c **** 
4647:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4649:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:.//Libraries/FreeRTOS/Source/tasks.c **** 
4652:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:.//Libraries/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:.//Libraries/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:.//Libraries/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:.//Libraries/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4658:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4660:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4662:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4663:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4664:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4665:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4667:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4668:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:.//Libraries/FreeRTOS/Source/tasks.c **** 
4670:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4672:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:.//Libraries/FreeRTOS/Source/tasks.c **** 
4675:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4677:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 103


4679:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4681:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4682:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4683:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4685:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4686:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4687:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4688:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4690:.//Libraries/FreeRTOS/Source/tasks.c **** 
4691:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4693:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:.//Libraries/FreeRTOS/Source/tasks.c **** 
4695:.//Libraries/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4697:.//Libraries/FreeRTOS/Source/tasks.c **** 
4698:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:.//Libraries/FreeRTOS/Source/tasks.c **** 
4701:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:.//Libraries/FreeRTOS/Source/tasks.c **** 
4703:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4705:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:.//Libraries/FreeRTOS/Source/tasks.c **** 
4707:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4709:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4712:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:.//Libraries/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:.//Libraries/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:.//Libraries/FreeRTOS/Source/tasks.c **** 
4717:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:.//Libraries/FreeRTOS/Source/tasks.c **** 
4720:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4722:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:.//Libraries/FreeRTOS/Source/tasks.c **** 
4725:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:.//Libraries/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:.//Libraries/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:.//Libraries/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:.//Libraries/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4731:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4732:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4733:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4735:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 104


4736:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4737:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4738:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4740:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4741:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:.//Libraries/FreeRTOS/Source/tasks.c **** 
4743:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4745:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:.//Libraries/FreeRTOS/Source/tasks.c **** 
4747:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4749:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:.//Libraries/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:.//Libraries/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4753:.//Libraries/FreeRTOS/Source/tasks.c **** 
4754:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:.//Libraries/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:.//Libraries/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:.//Libraries/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4760:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4763:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4764:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4765:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:.//Libraries/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4770:.//Libraries/FreeRTOS/Source/tasks.c **** 
4771:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4773:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:.//Libraries/FreeRTOS/Source/tasks.c **** 
4775:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4777:.//Libraries/FreeRTOS/Source/tasks.c **** 
4778:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:.//Libraries/FreeRTOS/Source/tasks.c **** 
4781:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:.//Libraries/FreeRTOS/Source/tasks.c **** 
4783:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4785:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:.//Libraries/FreeRTOS/Source/tasks.c **** 
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:.//Libraries/FreeRTOS/Source/tasks.c **** 
4792:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 105


4793:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4794:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4796:.//Libraries/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4798:.//Libraries/FreeRTOS/Source/tasks.c **** 
4799:.//Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:.//Libraries/FreeRTOS/Source/tasks.c **** 
4801:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:.//Libraries/FreeRTOS/Source/tasks.c **** 
4803:.//Libraries/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4805:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4808:.//Libraries/FreeRTOS/Source/tasks.c **** 
4809:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:.//Libraries/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4812:.//Libraries/FreeRTOS/Source/tasks.c **** 
4813:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4816:.//Libraries/FreeRTOS/Source/tasks.c **** 
4817:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4820:.//Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4822:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4823:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4824:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:.//Libraries/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4827:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4828:.//Libraries/FreeRTOS/Source/tasks.c **** 
4829:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:.//Libraries/FreeRTOS/Source/tasks.c **** 					updated. */
4832:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4833:.//Libraries/FreeRTOS/Source/tasks.c **** 
4834:.//Libraries/FreeRTOS/Source/tasks.c **** 				default:
4835:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:.//Libraries/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:.//Libraries/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:.//Libraries/FreeRTOS/Source/tasks.c **** 
4840:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4841:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4842:.//Libraries/FreeRTOS/Source/tasks.c **** 
4843:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:.//Libraries/FreeRTOS/Source/tasks.c **** 
4845:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:.//Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4849:.//Libraries/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 106


4850:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:.//Libraries/FreeRTOS/Source/tasks.c **** 
4852:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:.//Libraries/FreeRTOS/Source/tasks.c **** 
4855:.//Libraries/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4857:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:.//Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:.//Libraries/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:.//Libraries/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:.//Libraries/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:.//Libraries/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:.//Libraries/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:.//Libraries/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:.//Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:.//Libraries/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4869:.//Libraries/FreeRTOS/Source/tasks.c **** 				#endif
4870:.//Libraries/FreeRTOS/Source/tasks.c **** 
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4873:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:.//Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:.//Libraries/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4877:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4878:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4879:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4881:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4882:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
4883:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4884:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4886:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
4887:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:.//Libraries/FreeRTOS/Source/tasks.c **** 
4889:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
4891:.//Libraries/FreeRTOS/Source/tasks.c **** 
4892:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:.//Libraries/FreeRTOS/Source/tasks.c **** 
4895:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:.//Libraries/FreeRTOS/Source/tasks.c **** 
4897:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
4899:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:.//Libraries/FreeRTOS/Source/tasks.c **** 
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:.//Libraries/FreeRTOS/Source/tasks.c **** 
4906:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 107


4907:.//Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:.//Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:.//Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:.//Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:.//Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:.//Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:.//Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:.//Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:.//Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:.//Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:.//Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:.//Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:.//Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:.//Libraries/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:.//Libraries/FreeRTOS/Source/tasks.c **** 
4924:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:.//Libraries/FreeRTOS/Source/tasks.c **** 
4926:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
4928:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4930:.//Libraries/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4932:.//Libraries/FreeRTOS/Source/tasks.c **** 
4933:.//Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:.//Libraries/FreeRTOS/Source/tasks.c **** 
4936:.//Libraries/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4938:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4941:.//Libraries/FreeRTOS/Source/tasks.c **** 
4942:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:.//Libraries/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4945:.//Libraries/FreeRTOS/Source/tasks.c **** 
4946:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4949:.//Libraries/FreeRTOS/Source/tasks.c **** 
4950:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4953:.//Libraries/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4955:.//Libraries/FreeRTOS/Source/tasks.c **** 					else
4956:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
4957:.//Libraries/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:.//Libraries/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
4960:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4961:.//Libraries/FreeRTOS/Source/tasks.c **** 
4962:.//Libraries/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 108


4964:.//Libraries/FreeRTOS/Source/tasks.c **** 					updated. */
4965:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4966:.//Libraries/FreeRTOS/Source/tasks.c **** 
4967:.//Libraries/FreeRTOS/Source/tasks.c **** 				default:
4968:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:.//Libraries/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:.//Libraries/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
4973:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
4974:.//Libraries/FreeRTOS/Source/tasks.c **** 
4975:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:.//Libraries/FreeRTOS/Source/tasks.c **** 
4977:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:.//Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
4981:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:.//Libraries/FreeRTOS/Source/tasks.c **** 
4984:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4986:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4989:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
4990:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4991:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:.//Libraries/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:.//Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
4995:.//Libraries/FreeRTOS/Source/tasks.c **** 
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
4998:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:.//Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
5002:.//Libraries/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
5004:.//Libraries/FreeRTOS/Source/tasks.c **** 
5005:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:.//Libraries/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:.//Libraries/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:.//Libraries/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5010:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
5011:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5012:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5014:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5015:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5016:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:.//Libraries/FreeRTOS/Source/tasks.c **** 
5018:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5020:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 109


5021:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:.//Libraries/FreeRTOS/Source/tasks.c **** 
5024:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:.//Libraries/FreeRTOS/Source/tasks.c **** 
5026:.//Libraries/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5028:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:.//Libraries/FreeRTOS/Source/tasks.c **** 
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:.//Libraries/FreeRTOS/Source/tasks.c **** 
5034:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:.//Libraries/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:.//Libraries/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:.//Libraries/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:.//Libraries/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:.//Libraries/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:.//Libraries/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:.//Libraries/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:.//Libraries/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:.//Libraries/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:.//Libraries/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:.//Libraries/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:.//Libraries/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:.//Libraries/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:.//Libraries/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:.//Libraries/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:.//Libraries/FreeRTOS/Source/tasks.c **** 
5052:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:.//Libraries/FreeRTOS/Source/tasks.c **** 
5054:.//Libraries/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5056:.//Libraries/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:.//Libraries/FreeRTOS/Source/tasks.c **** 
5059:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:.//Libraries/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:.//Libraries/FreeRTOS/Source/tasks.c **** 
5063:.//Libraries/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:.//Libraries/FreeRTOS/Source/tasks.c **** 
5065:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:.//Libraries/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5069:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:.//Libraries/FreeRTOS/Source/tasks.c **** 
5072:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5074:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5077:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 110


5078:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5079:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:.//Libraries/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:.//Libraries/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5083:.//Libraries/FreeRTOS/Source/tasks.c **** 
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5086:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:.//Libraries/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:.//Libraries/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
5090:.//Libraries/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
5092:.//Libraries/FreeRTOS/Source/tasks.c **** 
5093:.//Libraries/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:.//Libraries/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:.//Libraries/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:.//Libraries/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5098:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
5099:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5100:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5102:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5103:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5104:.//Libraries/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5106:.//Libraries/FreeRTOS/Source/tasks.c **** 
5107:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:.//Libraries/FreeRTOS/Source/tasks.c **** 
5110:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:.//Libraries/FreeRTOS/Source/tasks.c **** 
5112:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5114:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:.//Libraries/FreeRTOS/Source/tasks.c **** 
5117:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:.//Libraries/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:.//Libraries/FreeRTOS/Source/tasks.c **** 
5121:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5123:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5125:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5128:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
5129:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5130:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5132:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5133:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 111


5135:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5137:.//Libraries/FreeRTOS/Source/tasks.c **** 
5138:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:.//Libraries/FreeRTOS/Source/tasks.c **** 
5141:.//Libraries/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:.//Libraries/FreeRTOS/Source/tasks.c **** 
5143:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5145:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:.//Libraries/FreeRTOS/Source/tasks.c **** 
5148:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:.//Libraries/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:.//Libraries/FreeRTOS/Source/tasks.c **** 
5152:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5154:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:.//Libraries/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5159:.//Libraries/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:.//Libraries/FreeRTOS/Source/tasks.c **** 
5161:.//Libraries/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5163:.//Libraries/FreeRTOS/Source/tasks.c **** 
5164:.//Libraries/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:.//Libraries/FreeRTOS/Source/tasks.c **** 
5167:.//Libraries/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:.//Libraries/FreeRTOS/Source/tasks.c **** 
5169:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5171:.//Libraries/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5173:.//Libraries/FreeRTOS/Source/tasks.c **** 
5174:.//Libraries/FreeRTOS/Source/tasks.c **** #endif
5175:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:.//Libraries/FreeRTOS/Source/tasks.c **** 
5177:.//Libraries/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:.//Libraries/FreeRTOS/Source/tasks.c **** {
 785              		.loc 1 5178 1 view -0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		.loc 1 5178 1 is_stmt 0 view .LVU237
 790 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 791              	.LCFI5:
 792              		.cfi_def_cfa_offset 24
 793              		.cfi_offset 3, -24
 794              		.cfi_offset 4, -20
 795              		.cfi_offset 5, -16
 796              		.cfi_offset 6, -12
 797              		.cfi_offset 7, -8
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 112


 798              		.cfi_offset 14, -4
5179:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:.//Libraries/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 799              		.loc 1 5180 18 view .LVU238
 800 0002 154B     		ldr	r3, .L84
5178:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 801              		.loc 1 5178 1 view .LVU239
 802 0004 0446     		mov	r4, r0
5181:.//Libraries/FreeRTOS/Source/tasks.c **** 
5182:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5184:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:.//Libraries/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:.//Libraries/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5189:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif
5190:.//Libraries/FreeRTOS/Source/tasks.c **** 
5191:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:.//Libraries/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 803              		.loc 1 5193 35 view .LVU240
 804 0006 154E     		ldr	r6, .L84+4
5179:.//Libraries/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 805              		.loc 1 5179 1 is_stmt 1 view .LVU241
5180:.//Libraries/FreeRTOS/Source/tasks.c **** 
 806              		.loc 1 5180 1 view .LVU242
5178:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 807              		.loc 1 5178 1 is_stmt 0 view .LVU243
 808 0008 0F46     		mov	r7, r1
5180:.//Libraries/FreeRTOS/Source/tasks.c **** 
 809              		.loc 1 5180 18 view .LVU244
 810 000a 1D68     		ldr	r5, [r3]
 811              	.LVL51:
 812              		.loc 1 5193 2 is_stmt 1 view .LVU245
 813              		.loc 1 5193 35 is_stmt 0 view .LVU246
 814 000c 3068     		ldr	r0, [r6]
 815              	.LVL52:
 816              		.loc 1 5193 6 view .LVU247
 817 000e 0430     		adds	r0, r0, #4
 818 0010 FFF7FEFF 		bl	uxListRemove
 819              	.LVL53:
5194:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5195:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:.//Libraries/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:.//Libraries/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5199:.//Libraries/FreeRTOS/Source/tasks.c **** 	else
5200:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5201:.//Libraries/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 820              		.loc 1 5201 27 is_stmt 1 view .LVU248
5202:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5203:.//Libraries/FreeRTOS/Source/tasks.c **** 
5204:.//Libraries/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5206:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 821              		.loc 1 5206 3 view .LVU249
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 113


 822              		.loc 1 5206 5 is_stmt 0 view .LVU250
 823 0014 631C     		adds	r3, r4, #1
 824 0016 00D1     		bne	.L71
 825 0018 BFB9     		cbnz	r7, .L83
 826              	.L71:
5207:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5208:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:.//Libraries/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:.//Libraries/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:.//Libraries/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5213:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
5214:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5215:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:.//Libraries/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:.//Libraries/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:.//Libraries/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 827              		.loc 1 5218 4 is_stmt 1 view .LVU251
 828 001a 2C19     		adds	r4, r5, r4
 829              	.LVL54:
5219:.//Libraries/FreeRTOS/Source/tasks.c **** 
5220:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:.//Libraries/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 830              		.loc 1 5221 4 view .LVU252
 831 001c 3368     		ldr	r3, [r6]
 832              	.LVL55:
 833              		.loc 1 5221 4 is_stmt 0 view .LVU253
 834 001e 5C60     		str	r4, [r3, #4]
5222:.//Libraries/FreeRTOS/Source/tasks.c **** 
5223:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 835              		.loc 1 5223 4 is_stmt 1 view .LVU254
 836              		.loc 1 5223 6 is_stmt 0 view .LVU255
 837 0020 07D3     		bcc	.L74
5224:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5225:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:.//Libraries/FreeRTOS/Source/tasks.c **** 				list. */
5227:.//Libraries/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 838              		.loc 1 5227 5 is_stmt 1 view .LVU256
 839 0022 0F4B     		ldr	r3, .L84+8
 840 0024 1868     		ldr	r0, [r3]
 841              		.loc 1 5227 60 is_stmt 0 view .LVU257
 842 0026 3168     		ldr	r1, [r6]
5228:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5229:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
5230:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5231:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:.//Libraries/FreeRTOS/Source/tasks.c **** 				is used. */
5233:.//Libraries/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:.//Libraries/FreeRTOS/Source/tasks.c **** 
5235:.//Libraries/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:.//Libraries/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:.//Libraries/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:.//Libraries/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5240:.//Libraries/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5242:.//Libraries/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 114


5243:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
5244:.//Libraries/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
5246:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5247:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5248:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5249:.//Libraries/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
5251:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:.//Libraries/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:.//Libraries/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:.//Libraries/FreeRTOS/Source/tasks.c **** 
5256:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:.//Libraries/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:.//Libraries/FreeRTOS/Source/tasks.c **** 
5259:.//Libraries/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5261:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:.//Libraries/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5264:.//Libraries/FreeRTOS/Source/tasks.c **** 		else
5265:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
5266:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:.//Libraries/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:.//Libraries/FreeRTOS/Source/tasks.c **** 
5269:.//Libraries/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:.//Libraries/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:.//Libraries/FreeRTOS/Source/tasks.c **** 			too. */
5272:.//Libraries/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5274:.//Libraries/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5276:.//Libraries/FreeRTOS/Source/tasks.c **** 			else
5277:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
5278:.//Libraries/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
5280:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
5281:.//Libraries/FreeRTOS/Source/tasks.c **** 
5282:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:.//Libraries/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
5285:.//Libraries/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:.//Libraries/FreeRTOS/Source/tasks.c **** }
 843              		.loc 1 5286 1 view .LVU258
 844 0028 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 845              	.LCFI6:
 846              		.cfi_remember_state
 847              		.cfi_restore 14
 848              		.cfi_restore 7
 849              		.cfi_restore 6
 850              		.cfi_restore 5
 851              		.cfi_restore 4
 852              		.cfi_restore 3
 853              		.cfi_def_cfa_offset 0
 854              	.LVL56:
5227:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 115


 855              		.loc 1 5227 5 view .LVU259
 856 002c 0431     		adds	r1, r1, #4
 857 002e FFF7FEBF 		b	vListInsert
 858              	.LVL57:
 859              	.L74:
 860              	.LCFI7:
 861              		.cfi_restore_state
5233:.//Libraries/FreeRTOS/Source/tasks.c **** 
 862              		.loc 1 5233 5 is_stmt 1 view .LVU260
 863 0032 0C4B     		ldr	r3, .L84+12
 864 0034 1868     		ldr	r0, [r3]
5233:.//Libraries/FreeRTOS/Source/tasks.c **** 
 865              		.loc 1 5233 52 is_stmt 0 view .LVU261
 866 0036 3168     		ldr	r1, [r6]
5233:.//Libraries/FreeRTOS/Source/tasks.c **** 
 867              		.loc 1 5233 5 view .LVU262
 868 0038 0431     		adds	r1, r1, #4
 869 003a FFF7FEFF 		bl	vListInsert
 870              	.LVL58:
5238:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 871              		.loc 1 5238 5 is_stmt 1 view .LVU263
5238:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 872              		.loc 1 5238 21 is_stmt 0 view .LVU264
 873 003e 0A4B     		ldr	r3, .L84+16
 874 0040 1A68     		ldr	r2, [r3]
5238:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 875              		.loc 1 5238 7 view .LVU265
 876 0042 A242     		cmp	r2, r4
 877 0044 00D9     		bls	.L70
5240:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 878              		.loc 1 5240 6 is_stmt 1 view .LVU266
5240:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 879              		.loc 1 5240 27 is_stmt 0 view .LVU267
 880 0046 1C60     		str	r4, [r3]
5244:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 881              		.loc 1 5244 30 is_stmt 1 view .LVU268
 882              	.L70:
 883              		.loc 1 5286 1 is_stmt 0 view .LVU269
 884 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 885              	.LVL59:
 886              	.L83:
 887              	.LBB253:
 888              	.LBI253:
5177:.//Libraries/FreeRTOS/Source/tasks.c **** {
 889              		.loc 1 5177 13 is_stmt 1 view .LVU270
 890              	.LBB254:
5211:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 891              		.loc 1 5211 4 view .LVU271
5211:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 892              		.loc 1 5211 56 is_stmt 0 view .LVU272
 893 004a 3168     		ldr	r1, [r6]
5211:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 894              		.loc 1 5211 4 view .LVU273
 895 004c 0748     		ldr	r0, .L84+20
 896 004e 0431     		adds	r1, r1, #4
 897              	.LBE254:
 898              	.LBE253:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 116


 899              		.loc 1 5286 1 view .LVU274
 900 0050 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 901              	.LCFI8:
 902              		.cfi_restore 14
 903              		.cfi_restore 7
 904              		.cfi_restore 6
 905              		.cfi_restore 5
 906              		.cfi_restore 4
 907              		.cfi_restore 3
 908              		.cfi_def_cfa_offset 0
 909              	.LVL60:
 910              	.LBB256:
 911              	.LBB255:
5211:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 912              		.loc 1 5211 4 view .LVU275
 913 0054 FFF7FEBF 		b	vListInsertEnd
 914              	.LVL61:
 915              	.L85:
 916              		.align	2
 917              	.L84:
 918 0058 00000000 		.word	.LANCHOR15
 919 005c 00000000 		.word	.LANCHOR1
 920 0060 00000000 		.word	.LANCHOR9
 921 0064 00000000 		.word	.LANCHOR8
 922 0068 00000000 		.word	.LANCHOR13
 923 006c 00000000 		.word	.LANCHOR7
 924              	.LBE255:
 925              	.LBE256:
 926              		.cfi_endproc
 927              	.LFE65:
 929              		.section	.text.xTaskIncrementTick.part.0,"ax",%progbits
 930              		.align	1
 931              		.p2align 2,,3
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu fpv5-d16
 937              	xTaskIncrementTick.part.0:
 938              	.LFB73:
2707:.//Libraries/FreeRTOS/Source/tasks.c **** {
 939              		.loc 1 2707 12 is_stmt 1 view -0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 8
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              	.LBB257:
2721:.//Libraries/FreeRTOS/Source/tasks.c **** 
 944              		.loc 1 2721 3 view .LVU277
2721:.//Libraries/FreeRTOS/Source/tasks.c **** 
 945              		.loc 1 2721 49 is_stmt 0 view .LVU278
 946 0000 464B     		ldr	r3, .L111
 947              	.LBE257:
2707:.//Libraries/FreeRTOS/Source/tasks.c **** {
 948              		.loc 1 2707 12 view .LVU279
 949 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 950              	.LCFI9:
 951              		.cfi_def_cfa_offset 36
 952              		.cfi_offset 4, -36
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 117


 953              		.cfi_offset 5, -32
 954              		.cfi_offset 6, -28
 955              		.cfi_offset 7, -24
 956              		.cfi_offset 8, -20
 957              		.cfi_offset 9, -16
 958              		.cfi_offset 10, -12
 959              		.cfi_offset 11, -8
 960              		.cfi_offset 14, -4
 961              	.LBB266:
2721:.//Libraries/FreeRTOS/Source/tasks.c **** 
 962              		.loc 1 2721 49 view .LVU280
 963 0006 1E68     		ldr	r6, [r3]
 964              	.LBE266:
2707:.//Libraries/FreeRTOS/Source/tasks.c **** {
 965              		.loc 1 2707 12 view .LVU281
 966 0008 83B0     		sub	sp, sp, #12
 967              	.LCFI10:
 968              		.cfi_def_cfa_offset 48
 969              	.LBB267:
2721:.//Libraries/FreeRTOS/Source/tasks.c **** 
 970              		.loc 1 2721 20 view .LVU282
 971 000a 0136     		adds	r6, r6, #1
 972              	.LVL62:
2725:.//Libraries/FreeRTOS/Source/tasks.c **** 
 973              		.loc 1 2725 3 is_stmt 1 view .LVU283
2725:.//Libraries/FreeRTOS/Source/tasks.c **** 
 974              		.loc 1 2725 14 is_stmt 0 view .LVU284
 975 000c 1E60     		str	r6, [r3]
2727:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 976              		.loc 1 2727 3 is_stmt 1 view .LVU285
2727:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 977              		.loc 1 2727 5 is_stmt 0 view .LVU286
 978 000e 002E     		cmp	r6, #0
 979 0010 41D0     		beq	.L109
 980 0012 434D     		ldr	r5, .L111+4
 981              	.L87:
2733:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 982              		.loc 1 2733 28 is_stmt 1 view .LVU287
2740:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 983              		.loc 1 2740 3 view .LVU288
2740:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 984              		.loc 1 2740 23 is_stmt 0 view .LVU289
 985 0014 2B68     		ldr	r3, [r5]
2740:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 986              		.loc 1 2740 5 view .LVU290
 987 0016 9E42     		cmp	r6, r3
 988 0018 4AD3     		bcc	.L100
 989              	.LVL63:
2742:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 990              		.loc 1 2742 4 is_stmt 1 view .LVU291
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 991              		.loc 1 2744 5 view .LVU292
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 992              		.loc 1 2744 9 is_stmt 0 view .LVU293
 993 001a DFF808A1 		ldr	r10, .L111+8
 994 001e DAF80030 		ldr	r3, [r10]
 995 0022 1C68     		ldr	r4, [r3]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 118


2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 996              		.loc 1 2744 7 view .LVU294
 997 0024 002C     		cmp	r4, #0
 998 0026 70D0     		beq	.L101
 999              	.LBE267:
2711:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1000              		.loc 1 2711 12 view .LVU295
 1001 0028 0024     		movs	r4, #0
 1002 002a DFF80881 		ldr	r8, .L111+24
 1003 002e DFF80891 		ldr	r9, .L111+28
 1004              	.LBB268:
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1005              		.loc 1 2794 6 view .LVU296
 1006 0032 DFF808B1 		ldr	fp, .L111+32
 1007 0036 23E0     		b	.L93
 1008              	.LVL64:
 1009              	.L94:
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1010              		.loc 1 2794 6 view .LVU297
 1011 0038 0191     		str	r1, [sp, #4]
2779:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1012              		.loc 1 2779 15 view .LVU298
 1013 003a FFF7FEFF 		bl	uxListRemove
 1014              	.LVL65:
2783:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1015              		.loc 1 2783 6 is_stmt 1 view .LVU299
2785:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1016              		.loc 1 2785 7 view .LVU300
2783:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1017              		.loc 1 2783 8 is_stmt 0 view .LVU301
 1018 003e BB6A     		ldr	r3, [r7, #40]
2785:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1019              		.loc 1 2785 16 view .LVU302
 1020 0040 07F11800 		add	r0, r7, #24
2783:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1021              		.loc 1 2783 8 view .LVU303
 1022 0044 0199     		ldr	r1, [sp, #4]
 1023 0046 13B1     		cbz	r3, .L95
2785:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1024              		.loc 1 2785 16 view .LVU304
 1025 0048 FFF7FEFF 		bl	uxListRemove
 1026              	.LVL66:
 1027 004c 0199     		ldr	r1, [sp, #4]
 1028              	.L95:
2789:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1029              		.loc 1 2789 31 is_stmt 1 view .LVU305
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1030              		.loc 1 2794 6 view .LVU306
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1031              		.loc 1 2794 6 view .LVU307
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1032              		.loc 1 2794 6 view .LVU308
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1033              		.loc 1 2794 6 view .LVU309
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1034              		.loc 1 2794 6 view .LVU310
 1035 004e FB6A     		ldr	r3, [r7, #44]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 119


 1036 0050 DBF80020 		ldr	r2, [fp]
 1037 0054 03EB8300 		add	r0, r3, r3, lsl #2
 1038 0058 9342     		cmp	r3, r2
 1039 005a 08EB8000 		add	r0, r8, r0, lsl #2
 1040 005e 01D9     		bls	.L96
 1041 0060 CBF80030 		str	r3, [fp]
 1042              	.L96:
 1043 0064 FFF7FEFF 		bl	vListInsertEnd
 1044              	.LVL67:
2794:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1045              		.loc 1 2794 36 view .LVU311
2804:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 1046              		.loc 1 2804 7 view .LVU312
2804:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 1047              		.loc 1 2804 44 is_stmt 0 view .LVU313
 1048 0068 D9F80020 		ldr	r2, [r9]
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1049              		.loc 1 2744 9 view .LVU314
 1050 006c DAF80030 		ldr	r3, [r10]
2804:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 1051              		.loc 1 2804 9 view .LVU315
 1052 0070 F96A     		ldr	r1, [r7, #44]
 1053 0072 D26A     		ldr	r2, [r2, #44]
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1054              		.loc 1 2744 9 view .LVU316
 1055 0074 1B68     		ldr	r3, [r3]
2806:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
 1056              		.loc 1 2806 24 view .LVU317
 1057 0076 9142     		cmp	r1, r2
 1058 0078 28BF     		it	cs
 1059 007a 0124     		movcs	r4, #1
 1060              	.LVL68:
2742:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1061              		.loc 1 2742 4 is_stmt 1 view .LVU318
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1062              		.loc 1 2744 5 view .LVU319
2744:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1063              		.loc 1 2744 7 is_stmt 0 view .LVU320
 1064 007c 002B     		cmp	r3, #0
 1065 007e 48D0     		beq	.L92
 1066              	.LVL69:
 1067              	.L93:
2760:.//Libraries/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1068              		.loc 1 2760 6 is_stmt 1 view .LVU321
2775:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1069              		.loc 1 2775 31 view .LVU322
2779:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1070              		.loc 1 2779 6 view .LVU323
2760:.//Libraries/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1071              		.loc 1 2760 14 is_stmt 0 view .LVU324
 1072 0080 DAF80030 		ldr	r3, [r10]
2760:.//Libraries/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1073              		.loc 1 2760 12 view .LVU325
 1074 0084 DB68     		ldr	r3, [r3, #12]
 1075 0086 DF68     		ldr	r7, [r3, #12]
 1076              	.LVL70:
2761:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 120


 1077              		.loc 1 2761 6 is_stmt 1 view .LVU326
2761:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1078              		.loc 1 2761 17 is_stmt 0 view .LVU327
 1079 0088 7B68     		ldr	r3, [r7, #4]
 1080              	.LVL71:
2763:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1081              		.loc 1 2763 6 is_stmt 1 view .LVU328
2779:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 2779 15 is_stmt 0 view .LVU329
 1083 008a 391D     		adds	r1, r7, #4
2763:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1084              		.loc 1 2763 8 view .LVU330
 1085 008c 9E42     		cmp	r6, r3
2779:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1086              		.loc 1 2779 15 view .LVU331
 1087 008e 0846     		mov	r0, r1
2763:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1088              		.loc 1 2763 8 view .LVU332
 1089 0090 D2D2     		bcs	.L94
2770:.//Libraries/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1090              		.loc 1 2770 7 is_stmt 1 view .LVU333
2770:.//Libraries/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1091              		.loc 1 2770 28 is_stmt 0 view .LVU334
 1092 0092 2B60     		str	r3, [r5]
2771:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 1093              		.loc 1 2771 7 is_stmt 1 view .LVU335
 1094 0094 11E0     		b	.L91
 1095              	.LVL72:
 1096              	.L109:
 1097              	.LBB258:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1098              		.loc 1 2729 4 view .LVU336
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1099              		.loc 1 2729 4 view .LVU337
 1100 0096 234B     		ldr	r3, .L111+8
 1101 0098 1A68     		ldr	r2, [r3]
 1102 009a 1268     		ldr	r2, [r2]
 1103 009c 0AB3     		cbz	r2, .L88
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1104              		.loc 1 2729 4 view .LVU338
 1105              	.LBB259:
 1106              	.LBI259:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1107              		.loc 2 191 30 view .LVU339
 1108              	.LBB260:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1109              		.loc 2 193 1 view .LVU340
 1110              		.loc 2 195 2 view .LVU341
 1111              		.syntax unified
 1112              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1113 009e 4FF05003 			mov r3, #80												
 1114 00a2 83F31188 		msr basepri, r3											
 1115 00a6 BFF36F8F 		isb														
 1116 00aa BFF34F8F 		dsb														
 1117              	
 1118              	@ 0 "" 2
 1119              	.LVL73:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 121


 1120              		.thumb
 1121              		.syntax unified
 1122              	.L89:
 1123              		.loc 2 195 2 is_stmt 0 view .LVU342
 1124              	.LBE260:
 1125              	.LBE259:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1126              		.loc 1 2729 4 is_stmt 1 view .LVU343
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1127              		.loc 1 2729 4 view .LVU344
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1128              		.loc 1 2729 4 view .LVU345
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1129              		.loc 1 2729 4 view .LVU346
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1130              		.loc 1 2729 4 view .LVU347
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1131              		.loc 1 2729 4 view .LVU348
 1132 00ae FEE7     		b	.L89
 1133              	.L100:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1134              		.loc 1 2729 4 is_stmt 0 view .LVU349
 1135              	.LBE258:
 1136              	.LBE268:
2711:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1137              		.loc 1 2711 12 view .LVU350
 1138 00b0 0024     		movs	r4, #0
 1139 00b2 DFF88080 		ldr	r8, .L111+24
 1140 00b6 DFF88090 		ldr	r9, .L111+28
 1141              	.L91:
 1142              	.LVL74:
 1143              	.LBB269:
2823:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1144              		.loc 1 2823 4 is_stmt 1 view .LVU351
2823:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1145              		.loc 1 2823 8 is_stmt 0 view .LVU352
 1146 00ba D9F80030 		ldr	r3, [r9]
2851:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1147              		.loc 1 2851 22 view .LVU353
 1148 00be 1A49     		ldr	r1, .L111+12
2823:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1149              		.loc 1 2823 8 view .LVU354
 1150 00c0 DB6A     		ldr	r3, [r3, #44]
 1151 00c2 03EB8303 		add	r3, r3, r3, lsl #2
 1152 00c6 9B00     		lsls	r3, r3, #2
 1153 00c8 58F80320 		ldr	r2, [r8, r3]
2851:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1154              		.loc 1 2851 22 view .LVU355
 1155 00cc 0B68     		ldr	r3, [r1]
2825:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1156              		.loc 1 2825 21 view .LVU356
 1157 00ce 022A     		cmp	r2, #2
 1158 00d0 28BF     		it	cs
 1159 00d2 0124     		movcs	r4, #1
 1160              	.LVL75:
2829:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1161              		.loc 1 2829 29 is_stmt 1 view .LVU357
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 122


2851:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1162              		.loc 1 2851 4 view .LVU358
2853:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1163              		.loc 1 2853 21 is_stmt 0 view .LVU359
 1164 00d4 002B     		cmp	r3, #0
 1165              	.LBE269:
2876:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1166              		.loc 1 2876 1 view .LVU360
 1167 00d6 0CBF     		ite	eq
 1168 00d8 2046     		moveq	r0, r4
 1169 00da 0120     		movne	r0, #1
 1170 00dc 03B0     		add	sp, sp, #12
 1171              	.LCFI11:
 1172              		.cfi_remember_state
 1173              		.cfi_def_cfa_offset 36
 1174              		@ sp needed
 1175 00de BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1176              	.LVL76:
 1177              	.L88:
 1178              	.LCFI12:
 1179              		.cfi_restore_state
 1180              	.LBB270:
 1181              	.LBB265:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1182              		.loc 1 2729 4 is_stmt 1 view .LVU361
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1183              		.loc 1 2729 4 view .LVU362
 1184 00e2 124A     		ldr	r2, .L111+16
 1185 00e4 1868     		ldr	r0, [r3]
 1186              	.LVL77:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1187              		.loc 1 2729 4 view .LVU363
 1188 00e6 1249     		ldr	r1, .L111+20
 1189 00e8 1468     		ldr	r4, [r2]
 1190              	.LBB261:
 1191              	.LBB262:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1192              		.loc 1 3953 24 is_stmt 0 view .LVU364
 1193 00ea 0D4D     		ldr	r5, .L111+4
 1194              	.LBE262:
 1195              	.LBE261:
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1196              		.loc 1 2729 4 view .LVU365
 1197 00ec 1C60     		str	r4, [r3]
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1198              		.loc 1 2729 4 is_stmt 1 view .LVU366
 1199 00ee 1060     		str	r0, [r2]
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1200              		.loc 1 2729 4 view .LVU367
 1201 00f0 0A68     		ldr	r2, [r1]
 1202 00f2 0132     		adds	r2, r2, #1
 1203 00f4 0A60     		str	r2, [r1]
2729:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1204              		.loc 1 2729 4 view .LVU368
 1205              	.LBB264:
 1206              	.LBI261:
3943:.//Libraries/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 123


 1207              		.loc 1 3943 13 view .LVU369
 1208              	.LBB263:
3945:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1209              		.loc 1 3945 1 view .LVU370
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1210              		.loc 1 3947 2 view .LVU371
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1211              		.loc 1 3947 6 is_stmt 0 view .LVU372
 1212 00f6 1B68     		ldr	r3, [r3]
 1213 00f8 1B68     		ldr	r3, [r3]
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1214              		.loc 1 3947 4 view .LVU373
 1215 00fa 1BB9     		cbnz	r3, .L90
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1216              		.loc 1 3953 3 is_stmt 1 view .LVU374
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1217              		.loc 1 3953 24 is_stmt 0 view .LVU375
 1218 00fc 4FF0FF33 		mov	r3, #-1
 1219 0100 2B60     		str	r3, [r5]
 1220 0102 87E7     		b	.L87
 1221              	.L90:
 1222 0104 FFF7FEFF 		bl	prvResetNextTaskUnblockTime.part.0
 1223              	.LVL78:
 1224 0108 84E7     		b	.L87
 1225              	.LVL79:
 1226              	.L101:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1227              		.loc 1 3953 24 view .LVU376
 1228 010a DFF82880 		ldr	r8, .L111+24
 1229 010e DFF82890 		ldr	r9, .L111+28
 1230              	.LVL80:
 1231              	.L92:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1232              		.loc 1 3953 24 view .LVU377
 1233              	.LBE263:
 1234              	.LBE264:
 1235              	.LBE265:
2751:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 1236              		.loc 1 2751 6 is_stmt 1 view .LVU378
2751:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 1237              		.loc 1 2751 27 is_stmt 0 view .LVU379
 1238 0112 4FF0FF33 		mov	r3, #-1
 1239 0116 2B60     		str	r3, [r5]
2752:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1240              		.loc 1 2752 6 is_stmt 1 view .LVU380
 1241 0118 CFE7     		b	.L91
 1242              	.L112:
 1243 011a 00BF     		.align	2
 1244              	.L111:
 1245 011c 00000000 		.word	.LANCHOR15
 1246 0120 00000000 		.word	.LANCHOR13
 1247 0124 00000000 		.word	.LANCHOR8
 1248 0128 00000000 		.word	.LANCHOR17
 1249 012c 00000000 		.word	.LANCHOR9
 1250 0130 00000000 		.word	.LANCHOR16
 1251 0134 00000000 		.word	.LANCHOR2
 1252 0138 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 124


 1253 013c 00000000 		.word	.LANCHOR12
 1254              	.LBE270:
 1255              		.cfi_endproc
 1256              	.LFE73:
 1258              		.section	.text.xTaskCreateStatic,"ax",%progbits
 1259              		.align	1
 1260              		.p2align 2,,3
 1261              		.global	xTaskCreateStatic
 1262              		.syntax unified
 1263              		.thumb
 1264              		.thumb_func
 1265              		.fpu fpv5-d16
 1267              	xTaskCreateStatic:
 1268              	.LVL81:
 1269              	.LFB4:
 588:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1270              		.loc 1 588 2 view -0
 1271              		.cfi_startproc
 1272              		@ args = 12, pretend = 0, frame = 8
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 588:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1274              		.loc 1 588 2 is_stmt 0 view .LVU382
 1275 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1276              	.LCFI13:
 1277              		.cfi_def_cfa_offset 20
 1278              		.cfi_offset 4, -20
 1279              		.cfi_offset 5, -16
 1280              		.cfi_offset 6, -12
 1281              		.cfi_offset 7, -8
 1282              		.cfi_offset 14, -4
 1283 0002 87B0     		sub	sp, sp, #28
 1284              	.LCFI14:
 1285              		.cfi_def_cfa_offset 48
 588:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1286              		.loc 1 588 2 view .LVU383
 1287 0004 DDE90C65 		ldrd	r6, r5, [sp, #48]
 589:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 1288              		.loc 1 589 2 is_stmt 1 view .LVU384
 590:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1289              		.loc 1 590 2 view .LVU385
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1290              		.loc 1 592 3 view .LVU386
 588:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1291              		.loc 1 588 2 is_stmt 0 view .LVU387
 1292 0008 0E9C     		ldr	r4, [sp, #56]
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1293              		.loc 1 592 3 view .LVU388
 1294 000a BDB1     		cbz	r5, .L121
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1295              		.loc 1 592 41 is_stmt 1 discriminator 2 view .LVU389
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1296              		.loc 1 593 3 discriminator 2 view .LVU390
 1297 000c 6CB1     		cbz	r4, .L122
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1298              		.loc 1 593 39 discriminator 2 view .LVU391
 1299              	.LBB285:
 600:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 125


 1300              		.loc 1 600 4 discriminator 2 view .LVU392
 600:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 1301              		.loc 1 600 20 is_stmt 0 discriminator 2 view .LVU393
 1302 000e 5C27     		movs	r7, #92
 1303 0010 0597     		str	r7, [sp, #20]
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1304              		.loc 1 601 4 is_stmt 1 discriminator 2 view .LVU394
 1305 0012 059F     		ldr	r7, [sp, #20]
 1306 0014 5C2F     		cmp	r7, #92
 1307 0016 1AD0     		beq	.L118
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1308              		.loc 1 601 4 view .LVU395
 1309              	.LBB286:
 1310              	.LBI286:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1311              		.loc 2 191 30 view .LVU396
 1312              	.LBB287:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1313              		.loc 2 193 1 view .LVU397
 1314              		.loc 2 195 2 view .LVU398
 1315              		.syntax unified
 1316              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1317 0018 4FF05003 			mov r3, #80												
 1318 001c 83F31188 		msr basepri, r3											
 1319 0020 BFF36F8F 		isb														
 1320 0024 BFF34F8F 		dsb														
 1321              	
 1322              	@ 0 "" 2
 1323              	.LVL82:
 1324              		.thumb
 1325              		.syntax unified
 1326              	.L119:
 1327              		.loc 2 195 2 is_stmt 0 view .LVU399
 1328              	.LBE287:
 1329              	.LBE286:
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1330              		.loc 1 601 4 is_stmt 1 discriminator 3 view .LVU400
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1331              		.loc 1 601 4 discriminator 3 view .LVU401
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1332              		.loc 1 601 4 discriminator 3 view .LVU402
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1333              		.loc 1 601 4 discriminator 3 view .LVU403
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1334              		.loc 1 601 4 discriminator 3 view .LVU404
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1335              		.loc 1 601 4 discriminator 3 view .LVU405
 1336 0028 FEE7     		b	.L119
 1337              	.LVL83:
 1338              	.L122:
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1339              		.loc 1 601 4 is_stmt 0 discriminator 3 view .LVU406
 1340              	.LBE285:
 1341              	.LBB288:
 1342              	.LBI288:
 581:.//Libraries/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 1343              		.loc 1 581 15 is_stmt 1 view .LVU407
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 126


 1344              	.LBB289:
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1345              		.loc 1 593 3 view .LVU408
 1346              	.LBB290:
 1347              	.LBI290:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1348              		.loc 2 191 30 view .LVU409
 1349              	.LBB291:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1350              		.loc 2 193 1 view .LVU410
 1351              		.loc 2 195 2 view .LVU411
 1352              		.syntax unified
 1353              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1354 002a 4FF05003 			mov r3, #80												
 1355 002e 83F31188 		msr basepri, r3											
 1356 0032 BFF36F8F 		isb														
 1357 0036 BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              	.LVL84:
 1361              		.thumb
 1362              		.syntax unified
 1363              	.L117:
 1364              		.loc 2 195 2 is_stmt 0 view .LVU412
 1365              	.LBE291:
 1366              	.LBE290:
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1367              		.loc 1 593 3 is_stmt 1 view .LVU413
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1368              		.loc 1 593 3 view .LVU414
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1369              		.loc 1 593 3 view .LVU415
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1370              		.loc 1 593 3 view .LVU416
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1371              		.loc 1 593 3 view .LVU417
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1372              		.loc 1 593 3 view .LVU418
 1373 003a FEE7     		b	.L117
 1374              	.LVL85:
 1375              	.L121:
 593:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1376              		.loc 1 593 3 is_stmt 0 view .LVU419
 1377              	.LBE289:
 1378              	.LBE288:
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1379              		.loc 1 592 3 is_stmt 1 view .LVU420
 1380              	.LBB292:
 1381              	.LBI292:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1382              		.loc 2 191 30 view .LVU421
 1383              	.LBB293:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1384              		.loc 2 193 1 view .LVU422
 1385              		.loc 2 195 2 view .LVU423
 1386              		.syntax unified
 1387              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 127


 1388 003c 4FF05003 			mov r3, #80												
 1389 0040 83F31188 		msr basepri, r3											
 1390 0044 BFF36F8F 		isb														
 1391 0048 BFF34F8F 		dsb														
 1392              	
 1393              	@ 0 "" 2
 1394              	.LVL86:
 1395              		.thumb
 1396              		.syntax unified
 1397              	.L115:
 1398              		.loc 2 195 2 is_stmt 0 view .LVU424
 1399              	.LBE293:
 1400              	.LBE292:
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1401              		.loc 1 592 3 is_stmt 1 discriminator 1 view .LVU425
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1402              		.loc 1 592 3 discriminator 1 view .LVU426
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1403              		.loc 1 592 3 discriminator 1 view .LVU427
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1404              		.loc 1 592 3 discriminator 1 view .LVU428
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1405              		.loc 1 592 3 discriminator 1 view .LVU429
 592:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1406              		.loc 1 592 3 discriminator 1 view .LVU430
 1407 004c FEE7     		b	.L115
 1408              	.LVL87:
 1409              	.L118:
 1410              	.LBB294:
 601:.//Libraries/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1411              		.loc 1 601 44 discriminator 2 view .LVU431
 602:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1412              		.loc 1 602 4 discriminator 2 view .LVU432
 1413              	.LBE294:
 612:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1414              		.loc 1 612 22 is_stmt 0 discriminator 2 view .LVU433
 1415 004e 2563     		str	r5, [r4, #48]
 618:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1416              		.loc 1 618 37 discriminator 2 view .LVU434
 1417 0050 0227     		movs	r7, #2
 622:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1418              		.loc 1 622 4 discriminator 2 view .LVU435
 1419 0052 04AD     		add	r5, sp, #16
 1420 0054 0294     		str	r4, [sp, #8]
 1421 0056 0096     		str	r6, [sp]
 618:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1422              		.loc 1 618 37 discriminator 2 view .LVU436
 1423 0058 84F85970 		strb	r7, [r4, #89]
 622:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1424              		.loc 1 622 4 discriminator 2 view .LVU437
 1425 005c 0195     		str	r5, [sp, #4]
 1426              	.LBB295:
 602:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1427              		.loc 1 602 4 discriminator 2 view .LVU438
 1428 005e 059D     		ldr	r5, [sp, #20]
 1429              	.LBE295:
 607:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 128


 1430              		.loc 1 607 3 is_stmt 1 discriminator 2 view .LVU439
 611:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 1431              		.loc 1 611 4 discriminator 2 view .LVU440
 1432              	.LVL88:
 612:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1433              		.loc 1 612 4 discriminator 2 view .LVU441
 618:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1434              		.loc 1 618 5 discriminator 2 view .LVU442
 622:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1435              		.loc 1 622 4 discriminator 2 view .LVU443
 1436 0060 FFF7FEFF 		bl	prvInitialiseNewTask.isra.0
 1437              	.LVL89:
 623:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1438              		.loc 1 623 4 discriminator 2 view .LVU444
 1439 0064 2046     		mov	r0, r4
 1440 0066 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1441              	.LVL90:
 630:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1442              		.loc 1 630 3 discriminator 2 view .LVU445
 631:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1443              		.loc 1 631 2 is_stmt 0 discriminator 2 view .LVU446
 1444 006a 0498     		ldr	r0, [sp, #16]
 1445 006c 07B0     		add	sp, sp, #28
 1446              	.LCFI15:
 1447              		.cfi_def_cfa_offset 20
 1448              		@ sp needed
 1449 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 631:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1450              		.loc 1 631 2 discriminator 2 view .LVU447
 1451              		.cfi_endproc
 1452              	.LFE4:
 1454              		.section	.text.xTaskCreate,"ax",%progbits
 1455              		.align	1
 1456              		.p2align 2,,3
 1457              		.global	xTaskCreate
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv5-d16
 1463              	xTaskCreate:
 1464              	.LVL91:
 1465              	.LFB5:
 739:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1466              		.loc 1 739 2 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 8, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 740:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 1470              		.loc 1 740 2 view .LVU449
 741:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1471              		.loc 1 741 2 view .LVU450
 1472              	.LBB296:
 770:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1473              		.loc 1 770 3 view .LVU451
 773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1474              		.loc 1 773 4 view .LVU452
 1475              	.LBE296:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 129


 739:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1476              		.loc 1 739 2 is_stmt 0 view .LVU453
 1477 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1478              	.LCFI16:
 1479              		.cfi_def_cfa_offset 28
 1480              		.cfi_offset 4, -28
 1481              		.cfi_offset 5, -24
 1482              		.cfi_offset 6, -20
 1483              		.cfi_offset 7, -16
 1484              		.cfi_offset 8, -12
 1485              		.cfi_offset 9, -8
 1486              		.cfi_offset 14, -4
 1487 0004 0746     		mov	r7, r0
 1488 0006 85B0     		sub	sp, sp, #20
 1489              	.LCFI17:
 1490              		.cfi_def_cfa_offset 48
 1491              	.LBB297:
 773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1492              		.loc 1 773 14 view .LVU454
 1493 0008 9000     		lsls	r0, r2, #2
 1494              	.LVL92:
 773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1495              		.loc 1 773 14 view .LVU455
 1496              	.LBE297:
 739:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1497              		.loc 1 739 2 view .LVU456
 1498 000a 1546     		mov	r5, r2
 1499 000c 8846     		mov	r8, r1
 1500 000e 9946     		mov	r9, r3
 1501              	.LBB298:
 773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1502              		.loc 1 773 14 view .LVU457
 1503 0010 FFF7FEFF 		bl	pvPortMalloc
 1504              	.LVL93:
 775:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1505              		.loc 1 775 4 is_stmt 1 view .LVU458
 775:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1506              		.loc 1 775 6 is_stmt 0 view .LVU459
 1507 0014 E0B1     		cbz	r0, .L126
 778:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1508              		.loc 1 778 5 is_stmt 1 view .LVU460
 1509 0016 0446     		mov	r4, r0
 778:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1510              		.loc 1 778 28 is_stmt 0 view .LVU461
 1511 0018 5C20     		movs	r0, #92
 1512              	.LVL94:
 778:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1513              		.loc 1 778 28 view .LVU462
 1514 001a FFF7FEFF 		bl	pvPortMalloc
 1515              	.LVL95:
 780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1516              		.loc 1 780 5 is_stmt 1 view .LVU463
 780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1517              		.loc 1 780 7 is_stmt 0 view .LVU464
 1518 001e 0646     		mov	r6, r0
 1519 0020 D8B1     		cbz	r0, .L125
 783:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 130


 1520              		.loc 1 783 6 is_stmt 1 view .LVU465
 783:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1521              		.loc 1 783 24 is_stmt 0 view .LVU466
 1522 0022 0463     		str	r4, [r0, #48]
 783:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1523              		.loc 1 783 24 view .LVU467
 1524              	.LBE298:
 799:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1525              		.loc 1 799 3 is_stmt 1 view .LVU468
 805:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1526              		.loc 1 805 5 view .LVU469
 805:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1527              		.loc 1 805 37 is_stmt 0 view .LVU470
 1528 0024 4FF0000C 		mov	ip, #0
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1529              		.loc 1 809 4 view .LVU471
 1530 0028 0D9C     		ldr	r4, [sp, #52]
 1531              	.LVL96:
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1532              		.loc 1 809 4 view .LVU472
 1533 002a 4B46     		mov	r3, r9
 805:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1534              		.loc 1 805 37 view .LVU473
 1535 002c 86F859C0 		strb	ip, [r6, #89]
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1536              		.loc 1 809 4 is_stmt 1 view .LVU474
 1537 0030 2A46     		mov	r2, r5
 1538 0032 0194     		str	r4, [sp, #4]
 1539              	.LVL97:
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1540              		.loc 1 809 4 is_stmt 0 view .LVU475
 1541 0034 4146     		mov	r1, r8
 1542 0036 0C9C     		ldr	r4, [sp, #48]
 1543 0038 3846     		mov	r0, r7
 1544              	.LVL98:
 809:.//Libraries/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1545              		.loc 1 809 4 view .LVU476
 1546 003a 0296     		str	r6, [sp, #8]
 1547 003c 0094     		str	r4, [sp]
 1548 003e FFF7FEFF 		bl	prvInitialiseNewTask.isra.0
 1549              	.LVL99:
 810:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1550              		.loc 1 810 4 is_stmt 1 view .LVU477
 1551 0042 3046     		mov	r0, r6
 1552 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1553              	.LVL100:
 811:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1554              		.loc 1 811 4 view .LVU478
 811:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1555              		.loc 1 811 12 is_stmt 0 view .LVU479
 1556 0048 0120     		movs	r0, #1
 1557              	.LVL101:
 1558              	.L123:
 819:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1559              		.loc 1 819 2 view .LVU480
 1560 004a 05B0     		add	sp, sp, #20
 1561              	.LCFI18:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 131


 1562              		.cfi_remember_state
 1563              		.cfi_def_cfa_offset 28
 1564              		@ sp needed
 1565 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1566              	.LVL102:
 1567              	.L126:
 1568              	.LCFI19:
 1569              		.cfi_restore_state
 815:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1570              		.loc 1 815 12 view .LVU481
 1571 0050 4FF0FF30 		mov	r0, #-1
 1572              	.LVL103:
 818:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1573              		.loc 1 818 3 is_stmt 1 view .LVU482
 819:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 819 2 is_stmt 0 view .LVU483
 1575 0054 05B0     		add	sp, sp, #20
 1576              	.LCFI20:
 1577              		.cfi_remember_state
 1578              		.cfi_def_cfa_offset 28
 1579              		@ sp needed
 1580 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1581              	.LVL104:
 1582              	.L125:
 1583              	.LCFI21:
 1584              		.cfi_restore_state
 1585              	.LBB299:
 789:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1586              		.loc 1 789 6 is_stmt 1 view .LVU484
 1587 005a 2046     		mov	r0, r4
 1588              	.LVL105:
 789:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1589              		.loc 1 789 6 is_stmt 0 view .LVU485
 1590 005c FFF7FEFF 		bl	vPortFree
 1591              	.LVL106:
 789:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1592              		.loc 1 789 6 view .LVU486
 1593              	.LBE299:
 799:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1594              		.loc 1 799 3 is_stmt 1 view .LVU487
 815:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1595              		.loc 1 815 12 is_stmt 0 view .LVU488
 1596 0060 4FF0FF30 		mov	r0, #-1
 1597 0064 F1E7     		b	.L123
 1598              		.cfi_endproc
 1599              	.LFE5:
 1601 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1602              		.align	1
 1603              		.p2align 2,,3
 1604              		.global	vTaskDelete
 1605              		.syntax unified
 1606              		.thumb
 1607              		.thumb_func
 1608              		.fpu fpv5-d16
 1610              	vTaskDelete:
 1611              	.LVL107:
 1612              	.LFB8:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 132


1163:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1613              		.loc 1 1163 2 is_stmt 1 view -0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
1164:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1617              		.loc 1 1164 2 view .LVU490
1166:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1618              		.loc 1 1166 3 view .LVU491
1163:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1619              		.loc 1 1163 2 is_stmt 0 view .LVU492
 1620 0000 70B5     		push	{r4, r5, r6, lr}
 1621              	.LCFI22:
 1622              		.cfi_def_cfa_offset 16
 1623              		.cfi_offset 4, -16
 1624              		.cfi_offset 5, -12
 1625              		.cfi_offset 6, -8
 1626              		.cfi_offset 14, -4
1163:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1627              		.loc 1 1163 2 view .LVU493
 1628 0002 0446     		mov	r4, r0
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1629              		.loc 1 1170 12 view .LVU494
 1630 0004 284D     		ldr	r5, .L149
1166:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1631              		.loc 1 1166 3 view .LVU495
 1632 0006 FFF7FEFF 		bl	vPortEnterCritical
 1633              	.LVL108:
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1634              		.loc 1 1170 4 is_stmt 1 view .LVU496
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1635              		.loc 1 1170 12 is_stmt 0 view .LVU497
 1636 000a 002C     		cmp	r4, #0
 1637 000c 35D0     		beq	.L144
 1638              	.LVL109:
 1639              	.L129:
1173:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1640              		.loc 1 1173 4 is_stmt 1 discriminator 4 view .LVU498
1173:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1641              		.loc 1 1173 8 is_stmt 0 discriminator 4 view .LVU499
 1642 000e 261D     		adds	r6, r4, #4
 1643 0010 3046     		mov	r0, r6
 1644 0012 FFF7FEFF 		bl	uxListRemove
 1645              	.LVL110:
1179:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1646              		.loc 1 1179 29 is_stmt 1 discriminator 4 view .LVU500
1183:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1647              		.loc 1 1183 4 discriminator 4 view .LVU501
1183:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1648              		.loc 1 1183 6 is_stmt 0 discriminator 4 view .LVU502
 1649 0016 A36A     		ldr	r3, [r4, #40]
 1650 0018 1BB1     		cbz	r3, .L130
1185:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1651              		.loc 1 1185 5 is_stmt 1 view .LVU503
1185:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1652              		.loc 1 1185 14 is_stmt 0 view .LVU504
 1653 001a 04F11800 		add	r0, r4, #24
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 133


 1654 001e FFF7FEFF 		bl	uxListRemove
 1655              	.LVL111:
 1656              	.L130:
1189:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1657              		.loc 1 1189 29 is_stmt 1 view .LVU505
1196:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1658              		.loc 1 1196 4 view .LVU506
1196:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1659              		.loc 1 1196 16 is_stmt 0 view .LVU507
 1660 0022 224A     		ldr	r2, .L149+4
1198:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1661              		.loc 1 1198 14 view .LVU508
 1662 0024 2968     		ldr	r1, [r5]
1196:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1663              		.loc 1 1196 16 view .LVU509
 1664 0026 1368     		ldr	r3, [r2]
1198:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1665              		.loc 1 1198 6 view .LVU510
 1666 0028 A142     		cmp	r1, r4
1196:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1667              		.loc 1 1196 16 view .LVU511
 1668 002a 03F10103 		add	r3, r3, #1
 1669 002e 1360     		str	r3, [r2]
1198:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1670              		.loc 1 1198 4 is_stmt 1 view .LVU512
1198:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1671              		.loc 1 1198 6 is_stmt 0 view .LVU513
 1672 0030 1AD0     		beq	.L146
1225:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1673              		.loc 1 1225 5 is_stmt 1 view .LVU514
 1674 0032 1F4A     		ldr	r2, .L149+8
1227:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1675              		.loc 1 1227 5 is_stmt 0 view .LVU515
 1676 0034 2046     		mov	r0, r4
1225:.//Libraries/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1677              		.loc 1 1225 5 view .LVU516
 1678 0036 1368     		ldr	r3, [r2]
 1679 0038 013B     		subs	r3, r3, #1
 1680 003a 1360     		str	r3, [r2]
1226:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1681              		.loc 1 1226 30 is_stmt 1 view .LVU517
1227:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1682              		.loc 1 1227 5 view .LVU518
 1683 003c FFF7FEFF 		bl	prvDeleteTCB
 1684              	.LVL112:
1231:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1685              		.loc 1 1231 5 view .LVU519
 1686              	.LBB300:
 1687              	.LBI300:
3943:.//Libraries/FreeRTOS/Source/tasks.c **** {
 1688              		.loc 1 3943 13 view .LVU520
 1689              	.LBB301:
3945:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1690              		.loc 1 3945 1 view .LVU521
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1691              		.loc 1 3947 2 view .LVU522
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 134


 1692              		.loc 1 3947 6 is_stmt 0 view .LVU523
 1693 0040 1C4B     		ldr	r3, .L149+12
 1694 0042 1B68     		ldr	r3, [r3]
 1695 0044 1B68     		ldr	r3, [r3]
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1696              		.loc 1 3947 4 view .LVU524
 1697 0046 53B1     		cbz	r3, .L147
 1698 0048 FFF7FEFF 		bl	prvResetNextTaskUnblockTime.part.0
 1699              	.LVL113:
 1700              	.L132:
 1701              	.LBE301:
 1702              	.LBE300:
1234:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1703              		.loc 1 1234 3 is_stmt 1 view .LVU525
 1704 004c FFF7FEFF 		bl	vPortExitCritical
 1705              	.LVL114:
1238:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1706              		.loc 1 1238 3 view .LVU526
1238:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1707              		.loc 1 1238 25 is_stmt 0 view .LVU527
 1708 0050 194B     		ldr	r3, .L149+16
 1709 0052 1B68     		ldr	r3, [r3]
1238:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1710              		.loc 1 1238 5 view .LVU528
 1711 0054 13B1     		cbz	r3, .L128
1240:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1712              		.loc 1 1240 4 is_stmt 1 view .LVU529
1240:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1713              		.loc 1 1240 14 is_stmt 0 view .LVU530
 1714 0056 2B68     		ldr	r3, [r5]
1240:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1715              		.loc 1 1240 6 view .LVU531
 1716 0058 A342     		cmp	r3, r4
 1717 005a 10D0     		beq	.L148
 1718              	.L128:
1250:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1719              		.loc 1 1250 2 view .LVU532
 1720 005c 70BD     		pop	{r4, r5, r6, pc}
 1721              	.LVL115:
 1722              	.L147:
 1723              	.LBB303:
 1724              	.LBB302:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1725              		.loc 1 3953 3 is_stmt 1 view .LVU533
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 1726              		.loc 1 3953 24 is_stmt 0 view .LVU534
 1727 005e 174B     		ldr	r3, .L149+20
 1728 0060 4FF0FF32 		mov	r2, #-1
 1729 0064 1A60     		str	r2, [r3]
 1730 0066 F1E7     		b	.L132
 1731              	.L146:
 1732              	.LBE302:
 1733              	.LBE303:
1205:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1734              		.loc 1 1205 5 is_stmt 1 view .LVU535
 1735 0068 3146     		mov	r1, r6
 1736 006a 1548     		ldr	r0, .L149+24
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 135


 1737 006c FFF7FEFF 		bl	vListInsertEnd
 1738              	.LVL116:
1210:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1739              		.loc 1 1210 5 view .LVU536
 1740 0070 144A     		ldr	r2, .L149+28
 1741 0072 1368     		ldr	r3, [r2]
 1742 0074 0133     		adds	r3, r3, #1
 1743 0076 1360     		str	r3, [r2]
1214:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1744              		.loc 1 1214 30 view .LVU537
1221:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1745              		.loc 1 1221 54 view .LVU538
 1746 0078 E8E7     		b	.L132
 1747              	.LVL117:
 1748              	.L144:
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1749              		.loc 1 1170 12 is_stmt 0 discriminator 1 view .LVU539
 1750 007a 2C68     		ldr	r4, [r5]
 1751              	.LVL118:
1170:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1752              		.loc 1 1170 12 discriminator 1 view .LVU540
 1753 007c C7E7     		b	.L129
 1754              	.LVL119:
 1755              	.L148:
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1756              		.loc 1 1242 5 is_stmt 1 view .LVU541
 1757 007e 124B     		ldr	r3, .L149+32
 1758 0080 1B68     		ldr	r3, [r3]
 1759 0082 43B1     		cbz	r3, .L135
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1760              		.loc 1 1242 5 view .LVU542
 1761              	.LBB304:
 1762              	.LBI304:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1763              		.loc 2 191 30 view .LVU543
 1764              	.LBB305:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1765              		.loc 2 193 1 view .LVU544
 1766              		.loc 2 195 2 view .LVU545
 1767              		.syntax unified
 1768              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1769 0084 4FF05003 			mov r3, #80												
 1770 0088 83F31188 		msr basepri, r3											
 1771 008c BFF36F8F 		isb														
 1772 0090 BFF34F8F 		dsb														
 1773              	
 1774              	@ 0 "" 2
 1775              	.LVL120:
 1776              		.thumb
 1777              		.syntax unified
 1778              	.L136:
 1779              		.loc 2 195 2 is_stmt 0 view .LVU546
 1780              	.LBE305:
 1781              	.LBE304:
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1782              		.loc 1 1242 5 is_stmt 1 discriminator 1 view .LVU547
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 136


 1783              		.loc 1 1242 5 discriminator 1 view .LVU548
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1784              		.loc 1 1242 5 discriminator 1 view .LVU549
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1785              		.loc 1 1242 5 discriminator 1 view .LVU550
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1786              		.loc 1 1242 5 discriminator 1 view .LVU551
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1787              		.loc 1 1242 5 discriminator 1 view .LVU552
 1788 0094 FEE7     		b	.L136
 1789              	.L135:
1242:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1790              		.loc 1 1242 46 discriminator 2 view .LVU553
1243:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1791              		.loc 1 1243 5 discriminator 2 view .LVU554
 1792 0096 0D4B     		ldr	r3, .L149+36
 1793 0098 4FF08052 		mov	r2, #268435456
 1794 009c 1A60     		str	r2, [r3]
1243:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1795              		.loc 1 1243 5 discriminator 2 view .LVU555
 1796              		.syntax unified
 1797              	@ 1243 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 1798 009e BFF34F8F 		dsb
 1799              	@ 0 "" 2
1243:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1800              		.loc 1 1243 5 discriminator 2 view .LVU556
 1801              	@ 1243 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 1802 00a2 BFF36F8F 		isb
 1803              	@ 0 "" 2
1243:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1804              		.loc 1 1243 27 discriminator 2 view .LVU557
1247:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1805              		.loc 1 1247 29 discriminator 2 view .LVU558
1250:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1806              		.loc 1 1250 2 is_stmt 0 discriminator 2 view .LVU559
 1807              		.thumb
 1808              		.syntax unified
 1809 00a6 70BD     		pop	{r4, r5, r6, pc}
 1810              	.LVL121:
 1811              	.L150:
1250:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1812              		.loc 1 1250 2 discriminator 2 view .LVU560
 1813              		.align	2
 1814              	.L149:
 1815 00a8 00000000 		.word	.LANCHOR1
 1816 00ac 00000000 		.word	.LANCHOR11
 1817 00b0 00000000 		.word	.LANCHOR0
 1818 00b4 00000000 		.word	.LANCHOR8
 1819 00b8 00000000 		.word	.LANCHOR10
 1820 00bc 00000000 		.word	.LANCHOR13
 1821 00c0 00000000 		.word	.LANCHOR6
 1822 00c4 00000000 		.word	.LANCHOR14
 1823 00c8 00000000 		.word	.LANCHOR18
 1824 00cc 04ED00E0 		.word	-536810236
 1825              		.cfi_endproc
 1826              	.LFE8:
 1828              		.section	.text.eTaskGetState,"ax",%progbits
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 137


 1829              		.align	1
 1830              		.p2align 2,,3
 1831              		.global	eTaskGetState
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv5-d16
 1837              	eTaskGetState:
 1838              	.LVL122:
 1839              	.LFB11:
1387:.//Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1840              		.loc 1 1387 2 is_stmt 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
1388:.//Libraries/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
 1844              		.loc 1 1388 2 view .LVU562
1389:.//Libraries/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1845              		.loc 1 1389 2 view .LVU563
1390:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1846              		.loc 1 1390 2 view .LVU564
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1847              		.loc 1 1392 3 view .LVU565
1387:.//Libraries/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1848              		.loc 1 1387 2 is_stmt 0 view .LVU566
 1849 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1850              	.LCFI23:
 1851              		.cfi_def_cfa_offset 24
 1852              		.cfi_offset 3, -24
 1853              		.cfi_offset 4, -20
 1854              		.cfi_offset 5, -16
 1855              		.cfi_offset 6, -12
 1856              		.cfi_offset 7, -8
 1857              		.cfi_offset 14, -4
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1858              		.loc 1 1392 3 view .LVU567
 1859 0002 E0B1     		cbz	r0, .L162
1394:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1860              		.loc 1 1394 13 discriminator 2 view .LVU568
 1861 0004 194B     		ldr	r3, .L165
 1862 0006 0446     		mov	r4, r0
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1863              		.loc 1 1392 24 is_stmt 1 discriminator 2 view .LVU569
1394:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1864              		.loc 1 1394 3 discriminator 2 view .LVU570
1394:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1865              		.loc 1 1394 13 is_stmt 0 discriminator 2 view .LVU571
 1866 0008 1B68     		ldr	r3, [r3]
1394:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 1867              		.loc 1 1394 5 discriminator 2 view .LVU572
 1868 000a 8342     		cmp	r3, r0
 1869 000c 15D0     		beq	.L156
1401:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1870              		.loc 1 1401 4 is_stmt 1 view .LVU573
 1871 000e FFF7FEFF 		bl	vPortEnterCritical
 1872              	.LVL123:
1403:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 138


 1873              		.loc 1 1403 5 view .LVU574
1404:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1874              		.loc 1 1404 19 is_stmt 0 view .LVU575
 1875 0012 174A     		ldr	r2, .L165+4
1405:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1876              		.loc 1 1405 29 view .LVU576
 1877 0014 174B     		ldr	r3, .L165+8
1404:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1878              		.loc 1 1404 19 view .LVU577
 1879 0016 1768     		ldr	r7, [r2]
1403:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1880              		.loc 1 1403 17 view .LVU578
 1881 0018 6569     		ldr	r5, [r4, #20]
 1882              	.LVL124:
1404:.//Libraries/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1883              		.loc 1 1404 5 is_stmt 1 view .LVU579
1405:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1884              		.loc 1 1405 5 view .LVU580
1405:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1885              		.loc 1 1405 29 is_stmt 0 view .LVU581
 1886 001a 1E68     		ldr	r6, [r3]
 1887              	.LVL125:
1407:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1888              		.loc 1 1407 4 is_stmt 1 view .LVU582
 1889 001c FFF7FEFF 		bl	vPortExitCritical
 1890              	.LVL126:
1409:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1891              		.loc 1 1409 4 view .LVU583
1409:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 1892              		.loc 1 1409 6 is_stmt 0 view .LVU584
 1893 0020 BD42     		cmp	r5, r7
 1894 0022 17D0     		beq	.L158
 1895 0024 B542     		cmp	r5, r6
 1896 0026 15D0     		beq	.L158
1417:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1897              		.loc 1 1417 10 is_stmt 1 view .LVU585
1417:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1898              		.loc 1 1417 12 is_stmt 0 view .LVU586
 1899 0028 134B     		ldr	r3, .L165+12
 1900 002a 9D42     		cmp	r5, r3
 1901 002c 10D0     		beq	.L163
1453:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1902              		.loc 1 1453 10 is_stmt 1 discriminator 1 view .LVU587
1453:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1903              		.loc 1 1453 12 is_stmt 0 discriminator 1 view .LVU588
 1904 002e 134B     		ldr	r3, .L165+16
1453:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 1905              		.loc 1 1453 59 discriminator 1 view .LVU589
 1906 0030 9D42     		cmp	r5, r3
 1907 0032 11D0     		beq	.L160
 1908 0034 85B1     		cbz	r5, .L160
1466:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1909              		.loc 1 1466 13 view .LVU590
 1910 0036 0120     		movs	r0, #1
 1911              	.LVL127:
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1912              		.loc 1 1470 3 is_stmt 1 view .LVU591
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 139


1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1913              		.loc 1 1471 2 is_stmt 0 view .LVU592
 1914 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1915              	.LVL128:
 1916              	.L156:
1397:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 1917              		.loc 1 1397 12 view .LVU593
 1918 003a 0020     		movs	r0, #0
 1919              	.LVL129:
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1920              		.loc 1 1470 3 is_stmt 1 view .LVU594
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1921              		.loc 1 1471 2 is_stmt 0 view .LVU595
 1922 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1923              	.LVL130:
 1924              	.L162:
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1925              		.loc 1 1392 3 is_stmt 1 view .LVU596
 1926              	.LBB312:
 1927              	.LBI312:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1928              		.loc 2 191 30 view .LVU597
 1929              	.LBB313:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1930              		.loc 2 193 1 view .LVU598
 1931              		.loc 2 195 2 view .LVU599
 1932              		.syntax unified
 1933              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1934 003e 4FF05003 			mov r3, #80												
 1935 0042 83F31188 		msr basepri, r3											
 1936 0046 BFF36F8F 		isb														
 1937 004a BFF34F8F 		dsb														
 1938              	
 1939              	@ 0 "" 2
 1940              	.LVL131:
 1941              		.thumb
 1942              		.syntax unified
 1943              	.L153:
 1944              		.loc 2 195 2 is_stmt 0 view .LVU600
 1945              	.LBE313:
 1946              	.LBE312:
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1947              		.loc 1 1392 3 is_stmt 1 discriminator 1 view .LVU601
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1948              		.loc 1 1392 3 discriminator 1 view .LVU602
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1949              		.loc 1 1392 3 discriminator 1 view .LVU603
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1950              		.loc 1 1392 3 discriminator 1 view .LVU604
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1951              		.loc 1 1392 3 discriminator 1 view .LVU605
1392:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1952              		.loc 1 1392 3 discriminator 1 view .LVU606
 1953 004e FEE7     		b	.L153
 1954              	.LVL132:
 1955              	.L163:
 1956              	.LBB314:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 140


 1957              	.LBI314:
1386:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 1958              		.loc 1 1386 13 view .LVU607
 1959              	.LBB315:
1422:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1960              		.loc 1 1422 6 view .LVU608
1422:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1961              		.loc 1 1422 8 is_stmt 0 view .LVU609
 1962 0050 A36A     		ldr	r3, [r4, #40]
 1963 0052 1BB1     		cbz	r3, .L164
 1964              	.LVL133:
 1965              	.L158:
1422:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 1966              		.loc 1 1422 8 view .LVU610
 1967              	.LBE315:
 1968              	.LBE314:
1413:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 1969              		.loc 1 1413 13 view .LVU611
 1970 0054 0220     		movs	r0, #2
 1971              	.LVL134:
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1972              		.loc 1 1470 3 is_stmt 1 view .LVU612
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1973              		.loc 1 1471 2 is_stmt 0 view .LVU613
 1974 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1975              	.LVL135:
 1976              	.L160:
1458:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 1977              		.loc 1 1458 14 view .LVU614
 1978 0058 0420     		movs	r0, #4
 1979              	.LVL136:
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1980              		.loc 1 1470 3 is_stmt 1 view .LVU615
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 1981              		.loc 1 1471 2 is_stmt 0 view .LVU616
 1982 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1983              	.LVL137:
 1984              	.L164:
 1985              	.LBB317:
 1986              	.LBB316:
1430:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 1987              		.loc 1 1430 8 is_stmt 1 view .LVU617
1430:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 1988              		.loc 1 1430 17 is_stmt 0 view .LVU618
 1989 005c 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
1436:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 1990              		.loc 1 1436 17 view .LVU619
 1991 0060 012B     		cmp	r3, #1
 1992 0062 0CBF     		ite	eq
 1993 0064 0220     		moveq	r0, #2
 1994 0066 0320     		movne	r0, #3
 1995              	.LVL138:
1436:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 1996              		.loc 1 1436 17 view .LVU620
 1997              	.LBE316:
 1998              	.LBE317:
1470:.//Libraries/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 141


 1999              		.loc 1 1470 3 is_stmt 1 view .LVU621
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2000              		.loc 1 1471 2 is_stmt 0 view .LVU622
 2001 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2002              	.LVL139:
 2003              	.L166:
1471:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2004              		.loc 1 1471 2 view .LVU623
 2005 006a 00BF     		.align	2
 2006              	.L165:
 2007 006c 00000000 		.word	.LANCHOR1
 2008 0070 00000000 		.word	.LANCHOR8
 2009 0074 00000000 		.word	.LANCHOR9
 2010 0078 00000000 		.word	.LANCHOR7
 2011 007c 00000000 		.word	.LANCHOR6
 2012              		.cfi_endproc
 2013              	.LFE11:
 2015              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 2016              		.align	1
 2017              		.p2align 2,,3
 2018              		.global	uxTaskPriorityGet
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu fpv5-d16
 2024              	uxTaskPriorityGet:
 2025              	.LVL140:
 2026              	.LFB12:
1479:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 2027              		.loc 1 1479 2 is_stmt 1 view -0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 8
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
1480:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 2031              		.loc 1 1480 2 view .LVU625
1481:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2032              		.loc 1 1481 2 view .LVU626
1483:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2033              		.loc 1 1483 3 view .LVU627
1479:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 2034              		.loc 1 1479 2 is_stmt 0 view .LVU628
 2035 0000 10B5     		push	{r4, lr}
 2036              	.LCFI24:
 2037              		.cfi_def_cfa_offset 8
 2038              		.cfi_offset 4, -8
 2039              		.cfi_offset 14, -4
 2040 0002 0446     		mov	r4, r0
 2041 0004 82B0     		sub	sp, sp, #8
 2042              	.LCFI25:
 2043              		.cfi_def_cfa_offset 16
1483:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2044              		.loc 1 1483 3 view .LVU629
 2045 0006 FFF7FEFF 		bl	vPortEnterCritical
 2046              	.LVL141:
1487:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2047              		.loc 1 1487 4 is_stmt 1 view .LVU630
1487:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 142


 2048              		.loc 1 1487 12 is_stmt 0 view .LVU631
 2049 000a 34B1     		cbz	r4, .L170
 2050              	.LVL142:
 2051              	.L168:
1488:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2052              		.loc 1 1488 4 is_stmt 1 discriminator 4 view .LVU632
1488:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2053              		.loc 1 1488 13 is_stmt 0 discriminator 4 view .LVU633
 2054 000c E06A     		ldr	r0, [r4, #44]
 2055 000e 0190     		str	r0, [sp, #4]
 2056              	.LVL143:
1490:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2057              		.loc 1 1490 3 is_stmt 1 discriminator 4 view .LVU634
 2058 0010 FFF7FEFF 		bl	vPortExitCritical
 2059              	.LVL144:
1492:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2060              		.loc 1 1492 3 discriminator 4 view .LVU635
1493:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2061              		.loc 1 1493 2 is_stmt 0 discriminator 4 view .LVU636
 2062 0014 0198     		ldr	r0, [sp, #4]
 2063 0016 02B0     		add	sp, sp, #8
 2064              	.LCFI26:
 2065              		.cfi_remember_state
 2066              		.cfi_def_cfa_offset 8
 2067              		@ sp needed
 2068 0018 10BD     		pop	{r4, pc}
 2069              	.LVL145:
 2070              	.L170:
 2071              	.LCFI27:
 2072              		.cfi_restore_state
1487:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2073              		.loc 1 1487 12 discriminator 1 view .LVU637
 2074 001a 014B     		ldr	r3, .L171
 2075 001c 1C68     		ldr	r4, [r3]
 2076              	.LVL146:
1487:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2077              		.loc 1 1487 12 discriminator 1 view .LVU638
 2078 001e F5E7     		b	.L168
 2079              	.L172:
 2080              		.align	2
 2081              	.L171:
 2082 0020 00000000 		.word	.LANCHOR1
 2083              		.cfi_endproc
 2084              	.LFE12:
 2086              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 2087              		.align	1
 2088              		.p2align 2,,3
 2089              		.global	uxTaskPriorityGetFromISR
 2090              		.syntax unified
 2091              		.thumb
 2092              		.thumb_func
 2093              		.fpu fpv5-d16
 2095              	uxTaskPriorityGetFromISR:
 2096              	.LVL147:
 2097              	.LFB13:
1501:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 2098              		.loc 1 1501 2 is_stmt 1 view -0
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 143


 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
1502:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 2102              		.loc 1 1502 2 view .LVU640
1503:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2103              		.loc 1 1503 2 view .LVU641
1521:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2104              		.loc 1 1521 3 view .LVU642
1501:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 2105              		.loc 1 1501 2 is_stmt 0 view .LVU643
 2106 0000 10B5     		push	{r4, lr}
 2107              	.LCFI28:
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 4, -8
 2110              		.cfi_offset 14, -4
1501:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 2111              		.loc 1 1501 2 view .LVU644
 2112 0002 0446     		mov	r4, r0
1521:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2113              		.loc 1 1521 3 view .LVU645
 2114 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2115              	.LVL148:
1523:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2116              		.loc 1 1523 3 is_stmt 1 view .LVU646
 2117              	.LBB318:
 2118              	.LBI318:
 196:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 2119              		.loc 2 207 34 view .LVU647
 2120              	.LBB319:
 208:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 2121              		.loc 2 209 1 view .LVU648
 210:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 2122              		.loc 2 211 2 view .LVU649
 2123              		.syntax unified
 2124              	@ 211 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2125 0008 EFF31183 			mrs r3, basepri											
 2126 000c 4FF05002 		mov r2, #80												
 2127 0010 82F31188 		msr basepri, r2											
 2128 0014 BFF36F8F 		isb														
 2129 0018 BFF34F8F 		dsb														
 2130              	
 2131              	@ 0 "" 2
 2132              	.LVL149:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 144


 212:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 2133              		.loc 2 223 2 view .LVU650
 2134              		.loc 2 223 2 is_stmt 0 view .LVU651
 2135              		.thumb
 2136              		.syntax unified
 2137              	.LBE319:
 2138              	.LBE318:
1527:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2139              		.loc 1 1527 4 is_stmt 1 view .LVU652
1527:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2140              		.loc 1 1527 12 is_stmt 0 view .LVU653
 2141 001c 1CB1     		cbz	r4, .L176
 2142              	.LVL150:
1528:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2143              		.loc 1 1528 4 is_stmt 1 discriminator 4 view .LVU654
1528:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2144              		.loc 1 1528 13 is_stmt 0 discriminator 4 view .LVU655
 2145 001e E06A     		ldr	r0, [r4, #44]
 2146              	.LVL151:
1530:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2147              		.loc 1 1530 3 is_stmt 1 discriminator 4 view .LVU656
 2148              	.LBB320:
 2149              	.LBI320:
 224:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 2150              		.loc 2 227 30 discriminator 4 view .LVU657
 2151              	.LBB321:
 228:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 2152              		.loc 2 229 2 discriminator 4 view .LVU658
 2153              		.syntax unified
 2154              	@ 229 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2155 0020 83F31188 			msr basepri, r3	
 2156              	@ 0 "" 2
 2157              	.LVL152:
 2158              		.loc 2 229 2 is_stmt 0 discriminator 4 view .LVU659
 2159              		.thumb
 2160              		.syntax unified
 2161              	.LBE321:
 2162              	.LBE320:
1532:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2163              		.loc 1 1532 3 is_stmt 1 discriminator 4 view .LVU660
1533:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2164              		.loc 1 1533 2 is_stmt 0 discriminator 4 view .LVU661
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 145


 2165 0024 10BD     		pop	{r4, pc}
 2166              	.LVL153:
 2167              	.L176:
1527:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 2168              		.loc 1 1527 12 discriminator 1 view .LVU662
 2169 0026 034A     		ldr	r2, .L177
 2170 0028 1468     		ldr	r4, [r2]
 2171              	.LVL154:
1528:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2172              		.loc 1 1528 4 is_stmt 1 discriminator 1 view .LVU663
1528:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2173              		.loc 1 1528 13 is_stmt 0 discriminator 1 view .LVU664
 2174 002a E06A     		ldr	r0, [r4, #44]
 2175              	.LVL155:
1530:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2176              		.loc 1 1530 3 is_stmt 1 discriminator 1 view .LVU665
 2177              	.LBB323:
 227:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2178              		.loc 2 227 30 discriminator 1 view .LVU666
 2179              	.LBB322:
 2180              		.loc 2 229 2 discriminator 1 view .LVU667
 2181              		.syntax unified
 2182              	@ 229 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2183 002c 83F31188 			msr basepri, r3	
 2184              	@ 0 "" 2
 2185              	.LVL156:
 2186              		.loc 2 229 2 is_stmt 0 discriminator 1 view .LVU668
 2187              		.thumb
 2188              		.syntax unified
 2189              	.LBE322:
 2190              	.LBE323:
1532:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2191              		.loc 1 1532 3 is_stmt 1 discriminator 1 view .LVU669
1533:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2192              		.loc 1 1533 2 is_stmt 0 discriminator 1 view .LVU670
 2193 0030 10BD     		pop	{r4, pc}
 2194              	.LVL157:
 2195              	.L178:
1533:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2196              		.loc 1 1533 2 discriminator 1 view .LVU671
 2197 0032 00BF     		.align	2
 2198              	.L177:
 2199 0034 00000000 		.word	.LANCHOR1
 2200              		.cfi_endproc
 2201              	.LFE13:
 2203              		.section	.text.vTaskPrioritySet,"ax",%progbits
 2204              		.align	1
 2205              		.p2align 2,,3
 2206              		.global	vTaskPrioritySet
 2207              		.syntax unified
 2208              		.thumb
 2209              		.thumb_func
 2210              		.fpu fpv5-d16
 2212              	vTaskPrioritySet:
 2213              	.LVL158:
 2214              	.LFB14:
1541:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 146


 2215              		.loc 1 1541 2 is_stmt 1 view -0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 0, uses_anonymous_args = 0
1542:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 2219              		.loc 1 1542 2 view .LVU673
1543:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2220              		.loc 1 1543 2 view .LVU674
1544:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2221              		.loc 1 1544 2 view .LVU675
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2222              		.loc 1 1546 3 view .LVU676
 2223 0000 3729     		cmp	r1, #55
 2224 0002 08D9     		bls	.L180
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2225              		.loc 1 1546 3 view .LVU677
 2226              	.LBB324:
 2227              	.LBI324:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2228              		.loc 2 191 30 view .LVU678
 2229              	.LBB325:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2230              		.loc 2 193 1 view .LVU679
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2231              		.loc 2 195 2 view .LVU680
 2232              		.syntax unified
 2233              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2234 0004 4FF05003 			mov r3, #80												
 2235 0008 83F31188 		msr basepri, r3											
 2236 000c BFF36F8F 		isb														
 2237 0010 BFF34F8F 		dsb														
 2238              	
 2239              	@ 0 "" 2
 2240              	.LVL159:
 2241              		.thumb
 2242              		.syntax unified
 2243              	.L181:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2244              		.loc 2 195 2 is_stmt 0 view .LVU681
 2245              	.LBE325:
 2246              	.LBE324:
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2247              		.loc 1 1546 3 is_stmt 1 discriminator 1 view .LVU682
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2248              		.loc 1 1546 3 discriminator 1 view .LVU683
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2249              		.loc 1 1546 3 discriminator 1 view .LVU684
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2250              		.loc 1 1546 3 discriminator 1 view .LVU685
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2251              		.loc 1 1546 3 discriminator 1 view .LVU686
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2252              		.loc 1 1546 3 discriminator 1 view .LVU687
 2253 0014 FEE7     		b	.L181
 2254              	.L180:
1546:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2255              		.loc 1 1546 59 view .LVU688
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 147


1549:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2256              		.loc 1 1549 3 view .LVU689
1541:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2257              		.loc 1 1541 2 is_stmt 0 view .LVU690
 2258 0016 70B5     		push	{r4, r5, r6, lr}
 2259              	.LCFI29:
 2260              		.cfi_def_cfa_offset 16
 2261              		.cfi_offset 4, -16
 2262              		.cfi_offset 5, -12
 2263              		.cfi_offset 6, -8
 2264              		.cfi_offset 14, -4
 2265 0018 0446     		mov	r4, r0
 2266 001a 82B0     		sub	sp, sp, #8
 2267              	.LCFI30:
 2268              		.cfi_def_cfa_offset 24
 2269 001c 0D46     		mov	r5, r1
 2270              	.LVL160:
1555:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2271              		.loc 1 1555 28 is_stmt 1 view .LVU691
1558:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2272              		.loc 1 1558 3 view .LVU692
 2273 001e FFF7FEFF 		bl	vPortEnterCritical
 2274              	.LVL161:
1562:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2275              		.loc 1 1562 4 view .LVU693
1562:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2276              		.loc 1 1562 12 is_stmt 0 view .LVU694
 2277 0022 54B3     		cbz	r4, .L198
 2278              	.LVL162:
 2279              	.L182:
1564:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2280              		.loc 1 1564 50 is_stmt 1 discriminator 4 view .LVU695
1568:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 2281              		.loc 1 1568 5 discriminator 4 view .LVU696
1568:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 2282              		.loc 1 1568 27 is_stmt 0 discriminator 4 view .LVU697
 2283 0024 E26C     		ldr	r2, [r4, #76]
 2284              	.LVL163:
1576:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2285              		.loc 1 1576 4 is_stmt 1 discriminator 4 view .LVU698
1576:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2286              		.loc 1 1576 6 is_stmt 0 discriminator 4 view .LVU699
 2287 0026 9542     		cmp	r5, r2
 2288 0028 22D0     		beq	.L184
1580:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2289              		.loc 1 1580 5 is_stmt 1 view .LVU700
1582:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2290              		.loc 1 1582 16 is_stmt 0 view .LVU701
 2291 002a 254B     		ldr	r3, .L201
1580:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2292              		.loc 1 1580 7 view .LVU702
 2293 002c 28D8     		bhi	.L199
1603:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2294              		.loc 1 1603 10 is_stmt 1 view .LVU703
1603:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2295              		.loc 1 1603 20 is_stmt 0 view .LVU704
 2296 002e 1E68     		ldr	r6, [r3]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 148


1603:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2297              		.loc 1 1603 12 view .LVU705
 2298 0030 361B     		subs	r6, r6, r4
 2299 0032 B6FA86F6 		clz	r6, r6
 2300 0036 7609     		lsrs	r6, r6, #5
 2301              	.L186:
 2302              	.LVL164:
1615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2303              		.loc 1 1615 5 is_stmt 1 view .LVU706
1620:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2304              		.loc 1 1620 5 view .LVU707
1620:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 1620 27 is_stmt 0 view .LVU708
 2306 0038 E36A     		ldr	r3, [r4, #44]
 2307              	.LVL165:
1626:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2308              		.loc 1 1626 6 is_stmt 1 view .LVU709
1636:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2309              		.loc 1 1636 28 is_stmt 0 view .LVU710
 2310 003a E564     		str	r5, [r4, #76]
1626:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2311              		.loc 1 1626 8 view .LVU711
 2312 003c 9A42     		cmp	r2, r3
1628:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2313              		.loc 1 1628 7 is_stmt 1 view .LVU712
1646:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2314              		.loc 1 1646 7 is_stmt 0 view .LVU713
 2315 003e A269     		ldr	r2, [r4, #24]
 2316              	.LVL166:
1628:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2317              		.loc 1 1628 25 view .LVU714
 2318 0040 08BF     		it	eq
 2319 0042 E562     		streq	r5, [r4, #44]
1632:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2320              		.loc 1 1632 31 is_stmt 1 view .LVU715
1636:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2321              		.loc 1 1636 6 view .LVU716
1646:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2322              		.loc 1 1646 5 view .LVU717
1646:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2323              		.loc 1 1646 7 is_stmt 0 view .LVU718
 2324 0044 002A     		cmp	r2, #0
 2325 0046 02DB     		blt	.L188
1648:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2326              		.loc 1 1648 6 is_stmt 1 view .LVU719
 2327 0048 C5F13805 		rsb	r5, r5, #56
 2328              	.LVL167:
1648:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2329              		.loc 1 1648 6 is_stmt 0 view .LVU720
 2330 004c A561     		str	r5, [r4, #24]
 2331              	.L188:
1652:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2332              		.loc 1 1652 30 is_stmt 1 view .LVU721
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2333              		.loc 1 1659 5 view .LVU722
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2334              		.loc 1 1659 9 is_stmt 0 view .LVU723
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 149


 2335 004e 03EB8303 		add	r3, r3, r3, lsl #2
 2336              	.LVL168:
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2337              		.loc 1 1659 9 view .LVU724
 2338 0052 1C4D     		ldr	r5, .L201+4
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2339              		.loc 1 1659 7 view .LVU725
 2340 0054 6269     		ldr	r2, [r4, #20]
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2341              		.loc 1 1659 9 view .LVU726
 2342 0056 05EB8303 		add	r3, r5, r3, lsl #2
1659:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2343              		.loc 1 1659 7 view .LVU727
 2344 005a 9A42     		cmp	r2, r3
 2345 005c 1AD0     		beq	.L200
 2346              	.LVL169:
 2347              	.L189:
1679:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2348              		.loc 1 1679 30 is_stmt 1 view .LVU728
1682:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2349              		.loc 1 1682 5 view .LVU729
1682:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2350              		.loc 1 1682 7 is_stmt 0 view .LVU730
 2351 005e 3EB1     		cbz	r6, .L184
1684:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2352              		.loc 1 1684 6 is_stmt 1 view .LVU731
 2353 0060 194B     		ldr	r3, .L201+8
 2354 0062 4FF08052 		mov	r2, #268435456
 2355 0066 1A60     		str	r2, [r3]
1684:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2356              		.loc 1 1684 6 view .LVU732
 2357              		.syntax unified
 2358              	@ 1684 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 2359 0068 BFF34F8F 		dsb
 2360              	@ 0 "" 2
1684:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2361              		.loc 1 1684 6 view .LVU733
 2362              	@ 1684 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 2363 006c BFF36F8F 		isb
 2364              	@ 0 "" 2
1684:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2365              		.loc 1 1684 37 view .LVU734
 2366              	.LVL170:
 2367              		.thumb
 2368              		.syntax unified
 2369              	.L184:
1688:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2370              		.loc 1 1688 30 view .LVU735
1693:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 2371              		.loc 1 1693 5 view .LVU736
1696:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2372              		.loc 1 1696 3 view .LVU737
1697:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2373              		.loc 1 1697 2 is_stmt 0 view .LVU738
 2374 0070 02B0     		add	sp, sp, #8
 2375              	.LCFI31:
 2376              		.cfi_remember_state
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 150


 2377              		.cfi_def_cfa_offset 16
 2378              		@ sp needed
 2379 0072 BDE87040 		pop	{r4, r5, r6, lr}
 2380              	.LCFI32:
 2381              		.cfi_restore 14
 2382              		.cfi_restore 6
 2383              		.cfi_restore 5
 2384              		.cfi_restore 4
 2385              		.cfi_def_cfa_offset 0
 2386              	.LVL171:
1696:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2387              		.loc 1 1696 3 view .LVU739
 2388 0076 FFF7FEBF 		b	vPortExitCritical
 2389              	.LVL172:
 2390              	.L198:
 2391              	.LCFI33:
 2392              		.cfi_restore_state
1562:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2393              		.loc 1 1562 12 discriminator 1 view .LVU740
 2394 007a 114B     		ldr	r3, .L201
 2395 007c 1C68     		ldr	r4, [r3]
 2396              	.LVL173:
1562:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2397              		.loc 1 1562 12 discriminator 1 view .LVU741
 2398 007e D1E7     		b	.L182
 2399              	.LVL174:
 2400              	.L199:
1582:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2401              		.loc 1 1582 6 is_stmt 1 view .LVU742
1582:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2402              		.loc 1 1582 16 is_stmt 0 view .LVU743
 2403 0080 1968     		ldr	r1, [r3]
1582:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2404              		.loc 1 1582 8 view .LVU744
 2405 0082 A142     		cmp	r1, r4
 2406 0084 19D0     		beq	.L192
1587:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 2407              		.loc 1 1587 7 is_stmt 1 view .LVU745
1587:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 2408              		.loc 1 1587 40 is_stmt 0 view .LVU746
 2409 0086 1B68     		ldr	r3, [r3]
1587:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 2410              		.loc 1 1587 9 view .LVU747
 2411 0088 DE6A     		ldr	r6, [r3, #44]
 2412 008a AE42     		cmp	r6, r5
 2413 008c 8CBF     		ite	hi
 2414 008e 0026     		movhi	r6, #0
 2415 0090 0126     		movls	r6, #1
 2416 0092 D1E7     		b	.L186
 2417              	.LVL175:
 2418              	.L200:
1664:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2419              		.loc 1 1664 6 is_stmt 1 view .LVU748
1664:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2420              		.loc 1 1664 10 is_stmt 0 view .LVU749
 2421 0094 211D     		adds	r1, r4, #4
 2422 0096 0846     		mov	r0, r1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 151


 2423 0098 0191     		str	r1, [sp, #4]
 2424 009a FFF7FEFF 		bl	uxListRemove
 2425              	.LVL176:
1673:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2426              		.loc 1 1673 31 is_stmt 1 view .LVU750
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2427              		.loc 1 1675 6 view .LVU751
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2428              		.loc 1 1675 6 view .LVU752
 2429 009e 0B4B     		ldr	r3, .L201+12
 2430 00a0 E06A     		ldr	r0, [r4, #44]
 2431 00a2 1A68     		ldr	r2, [r3]
 2432 00a4 0199     		ldr	r1, [sp, #4]
 2433 00a6 9042     		cmp	r0, r2
 2434 00a8 00D9     		bls	.L190
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2435              		.loc 1 1675 6 discriminator 1 view .LVU753
 2436 00aa 1860     		str	r0, [r3]
 2437              	.L190:
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2438              		.loc 1 1675 6 discriminator 3 view .LVU754
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2439              		.loc 1 1675 6 discriminator 3 view .LVU755
 2440 00ac 00EB8000 		add	r0, r0, r0, lsl #2
 2441 00b0 05EB8000 		add	r0, r5, r0, lsl #2
 2442 00b4 FFF7FEFF 		bl	vListInsertEnd
 2443              	.LVL177:
1675:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2444              		.loc 1 1675 36 discriminator 3 view .LVU756
 2445 00b8 D1E7     		b	.L189
 2446              	.LVL178:
 2447              	.L192:
1544:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2448              		.loc 1 1544 13 is_stmt 0 view .LVU757
 2449 00ba 0026     		movs	r6, #0
 2450 00bc BCE7     		b	.L186
 2451              	.L202:
 2452 00be 00BF     		.align	2
 2453              	.L201:
 2454 00c0 00000000 		.word	.LANCHOR1
 2455 00c4 00000000 		.word	.LANCHOR2
 2456 00c8 04ED00E0 		.word	-536810236
 2457 00cc 00000000 		.word	.LANCHOR12
 2458              		.cfi_endproc
 2459              	.LFE14:
 2461              		.section	.text.vTaskResume,"ax",%progbits
 2462              		.align	1
 2463              		.p2align 2,,3
 2464              		.global	vTaskResume
 2465              		.syntax unified
 2466              		.thumb
 2467              		.thumb_func
 2468              		.fpu fpv5-d16
 2470              	vTaskResume:
 2471              	.LVL179:
 2472              	.LFB17:
1852:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 152


 2473              		.loc 1 1852 2 is_stmt 1 view -0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 8
 2476              		@ frame_needed = 0, uses_anonymous_args = 0
1853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2477              		.loc 1 1853 2 view .LVU759
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2478              		.loc 1 1856 3 view .LVU760
 2479 0000 98B1     		cbz	r0, .L213
1852:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2480              		.loc 1 1852 2 is_stmt 0 discriminator 2 view .LVU761
 2481 0002 30B5     		push	{r4, r5, lr}
 2482              	.LCFI34:
 2483              		.cfi_def_cfa_offset 12
 2484              		.cfi_offset 4, -12
 2485              		.cfi_offset 5, -8
 2486              		.cfi_offset 14, -4
1860:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2487              		.loc 1 1860 15 discriminator 2 view .LVU762
 2488 0004 1E4D     		ldr	r5, .L215
1852:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2489              		.loc 1 1852 2 discriminator 2 view .LVU763
 2490 0006 83B0     		sub	sp, sp, #12
 2491              	.LCFI35:
 2492              		.cfi_def_cfa_offset 24
 2493 0008 0446     		mov	r4, r0
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2494              		.loc 1 1856 32 is_stmt 1 discriminator 2 view .LVU764
1860:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2495              		.loc 1 1860 3 discriminator 2 view .LVU765
1860:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2496              		.loc 1 1860 15 is_stmt 0 discriminator 2 view .LVU766
 2497 000a 2B68     		ldr	r3, [r5]
1860:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2498              		.loc 1 1860 5 discriminator 2 view .LVU767
 2499 000c 8342     		cmp	r3, r0
 2500 000e 0AD0     		beq	.L203
1862:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2501              		.loc 1 1862 4 is_stmt 1 view .LVU768
 2502 0010 FFF7FEFF 		bl	vPortEnterCritical
 2503              	.LVL180:
1864:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2504              		.loc 1 1864 5 view .LVU769
1864:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2505              		.loc 1 1864 9 is_stmt 0 view .LVU770
 2506 0014 2046     		mov	r0, r4
 2507 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2508              	.LVL181:
1864:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2509              		.loc 1 1864 7 view .LVU771
 2510 001a 78B9     		cbnz	r0, .L214
 2511              	.L208:
1888:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2512              		.loc 1 1888 30 is_stmt 1 view .LVU772
1891:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2513              		.loc 1 1891 4 view .LVU773
1897:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 153


 2514              		.loc 1 1897 2 is_stmt 0 view .LVU774
 2515 001c 03B0     		add	sp, sp, #12
 2516              	.LCFI36:
 2517              		.cfi_remember_state
 2518              		.cfi_def_cfa_offset 12
 2519              		@ sp needed
 2520 001e BDE83040 		pop	{r4, r5, lr}
 2521              	.LCFI37:
 2522              		.cfi_restore 14
 2523              		.cfi_restore 5
 2524              		.cfi_restore 4
 2525              		.cfi_def_cfa_offset 0
 2526              	.LVL182:
1891:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2527              		.loc 1 1891 4 view .LVU775
 2528 0022 FFF7FEBF 		b	vPortExitCritical
 2529              	.LVL183:
 2530              	.L203:
 2531              	.LCFI38:
 2532              		.cfi_restore_state
1897:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2533              		.loc 1 1897 2 view .LVU776
 2534 0026 03B0     		add	sp, sp, #12
 2535              	.LCFI39:
 2536              		.cfi_def_cfa_offset 12
 2537              		@ sp needed
 2538 0028 30BD     		pop	{r4, r5, pc}
 2539              	.L213:
 2540              	.LCFI40:
 2541              		.cfi_def_cfa_offset 0
 2542              		.cfi_restore 4
 2543              		.cfi_restore 5
 2544              		.cfi_restore 14
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2545              		.loc 1 1856 3 is_stmt 1 view .LVU777
 2546              	.LBB326:
 2547              	.LBI326:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2548              		.loc 2 191 30 view .LVU778
 2549              	.LBB327:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2550              		.loc 2 193 1 view .LVU779
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2551              		.loc 2 195 2 view .LVU780
 2552              		.syntax unified
 2553              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2554 002a 4FF05003 			mov r3, #80												
 2555 002e 83F31188 		msr basepri, r3											
 2556 0032 BFF36F8F 		isb														
 2557 0036 BFF34F8F 		dsb														
 2558              	
 2559              	@ 0 "" 2
 2560              	.LVL184:
 2561              		.thumb
 2562              		.syntax unified
 2563              	.L205:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 154


 2564              		.loc 2 195 2 is_stmt 0 view .LVU781
 2565              	.LBE327:
 2566              	.LBE326:
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2567              		.loc 1 1856 3 is_stmt 1 discriminator 1 view .LVU782
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2568              		.loc 1 1856 3 discriminator 1 view .LVU783
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2569              		.loc 1 1856 3 discriminator 1 view .LVU784
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2570              		.loc 1 1856 3 discriminator 1 view .LVU785
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2571              		.loc 1 1856 3 discriminator 1 view .LVU786
1856:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2572              		.loc 1 1856 3 discriminator 1 view .LVU787
 2573 003a FEE7     		b	.L205
 2574              	.LVL185:
 2575              	.L214:
 2576              	.LCFI41:
 2577              		.cfi_def_cfa_offset 24
 2578              		.cfi_offset 4, -12
 2579              		.cfi_offset 5, -8
 2580              		.cfi_offset 14, -4
1866:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2581              		.loc 1 1866 31 view .LVU788
1870:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2582              		.loc 1 1870 6 view .LVU789
1870:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2583              		.loc 1 1870 15 is_stmt 0 view .LVU790
 2584 003c 211D     		adds	r1, r4, #4
 2585 003e 0846     		mov	r0, r1
 2586 0040 0191     		str	r1, [sp, #4]
 2587 0042 FFF7FEFF 		bl	uxListRemove
 2588              	.LVL186:
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2589              		.loc 1 1871 6 is_stmt 1 view .LVU791
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2590              		.loc 1 1871 6 view .LVU792
 2591 0046 0F4B     		ldr	r3, .L215+4
 2592 0048 E06A     		ldr	r0, [r4, #44]
 2593 004a 1A68     		ldr	r2, [r3]
 2594 004c 0199     		ldr	r1, [sp, #4]
 2595 004e 9042     		cmp	r0, r2
 2596 0050 00D9     		bls	.L209
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2597              		.loc 1 1871 6 discriminator 1 view .LVU793
 2598 0052 1860     		str	r0, [r3]
 2599              	.L209:
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2600              		.loc 1 1871 6 discriminator 3 view .LVU794
1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2601              		.loc 1 1871 6 discriminator 3 view .LVU795
 2602 0054 0C4B     		ldr	r3, .L215+8
 2603 0056 00EB8000 		add	r0, r0, r0, lsl #2
 2604 005a 03EB8000 		add	r0, r3, r0, lsl #2
 2605 005e FFF7FEFF 		bl	vListInsertEnd
 2606              	.LVL187:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 155


1871:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2607              		.loc 1 1871 36 discriminator 3 view .LVU796
1874:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2608              		.loc 1 1874 6 discriminator 3 view .LVU797
1874:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2609              		.loc 1 1874 43 is_stmt 0 discriminator 3 view .LVU798
 2610 0062 2B68     		ldr	r3, [r5]
1874:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2611              		.loc 1 1874 8 discriminator 3 view .LVU799
 2612 0064 E26A     		ldr	r2, [r4, #44]
 2613 0066 DB6A     		ldr	r3, [r3, #44]
 2614 0068 9A42     		cmp	r2, r3
 2615 006a D7D3     		bcc	.L208
1879:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2616              		.loc 1 1879 7 is_stmt 1 view .LVU800
 2617 006c 074B     		ldr	r3, .L215+12
 2618 006e 4FF08052 		mov	r2, #268435456
 2619 0072 1A60     		str	r2, [r3]
1879:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2620              		.loc 1 1879 7 view .LVU801
 2621              		.syntax unified
 2622              	@ 1879 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 2623 0074 BFF34F8F 		dsb
 2624              	@ 0 "" 2
1879:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2625              		.loc 1 1879 7 view .LVU802
 2626              	@ 1879 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 2627 0078 BFF36F8F 		isb
 2628              	@ 0 "" 2
1879:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2629              		.loc 1 1879 38 view .LVU803
 2630              		.thumb
 2631              		.syntax unified
 2632 007c CEE7     		b	.L208
 2633              	.L216:
 2634 007e 00BF     		.align	2
 2635              	.L215:
 2636 0080 00000000 		.word	.LANCHOR1
 2637 0084 00000000 		.word	.LANCHOR12
 2638 0088 00000000 		.word	.LANCHOR2
 2639 008c 04ED00E0 		.word	-536810236
 2640              		.cfi_endproc
 2641              	.LFE17:
 2643              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2644              		.align	1
 2645              		.p2align 2,,3
 2646              		.global	xTaskResumeFromISR
 2647              		.syntax unified
 2648              		.thumb
 2649              		.thumb_func
 2650              		.fpu fpv5-d16
 2652              	xTaskResumeFromISR:
 2653              	.LVL188:
 2654              	.LFB18:
1906:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2655              		.loc 1 1906 2 view -0
 2656              		.cfi_startproc
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 156


 2657              		@ args = 0, pretend = 0, frame = 8
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
1907:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2659              		.loc 1 1907 2 view .LVU805
1908:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 2660              		.loc 1 1908 2 view .LVU806
1909:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2661              		.loc 1 1909 2 view .LVU807
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2662              		.loc 1 1911 3 view .LVU808
 2663 0000 0028     		cmp	r0, #0
 2664 0002 36D0     		beq	.L228
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2665              		.loc 1 1911 32 discriminator 2 view .LVU809
1929:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2666              		.loc 1 1929 3 discriminator 2 view .LVU810
1906:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2667              		.loc 1 1906 2 is_stmt 0 discriminator 2 view .LVU811
 2668 0004 70B5     		push	{r4, r5, r6, lr}
 2669              	.LCFI42:
 2670              		.cfi_def_cfa_offset 16
 2671              		.cfi_offset 4, -16
 2672              		.cfi_offset 5, -12
 2673              		.cfi_offset 6, -8
 2674              		.cfi_offset 14, -4
 2675 0006 82B0     		sub	sp, sp, #8
 2676              	.LCFI43:
 2677              		.cfi_def_cfa_offset 24
 2678 0008 0546     		mov	r5, r0
1929:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2679              		.loc 1 1929 3 discriminator 2 view .LVU812
 2680 000a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2681              	.LVL189:
1931:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2682              		.loc 1 1931 3 is_stmt 1 discriminator 2 view .LVU813
 2683              	.LBB328:
 2684              	.LBI328:
 207:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2685              		.loc 2 207 34 discriminator 2 view .LVU814
 2686              	.LBB329:
 209:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2687              		.loc 2 209 1 discriminator 2 view .LVU815
 211:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2688              		.loc 2 211 2 discriminator 2 view .LVU816
 2689              		.syntax unified
 2690              	@ 211 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2691 000e EFF31186 			mrs r6, basepri											
 2692 0012 4FF05003 		mov r3, #80												
 2693 0016 83F31188 		msr basepri, r3											
 2694 001a BFF36F8F 		isb														
 2695 001e BFF34F8F 		dsb														
 2696              	
 2697              	@ 0 "" 2
 2698              	.LVL190:
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2699              		.loc 2 223 2 discriminator 2 view .LVU817
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 157


 2700              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU818
 2701              		.thumb
 2702              		.syntax unified
 2703              	.LBE329:
 2704              	.LBE328:
1933:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2705              		.loc 1 1933 4 is_stmt 1 discriminator 2 view .LVU819
1933:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2706              		.loc 1 1933 8 is_stmt 0 discriminator 2 view .LVU820
 2707 0022 2846     		mov	r0, r5
 2708 0024 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2709              	.LVL191:
1933:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 2710              		.loc 1 1933 6 discriminator 2 view .LVU821
 2711 0028 0446     		mov	r4, r0
 2712 002a E8B1     		cbz	r0, .L220
1935:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2713              		.loc 1 1935 39 is_stmt 1 view .LVU822
1938:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2714              		.loc 1 1938 5 view .LVU823
1938:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2715              		.loc 1 1938 30 is_stmt 0 view .LVU824
 2716 002c 194B     		ldr	r3, .L229
 2717 002e 1B68     		ldr	r3, [r3]
1938:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 2718              		.loc 1 1938 7 view .LVU825
 2719 0030 43BB     		cbnz	r3, .L221
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2720              		.loc 1 1942 6 is_stmt 1 view .LVU826
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2721              		.loc 1 1942 43 is_stmt 0 view .LVU827
 2722 0032 194B     		ldr	r3, .L229+4
1951:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2723              		.loc 1 1951 15 view .LVU828
 2724 0034 291D     		adds	r1, r5, #4
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2725              		.loc 1 1942 8 view .LVU829
 2726 0036 EC6A     		ldr	r4, [r5, #44]
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2727              		.loc 1 1942 43 view .LVU830
 2728 0038 1B68     		ldr	r3, [r3]
1951:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2729              		.loc 1 1951 15 view .LVU831
 2730 003a 0846     		mov	r0, r1
 2731 003c 0191     		str	r1, [sp, #4]
1942:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 2732              		.loc 1 1942 8 view .LVU832
 2733 003e DB6A     		ldr	r3, [r3, #44]
 2734 0040 9C42     		cmp	r4, r3
 2735 0042 34BF     		ite	cc
 2736 0044 0024     		movcc	r4, #0
 2737 0046 0124     		movcs	r4, #1
 2738              	.LVL192:
1948:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 2739              		.loc 1 1948 31 is_stmt 1 view .LVU833
1951:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2740              		.loc 1 1951 6 view .LVU834
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 158


1951:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2741              		.loc 1 1951 15 is_stmt 0 view .LVU835
 2742 0048 FFF7FEFF 		bl	uxListRemove
 2743              	.LVL193:
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2744              		.loc 1 1952 6 is_stmt 1 view .LVU836
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2745              		.loc 1 1952 6 view .LVU837
 2746 004c 134B     		ldr	r3, .L229+8
 2747 004e E86A     		ldr	r0, [r5, #44]
 2748 0050 1A68     		ldr	r2, [r3]
 2749 0052 0199     		ldr	r1, [sp, #4]
 2750 0054 9042     		cmp	r0, r2
 2751 0056 00D9     		bls	.L222
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2752              		.loc 1 1952 6 discriminator 1 view .LVU838
 2753 0058 1860     		str	r0, [r3]
 2754              	.L222:
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2755              		.loc 1 1952 6 discriminator 3 view .LVU839
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2756              		.loc 1 1952 6 discriminator 3 view .LVU840
 2757 005a 00EB8000 		add	r0, r0, r0, lsl #2
 2758 005e 104B     		ldr	r3, .L229+12
 2759 0060 03EB8000 		add	r0, r3, r0, lsl #2
 2760 0064 FFF7FEFF 		bl	vListInsertEnd
 2761              	.LVL194:
1952:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2762              		.loc 1 1952 36 discriminator 3 view .LVU841
 2763              	.L220:
1964:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 2764              		.loc 1 1964 29 view .LVU842
1967:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2765              		.loc 1 1967 3 view .LVU843
 2766              	.LBB330:
 2767              	.LBI330:
 227:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2768              		.loc 2 227 30 view .LVU844
 2769              	.LBB331:
 2770              		.loc 2 229 2 view .LVU845
 2771              		.syntax unified
 2772              	@ 229 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2773 0068 86F31188 			msr basepri, r6	
 2774              	@ 0 "" 2
 2775              	.LVL195:
 2776              		.loc 2 229 2 is_stmt 0 view .LVU846
 2777              		.thumb
 2778              		.syntax unified
 2779              	.LBE331:
 2780              	.LBE330:
1969:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2781              		.loc 1 1969 3 is_stmt 1 view .LVU847
1970:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2782              		.loc 1 1970 2 is_stmt 0 view .LVU848
 2783 006c 2046     		mov	r0, r4
 2784 006e 02B0     		add	sp, sp, #8
 2785              	.LCFI44:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 159


 2786              		.cfi_def_cfa_offset 16
 2787              		@ sp needed
 2788 0070 70BD     		pop	{r4, r5, r6, pc}
 2789              	.LVL196:
 2790              	.L228:
 2791              	.LCFI45:
 2792              		.cfi_def_cfa_offset 0
 2793              		.cfi_restore 4
 2794              		.cfi_restore 5
 2795              		.cfi_restore 6
 2796              		.cfi_restore 14
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2797              		.loc 1 1911 3 is_stmt 1 view .LVU849
 2798              	.LBB332:
 2799              	.LBI332:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2800              		.loc 2 191 30 view .LVU850
 2801              	.LBB333:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2802              		.loc 2 193 1 view .LVU851
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2803              		.loc 2 195 2 view .LVU852
 2804              		.syntax unified
 2805              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2806 0072 4FF05003 			mov r3, #80												
 2807 0076 83F31188 		msr basepri, r3											
 2808 007a BFF36F8F 		isb														
 2809 007e BFF34F8F 		dsb														
 2810              	
 2811              	@ 0 "" 2
 2812              	.LVL197:
 2813              		.thumb
 2814              		.syntax unified
 2815              	.L219:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2816              		.loc 2 195 2 is_stmt 0 view .LVU853
 2817              	.LBE333:
 2818              	.LBE332:
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2819              		.loc 1 1911 3 is_stmt 1 discriminator 1 view .LVU854
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2820              		.loc 1 1911 3 discriminator 1 view .LVU855
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2821              		.loc 1 1911 3 discriminator 1 view .LVU856
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2822              		.loc 1 1911 3 discriminator 1 view .LVU857
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2823              		.loc 1 1911 3 discriminator 1 view .LVU858
1911:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2824              		.loc 1 1911 3 discriminator 1 view .LVU859
 2825 0082 FEE7     		b	.L219
 2826              	.LVL198:
 2827              	.L221:
 2828              	.LCFI46:
 2829              		.cfi_def_cfa_offset 24
 2830              		.cfi_offset 4, -16
 2831              		.cfi_offset 5, -12
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 160


 2832              		.cfi_offset 6, -8
 2833              		.cfi_offset 14, -4
1959:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2834              		.loc 1 1959 6 view .LVU860
 2835 0084 05F11801 		add	r1, r5, #24
 2836 0088 0648     		ldr	r0, .L229+16
1907:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2837              		.loc 1 1907 13 is_stmt 0 view .LVU861
 2838 008a 0024     		movs	r4, #0
1959:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 2839              		.loc 1 1959 6 view .LVU862
 2840 008c FFF7FEFF 		bl	vListInsertEnd
 2841              	.LVL199:
 2842 0090 EAE7     		b	.L220
 2843              	.L230:
 2844 0092 00BF     		.align	2
 2845              	.L229:
 2846 0094 00000000 		.word	.LANCHOR18
 2847 0098 00000000 		.word	.LANCHOR1
 2848 009c 00000000 		.word	.LANCHOR12
 2849 00a0 00000000 		.word	.LANCHOR2
 2850 00a4 00000000 		.word	.LANCHOR5
 2851              		.cfi_endproc
 2852              	.LFE18:
 2854              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2855              		.align	2
 2856              	.LC0:
 2857 0000 49444C45 		.ascii	"IDLE\000"
 2857      00
 2858              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2859              		.align	1
 2860              		.p2align 2,,3
 2861              		.global	vTaskStartScheduler
 2862              		.syntax unified
 2863              		.thumb
 2864              		.thumb_func
 2865              		.fpu fpv5-d16
 2867              	vTaskStartScheduler:
 2868              	.LFB19:
1976:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2869              		.loc 1 1976 1 is_stmt 1 view -0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 16
 2872              		@ frame_needed = 0, uses_anonymous_args = 0
1977:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2873              		.loc 1 1977 1 view .LVU864
 2874              	.LBB334:
1982:.//Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2875              		.loc 1 1982 3 view .LVU865
 2876              	.LBE334:
1976:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2877              		.loc 1 1976 1 is_stmt 0 view .LVU866
 2878 0000 30B5     		push	{r4, r5, lr}
 2879              	.LCFI47:
 2880              		.cfi_def_cfa_offset 12
 2881              		.cfi_offset 4, -12
 2882              		.cfi_offset 5, -8
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 161


 2883              		.cfi_offset 14, -4
 2884 0002 89B0     		sub	sp, sp, #36
 2885              	.LCFI48:
 2886              		.cfi_def_cfa_offset 48
 2887              	.LBB335:
1982:.//Libraries/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2888              		.loc 1 1982 17 view .LVU867
 2889 0004 0024     		movs	r4, #0
1988:.//Libraries/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2890              		.loc 1 1988 3 view .LVU868
 2891 0006 07AA     		add	r2, sp, #28
 2892 0008 06A9     		add	r1, sp, #24
 2893 000a 05A8     		add	r0, sp, #20
1983:.//Libraries/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2894              		.loc 1 1983 16 view .LVU869
 2895 000c CDE90544 		strd	r4, r4, [sp, #20]
1984:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2896              		.loc 1 1984 3 is_stmt 1 view .LVU870
1988:.//Libraries/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2897              		.loc 1 1988 3 view .LVU871
 2898 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2899              	.LVL200:
1989:.//Libraries/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2900              		.loc 1 1989 3 view .LVU872
1989:.//Libraries/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2901              		.loc 1 1989 21 is_stmt 0 view .LVU873
 2902 0014 0599     		ldr	r1, [sp, #20]
 2903 0016 069A     		ldr	r2, [sp, #24]
 2904 0018 2346     		mov	r3, r4
 2905 001a 1648     		ldr	r0, .L242
 2906 001c 0094     		str	r4, [sp]
 2907 001e CDE90121 		strd	r2, r1, [sp, #4]
 2908 0022 079A     		ldr	r2, [sp, #28]
 2909 0024 1449     		ldr	r1, .L242+4
 2910 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2911              	.LVL201:
1997:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2912              		.loc 1 1997 3 is_stmt 1 view .LVU874
1997:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2913              		.loc 1 1997 5 is_stmt 0 view .LVU875
 2914 002a A8B1     		cbz	r0, .L231
 2915              	.LVL202:
1997:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2916              		.loc 1 1997 5 view .LVU876
 2917              	.LBE335:
2020:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2918              		.loc 1 2020 3 is_stmt 1 view .LVU877
2022:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2919              		.loc 1 2022 4 view .LVU878
2022:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2920              		.loc 1 2022 14 is_stmt 0 view .LVU879
 2921 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 2922              	.LVL203:
2026:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 2923              		.loc 1 2026 28 is_stmt 1 view .LVU880
2031:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 2924              		.loc 1 2031 2 view .LVU881
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 162


2031:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 2925              		.loc 1 2031 4 is_stmt 0 view .LVU882
 2926 0030 0128     		cmp	r0, #1
 2927 0032 13D1     		bne	.L240
2047:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2928              		.loc 1 2047 3 is_stmt 1 view .LVU883
 2929              	.LBB336:
 2930              	.LBI336:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2931              		.loc 2 191 30 view .LVU884
 2932              	.LBB337:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2933              		.loc 2 193 1 view .LVU885
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2934              		.loc 2 195 2 view .LVU886
 2935              		.syntax unified
 2936              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2937 0034 4FF05003 			mov r3, #80												
 2938 0038 83F31188 		msr basepri, r3											
 2939 003c BFF36F8F 		isb														
 2940 0040 BFF34F8F 		dsb														
 2941              	
 2942              	@ 0 "" 2
 2943              		.thumb
 2944              		.syntax unified
 2945              	.LBE337:
 2946              	.LBE336:
2059:.//Libraries/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2947              		.loc 1 2059 3 view .LVU887
2059:.//Libraries/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2948              		.loc 1 2059 24 is_stmt 0 view .LVU888
 2949 0044 0D49     		ldr	r1, .L242+8
 2950 0046 4FF0FF35 		mov	r5, #-1
2060:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2951              		.loc 1 2060 21 view .LVU889
 2952 004a 0D4A     		ldr	r2, .L242+12
2061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2953              		.loc 1 2061 14 view .LVU890
 2954 004c 0D4B     		ldr	r3, .L242+16
2059:.//Libraries/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2955              		.loc 1 2059 24 view .LVU891
 2956 004e 0D60     		str	r5, [r1]
2060:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2957              		.loc 1 2060 3 is_stmt 1 view .LVU892
2060:.//Libraries/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2958              		.loc 1 2060 21 is_stmt 0 view .LVU893
 2959 0050 1060     		str	r0, [r2]
2061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2960              		.loc 1 2061 3 is_stmt 1 view .LVU894
2061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2961              		.loc 1 2061 14 is_stmt 0 view .LVU895
 2962 0052 1C60     		str	r4, [r3]
2069:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2963              		.loc 1 2069 43 is_stmt 1 view .LVU896
2071:.//Libraries/FreeRTOS/Source/tasks.c **** 
 2964              		.loc 1 2071 26 view .LVU897
2075:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 163


 2965              		.loc 1 2075 3 view .LVU898
2075:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 2966              		.loc 1 2075 7 is_stmt 0 view .LVU899
 2967 0054 FFF7FEFF 		bl	xPortStartScheduler
 2968              	.LVL204:
 2969              	.L231:
2096:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2970              		.loc 1 2096 1 view .LVU900
 2971 0058 09B0     		add	sp, sp, #36
 2972              	.LCFI49:
 2973              		.cfi_remember_state
 2974              		.cfi_def_cfa_offset 12
 2975              		@ sp needed
 2976 005a 30BD     		pop	{r4, r5, pc}
 2977              	.LVL205:
 2978              	.L240:
 2979              	.LCFI50:
 2980              		.cfi_restore_state
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2981              		.loc 1 2090 3 is_stmt 1 view .LVU901
 2982 005c 0130     		adds	r0, r0, #1
 2983              	.LVL206:
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2984              		.loc 1 2090 3 is_stmt 0 view .LVU902
 2985 005e FBD1     		bne	.L231
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 2986              		.loc 1 2090 3 is_stmt 1 view .LVU903
 2987              	.LBB338:
 2988              	.LBI338:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2989              		.loc 2 191 30 view .LVU904
 2990              	.LBB339:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2991              		.loc 2 193 1 view .LVU905
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2992              		.loc 2 195 2 view .LVU906
 2993              		.syntax unified
 2994              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2995 0060 4FF05003 			mov r3, #80												
 2996 0064 83F31188 		msr basepri, r3											
 2997 0068 BFF36F8F 		isb														
 2998 006c BFF34F8F 		dsb														
 2999              	
 3000              	@ 0 "" 2
 3001              	.LVL207:
 3002              		.thumb
 3003              		.syntax unified
 3004              	.L236:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3005              		.loc 2 195 2 is_stmt 0 view .LVU907
 3006              	.LBE339:
 3007              	.LBE338:
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3008              		.loc 1 2090 3 is_stmt 1 discriminator 2 view .LVU908
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3009              		.loc 1 2090 3 discriminator 2 view .LVU909
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 164


 3010              		.loc 1 2090 3 discriminator 2 view .LVU910
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3011              		.loc 1 2090 3 discriminator 2 view .LVU911
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3012              		.loc 1 2090 3 discriminator 2 view .LVU912
2090:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3013              		.loc 1 2090 3 discriminator 2 view .LVU913
 3014 0070 FEE7     		b	.L236
 3015              	.L243:
 3016 0072 00BF     		.align	2
 3017              	.L242:
 3018 0074 00000000 		.word	prvIdleTask
 3019 0078 00000000 		.word	.LC0
 3020 007c 00000000 		.word	.LANCHOR13
 3021 0080 00000000 		.word	.LANCHOR10
 3022 0084 00000000 		.word	.LANCHOR15
 3023              		.cfi_endproc
 3024              	.LFE19:
 3026              		.section	.text.vTaskEndScheduler,"ax",%progbits
 3027              		.align	1
 3028              		.p2align 2,,3
 3029              		.global	vTaskEndScheduler
 3030              		.syntax unified
 3031              		.thumb
 3032              		.thumb_func
 3033              		.fpu fpv5-d16
 3035              	vTaskEndScheduler:
 3036              	.LFB20:
2100:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 3037              		.loc 1 2100 1 view -0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 0
 3040              		@ frame_needed = 0, uses_anonymous_args = 0
 3041              		@ link register save eliminated.
2104:.//Libraries/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 3042              		.loc 1 2104 2 view .LVU915
 3043              	.LBB340:
 3044              	.LBI340:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3045              		.loc 2 191 30 view .LVU916
 3046              	.LBB341:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3047              		.loc 2 193 1 view .LVU917
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3048              		.loc 2 195 2 view .LVU918
 3049              		.syntax unified
 3050              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3051 0000 4FF05003 			mov r3, #80												
 3052 0004 83F31188 		msr basepri, r3											
 3053 0008 BFF36F8F 		isb														
 3054 000c BFF34F8F 		dsb														
 3055              	
 3056              	@ 0 "" 2
 3057              		.thumb
 3058              		.syntax unified
 3059              	.LBE341:
 3060              	.LBE340:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 165


2105:.//Libraries/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 3061              		.loc 1 2105 2 view .LVU919
2105:.//Libraries/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 3062              		.loc 1 2105 20 is_stmt 0 view .LVU920
 3063 0010 024B     		ldr	r3, .L245
 3064 0012 0022     		movs	r2, #0
 3065 0014 1A60     		str	r2, [r3]
2106:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3066              		.loc 1 2106 2 is_stmt 1 view .LVU921
 3067 0016 FFF7FEBF 		b	vPortEndScheduler
 3068              	.LVL208:
 3069              	.L246:
 3070 001a 00BF     		.align	2
 3071              	.L245:
 3072 001c 00000000 		.word	.LANCHOR10
 3073              		.cfi_endproc
 3074              	.LFE20:
 3076              		.section	.text.vTaskSuspendAll,"ax",%progbits
 3077              		.align	1
 3078              		.p2align 2,,3
 3079              		.global	vTaskSuspendAll
 3080              		.syntax unified
 3081              		.thumb
 3082              		.thumb_func
 3083              		.fpu fpv5-d16
 3085              	vTaskSuspendAll:
 3086              	.LFB21:
2111:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 3087              		.loc 1 2111 1 view -0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              		@ link register save eliminated.
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3092              		.loc 1 2119 24 view .LVU923
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3093              		.loc 1 2123 2 view .LVU924
 3094 0000 024A     		ldr	r2, .L248
 3095 0002 1368     		ldr	r3, [r2]
 3096 0004 0133     		adds	r3, r3, #1
 3097 0006 1360     		str	r3, [r2]
2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3098              		.loc 1 2127 2 view .LVU925
2128:.//Libraries/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3099              		.loc 1 2128 1 is_stmt 0 view .LVU926
 3100 0008 7047     		bx	lr
 3101              	.L249:
 3102 000a 00BF     		.align	2
 3103              	.L248:
 3104 000c 00000000 		.word	.LANCHOR18
 3105              		.cfi_endproc
 3106              	.LFE21:
 3108              		.section	.text.xTaskResumeAll,"ax",%progbits
 3109              		.align	1
 3110              		.p2align 2,,3
 3111              		.global	xTaskResumeAll
 3112              		.syntax unified
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 166


 3113              		.thumb
 3114              		.thumb_func
 3115              		.fpu fpv5-d16
 3117              	xTaskResumeAll:
 3118              	.LFB22:
2195:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 3119              		.loc 1 2195 1 is_stmt 1 view -0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 8
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
2196:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 3123              		.loc 1 2196 1 view .LVU928
 3124              	.LVL209:
2197:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3125              		.loc 1 2197 1 view .LVU929
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3126              		.loc 1 2201 2 view .LVU930
2195:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 3127              		.loc 1 2195 1 is_stmt 0 view .LVU931
 3128 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3129              	.LCFI51:
 3130              		.cfi_def_cfa_offset 36
 3131              		.cfi_offset 4, -36
 3132              		.cfi_offset 5, -32
 3133              		.cfi_offset 6, -28
 3134              		.cfi_offset 7, -24
 3135              		.cfi_offset 8, -20
 3136              		.cfi_offset 9, -16
 3137              		.cfi_offset 10, -12
 3138              		.cfi_offset 11, -8
 3139              		.cfi_offset 14, -4
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3140              		.loc 1 2201 2 view .LVU932
 3141 0004 404D     		ldr	r5, .L284
2195:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 3142              		.loc 1 2195 1 view .LVU933
 3143 0006 83B0     		sub	sp, sp, #12
 3144              	.LCFI52:
 3145              		.cfi_def_cfa_offset 48
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3146              		.loc 1 2201 2 view .LVU934
 3147 0008 2B68     		ldr	r3, [r5]
 3148 000a 43B9     		cbnz	r3, .L251
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3149              		.loc 1 2201 2 is_stmt 1 view .LVU935
 3150              	.LBB353:
 3151              	.LBI353:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3152              		.loc 2 191 30 view .LVU936
 3153              	.LBB354:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3154              		.loc 2 193 1 view .LVU937
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3155              		.loc 2 195 2 view .LVU938
 3156              		.syntax unified
 3157              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3158 000c 4FF05003 			mov r3, #80												
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 167


 3159 0010 83F31188 		msr basepri, r3											
 3160 0014 BFF36F8F 		isb														
 3161 0018 BFF34F8F 		dsb														
 3162              	
 3163              	@ 0 "" 2
 3164              	.LVL210:
 3165              		.thumb
 3166              		.syntax unified
 3167              	.L252:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3168              		.loc 2 195 2 is_stmt 0 view .LVU939
 3169              	.LBE354:
 3170              	.LBE353:
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3171              		.loc 1 2201 2 is_stmt 1 discriminator 1 view .LVU940
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3172              		.loc 1 2201 2 discriminator 1 view .LVU941
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3173              		.loc 1 2201 2 discriminator 1 view .LVU942
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3174              		.loc 1 2201 2 discriminator 1 view .LVU943
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3175              		.loc 1 2201 2 discriminator 1 view .LVU944
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3176              		.loc 1 2201 2 discriminator 1 view .LVU945
 3177 001c FEE7     		b	.L252
 3178              	.L251:
 3179              	.LBB355:
 3180              	.LBI355:
2194:.//Libraries/FreeRTOS/Source/tasks.c **** {
 3181              		.loc 1 2194 12 view .LVU946
 3182              	.LBB356:
2201:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3183              		.loc 1 2201 38 view .LVU947
2208:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3184              		.loc 1 2208 2 view .LVU948
 3185 001e FFF7FEFF 		bl	vPortEnterCritical
 3186              	.LVL211:
2210:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3187              		.loc 1 2210 3 view .LVU949
 3188 0022 2B68     		ldr	r3, [r5]
 3189 0024 013B     		subs	r3, r3, #1
 3190 0026 2B60     		str	r3, [r5]
2212:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3191              		.loc 1 2212 3 view .LVU950
2212:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3192              		.loc 1 2212 28 is_stmt 0 view .LVU951
 3193 0028 2B68     		ldr	r3, [r5]
2212:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3194              		.loc 1 2212 5 view .LVU952
 3195 002a 002B     		cmp	r3, #0
 3196 002c 3FD1     		bne	.L255
2214:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3197              		.loc 1 2214 4 is_stmt 1 view .LVU953
2214:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3198              		.loc 1 2214 31 is_stmt 0 view .LVU954
 3199 002e 374B     		ldr	r3, .L284+4
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 168


 3200 0030 1B68     		ldr	r3, [r3]
2214:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3201              		.loc 1 2214 6 view .LVU955
 3202 0032 002B     		cmp	r3, #0
 3203 0034 3BD0     		beq	.L255
 3204              	.LVL212:
2233:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3205              		.loc 1 2233 31 is_stmt 1 view .LVU956
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3206              		.loc 1 2218 10 view .LVU957
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3207              		.loc 1 2218 12 is_stmt 0 view .LVU958
 3208 0036 DFF8F0B0 		ldr	fp, .L284+32
 3209 003a DBF80030 		ldr	r3, [fp]
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3210              		.loc 1 2218 10 view .LVU959
 3211 003e 002B     		cmp	r3, #0
 3212 0040 3CD0     		beq	.L281
 3213 0042 334F     		ldr	r7, .L284+8
2229:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3214              		.loc 1 2229 21 view .LVU960
 3215 0044 4FF0010A 		mov	r10, #1
 3216 0048 DFF8E090 		ldr	r9, .L284+36
 3217 004c DFF8E080 		ldr	r8, .L284+40
 3218 0050 304E     		ldr	r6, .L284+12
 3219              	.LVL213:
 3220              	.L259:
2220:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3221              		.loc 1 2220 6 is_stmt 1 view .LVU961
2220:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3222              		.loc 1 2220 12 is_stmt 0 view .LVU962
 3223 0052 DBF80C30 		ldr	r3, [fp, #12]
 3224 0056 DC68     		ldr	r4, [r3, #12]
 3225              	.LVL214:
2221:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3226              		.loc 1 2221 6 is_stmt 1 view .LVU963
2222:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3227              		.loc 1 2222 15 is_stmt 0 view .LVU964
 3228 0058 211D     		adds	r1, r4, #4
2221:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3229              		.loc 1 2221 15 view .LVU965
 3230 005a 04F11800 		add	r0, r4, #24
2222:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3231              		.loc 1 2222 15 view .LVU966
 3232 005e 0191     		str	r1, [sp, #4]
2221:.//Libraries/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3233              		.loc 1 2221 15 view .LVU967
 3234 0060 FFF7FEFF 		bl	uxListRemove
 3235              	.LVL215:
2222:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3236              		.loc 1 2222 6 is_stmt 1 view .LVU968
2222:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3237              		.loc 1 2222 15 is_stmt 0 view .LVU969
 3238 0064 0199     		ldr	r1, [sp, #4]
 3239 0066 0846     		mov	r0, r1
 3240 0068 FFF7FEFF 		bl	uxListRemove
 3241              	.LVL216:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 169


2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3242              		.loc 1 2223 6 is_stmt 1 view .LVU970
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3243              		.loc 1 2223 6 view .LVU971
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3244              		.loc 1 2223 6 view .LVU972
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3245              		.loc 1 2223 6 view .LVU973
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3246              		.loc 1 2223 6 view .LVU974
 3247 006c E36A     		ldr	r3, [r4, #44]
 3248 006e 3A68     		ldr	r2, [r7]
 3249 0070 03EB8300 		add	r0, r3, r3, lsl #2
 3250 0074 0199     		ldr	r1, [sp, #4]
 3251 0076 9342     		cmp	r3, r2
 3252 0078 09EB8000 		add	r0, r9, r0, lsl #2
 3253 007c 00D9     		bls	.L257
 3254 007e 3B60     		str	r3, [r7]
 3255              	.L257:
 3256 0080 FFF7FEFF 		bl	vListInsertEnd
 3257              	.LVL217:
2223:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3258              		.loc 1 2223 36 view .LVU975
2227:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 3259              		.loc 1 2227 6 view .LVU976
2229:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3260              		.loc 1 2229 7 view .LVU977
2233:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3261              		.loc 1 2233 31 view .LVU978
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3262              		.loc 1 2218 10 view .LVU979
2227:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 3263              		.loc 1 2227 43 is_stmt 0 view .LVU980
 3264 0084 D8F80030 		ldr	r3, [r8]
2227:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 3265              		.loc 1 2227 8 view .LVU981
 3266 0088 E26A     		ldr	r2, [r4, #44]
 3267 008a DB6A     		ldr	r3, [r3, #44]
 3268 008c 9A42     		cmp	r2, r3
 3269 008e 01D3     		bcc	.L258
2229:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3270              		.loc 1 2229 21 view .LVU982
 3271 0090 C6F800A0 		str	r10, [r6]
 3272              	.L258:
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3273              		.loc 1 2218 12 view .LVU983
 3274 0094 DBF80030 		ldr	r3, [fp]
2218:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3275              		.loc 1 2218 10 view .LVU984
 3276 0098 002B     		cmp	r3, #0
 3277 009a DAD1     		bne	.L259
2237:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3278              		.loc 1 2237 5 is_stmt 1 view .LVU985
2245:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 3279              		.loc 1 2245 6 view .LVU986
 3280              	.LBB357:
 3281              	.LBI357:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 170


3943:.//Libraries/FreeRTOS/Source/tasks.c **** {
 3282              		.loc 1 3943 13 view .LVU987
 3283              	.LBB358:
3945:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3284              		.loc 1 3945 1 view .LVU988
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3285              		.loc 1 3947 2 view .LVU989
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3286              		.loc 1 3947 6 is_stmt 0 view .LVU990
 3287 009c 1E4B     		ldr	r3, .L284+16
 3288 009e 1B68     		ldr	r3, [r3]
 3289 00a0 1B68     		ldr	r3, [r3]
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3290              		.loc 1 3947 4 view .LVU991
 3291 00a2 03BB     		cbnz	r3, .L260
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3292              		.loc 1 3953 3 is_stmt 1 view .LVU992
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3293              		.loc 1 3953 24 is_stmt 0 view .LVU993
 3294 00a4 1D4B     		ldr	r3, .L284+20
 3295 00a6 4FF0FF32 		mov	r2, #-1
 3296 00aa 1A60     		str	r2, [r3]
 3297 00ac 07E0     		b	.L256
 3298              	.LVL218:
 3299              	.L255:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3300              		.loc 1 3953 24 view .LVU994
 3301              	.LBE358:
 3302              	.LBE357:
2197:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3303              		.loc 1 2197 12 view .LVU995
 3304 00ae 0024     		movs	r4, #0
 3305              	.L254:
 3306              	.LVL219:
2295:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3307              		.loc 1 2295 28 is_stmt 1 view .LVU996
2298:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3308              		.loc 1 2298 2 view .LVU997
 3309 00b0 FFF7FEFF 		bl	vPortExitCritical
 3310              	.LVL220:
2300:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3311              		.loc 1 2300 2 view .LVU998
2300:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3312              		.loc 1 2300 2 is_stmt 0 view .LVU999
 3313              	.LBE356:
 3314              	.LBE355:
2301:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3315              		.loc 1 2301 1 view .LVU1000
 3316 00b4 2046     		mov	r0, r4
 3317 00b6 03B0     		add	sp, sp, #12
 3318              	.LCFI53:
 3319              		.cfi_remember_state
 3320              		.cfi_def_cfa_offset 36
 3321              		@ sp needed
 3322 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3323              	.LVL221:
 3324              	.L281:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 171


 3325              	.LCFI54:
 3326              		.cfi_restore_state
2301:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3327              		.loc 1 2301 1 view .LVU1001
 3328 00bc 154E     		ldr	r6, .L284+12
 3329              	.LVL222:
 3330              	.L256:
 3331              	.LBB370:
 3332              	.LBB369:
 3333              	.LBB360:
2253:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3334              		.loc 1 2253 6 is_stmt 1 view .LVU1002
2253:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3335              		.loc 1 2253 17 is_stmt 0 view .LVU1003
 3336 00be 184F     		ldr	r7, .L284+24
 3337 00c0 3C68     		ldr	r4, [r7]
 3338              	.LVL223:
2255:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 3339              		.loc 1 2255 6 is_stmt 1 view .LVU1004
2255:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 3340              		.loc 1 2255 8 is_stmt 0 view .LVU1005
 3341 00c2 A4B1     		cbz	r4, .L261
2261:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 3342              		.loc 1 2261 23 view .LVU1006
 3343 00c4 4FF00108 		mov	r8, #1
 3344 00c8 06E0     		b	.L265
 3345              	.LVL224:
 3346              	.L283:
 3347              	.LBB361:
 3348              	.LBB362:
2261:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 3349              		.loc 1 2261 23 view .LVU1007
 3350 00ca FFF7FEFF 		bl	xTaskIncrementTick.part.0
 3351              	.LVL225:
 3352              	.LBE362:
 3353              	.LBE361:
2261:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 3354              		.loc 1 2261 9 is_stmt 1 view .LVU1008
 3355              	.LBB365:
 3356              	.LBB363:
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3357              		.loc 1 2875 2 view .LVU1009
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3358              		.loc 1 2875 2 is_stmt 0 view .LVU1010
 3359              	.LBE363:
 3360              	.LBE365:
2259:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 3361              		.loc 1 2259 10 view .LVU1011
 3362 00ce 08B1     		cbz	r0, .L264
2261:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 3363              		.loc 1 2261 23 view .LVU1012
 3364 00d0 C6F80080 		str	r8, [r6]
 3365              	.L264:
2265:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 3366              		.loc 1 2265 33 is_stmt 1 view .LVU1013
2267:.//Libraries/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3367              		.loc 1 2267 8 view .LVU1014
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 172


 3368              	.LVL226:
2268:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3369              		.loc 1 2268 14 view .LVU1015
2268:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3370              		.loc 1 2268 7 is_stmt 0 view .LVU1016
 3371 00d4 013C     		subs	r4, r4, #1
 3372              	.LVL227:
2268:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3373              		.loc 1 2268 7 view .LVU1017
 3374 00d6 09D0     		beq	.L282
 3375              	.L265:
2257:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 3376              		.loc 1 2257 7 is_stmt 1 view .LVU1018
2259:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 3377              		.loc 1 2259 8 view .LVU1019
 3378              	.LBB366:
 3379              	.LBI361:
2707:.//Libraries/FreeRTOS/Source/tasks.c **** {
 3380              		.loc 1 2707 12 view .LVU1020
 3381              	.LBB364:
2709:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
 3382              		.loc 1 2709 1 view .LVU1021
2710:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3383              		.loc 1 2710 1 view .LVU1022
2711:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3384              		.loc 1 2711 1 view .LVU1023
 3385              	.LVL228:
2716:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3386              		.loc 1 2716 40 view .LVU1024
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3387              		.loc 1 2717 2 view .LVU1025
2864:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3388              		.loc 1 2864 3 view .LVU1026
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3389              		.loc 1 2717 27 is_stmt 0 view .LVU1027
 3390 00d8 2B68     		ldr	r3, [r5]
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3391              		.loc 1 2717 4 view .LVU1028
 3392 00da 002B     		cmp	r3, #0
 3393 00dc F5D0     		beq	.L283
2864:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3394              		.loc 1 2864 3 view .LVU1029
 3395 00de 3B68     		ldr	r3, [r7]
 3396 00e0 0133     		adds	r3, r3, #1
 3397 00e2 3B60     		str	r3, [r7]
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3398              		.loc 1 2875 2 is_stmt 1 view .LVU1030
 3399              	.LVL229:
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3400              		.loc 1 2875 2 is_stmt 0 view .LVU1031
 3401 00e4 F6E7     		b	.L264
 3402              	.LVL230:
 3403              	.L260:
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3404              		.loc 1 2875 2 view .LVU1032
 3405              	.LBE364:
 3406              	.LBE366:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 173


 3407              	.LBE360:
 3408              	.LBB367:
 3409              	.LBB359:
 3410 00e6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime.part.0
 3411              	.LVL231:
 3412 00ea E8E7     		b	.L256
 3413              	.LVL232:
 3414              	.L282:
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3415              		.loc 1 2875 2 view .LVU1033
 3416              	.LBE359:
 3417              	.LBE367:
 3418              	.LBB368:
2270:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3419              		.loc 1 2270 7 is_stmt 1 view .LVU1034
2270:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3420              		.loc 1 2270 20 is_stmt 0 view .LVU1035
 3421 00ec 3C60     		str	r4, [r7]
 3422              	.L261:
2274:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3423              		.loc 1 2274 31 is_stmt 1 view .LVU1036
 3424              	.LBE368:
2278:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3425              		.loc 1 2278 5 view .LVU1037
2278:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3426              		.loc 1 2278 23 is_stmt 0 view .LVU1038
 3427 00ee 3368     		ldr	r3, [r6]
2278:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3428              		.loc 1 2278 7 view .LVU1039
 3429 00f0 002B     		cmp	r3, #0
 3430 00f2 DCD0     		beq	.L255
2282:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3431              		.loc 1 2282 7 is_stmt 1 view .LVU1040
 3432              	.LVL233:
2285:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 3433              		.loc 1 2285 6 view .LVU1041
 3434 00f4 0B4B     		ldr	r3, .L284+28
 3435 00f6 4FF08052 		mov	r2, #268435456
 3436 00fa 1A60     		str	r2, [r3]
2285:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 3437              		.loc 1 2285 6 view .LVU1042
 3438              		.syntax unified
 3439              	@ 2285 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3440 00fc BFF34F8F 		dsb
 3441              	@ 0 "" 2
2285:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 3442              		.loc 1 2285 6 view .LVU1043
 3443              	@ 2285 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3444 0100 BFF36F8F 		isb
 3445              	@ 0 "" 2
2285:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 3446              		.loc 1 2285 37 view .LVU1044
2282:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3447              		.loc 1 2282 23 is_stmt 0 view .LVU1045
 3448              		.thumb
 3449              		.syntax unified
 3450 0104 0124     		movs	r4, #1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 174


 3451              	.LVL234:
2282:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 3452              		.loc 1 2282 23 view .LVU1046
 3453 0106 D3E7     		b	.L254
 3454              	.L285:
 3455              		.align	2
 3456              	.L284:
 3457 0108 00000000 		.word	.LANCHOR18
 3458 010c 00000000 		.word	.LANCHOR0
 3459 0110 00000000 		.word	.LANCHOR12
 3460 0114 00000000 		.word	.LANCHOR17
 3461 0118 00000000 		.word	.LANCHOR8
 3462 011c 00000000 		.word	.LANCHOR13
 3463 0120 00000000 		.word	.LANCHOR19
 3464 0124 04ED00E0 		.word	-536810236
 3465 0128 00000000 		.word	.LANCHOR5
 3466 012c 00000000 		.word	.LANCHOR2
 3467 0130 00000000 		.word	.LANCHOR1
 3468              	.LBE369:
 3469              	.LBE370:
 3470              		.cfi_endproc
 3471              	.LFE22:
 3473              		.section	.text.vTaskDelayUntil,"ax",%progbits
 3474              		.align	1
 3475              		.p2align 2,,3
 3476              		.global	vTaskDelayUntil
 3477              		.syntax unified
 3478              		.thumb
 3479              		.thumb_func
 3480              		.fpu fpv5-d16
 3482              	vTaskDelayUntil:
 3483              	.LVL235:
 3484              	.LFB9:
1258:.//Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3485              		.loc 1 1258 2 is_stmt 1 view -0
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 0
 3488              		@ frame_needed = 0, uses_anonymous_args = 0
1259:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3489              		.loc 1 1259 2 view .LVU1048
1260:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3490              		.loc 1 1260 2 view .LVU1049
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3491              		.loc 1 1262 3 view .LVU1050
 3492 0000 68B3     		cbz	r0, .L307
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3493              		.loc 1 1262 37 discriminator 2 view .LVU1051
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3494              		.loc 1 1263 3 discriminator 2 view .LVU1052
 3495 0002 41B9     		cbnz	r1, .L289
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3496              		.loc 1 1263 3 view .LVU1053
 3497              	.LBB371:
 3498              	.LBI371:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3499              		.loc 2 191 30 view .LVU1054
 3500              	.LBB372:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 175


 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3501              		.loc 2 193 1 view .LVU1055
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3502              		.loc 2 195 2 view .LVU1056
 3503              		.syntax unified
 3504              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3505 0004 4FF05003 			mov r3, #80												
 3506 0008 83F31188 		msr basepri, r3											
 3507 000c BFF36F8F 		isb														
 3508 0010 BFF34F8F 		dsb														
 3509              	
 3510              	@ 0 "" 2
 3511              	.LVL236:
 3512              		.thumb
 3513              		.syntax unified
 3514              	.L290:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3515              		.loc 2 195 2 is_stmt 0 view .LVU1057
 3516              	.LBE372:
 3517              	.LBE371:
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3518              		.loc 1 1263 3 is_stmt 1 discriminator 2 view .LVU1058
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3519              		.loc 1 1263 3 discriminator 2 view .LVU1059
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3520              		.loc 1 1263 3 discriminator 2 view .LVU1060
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3521              		.loc 1 1263 3 discriminator 2 view .LVU1061
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3522              		.loc 1 1263 3 discriminator 2 view .LVU1062
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3523              		.loc 1 1263 3 discriminator 2 view .LVU1063
 3524 0014 FEE7     		b	.L290
 3525              	.L289:
1263:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3526              		.loc 1 1263 42 discriminator 2 view .LVU1064
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3527              		.loc 1 1264 3 discriminator 2 view .LVU1065
 3528 0016 1C4B     		ldr	r3, .L309
 3529 0018 1A68     		ldr	r2, [r3]
 3530 001a 4ABB     		cbnz	r2, .L308
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3531              		.loc 1 1264 44 view .LVU1066
1266:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3532              		.loc 1 1266 3 view .LVU1067
 3533              	.LBB373:
 3534              	.LBI373:
2110:.//Libraries/FreeRTOS/Source/tasks.c **** {
 3535              		.loc 1 2110 6 view .LVU1068
 3536              	.LBB374:
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3537              		.loc 1 2119 24 view .LVU1069
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3538              		.loc 1 2123 2 view .LVU1070
 3539 001c 1A68     		ldr	r2, [r3]
 3540 001e 0132     		adds	r2, r2, #1
 3541              	.LBE374:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 176


 3542              	.LBE373:
1258:.//Libraries/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3543              		.loc 1 1258 2 is_stmt 0 view .LVU1071
 3544 0020 10B5     		push	{r4, lr}
 3545              	.LCFI55:
 3546              		.cfi_def_cfa_offset 8
 3547              		.cfi_offset 4, -8
 3548              		.cfi_offset 14, -4
 3549              	.LBB376:
 3550              	.LBB375:
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3551              		.loc 1 2123 2 view .LVU1072
 3552 0022 1A60     		str	r2, [r3]
2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3553              		.loc 1 2127 2 is_stmt 1 view .LVU1073
 3554              	.LBE375:
 3555              	.LBE376:
 3556              	.LBB377:
1270:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3557              		.loc 1 1270 4 view .LVU1074
1270:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3558              		.loc 1 1270 21 is_stmt 0 view .LVU1075
 3559 0024 194B     		ldr	r3, .L309+4
1273:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3560              		.loc 1 1273 18 view .LVU1076
 3561 0026 0468     		ldr	r4, [r0]
1270:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3562              		.loc 1 1270 21 view .LVU1077
 3563 0028 1A68     		ldr	r2, [r3]
 3564              	.LVL237:
1273:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3565              		.loc 1 1273 4 is_stmt 1 view .LVU1078
 3566 002a 6318     		adds	r3, r4, r1
 3567 002c 2CBF     		ite	cs
 3568 002e 0121     		movcs	r1, #1
 3569              	.LVL238:
1273:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3570              		.loc 1 1273 4 is_stmt 0 view .LVU1079
 3571 0030 0021     		movcc	r1, #0
 3572              	.LVL239:
1275:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3573              		.loc 1 1275 4 is_stmt 1 view .LVU1080
1275:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3574              		.loc 1 1275 6 is_stmt 0 view .LVU1081
 3575 0032 9442     		cmp	r4, r2
1307:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3576              		.loc 1 1307 24 view .LVU1082
 3577 0034 0360     		str	r3, [r0]
1275:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3578              		.loc 1 1275 6 view .LVU1083
 3579 0036 24D9     		bls	.L295
1282:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3580              		.loc 1 1282 5 is_stmt 1 view .LVU1084
1282:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3581              		.loc 1 1282 7 is_stmt 0 view .LVU1085
 3582 0038 29B1     		cbz	r1, .L297
 3583              	.L306:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 177


1296:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3584              		.loc 1 1296 47 discriminator 1 view .LVU1086
 3585 003a 9A42     		cmp	r2, r3
 3586 003c 03D2     		bcs	.L297
 3587              	.L299:
1311:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3588              		.loc 1 1311 41 is_stmt 1 view .LVU1087
1315:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 3589              		.loc 1 1315 5 view .LVU1088
 3590 003e 981A     		subs	r0, r3, r2
 3591              	.LVL240:
1315:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 3592              		.loc 1 1315 5 is_stmt 0 view .LVU1089
 3593 0040 0021     		movs	r1, #0
 3594 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3595              	.LVL241:
 3596              	.L297:
1319:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 3597              		.loc 1 1319 29 is_stmt 1 view .LVU1090
 3598              	.LBE377:
1322:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3599              		.loc 1 1322 3 view .LVU1091
1322:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3600              		.loc 1 1322 21 is_stmt 0 view .LVU1092
 3601 0046 FFF7FEFF 		bl	xTaskResumeAll
 3602              	.LVL242:
1326:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3603              		.loc 1 1326 3 is_stmt 1 view .LVU1093
1326:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3604              		.loc 1 1326 5 is_stmt 0 view .LVU1094
 3605 004a 38B9     		cbnz	r0, .L286
1328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3606              		.loc 1 1328 4 is_stmt 1 view .LVU1095
 3607 004c 104B     		ldr	r3, .L309+8
 3608 004e 4FF08052 		mov	r2, #268435456
 3609 0052 1A60     		str	r2, [r3]
1328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3610              		.loc 1 1328 4 view .LVU1096
 3611              		.syntax unified
 3612              	@ 1328 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3613 0054 BFF34F8F 		dsb
 3614              	@ 0 "" 2
1328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3615              		.loc 1 1328 4 view .LVU1097
 3616              	@ 1328 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3617 0058 BFF36F8F 		isb
 3618              	@ 0 "" 2
1328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3619              		.loc 1 1328 26 view .LVU1098
1332:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3620              		.loc 1 1332 28 view .LVU1099
 3621              		.thumb
 3622              		.syntax unified
 3623              	.L286:
1334:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3624              		.loc 1 1334 2 is_stmt 0 view .LVU1100
 3625 005c 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 178


 3626              	.LVL243:
 3627              	.L307:
 3628              	.LCFI56:
 3629              		.cfi_def_cfa_offset 0
 3630              		.cfi_restore 4
 3631              		.cfi_restore 14
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3632              		.loc 1 1262 3 is_stmt 1 view .LVU1101
 3633              	.LBB378:
 3634              	.LBI378:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3635              		.loc 2 191 30 view .LVU1102
 3636              	.LBB379:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3637              		.loc 2 193 1 view .LVU1103
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3638              		.loc 2 195 2 view .LVU1104
 3639              		.syntax unified
 3640              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3641 005e 4FF05003 			mov r3, #80												
 3642 0062 83F31188 		msr basepri, r3											
 3643 0066 BFF36F8F 		isb														
 3644 006a BFF34F8F 		dsb														
 3645              	
 3646              	@ 0 "" 2
 3647              	.LVL244:
 3648              		.thumb
 3649              		.syntax unified
 3650              	.L288:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3651              		.loc 2 195 2 is_stmt 0 view .LVU1105
 3652              	.LBE379:
 3653              	.LBE378:
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3654              		.loc 1 1262 3 is_stmt 1 discriminator 1 view .LVU1106
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3655              		.loc 1 1262 3 discriminator 1 view .LVU1107
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3656              		.loc 1 1262 3 discriminator 1 view .LVU1108
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3657              		.loc 1 1262 3 discriminator 1 view .LVU1109
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3658              		.loc 1 1262 3 discriminator 1 view .LVU1110
1262:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3659              		.loc 1 1262 3 discriminator 1 view .LVU1111
 3660 006e FEE7     		b	.L288
 3661              	.L308:
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3662              		.loc 1 1264 3 view .LVU1112
 3663              	.LBB380:
 3664              	.LBI380:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3665              		.loc 2 191 30 view .LVU1113
 3666              	.LBB381:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3667              		.loc 2 193 1 view .LVU1114
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 179


 3668              		.loc 2 195 2 view .LVU1115
 3669              		.syntax unified
 3670              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3671 0070 4FF05003 			mov r3, #80												
 3672 0074 83F31188 		msr basepri, r3											
 3673 0078 BFF36F8F 		isb														
 3674 007c BFF34F8F 		dsb														
 3675              	
 3676              	@ 0 "" 2
 3677              	.LVL245:
 3678              		.thumb
 3679              		.syntax unified
 3680              	.L292:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3681              		.loc 2 195 2 is_stmt 0 view .LVU1116
 3682              	.LBE381:
 3683              	.LBE380:
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3684              		.loc 1 1264 3 is_stmt 1 discriminator 3 view .LVU1117
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3685              		.loc 1 1264 3 discriminator 3 view .LVU1118
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3686              		.loc 1 1264 3 discriminator 3 view .LVU1119
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3687              		.loc 1 1264 3 discriminator 3 view .LVU1120
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3688              		.loc 1 1264 3 discriminator 3 view .LVU1121
1264:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3689              		.loc 1 1264 3 discriminator 3 view .LVU1122
 3690 0080 FEE7     		b	.L292
 3691              	.LVL246:
 3692              	.L295:
 3693              	.LCFI57:
 3694              		.cfi_def_cfa_offset 8
 3695              		.cfi_offset 4, -8
 3696              		.cfi_offset 14, -4
 3697              	.LBB382:
1296:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3698              		.loc 1 1296 5 discriminator 1 view .LVU1123
1296:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 3699              		.loc 1 1296 47 is_stmt 0 discriminator 1 view .LVU1124
 3700 0082 0029     		cmp	r1, #0
 3701 0084 D9D0     		beq	.L306
 3702 0086 DAE7     		b	.L299
 3703              	.L310:
 3704              		.align	2
 3705              	.L309:
 3706 0088 00000000 		.word	.LANCHOR18
 3707 008c 00000000 		.word	.LANCHOR15
 3708 0090 04ED00E0 		.word	-536810236
 3709              	.LBE382:
 3710              		.cfi_endproc
 3711              	.LFE9:
 3713              		.section	.text.vTaskDelay,"ax",%progbits
 3714              		.align	1
 3715              		.p2align 2,,3
 3716              		.global	vTaskDelay
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 180


 3717              		.syntax unified
 3718              		.thumb
 3719              		.thumb_func
 3720              		.fpu fpv5-d16
 3722              	vTaskDelay:
 3723              	.LVL247:
 3724              	.LFB10:
1342:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3725              		.loc 1 1342 2 is_stmt 1 view -0
 3726              		.cfi_startproc
 3727              		@ args = 0, pretend = 0, frame = 0
 3728              		@ frame_needed = 0, uses_anonymous_args = 0
1343:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3729              		.loc 1 1343 2 view .LVU1126
1346:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3730              		.loc 1 1346 3 view .LVU1127
1342:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3731              		.loc 1 1342 2 is_stmt 0 view .LVU1128
 3732 0000 08B5     		push	{r3, lr}
 3733              	.LCFI58:
 3734              		.cfi_def_cfa_offset 8
 3735              		.cfi_offset 3, -8
 3736              		.cfi_offset 14, -4
1346:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3737              		.loc 1 1346 5 view .LVU1129
 3738 0002 98B1     		cbz	r0, .L316
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3739              		.loc 1 1348 4 is_stmt 1 view .LVU1130
 3740 0004 0E4B     		ldr	r3, .L321
 3741 0006 1968     		ldr	r1, [r3]
 3742 0008 41B1     		cbz	r1, .L314
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3743              		.loc 1 1348 4 view .LVU1131
 3744              	.LBB383:
 3745              	.LBI383:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3746              		.loc 2 191 30 view .LVU1132
 3747              	.LBB384:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3748              		.loc 2 193 1 view .LVU1133
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3749              		.loc 2 195 2 view .LVU1134
 3750              		.syntax unified
 3751              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3752 000a 4FF05003 			mov r3, #80												
 3753 000e 83F31188 		msr basepri, r3											
 3754 0012 BFF36F8F 		isb														
 3755 0016 BFF34F8F 		dsb														
 3756              	
 3757              	@ 0 "" 2
 3758              	.LVL248:
 3759              		.thumb
 3760              		.syntax unified
 3761              	.L315:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3762              		.loc 2 195 2 is_stmt 0 view .LVU1135
 3763              	.LBE384:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 181


 3764              	.LBE383:
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3765              		.loc 1 1348 4 is_stmt 1 discriminator 1 view .LVU1136
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3766              		.loc 1 1348 4 discriminator 1 view .LVU1137
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3767              		.loc 1 1348 4 discriminator 1 view .LVU1138
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3768              		.loc 1 1348 4 discriminator 1 view .LVU1139
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3769              		.loc 1 1348 4 discriminator 1 view .LVU1140
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3770              		.loc 1 1348 4 discriminator 1 view .LVU1141
 3771 001a FEE7     		b	.L315
 3772              	.L314:
1348:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3773              		.loc 1 1348 45 view .LVU1142
1349:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 3774              		.loc 1 1349 4 view .LVU1143
 3775              	.LBB385:
 3776              	.LBI385:
2110:.//Libraries/FreeRTOS/Source/tasks.c **** {
 3777              		.loc 1 2110 6 view .LVU1144
 3778              	.LBB386:
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3779              		.loc 1 2119 24 view .LVU1145
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3780              		.loc 1 2123 2 view .LVU1146
 3781 001c 1A68     		ldr	r2, [r3]
 3782 001e 0132     		adds	r2, r2, #1
 3783 0020 1A60     		str	r2, [r3]
2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3784              		.loc 1 2127 2 view .LVU1147
 3785              	.LBE386:
 3786              	.LBE385:
1351:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3787              		.loc 1 1351 22 view .LVU1148
1360:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 3788              		.loc 1 1360 5 view .LVU1149
 3789 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3790              	.LVL249:
1362:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3791              		.loc 1 1362 4 view .LVU1150
1362:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3792              		.loc 1 1362 22 is_stmt 0 view .LVU1151
 3793 0026 FFF7FEFF 		bl	xTaskResumeAll
 3794              	.LVL250:
1366:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3795              		.loc 1 1366 28 is_stmt 1 view .LVU1152
1371:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3796              		.loc 1 1371 3 view .LVU1153
1371:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 3797              		.loc 1 1371 5 is_stmt 0 view .LVU1154
 3798 002a 38B9     		cbnz	r0, .L311
 3799              	.LVL251:
 3800              	.L316:
1373:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 182


 3801              		.loc 1 1373 4 is_stmt 1 view .LVU1155
 3802 002c 054B     		ldr	r3, .L321+4
 3803 002e 4FF08052 		mov	r2, #268435456
 3804 0032 1A60     		str	r2, [r3]
1373:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3805              		.loc 1 1373 4 view .LVU1156
 3806              		.syntax unified
 3807              	@ 1373 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3808 0034 BFF34F8F 		dsb
 3809              	@ 0 "" 2
1373:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3810              		.loc 1 1373 4 view .LVU1157
 3811              	@ 1373 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 3812 0038 BFF36F8F 		isb
 3813              	@ 0 "" 2
1373:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 3814              		.loc 1 1373 26 view .LVU1158
 3815              		.thumb
 3816              		.syntax unified
 3817              	.L311:
1379:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3818              		.loc 1 1379 2 is_stmt 0 view .LVU1159
 3819 003c 08BD     		pop	{r3, pc}
 3820              	.L322:
 3821 003e 00BF     		.align	2
 3822              	.L321:
 3823 0040 00000000 		.word	.LANCHOR18
 3824 0044 04ED00E0 		.word	-536810236
 3825              		.cfi_endproc
 3826              	.LFE10:
 3828              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3829              		.align	1
 3830              		.p2align 2,,3
 3831              		.global	xTaskGetTickCount
 3832              		.syntax unified
 3833              		.thumb
 3834              		.thumb_func
 3835              		.fpu fpv5-d16
 3837              	xTaskGetTickCount:
 3838              	.LFB23:
2305:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 3839              		.loc 1 2305 1 is_stmt 1 view -0
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 0
 3842              		@ frame_needed = 0, uses_anonymous_args = 0
 3843              		@ link register save eliminated.
2306:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3844              		.loc 1 2306 1 view .LVU1161
2309:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3845              		.loc 1 2309 32 view .LVU1162
2311:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3846              		.loc 1 2311 3 view .LVU1163
2311:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3847              		.loc 1 2311 10 is_stmt 0 view .LVU1164
 3848 0000 014B     		ldr	r3, .L324
 3849 0002 1868     		ldr	r0, [r3]
 3850              	.LVL252:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 183


2313:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3851              		.loc 1 2313 31 is_stmt 1 view .LVU1165
2315:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3852              		.loc 1 2315 2 view .LVU1166
2316:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3853              		.loc 1 2316 1 is_stmt 0 view .LVU1167
 3854 0004 7047     		bx	lr
 3855              	.L325:
 3856 0006 00BF     		.align	2
 3857              	.L324:
 3858 0008 00000000 		.word	.LANCHOR15
 3859              		.cfi_endproc
 3860              	.LFE23:
 3862              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3863              		.align	1
 3864              		.p2align 2,,3
 3865              		.global	xTaskGetTickCountFromISR
 3866              		.syntax unified
 3867              		.thumb
 3868              		.thumb_func
 3869              		.fpu fpv5-d16
 3871              	xTaskGetTickCountFromISR:
 3872              	.LFB24:
2320:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 3873              		.loc 1 2320 1 is_stmt 1 view -0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 0
 3876              		@ frame_needed = 0, uses_anonymous_args = 0
2321:.//Libraries/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 3877              		.loc 1 2321 1 view .LVU1169
2322:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3878              		.loc 1 2322 1 view .LVU1170
2338:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3879              		.loc 1 2338 2 view .LVU1171
2320:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 3880              		.loc 1 2320 1 is_stmt 0 view .LVU1172
 3881 0000 08B5     		push	{r3, lr}
 3882              	.LCFI59:
 3883              		.cfi_def_cfa_offset 8
 3884              		.cfi_offset 3, -8
 3885              		.cfi_offset 14, -4
2338:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3886              		.loc 1 2338 2 view .LVU1173
 3887 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3888              	.LVL253:
2340:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 3889              		.loc 1 2340 2 is_stmt 1 view .LVU1174
2342:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3890              		.loc 1 2342 3 view .LVU1175
2342:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 3891              		.loc 1 2342 11 is_stmt 0 view .LVU1176
 3892 0006 014B     		ldr	r3, .L328
 3893 0008 1868     		ldr	r0, [r3]
 3894              	.LVL254:
2344:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3895              		.loc 1 2344 2 is_stmt 1 view .LVU1177
2346:.//Libraries/FreeRTOS/Source/tasks.c **** }
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 184


 3896              		.loc 1 2346 2 view .LVU1178
2347:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3897              		.loc 1 2347 1 is_stmt 0 view .LVU1179
 3898 000a 08BD     		pop	{r3, pc}
 3899              	.L329:
 3900              		.align	2
 3901              	.L328:
 3902 000c 00000000 		.word	.LANCHOR15
 3903              		.cfi_endproc
 3904              	.LFE24:
 3906              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3907              		.align	1
 3908              		.p2align 2,,3
 3909              		.global	uxTaskGetNumberOfTasks
 3910              		.syntax unified
 3911              		.thumb
 3912              		.thumb_func
 3913              		.fpu fpv5-d16
 3915              	uxTaskGetNumberOfTasks:
 3916              	.LFB25:
2351:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 3917              		.loc 1 2351 1 is_stmt 1 view -0
 3918              		.cfi_startproc
 3919              		@ args = 0, pretend = 0, frame = 0
 3920              		@ frame_needed = 0, uses_anonymous_args = 0
 3921              		@ link register save eliminated.
2354:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3922              		.loc 1 2354 2 view .LVU1181
2354:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3923              		.loc 1 2354 9 is_stmt 0 view .LVU1182
 3924 0000 014B     		ldr	r3, .L331
 3925 0002 1868     		ldr	r0, [r3]
2355:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3926              		.loc 1 2355 1 view .LVU1183
 3927 0004 7047     		bx	lr
 3928              	.L332:
 3929 0006 00BF     		.align	2
 3930              	.L331:
 3931 0008 00000000 		.word	.LANCHOR0
 3932              		.cfi_endproc
 3933              	.LFE25:
 3935              		.section	.text.pcTaskGetName,"ax",%progbits
 3936              		.align	1
 3937              		.p2align 2,,3
 3938              		.global	pcTaskGetName
 3939              		.syntax unified
 3940              		.thumb
 3941              		.thumb_func
 3942              		.fpu fpv5-d16
 3944              	pcTaskGetName:
 3945              	.LVL255:
 3946              	.LFB26:
2359:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 3947              		.loc 1 2359 1 is_stmt 1 view -0
 3948              		.cfi_startproc
 3949              		@ args = 0, pretend = 0, frame = 0
 3950              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 185


 3951              		@ link register save eliminated.
2360:.//Libraries/FreeRTOS/Source/tasks.c **** 
 3952              		.loc 1 2360 1 view .LVU1185
2364:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3953              		.loc 1 2364 2 view .LVU1186
2364:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3954              		.loc 1 2364 10 is_stmt 0 view .LVU1187
 3955 0000 08B1     		cbz	r0, .L336
 3956              	.LVL256:
 3957              	.L334:
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3958              		.loc 1 2365 23 is_stmt 1 discriminator 2 view .LVU1188
2366:.//Libraries/FreeRTOS/Source/tasks.c **** }
 3959              		.loc 1 2366 2 discriminator 2 view .LVU1189
2367:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3960              		.loc 1 2367 1 is_stmt 0 discriminator 2 view .LVU1190
 3961 0002 3430     		adds	r0, r0, #52
 3962              	.LVL257:
2367:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3963              		.loc 1 2367 1 discriminator 2 view .LVU1191
 3964 0004 7047     		bx	lr
 3965              	.LVL258:
 3966              	.L336:
2364:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3967              		.loc 1 2364 10 discriminator 1 view .LVU1192
 3968 0006 064B     		ldr	r3, .L337
 3969 0008 1868     		ldr	r0, [r3]
 3970              	.LVL259:
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3971              		.loc 1 2365 2 is_stmt 1 discriminator 1 view .LVU1193
 3972 000a 0028     		cmp	r0, #0
 3973 000c F9D1     		bne	.L334
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3974              		.loc 1 2365 2 view .LVU1194
 3975              	.LBB387:
 3976              	.LBI387:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3977              		.loc 2 191 30 view .LVU1195
 3978              	.LBB388:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3979              		.loc 2 193 1 view .LVU1196
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3980              		.loc 2 195 2 view .LVU1197
 3981              		.syntax unified
 3982              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3983 000e 4FF05003 			mov r3, #80												
 3984 0012 83F31188 		msr basepri, r3											
 3985 0016 BFF36F8F 		isb														
 3986 001a BFF34F8F 		dsb														
 3987              	
 3988              	@ 0 "" 2
 3989              	.LVL260:
 3990              		.thumb
 3991              		.syntax unified
 3992              	.L335:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3993              		.loc 2 195 2 is_stmt 0 view .LVU1198
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 186


 3994              	.LBE388:
 3995              	.LBE387:
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3996              		.loc 1 2365 2 is_stmt 1 discriminator 1 view .LVU1199
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3997              		.loc 1 2365 2 discriminator 1 view .LVU1200
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3998              		.loc 1 2365 2 discriminator 1 view .LVU1201
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3999              		.loc 1 2365 2 discriminator 1 view .LVU1202
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 4000              		.loc 1 2365 2 discriminator 1 view .LVU1203
2365:.//Libraries/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 4001              		.loc 1 2365 2 discriminator 1 view .LVU1204
 4002 001e FEE7     		b	.L335
 4003              	.L338:
 4004              		.align	2
 4005              	.L337:
 4006 0020 00000000 		.word	.LANCHOR1
 4007              		.cfi_endproc
 4008              	.LFE26:
 4010              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 4011              		.align	1
 4012              		.p2align 2,,3
 4013              		.global	xTaskCatchUpTicks
 4014              		.syntax unified
 4015              		.thumb
 4016              		.thumb_func
 4017              		.fpu fpv5-d16
 4019              	xTaskCatchUpTicks:
 4020              	.LVL261:
 4021              	.LFB28:
2610:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 4022              		.loc 1 2610 1 view -0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 0
 4025              		@ frame_needed = 0, uses_anonymous_args = 0
 4026              		@ link register save eliminated.
2611:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4027              		.loc 1 2611 1 view .LVU1206
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4028              		.loc 1 2615 2 view .LVU1207
 4029 0000 0A4B     		ldr	r3, .L342
 4030 0002 1A68     		ldr	r2, [r3]
 4031 0004 42B1     		cbz	r2, .L340
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4032              		.loc 1 2615 2 view .LVU1208
 4033              	.LBB389:
 4034              	.LBI389:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4035              		.loc 2 191 30 view .LVU1209
 4036              	.LBB390:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4037              		.loc 2 193 1 view .LVU1210
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4038              		.loc 2 195 2 view .LVU1211
 4039              		.syntax unified
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 187


 4040              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4041 0006 4FF05003 			mov r3, #80												
 4042 000a 83F31188 		msr basepri, r3											
 4043 000e BFF36F8F 		isb														
 4044 0012 BFF34F8F 		dsb														
 4045              	
 4046              	@ 0 "" 2
 4047              	.LVL262:
 4048              		.thumb
 4049              		.syntax unified
 4050              	.L341:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4051              		.loc 2 195 2 is_stmt 0 view .LVU1212
 4052              	.LBE390:
 4053              	.LBE389:
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4054              		.loc 1 2615 2 is_stmt 1 discriminator 1 view .LVU1213
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4055              		.loc 1 2615 2 discriminator 1 view .LVU1214
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4056              		.loc 1 2615 2 discriminator 1 view .LVU1215
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4057              		.loc 1 2615 2 discriminator 1 view .LVU1216
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4058              		.loc 1 2615 2 discriminator 1 view .LVU1217
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4059              		.loc 1 2615 2 discriminator 1 view .LVU1218
 4060 0016 FEE7     		b	.L341
 4061              	.L340:
2615:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4062              		.loc 1 2615 43 view .LVU1219
2619:.//Libraries/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 4063              		.loc 1 2619 2 view .LVU1220
 4064              	.LBB391:
 4065              	.LBI391:
2110:.//Libraries/FreeRTOS/Source/tasks.c **** {
 4066              		.loc 1 2110 6 view .LVU1221
 4067              	.LBB392:
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4068              		.loc 1 2119 24 view .LVU1222
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4069              		.loc 1 2123 2 view .LVU1223
 4070 0018 1A68     		ldr	r2, [r3]
 4071 001a 0132     		adds	r2, r2, #1
 4072 001c 1A60     		str	r2, [r3]
2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4073              		.loc 1 2127 2 view .LVU1224
 4074              	.LBE392:
 4075              	.LBE391:
2620:.//Libraries/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 4076              		.loc 1 2620 2 view .LVU1225
2620:.//Libraries/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 4077              		.loc 1 2620 15 is_stmt 0 view .LVU1226
 4078 001e 044A     		ldr	r2, .L342+4
 4079 0020 1368     		ldr	r3, [r2]
 4080 0022 0344     		add	r3, r3, r0
 4081 0024 1360     		str	r3, [r2]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 188


2621:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4082              		.loc 1 2621 2 is_stmt 1 view .LVU1227
2621:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4083              		.loc 1 2621 19 is_stmt 0 view .LVU1228
 4084 0026 FFF7FEBF 		b	xTaskResumeAll
 4085              	.LVL263:
 4086              	.L343:
2621:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4087              		.loc 1 2621 19 view .LVU1229
 4088 002a 00BF     		.align	2
 4089              	.L342:
 4090 002c 00000000 		.word	.LANCHOR18
 4091 0030 00000000 		.word	.LANCHOR19
 4092              		.cfi_endproc
 4093              	.LFE28:
 4095              		.section	.text.xTaskIncrementTick,"ax",%progbits
 4096              		.align	1
 4097              		.p2align 2,,3
 4098              		.global	xTaskIncrementTick
 4099              		.syntax unified
 4100              		.thumb
 4101              		.thumb_func
 4102              		.fpu fpv5-d16
 4104              	xTaskIncrementTick:
 4105              	.LFB29:
2708:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 4106              		.loc 1 2708 1 is_stmt 1 view -0
 4107              		.cfi_startproc
 4108              		@ args = 0, pretend = 0, frame = 0
 4109              		@ frame_needed = 0, uses_anonymous_args = 0
 4110              		@ link register save eliminated.
2709:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
 4111              		.loc 1 2709 1 view .LVU1231
2710:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 4112              		.loc 1 2710 1 view .LVU1232
2711:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4113              		.loc 1 2711 1 view .LVU1233
 4114              	.LVL264:
2716:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4115              		.loc 1 2716 40 view .LVU1234
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4116              		.loc 1 2717 2 view .LVU1235
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4117              		.loc 1 2717 27 is_stmt 0 view .LVU1236
 4118 0000 054B     		ldr	r3, .L346
 4119 0002 1B68     		ldr	r3, [r3]
2717:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4120              		.loc 1 2717 4 view .LVU1237
 4121 0004 0BB9     		cbnz	r3, .L345
 4122 0006 FFF7FEBF 		b	xTaskIncrementTick.part.0
 4123              	.LVL265:
 4124              	.L345:
2864:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4125              		.loc 1 2864 3 is_stmt 1 view .LVU1238
 4126 000a 044A     		ldr	r2, .L346+4
2876:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4127              		.loc 1 2876 1 is_stmt 0 view .LVU1239
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 189


 4128 000c 0020     		movs	r0, #0
2864:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4129              		.loc 1 2864 3 view .LVU1240
 4130 000e 1368     		ldr	r3, [r2]
 4131 0010 0133     		adds	r3, r3, #1
 4132 0012 1360     		str	r3, [r2]
2875:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4133              		.loc 1 2875 2 is_stmt 1 view .LVU1241
2876:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4134              		.loc 1 2876 1 is_stmt 0 view .LVU1242
 4135 0014 7047     		bx	lr
 4136              	.L347:
 4137 0016 00BF     		.align	2
 4138              	.L346:
 4139 0018 00000000 		.word	.LANCHOR18
 4140 001c 00000000 		.word	.LANCHOR19
 4141              		.cfi_endproc
 4142              	.LFE29:
 4144              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4145              		.align	1
 4146              		.p2align 2,,3
 4147              		.global	vTaskSwitchContext
 4148              		.syntax unified
 4149              		.thumb
 4150              		.thumb_func
 4151              		.fpu fpv5-d16
 4153              	vTaskSwitchContext:
 4154              	.LFB30:
2990:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4155              		.loc 1 2990 1 is_stmt 1 view -0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 0
 4158              		@ frame_needed = 0, uses_anonymous_args = 0
 4159              		@ link register save eliminated.
2991:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4160              		.loc 1 2991 2 view .LVU1244
2991:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4161              		.loc 1 2991 27 is_stmt 0 view .LVU1245
 4162 0000 1C4B     		ldr	r3, .L367
 4163 0002 1B68     		ldr	r3, [r3]
2991:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4164              		.loc 1 2991 4 view .LVU1246
 4165 0004 1BB1     		cbz	r3, .L349
2995:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4166              		.loc 1 2995 3 is_stmt 1 view .LVU1247
2995:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4167              		.loc 1 2995 17 is_stmt 0 view .LVU1248
 4168 0006 1C4B     		ldr	r3, .L367+4
 4169 0008 0122     		movs	r2, #1
 4170 000a 1A60     		str	r2, [r3]
 4171 000c 7047     		bx	lr
 4172              	.L349:
2999:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4173              		.loc 1 2999 3 is_stmt 1 view .LVU1249
2999:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4174              		.loc 1 2999 17 is_stmt 0 view .LVU1250
 4175 000e 1A4A     		ldr	r2, .L367+4
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 190


2990:.//Libraries/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4176              		.loc 1 2990 1 view .LVU1251
 4177 0010 10B4     		push	{r4}
 4178              	.LCFI60:
 4179              		.cfi_def_cfa_offset 4
 4180              		.cfi_offset 4, -4
 4181              	.LBB401:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4182              		.loc 1 3041 3 view .LVU1252
 4183 0012 1A4C     		ldr	r4, .L367+8
 4184              	.LBE401:
2999:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4185              		.loc 1 2999 17 view .LVU1253
 4186 0014 1360     		str	r3, [r2]
3000:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4187              		.loc 1 3000 27 is_stmt 1 view .LVU1254
3030:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4188              		.loc 1 3030 33 view .LVU1255
 4189              	.LBB404:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4190              		.loc 1 3041 3 view .LVU1256
 4191 0016 2368     		ldr	r3, [r4]
 4192              	.LVL266:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4193              		.loc 1 3041 3 view .LVU1257
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4194              		.loc 1 3041 3 view .LVU1258
 4195 0018 194A     		ldr	r2, .L367+12
 4196 001a 03EB8300 		add	r0, r3, r3, lsl #2
 4197 001e 9900     		lsls	r1, r3, #2
 4198 0020 8000     		lsls	r0, r0, #2
 4199 0022 1058     		ldr	r0, [r2, r0]
 4200 0024 40B9     		cbnz	r0, .L351
 4201              	.L355:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4202              		.loc 1 3041 3 is_stmt 0 discriminator 6 view .LVU1259
 4203 0026 C3B1     		cbz	r3, .L365
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4204              		.loc 1 3041 3 is_stmt 1 discriminator 3 view .LVU1260
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4205              		.loc 1 3041 3 discriminator 3 view .LVU1261
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4206              		.loc 1 3041 3 discriminator 3 view .LVU1262
 4207 0028 013B     		subs	r3, r3, #1
 4208              	.LVL267:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4209              		.loc 1 3041 3 discriminator 3 view .LVU1263
 4210 002a 03EB8300 		add	r0, r3, r3, lsl #2
 4211 002e 9900     		lsls	r1, r3, #2
 4212 0030 52F82000 		ldr	r0, [r2, r0, lsl #2]
 4213 0034 0028     		cmp	r0, #0
 4214 0036 F6D0     		beq	.L355
 4215              	.L351:
 4216              	.LBB402:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4217              		.loc 1 3041 3 discriminator 7 view .LVU1264
 4218              	.LVL268:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 191


3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4219              		.loc 1 3041 3 discriminator 7 view .LVU1265
 4220 0038 1944     		add	r1, r1, r3
 4221 003a 02EB8100 		add	r0, r2, r1, lsl #2
 4222 003e 4168     		ldr	r1, [r0, #4]
 4223 0040 0246     		mov	r2, r0
 4224 0042 4968     		ldr	r1, [r1, #4]
 4225 0044 0832     		adds	r2, r2, #8
 4226 0046 9142     		cmp	r1, r2
 4227 0048 4160     		str	r1, [r0, #4]
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4228              		.loc 1 3041 3 discriminator 7 view .LVU1266
 4229 004a 0FD0     		beq	.L366
 4230              	.L356:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4231              		.loc 1 3041 3 discriminator 10 view .LVU1267
 4232 004c C968     		ldr	r1, [r1, #12]
 4233 004e 0D4A     		ldr	r2, .L367+16
 4234 0050 1160     		str	r1, [r2]
 4235              	.LBE402:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4236              		.loc 1 3041 3 discriminator 10 view .LVU1268
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4237              		.loc 1 3041 3 discriminator 10 view .LVU1269
 4238 0052 2360     		str	r3, [r4]
 4239              	.LBE404:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4240              		.loc 1 3041 37 discriminator 10 view .LVU1270
3042:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4241              		.loc 1 3042 26 discriminator 10 view .LVU1271
3061:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4242              		.loc 1 3061 1 is_stmt 0 discriminator 10 view .LVU1272
 4243 0054 5DF8044B 		ldr	r4, [sp], #4
 4244              	.LCFI61:
 4245              		.cfi_remember_state
 4246              		.cfi_restore 4
 4247              		.cfi_def_cfa_offset 0
 4248 0058 7047     		bx	lr
 4249              	.LVL269:
 4250              	.L365:
 4251              	.LCFI62:
 4252              		.cfi_restore_state
 4253              	.LBB405:
 4254              	.LBI405:
2989:.//Libraries/FreeRTOS/Source/tasks.c **** {
 4255              		.loc 1 2989 6 is_stmt 1 view .LVU1273
 4256              	.LBB406:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4257              		.loc 1 3041 3 view .LVU1274
 4258              	.LBB407:
 4259              	.LBI407:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4260              		.loc 2 191 30 view .LVU1275
 4261              	.LBB408:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4262              		.loc 2 193 1 view .LVU1276
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 192


 4263              		.loc 2 195 2 view .LVU1277
 4264              		.syntax unified
 4265              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4266 005a 4FF05003 			mov r3, #80												
 4267 005e 83F31188 		msr basepri, r3											
 4268 0062 BFF36F8F 		isb														
 4269 0066 BFF34F8F 		dsb														
 4270              	
 4271              	@ 0 "" 2
 4272              	.LVL270:
 4273              		.thumb
 4274              		.syntax unified
 4275              	.L354:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4276              		.loc 2 195 2 is_stmt 0 view .LVU1278
 4277              	.LBE408:
 4278              	.LBE407:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4279              		.loc 1 3041 3 is_stmt 1 view .LVU1279
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4280              		.loc 1 3041 3 view .LVU1280
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4281              		.loc 1 3041 3 view .LVU1281
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4282              		.loc 1 3041 3 view .LVU1282
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4283              		.loc 1 3041 3 view .LVU1283
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4284              		.loc 1 3041 3 view .LVU1284
 4285 006a FEE7     		b	.L354
 4286              	.LVL271:
 4287              	.L366:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4288              		.loc 1 3041 3 is_stmt 0 view .LVU1285
 4289              	.LBE406:
 4290              	.LBE405:
 4291              	.LBB409:
 4292              	.LBB403:
3041:.//Libraries/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4293              		.loc 1 3041 3 is_stmt 1 discriminator 8 view .LVU1286
 4294 006c 4968     		ldr	r1, [r1, #4]
 4295 006e 4160     		str	r1, [r0, #4]
 4296 0070 ECE7     		b	.L356
 4297              	.L368:
 4298 0072 00BF     		.align	2
 4299              	.L367:
 4300 0074 00000000 		.word	.LANCHOR18
 4301 0078 00000000 		.word	.LANCHOR17
 4302 007c 00000000 		.word	.LANCHOR12
 4303 0080 00000000 		.word	.LANCHOR2
 4304 0084 00000000 		.word	.LANCHOR1
 4305              	.LBE403:
 4306              	.LBE409:
 4307              		.cfi_endproc
 4308              	.LFE30:
 4310              		.section	.text.vTaskSuspend,"ax",%progbits
 4311              		.align	1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 193


 4312              		.p2align 2,,3
 4313              		.global	vTaskSuspend
 4314              		.syntax unified
 4315              		.thumb
 4316              		.thumb_func
 4317              		.fpu fpv5-d16
 4319              	vTaskSuspend:
 4320              	.LVL272:
 4321              	.LFB15:
1705:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4322              		.loc 1 1705 2 view -0
 4323              		.cfi_startproc
 4324              		@ args = 0, pretend = 0, frame = 0
 4325              		@ frame_needed = 0, uses_anonymous_args = 0
1706:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4326              		.loc 1 1706 2 view .LVU1288
1708:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4327              		.loc 1 1708 3 view .LVU1289
1705:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4328              		.loc 1 1705 2 is_stmt 0 view .LVU1290
 4329 0000 70B5     		push	{r4, r5, r6, lr}
 4330              	.LCFI63:
 4331              		.cfi_def_cfa_offset 16
 4332              		.cfi_offset 4, -16
 4333              		.cfi_offset 5, -12
 4334              		.cfi_offset 6, -8
 4335              		.cfi_offset 14, -4
1705:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4336              		.loc 1 1705 2 view .LVU1291
 4337 0002 0446     		mov	r4, r0
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4338              		.loc 1 1712 12 view .LVU1292
 4339 0004 2B4D     		ldr	r5, .L393
1708:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4340              		.loc 1 1708 3 view .LVU1293
 4341 0006 FFF7FEFF 		bl	vPortEnterCritical
 4342              	.LVL273:
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 1712 4 is_stmt 1 view .LVU1294
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4344              		.loc 1 1712 12 is_stmt 0 view .LVU1295
 4345 000a 002C     		cmp	r4, #0
 4346 000c 36D0     		beq	.L388
 4347              	.LVL274:
 4348              	.L370:
1714:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 1714 30 is_stmt 1 discriminator 4 view .LVU1296
1718:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4350              		.loc 1 1718 4 discriminator 4 view .LVU1297
1718:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4351              		.loc 1 1718 8 is_stmt 0 discriminator 4 view .LVU1298
 4352 000e 261D     		adds	r6, r4, #4
 4353 0010 3046     		mov	r0, r6
 4354 0012 FFF7FEFF 		bl	uxListRemove
 4355              	.LVL275:
1724:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4356              		.loc 1 1724 29 is_stmt 1 discriminator 4 view .LVU1299
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 194


1728:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4357              		.loc 1 1728 4 discriminator 4 view .LVU1300
1728:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4358              		.loc 1 1728 6 is_stmt 0 discriminator 4 view .LVU1301
 4359 0016 A36A     		ldr	r3, [r4, #40]
 4360 0018 1BB1     		cbz	r3, .L371
1730:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4361              		.loc 1 1730 5 is_stmt 1 view .LVU1302
1730:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4362              		.loc 1 1730 14 is_stmt 0 view .LVU1303
 4363 001a 04F11800 		add	r0, r4, #24
 4364 001e FFF7FEFF 		bl	uxListRemove
 4365              	.LVL276:
 4366              	.L371:
1734:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4367              		.loc 1 1734 29 is_stmt 1 view .LVU1304
1737:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4368              		.loc 1 1737 4 view .LVU1305
 4369 0022 3146     		mov	r1, r6
 4370 0024 2448     		ldr	r0, .L393+4
 4371 0026 FFF7FEFF 		bl	vListInsertEnd
 4372              	.LVL277:
1741:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4373              		.loc 1 1741 5 view .LVU1306
1741:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4374              		.loc 1 1741 14 is_stmt 0 view .LVU1307
 4375 002a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
1741:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4376              		.loc 1 1741 7 view .LVU1308
 4377 002e 012B     		cmp	r3, #1
 4378 0030 02D1     		bne	.L372
1745:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4379              		.loc 1 1745 6 is_stmt 1 view .LVU1309
1745:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4380              		.loc 1 1745 27 is_stmt 0 view .LVU1310
 4381 0032 0023     		movs	r3, #0
 4382 0034 84F85830 		strb	r3, [r4, #88]
 4383              	.L372:
1750:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4384              		.loc 1 1750 3 is_stmt 1 view .LVU1311
1752:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4385              		.loc 1 1752 25 is_stmt 0 view .LVU1312
 4386 0038 204E     		ldr	r6, .L393+8
1750:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4387              		.loc 1 1750 3 view .LVU1313
 4388 003a FFF7FEFF 		bl	vPortExitCritical
 4389              	.LVL278:
1752:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4390              		.loc 1 1752 3 is_stmt 1 view .LVU1314
1752:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4391              		.loc 1 1752 25 is_stmt 0 view .LVU1315
 4392 003e 3368     		ldr	r3, [r6]
1752:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4393              		.loc 1 1752 5 view .LVU1316
 4394 0040 8BB9     		cbnz	r3, .L390
 4395              	.L373:
1764:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 195


 4396              		.loc 1 1764 28 is_stmt 1 view .LVU1317
1767:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4397              		.loc 1 1767 3 view .LVU1318
1767:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4398              		.loc 1 1767 13 is_stmt 0 view .LVU1319
 4399 0042 2B68     		ldr	r3, [r5]
1767:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4400              		.loc 1 1767 5 view .LVU1320
 4401 0044 A342     		cmp	r3, r4
 4402 0046 00D0     		beq	.L391
1798:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4403              		.loc 1 1798 2 view .LVU1321
 4404 0048 70BD     		pop	{r4, r5, r6, pc}
 4405              	.LVL279:
 4406              	.L391:
1769:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4407              		.loc 1 1769 4 is_stmt 1 view .LVU1322
1769:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4408              		.loc 1 1769 26 is_stmt 0 view .LVU1323
 4409 004a 3368     		ldr	r3, [r6]
1769:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4410              		.loc 1 1769 6 view .LVU1324
 4411 004c EBB1     		cbz	r3, .L377
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4412              		.loc 1 1772 5 is_stmt 1 view .LVU1325
 4413 004e 1C4B     		ldr	r3, .L393+12
 4414 0050 1B68     		ldr	r3, [r3]
 4415 0052 13B3     		cbz	r3, .L378
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4416              		.loc 1 1772 5 view .LVU1326
 4417              	.LBB410:
 4418              	.LBI410:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4419              		.loc 2 191 30 view .LVU1327
 4420              	.LBB411:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4421              		.loc 2 193 1 view .LVU1328
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4422              		.loc 2 195 2 view .LVU1329
 4423              		.syntax unified
 4424              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4425 0054 4FF05003 			mov r3, #80												
 4426 0058 83F31188 		msr basepri, r3											
 4427 005c BFF36F8F 		isb														
 4428 0060 BFF34F8F 		dsb														
 4429              	
 4430              	@ 0 "" 2
 4431              	.LVL280:
 4432              		.thumb
 4433              		.syntax unified
 4434              	.L379:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4435              		.loc 2 195 2 is_stmt 0 view .LVU1330
 4436              	.LBE411:
 4437              	.LBE410:
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4438              		.loc 1 1772 5 is_stmt 1 discriminator 1 view .LVU1331
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 196


1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4439              		.loc 1 1772 5 discriminator 1 view .LVU1332
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4440              		.loc 1 1772 5 discriminator 1 view .LVU1333
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4441              		.loc 1 1772 5 discriminator 1 view .LVU1334
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4442              		.loc 1 1772 5 discriminator 1 view .LVU1335
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4443              		.loc 1 1772 5 discriminator 1 view .LVU1336
 4444 0064 FEE7     		b	.L379
 4445              	.L390:
1756:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 4446              		.loc 1 1756 4 view .LVU1337
 4447 0066 FFF7FEFF 		bl	vPortEnterCritical
 4448              	.LVL281:
1758:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4449              		.loc 1 1758 5 view .LVU1338
 4450              	.LBB412:
 4451              	.LBI412:
3943:.//Libraries/FreeRTOS/Source/tasks.c **** {
 4452              		.loc 1 3943 13 view .LVU1339
 4453              	.LBB413:
3945:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4454              		.loc 1 3945 1 view .LVU1340
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4455              		.loc 1 3947 2 view .LVU1341
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4456              		.loc 1 3947 6 is_stmt 0 view .LVU1342
 4457 006a 164B     		ldr	r3, .L393+16
 4458 006c 1B68     		ldr	r3, [r3]
 4459 006e 1B68     		ldr	r3, [r3]
3947:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4460              		.loc 1 3947 4 view .LVU1343
 4461 0070 33B1     		cbz	r3, .L392
 4462 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime.part.0
 4463              	.LVL282:
 4464              	.L375:
 4465              	.LBE413:
 4466              	.LBE412:
1760:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 4467              		.loc 1 1760 4 is_stmt 1 view .LVU1344
 4468 0076 FFF7FEFF 		bl	vPortExitCritical
 4469              	.LVL283:
 4470 007a E2E7     		b	.L373
 4471              	.LVL284:
 4472              	.L388:
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4473              		.loc 1 1712 12 is_stmt 0 discriminator 1 view .LVU1345
 4474 007c 2C68     		ldr	r4, [r5]
 4475              	.LVL285:
1712:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4476              		.loc 1 1712 12 discriminator 1 view .LVU1346
 4477 007e C6E7     		b	.L370
 4478              	.LVL286:
 4479              	.L392:
 4480              	.LBB415:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 197


 4481              	.LBB414:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4482              		.loc 1 3953 3 is_stmt 1 view .LVU1347
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4483              		.loc 1 3953 24 is_stmt 0 view .LVU1348
 4484 0080 114B     		ldr	r3, .L393+20
 4485 0082 4FF0FF32 		mov	r2, #-1
 4486 0086 1A60     		str	r2, [r3]
 4487 0088 F5E7     		b	.L375
 4488              	.L377:
3953:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4489              		.loc 1 3953 24 view .LVU1349
 4490              	.LBE414:
 4491              	.LBE415:
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4492              		.loc 1 1780 5 is_stmt 1 view .LVU1350
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4493              		.loc 1 1780 9 is_stmt 0 view .LVU1351
 4494 008a 0B49     		ldr	r1, .L393+4
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4495              		.loc 1 1780 56 view .LVU1352
 4496 008c 0F4A     		ldr	r2, .L393+24
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4497              		.loc 1 1780 9 view .LVU1353
 4498 008e 0968     		ldr	r1, [r1]
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4499              		.loc 1 1780 56 view .LVU1354
 4500 0090 1268     		ldr	r2, [r2]
1780:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 4501              		.loc 1 1780 7 view .LVU1355
 4502 0092 9142     		cmp	r1, r2
 4503 0094 0AD1     		bne	.L380
1786:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4504              		.loc 1 1786 6 is_stmt 1 view .LVU1356
1786:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4505              		.loc 1 1786 19 is_stmt 0 view .LVU1357
 4506 0096 2B60     		str	r3, [r5]
1798:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4507              		.loc 1 1798 2 view .LVU1358
 4508 0098 70BD     		pop	{r4, r5, r6, pc}
 4509              	.LVL287:
 4510              	.L378:
1772:.//Libraries/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 4511              		.loc 1 1772 46 is_stmt 1 discriminator 2 view .LVU1359
1773:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4512              		.loc 1 1773 5 discriminator 2 view .LVU1360
 4513 009a 0D4B     		ldr	r3, .L393+28
 4514 009c 4FF08052 		mov	r2, #268435456
 4515 00a0 1A60     		str	r2, [r3]
1773:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4516              		.loc 1 1773 5 discriminator 2 view .LVU1361
 4517              		.syntax unified
 4518              	@ 1773 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 4519 00a2 BFF34F8F 		dsb
 4520              	@ 0 "" 2
1773:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4521              		.loc 1 1773 5 discriminator 2 view .LVU1362
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 198


 4522              	@ 1773 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 4523 00a6 BFF36F8F 		isb
 4524              	@ 0 "" 2
1773:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 4525              		.loc 1 1773 27 discriminator 2 view .LVU1363
1798:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4526              		.loc 1 1798 2 is_stmt 0 discriminator 2 view .LVU1364
 4527              		.thumb
 4528              		.syntax unified
 4529 00aa 70BD     		pop	{r4, r5, r6, pc}
 4530              	.LVL288:
 4531              	.L380:
1790:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4532              		.loc 1 1790 6 is_stmt 1 view .LVU1365
1798:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4533              		.loc 1 1798 2 is_stmt 0 view .LVU1366
 4534 00ac BDE87040 		pop	{r4, r5, r6, lr}
 4535              	.LCFI64:
 4536              		.cfi_restore 14
 4537              		.cfi_restore 6
 4538              		.cfi_restore 5
 4539              		.cfi_restore 4
 4540              		.cfi_def_cfa_offset 0
 4541              	.LVL289:
1790:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 4542              		.loc 1 1790 6 view .LVU1367
 4543 00b0 FFF7FEBF 		b	vTaskSwitchContext
 4544              	.LVL290:
 4545              	.L394:
 4546              		.align	2
 4547              	.L393:
 4548 00b4 00000000 		.word	.LANCHOR1
 4549 00b8 00000000 		.word	.LANCHOR7
 4550 00bc 00000000 		.word	.LANCHOR10
 4551 00c0 00000000 		.word	.LANCHOR18
 4552 00c4 00000000 		.word	.LANCHOR8
 4553 00c8 00000000 		.word	.LANCHOR13
 4554 00cc 00000000 		.word	.LANCHOR0
 4555 00d0 04ED00E0 		.word	-536810236
 4556              		.cfi_endproc
 4557              	.LFE15:
 4559              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4560              		.align	1
 4561              		.p2align 2,,3
 4562              		.global	vTaskPlaceOnEventList
 4563              		.syntax unified
 4564              		.thumb
 4565              		.thumb_func
 4566              		.fpu fpv5-d16
 4568              	vTaskPlaceOnEventList:
 4569              	.LVL291:
 4570              	.LFB31:
3065:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4571              		.loc 1 3065 1 is_stmt 1 view -0
 4572              		.cfi_startproc
 4573              		@ args = 0, pretend = 0, frame = 0
 4574              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 199


3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4575              		.loc 1 3066 2 view .LVU1369
 4576 0000 60B1     		cbz	r0, .L400
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4577              		.loc 1 3066 29 discriminator 2 view .LVU1370
3075:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4578              		.loc 1 3075 2 discriminator 2 view .LVU1371
3075:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4579              		.loc 1 3075 43 is_stmt 0 discriminator 2 view .LVU1372
 4580 0002 0B4B     		ldr	r3, .L401
3065:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4581              		.loc 1 3065 1 discriminator 2 view .LVU1373
 4582 0004 10B5     		push	{r4, lr}
 4583              	.LCFI65:
 4584              		.cfi_def_cfa_offset 8
 4585              		.cfi_offset 4, -8
 4586              		.cfi_offset 14, -4
 4587 0006 0C46     		mov	r4, r1
3075:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4588              		.loc 1 3075 43 discriminator 2 view .LVU1374
 4589 0008 1968     		ldr	r1, [r3]
 4590              	.LVL292:
3075:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 3075 2 discriminator 2 view .LVU1375
 4592 000a 1831     		adds	r1, r1, #24
 4593 000c FFF7FEFF 		bl	vListInsert
 4594              	.LVL293:
3077:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4595              		.loc 1 3077 2 is_stmt 1 discriminator 2 view .LVU1376
 4596 0010 2046     		mov	r0, r4
 4597 0012 0121     		movs	r1, #1
3078:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4598              		.loc 1 3078 1 is_stmt 0 discriminator 2 view .LVU1377
 4599 0014 BDE81040 		pop	{r4, lr}
 4600              	.LCFI66:
 4601              		.cfi_restore 14
 4602              		.cfi_restore 4
 4603              		.cfi_def_cfa_offset 0
 4604              	.LVL294:
3077:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4605              		.loc 1 3077 2 discriminator 2 view .LVU1378
 4606 0018 FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 4607              	.LVL295:
 4608              	.L400:
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4609              		.loc 1 3066 2 is_stmt 1 view .LVU1379
 4610              	.LBB416:
 4611              	.LBI416:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4612              		.loc 2 191 30 view .LVU1380
 4613              	.LBB417:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4614              		.loc 2 193 1 view .LVU1381
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4615              		.loc 2 195 2 view .LVU1382
 4616              		.syntax unified
 4617              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 200


 4618 001c 4FF05003 			mov r3, #80												
 4619 0020 83F31188 		msr basepri, r3											
 4620 0024 BFF36F8F 		isb														
 4621 0028 BFF34F8F 		dsb														
 4622              	
 4623              	@ 0 "" 2
 4624              	.LVL296:
 4625              		.thumb
 4626              		.syntax unified
 4627              	.L397:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4628              		.loc 2 195 2 is_stmt 0 view .LVU1383
 4629              	.LBE417:
 4630              	.LBE416:
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4631              		.loc 1 3066 2 is_stmt 1 discriminator 1 view .LVU1384
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4632              		.loc 1 3066 2 discriminator 1 view .LVU1385
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4633              		.loc 1 3066 2 discriminator 1 view .LVU1386
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4634              		.loc 1 3066 2 discriminator 1 view .LVU1387
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4635              		.loc 1 3066 2 discriminator 1 view .LVU1388
3066:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4636              		.loc 1 3066 2 discriminator 1 view .LVU1389
 4637 002c FEE7     		b	.L397
 4638              	.L402:
 4639 002e 00BF     		.align	2
 4640              	.L401:
 4641 0030 00000000 		.word	.LANCHOR1
 4642              		.cfi_endproc
 4643              	.LFE31:
 4645              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4646              		.align	1
 4647              		.p2align 2,,3
 4648              		.global	vTaskPlaceOnUnorderedEventList
 4649              		.syntax unified
 4650              		.thumb
 4651              		.thumb_func
 4652              		.fpu fpv5-d16
 4654              	vTaskPlaceOnUnorderedEventList:
 4655              	.LVL297:
 4656              	.LFB32:
3082:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4657              		.loc 1 3082 1 view -0
 4658              		.cfi_startproc
 4659              		@ args = 0, pretend = 0, frame = 0
 4660              		@ frame_needed = 0, uses_anonymous_args = 0
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4661              		.loc 1 3083 2 view .LVU1391
 4662 0000 58B1     		cbz	r0, .L410
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4663              		.loc 1 3083 29 discriminator 2 view .LVU1392
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4664              		.loc 1 3087 2 discriminator 2 view .LVU1393
 4665 0002 134B     		ldr	r3, .L411
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 201


 4666 0004 1B68     		ldr	r3, [r3]
 4667 0006 8BB9     		cbnz	r3, .L406
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4668              		.loc 1 3087 2 view .LVU1394
 4669              	.LBB418:
 4670              	.LBI418:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4671              		.loc 2 191 30 view .LVU1395
 4672              	.LBB419:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4673              		.loc 2 193 1 view .LVU1396
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4674              		.loc 2 195 2 view .LVU1397
 4675              		.syntax unified
 4676              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4677 0008 4FF05003 			mov r3, #80												
 4678 000c 83F31188 		msr basepri, r3											
 4679 0010 BFF36F8F 		isb														
 4680 0014 BFF34F8F 		dsb														
 4681              	
 4682              	@ 0 "" 2
 4683              	.LVL298:
 4684              		.thumb
 4685              		.syntax unified
 4686              	.L407:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4687              		.loc 2 195 2 is_stmt 0 view .LVU1398
 4688              	.LBE419:
 4689              	.LBE418:
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4690              		.loc 1 3087 2 is_stmt 1 discriminator 2 view .LVU1399
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4691              		.loc 1 3087 2 discriminator 2 view .LVU1400
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4692              		.loc 1 3087 2 discriminator 2 view .LVU1401
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4693              		.loc 1 3087 2 discriminator 2 view .LVU1402
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4694              		.loc 1 3087 2 discriminator 2 view .LVU1403
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4695              		.loc 1 3087 2 discriminator 2 view .LVU1404
 4696 0018 FEE7     		b	.L407
 4697              	.L410:
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4698              		.loc 1 3083 2 view .LVU1405
 4699              	.LBB420:
 4700              	.LBI420:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4701              		.loc 2 191 30 view .LVU1406
 4702              	.LBB421:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4703              		.loc 2 193 1 view .LVU1407
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4704              		.loc 2 195 2 view .LVU1408
 4705              		.syntax unified
 4706              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4707 001a 4FF05003 			mov r3, #80												
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 202


 4708 001e 83F31188 		msr basepri, r3											
 4709 0022 BFF36F8F 		isb														
 4710 0026 BFF34F8F 		dsb														
 4711              	
 4712              	@ 0 "" 2
 4713              	.LVL299:
 4714              		.thumb
 4715              		.syntax unified
 4716              	.L405:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4717              		.loc 2 195 2 is_stmt 0 view .LVU1409
 4718              	.LBE421:
 4719              	.LBE420:
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4720              		.loc 1 3083 2 is_stmt 1 discriminator 1 view .LVU1410
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4721              		.loc 1 3083 2 discriminator 1 view .LVU1411
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4722              		.loc 1 3083 2 discriminator 1 view .LVU1412
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4723              		.loc 1 3083 2 discriminator 1 view .LVU1413
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4724              		.loc 1 3083 2 discriminator 1 view .LVU1414
3083:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4725              		.loc 1 3083 2 discriminator 1 view .LVU1415
 4726 002a FEE7     		b	.L405
 4727              	.L406:
3087:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4728              		.loc 1 3087 43 discriminator 2 view .LVU1416
3092:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4729              		.loc 1 3092 2 discriminator 2 view .LVU1417
 4730 002c 094B     		ldr	r3, .L411+4
 4731 002e 41F00041 		orr	r1, r1, #-2147483648
 4732              	.LVL300:
3082:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4733              		.loc 1 3082 1 is_stmt 0 discriminator 2 view .LVU1418
 4734 0032 10B5     		push	{r4, lr}
 4735              	.LCFI67:
 4736              		.cfi_def_cfa_offset 8
 4737              		.cfi_offset 4, -8
 4738              		.cfi_offset 14, -4
 4739 0034 1446     		mov	r4, r2
3092:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4740              		.loc 1 3092 2 discriminator 2 view .LVU1419
 4741 0036 1A68     		ldr	r2, [r3]
 4742              	.LVL301:
3099:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4743              		.loc 1 3099 46 discriminator 2 view .LVU1420
 4744 0038 1B68     		ldr	r3, [r3]
3092:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4745              		.loc 1 3092 2 discriminator 2 view .LVU1421
 4746 003a 9161     		str	r1, [r2, #24]
3099:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 3099 2 is_stmt 1 discriminator 2 view .LVU1422
 4748 003c 03F11801 		add	r1, r3, #24
 4749 0040 FFF7FEFF 		bl	vListInsertEnd
 4750              	.LVL302:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 203


3101:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4751              		.loc 1 3101 2 discriminator 2 view .LVU1423
 4752 0044 2046     		mov	r0, r4
 4753 0046 0121     		movs	r1, #1
3102:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4754              		.loc 1 3102 1 is_stmt 0 discriminator 2 view .LVU1424
 4755 0048 BDE81040 		pop	{r4, lr}
 4756              	.LCFI68:
 4757              		.cfi_restore 14
 4758              		.cfi_restore 4
 4759              		.cfi_def_cfa_offset 0
 4760              	.LVL303:
3101:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4761              		.loc 1 3101 2 discriminator 2 view .LVU1425
 4762 004c FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 4763              	.LVL304:
 4764              	.L412:
3101:.//Libraries/FreeRTOS/Source/tasks.c **** }
 4765              		.loc 1 3101 2 discriminator 2 view .LVU1426
 4766              		.align	2
 4767              	.L411:
 4768 0050 00000000 		.word	.LANCHOR18
 4769 0054 00000000 		.word	.LANCHOR1
 4770              		.cfi_endproc
 4771              	.LFE32:
 4773              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4774              		.align	1
 4775              		.p2align 2,,3
 4776              		.global	vTaskPlaceOnEventListRestricted
 4777              		.syntax unified
 4778              		.thumb
 4779              		.thumb_func
 4780              		.fpu fpv5-d16
 4782              	vTaskPlaceOnEventListRestricted:
 4783              	.LVL305:
 4784              	.LFB33:
3108:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4785              		.loc 1 3108 2 is_stmt 1 view -0
 4786              		.cfi_startproc
 4787              		@ args = 0, pretend = 0, frame = 0
 4788              		@ frame_needed = 0, uses_anonymous_args = 0
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4789              		.loc 1 3109 3 view .LVU1428
3108:.//Libraries/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4790              		.loc 1 3108 2 is_stmt 0 view .LVU1429
 4791 0000 38B5     		push	{r3, r4, r5, lr}
 4792              	.LCFI69:
 4793              		.cfi_def_cfa_offset 16
 4794              		.cfi_offset 3, -16
 4795              		.cfi_offset 4, -12
 4796              		.cfi_offset 5, -8
 4797              		.cfi_offset 14, -4
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4798              		.loc 1 3109 3 view .LVU1430
 4799 0002 80B1     		cbz	r0, .L420
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4800              		.loc 1 3109 30 is_stmt 1 discriminator 2 view .LVU1431
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 204


3121:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4801              		.loc 1 3121 3 discriminator 2 view .LVU1432
3121:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4802              		.loc 1 3121 47 is_stmt 0 discriminator 2 view .LVU1433
 4803 0004 0C4B     		ldr	r3, .L421
 4804 0006 0D46     		mov	r5, r1
 4805 0008 1446     		mov	r4, r2
 4806 000a 1968     		ldr	r1, [r3]
 4807              	.LVL306:
3121:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4808              		.loc 1 3121 3 discriminator 2 view .LVU1434
 4809 000c 1831     		adds	r1, r1, #24
 4810 000e FFF7FEFF 		bl	vListInsertEnd
 4811              	.LVL307:
3126:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 4812              		.loc 1 3126 3 is_stmt 1 discriminator 2 view .LVU1435
3128:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 4813              		.loc 1 3128 17 is_stmt 0 discriminator 2 view .LVU1436
 4814 0012 002C     		cmp	r4, #0
 4815              	.LVL308:
3131:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4816              		.loc 1 3131 57 is_stmt 1 discriminator 2 view .LVU1437
3132:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4817              		.loc 1 3132 3 discriminator 2 view .LVU1438
 4818 0014 2146     		mov	r1, r4
 4819 0016 0CBF     		ite	eq
 4820 0018 2846     		moveq	r0, r5
 4821 001a 4FF0FF30 		movne	r0, #-1
3133:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4822              		.loc 1 3133 2 is_stmt 0 discriminator 2 view .LVU1439
 4823 001e BDE83840 		pop	{r3, r4, r5, lr}
 4824              	.LCFI70:
 4825              		.cfi_remember_state
 4826              		.cfi_restore 14
 4827              		.cfi_restore 5
 4828              		.cfi_restore 4
 4829              		.cfi_restore 3
 4830              		.cfi_def_cfa_offset 0
 4831              	.LVL309:
3132:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4832              		.loc 1 3132 3 discriminator 2 view .LVU1440
 4833 0022 FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 4834              	.LVL310:
 4835              	.L420:
 4836              	.LCFI71:
 4837              		.cfi_restore_state
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4838              		.loc 1 3109 3 is_stmt 1 view .LVU1441
 4839              	.LBB422:
 4840              	.LBI422:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4841              		.loc 2 191 30 view .LVU1442
 4842              	.LBB423:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4843              		.loc 2 193 1 view .LVU1443
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4844              		.loc 2 195 2 view .LVU1444
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 205


 4845              		.syntax unified
 4846              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4847 0026 4FF05003 			mov r3, #80												
 4848 002a 83F31188 		msr basepri, r3											
 4849 002e BFF36F8F 		isb														
 4850 0032 BFF34F8F 		dsb														
 4851              	
 4852              	@ 0 "" 2
 4853              	.LVL311:
 4854              		.thumb
 4855              		.syntax unified
 4856              	.L415:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4857              		.loc 2 195 2 is_stmt 0 view .LVU1445
 4858              	.LBE423:
 4859              	.LBE422:
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4860              		.loc 1 3109 3 is_stmt 1 discriminator 1 view .LVU1446
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4861              		.loc 1 3109 3 discriminator 1 view .LVU1447
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4862              		.loc 1 3109 3 discriminator 1 view .LVU1448
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4863              		.loc 1 3109 3 discriminator 1 view .LVU1449
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4864              		.loc 1 3109 3 discriminator 1 view .LVU1450
3109:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4865              		.loc 1 3109 3 discriminator 1 view .LVU1451
 4866 0036 FEE7     		b	.L415
 4867              	.L422:
 4868              		.align	2
 4869              	.L421:
 4870 0038 00000000 		.word	.LANCHOR1
 4871              		.cfi_endproc
 4872              	.LFE33:
 4874              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4875              		.align	1
 4876              		.p2align 2,,3
 4877              		.global	xTaskRemoveFromEventList
 4878              		.syntax unified
 4879              		.thumb
 4880              		.thumb_func
 4881              		.fpu fpv5-d16
 4883              	xTaskRemoveFromEventList:
 4884              	.LVL312:
 4885              	.LFB34:
3139:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4886              		.loc 1 3139 1 view -0
 4887              		.cfi_startproc
 4888              		@ args = 0, pretend = 0, frame = 8
 4889              		@ frame_needed = 0, uses_anonymous_args = 0
3140:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4890              		.loc 1 3140 1 view .LVU1453
3141:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4891              		.loc 1 3141 1 view .LVU1454
3156:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4892              		.loc 1 3156 2 view .LVU1455
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 206


3156:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4893              		.loc 1 3156 17 is_stmt 0 view .LVU1456
 4894 0000 C368     		ldr	r3, [r0, #12]
3139:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4895              		.loc 1 3139 1 view .LVU1457
 4896 0002 10B5     		push	{r4, lr}
 4897              	.LCFI72:
 4898              		.cfi_def_cfa_offset 8
 4899              		.cfi_offset 4, -8
 4900              		.cfi_offset 14, -4
3156:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4901              		.loc 1 3156 17 view .LVU1458
 4902 0004 DC68     		ldr	r4, [r3, #12]
 4903              	.LVL313:
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4904              		.loc 1 3157 2 is_stmt 1 view .LVU1459
3139:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4905              		.loc 1 3139 1 is_stmt 0 view .LVU1460
 4906 0006 82B0     		sub	sp, sp, #8
 4907              	.LCFI73:
 4908              		.cfi_def_cfa_offset 16
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4909              		.loc 1 3157 2 view .LVU1461
 4910 0008 5CB3     		cbz	r4, .L432
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4911              		.loc 1 3157 32 is_stmt 1 discriminator 2 view .LVU1462
3158:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4912              		.loc 1 3158 2 discriminator 2 view .LVU1463
3158:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4913              		.loc 1 3158 11 is_stmt 0 discriminator 2 view .LVU1464
 4914 000a 04F11801 		add	r1, r4, #24
 4915 000e 0846     		mov	r0, r1
 4916              	.LVL314:
3158:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4917              		.loc 1 3158 11 discriminator 2 view .LVU1465
 4918 0010 0191     		str	r1, [sp, #4]
 4919 0012 FFF7FEFF 		bl	uxListRemove
 4920              	.LVL315:
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4921              		.loc 1 3160 2 is_stmt 1 discriminator 2 view .LVU1466
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4922              		.loc 1 3160 27 is_stmt 0 discriminator 2 view .LVU1467
 4923 0016 194B     		ldr	r3, .L434
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4924              		.loc 1 3160 4 discriminator 2 view .LVU1468
 4925 0018 0199     		ldr	r1, [sp, #4]
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4926              		.loc 1 3160 27 discriminator 2 view .LVU1469
 4927 001a 1B68     		ldr	r3, [r3]
3160:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4928              		.loc 1 3160 4 discriminator 2 view .LVU1470
 4929 001c 6BB1     		cbz	r3, .L433
3183:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4930              		.loc 1 3183 3 is_stmt 1 view .LVU1471
 4931 001e 1848     		ldr	r0, .L434+4
 4932 0020 FFF7FEFF 		bl	vListInsertEnd
 4933              	.LVL316:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 207


 4934              	.L428:
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4935              		.loc 1 3186 2 view .LVU1472
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4936              		.loc 1 3186 47 is_stmt 0 view .LVU1473
 4937 0024 174B     		ldr	r3, .L434+8
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4938              		.loc 1 3186 4 view .LVU1474
 4939 0026 E26A     		ldr	r2, [r4, #44]
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4940              		.loc 1 3186 47 view .LVU1475
 4941 0028 1B68     		ldr	r3, [r3]
3186:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 4942              		.loc 1 3186 4 view .LVU1476
 4943 002a DB6A     		ldr	r3, [r3, #44]
 4944 002c 9A42     		cmp	r2, r3
 4945 002e 21D9     		bls	.L430
3191:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4946              		.loc 1 3191 3 is_stmt 1 view .LVU1477
 4947              	.LVL317:
3195:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4948              		.loc 1 3195 3 view .LVU1478
3195:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 4949              		.loc 1 3195 17 is_stmt 0 view .LVU1479
 4950 0030 0120     		movs	r0, #1
 4951 0032 154B     		ldr	r3, .L434+12
 4952 0034 1860     		str	r0, [r3]
3203:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4953              		.loc 1 3203 1 view .LVU1480
 4954 0036 02B0     		add	sp, sp, #8
 4955              	.LCFI74:
 4956              		.cfi_remember_state
 4957              		.cfi_def_cfa_offset 8
 4958              		@ sp needed
 4959 0038 10BD     		pop	{r4, pc}
 4960              	.LVL318:
 4961              	.L433:
 4962              	.LCFI75:
 4963              		.cfi_restore_state
3162:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4964              		.loc 1 3162 3 is_stmt 1 view .LVU1481
3162:.//Libraries/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4965              		.loc 1 3162 12 is_stmt 0 view .LVU1482
 4966 003a 211D     		adds	r1, r4, #4
 4967 003c 0846     		mov	r0, r1
 4968 003e 0191     		str	r1, [sp, #4]
 4969 0040 FFF7FEFF 		bl	uxListRemove
 4970              	.LVL319:
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4971              		.loc 1 3163 3 is_stmt 1 view .LVU1483
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4972              		.loc 1 3163 3 view .LVU1484
 4973 0044 114B     		ldr	r3, .L434+16
 4974 0046 E06A     		ldr	r0, [r4, #44]
 4975 0048 1A68     		ldr	r2, [r3]
 4976 004a 0199     		ldr	r1, [sp, #4]
 4977 004c 9042     		cmp	r0, r2
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 208


 4978 004e 00D9     		bls	.L427
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4979              		.loc 1 3163 3 discriminator 1 view .LVU1485
 4980 0050 1860     		str	r0, [r3]
 4981              	.L427:
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4982              		.loc 1 3163 3 discriminator 3 view .LVU1486
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4983              		.loc 1 3163 3 discriminator 3 view .LVU1487
 4984 0052 0F4B     		ldr	r3, .L434+20
 4985 0054 00EB8000 		add	r0, r0, r0, lsl #2
 4986 0058 03EB8000 		add	r0, r3, r0, lsl #2
 4987 005c FFF7FEFF 		bl	vListInsertEnd
 4988              	.LVL320:
3163:.//Libraries/FreeRTOS/Source/tasks.c **** 
 4989              		.loc 1 3163 42 discriminator 3 view .LVU1488
 4990 0060 E0E7     		b	.L428
 4991              	.LVL321:
 4992              	.L432:
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4993              		.loc 1 3157 2 view .LVU1489
 4994              	.LBB424:
 4995              	.LBI424:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4996              		.loc 2 191 30 view .LVU1490
 4997              	.LBB425:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4998              		.loc 2 193 1 view .LVU1491
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4999              		.loc 2 195 2 view .LVU1492
 5000              		.syntax unified
 5001              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5002 0062 4FF05003 			mov r3, #80												
 5003 0066 83F31188 		msr basepri, r3											
 5004 006a BFF36F8F 		isb														
 5005 006e BFF34F8F 		dsb														
 5006              	
 5007              	@ 0 "" 2
 5008              	.LVL322:
 5009              		.thumb
 5010              		.syntax unified
 5011              	.L425:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5012              		.loc 2 195 2 is_stmt 0 view .LVU1493
 5013              	.LBE425:
 5014              	.LBE424:
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5015              		.loc 1 3157 2 is_stmt 1 discriminator 1 view .LVU1494
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5016              		.loc 1 3157 2 discriminator 1 view .LVU1495
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5017              		.loc 1 3157 2 discriminator 1 view .LVU1496
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5018              		.loc 1 3157 2 discriminator 1 view .LVU1497
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5019              		.loc 1 3157 2 discriminator 1 view .LVU1498
3157:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 209


 5020              		.loc 1 3157 2 discriminator 1 view .LVU1499
 5021 0072 FEE7     		b	.L425
 5022              	.LVL323:
 5023              	.L430:
3199:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 5024              		.loc 1 3199 11 is_stmt 0 view .LVU1500
 5025 0074 0020     		movs	r0, #0
 5026              	.LVL324:
3202:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5027              		.loc 1 3202 2 is_stmt 1 view .LVU1501
3203:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5028              		.loc 1 3203 1 is_stmt 0 view .LVU1502
 5029 0076 02B0     		add	sp, sp, #8
 5030              	.LCFI76:
 5031              		.cfi_def_cfa_offset 8
 5032              		@ sp needed
 5033 0078 10BD     		pop	{r4, pc}
 5034              	.LVL325:
 5035              	.L435:
3203:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5036              		.loc 1 3203 1 view .LVU1503
 5037 007a 00BF     		.align	2
 5038              	.L434:
 5039 007c 00000000 		.word	.LANCHOR18
 5040 0080 00000000 		.word	.LANCHOR5
 5041 0084 00000000 		.word	.LANCHOR1
 5042 0088 00000000 		.word	.LANCHOR17
 5043 008c 00000000 		.word	.LANCHOR12
 5044 0090 00000000 		.word	.LANCHOR2
 5045              		.cfi_endproc
 5046              	.LFE34:
 5048              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 5049              		.align	1
 5050              		.p2align 2,,3
 5051              		.global	vTaskRemoveFromUnorderedEventList
 5052              		.syntax unified
 5053              		.thumb
 5054              		.thumb_func
 5055              		.fpu fpv5-d16
 5057              	vTaskRemoveFromUnorderedEventList:
 5058              	.LVL326:
 5059              	.LFB35:
3207:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 5060              		.loc 1 3207 1 is_stmt 1 view -0
 5061              		.cfi_startproc
 5062              		@ args = 0, pretend = 0, frame = 0
 5063              		@ frame_needed = 0, uses_anonymous_args = 0
3208:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5064              		.loc 1 3208 1 view .LVU1505
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5065              		.loc 1 3212 2 view .LVU1506
 5066 0000 1C4A     		ldr	r2, .L445
 5067 0002 1268     		ldr	r2, [r2]
3207:.//Libraries/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 5068              		.loc 1 3207 1 is_stmt 0 view .LVU1507
 5069 0004 38B5     		push	{r3, r4, r5, lr}
 5070              	.LCFI77:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 210


 5071              		.cfi_def_cfa_offset 16
 5072              		.cfi_offset 3, -16
 5073              		.cfi_offset 4, -12
 5074              		.cfi_offset 5, -8
 5075              		.cfi_offset 14, -4
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5076              		.loc 1 3212 2 view .LVU1508
 5077 0006 42B9     		cbnz	r2, .L437
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5078              		.loc 1 3212 2 is_stmt 1 view .LVU1509
 5079              	.LBB426:
 5080              	.LBI426:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5081              		.loc 2 191 30 view .LVU1510
 5082              	.LBB427:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5083              		.loc 2 193 1 view .LVU1511
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5084              		.loc 2 195 2 view .LVU1512
 5085              		.syntax unified
 5086              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5087 0008 4FF05003 			mov r3, #80												
 5088 000c 83F31188 		msr basepri, r3											
 5089 0010 BFF36F8F 		isb														
 5090 0014 BFF34F8F 		dsb														
 5091              	
 5092              	@ 0 "" 2
 5093              	.LVL327:
 5094              		.thumb
 5095              		.syntax unified
 5096              	.L438:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5097              		.loc 2 195 2 is_stmt 0 view .LVU1513
 5098              	.LBE427:
 5099              	.LBE426:
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5100              		.loc 1 3212 2 is_stmt 1 discriminator 1 view .LVU1514
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5101              		.loc 1 3212 2 discriminator 1 view .LVU1515
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5102              		.loc 1 3212 2 discriminator 1 view .LVU1516
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5103              		.loc 1 3212 2 discriminator 1 view .LVU1517
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5104              		.loc 1 3212 2 discriminator 1 view .LVU1518
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5105              		.loc 1 3212 2 discriminator 1 view .LVU1519
 5106 0018 FEE7     		b	.L438
 5107              	.L437:
3212:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5108              		.loc 1 3212 49 discriminator 2 view .LVU1520
3215:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5109              		.loc 1 3215 2 discriminator 2 view .LVU1521
 5110 001a 41F00041 		orr	r1, r1, #-2147483648
 5111              	.LVL328:
3219:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 5112              		.loc 1 3219 17 is_stmt 0 discriminator 2 view .LVU1522
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 211


 5113 001e C468     		ldr	r4, [r0, #12]
3215:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5114              		.loc 1 3215 2 discriminator 2 view .LVU1523
 5115 0020 0160     		str	r1, [r0]
3219:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 5116              		.loc 1 3219 2 is_stmt 1 discriminator 2 view .LVU1524
 5117              	.LVL329:
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5118              		.loc 1 3220 2 discriminator 2 view .LVU1525
 5119 0022 ECB1     		cbz	r4, .L444
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5120              		.loc 1 3220 32 discriminator 2 view .LVU1526
3221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5121              		.loc 1 3221 2 discriminator 2 view .LVU1527
3240:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5122              		.loc 1 3240 11 is_stmt 0 discriminator 2 view .LVU1528
 5123 0024 251D     		adds	r5, r4, #4
3221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5124              		.loc 1 3221 11 discriminator 2 view .LVU1529
 5125 0026 FFF7FEFF 		bl	uxListRemove
 5126              	.LVL330:
3240:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5127              		.loc 1 3240 2 is_stmt 1 discriminator 2 view .LVU1530
3240:.//Libraries/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5128              		.loc 1 3240 11 is_stmt 0 discriminator 2 view .LVU1531
 5129 002a 2846     		mov	r0, r5
 5130 002c FFF7FEFF 		bl	uxListRemove
 5131              	.LVL331:
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5132              		.loc 1 3241 2 is_stmt 1 discriminator 2 view .LVU1532
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5133              		.loc 1 3241 2 discriminator 2 view .LVU1533
 5134 0030 114B     		ldr	r3, .L445+4
 5135 0032 E06A     		ldr	r0, [r4, #44]
 5136 0034 1A68     		ldr	r2, [r3]
 5137 0036 9042     		cmp	r0, r2
 5138 0038 00D9     		bls	.L441
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5139              		.loc 1 3241 2 discriminator 1 view .LVU1534
 5140 003a 1860     		str	r0, [r3]
 5141              	.L441:
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5142              		.loc 1 3241 2 discriminator 3 view .LVU1535
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5143              		.loc 1 3241 2 discriminator 3 view .LVU1536
 5144 003c 0F4B     		ldr	r3, .L445+8
 5145 003e 00EB8000 		add	r0, r0, r0, lsl #2
 5146 0042 2946     		mov	r1, r5
 5147 0044 03EB8000 		add	r0, r3, r0, lsl #2
 5148 0048 FFF7FEFF 		bl	vListInsertEnd
 5149              	.LVL332:
3241:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5150              		.loc 1 3241 41 discriminator 3 view .LVU1537
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5151              		.loc 1 3243 2 discriminator 3 view .LVU1538
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5152              		.loc 1 3243 47 is_stmt 0 discriminator 3 view .LVU1539
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 212


 5153 004c 0C4B     		ldr	r3, .L445+12
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5154              		.loc 1 3243 4 discriminator 3 view .LVU1540
 5155 004e E26A     		ldr	r2, [r4, #44]
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5156              		.loc 1 3243 47 discriminator 3 view .LVU1541
 5157 0050 1B68     		ldr	r3, [r3]
3243:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5158              		.loc 1 3243 4 discriminator 3 view .LVU1542
 5159 0052 DB6A     		ldr	r3, [r3, #44]
 5160 0054 9A42     		cmp	r2, r3
 5161 0056 02D9     		bls	.L436
3249:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 5162              		.loc 1 3249 3 is_stmt 1 view .LVU1543
3249:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 5163              		.loc 1 3249 17 is_stmt 0 view .LVU1544
 5164 0058 0A4B     		ldr	r3, .L445+16
 5165 005a 0122     		movs	r2, #1
 5166 005c 1A60     		str	r2, [r3]
 5167              	.L436:
3251:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5168              		.loc 1 3251 1 view .LVU1545
 5169 005e 38BD     		pop	{r3, r4, r5, pc}
 5170              	.LVL333:
 5171              	.L444:
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5172              		.loc 1 3220 2 is_stmt 1 view .LVU1546
 5173              	.LBB428:
 5174              	.LBI428:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5175              		.loc 2 191 30 view .LVU1547
 5176              	.LBB429:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5177              		.loc 2 193 1 view .LVU1548
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5178              		.loc 2 195 2 view .LVU1549
 5179              		.syntax unified
 5180              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5181 0060 4FF05003 			mov r3, #80												
 5182 0064 83F31188 		msr basepri, r3											
 5183 0068 BFF36F8F 		isb														
 5184 006c BFF34F8F 		dsb														
 5185              	
 5186              	@ 0 "" 2
 5187              	.LVL334:
 5188              		.thumb
 5189              		.syntax unified
 5190              	.L440:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5191              		.loc 2 195 2 is_stmt 0 view .LVU1550
 5192              	.LBE429:
 5193              	.LBE428:
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5194              		.loc 1 3220 2 is_stmt 1 discriminator 2 view .LVU1551
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5195              		.loc 1 3220 2 discriminator 2 view .LVU1552
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 213


 5196              		.loc 1 3220 2 discriminator 2 view .LVU1553
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5197              		.loc 1 3220 2 discriminator 2 view .LVU1554
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5198              		.loc 1 3220 2 discriminator 2 view .LVU1555
3220:.//Libraries/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5199              		.loc 1 3220 2 discriminator 2 view .LVU1556
 5200 0070 FEE7     		b	.L440
 5201              	.L446:
 5202 0072 00BF     		.align	2
 5203              	.L445:
 5204 0074 00000000 		.word	.LANCHOR18
 5205 0078 00000000 		.word	.LANCHOR12
 5206 007c 00000000 		.word	.LANCHOR2
 5207 0080 00000000 		.word	.LANCHOR1
 5208 0084 00000000 		.word	.LANCHOR17
 5209              		.cfi_endproc
 5210              	.LFE35:
 5212              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5213              		.align	1
 5214              		.p2align 2,,3
 5215              		.global	vTaskSetTimeOutState
 5216              		.syntax unified
 5217              		.thumb
 5218              		.thumb_func
 5219              		.fpu fpv5-d16
 5221              	vTaskSetTimeOutState:
 5222              	.LVL335:
 5223              	.LFB36:
3255:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5224              		.loc 1 3255 1 view -0
 5225              		.cfi_startproc
 5226              		@ args = 0, pretend = 0, frame = 0
 5227              		@ frame_needed = 0, uses_anonymous_args = 0
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5228              		.loc 1 3256 2 view .LVU1558
 5229 0000 68B1     		cbz	r0, .L452
3255:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5230              		.loc 1 3255 1 is_stmt 0 discriminator 2 view .LVU1559
 5231 0002 10B5     		push	{r4, lr}
 5232              	.LCFI78:
 5233              		.cfi_def_cfa_offset 8
 5234              		.cfi_offset 4, -8
 5235              		.cfi_offset 14, -4
 5236 0004 0446     		mov	r4, r0
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5237              		.loc 1 3256 27 is_stmt 1 discriminator 2 view .LVU1560
3257:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5238              		.loc 1 3257 2 discriminator 2 view .LVU1561
 5239 0006 FFF7FEFF 		bl	vPortEnterCritical
 5240              	.LVL336:
3259:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 5241              		.loc 1 3259 3 discriminator 2 view .LVU1562
3259:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 5242              		.loc 1 3259 29 is_stmt 0 discriminator 2 view .LVU1563
 5243 000a 094A     		ldr	r2, .L453
3260:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 214


 5244              		.loc 1 3260 30 discriminator 2 view .LVU1564
 5245 000c 094B     		ldr	r3, .L453+4
3259:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 5246              		.loc 1 3259 29 discriminator 2 view .LVU1565
 5247 000e 1268     		ldr	r2, [r2]
3260:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 5248              		.loc 1 3260 30 discriminator 2 view .LVU1566
 5249 0010 1B68     		ldr	r3, [r3]
 5250 0012 C4E90023 		strd	r2, r3, [r4]
3262:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5251              		.loc 1 3262 2 is_stmt 1 discriminator 2 view .LVU1567
3263:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5252              		.loc 1 3263 1 is_stmt 0 discriminator 2 view .LVU1568
 5253 0016 BDE81040 		pop	{r4, lr}
 5254              	.LCFI79:
 5255              		.cfi_restore 14
 5256              		.cfi_restore 4
 5257              		.cfi_def_cfa_offset 0
 5258              	.LVL337:
3262:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5259              		.loc 1 3262 2 discriminator 2 view .LVU1569
 5260 001a FFF7FEBF 		b	vPortExitCritical
 5261              	.LVL338:
 5262              	.L452:
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5263              		.loc 1 3256 2 is_stmt 1 view .LVU1570
 5264              	.LBB430:
 5265              	.LBI430:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5266              		.loc 2 191 30 view .LVU1571
 5267              	.LBB431:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5268              		.loc 2 193 1 view .LVU1572
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5269              		.loc 2 195 2 view .LVU1573
 5270              		.syntax unified
 5271              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5272 001e 4FF05003 			mov r3, #80												
 5273 0022 83F31188 		msr basepri, r3											
 5274 0026 BFF36F8F 		isb														
 5275 002a BFF34F8F 		dsb														
 5276              	
 5277              	@ 0 "" 2
 5278              	.LVL339:
 5279              		.thumb
 5280              		.syntax unified
 5281              	.L449:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5282              		.loc 2 195 2 is_stmt 0 view .LVU1574
 5283              	.LBE431:
 5284              	.LBE430:
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5285              		.loc 1 3256 2 is_stmt 1 discriminator 1 view .LVU1575
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5286              		.loc 1 3256 2 discriminator 1 view .LVU1576
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5287              		.loc 1 3256 2 discriminator 1 view .LVU1577
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 215


3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5288              		.loc 1 3256 2 discriminator 1 view .LVU1578
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5289              		.loc 1 3256 2 discriminator 1 view .LVU1579
3256:.//Libraries/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5290              		.loc 1 3256 2 discriminator 1 view .LVU1580
 5291 002e FEE7     		b	.L449
 5292              	.L454:
 5293              		.align	2
 5294              	.L453:
 5295 0030 00000000 		.word	.LANCHOR16
 5296 0034 00000000 		.word	.LANCHOR15
 5297              		.cfi_endproc
 5298              	.LFE36:
 5300              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5301              		.align	1
 5302              		.p2align 2,,3
 5303              		.global	vTaskInternalSetTimeOutState
 5304              		.syntax unified
 5305              		.thumb
 5306              		.thumb_func
 5307              		.fpu fpv5-d16
 5309              	vTaskInternalSetTimeOutState:
 5310              	.LVL340:
 5311              	.LFB37:
3267:.//Libraries/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 5312              		.loc 1 3267 1 view -0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 0
 5315              		@ frame_needed = 0, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5317              		.loc 1 3269 2 view .LVU1582
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5318              		.loc 1 3269 28 is_stmt 0 view .LVU1583
 5319 0000 034A     		ldr	r2, .L456
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5320              		.loc 1 3270 29 view .LVU1584
 5321 0002 044B     		ldr	r3, .L456+4
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5322              		.loc 1 3269 28 view .LVU1585
 5323 0004 1268     		ldr	r2, [r2]
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5324              		.loc 1 3270 29 view .LVU1586
 5325 0006 1B68     		ldr	r3, [r3]
 5326 0008 C0E90023 		strd	r2, r3, [r0]
3271:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5327              		.loc 1 3271 1 view .LVU1587
 5328 000c 7047     		bx	lr
 5329              	.L457:
 5330 000e 00BF     		.align	2
 5331              	.L456:
 5332 0010 00000000 		.word	.LANCHOR16
 5333 0014 00000000 		.word	.LANCHOR15
 5334              		.cfi_endproc
 5335              	.LFE37:
 5337              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 216


 5338              		.align	1
 5339              		.p2align 2,,3
 5340              		.global	xTaskCheckForTimeOut
 5341              		.syntax unified
 5342              		.thumb
 5343              		.thumb_func
 5344              		.fpu fpv5-d16
 5346              	xTaskCheckForTimeOut:
 5347              	.LVL341:
 5348              	.LFB38:
3275:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 5349              		.loc 1 3275 1 is_stmt 1 view -0
 5350              		.cfi_startproc
 5351              		@ args = 0, pretend = 0, frame = 0
 5352              		@ frame_needed = 0, uses_anonymous_args = 0
3276:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5353              		.loc 1 3276 1 view .LVU1589
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5354              		.loc 1 3278 2 view .LVU1590
3275:.//Libraries/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 5355              		.loc 1 3275 1 is_stmt 0 view .LVU1591
 5356 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5357              	.LCFI80:
 5358              		.cfi_def_cfa_offset 24
 5359              		.cfi_offset 3, -24
 5360              		.cfi_offset 4, -20
 5361              		.cfi_offset 5, -16
 5362              		.cfi_offset 6, -12
 5363              		.cfi_offset 7, -8
 5364              		.cfi_offset 14, -4
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5365              		.loc 1 3278 2 view .LVU1592
 5366 0002 08B3     		cbz	r0, .L473
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5367              		.loc 1 3278 27 is_stmt 1 discriminator 2 view .LVU1593
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5368              		.loc 1 3279 2 discriminator 2 view .LVU1594
 5369 0004 0D46     		mov	r5, r1
 5370 0006 B1B1     		cbz	r1, .L474
 5371 0008 0446     		mov	r4, r0
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5372              		.loc 1 3279 31 discriminator 2 view .LVU1595
3281:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5373              		.loc 1 3281 2 discriminator 2 view .LVU1596
 5374 000a FFF7FEFF 		bl	vPortEnterCritical
 5375              	.LVL342:
 5376              	.LBB432:
3284:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5377              		.loc 1 3284 3 discriminator 2 view .LVU1597
3299:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5378              		.loc 1 3299 8 is_stmt 0 discriminator 2 view .LVU1598
 5379 000e 2B68     		ldr	r3, [r5]
3284:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5380              		.loc 1 3284 20 discriminator 2 view .LVU1599
 5381 0010 DFF878C0 		ldr	ip, .L475+4
3299:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5382              		.loc 1 3299 6 discriminator 2 view .LVU1600
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 217


 5383 0014 5A1C     		adds	r2, r3, #1
3284:.//Libraries/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5384              		.loc 1 3284 20 discriminator 2 view .LVU1601
 5385 0016 DCF80010 		ldr	r1, [ip]
 5386              	.LVL343:
3285:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5387              		.loc 1 3285 3 is_stmt 1 discriminator 2 view .LVU1602
3299:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5388              		.loc 1 3299 4 discriminator 2 view .LVU1603
3299:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5389              		.loc 1 3299 6 is_stmt 0 discriminator 2 view .LVU1604
 5390 001a 2BD0     		beq	.L466
3309:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5391              		.loc 1 3309 25 view .LVU1605
 5392 001c 1A4E     		ldr	r6, .L475
3309:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5393              		.loc 1 3309 56 view .LVU1606
 5394 001e D4E90002 		ldrd	r0, r2, [r4]
3309:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5395              		.loc 1 3309 25 view .LVU1607
 5396 0022 3768     		ldr	r7, [r6]
3309:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5397              		.loc 1 3309 56 view .LVU1608
 5398 0024 B842     		cmp	r0, r7
 5399 0026 18D0     		beq	.L468
 5400 0028 8A42     		cmp	r2, r1
 5401 002a 16D8     		bhi	.L468
3316:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5402              		.loc 1 3316 12 view .LVU1609
 5403 002c 0126     		movs	r6, #1
 5404              	.LVL344:
 5405              	.L463:
3316:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5406              		.loc 1 3316 12 view .LVU1610
 5407              	.LBE432:
3331:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5408              		.loc 1 3331 2 is_stmt 1 view .LVU1611
 5409 002e FFF7FEFF 		bl	vPortExitCritical
 5410              	.LVL345:
3333:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5411              		.loc 1 3333 2 view .LVU1612
3334:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5412              		.loc 1 3334 1 is_stmt 0 view .LVU1613
 5413 0032 3046     		mov	r0, r6
 5414 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5415              	.LVL346:
 5416              	.L474:
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5417              		.loc 1 3279 2 is_stmt 1 view .LVU1614
 5418              	.LBB437:
 5419              	.LBI437:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5420              		.loc 2 191 30 view .LVU1615
 5421              	.LBB438:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5422              		.loc 2 193 1 view .LVU1616
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 218


 5423              		.loc 2 195 2 view .LVU1617
 5424              		.syntax unified
 5425              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5426 0036 4FF05003 			mov r3, #80												
 5427 003a 83F31188 		msr basepri, r3											
 5428 003e BFF36F8F 		isb														
 5429 0042 BFF34F8F 		dsb														
 5430              	
 5431              	@ 0 "" 2
 5432              	.LVL347:
 5433              		.thumb
 5434              		.syntax unified
 5435              	.L462:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5436              		.loc 2 195 2 is_stmt 0 view .LVU1618
 5437              	.LBE438:
 5438              	.LBE437:
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5439              		.loc 1 3279 2 is_stmt 1 discriminator 2 view .LVU1619
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5440              		.loc 1 3279 2 discriminator 2 view .LVU1620
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5441              		.loc 1 3279 2 discriminator 2 view .LVU1621
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5442              		.loc 1 3279 2 discriminator 2 view .LVU1622
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5443              		.loc 1 3279 2 discriminator 2 view .LVU1623
3279:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5444              		.loc 1 3279 2 discriminator 2 view .LVU1624
 5445 0046 FEE7     		b	.L462
 5446              	.L473:
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5447              		.loc 1 3278 2 view .LVU1625
 5448              	.LBB439:
 5449              	.LBI439:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5450              		.loc 2 191 30 view .LVU1626
 5451              	.LBB440:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5452              		.loc 2 193 1 view .LVU1627
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5453              		.loc 2 195 2 view .LVU1628
 5454              		.syntax unified
 5455              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5456 0048 4FF05003 			mov r3, #80												
 5457 004c 83F31188 		msr basepri, r3											
 5458 0050 BFF36F8F 		isb														
 5459 0054 BFF34F8F 		dsb														
 5460              	
 5461              	@ 0 "" 2
 5462              	.LVL348:
 5463              		.thumb
 5464              		.syntax unified
 5465              	.L460:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5466              		.loc 2 195 2 is_stmt 0 view .LVU1629
 5467              	.LBE440:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 219


 5468              	.LBE439:
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5469              		.loc 1 3278 2 is_stmt 1 discriminator 1 view .LVU1630
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5470              		.loc 1 3278 2 discriminator 1 view .LVU1631
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5471              		.loc 1 3278 2 discriminator 1 view .LVU1632
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5472              		.loc 1 3278 2 discriminator 1 view .LVU1633
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5473              		.loc 1 3278 2 discriminator 1 view .LVU1634
3278:.//Libraries/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5474              		.loc 1 3278 2 discriminator 1 view .LVU1635
 5475 0058 FEE7     		b	.L460
 5476              	.LVL349:
 5477              	.L468:
 5478              	.LBB441:
3318:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5479              		.loc 1 3318 8 view .LVU1636
3285:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5480              		.loc 1 3285 20 is_stmt 0 view .LVU1637
 5481 005a 8F1A     		subs	r7, r1, r2
3318:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5482              		.loc 1 3318 10 view .LVU1638
 5483 005c BB42     		cmp	r3, r7
 5484 005e 0ED9     		bls	.L465
3321:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5485              		.loc 1 3321 4 is_stmt 1 view .LVU1639
3321:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5486              		.loc 1 3321 19 is_stmt 0 view .LVU1640
 5487 0060 5B1A     		subs	r3, r3, r1
 5488              	.LBB433:
 5489              	.LBB434:
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5490              		.loc 1 3269 28 view .LVU1641
 5491 0062 3768     		ldr	r7, [r6]
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5492              		.loc 1 3270 29 view .LVU1642
 5493 0064 DCF80010 		ldr	r1, [ip]
 5494              	.LVL350:
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5495              		.loc 1 3270 29 view .LVU1643
 5496              	.LBE434:
 5497              	.LBE433:
3323:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5498              		.loc 1 3323 12 view .LVU1644
 5499 0068 0026     		movs	r6, #0
3321:.//Libraries/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5500              		.loc 1 3321 19 view .LVU1645
 5501 006a 1344     		add	r3, r3, r2
 5502 006c 2B60     		str	r3, [r5]
3322:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5503              		.loc 1 3322 4 is_stmt 1 view .LVU1646
 5504              	.LVL351:
 5505              	.LBB436:
 5506              	.LBI433:
3266:.//Libraries/FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 220


 5507              		.loc 1 3266 6 view .LVU1647
 5508              	.LBB435:
3269:.//Libraries/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5509              		.loc 1 3269 2 view .LVU1648
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5510              		.loc 1 3270 29 is_stmt 0 view .LVU1649
 5511 006e C4E90071 		strd	r7, r1, [r4]
 5512              	.LVL352:
3270:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5513              		.loc 1 3270 29 view .LVU1650
 5514              	.LBE435:
 5515              	.LBE436:
3323:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5516              		.loc 1 3323 4 is_stmt 1 view .LVU1651
3323:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5517              		.loc 1 3323 4 is_stmt 0 view .LVU1652
 5518 0072 DCE7     		b	.L463
 5519              	.LVL353:
 5520              	.L466:
3304:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5521              		.loc 1 3304 13 view .LVU1653
 5522 0074 0026     		movs	r6, #0
 5523              	.LVL354:
3304:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5524              		.loc 1 3304 13 view .LVU1654
 5525              	.LBE441:
3331:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5526              		.loc 1 3331 2 is_stmt 1 view .LVU1655
 5527 0076 FFF7FEFF 		bl	vPortExitCritical
 5528              	.LVL355:
3333:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5529              		.loc 1 3333 2 view .LVU1656
3334:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5530              		.loc 1 3334 1 is_stmt 0 view .LVU1657
 5531 007a 3046     		mov	r0, r6
 5532 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5533              	.LVL356:
 5534              	.L465:
 5535              	.LBB442:
3327:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5536              		.loc 1 3327 4 is_stmt 1 view .LVU1658
3327:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5537              		.loc 1 3327 19 is_stmt 0 view .LVU1659
 5538 007e 0023     		movs	r3, #0
3328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5539              		.loc 1 3328 12 view .LVU1660
 5540 0080 0126     		movs	r6, #1
3327:.//Libraries/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5541              		.loc 1 3327 19 view .LVU1661
 5542 0082 2B60     		str	r3, [r5]
3328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5543              		.loc 1 3328 4 is_stmt 1 view .LVU1662
 5544              	.LVL357:
3328:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5545              		.loc 1 3328 4 is_stmt 0 view .LVU1663
 5546 0084 D3E7     		b	.L463
 5547              	.L476:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 221


 5548 0086 00BF     		.align	2
 5549              	.L475:
 5550 0088 00000000 		.word	.LANCHOR16
 5551 008c 00000000 		.word	.LANCHOR15
 5552              	.LBE442:
 5553              		.cfi_endproc
 5554              	.LFE38:
 5556              		.section	.text.vTaskMissedYield,"ax",%progbits
 5557              		.align	1
 5558              		.p2align 2,,3
 5559              		.global	vTaskMissedYield
 5560              		.syntax unified
 5561              		.thumb
 5562              		.thumb_func
 5563              		.fpu fpv5-d16
 5565              	vTaskMissedYield:
 5566              	.LFB39:
3338:.//Libraries/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5567              		.loc 1 3338 1 is_stmt 1 view -0
 5568              		.cfi_startproc
 5569              		@ args = 0, pretend = 0, frame = 0
 5570              		@ frame_needed = 0, uses_anonymous_args = 0
 5571              		@ link register save eliminated.
3339:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5572              		.loc 1 3339 2 view .LVU1665
3339:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5573              		.loc 1 3339 16 is_stmt 0 view .LVU1666
 5574 0000 014B     		ldr	r3, .L478
 5575 0002 0122     		movs	r2, #1
 5576 0004 1A60     		str	r2, [r3]
3340:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5577              		.loc 1 3340 1 view .LVU1667
 5578 0006 7047     		bx	lr
 5579              	.L479:
 5580              		.align	2
 5581              	.L478:
 5582 0008 00000000 		.word	.LANCHOR17
 5583              		.cfi_endproc
 5584              	.LFE39:
 5586              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5587              		.align	1
 5588              		.p2align 2,,3
 5589              		.global	uxTaskGetTaskNumber
 5590              		.syntax unified
 5591              		.thumb
 5592              		.thumb_func
 5593              		.fpu fpv5-d16
 5595              	uxTaskGetTaskNumber:
 5596              	.LVL358:
 5597              	.LFB40:
3346:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 5598              		.loc 1 3346 2 is_stmt 1 view -0
 5599              		.cfi_startproc
 5600              		@ args = 0, pretend = 0, frame = 0
 5601              		@ frame_needed = 0, uses_anonymous_args = 0
 5602              		@ link register save eliminated.
3347:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 222


 5603              		.loc 1 3347 2 view .LVU1669
3348:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5604              		.loc 1 3348 2 view .LVU1670
3350:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5605              		.loc 1 3350 3 view .LVU1671
3350:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5606              		.loc 1 3350 5 is_stmt 0 view .LVU1672
 5607 0000 00B1     		cbz	r0, .L480
3352:.//Libraries/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5608              		.loc 1 3352 4 is_stmt 1 view .LVU1673
 5609              	.LVL359:
3353:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5610              		.loc 1 3353 4 view .LVU1674
3353:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5611              		.loc 1 3353 13 is_stmt 0 view .LVU1675
 5612 0002 806C     		ldr	r0, [r0, #72]
 5613              	.LVL360:
 5614              	.L480:
3361:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5615              		.loc 1 3361 2 view .LVU1676
 5616 0004 7047     		bx	lr
 5617              		.cfi_endproc
 5618              	.LFE40:
 5620 0006 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5621              		.align	1
 5622              		.p2align 2,,3
 5623              		.global	vTaskSetTaskNumber
 5624              		.syntax unified
 5625              		.thumb
 5626              		.thumb_func
 5627              		.fpu fpv5-d16
 5629              	vTaskSetTaskNumber:
 5630              	.LVL361:
 5631              	.LFB41:
3369:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5632              		.loc 1 3369 2 is_stmt 1 view -0
 5633              		.cfi_startproc
 5634              		@ args = 0, pretend = 0, frame = 0
 5635              		@ frame_needed = 0, uses_anonymous_args = 0
 5636              		@ link register save eliminated.
3370:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5637              		.loc 1 3370 2 view .LVU1678
3372:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5638              		.loc 1 3372 3 view .LVU1679
3372:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5639              		.loc 1 3372 5 is_stmt 0 view .LVU1680
 5640 0000 00B1     		cbz	r0, .L483
3374:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5641              		.loc 1 3374 4 is_stmt 1 view .LVU1681
 5642              	.LVL362:
3375:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5643              		.loc 1 3375 4 view .LVU1682
3375:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5644              		.loc 1 3375 24 is_stmt 0 view .LVU1683
 5645 0002 8164     		str	r1, [r0, #72]
 5646              	.LVL363:
 5647              	.L483:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 223


3377:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5648              		.loc 1 3377 2 view .LVU1684
 5649 0004 7047     		bx	lr
 5650              		.cfi_endproc
 5651              	.LFE41:
 5653 0006 00BF     		.section	.text.vTaskGetInfo,"ax",%progbits
 5654              		.align	1
 5655              		.p2align 2,,3
 5656              		.global	vTaskGetInfo
 5657              		.syntax unified
 5658              		.thumb
 5659              		.thumb_func
 5660              		.fpu fpv5-d16
 5662              	vTaskGetInfo:
 5663              	.LVL364:
 5664              	.LFB45:
3671:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5665              		.loc 1 3671 2 is_stmt 1 view -0
 5666              		.cfi_startproc
 5667              		@ args = 0, pretend = 0, frame = 0
 5668              		@ frame_needed = 0, uses_anonymous_args = 0
3672:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5669              		.loc 1 3672 2 view .LVU1686
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5670              		.loc 1 3675 3 view .LVU1687
3671:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5671              		.loc 1 3671 2 is_stmt 0 view .LVU1688
 5672 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5673              	.LCFI81:
 5674              		.cfi_def_cfa_offset 24
 5675              		.cfi_offset 3, -24
 5676              		.cfi_offset 4, -20
 5677              		.cfi_offset 5, -16
 5678              		.cfi_offset 6, -12
 5679              		.cfi_offset 7, -8
 5680              		.cfi_offset 14, -4
3671:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5681              		.loc 1 3671 2 view .LVU1689
 5682 0002 0C46     		mov	r4, r1
 5683 0004 1646     		mov	r6, r2
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5684              		.loc 1 3675 11 view .LVU1690
 5685 0006 48B3     		cbz	r0, .L506
 5686 0008 0546     		mov	r5, r0
 5687              	.LVL365:
 5688              	.L489:
3677:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5689              		.loc 1 3677 3 is_stmt 1 discriminator 4 view .LVU1691
3678:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5690              		.loc 1 3678 47 is_stmt 0 discriminator 4 view .LVU1692
 5691 000a 05F13402 		add	r2, r5, #52
3699:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5692              		.loc 1 3699 35 discriminator 4 view .LVU1693
 5693 000e 0021     		movs	r1, #0
 5694              	.LVL366:
3706:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5695              		.loc 1 3706 5 discriminator 4 view .LVU1694
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 224


 5696 0010 052B     		cmp	r3, #5
3680:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5697              		.loc 1 3680 29 discriminator 4 view .LVU1695
 5698 0012 D5E90B70 		ldrd	r7, r0, [r5, #44]
3678:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5699              		.loc 1 3678 28 discriminator 4 view .LVU1696
 5700 0016 C4E90052 		strd	r5, r2, [r4]
3679:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5701              		.loc 1 3679 3 is_stmt 1 discriminator 4 view .LVU1697
3680:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5702              		.loc 1 3680 29 is_stmt 0 discriminator 4 view .LVU1698
 5703 001a E061     		str	r0, [r4, #28]
3685:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5704              		.loc 1 3685 33 discriminator 4 view .LVU1699
 5705 001c EA6C     		ldr	r2, [r5, #76]
3681:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5706              		.loc 1 3681 29 discriminator 4 view .LVU1700
 5707 001e 686C     		ldr	r0, [r5, #68]
3679:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5708              		.loc 1 3679 35 discriminator 4 view .LVU1701
 5709 0020 2761     		str	r7, [r4, #16]
3680:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5710              		.loc 1 3680 3 is_stmt 1 discriminator 4 view .LVU1702
3681:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5711              		.loc 1 3681 3 discriminator 4 view .LVU1703
3681:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5712              		.loc 1 3681 29 is_stmt 0 discriminator 4 view .LVU1704
 5713 0022 A060     		str	r0, [r4, #8]
3685:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5714              		.loc 1 3685 4 is_stmt 1 discriminator 4 view .LVU1705
3699:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5715              		.loc 1 3699 35 is_stmt 0 discriminator 4 view .LVU1706
 5716 0024 C4E90521 		strd	r2, r1, [r4, #20]
3706:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5717              		.loc 1 3706 3 is_stmt 1 discriminator 4 view .LVU1707
3706:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5718              		.loc 1 3706 5 is_stmt 0 discriminator 4 view .LVU1708
 5719 0028 1DD0     		beq	.L490
3708:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5720              		.loc 1 3708 4 is_stmt 1 view .LVU1709
3708:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5721              		.loc 1 3708 14 is_stmt 0 view .LVU1710
 5722 002a 184A     		ldr	r2, .L509
 5723 002c 1268     		ldr	r2, [r2]
3708:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5724              		.loc 1 3708 6 view .LVU1711
 5725 002e AA42     		cmp	r2, r5
 5726 0030 17D0     		beq	.L507
3714:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5727              		.loc 1 3714 5 is_stmt 1 view .LVU1712
3721:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 5728              		.loc 1 3721 8 is_stmt 0 view .LVU1713
 5729 0032 032B     		cmp	r3, #3
3714:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5730              		.loc 1 3714 33 view .LVU1714
 5731 0034 2373     		strb	r3, [r4, #12]
3721:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 225


 5732              		.loc 1 3721 6 is_stmt 1 view .LVU1715
3721:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 5733              		.loc 1 3721 8 is_stmt 0 view .LVU1716
 5734 0036 1BD0     		beq	.L508
 5735              	.LVL367:
 5736              	.L492:
3743:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5737              		.loc 1 3743 3 is_stmt 1 view .LVU1717
3743:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5738              		.loc 1 3743 5 is_stmt 0 view .LVU1718
 5739 0038 76B1     		cbz	r6, .L494
3751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5740              		.loc 1 3751 5 is_stmt 1 view .LVU1719
3751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5741              		.loc 1 3751 89 is_stmt 0 view .LVU1720
 5742 003a 2B6B     		ldr	r3, [r5, #48]
 5743              	.LVL368:
 5744              	.LBB443:
 5745              	.LBI443:
3799:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5746              		.loc 1 3799 32 is_stmt 1 view .LVU1721
 5747              	.LBB444:
3801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5748              		.loc 1 3801 2 view .LVU1722
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5749              		.loc 1 3803 3 view .LVU1723
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5750              		.loc 1 3803 8 view .LVU1724
 5751 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5752 003e A52A     		cmp	r2, #165
 5753 0040 21D1     		bne	.L498
 5754 0042 C3F10100 		rsb	r0, r3, #1
 5755              	.LVL369:
 5756              	.L496:
3805:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5757              		.loc 1 3805 4 view .LVU1725
3806:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5758              		.loc 1 3806 4 view .LVU1726
 5759 0046 C118     		adds	r1, r0, r3
 5760              	.LVL370:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5761              		.loc 1 3803 8 view .LVU1727
 5762 0048 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 5763              	.LVL371:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5764              		.loc 1 3803 8 is_stmt 0 view .LVU1728
 5765 004c A52A     		cmp	r2, #165
 5766 004e FAD0     		beq	.L496
 5767 0050 C1F38F01 		ubfx	r1, r1, #2, #16
 5768              	.LVL372:
 5769              	.L495:
3809:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5770              		.loc 1 3809 3 is_stmt 1 view .LVU1729
3811:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 5771              		.loc 1 3811 3 view .LVU1730
 5772              	.LBE444:
 5773              	.LBE443:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 226


3751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5774              		.loc 1 3751 40 is_stmt 0 view .LVU1731
 5775 0054 2184     		strh	r1, [r4, #32]	@ movhi
3759:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5776              		.loc 1 3759 2 view .LVU1732
 5777 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5778              	.LVL373:
 5779              	.L494:
3757:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5780              		.loc 1 3757 4 is_stmt 1 view .LVU1733
3757:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5781              		.loc 1 3757 39 is_stmt 0 view .LVU1734
 5782 0058 2684     		strh	r6, [r4, #32]	@ movhi
3759:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5783              		.loc 1 3759 2 view .LVU1735
 5784 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5785              	.LVL374:
 5786              	.L506:
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5787              		.loc 1 3675 11 discriminator 1 view .LVU1736
 5788 005c 0B4A     		ldr	r2, .L509
 5789              	.LVL375:
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5790              		.loc 1 3675 11 discriminator 1 view .LVU1737
 5791 005e 1568     		ldr	r5, [r2]
 5792              	.LVL376:
3675:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5793              		.loc 1 3675 11 discriminator 1 view .LVU1738
 5794 0060 D3E7     		b	.L489
 5795              	.LVL377:
 5796              	.L507:
3710:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5797              		.loc 1 3710 5 is_stmt 1 view .LVU1739
3710:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 5798              		.loc 1 3710 33 is_stmt 0 view .LVU1740
 5799 0062 2173     		strb	r1, [r4, #12]
 5800 0064 E8E7     		b	.L492
 5801              	.L490:
3738:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5802              		.loc 1 3738 4 is_stmt 1 view .LVU1741
3738:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5803              		.loc 1 3738 34 is_stmt 0 view .LVU1742
 5804 0066 2846     		mov	r0, r5
 5805 0068 FFF7FEFF 		bl	eTaskGetState
 5806              	.LVL378:
3738:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5807              		.loc 1 3738 32 view .LVU1743
 5808 006c 2073     		strb	r0, [r4, #12]
 5809 006e E3E7     		b	.L492
 5810              	.LVL379:
 5811              	.L508:
3723:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 5812              		.loc 1 3723 7 is_stmt 1 view .LVU1744
 5813              	.LBB446:
 5814              	.LBI446:
2110:.//Libraries/FreeRTOS/Source/tasks.c **** {
 5815              		.loc 1 2110 6 view .LVU1745
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 227


 5816              	.LBB447:
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5817              		.loc 1 2119 24 view .LVU1746
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5818              		.loc 1 2123 2 view .LVU1747
 5819 0070 074A     		ldr	r2, .L509+4
 5820 0072 1368     		ldr	r3, [r2]
 5821              	.LVL380:
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5822              		.loc 1 2123 2 is_stmt 0 view .LVU1748
 5823 0074 0133     		adds	r3, r3, #1
 5824 0076 1360     		str	r3, [r2]
2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 5825              		.loc 1 2127 2 is_stmt 1 view .LVU1749
 5826              	.LBE447:
 5827              	.LBE446:
3725:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 5828              		.loc 1 3725 8 view .LVU1750
3725:.//Libraries/FreeRTOS/Source/tasks.c **** 							{
 5829              		.loc 1 3725 10 is_stmt 0 view .LVU1751
 5830 0078 AB6A     		ldr	r3, [r5, #40]
 5831 007a 0BB1     		cbz	r3, .L493
3727:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 5832              		.loc 1 3727 9 is_stmt 1 view .LVU1752
3727:.//Libraries/FreeRTOS/Source/tasks.c **** 							}
 5833              		.loc 1 3727 37 is_stmt 0 view .LVU1753
 5834 007c 0223     		movs	r3, #2
 5835 007e 2373     		strb	r3, [r4, #12]
 5836              	.LVL381:
 5837              	.L493:
3730:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 5838              		.loc 1 3730 7 is_stmt 1 view .LVU1754
3730:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 5839              		.loc 1 3730 16 is_stmt 0 view .LVU1755
 5840 0080 FFF7FEFF 		bl	xTaskResumeAll
 5841              	.LVL382:
 5842 0084 D8E7     		b	.L492
 5843              	.LVL383:
 5844              	.L498:
 5845              	.LBB448:
 5846              	.LBB445:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 5847              		.loc 1 3803 8 view .LVU1756
 5848 0086 0021     		movs	r1, #0
 5849 0088 E4E7     		b	.L495
 5850              	.L510:
 5851 008a 00BF     		.align	2
 5852              	.L509:
 5853 008c 00000000 		.word	.LANCHOR1
 5854 0090 00000000 		.word	.LANCHOR18
 5855              	.LBE445:
 5856              	.LBE448:
 5857              		.cfi_endproc
 5858              	.LFE45:
 5860              		.section	.text.prvListTasksWithinSingleList.part.0,"ax",%progbits
 5861              		.align	1
 5862              		.p2align 2,,3
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 228


 5863              		.syntax unified
 5864              		.thumb
 5865              		.thumb_func
 5866              		.fpu fpv5-d16
 5868              	prvListTasksWithinSingleList.part.0:
 5869              	.LVL384:
 5870              	.LFB76:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5871              		.loc 1 3766 21 is_stmt 1 view -0
 5872              		.cfi_startproc
 5873              		@ args = 0, pretend = 0, frame = 0
 5874              		@ frame_needed = 0, uses_anonymous_args = 0
 5875              	.LBB449:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5876              		.loc 1 3773 4 view .LVU1758
 5877 0000 4B68     		ldr	r3, [r1, #4]
 5878              	.LBE449:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5879              		.loc 1 3766 21 is_stmt 0 view .LVU1759
 5880 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5881              	.LCFI82:
 5882              		.cfi_def_cfa_offset 32
 5883              		.cfi_offset 4, -32
 5884              		.cfi_offset 5, -28
 5885              		.cfi_offset 6, -24
 5886              		.cfi_offset 7, -20
 5887              		.cfi_offset 8, -16
 5888              		.cfi_offset 9, -12
 5889              		.cfi_offset 10, -8
 5890              		.cfi_offset 14, -4
 5891              	.LBB450:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5892              		.loc 1 3773 4 view .LVU1760
 5893 0006 5B68     		ldr	r3, [r3, #4]
 5894 0008 01F10808 		add	r8, r1, #8
 5895              	.LBE450:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5896              		.loc 1 3766 21 view .LVU1761
 5897 000c 0E46     		mov	r6, r1
 5898              	.LVL385:
 5899              	.LBB451:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5900              		.loc 1 3773 4 is_stmt 1 view .LVU1762
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5901              		.loc 1 3773 4 view .LVU1763
 5902              	.LBE451:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 5903              		.loc 1 3766 21 is_stmt 0 view .LVU1764
 5904 000e 9146     		mov	r9, r2
 5905              	.LBB452:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5906              		.loc 1 3773 4 view .LVU1765
 5907 0010 4345     		cmp	r3, r8
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5908              		.loc 1 3773 4 is_stmt 1 view .LVU1766
 5909 0012 0546     		mov	r5, r0
 5910              	.LBE452:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 229


3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5911              		.loc 1 3769 14 is_stmt 0 view .LVU1767
 5912 0014 4FF00007 		mov	r7, #0
 5913              	.LBB453:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5914              		.loc 1 3773 4 view .LVU1768
 5915 0018 08BF     		it	eq
 5916 001a CB68     		ldreq	r3, [r1, #12]
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5917              		.loc 1 3773 4 is_stmt 1 view .LVU1769
 5918 001c D3F80CA0 		ldr	r10, [r3, #12]
 5919              	.LVL386:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5920              		.loc 1 3773 4 is_stmt 0 view .LVU1770
 5921 0020 06E0     		b	.L515
 5922              	.LVL387:
 5923              	.L513:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5924              		.loc 1 3773 4 view .LVU1771
 5925              	.LBE453:
 5926              	.LBB454:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5927              		.loc 1 3781 5 view .LVU1772
 5928 0022 E468     		ldr	r4, [r4, #12]
 5929              	.LVL388:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5930              		.loc 1 3781 5 view .LVU1773
 5931              	.LBE454:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5932              		.loc 1 3781 53 is_stmt 1 view .LVU1774
3782:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5933              		.loc 1 3782 5 view .LVU1775
 5934 0024 2046     		mov	r0, r4
 5935 0026 FFF7FEFF 		bl	vTaskGetInfo
 5936              	.LVL389:
3783:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5937              		.loc 1 3783 5 view .LVU1776
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5938              		.loc 1 3784 11 view .LVU1777
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5939              		.loc 1 3784 4 is_stmt 0 view .LVU1778
 5940 002a A245     		cmp	r10, r4
 5941 002c 13D0     		beq	.L511
 5942              	.L517:
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5943              		.loc 1 3784 4 view .LVU1779
 5944 002e 7368     		ldr	r3, [r6, #4]
 5945              	.LVL390:
 5946              	.L515:
3773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5947              		.loc 1 3773 53 is_stmt 1 view .LVU1780
3779:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 5948              		.loc 1 3779 4 view .LVU1781
 5949              	.LBB455:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5950              		.loc 1 3781 5 view .LVU1782
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 230


 5951              		.loc 1 3781 5 view .LVU1783
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5952              		.loc 1 3781 5 view .LVU1784
 5953 0030 5C68     		ldr	r4, [r3, #4]
 5954              	.LBE455:
3782:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5955              		.loc 1 3782 5 is_stmt 0 view .LVU1785
 5956 0032 0122     		movs	r2, #1
 5957 0034 2946     		mov	r1, r5
 5958 0036 4B46     		mov	r3, r9
 5959              	.LBB456:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5960              		.loc 1 3781 5 view .LVU1786
 5961 0038 A045     		cmp	r8, r4
 5962              	.LBE456:
3783:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5963              		.loc 1 3783 11 view .LVU1787
 5964 003a 1744     		add	r7, r7, r2
 5965              	.LVL391:
3783:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5966              		.loc 1 3783 11 view .LVU1788
 5967 003c 05F12405 		add	r5, r5, #36
 5968              	.LBB457:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5969              		.loc 1 3781 5 view .LVU1789
 5970 0040 7460     		str	r4, [r6, #4]
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5971              		.loc 1 3781 5 is_stmt 1 view .LVU1790
 5972 0042 EED1     		bne	.L513
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5973              		.loc 1 3781 5 view .LVU1791
 5974 0044 D8F80440 		ldr	r4, [r8, #4]
 5975 0048 7460     		str	r4, [r6, #4]
 5976 004a E468     		ldr	r4, [r4, #12]
 5977              	.LVL392:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5978              		.loc 1 3781 5 is_stmt 0 view .LVU1792
 5979              	.LBE457:
3781:.//Libraries/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5980              		.loc 1 3781 53 is_stmt 1 view .LVU1793
3782:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5981              		.loc 1 3782 5 view .LVU1794
 5982 004c 2046     		mov	r0, r4
 5983 004e FFF7FEFF 		bl	vTaskGetInfo
 5984              	.LVL393:
3783:.//Libraries/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5985              		.loc 1 3783 5 view .LVU1795
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5986              		.loc 1 3784 11 view .LVU1796
3784:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 5987              		.loc 1 3784 4 is_stmt 0 view .LVU1797
 5988 0052 A245     		cmp	r10, r4
 5989 0054 EBD1     		bne	.L517
 5990              	.L511:
3792:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5991              		.loc 1 3792 2 view .LVU1798
 5992 0056 3846     		mov	r0, r7
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 231


 5993 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
3792:.//Libraries/FreeRTOS/Source/tasks.c **** 
 5994              		.loc 1 3792 2 view .LVU1799
 5995              		.cfi_endproc
 5996              	.LFE76:
 5998              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5999              		.align	1
 6000              		.p2align 2,,3
 6001              		.global	uxTaskGetSystemState
 6002              		.syntax unified
 6003              		.thumb
 6004              		.thumb_func
 6005              		.fpu fpv5-d16
 6007              	uxTaskGetSystemState:
 6008              	.LVL394:
 6009              	.LFB27:
2506:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 6010              		.loc 1 2506 2 is_stmt 1 view -0
 6011              		.cfi_startproc
 6012              		@ args = 0, pretend = 0, frame = 0
 6013              		@ frame_needed = 0, uses_anonymous_args = 0
2507:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6014              		.loc 1 2507 2 view .LVU1801
2509:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6015              		.loc 1 2509 3 view .LVU1802
 6016              	.LBB458:
 6017              	.LBI458:
2110:.//Libraries/FreeRTOS/Source/tasks.c **** {
 6018              		.loc 1 2110 6 view .LVU1803
 6019              	.LBB459:
2119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6020              		.loc 1 2119 24 view .LVU1804
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6021              		.loc 1 2123 2 view .LVU1805
 6022              	.LBE459:
 6023              	.LBE458:
2506:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 6024              		.loc 1 2506 2 is_stmt 0 view .LVU1806
 6025 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 6026              	.LCFI83:
 6027              		.cfi_def_cfa_offset 32
 6028              		.cfi_offset 3, -32
 6029              		.cfi_offset 4, -28
 6030              		.cfi_offset 5, -24
 6031              		.cfi_offset 6, -20
 6032              		.cfi_offset 7, -16
 6033              		.cfi_offset 8, -12
 6034              		.cfi_offset 9, -8
 6035              		.cfi_offset 14, -4
 6036              	.LBB461:
 6037              	.LBB460:
2123:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6038              		.loc 1 2123 2 view .LVU1807
 6039 0004 314C     		ldr	r4, .L547
 6040 0006 2368     		ldr	r3, [r4]
 6041 0008 0133     		adds	r3, r3, #1
 6042 000a 2360     		str	r3, [r4]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 232


2127:.//Libraries/FreeRTOS/Source/tasks.c **** }
 6043              		.loc 1 2127 2 is_stmt 1 view .LVU1808
 6044              	.LBE460:
 6045              	.LBE461:
2512:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6046              		.loc 1 2512 4 view .LVU1809
2512:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6047              		.loc 1 2512 20 is_stmt 0 view .LVU1810
 6048 000c 304B     		ldr	r3, .L547+4
 6049 000e 1B68     		ldr	r3, [r3]
2512:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6050              		.loc 1 2512 6 view .LVU1811
 6051 0010 8B42     		cmp	r3, r1
 6052 0012 54D8     		bhi	.L526
 6053 0014 2F4E     		ldr	r6, .L547+8
2507:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6054              		.loc 1 2507 14 view .LVU1812
 6055 0016 0025     		movs	r5, #0
 6056 0018 0746     		mov	r7, r0
 6057 001a 9046     		mov	r8, r2
2507:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6058              		.loc 1 2507 26 view .LVU1813
 6059 001c 3824     		movs	r4, #56
 6060 001e A6F24C49 		subw	r9, r6, #1100
 6061 0022 AC46     		mov	ip, r5
 6062              	.LVL395:
 6063              	.L521:
2516:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6064              		.loc 1 2516 5 is_stmt 1 discriminator 1 view .LVU1814
2518:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 6065              		.loc 1 2518 6 discriminator 1 view .LVU1815
2518:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 6066              		.loc 1 2518 13 is_stmt 0 discriminator 1 view .LVU1816
 6067 0024 013C     		subs	r4, r4, #1
 6068              	.LVL396:
2519:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6069              		.loc 1 2519 6 is_stmt 1 discriminator 1 view .LVU1817
2519:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6070              		.loc 1 2519 66 is_stmt 0 discriminator 1 view .LVU1818
 6071 0026 0CEB0500 		add	r0, ip, r5
 6072              	.LBB462:
 6073              	.LBB463:
 6074 002a 3146     		mov	r1, r6
 6075 002c 0122     		movs	r2, #1
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6076              		.loc 1 3771 7 discriminator 1 view .LVU1819
 6077 002e 04EB8403 		add	r3, r4, r4, lsl #2
 6078 0032 143E     		subs	r6, r6, #20
 6079              	.LBE463:
 6080              	.LBE462:
2519:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6081              		.loc 1 2519 16 discriminator 1 view .LVU1820
 6082 0034 07EB8000 		add	r0, r7, r0, lsl #2
 6083              	.LVL397:
 6084              	.LBB465:
 6085              	.LBI462:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 233


 6086              		.loc 1 3766 21 is_stmt 1 discriminator 1 view .LVU1821
 6087              	.LBB464:
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6088              		.loc 1 3768 22 discriminator 1 view .LVU1822
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6089              		.loc 1 3769 2 discriminator 1 view .LVU1823
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6090              		.loc 1 3771 3 discriminator 1 view .LVU1824
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6091              		.loc 1 3771 7 is_stmt 0 discriminator 1 view .LVU1825
 6092 0038 59F82330 		ldr	r3, [r9, r3, lsl #2]
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6093              		.loc 1 3771 5 discriminator 1 view .LVU1826
 6094 003c 43B1     		cbz	r3, .L520
 6095 003e FFF7FEFF 		bl	prvListTasksWithinSingleList.part.0
 6096              	.LVL398:
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6097              		.loc 1 3771 5 discriminator 1 view .LVU1827
 6098 0042 0544     		add	r5, r5, r0
 6099              	.LVL399:
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6100              		.loc 1 3771 5 discriminator 1 view .LVU1828
 6101 0044 05EBC500 		add	r0, r5, r5, lsl #3
 6102 0048 4FEAC50C 		lsl	ip, r5, #3
 6103 004c 07EB8000 		add	r0, r7, r0, lsl #2
 6104              	.L520:
 6105              	.LVL400:
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6106              		.loc 1 3788 28 is_stmt 1 view .LVU1829
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6107              		.loc 1 3791 3 view .LVU1830
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6108              		.loc 1 3791 3 is_stmt 0 view .LVU1831
 6109              	.LBE464:
 6110              	.LBE465:
2521:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6111              		.loc 1 2521 12 is_stmt 1 view .LVU1832
2521:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6112              		.loc 1 2521 5 is_stmt 0 view .LVU1833
 6113 0050 002C     		cmp	r4, #0
 6114 0052 E7D1     		bne	.L521
2525:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 6115              		.loc 1 2525 5 is_stmt 1 view .LVU1834
2525:.//Libraries/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 6116              		.loc 1 2525 15 is_stmt 0 view .LVU1835
 6117 0054 204B     		ldr	r3, .L547+12
 6118 0056 1968     		ldr	r1, [r3]
 6119              	.LVL401:
 6120              	.LBB466:
 6121              	.LBI466:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6122              		.loc 1 3766 21 is_stmt 1 view .LVU1836
 6123              	.LBB467:
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6124              		.loc 1 3768 22 view .LVU1837
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6125              		.loc 1 3769 2 view .LVU1838
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 234


3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6126              		.loc 1 3771 3 view .LVU1839
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6127              		.loc 1 3771 7 is_stmt 0 view .LVU1840
 6128 0058 0B68     		ldr	r3, [r1]
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6129              		.loc 1 3771 5 view .LVU1841
 6130 005a 3BB1     		cbz	r3, .L522
 6131 005c 0222     		movs	r2, #2
 6132 005e FFF7FEFF 		bl	prvListTasksWithinSingleList.part.0
 6133              	.LVL402:
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6134              		.loc 1 3771 5 view .LVU1842
 6135 0062 0544     		add	r5, r5, r0
 6136 0064 05EBC500 		add	r0, r5, r5, lsl #3
 6137 0068 07EB8000 		add	r0, r7, r0, lsl #2
 6138              	.L522:
 6139              	.LVL403:
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6140              		.loc 1 3788 28 is_stmt 1 view .LVU1843
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6141              		.loc 1 3791 3 view .LVU1844
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6142              		.loc 1 3791 3 is_stmt 0 view .LVU1845
 6143              	.LBE467:
 6144              	.LBE466:
2526:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6145              		.loc 1 2526 5 is_stmt 1 view .LVU1846
2526:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6146              		.loc 1 2526 15 is_stmt 0 view .LVU1847
 6147 006c 1B4B     		ldr	r3, .L547+16
 6148 006e 1968     		ldr	r1, [r3]
 6149              	.LVL404:
 6150              	.LBB468:
 6151              	.LBI468:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6152              		.loc 1 3766 21 is_stmt 1 view .LVU1848
 6153              	.LBB469:
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6154              		.loc 1 3768 22 view .LVU1849
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6155              		.loc 1 3769 2 view .LVU1850
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6156              		.loc 1 3771 3 view .LVU1851
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6157              		.loc 1 3771 7 is_stmt 0 view .LVU1852
 6158 0070 0B68     		ldr	r3, [r1]
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6159              		.loc 1 3771 5 view .LVU1853
 6160 0072 3BB1     		cbz	r3, .L523
 6161 0074 0222     		movs	r2, #2
 6162 0076 FFF7FEFF 		bl	prvListTasksWithinSingleList.part.0
 6163              	.LVL405:
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6164              		.loc 1 3771 5 view .LVU1854
 6165 007a 0544     		add	r5, r5, r0
 6166 007c 05EBC500 		add	r0, r5, r5, lsl #3
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 235


 6167 0080 07EB8000 		add	r0, r7, r0, lsl #2
 6168              	.L523:
 6169              	.LVL406:
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6170              		.loc 1 3788 28 is_stmt 1 view .LVU1855
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6171              		.loc 1 3791 3 view .LVU1856
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6172              		.loc 1 3791 3 is_stmt 0 view .LVU1857
 6173              	.LBE469:
 6174              	.LBE468:
2532:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6175              		.loc 1 2532 6 is_stmt 1 view .LVU1858
 6176              	.LBB470:
 6177              	.LBI470:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6178              		.loc 1 3766 21 view .LVU1859
 6179              	.LBB471:
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6180              		.loc 1 3768 22 view .LVU1860
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6181              		.loc 1 3769 2 view .LVU1861
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6182              		.loc 1 3771 3 view .LVU1862
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6183              		.loc 1 3771 7 is_stmt 0 view .LVU1863
 6184 0084 1649     		ldr	r1, .L547+20
 6185 0086 0B68     		ldr	r3, [r1]
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6186              		.loc 1 3771 5 view .LVU1864
 6187 0088 3BB1     		cbz	r3, .L524
 6188 008a 0422     		movs	r2, #4
 6189 008c FFF7FEFF 		bl	prvListTasksWithinSingleList.part.0
 6190              	.LVL407:
 6191 0090 0544     		add	r5, r5, r0
 6192 0092 05EBC500 		add	r0, r5, r5, lsl #3
 6193 0096 07EB8000 		add	r0, r7, r0, lsl #2
 6194              	.L524:
 6195              	.LVL408:
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6196              		.loc 1 3788 28 is_stmt 1 view .LVU1865
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6197              		.loc 1 3791 3 view .LVU1866
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6198              		.loc 1 3791 3 is_stmt 0 view .LVU1867
 6199              	.LBE471:
 6200              	.LBE470:
2540:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6201              		.loc 1 2540 6 is_stmt 1 view .LVU1868
 6202              	.LBB472:
 6203              	.LBI472:
3766:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6204              		.loc 1 3766 21 view .LVU1869
 6205              	.LBB473:
3768:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6206              		.loc 1 3768 22 view .LVU1870
3769:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 236


 6207              		.loc 1 3769 2 view .LVU1871
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6208              		.loc 1 3771 3 view .LVU1872
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6209              		.loc 1 3771 7 is_stmt 0 view .LVU1873
 6210 009a 1249     		ldr	r1, .L547+24
 6211 009c 0B68     		ldr	r3, [r1]
3771:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6212              		.loc 1 3771 5 view .LVU1874
 6213 009e 1BB1     		cbz	r3, .L525
 6214 00a0 0322     		movs	r2, #3
 6215 00a2 FFF7FEFF 		bl	prvListTasksWithinSingleList.part.0
 6216              	.LVL409:
 6217 00a6 0544     		add	r5, r5, r0
 6218              	.L525:
 6219              	.LVL410:
3788:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6220              		.loc 1 3788 28 is_stmt 1 view .LVU1875
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6221              		.loc 1 3791 3 view .LVU1876
3791:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6222              		.loc 1 3791 3 is_stmt 0 view .LVU1877
 6223              	.LBE473:
 6224              	.LBE472:
2557:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6225              		.loc 1 2557 6 is_stmt 1 view .LVU1878
2557:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6226              		.loc 1 2557 8 is_stmt 0 view .LVU1879
 6227 00a8 B8F1000F 		cmp	r8, #0
 6228 00ac 02D0     		beq	.L519
2559:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6229              		.loc 1 2559 7 is_stmt 1 view .LVU1880
2559:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6230              		.loc 1 2559 24 is_stmt 0 view .LVU1881
 6231 00ae 0023     		movs	r3, #0
 6232 00b0 C8F80030 		str	r3, [r8]
 6233              	.L519:
 6234              	.LVL411:
2566:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 6235              		.loc 1 2566 29 is_stmt 1 view .LVU1882
2569:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6236              		.loc 1 2569 3 view .LVU1883
2569:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6237              		.loc 1 2569 12 is_stmt 0 view .LVU1884
 6238 00b4 FFF7FEFF 		bl	xTaskResumeAll
 6239              	.LVL412:
2571:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6240              		.loc 1 2571 3 is_stmt 1 view .LVU1885
2572:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6241              		.loc 1 2572 2 is_stmt 0 view .LVU1886
 6242 00b8 2846     		mov	r0, r5
 6243 00ba BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 6244              	.LVL413:
 6245              	.L526:
2507:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6246              		.loc 1 2507 14 view .LVU1887
 6247 00be 0025     		movs	r5, #0
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 237


 6248              	.LVL414:
2566:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 6249              		.loc 1 2566 29 is_stmt 1 view .LVU1888
2569:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6250              		.loc 1 2569 3 view .LVU1889
2569:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6251              		.loc 1 2569 12 is_stmt 0 view .LVU1890
 6252 00c0 FFF7FEFF 		bl	xTaskResumeAll
 6253              	.LVL415:
2571:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6254              		.loc 1 2571 3 is_stmt 1 view .LVU1891
2572:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6255              		.loc 1 2572 2 is_stmt 0 view .LVU1892
 6256 00c4 2846     		mov	r0, r5
 6257 00c6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 6258              	.LVL416:
 6259              	.L548:
2572:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6260              		.loc 1 2572 2 view .LVU1893
 6261 00ca 00BF     		.align	2
 6262              	.L547:
 6263 00cc 00000000 		.word	.LANCHOR18
 6264 00d0 00000000 		.word	.LANCHOR0
 6265 00d4 4C040000 		.word	.LANCHOR2+1100
 6266 00d8 00000000 		.word	.LANCHOR8
 6267 00dc 00000000 		.word	.LANCHOR9
 6268 00e0 00000000 		.word	.LANCHOR6
 6269 00e4 00000000 		.word	.LANCHOR7
 6270              		.cfi_endproc
 6271              	.LFE27:
 6273              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6274              		.align	1
 6275              		.p2align 2,,3
 6276              		.global	uxTaskGetStackHighWaterMark
 6277              		.syntax unified
 6278              		.thumb
 6279              		.thumb_func
 6280              		.fpu fpv5-d16
 6282              	uxTaskGetStackHighWaterMark:
 6283              	.LVL417:
 6284              	.LFB48:
3860:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6285              		.loc 1 3860 2 is_stmt 1 view -0
 6286              		.cfi_startproc
 6287              		@ args = 0, pretend = 0, frame = 0
 6288              		@ frame_needed = 0, uses_anonymous_args = 0
 6289              		@ link register save eliminated.
3861:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
 6290              		.loc 1 3861 2 view .LVU1895
3862:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 6291              		.loc 1 3862 2 view .LVU1896
3863:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6292              		.loc 1 3863 2 view .LVU1897
3865:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6293              		.loc 1 3865 3 view .LVU1898
3865:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6294              		.loc 1 3865 11 is_stmt 0 view .LVU1899
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 238


 6295 0000 68B1     		cbz	r0, .L556
 6296              	.LVL418:
3869:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6297              		.loc 1 3869 4 is_stmt 1 discriminator 4 view .LVU1900
3869:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6298              		.loc 1 3869 18 is_stmt 0 discriminator 4 view .LVU1901
 6299 0002 036B     		ldr	r3, [r0, #48]
 6300              	.LVL419:
3877:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6301              		.loc 1 3877 3 is_stmt 1 discriminator 4 view .LVU1902
 6302              	.LBB474:
 6303              	.LBI474:
3799:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6304              		.loc 1 3799 32 discriminator 4 view .LVU1903
 6305              	.LBB475:
3801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6306              		.loc 1 3801 2 discriminator 4 view .LVU1904
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6307              		.loc 1 3803 3 discriminator 4 view .LVU1905
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6308              		.loc 1 3803 8 discriminator 4 view .LVU1906
 6309 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6310 0006 A52A     		cmp	r2, #165
 6311 0008 0FD1     		bne	.L553
 6312              	.LVL420:
 6313              	.L557:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6314              		.loc 1 3803 8 is_stmt 0 discriminator 4 view .LVU1907
 6315 000a C3F10101 		rsb	r1, r3, #1
 6316              	.LVL421:
 6317              	.L552:
3805:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulCount++;
 6318              		.loc 1 3805 4 is_stmt 1 view .LVU1908
3806:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6319              		.loc 1 3806 4 view .LVU1909
 6320 000e C818     		adds	r0, r1, r3
 6321              	.LVL422:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6322              		.loc 1 3803 8 view .LVU1910
 6323 0010 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
 6324              	.LVL423:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6325              		.loc 1 3803 8 is_stmt 0 view .LVU1911
 6326 0014 A52A     		cmp	r2, #165
 6327 0016 FAD0     		beq	.L552
 6328 0018 C0F38F00 		ubfx	r0, r0, #2, #16
 6329              	.LVL424:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6330              		.loc 1 3803 8 view .LVU1912
 6331 001c 7047     		bx	lr
 6332              	.LVL425:
 6333              	.L556:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6334              		.loc 1 3803 8 view .LVU1913
 6335              	.LBE475:
 6336              	.LBE474:
3865:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 239


 6337              		.loc 1 3865 11 discriminator 1 view .LVU1914
 6338 001e 044B     		ldr	r3, .L558
 6339 0020 1868     		ldr	r0, [r3]
 6340              	.LVL426:
3869:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6341              		.loc 1 3869 4 is_stmt 1 discriminator 1 view .LVU1915
3869:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6342              		.loc 1 3869 18 is_stmt 0 discriminator 1 view .LVU1916
 6343 0022 036B     		ldr	r3, [r0, #48]
 6344              	.LVL427:
3877:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6345              		.loc 1 3877 3 is_stmt 1 discriminator 1 view .LVU1917
 6346              	.LBB477:
3799:.//Libraries/FreeRTOS/Source/tasks.c **** 	{
 6347              		.loc 1 3799 32 discriminator 1 view .LVU1918
 6348              	.LBB476:
3801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6349              		.loc 1 3801 2 discriminator 1 view .LVU1919
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6350              		.loc 1 3803 3 discriminator 1 view .LVU1920
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6351              		.loc 1 3803 8 discriminator 1 view .LVU1921
 6352 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6353 0026 A52A     		cmp	r2, #165
 6354 0028 EFD0     		beq	.L557
 6355              	.L553:
3803:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6356              		.loc 1 3803 8 is_stmt 0 view .LVU1922
 6357 002a 0020     		movs	r0, #0
 6358              	.LVL428:
3809:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6359              		.loc 1 3809 3 is_stmt 1 view .LVU1923
3811:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6360              		.loc 1 3811 3 view .LVU1924
3811:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6361              		.loc 1 3811 3 is_stmt 0 view .LVU1925
 6362              	.LBE476:
 6363              	.LBE477:
3879:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6364              		.loc 1 3879 3 is_stmt 1 view .LVU1926
3880:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6365              		.loc 1 3880 2 is_stmt 0 view .LVU1927
 6366 002c 7047     		bx	lr
 6367              	.L559:
 6368 002e 00BF     		.align	2
 6369              	.L558:
 6370 0030 00000000 		.word	.LANCHOR1
 6371              		.cfi_endproc
 6372              	.LFE48:
 6374              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6375              		.align	1
 6376              		.p2align 2,,3
 6377              		.global	xTaskGetCurrentTaskHandle
 6378              		.syntax unified
 6379              		.thumb
 6380              		.thumb_func
 6381              		.fpu fpv5-d16
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 240


 6383              	xTaskGetCurrentTaskHandle:
 6384              	.LFB51:
3970:.//Libraries/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 6385              		.loc 1 3970 2 is_stmt 1 view -0
 6386              		.cfi_startproc
 6387              		@ args = 0, pretend = 0, frame = 0
 6388              		@ frame_needed = 0, uses_anonymous_args = 0
 6389              		@ link register save eliminated.
3971:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6390              		.loc 1 3971 2 view .LVU1929
3976:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6391              		.loc 1 3976 3 view .LVU1930
3976:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6392              		.loc 1 3976 11 is_stmt 0 view .LVU1931
 6393 0000 014B     		ldr	r3, .L561
 6394 0002 1868     		ldr	r0, [r3]
 6395              	.LVL429:
3978:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6396              		.loc 1 3978 3 is_stmt 1 view .LVU1932
3979:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6397              		.loc 1 3979 2 is_stmt 0 view .LVU1933
 6398 0004 7047     		bx	lr
 6399              	.L562:
 6400 0006 00BF     		.align	2
 6401              	.L561:
 6402 0008 00000000 		.word	.LANCHOR1
 6403              		.cfi_endproc
 6404              	.LFE51:
 6406              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6407              		.align	1
 6408              		.p2align 2,,3
 6409              		.global	xTaskGetSchedulerState
 6410              		.syntax unified
 6411              		.thumb
 6412              		.thumb_func
 6413              		.fpu fpv5-d16
 6415              	xTaskGetSchedulerState:
 6416              	.LFB52:
3987:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 6417              		.loc 1 3987 2 is_stmt 1 view -0
 6418              		.cfi_startproc
 6419              		@ args = 0, pretend = 0, frame = 0
 6420              		@ frame_needed = 0, uses_anonymous_args = 0
 6421              		@ link register save eliminated.
3988:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6422              		.loc 1 3988 2 view .LVU1935
3990:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6423              		.loc 1 3990 3 view .LVU1936
3990:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6424              		.loc 1 3990 25 is_stmt 0 view .LVU1937
 6425 0000 054B     		ldr	r3, .L567
 6426 0002 1B68     		ldr	r3, [r3]
3990:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6427              		.loc 1 3990 5 view .LVU1938
 6428 0004 33B1     		cbz	r3, .L565
3996:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6429              		.loc 1 3996 4 is_stmt 1 view .LVU1939
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 241


3996:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6430              		.loc 1 3996 29 is_stmt 0 view .LVU1940
 6431 0006 054B     		ldr	r3, .L567+4
 6432 0008 1B68     		ldr	r3, [r3]
3996:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6433              		.loc 1 3996 6 view .LVU1941
 6434 000a 002B     		cmp	r3, #0
4002:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 6435              		.loc 1 4002 13 view .LVU1942
 6436 000c 0CBF     		ite	eq
 6437 000e 0220     		moveq	r0, #2
 6438 0010 0020     		movne	r0, #0
 6439 0012 7047     		bx	lr
 6440              	.L565:
3992:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6441              		.loc 1 3992 12 view .LVU1943
 6442 0014 0120     		movs	r0, #1
4007:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6443              		.loc 1 4007 2 view .LVU1944
 6444 0016 7047     		bx	lr
 6445              	.L568:
 6446              		.align	2
 6447              	.L567:
 6448 0018 00000000 		.word	.LANCHOR10
 6449 001c 00000000 		.word	.LANCHOR18
 6450              		.cfi_endproc
 6451              	.LFE52:
 6453              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6454              		.align	1
 6455              		.p2align 2,,3
 6456              		.global	xTaskPriorityInherit
 6457              		.syntax unified
 6458              		.thumb
 6459              		.thumb_func
 6460              		.fpu fpv5-d16
 6462              	xTaskPriorityInherit:
 6463              	.LVL430:
 6464              	.LFB53:
4015:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6465              		.loc 1 4015 2 is_stmt 1 view -0
 6466              		.cfi_startproc
 6467              		@ args = 0, pretend = 0, frame = 8
 6468              		@ frame_needed = 0, uses_anonymous_args = 0
4016:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6469              		.loc 1 4016 2 view .LVU1946
4017:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6470              		.loc 1 4017 2 view .LVU1947
4022:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6471              		.loc 1 4022 3 view .LVU1948
4015:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6472              		.loc 1 4015 2 is_stmt 0 view .LVU1949
 6473 0000 70B5     		push	{r4, r5, r6, lr}
 6474              	.LCFI84:
 6475              		.cfi_def_cfa_offset 16
 6476              		.cfi_offset 4, -16
 6477              		.cfi_offset 5, -12
 6478              		.cfi_offset 6, -8
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 242


 6479              		.cfi_offset 14, -4
4022:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6480              		.loc 1 4022 5 view .LVU1950
 6481 0002 0446     		mov	r4, r0
4015:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6482              		.loc 1 4015 2 view .LVU1951
 6483 0004 82B0     		sub	sp, sp, #8
 6484              	.LCFI85:
 6485              		.cfi_def_cfa_offset 24
4022:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6486              		.loc 1 4022 5 view .LVU1952
 6487 0006 C8B1     		cbz	r0, .L569
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6488              		.loc 1 4027 4 is_stmt 1 view .LVU1953
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6489              		.loc 1 4027 51 is_stmt 0 view .LVU1954
 6490 0008 1D4D     		ldr	r5, .L578
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6491              		.loc 1 4027 24 view .LVU1955
 6492 000a C36A     		ldr	r3, [r0, #44]
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6493              		.loc 1 4027 51 view .LVU1956
 6494 000c 2A68     		ldr	r2, [r5]
4027:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6495              		.loc 1 4027 6 view .LVU1957
 6496 000e D26A     		ldr	r2, [r2, #44]
 6497 0010 9342     		cmp	r3, r2
 6498 0012 15D2     		bcs	.L571
4032:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6499              		.loc 1 4032 5 is_stmt 1 view .LVU1958
4032:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6500              		.loc 1 4032 7 is_stmt 0 view .LVU1959
 6501 0014 8269     		ldr	r2, [r0, #24]
 6502 0016 002A     		cmp	r2, #0
 6503 0018 04DB     		blt	.L572
4034:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6504              		.loc 1 4034 6 is_stmt 1 view .LVU1960
 6505 001a 2A68     		ldr	r2, [r5]
 6506 001c D26A     		ldr	r2, [r2, #44]
 6507 001e C2F13802 		rsb	r2, r2, #56
 6508 0022 8261     		str	r2, [r0, #24]
 6509              	.L572:
4038:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6510              		.loc 1 4038 30 view .LVU1961
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6511              		.loc 1 4043 5 view .LVU1962
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6512              		.loc 1 4043 9 is_stmt 0 view .LVU1963
 6513 0024 03EB8303 		add	r3, r3, r3, lsl #2
 6514 0028 164E     		ldr	r6, .L578+4
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6515              		.loc 1 4043 7 view .LVU1964
 6516 002a 6269     		ldr	r2, [r4, #20]
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6517              		.loc 1 4043 9 view .LVU1965
 6518 002c 06EB8303 		add	r3, r6, r3, lsl #2
4043:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 243


 6519              		.loc 1 4043 7 view .LVU1966
 6520 0030 9A42     		cmp	r2, r3
 6521 0032 0ED0     		beq	.L577
4064:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6522              		.loc 1 4064 6 is_stmt 1 view .LVU1967
4064:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6523              		.loc 1 4064 49 is_stmt 0 view .LVU1968
 6524 0034 2B68     		ldr	r3, [r5]
4070:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 6525              		.loc 1 4070 13 view .LVU1969
 6526 0036 0120     		movs	r0, #1
 6527              	.LVL431:
4064:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6528              		.loc 1 4064 49 view .LVU1970
 6529 0038 DB6A     		ldr	r3, [r3, #44]
4064:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6530              		.loc 1 4064 35 view .LVU1971
 6531 003a E362     		str	r3, [r4, #44]
 6532              	.L569:
4097:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6533              		.loc 1 4097 2 view .LVU1972
 6534 003c 02B0     		add	sp, sp, #8
 6535              	.LCFI86:
 6536              		.cfi_remember_state
 6537              		.cfi_def_cfa_offset 16
 6538              		@ sp needed
 6539 003e 70BD     		pop	{r4, r5, r6, pc}
 6540              	.LVL432:
 6541              	.L571:
 6542              	.LCFI87:
 6543              		.cfi_restore_state
4074:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6544              		.loc 1 4074 5 is_stmt 1 view .LVU1973
4074:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6545              		.loc 1 4074 56 is_stmt 0 view .LVU1974
 6546 0040 2B68     		ldr	r3, [r5]
4074:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6547              		.loc 1 4074 7 view .LVU1975
 6548 0042 C06C     		ldr	r0, [r0, #76]
 6549              	.LVL433:
4074:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6550              		.loc 1 4074 7 view .LVU1976
 6551 0044 DB6A     		ldr	r3, [r3, #44]
 6552 0046 9842     		cmp	r0, r3
 6553 0048 2CBF     		ite	cs
 6554 004a 0020     		movcs	r0, #0
 6555 004c 0120     		movcc	r0, #1
4097:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6556              		.loc 1 4097 2 view .LVU1977
 6557 004e 02B0     		add	sp, sp, #8
 6558              	.LCFI88:
 6559              		.cfi_remember_state
 6560              		.cfi_def_cfa_offset 16
 6561              		@ sp needed
 6562 0050 70BD     		pop	{r4, r5, r6, pc}
 6563              	.LVL434:
 6564              	.L577:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 244


 6565              	.LCFI89:
 6566              		.cfi_restore_state
4045:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6567              		.loc 1 4045 6 is_stmt 1 view .LVU1978
4045:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6568              		.loc 1 4045 10 is_stmt 0 view .LVU1979
 6569 0052 211D     		adds	r1, r4, #4
 6570 0054 0846     		mov	r0, r1
 6571              	.LVL435:
4045:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6572              		.loc 1 4045 10 view .LVU1980
 6573 0056 0191     		str	r1, [sp, #4]
 6574 0058 FFF7FEFF 		bl	uxListRemove
 6575              	.LVL436:
4054:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6576              		.loc 1 4054 31 is_stmt 1 view .LVU1981
4058:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6577              		.loc 1 4058 6 view .LVU1982
4058:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6578              		.loc 1 4058 49 is_stmt 0 view .LVU1983
 6579 005c 2A68     		ldr	r2, [r5]
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6580              		.loc 1 4059 6 view .LVU1984
 6581 005e 0A4B     		ldr	r3, .L578+8
4058:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6582              		.loc 1 4058 49 view .LVU1985
 6583 0060 D06A     		ldr	r0, [r2, #44]
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6584              		.loc 1 4059 6 view .LVU1986
 6585 0062 1A68     		ldr	r2, [r3]
 6586 0064 0199     		ldr	r1, [sp, #4]
 6587 0066 9042     		cmp	r0, r2
4058:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6588              		.loc 1 4058 35 view .LVU1987
 6589 0068 E062     		str	r0, [r4, #44]
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6590              		.loc 1 4059 6 is_stmt 1 view .LVU1988
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6591              		.loc 1 4059 6 view .LVU1989
 6592 006a 00D9     		bls	.L574
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6593              		.loc 1 4059 6 discriminator 1 view .LVU1990
 6594 006c 1860     		str	r0, [r3]
 6595              	.L574:
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6596              		.loc 1 4059 6 discriminator 3 view .LVU1991
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6597              		.loc 1 4059 6 discriminator 3 view .LVU1992
 6598 006e 00EB8000 		add	r0, r0, r0, lsl #2
 6599 0072 06EB8000 		add	r0, r6, r0, lsl #2
 6600 0076 FFF7FEFF 		bl	vListInsertEnd
 6601              	.LVL437:
4059:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6602              		.loc 1 4059 47 discriminator 3 view .LVU1993
4070:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 6603              		.loc 1 4070 13 is_stmt 0 discriminator 3 view .LVU1994
 6604 007a 0120     		movs	r0, #1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 245


 6605 007c DEE7     		b	.L569
 6606              	.L579:
 6607 007e 00BF     		.align	2
 6608              	.L578:
 6609 0080 00000000 		.word	.LANCHOR1
 6610 0084 00000000 		.word	.LANCHOR2
 6611 0088 00000000 		.word	.LANCHOR12
 6612              		.cfi_endproc
 6613              	.LFE53:
 6615              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6616              		.align	1
 6617              		.p2align 2,,3
 6618              		.global	xTaskPriorityDisinherit
 6619              		.syntax unified
 6620              		.thumb
 6621              		.thumb_func
 6622              		.fpu fpv5-d16
 6624              	xTaskPriorityDisinherit:
 6625              	.LVL438:
 6626              	.LFB54:
4105:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6627              		.loc 1 4105 2 is_stmt 1 view -0
 6628              		.cfi_startproc
 6629              		@ args = 0, pretend = 0, frame = 8
 6630              		@ frame_needed = 0, uses_anonymous_args = 0
4106:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6631              		.loc 1 4106 2 view .LVU1996
4107:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6632              		.loc 1 4107 2 view .LVU1997
4109:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6633              		.loc 1 4109 3 view .LVU1998
4109:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6634              		.loc 1 4109 5 is_stmt 0 view .LVU1999
 6635 0000 D0B1     		cbz	r0, .L598
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6636              		.loc 1 4115 4 is_stmt 1 view .LVU2000
 6637 0002 1F4B     		ldr	r3, .L601
4105:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6638              		.loc 1 4105 2 is_stmt 0 view .LVU2001
 6639 0004 30B5     		push	{r4, r5, lr}
 6640              	.LCFI90:
 6641              		.cfi_def_cfa_offset 12
 6642              		.cfi_offset 4, -12
 6643              		.cfi_offset 5, -8
 6644              		.cfi_offset 14, -4
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6645              		.loc 1 4115 4 view .LVU2002
 6646 0006 1C68     		ldr	r4, [r3]
4105:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6647              		.loc 1 4105 2 view .LVU2003
 6648 0008 83B0     		sub	sp, sp, #12
 6649              	.LCFI91:
 6650              		.cfi_def_cfa_offset 24
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6651              		.loc 1 4115 4 view .LVU2004
 6652 000a 8442     		cmp	r4, r0
 6653 000c 08D0     		beq	.L583
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 246


4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6654              		.loc 1 4115 4 is_stmt 1 view .LVU2005
 6655              	.LBB478:
 6656              	.LBI478:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6657              		.loc 2 191 30 view .LVU2006
 6658              	.LBB479:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6659              		.loc 2 193 1 view .LVU2007
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6660              		.loc 2 195 2 view .LVU2008
 6661              		.syntax unified
 6662              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6663 000e 4FF05003 			mov r3, #80												
 6664 0012 83F31188 		msr basepri, r3											
 6665 0016 BFF36F8F 		isb														
 6666 001a BFF34F8F 		dsb														
 6667              	
 6668              	@ 0 "" 2
 6669              	.LVL439:
 6670              		.thumb
 6671              		.syntax unified
 6672              	.L584:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6673              		.loc 2 195 2 is_stmt 0 view .LVU2009
 6674              	.LBE479:
 6675              	.LBE478:
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6676              		.loc 1 4115 4 is_stmt 1 discriminator 1 view .LVU2010
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6677              		.loc 1 4115 4 discriminator 1 view .LVU2011
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6678              		.loc 1 4115 4 discriminator 1 view .LVU2012
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6679              		.loc 1 4115 4 discriminator 1 view .LVU2013
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6680              		.loc 1 4115 4 discriminator 1 view .LVU2014
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6681              		.loc 1 4115 4 discriminator 1 view .LVU2015
 6682 001e FEE7     		b	.L584
 6683              	.L583:
4115:.//Libraries/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6684              		.loc 1 4115 41 discriminator 2 view .LVU2016
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6685              		.loc 1 4116 4 discriminator 2 view .LVU2017
 6686 0020 236D     		ldr	r3, [r4, #80]
 6687 0022 5BB1     		cbz	r3, .L599
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6688              		.loc 1 4116 40 discriminator 2 view .LVU2018
4117:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6689              		.loc 1 4117 4 discriminator 2 view .LVU2019
4121:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6690              		.loc 1 4121 6 is_stmt 0 discriminator 2 view .LVU2020
 6691 0024 E16A     		ldr	r1, [r4, #44]
4117:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6692              		.loc 1 4117 28 discriminator 2 view .LVU2021
 6693 0026 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 247


4121:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6694              		.loc 1 4121 6 discriminator 2 view .LVU2022
 6695 0028 E26C     		ldr	r2, [r4, #76]
4117:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6696              		.loc 1 4117 28 discriminator 2 view .LVU2023
 6697 002a 2365     		str	r3, [r4, #80]
4121:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6698              		.loc 1 4121 4 is_stmt 1 discriminator 2 view .LVU2024
4124:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6699              		.loc 1 4124 5 discriminator 2 view .LVU2025
4124:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6700              		.loc 1 4124 7 is_stmt 0 discriminator 2 view .LVU2026
 6701 002c 9142     		cmp	r1, r2
 6702 002e 00D0     		beq	.L587
 6703 0030 6BB1     		cbz	r3, .L600
 6704              	.L587:
4107:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6705              		.loc 1 4107 13 view .LVU2027
 6706 0032 0020     		movs	r0, #0
 6707              	.LVL440:
 6708              	.L580:
4177:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6709              		.loc 1 4177 2 view .LVU2028
 6710 0034 03B0     		add	sp, sp, #12
 6711              	.LCFI92:
 6712              		.cfi_def_cfa_offset 12
 6713              		@ sp needed
 6714 0036 30BD     		pop	{r4, r5, pc}
 6715              	.LVL441:
 6716              	.L598:
 6717              	.LCFI93:
 6718              		.cfi_def_cfa_offset 0
 6719              		.cfi_restore 4
 6720              		.cfi_restore 5
 6721              		.cfi_restore 14
4107:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6722              		.loc 1 4107 13 view .LVU2029
 6723 0038 0020     		movs	r0, #0
 6724              	.LVL442:
4177:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6725              		.loc 1 4177 2 view .LVU2030
 6726 003a 7047     		bx	lr
 6727              	.LVL443:
 6728              	.L599:
 6729              	.LCFI94:
 6730              		.cfi_def_cfa_offset 24
 6731              		.cfi_offset 4, -12
 6732              		.cfi_offset 5, -8
 6733              		.cfi_offset 14, -4
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6734              		.loc 1 4116 4 is_stmt 1 view .LVU2031
 6735              	.LBB480:
 6736              	.LBI480:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6737              		.loc 2 191 30 view .LVU2032
 6738              	.LBB481:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 248


 6739              		.loc 2 193 1 view .LVU2033
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6740              		.loc 2 195 2 view .LVU2034
 6741              		.syntax unified
 6742              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6743 003c 4FF05003 			mov r3, #80												
 6744 0040 83F31188 		msr basepri, r3											
 6745 0044 BFF36F8F 		isb														
 6746 0048 BFF34F8F 		dsb														
 6747              	
 6748              	@ 0 "" 2
 6749              	.LVL444:
 6750              		.thumb
 6751              		.syntax unified
 6752              	.L586:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6753              		.loc 2 195 2 is_stmt 0 view .LVU2035
 6754              	.LBE481:
 6755              	.LBE480:
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6756              		.loc 1 4116 4 is_stmt 1 discriminator 2 view .LVU2036
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6757              		.loc 1 4116 4 discriminator 2 view .LVU2037
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6758              		.loc 1 4116 4 discriminator 2 view .LVU2038
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6759              		.loc 1 4116 4 discriminator 2 view .LVU2039
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6760              		.loc 1 4116 4 discriminator 2 view .LVU2040
4116:.//Libraries/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6761              		.loc 1 4116 4 discriminator 2 view .LVU2041
 6762 004c FEE7     		b	.L586
 6763              	.L600:
4131:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6764              		.loc 1 4131 6 view .LVU2042
4131:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6765              		.loc 1 4131 10 is_stmt 0 view .LVU2043
 6766 004e 211D     		adds	r1, r4, #4
 6767 0050 0846     		mov	r0, r1
 6768              	.LVL445:
4131:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6769              		.loc 1 4131 10 view .LVU2044
 6770 0052 0191     		str	r1, [sp, #4]
 6771 0054 FFF7FEFF 		bl	uxListRemove
 6772              	.LVL446:
4137:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6773              		.loc 1 4137 31 is_stmt 1 view .LVU2045
4142:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6774              		.loc 1 4142 67 view .LVU2046
4143:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6775              		.loc 1 4143 6 view .LVU2047
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6776              		.loc 1 4149 6 is_stmt 0 view .LVU2048
 6777 0058 0A4B     		ldr	r3, .L601+4
4143:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6778              		.loc 1 4143 31 view .LVU2049
 6779 005a E06C     		ldr	r0, [r4, #76]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 249


4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6780              		.loc 1 4149 6 view .LVU2050
 6781 005c 1A68     		ldr	r2, [r3]
4148:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6782              		.loc 1 4148 6 view .LVU2051
 6783 005e C0F13805 		rsb	r5, r0, #56
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6784              		.loc 1 4149 6 view .LVU2052
 6785 0062 0199     		ldr	r1, [sp, #4]
 6786 0064 9042     		cmp	r0, r2
4143:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6787              		.loc 1 4143 24 view .LVU2053
 6788 0066 E062     		str	r0, [r4, #44]
4148:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6789              		.loc 1 4148 6 is_stmt 1 view .LVU2054
 6790 0068 A561     		str	r5, [r4, #24]
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6791              		.loc 1 4149 6 view .LVU2055
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6792              		.loc 1 4149 6 view .LVU2056
 6793 006a 00D9     		bls	.L588
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6794              		.loc 1 4149 6 discriminator 1 view .LVU2057
 6795 006c 1860     		str	r0, [r3]
 6796              	.L588:
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6797              		.loc 1 4149 6 discriminator 3 view .LVU2058
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6798              		.loc 1 4149 6 discriminator 3 view .LVU2059
 6799 006e 064B     		ldr	r3, .L601+8
 6800 0070 00EB8000 		add	r0, r0, r0, lsl #2
 6801 0074 03EB8000 		add	r0, r3, r0, lsl #2
 6802 0078 FFF7FEFF 		bl	vListInsertEnd
 6803              	.LVL447:
4149:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6804              		.loc 1 4149 36 discriminator 3 view .LVU2060
4159:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6805              		.loc 1 4159 6 discriminator 3 view .LVU2061
4159:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 6806              		.loc 1 4159 14 is_stmt 0 discriminator 3 view .LVU2062
 6807 007c 0120     		movs	r0, #1
4173:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 6808              		.loc 1 4173 28 is_stmt 1 discriminator 3 view .LVU2063
4176:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6809              		.loc 1 4176 3 discriminator 3 view .LVU2064
4176:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 6810              		.loc 1 4176 10 is_stmt 0 discriminator 3 view .LVU2065
 6811 007e D9E7     		b	.L580
 6812              	.L602:
 6813              		.align	2
 6814              	.L601:
 6815 0080 00000000 		.word	.LANCHOR1
 6816 0084 00000000 		.word	.LANCHOR12
 6817 0088 00000000 		.word	.LANCHOR2
 6818              		.cfi_endproc
 6819              	.LFE54:
 6821              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 250


 6822              		.align	1
 6823              		.p2align 2,,3
 6824              		.global	vTaskPriorityDisinheritAfterTimeout
 6825              		.syntax unified
 6826              		.thumb
 6827              		.thumb_func
 6828              		.fpu fpv5-d16
 6830              	vTaskPriorityDisinheritAfterTimeout:
 6831              	.LVL448:
 6832              	.LFB55:
4185:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6833              		.loc 1 4185 2 is_stmt 1 view -0
 6834              		.cfi_startproc
 6835              		@ args = 0, pretend = 0, frame = 8
 6836              		@ frame_needed = 0, uses_anonymous_args = 0
4186:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 6837              		.loc 1 4186 2 view .LVU2067
4187:.//Libraries/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6838              		.loc 1 4187 2 view .LVU2068
4188:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6839              		.loc 1 4188 2 view .LVU2069
4190:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6840              		.loc 1 4190 3 view .LVU2070
4190:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 6841              		.loc 1 4190 5 is_stmt 0 view .LVU2071
 6842 0000 C8B1     		cbz	r0, .L620
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6843              		.loc 1 4194 4 is_stmt 1 view .LVU2072
 6844 0002 0B46     		mov	r3, r1
 6845 0004 016D     		ldr	r1, [r0, #80]
 6846              	.LVL449:
4185:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6847              		.loc 1 4185 2 is_stmt 0 view .LVU2073
 6848 0006 30B5     		push	{r4, r5, lr}
 6849              	.LCFI95:
 6850              		.cfi_def_cfa_offset 12
 6851              		.cfi_offset 4, -12
 6852              		.cfi_offset 5, -8
 6853              		.cfi_offset 14, -4
 6854 0008 0446     		mov	r4, r0
 6855 000a 83B0     		sub	sp, sp, #12
 6856              	.LCFI96:
 6857              		.cfi_def_cfa_offset 24
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6858              		.loc 1 4194 4 view .LVU2074
 6859 000c 51B1     		cbz	r1, .L623
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6860              		.loc 1 4194 40 is_stmt 1 discriminator 2 view .LVU2075
4200:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6861              		.loc 1 4200 4 discriminator 2 view .LVU2076
 6862 000e C06C     		ldr	r0, [r0, #76]
 6863              	.LVL450:
4210:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6864              		.loc 1 4210 13 is_stmt 0 discriminator 2 view .LVU2077
 6865 0010 E26A     		ldr	r2, [r4, #44]
 6866 0012 8342     		cmp	r3, r0
 6867 0014 38BF     		it	cc
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 251


 6868 0016 0346     		movcc	r3, r0
 6869              	.LVL451:
4210:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 6870              		.loc 1 4210 4 is_stmt 1 discriminator 2 view .LVU2078
4216:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6871              		.loc 1 4216 5 discriminator 2 view .LVU2079
4216:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 6872              		.loc 1 4216 7 is_stmt 0 discriminator 2 view .LVU2080
 6873 0018 0129     		cmp	r1, #1
 6874 001a 01D1     		bne	.L603
 6875 001c 9A42     		cmp	r2, r3
 6876 001e 0BD1     		bne	.L624
 6877              	.LVL452:
 6878              	.L603:
4282:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6879              		.loc 1 4282 2 view .LVU2081
 6880 0020 03B0     		add	sp, sp, #12
 6881              	.LCFI97:
 6882              		.cfi_remember_state
 6883              		.cfi_def_cfa_offset 12
 6884              		@ sp needed
 6885 0022 30BD     		pop	{r4, r5, pc}
 6886              	.LVL453:
 6887              	.L623:
 6888              	.LCFI98:
 6889              		.cfi_restore_state
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6890              		.loc 1 4194 4 is_stmt 1 view .LVU2082
 6891              	.LBB482:
 6892              	.LBI482:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6893              		.loc 2 191 30 view .LVU2083
 6894              	.LBB483:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6895              		.loc 2 193 1 view .LVU2084
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6896              		.loc 2 195 2 view .LVU2085
 6897              		.syntax unified
 6898              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6899 0024 4FF05003 			mov r3, #80												
 6900 0028 83F31188 		msr basepri, r3											
 6901 002c BFF36F8F 		isb														
 6902 0030 BFF34F8F 		dsb														
 6903              	
 6904              	@ 0 "" 2
 6905              	.LVL454:
 6906              		.thumb
 6907              		.syntax unified
 6908              	.L607:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6909              		.loc 2 195 2 is_stmt 0 view .LVU2086
 6910              	.LBE483:
 6911              	.LBE482:
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6912              		.loc 1 4194 4 is_stmt 1 discriminator 1 view .LVU2087
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6913              		.loc 1 4194 4 discriminator 1 view .LVU2088
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 252


4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6914              		.loc 1 4194 4 discriminator 1 view .LVU2089
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6915              		.loc 1 4194 4 discriminator 1 view .LVU2090
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6916              		.loc 1 4194 4 discriminator 1 view .LVU2091
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6917              		.loc 1 4194 4 discriminator 1 view .LVU2092
 6918 0034 FEE7     		b	.L607
 6919              	.LVL455:
 6920              	.L620:
 6921              	.LCFI99:
 6922              		.cfi_def_cfa_offset 0
 6923              		.cfi_restore 4
 6924              		.cfi_restore 5
 6925              		.cfi_restore 14
4194:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6926              		.loc 1 4194 4 is_stmt 0 discriminator 1 view .LVU2093
 6927 0036 7047     		bx	lr
 6928              	.LVL456:
 6929              	.L624:
 6930              	.LCFI100:
 6931              		.cfi_def_cfa_offset 24
 6932              		.cfi_offset 4, -12
 6933              		.cfi_offset 5, -8
 6934              		.cfi_offset 14, -4
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6935              		.loc 1 4221 6 is_stmt 1 view .LVU2094
 6936 0038 1849     		ldr	r1, .L626
 6937 003a 0968     		ldr	r1, [r1]
 6938 003c A142     		cmp	r1, r4
 6939 003e 23D0     		beq	.L625
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6940              		.loc 1 4221 43 discriminator 2 view .LVU2095
4226:.//Libraries/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6941              		.loc 1 4226 67 discriminator 2 view .LVU2096
4227:.//Libraries/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6942              		.loc 1 4227 6 discriminator 2 view .LVU2097
 6943              	.LVL457:
4228:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6944              		.loc 1 4228 6 discriminator 2 view .LVU2098
4232:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6945              		.loc 1 4232 8 is_stmt 0 discriminator 2 view .LVU2099
 6946 0040 A169     		ldr	r1, [r4, #24]
4228:.//Libraries/FreeRTOS/Source/tasks.c **** 
 6947              		.loc 1 4228 24 discriminator 2 view .LVU2100
 6948 0042 E362     		str	r3, [r4, #44]
4232:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6949              		.loc 1 4232 6 is_stmt 1 discriminator 2 view .LVU2101
4232:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6950              		.loc 1 4232 8 is_stmt 0 discriminator 2 view .LVU2102
 6951 0044 0029     		cmp	r1, #0
 6952 0046 02DB     		blt	.L611
4234:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6953              		.loc 1 4234 7 is_stmt 1 view .LVU2103
 6954 0048 C3F13803 		rsb	r3, r3, #56
 6955              	.LVL458:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 253


4234:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6956              		.loc 1 4234 7 is_stmt 0 view .LVU2104
 6957 004c A361     		str	r3, [r4, #24]
 6958              	.L611:
4238:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6959              		.loc 1 4238 31 is_stmt 1 view .LVU2105
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6960              		.loc 1 4247 6 view .LVU2106
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6961              		.loc 1 4247 10 is_stmt 0 view .LVU2107
 6962 004e 02EB8202 		add	r2, r2, r2, lsl #2
 6963              	.LVL459:
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6964              		.loc 1 4247 10 view .LVU2108
 6965 0052 134D     		ldr	r5, .L626+4
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6966              		.loc 1 4247 8 view .LVU2109
 6967 0054 6169     		ldr	r1, [r4, #20]
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6968              		.loc 1 4247 10 view .LVU2110
 6969 0056 05EB8203 		add	r3, r5, r2, lsl #2
4247:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 6970              		.loc 1 4247 8 view .LVU2111
 6971 005a 9942     		cmp	r1, r3
 6972 005c E0D1     		bne	.L603
4249:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 6973              		.loc 1 4249 7 is_stmt 1 view .LVU2112
4249:.//Libraries/FreeRTOS/Source/tasks.c **** 						{
 6974              		.loc 1 4249 11 is_stmt 0 view .LVU2113
 6975 005e 211D     		adds	r1, r4, #4
 6976 0060 0846     		mov	r0, r1
 6977 0062 0191     		str	r1, [sp, #4]
 6978 0064 FFF7FEFF 		bl	uxListRemove
 6979              	.LVL460:
4258:.//Libraries/FreeRTOS/Source/tasks.c **** 						}
 6980              		.loc 1 4258 32 is_stmt 1 view .LVU2114
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6981              		.loc 1 4261 7 view .LVU2115
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6982              		.loc 1 4261 7 view .LVU2116
 6983 0068 0E4B     		ldr	r3, .L626+8
 6984 006a E06A     		ldr	r0, [r4, #44]
 6985 006c 1A68     		ldr	r2, [r3]
 6986 006e 0199     		ldr	r1, [sp, #4]
 6987 0070 9042     		cmp	r0, r2
 6988 0072 00D9     		bls	.L612
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6989              		.loc 1 4261 7 discriminator 1 view .LVU2117
 6990 0074 1860     		str	r0, [r3]
 6991              	.L612:
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6992              		.loc 1 4261 7 discriminator 3 view .LVU2118
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 6993              		.loc 1 4261 7 discriminator 3 view .LVU2119
 6994 0076 00EB8000 		add	r0, r0, r0, lsl #2
 6995 007a 05EB8000 		add	r0, r5, r0, lsl #2
4282:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 254


 6996              		.loc 1 4282 2 is_stmt 0 discriminator 3 view .LVU2120
 6997 007e 03B0     		add	sp, sp, #12
 6998              	.LCFI101:
 6999              		.cfi_remember_state
 7000              		.cfi_def_cfa_offset 12
 7001              		@ sp needed
 7002 0080 BDE83040 		pop	{r4, r5, lr}
 7003              	.LCFI102:
 7004              		.cfi_restore 14
 7005              		.cfi_restore 5
 7006              		.cfi_restore 4
 7007              		.cfi_def_cfa_offset 0
 7008              	.LVL461:
4261:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7009              		.loc 1 4261 7 discriminator 3 view .LVU2121
 7010 0084 FFF7FEBF 		b	vListInsertEnd
 7011              	.LVL462:
 7012              	.L625:
 7013              	.LCFI103:
 7014              		.cfi_restore_state
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7015              		.loc 1 4221 6 is_stmt 1 view .LVU2122
 7016              	.LBB484:
 7017              	.LBI484:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7018              		.loc 2 191 30 view .LVU2123
 7019              	.LBB485:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7020              		.loc 2 193 1 view .LVU2124
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7021              		.loc 2 195 2 view .LVU2125
 7022              		.syntax unified
 7023              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7024 0088 4FF05003 			mov r3, #80												
 7025 008c 83F31188 		msr basepri, r3											
 7026 0090 BFF36F8F 		isb														
 7027 0094 BFF34F8F 		dsb														
 7028              	
 7029              	@ 0 "" 2
 7030              	.LVL463:
 7031              		.thumb
 7032              		.syntax unified
 7033              	.L610:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7034              		.loc 2 195 2 is_stmt 0 view .LVU2126
 7035              	.LBE485:
 7036              	.LBE484:
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7037              		.loc 1 4221 6 is_stmt 1 discriminator 2 view .LVU2127
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7038              		.loc 1 4221 6 discriminator 2 view .LVU2128
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7039              		.loc 1 4221 6 discriminator 2 view .LVU2129
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7040              		.loc 1 4221 6 discriminator 2 view .LVU2130
4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7041              		.loc 1 4221 6 discriminator 2 view .LVU2131
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 255


4221:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7042              		.loc 1 4221 6 discriminator 2 view .LVU2132
 7043 0098 FEE7     		b	.L610
 7044              	.L627:
 7045 009a 00BF     		.align	2
 7046              	.L626:
 7047 009c 00000000 		.word	.LANCHOR1
 7048 00a0 00000000 		.word	.LANCHOR2
 7049 00a4 00000000 		.word	.LANCHOR12
 7050              		.cfi_endproc
 7051              	.LFE55:
 7053              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7054              		.align	1
 7055              		.p2align 2,,3
 7056              		.global	uxTaskResetEventItemValue
 7057              		.syntax unified
 7058              		.thumb
 7059              		.thumb_func
 7060              		.fpu fpv5-d16
 7062              	uxTaskResetEventItemValue:
 7063              	.LFB56:
4603:.//Libraries/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 7064              		.loc 1 4603 1 view -0
 7065              		.cfi_startproc
 7066              		@ args = 0, pretend = 0, frame = 0
 7067              		@ frame_needed = 0, uses_anonymous_args = 0
 7068              		@ link register save eliminated.
4604:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7069              		.loc 1 4604 1 view .LVU2134
4606:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7070              		.loc 1 4606 2 view .LVU2135
4606:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7071              		.loc 1 4606 13 is_stmt 0 view .LVU2136
 7072 0000 044A     		ldr	r2, .L629
 7073 0002 1168     		ldr	r1, [r2]
4610:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7074              		.loc 1 4610 2 view .LVU2137
 7075 0004 1368     		ldr	r3, [r2]
 7076 0006 1268     		ldr	r2, [r2]
 7077 0008 DB6A     		ldr	r3, [r3, #44]
4606:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7078              		.loc 1 4606 11 view .LVU2138
 7079 000a 8869     		ldr	r0, [r1, #24]
 7080              	.LVL464:
4610:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7081              		.loc 1 4610 2 is_stmt 1 view .LVU2139
 7082 000c C3F13803 		rsb	r3, r3, #56
 7083 0010 9361     		str	r3, [r2, #24]
4612:.//Libraries/FreeRTOS/Source/tasks.c **** }
 7084              		.loc 1 4612 2 view .LVU2140
4613:.//Libraries/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 7085              		.loc 1 4613 1 is_stmt 0 view .LVU2141
 7086 0012 7047     		bx	lr
 7087              	.L630:
 7088              		.align	2
 7089              	.L629:
 7090 0014 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 256


 7091              		.cfi_endproc
 7092              	.LFE56:
 7094              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7095              		.align	1
 7096              		.p2align 2,,3
 7097              		.global	pvTaskIncrementMutexHeldCount
 7098              		.syntax unified
 7099              		.thumb
 7100              		.thumb_func
 7101              		.fpu fpv5-d16
 7103              	pvTaskIncrementMutexHeldCount:
 7104              	.LFB57:
4619:.//Libraries/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 7105              		.loc 1 4619 2 is_stmt 1 view -0
 7106              		.cfi_startproc
 7107              		@ args = 0, pretend = 0, frame = 0
 7108              		@ frame_needed = 0, uses_anonymous_args = 0
 7109              		@ link register save eliminated.
4622:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7110              		.loc 1 4622 3 view .LVU2143
4622:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7111              		.loc 1 4622 20 is_stmt 0 view .LVU2144
 7112 0000 044B     		ldr	r3, .L636
 7113 0002 1A68     		ldr	r2, [r3]
4622:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7114              		.loc 1 4622 5 view .LVU2145
 7115 0004 1AB1     		cbz	r2, .L632
4624:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7116              		.loc 1 4624 4 is_stmt 1 view .LVU2146
4624:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7117              		.loc 1 4624 18 is_stmt 0 view .LVU2147
 7118 0006 1968     		ldr	r1, [r3]
4624:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7119              		.loc 1 4624 35 view .LVU2148
 7120 0008 0A6D     		ldr	r2, [r1, #80]
 7121 000a 0132     		adds	r2, r2, #1
 7122 000c 0A65     		str	r2, [r1, #80]
 7123              	.L632:
4627:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7124              		.loc 1 4627 3 is_stmt 1 view .LVU2149
4627:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7125              		.loc 1 4627 10 is_stmt 0 view .LVU2150
 7126 000e 1868     		ldr	r0, [r3]
4628:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7127              		.loc 1 4628 2 view .LVU2151
 7128 0010 7047     		bx	lr
 7129              	.L637:
 7130 0012 00BF     		.align	2
 7131              	.L636:
 7132 0014 00000000 		.word	.LANCHOR1
 7133              		.cfi_endproc
 7134              	.LFE57:
 7136              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 7137              		.align	1
 7138              		.p2align 2,,3
 7139              		.global	ulTaskNotifyTake
 7140              		.syntax unified
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 257


 7141              		.thumb
 7142              		.thumb_func
 7143              		.fpu fpv5-d16
 7145              	ulTaskNotifyTake:
 7146              	.LVL465:
 7147              	.LFB58:
4636:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 7148              		.loc 1 4636 2 is_stmt 1 view -0
 7149              		.cfi_startproc
 7150              		@ args = 0, pretend = 0, frame = 0
 7151              		@ frame_needed = 0, uses_anonymous_args = 0
4637:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7152              		.loc 1 4637 2 view .LVU2153
4639:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7153              		.loc 1 4639 3 view .LVU2154
4636:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 7154              		.loc 1 4636 2 is_stmt 0 view .LVU2155
 7155 0000 70B5     		push	{r4, r5, r6, lr}
 7156              	.LCFI104:
 7157              		.cfi_def_cfa_offset 16
 7158              		.cfi_offset 4, -16
 7159              		.cfi_offset 5, -12
 7160              		.cfi_offset 6, -8
 7161              		.cfi_offset 14, -4
4642:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7162              		.loc 1 4642 20 view .LVU2156
 7163 0002 174C     		ldr	r4, .L652
4636:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 7164              		.loc 1 4636 2 view .LVU2157
 7165 0004 0646     		mov	r6, r0
 7166 0006 0D46     		mov	r5, r1
4639:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7167              		.loc 1 4639 3 view .LVU2158
 7168 0008 FFF7FEFF 		bl	vPortEnterCritical
 7169              	.LVL466:
4642:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7170              		.loc 1 4642 4 is_stmt 1 view .LVU2159
4642:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7171              		.loc 1 4642 20 is_stmt 0 view .LVU2160
 7172 000c 2368     		ldr	r3, [r4]
 7173 000e 5B6D     		ldr	r3, [r3, #84]
4642:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7174              		.loc 1 4642 6 view .LVU2161
 7175 0010 23B9     		cbnz	r3, .L640
4645:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7176              		.loc 1 4645 5 is_stmt 1 view .LVU2162
4645:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7177              		.loc 1 4645 17 is_stmt 0 view .LVU2163
 7178 0012 2368     		ldr	r3, [r4]
4645:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7179              		.loc 1 4645 33 view .LVU2164
 7180 0014 0121     		movs	r1, #1
 7181 0016 83F85810 		strb	r1, [r3, #88]
4647:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7182              		.loc 1 4647 5 is_stmt 1 view .LVU2165
4647:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7183              		.loc 1 4647 7 is_stmt 0 view .LVU2166
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 258


 7184 001a ADB9     		cbnz	r5, .L651
 7185              	.L640:
4665:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7186              		.loc 1 4665 29 is_stmt 1 view .LVU2167
4668:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7187              		.loc 1 4668 3 view .LVU2168
 7188 001c FFF7FEFF 		bl	vPortExitCritical
 7189              	.LVL467:
4670:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7190              		.loc 1 4670 3 view .LVU2169
 7191 0020 FFF7FEFF 		bl	vPortEnterCritical
 7192              	.LVL468:
4672:.//Libraries/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7193              		.loc 1 4672 27 view .LVU2170
4673:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7194              		.loc 1 4673 4 view .LVU2171
4673:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7195              		.loc 1 4673 27 is_stmt 0 view .LVU2172
 7196 0024 2368     		ldr	r3, [r4]
4673:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7197              		.loc 1 4673 13 view .LVU2173
 7198 0026 5D6D     		ldr	r5, [r3, #84]
 7199              	.LVL469:
4675:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7200              		.loc 1 4675 4 is_stmt 1 view .LVU2174
4675:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7201              		.loc 1 4675 6 is_stmt 0 view .LVU2175
 7202 0028 1DB1     		cbz	r5, .L642
4677:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7203              		.loc 1 4677 5 is_stmt 1 view .LVU2176
4679:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7204              		.loc 1 4679 18 is_stmt 0 view .LVU2177
 7205 002a 2368     		ldr	r3, [r4]
4677:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7206              		.loc 1 4677 7 view .LVU2178
 7207 002c 4EB1     		cbz	r6, .L643
4679:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7208              		.loc 1 4679 6 is_stmt 1 view .LVU2179
4679:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7209              		.loc 1 4679 36 is_stmt 0 view .LVU2180
 7210 002e 0022     		movs	r2, #0
 7211 0030 5A65     		str	r2, [r3, #84]
 7212              	.L642:
4688:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7213              		.loc 1 4688 29 is_stmt 1 view .LVU2181
4691:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7214              		.loc 1 4691 4 view .LVU2182
4691:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7215              		.loc 1 4691 16 is_stmt 0 view .LVU2183
 7216 0032 2368     		ldr	r3, [r4]
4691:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7217              		.loc 1 4691 32 view .LVU2184
 7218 0034 0022     		movs	r2, #0
 7219 0036 83F85820 		strb	r2, [r3, #88]
4693:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7220              		.loc 1 4693 3 is_stmt 1 view .LVU2185
 7221 003a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 259


 7222              	.LVL470:
4695:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7223              		.loc 1 4695 3 view .LVU2186
4696:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7224              		.loc 1 4696 2 is_stmt 0 view .LVU2187
 7225 003e 2846     		mov	r0, r5
 7226 0040 70BD     		pop	{r4, r5, r6, pc}
 7227              	.LVL471:
 7228              	.L643:
4683:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7229              		.loc 1 4683 6 is_stmt 1 view .LVU2188
4683:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7230              		.loc 1 4683 47 is_stmt 0 view .LVU2189
 7231 0042 6A1E     		subs	r2, r5, #1
4683:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7232              		.loc 1 4683 36 view .LVU2190
 7233 0044 5A65     		str	r2, [r3, #84]
 7234 0046 F4E7     		b	.L642
 7235              	.LVL472:
 7236              	.L651:
4649:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 7237              		.loc 1 4649 6 is_stmt 1 view .LVU2191
 7238 0048 2846     		mov	r0, r5
 7239 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 7240              	.LVL473:
4650:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7241              		.loc 1 4650 35 view .LVU2192
4656:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7242              		.loc 1 4656 6 view .LVU2193
 7243 004e 054B     		ldr	r3, .L652+4
 7244 0050 4FF08052 		mov	r2, #268435456
 7245 0054 1A60     		str	r2, [r3]
4656:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7246              		.loc 1 4656 6 view .LVU2194
 7247              		.syntax unified
 7248              	@ 4656 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7249 0056 BFF34F8F 		dsb
 7250              	@ 0 "" 2
4656:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7251              		.loc 1 4656 6 view .LVU2195
 7252              	@ 4656 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7253 005a BFF36F8F 		isb
 7254              	@ 0 "" 2
4656:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7255              		.loc 1 4656 28 view .LVU2196
 7256              		.thumb
 7257              		.syntax unified
 7258 005e DDE7     		b	.L640
 7259              	.L653:
 7260              		.align	2
 7261              	.L652:
 7262 0060 00000000 		.word	.LANCHOR1
 7263 0064 04ED00E0 		.word	-536810236
 7264              		.cfi_endproc
 7265              	.LFE58:
 7267              		.section	.text.xTaskNotifyWait,"ax",%progbits
 7268              		.align	1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 260


 7269              		.p2align 2,,3
 7270              		.global	xTaskNotifyWait
 7271              		.syntax unified
 7272              		.thumb
 7273              		.thumb_func
 7274              		.fpu fpv5-d16
 7276              	xTaskNotifyWait:
 7277              	.LVL474:
 7278              	.LFB59:
4704:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 7279              		.loc 1 4704 2 view -0
 7280              		.cfi_startproc
 7281              		@ args = 0, pretend = 0, frame = 8
 7282              		@ frame_needed = 0, uses_anonymous_args = 0
4705:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7283              		.loc 1 4705 2 view .LVU2198
4707:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7284              		.loc 1 4707 3 view .LVU2199
4704:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 7285              		.loc 1 4704 2 is_stmt 0 view .LVU2200
 7286 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7287              	.LCFI105:
 7288              		.cfi_def_cfa_offset 28
 7289              		.cfi_offset 4, -28
 7290              		.cfi_offset 5, -24
 7291              		.cfi_offset 6, -20
 7292              		.cfi_offset 7, -16
 7293              		.cfi_offset 8, -12
 7294              		.cfi_offset 9, -8
 7295              		.cfi_offset 14, -4
4710:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7296              		.loc 1 4710 20 view .LVU2201
 7297 0004 224C     		ldr	r4, .L670
4704:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 7298              		.loc 1 4704 2 view .LVU2202
 7299 0006 83B0     		sub	sp, sp, #12
 7300              	.LCFI106:
 7301              		.cfi_def_cfa_offset 40
4704:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 7302              		.loc 1 4704 2 view .LVU2203
 7303 0008 0E46     		mov	r6, r1
 7304 000a 8046     		mov	r8, r0
 7305 000c 1546     		mov	r5, r2
 7306 000e 9946     		mov	r9, r3
4707:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7307              		.loc 1 4707 3 view .LVU2204
 7308 0010 FFF7FEFF 		bl	vPortEnterCritical
 7309              	.LVL475:
4710:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7310              		.loc 1 4710 4 is_stmt 1 view .LVU2205
4710:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7311              		.loc 1 4710 20 is_stmt 0 view .LVU2206
 7312 0014 2168     		ldr	r1, [r4]
 7313 0016 91F85810 		ldrb	r1, [r1, #88]	@ zero_extendqisi2
4710:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7314              		.loc 1 4710 6 view .LVU2207
 7315 001a 0229     		cmp	r1, #2
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 261


 7316 001c 0BD0     		beq	.L656
4715:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7317              		.loc 1 4715 5 is_stmt 1 view .LVU2208
4715:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7318              		.loc 1 4715 35 is_stmt 0 view .LVU2209
 7319 001e 2368     		ldr	r3, [r4]
4718:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7320              		.loc 1 4718 33 view .LVU2210
 7321 0020 0121     		movs	r1, #1
4715:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7322              		.loc 1 4715 35 view .LVU2211
 7323 0022 5F6D     		ldr	r7, [r3, #84]
 7324 0024 27EA0807 		bic	r7, r7, r8
 7325 0028 5F65     		str	r7, [r3, #84]
4718:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7326              		.loc 1 4718 5 is_stmt 1 view .LVU2212
4718:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7327              		.loc 1 4718 17 is_stmt 0 view .LVU2213
 7328 002a 2368     		ldr	r3, [r4]
4718:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7329              		.loc 1 4718 33 view .LVU2214
 7330 002c 83F85810 		strb	r1, [r3, #88]
4720:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7331              		.loc 1 4720 5 is_stmt 1 view .LVU2215
4720:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7332              		.loc 1 4720 7 is_stmt 0 view .LVU2216
 7333 0030 B9F1000F 		cmp	r9, #0
 7334 0034 18D1     		bne	.L668
 7335              	.L656:
4738:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7336              		.loc 1 4738 29 is_stmt 1 view .LVU2217
4741:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7337              		.loc 1 4741 3 view .LVU2218
 7338 0036 FFF7FEFF 		bl	vPortExitCritical
 7339              	.LVL476:
4743:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7340              		.loc 1 4743 3 view .LVU2219
 7341 003a FFF7FEFF 		bl	vPortEnterCritical
 7342              	.LVL477:
4745:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7343              		.loc 1 4745 27 view .LVU2220
4747:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7344              		.loc 1 4747 4 view .LVU2221
4747:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7345              		.loc 1 4747 6 is_stmt 0 view .LVU2222
 7346 003e 15B1     		cbz	r5, .L658
4751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7347              		.loc 1 4751 5 is_stmt 1 view .LVU2223
4751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7348              		.loc 1 4751 41 is_stmt 0 view .LVU2224
 7349 0040 2368     		ldr	r3, [r4]
 7350 0042 5B6D     		ldr	r3, [r3, #84]
4751:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7351              		.loc 1 4751 27 view .LVU2225
 7352 0044 2B60     		str	r3, [r5]
 7353              	.L658:
4758:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 262


 7354              		.loc 1 4758 4 is_stmt 1 view .LVU2226
4758:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7355              		.loc 1 4758 20 is_stmt 0 view .LVU2227
 7356 0046 2368     		ldr	r3, [r4]
 7357 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
4758:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7358              		.loc 1 4758 6 view .LVU2228
 7359 004c 022B     		cmp	r3, #2
 7360 004e 17D0     		beq	.L669
4761:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7361              		.loc 1 4761 13 view .LVU2229
 7362 0050 0020     		movs	r0, #0
 7363              	.LVL478:
 7364              	.L659:
4771:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7365              		.loc 1 4771 16 view .LVU2230
 7366 0052 2368     		ldr	r3, [r4]
4771:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7367              		.loc 1 4771 32 view .LVU2231
 7368 0054 0022     		movs	r2, #0
 7369 0056 0190     		str	r0, [sp, #4]
 7370              	.LVL479:
4771:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7371              		.loc 1 4771 4 is_stmt 1 view .LVU2232
4771:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 7372              		.loc 1 4771 32 is_stmt 0 view .LVU2233
 7373 0058 83F85820 		strb	r2, [r3, #88]
4773:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7374              		.loc 1 4773 3 is_stmt 1 view .LVU2234
 7375 005c FFF7FEFF 		bl	vPortExitCritical
 7376              	.LVL480:
4775:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7377              		.loc 1 4775 3 view .LVU2235
4776:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7378              		.loc 1 4776 2 is_stmt 0 view .LVU2236
 7379 0060 0198     		ldr	r0, [sp, #4]
 7380 0062 03B0     		add	sp, sp, #12
 7381              	.LCFI107:
 7382              		.cfi_remember_state
 7383              		.cfi_def_cfa_offset 28
 7384              		@ sp needed
 7385 0064 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7386              	.LVL481:
 7387              	.L668:
 7388              	.LCFI108:
 7389              		.cfi_restore_state
4722:.//Libraries/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 7390              		.loc 1 4722 6 is_stmt 1 view .LVU2237
 7391 0068 4846     		mov	r0, r9
 7392 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 7393              	.LVL482:
4723:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7394              		.loc 1 4723 35 view .LVU2238
4729:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7395              		.loc 1 4729 6 view .LVU2239
 7396 006e 094B     		ldr	r3, .L670+4
 7397 0070 4FF08052 		mov	r2, #268435456
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 263


 7398 0074 1A60     		str	r2, [r3]
4729:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7399              		.loc 1 4729 6 view .LVU2240
 7400              		.syntax unified
 7401              	@ 4729 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7402 0076 BFF34F8F 		dsb
 7403              	@ 0 "" 2
4729:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7404              		.loc 1 4729 6 view .LVU2241
 7405              	@ 4729 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7406 007a BFF36F8F 		isb
 7407              	@ 0 "" 2
4729:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7408              		.loc 1 4729 28 view .LVU2242
 7409              		.thumb
 7410              		.syntax unified
 7411 007e DAE7     		b	.L656
 7412              	.L669:
4767:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7413              		.loc 1 4767 5 view .LVU2243
4767:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7414              		.loc 1 4767 35 is_stmt 0 view .LVU2244
 7415 0080 2368     		ldr	r3, [r4]
4768:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7416              		.loc 1 4768 13 view .LVU2245
 7417 0082 0120     		movs	r0, #1
4767:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7418              		.loc 1 4767 35 view .LVU2246
 7419 0084 596D     		ldr	r1, [r3, #84]
 7420 0086 21EA0606 		bic	r6, r1, r6
 7421              	.LVL483:
4767:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7422              		.loc 1 4767 35 view .LVU2247
 7423 008a 5E65     		str	r6, [r3, #84]
4768:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7424              		.loc 1 4768 5 is_stmt 1 view .LVU2248
 7425              	.LVL484:
4768:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7426              		.loc 1 4768 5 is_stmt 0 view .LVU2249
 7427 008c E1E7     		b	.L659
 7428              	.L671:
 7429 008e 00BF     		.align	2
 7430              	.L670:
 7431 0090 00000000 		.word	.LANCHOR1
 7432 0094 04ED00E0 		.word	-536810236
 7433              		.cfi_endproc
 7434              	.LFE59:
 7436              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7437              		.align	1
 7438              		.p2align 2,,3
 7439              		.global	xTaskGenericNotify
 7440              		.syntax unified
 7441              		.thumb
 7442              		.thumb_func
 7443              		.fpu fpv5-d16
 7445              	xTaskGenericNotify:
 7446              	.LVL485:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 264


 7447              	.LFB60:
4784:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7448              		.loc 1 4784 2 is_stmt 1 view -0
 7449              		.cfi_startproc
 7450              		@ args = 0, pretend = 0, frame = 8
 7451              		@ frame_needed = 0, uses_anonymous_args = 0
4785:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7452              		.loc 1 4785 2 view .LVU2251
4786:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 7453              		.loc 1 4786 2 view .LVU2252
4787:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7454              		.loc 1 4787 2 view .LVU2253
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7455              		.loc 1 4789 3 view .LVU2254
 7456 0000 B8B1     		cbz	r0, .L701
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7457              		.loc 1 4789 32 discriminator 2 view .LVU2255
4790:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7458              		.loc 1 4790 3 discriminator 2 view .LVU2256
4784:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7459              		.loc 1 4784 2 is_stmt 0 discriminator 2 view .LVU2257
 7460 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 7461              	.LCFI109:
 7462              		.cfi_def_cfa_offset 20
 7463              		.cfi_offset 4, -20
 7464              		.cfi_offset 5, -16
 7465              		.cfi_offset 6, -12
 7466              		.cfi_offset 7, -8
 7467              		.cfi_offset 14, -4
 7468 0004 1F46     		mov	r7, r3
 7469 0006 83B0     		sub	sp, sp, #12
 7470              	.LCFI110:
 7471              		.cfi_def_cfa_offset 32
 7472 0008 0D46     		mov	r5, r1
 7473 000a 0446     		mov	r4, r0
 7474              	.LVL486:
4792:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7475              		.loc 1 4792 3 is_stmt 1 discriminator 2 view .LVU2258
 7476 000c 1646     		mov	r6, r2
 7477 000e FFF7FEFF 		bl	vPortEnterCritical
 7478              	.LVL487:
4794:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7479              		.loc 1 4794 4 discriminator 2 view .LVU2259
4794:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7480              		.loc 1 4794 6 is_stmt 0 discriminator 2 view .LVU2260
 7481 0012 0FB1     		cbz	r7, .L675
4796:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7482              		.loc 1 4796 5 is_stmt 1 view .LVU2261
4796:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7483              		.loc 1 4796 42 is_stmt 0 view .LVU2262
 7484 0014 636D     		ldr	r3, [r4, #84]
4796:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7485              		.loc 1 4796 35 view .LVU2263
 7486 0016 3B60     		str	r3, [r7]
 7487              	.L675:
4799:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7488              		.loc 1 4799 4 is_stmt 1 view .LVU2264
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 265


4799:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7489              		.loc 1 4799 26 is_stmt 0 view .LVU2265
 7490 0018 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
4801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7491              		.loc 1 4801 25 view .LVU2266
 7492 001c 0222     		movs	r2, #2
4799:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7493              		.loc 1 4799 26 view .LVU2267
 7494 001e DBB2     		uxtb	r3, r3
 7495              	.LVL488:
4801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7496              		.loc 1 4801 4 is_stmt 1 view .LVU2268
4801:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7497              		.loc 1 4801 25 is_stmt 0 view .LVU2269
 7498 0020 84F85820 		strb	r2, [r4, #88]
4803:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7499              		.loc 1 4803 4 is_stmt 1 view .LVU2270
 7500 0024 042E     		cmp	r6, #4
 7501 0026 4FD8     		bhi	.L676
 7502 0028 DFE806F0 		tbb	[pc, r6]
 7503              	.L678:
 7504 002c 0F       		.byte	(.L682-.L678)/2
 7505 002d 0C       		.byte	(.L681-.L678)/2
 7506 002e 35       		.byte	(.L680-.L678)/2
 7507 002f 3B       		.byte	(.L699-.L678)/2
 7508 0030 39       		.byte	(.L677-.L678)/2
 7509              	.LVL489:
 7510 0031 00       		.p2align 1
 7511              	.L701:
 7512              	.LCFI111:
 7513              		.cfi_def_cfa_offset 0
 7514              		.cfi_restore 4
 7515              		.cfi_restore 5
 7516              		.cfi_restore 6
 7517              		.cfi_restore 7
 7518              		.cfi_restore 14
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7519              		.loc 1 4789 3 view .LVU2271
 7520              	.LBB486:
 7521              	.LBI486:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7522              		.loc 2 191 30 view .LVU2272
 7523              	.LBB487:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7524              		.loc 2 193 1 view .LVU2273
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7525              		.loc 2 195 2 view .LVU2274
 7526              		.syntax unified
 7527              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7528 0032 4FF05003 			mov r3, #80												
 7529 0036 83F31188 		msr basepri, r3											
 7530 003a BFF36F8F 		isb														
 7531 003e BFF34F8F 		dsb														
 7532              	
 7533              	@ 0 "" 2
 7534              	.LVL490:
 7535              		.thumb
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 266


 7536              		.syntax unified
 7537              	.L674:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7538              		.loc 2 195 2 is_stmt 0 view .LVU2275
 7539              	.LBE487:
 7540              	.LBE486:
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7541              		.loc 1 4789 3 is_stmt 1 discriminator 1 view .LVU2276
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7542              		.loc 1 4789 3 discriminator 1 view .LVU2277
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7543              		.loc 1 4789 3 discriminator 1 view .LVU2278
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7544              		.loc 1 4789 3 discriminator 1 view .LVU2279
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7545              		.loc 1 4789 3 discriminator 1 view .LVU2280
4789:.//Libraries/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7546              		.loc 1 4789 3 discriminator 1 view .LVU2281
 7547 0042 FEE7     		b	.L674
 7548              	.LVL491:
 7549              	.L681:
 7550              	.LCFI112:
 7551              		.cfi_def_cfa_offset 32
 7552              		.cfi_offset 4, -20
 7553              		.cfi_offset 5, -16
 7554              		.cfi_offset 6, -12
 7555              		.cfi_offset 7, -8
 7556              		.cfi_offset 14, -4
4806:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7557              		.loc 1 4806 6 view .LVU2282
4806:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7558              		.loc 1 4806 29 is_stmt 0 view .LVU2283
 7559 0044 626D     		ldr	r2, [r4, #84]
 7560 0046 1543     		orrs	r5, r5, r2
 7561              	.LVL492:
4806:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7562              		.loc 1 4806 29 view .LVU2284
 7563 0048 6565     		str	r5, [r4, #84]
4807:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7564              		.loc 1 4807 6 is_stmt 1 view .LVU2285
 7565              	.L682:
4843:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7566              		.loc 1 4843 22 view .LVU2286
4847:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7567              		.loc 1 4847 4 view .LVU2287
4847:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7568              		.loc 1 4847 6 is_stmt 0 view .LVU2288
 7569 004a 012B     		cmp	r3, #1
 7570 004c 05D0     		beq	.L685
 7571              	.LVL493:
 7572              	.L700:
4875:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7573              		.loc 1 4875 37 is_stmt 1 view .LVU2289
 7574 004e 0124     		movs	r4, #1
 7575              	.LVL494:
 7576              	.L683:
4884:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 267


 7577              		.loc 1 4884 29 view .LVU2290
4887:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7578              		.loc 1 4887 3 view .LVU2291
 7579 0050 FFF7FEFF 		bl	vPortExitCritical
 7580              	.LVL495:
4889:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7581              		.loc 1 4889 3 view .LVU2292
4890:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7582              		.loc 1 4890 2 is_stmt 0 view .LVU2293
 7583 0054 2046     		mov	r0, r4
 7584 0056 03B0     		add	sp, sp, #12
 7585              	.LCFI113:
 7586              		.cfi_remember_state
 7587              		.cfi_def_cfa_offset 20
 7588              		@ sp needed
 7589 0058 F0BD     		pop	{r4, r5, r6, r7, pc}
 7590              	.LVL496:
 7591              	.L685:
 7592              	.LCFI114:
 7593              		.cfi_restore_state
4849:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7594              		.loc 1 4849 5 is_stmt 1 view .LVU2294
4849:.//Libraries/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7595              		.loc 1 4849 14 is_stmt 0 view .LVU2295
 7596 005a 211D     		adds	r1, r4, #4
 7597 005c 0846     		mov	r0, r1
 7598 005e 0191     		str	r1, [sp, #4]
 7599 0060 FFF7FEFF 		bl	uxListRemove
 7600              	.LVL497:
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7601              		.loc 1 4850 5 is_stmt 1 view .LVU2296
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7602              		.loc 1 4850 5 view .LVU2297
 7603 0064 1E4B     		ldr	r3, .L702
 7604 0066 E06A     		ldr	r0, [r4, #44]
 7605 0068 1A68     		ldr	r2, [r3]
 7606 006a 0199     		ldr	r1, [sp, #4]
 7607 006c 9042     		cmp	r0, r2
 7608 006e 00D9     		bls	.L686
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7609              		.loc 1 4850 5 discriminator 1 view .LVU2298
 7610 0070 1860     		str	r0, [r3]
 7611              	.L686:
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7612              		.loc 1 4850 5 discriminator 3 view .LVU2299
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7613              		.loc 1 4850 5 discriminator 3 view .LVU2300
 7614 0072 1C4B     		ldr	r3, .L702+4
 7615 0074 00EB8000 		add	r0, r0, r0, lsl #2
 7616 0078 03EB8000 		add	r0, r3, r0, lsl #2
 7617 007c FFF7FEFF 		bl	vListInsertEnd
 7618              	.LVL498:
4850:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7619              		.loc 1 4850 35 discriminator 3 view .LVU2301
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7620              		.loc 1 4853 5 discriminator 3 view .LVU2302
 7621 0080 A36A     		ldr	r3, [r4, #40]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 268


 7622 0082 83B1     		cbz	r3, .L687
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7623              		.loc 1 4853 5 view .LVU2303
 7624              	.LBB488:
 7625              	.LBI488:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7626              		.loc 2 191 30 view .LVU2304
 7627              	.LBB489:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7628              		.loc 2 193 1 view .LVU2305
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7629              		.loc 2 195 2 view .LVU2306
 7630              		.syntax unified
 7631              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7632 0084 4FF05003 			mov r3, #80												
 7633 0088 83F31188 		msr basepri, r3											
 7634 008c BFF36F8F 		isb														
 7635 0090 BFF34F8F 		dsb														
 7636              	
 7637              	@ 0 "" 2
 7638              	.LVL499:
 7639              		.thumb
 7640              		.syntax unified
 7641              	.L688:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7642              		.loc 2 195 2 is_stmt 0 view .LVU2307
 7643              	.LBE489:
 7644              	.LBE488:
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7645              		.loc 1 4853 5 is_stmt 1 discriminator 3 view .LVU2308
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7646              		.loc 1 4853 5 discriminator 3 view .LVU2309
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7647              		.loc 1 4853 5 discriminator 3 view .LVU2310
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7648              		.loc 1 4853 5 discriminator 3 view .LVU2311
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7649              		.loc 1 4853 5 discriminator 3 view .LVU2312
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7650              		.loc 1 4853 5 discriminator 3 view .LVU2313
 7651 0094 FEE7     		b	.L688
 7652              	.LVL500:
 7653              	.L680:
4810:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7654              		.loc 1 4810 6 view .LVU2314
4810:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7655              		.loc 1 4810 13 is_stmt 0 view .LVU2315
 7656 0096 626D     		ldr	r2, [r4, #84]
4810:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7657              		.loc 1 4810 32 view .LVU2316
 7658 0098 0132     		adds	r2, r2, #1
 7659 009a 6265     		str	r2, [r4, #84]
4811:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7660              		.loc 1 4811 6 is_stmt 1 view .LVU2317
 7661 009c D5E7     		b	.L682
 7662              	.L677:
4818:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 269


 7663              		.loc 1 4818 6 view .LVU2318
4818:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 7664              		.loc 1 4818 8 is_stmt 0 view .LVU2319
 7665 009e 022B     		cmp	r3, #2
 7666 00a0 10D0     		beq	.L690
 7667              	.L699:
4820:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7668              		.loc 1 4820 7 is_stmt 1 view .LVU2320
4820:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7669              		.loc 1 4820 30 is_stmt 0 view .LVU2321
 7670 00a2 6565     		str	r5, [r4, #84]
 7671 00a4 D1E7     		b	.L682
 7672              	.LVL501:
 7673              	.L687:
4853:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7674              		.loc 1 4853 82 is_stmt 1 discriminator 2 view .LVU2322
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7675              		.loc 1 4871 5 discriminator 2 view .LVU2323
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7676              		.loc 1 4871 41 is_stmt 0 discriminator 2 view .LVU2324
 7677 00a6 104B     		ldr	r3, .L702+8
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7678              		.loc 1 4871 7 discriminator 2 view .LVU2325
 7679 00a8 E26A     		ldr	r2, [r4, #44]
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7680              		.loc 1 4871 41 discriminator 2 view .LVU2326
 7681 00aa 1B68     		ldr	r3, [r3]
4871:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7682              		.loc 1 4871 7 discriminator 2 view .LVU2327
 7683 00ac DB6A     		ldr	r3, [r3, #44]
 7684 00ae 9A42     		cmp	r2, r3
 7685 00b0 CDD9     		bls	.L700
4875:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7686              		.loc 1 4875 6 is_stmt 1 view .LVU2328
 7687 00b2 0E4B     		ldr	r3, .L702+12
 7688 00b4 4FF08052 		mov	r2, #268435456
 7689 00b8 1A60     		str	r2, [r3]
4875:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7690              		.loc 1 4875 6 view .LVU2329
 7691              		.syntax unified
 7692              	@ 4875 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7693 00ba BFF34F8F 		dsb
 7694              	@ 0 "" 2
4875:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7695              		.loc 1 4875 6 view .LVU2330
 7696              	@ 4875 ".//Libraries/FreeRTOS/Source/tasks.c" 1
 7697 00be BFF36F8F 		isb
 7698              	@ 0 "" 2
 7699              		.thumb
 7700              		.syntax unified
 7701 00c2 C4E7     		b	.L700
 7702              	.LVL502:
 7703              	.L690:
4825:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7704              		.loc 1 4825 15 is_stmt 0 view .LVU2331
 7705 00c4 0024     		movs	r4, #0
 7706              	.LVL503:
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 270


4825:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7707              		.loc 1 4825 15 view .LVU2332
 7708 00c6 C3E7     		b	.L683
 7709              	.LVL504:
 7710              	.L676:
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7711              		.loc 1 4838 6 is_stmt 1 view .LVU2333
 7712 00c8 626D     		ldr	r2, [r4, #84]
 7713 00ca 0132     		adds	r2, r2, #1
 7714 00cc BDD0     		beq	.L682
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7715              		.loc 1 4838 6 view .LVU2334
 7716              	.LBB490:
 7717              	.LBI490:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7718              		.loc 2 191 30 view .LVU2335
 7719              	.LBB491:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7720              		.loc 2 193 1 view .LVU2336
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7721              		.loc 2 195 2 view .LVU2337
 7722              		.syntax unified
 7723              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7724 00ce 4FF05003 			mov r3, #80												
 7725 00d2 83F31188 		msr basepri, r3											
 7726 00d6 BFF36F8F 		isb														
 7727 00da BFF34F8F 		dsb														
 7728              	
 7729              	@ 0 "" 2
 7730              	.LVL505:
 7731              		.thumb
 7732              		.syntax unified
 7733              	.L684:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7734              		.loc 2 195 2 is_stmt 0 view .LVU2338
 7735              	.LBE491:
 7736              	.LBE490:
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7737              		.loc 1 4838 6 is_stmt 1 discriminator 2 view .LVU2339
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7738              		.loc 1 4838 6 discriminator 2 view .LVU2340
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7739              		.loc 1 4838 6 discriminator 2 view .LVU2341
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7740              		.loc 1 4838 6 discriminator 2 view .LVU2342
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7741              		.loc 1 4838 6 discriminator 2 view .LVU2343
4838:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7742              		.loc 1 4838 6 discriminator 2 view .LVU2344
 7743 00de FEE7     		b	.L684
 7744              	.L703:
 7745              		.align	2
 7746              	.L702:
 7747 00e0 00000000 		.word	.LANCHOR12
 7748 00e4 00000000 		.word	.LANCHOR2
 7749 00e8 00000000 		.word	.LANCHOR1
 7750 00ec 04ED00E0 		.word	-536810236
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 271


 7751              		.cfi_endproc
 7752              	.LFE60:
 7754              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7755              		.align	1
 7756              		.p2align 2,,3
 7757              		.global	xTaskGenericNotifyFromISR
 7758              		.syntax unified
 7759              		.thumb
 7760              		.thumb_func
 7761              		.fpu fpv5-d16
 7763              	xTaskGenericNotifyFromISR:
 7764              	.LVL506:
 7765              	.LFB61:
4898:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7766              		.loc 1 4898 2 view -0
 7767              		.cfi_startproc
 7768              		@ args = 4, pretend = 0, frame = 8
 7769              		@ frame_needed = 0, uses_anonymous_args = 0
4899:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 7770              		.loc 1 4899 2 view .LVU2346
4900:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7771              		.loc 1 4900 2 view .LVU2347
4901:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7772              		.loc 1 4901 2 view .LVU2348
4902:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7773              		.loc 1 4902 2 view .LVU2349
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7774              		.loc 1 4904 3 view .LVU2350
4898:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7775              		.loc 1 4898 2 is_stmt 0 view .LVU2351
 7776 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7777              	.LCFI115:
 7778              		.cfi_def_cfa_offset 28
 7779              		.cfi_offset 4, -28
 7780              		.cfi_offset 5, -24
 7781              		.cfi_offset 6, -20
 7782              		.cfi_offset 7, -16
 7783              		.cfi_offset 8, -12
 7784              		.cfi_offset 9, -8
 7785              		.cfi_offset 14, -4
 7786 0004 83B0     		sub	sp, sp, #12
 7787              	.LCFI116:
 7788              		.cfi_def_cfa_offset 40
4898:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 7789              		.loc 1 4898 2 view .LVU2352
 7790 0006 0A9F     		ldr	r7, [sp, #40]
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7791              		.loc 1 4904 3 view .LVU2353
 7792 0008 18B3     		cbz	r0, .L737
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7793              		.loc 1 4904 32 is_stmt 1 discriminator 2 view .LVU2354
4922:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7794              		.loc 1 4922 3 discriminator 2 view .LVU2355
 7795 000a 0D46     		mov	r5, r1
 7796 000c 0446     		mov	r4, r0
 7797 000e 9046     		mov	r8, r2
 7798 0010 9946     		mov	r9, r3
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 272


 7799 0012 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7800              	.LVL507:
4924:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7801              		.loc 1 4924 3 discriminator 2 view .LVU2356
4926:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 7802              		.loc 1 4926 3 discriminator 2 view .LVU2357
 7803              	.LBB492:
 7804              	.LBI492:
 207:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7805              		.loc 2 207 34 discriminator 2 view .LVU2358
 7806              	.LBB493:
 209:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7807              		.loc 2 209 1 discriminator 2 view .LVU2359
 211:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7808              		.loc 2 211 2 discriminator 2 view .LVU2360
 7809              		.syntax unified
 7810              	@ 211 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7811 0016 EFF31186 			mrs r6, basepri											
 7812 001a 4FF05003 		mov r3, #80												
 7813 001e 83F31188 		msr basepri, r3											
 7814 0022 BFF36F8F 		isb														
 7815 0026 BFF34F8F 		dsb														
 7816              	
 7817              	@ 0 "" 2
 7818              	.LVL508:
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7819              		.loc 2 223 2 discriminator 2 view .LVU2361
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7820              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU2362
 7821              		.thumb
 7822              		.syntax unified
 7823              	.LBE493:
 7824              	.LBE492:
4928:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7825              		.loc 1 4928 4 is_stmt 1 discriminator 2 view .LVU2363
4928:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7826              		.loc 1 4928 6 is_stmt 0 discriminator 2 view .LVU2364
 7827 002a B9F1000F 		cmp	r9, #0
 7828 002e 02D0     		beq	.L707
4930:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7829              		.loc 1 4930 5 is_stmt 1 view .LVU2365
4930:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7830              		.loc 1 4930 42 is_stmt 0 view .LVU2366
 7831 0030 636D     		ldr	r3, [r4, #84]
4930:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 7832              		.loc 1 4930 35 view .LVU2367
 7833 0032 C9F80030 		str	r3, [r9]
 7834              	.L707:
4933:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7835              		.loc 1 4933 4 is_stmt 1 view .LVU2368
4933:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7836              		.loc 1 4933 26 is_stmt 0 view .LVU2369
 7837 0036 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
4934:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7838              		.loc 1 4934 25 view .LVU2370
 7839 003a 0222     		movs	r2, #2
4933:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 273


 7840              		.loc 1 4933 26 view .LVU2371
 7841 003c DBB2     		uxtb	r3, r3
 7842              	.LVL509:
4934:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7843              		.loc 1 4934 4 is_stmt 1 view .LVU2372
4934:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7844              		.loc 1 4934 25 is_stmt 0 view .LVU2373
 7845 003e 84F85820 		strb	r2, [r4, #88]
4936:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7846              		.loc 1 4936 4 is_stmt 1 view .LVU2374
 7847 0042 B8F1040F 		cmp	r8, #4
 7848 0046 56D8     		bhi	.L708
 7849 0048 DFE808F0 		tbb	[pc, r8]
 7850              	.L710:
 7851 004c 0F       		.byte	(.L714-.L710)/2
 7852 004d 0C       		.byte	(.L713-.L710)/2
 7853 004e 22       		.byte	(.L712-.L710)/2
 7854 004f 28       		.byte	(.L736-.L710)/2
 7855 0050 26       		.byte	(.L709-.L710)/2
 7856              	.LVL510:
 7857 0051 00       		.p2align 1
 7858              	.L737:
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7859              		.loc 1 4904 3 view .LVU2375
 7860              	.LBB494:
 7861              	.LBI494:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7862              		.loc 2 191 30 view .LVU2376
 7863              	.LBB495:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7864              		.loc 2 193 1 view .LVU2377
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7865              		.loc 2 195 2 view .LVU2378
 7866              		.syntax unified
 7867              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7868 0052 4FF05003 			mov r3, #80												
 7869 0056 83F31188 		msr basepri, r3											
 7870 005a BFF36F8F 		isb														
 7871 005e BFF34F8F 		dsb														
 7872              	
 7873              	@ 0 "" 2
 7874              	.LVL511:
 7875              		.thumb
 7876              		.syntax unified
 7877              	.L706:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7878              		.loc 2 195 2 is_stmt 0 view .LVU2379
 7879              	.LBE495:
 7880              	.LBE494:
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7881              		.loc 1 4904 3 is_stmt 1 discriminator 1 view .LVU2380
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7882              		.loc 1 4904 3 discriminator 1 view .LVU2381
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7883              		.loc 1 4904 3 discriminator 1 view .LVU2382
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7884              		.loc 1 4904 3 discriminator 1 view .LVU2383
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 274


4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7885              		.loc 1 4904 3 discriminator 1 view .LVU2384
4904:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7886              		.loc 1 4904 3 discriminator 1 view .LVU2385
 7887 0062 FEE7     		b	.L706
 7888              	.LVL512:
 7889              	.L713:
4939:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7890              		.loc 1 4939 6 view .LVU2386
4939:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7891              		.loc 1 4939 29 is_stmt 0 view .LVU2387
 7892 0064 626D     		ldr	r2, [r4, #84]
 7893 0066 1543     		orrs	r5, r5, r2
 7894              	.LVL513:
4939:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7895              		.loc 1 4939 29 view .LVU2388
 7896 0068 6565     		str	r5, [r4, #84]
4940:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7897              		.loc 1 4940 6 is_stmt 1 view .LVU2389
 7898              	.L714:
4975:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7899              		.loc 1 4975 31 view .LVU2390
4979:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7900              		.loc 1 4979 4 view .LVU2391
4979:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7901              		.loc 1 4979 6 is_stmt 0 view .LVU2392
 7902 006a 012B     		cmp	r3, #1
 7903 006c 05D0     		beq	.L717
 7904              	.LVL514:
 7905              	.L723:
4979:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 7906              		.loc 1 4979 6 view .LVU2393
 7907 006e 0120     		movs	r0, #1
 7908              	.L715:
 7909              	.LVL515:
5012:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 7910              		.loc 1 5012 30 is_stmt 1 view .LVU2394
5016:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7911              		.loc 1 5016 3 view .LVU2395
 7912              	.LBB496:
 7913              	.LBI496:
 227:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7914              		.loc 2 227 30 view .LVU2396
 7915              	.LBB497:
 7916              		.loc 2 229 2 view .LVU2397
 7917              		.syntax unified
 7918              	@ 229 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7919 0070 86F31188 			msr basepri, r6	
 7920              	@ 0 "" 2
 7921              	.LVL516:
 7922              		.loc 2 229 2 is_stmt 0 view .LVU2398
 7923              		.thumb
 7924              		.syntax unified
 7925              	.LBE497:
 7926              	.LBE496:
5018:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 7927              		.loc 1 5018 3 is_stmt 1 view .LVU2399
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 275


5019:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7928              		.loc 1 5019 2 is_stmt 0 view .LVU2400
 7929 0074 03B0     		add	sp, sp, #12
 7930              	.LCFI117:
 7931              		.cfi_remember_state
 7932              		.cfi_def_cfa_offset 28
 7933              		@ sp needed
 7934 0076 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7935              	.LVL517:
 7936              	.L717:
 7937              	.LCFI118:
 7938              		.cfi_restore_state
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7939              		.loc 1 4982 5 is_stmt 1 view .LVU2401
 7940 007a A36A     		ldr	r3, [r4, #40]
 7941              	.LVL518:
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7942              		.loc 1 4982 5 is_stmt 0 view .LVU2402
 7943 007c 83B1     		cbz	r3, .L718
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7944              		.loc 1 4982 5 is_stmt 1 view .LVU2403
 7945              	.LBB498:
 7946              	.LBI498:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 7947              		.loc 2 191 30 view .LVU2404
 7948              	.LBB499:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7949              		.loc 2 193 1 view .LVU2405
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7950              		.loc 2 195 2 view .LVU2406
 7951              		.syntax unified
 7952              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7953 007e 4FF05003 			mov r3, #80												
 7954 0082 83F31188 		msr basepri, r3											
 7955 0086 BFF36F8F 		isb														
 7956 008a BFF34F8F 		dsb														
 7957              	
 7958              	@ 0 "" 2
 7959              	.LVL519:
 7960              		.thumb
 7961              		.syntax unified
 7962              	.L719:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7963              		.loc 2 195 2 is_stmt 0 view .LVU2407
 7964              	.LBE499:
 7965              	.LBE498:
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7966              		.loc 1 4982 5 is_stmt 1 discriminator 3 view .LVU2408
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7967              		.loc 1 4982 5 discriminator 3 view .LVU2409
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7968              		.loc 1 4982 5 discriminator 3 view .LVU2410
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7969              		.loc 1 4982 5 discriminator 3 view .LVU2411
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7970              		.loc 1 4982 5 discriminator 3 view .LVU2412
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 276


 7971              		.loc 1 4982 5 discriminator 3 view .LVU2413
 7972 008e FEE7     		b	.L719
 7973              	.LVL520:
 7974              	.L712:
4943:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7975              		.loc 1 4943 6 view .LVU2414
4943:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7976              		.loc 1 4943 13 is_stmt 0 view .LVU2415
 7977 0090 626D     		ldr	r2, [r4, #84]
4943:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 7978              		.loc 1 4943 32 view .LVU2416
 7979 0092 0132     		adds	r2, r2, #1
 7980 0094 6265     		str	r2, [r4, #84]
4944:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7981              		.loc 1 4944 6 is_stmt 1 view .LVU2417
 7982 0096 E8E7     		b	.L714
 7983              	.L709:
4951:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 7984              		.loc 1 4951 6 view .LVU2418
4951:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 7985              		.loc 1 4951 8 is_stmt 0 view .LVU2419
 7986 0098 022B     		cmp	r3, #2
 7987 009a 2AD0     		beq	.L725
 7988              	.L736:
4953:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7989              		.loc 1 4953 7 is_stmt 1 view .LVU2420
4953:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 7990              		.loc 1 4953 30 is_stmt 0 view .LVU2421
 7991 009c 6565     		str	r5, [r4, #84]
 7992 009e E4E7     		b	.L714
 7993              	.LVL521:
 7994              	.L718:
4982:.//Libraries/FreeRTOS/Source/tasks.c **** 
 7995              		.loc 1 4982 82 is_stmt 1 discriminator 2 view .LVU2422
4984:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7996              		.loc 1 4984 5 discriminator 2 view .LVU2423
4984:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 7997              		.loc 1 4984 30 is_stmt 0 discriminator 2 view .LVU2424
 7998 00a0 1B4B     		ldr	r3, .L738
 7999 00a2 1B68     		ldr	r3, [r3]
4984:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8000              		.loc 1 4984 7 discriminator 2 view .LVU2425
 8001 00a4 FBB9     		cbnz	r3, .L720
4986:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8002              		.loc 1 4986 6 is_stmt 1 view .LVU2426
4986:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8003              		.loc 1 4986 15 is_stmt 0 view .LVU2427
 8004 00a6 211D     		adds	r1, r4, #4
 8005 00a8 0846     		mov	r0, r1
 8006 00aa 0191     		str	r1, [sp, #4]
 8007 00ac FFF7FEFF 		bl	uxListRemove
 8008              	.LVL522:
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8009              		.loc 1 4987 6 is_stmt 1 view .LVU2428
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8010              		.loc 1 4987 6 view .LVU2429
 8011 00b0 184B     		ldr	r3, .L738+4
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 277


 8012 00b2 E06A     		ldr	r0, [r4, #44]
 8013 00b4 1A68     		ldr	r2, [r3]
 8014 00b6 0199     		ldr	r1, [sp, #4]
 8015 00b8 9042     		cmp	r0, r2
 8016 00ba 00D9     		bls	.L721
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8017              		.loc 1 4987 6 discriminator 1 view .LVU2430
 8018 00bc 1860     		str	r0, [r3]
 8019              	.L721:
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8020              		.loc 1 4987 6 discriminator 3 view .LVU2431
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8021              		.loc 1 4987 6 discriminator 3 view .LVU2432
 8022 00be 00EB8000 		add	r0, r0, r0, lsl #2
 8023 00c2 154B     		ldr	r3, .L738+8
 8024 00c4 03EB8000 		add	r0, r3, r0, lsl #2
 8025 00c8 FFF7FEFF 		bl	vListInsertEnd
 8026              	.LVL523:
4987:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8027              		.loc 1 4987 36 discriminator 3 view .LVU2433
 8028              	.L722:
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8029              		.loc 1 4996 5 view .LVU2434
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8030              		.loc 1 4996 41 is_stmt 0 view .LVU2435
 8031 00cc 134B     		ldr	r3, .L738+12
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8032              		.loc 1 4996 7 view .LVU2436
 8033 00ce E26A     		ldr	r2, [r4, #44]
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8034              		.loc 1 4996 41 view .LVU2437
 8035 00d0 1B68     		ldr	r3, [r3]
4996:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8036              		.loc 1 4996 7 view .LVU2438
 8037 00d2 DB6A     		ldr	r3, [r3, #44]
 8038 00d4 9A42     		cmp	r2, r3
 8039 00d6 CAD9     		bls	.L723
5000:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 8040              		.loc 1 5000 6 is_stmt 1 view .LVU2439
5000:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 8041              		.loc 1 5000 8 is_stmt 0 view .LVU2440
 8042 00d8 0FB1     		cbz	r7, .L724
5002:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 8043              		.loc 1 5002 7 is_stmt 1 view .LVU2441
5002:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 8044              		.loc 1 5002 34 is_stmt 0 view .LVU2442
 8045 00da 0123     		movs	r3, #1
 8046 00dc 3B60     		str	r3, [r7]
 8047              	.L724:
5008:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8048              		.loc 1 5008 6 is_stmt 1 view .LVU2443
5008:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8049              		.loc 1 5008 20 is_stmt 0 view .LVU2444
 8050 00de 104B     		ldr	r3, .L738+16
 8051 00e0 0120     		movs	r0, #1
 8052 00e2 1860     		str	r0, [r3]
 8053 00e4 C4E7     		b	.L715
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 278


 8054              	.L720:
4993:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8055              		.loc 1 4993 6 is_stmt 1 view .LVU2445
 8056 00e6 04F11801 		add	r1, r4, #24
 8057 00ea 0E48     		ldr	r0, .L738+20
 8058 00ec FFF7FEFF 		bl	vListInsertEnd
 8059              	.LVL524:
 8060 00f0 ECE7     		b	.L722
 8061              	.LVL525:
 8062              	.L725:
4958:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 8063              		.loc 1 4958 15 is_stmt 0 view .LVU2446
 8064 00f2 0020     		movs	r0, #0
 8065 00f4 BCE7     		b	.L715
 8066              	.L708:
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8067              		.loc 1 4971 6 is_stmt 1 view .LVU2447
 8068 00f6 626D     		ldr	r2, [r4, #84]
 8069 00f8 0132     		adds	r2, r2, #1
 8070 00fa B6D0     		beq	.L714
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8071              		.loc 1 4971 6 view .LVU2448
 8072              	.LBB500:
 8073              	.LBI500:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 8074              		.loc 2 191 30 view .LVU2449
 8075              	.LBB501:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8076              		.loc 2 193 1 view .LVU2450
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8077              		.loc 2 195 2 view .LVU2451
 8078              		.syntax unified
 8079              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8080 00fc 4FF05003 			mov r3, #80												
 8081 0100 83F31188 		msr basepri, r3											
 8082 0104 BFF36F8F 		isb														
 8083 0108 BFF34F8F 		dsb														
 8084              	
 8085              	@ 0 "" 2
 8086              	.LVL526:
 8087              		.thumb
 8088              		.syntax unified
 8089              	.L716:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8090              		.loc 2 195 2 is_stmt 0 view .LVU2452
 8091              	.LBE501:
 8092              	.LBE500:
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8093              		.loc 1 4971 6 is_stmt 1 discriminator 2 view .LVU2453
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8094              		.loc 1 4971 6 discriminator 2 view .LVU2454
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8095              		.loc 1 4971 6 discriminator 2 view .LVU2455
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8096              		.loc 1 4971 6 discriminator 2 view .LVU2456
4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8097              		.loc 1 4971 6 discriminator 2 view .LVU2457
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 279


4971:.//Libraries/FreeRTOS/Source/tasks.c **** 					break;
 8098              		.loc 1 4971 6 discriminator 2 view .LVU2458
 8099 010c FEE7     		b	.L716
 8100              	.L739:
 8101 010e 00BF     		.align	2
 8102              	.L738:
 8103 0110 00000000 		.word	.LANCHOR18
 8104 0114 00000000 		.word	.LANCHOR12
 8105 0118 00000000 		.word	.LANCHOR2
 8106 011c 00000000 		.word	.LANCHOR1
 8107 0120 00000000 		.word	.LANCHOR17
 8108 0124 00000000 		.word	.LANCHOR5
 8109              		.cfi_endproc
 8110              	.LFE61:
 8112              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 8113              		.align	1
 8114              		.p2align 2,,3
 8115              		.global	vTaskNotifyGiveFromISR
 8116              		.syntax unified
 8117              		.thumb
 8118              		.thumb_func
 8119              		.fpu fpv5-d16
 8121              	vTaskNotifyGiveFromISR:
 8122              	.LVL527:
 8123              	.LFB62:
5027:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 8124              		.loc 1 5027 2 view -0
 8125              		.cfi_startproc
 8126              		@ args = 0, pretend = 0, frame = 8
 8127              		@ frame_needed = 0, uses_anonymous_args = 0
5028:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 8128              		.loc 1 5028 2 view .LVU2460
5029:.//Libraries/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 8129              		.loc 1 5029 2 view .LVU2461
5030:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8130              		.loc 1 5030 2 view .LVU2462
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8131              		.loc 1 5032 3 view .LVU2463
 8132 0000 F0B1     		cbz	r0, .L757
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8133              		.loc 1 5032 32 discriminator 2 view .LVU2464
5050:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8134              		.loc 1 5050 3 discriminator 2 view .LVU2465
5027:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 8135              		.loc 1 5027 2 is_stmt 0 discriminator 2 view .LVU2466
 8136 0002 70B5     		push	{r4, r5, r6, lr}
 8137              	.LCFI119:
 8138              		.cfi_def_cfa_offset 16
 8139              		.cfi_offset 4, -16
 8140              		.cfi_offset 5, -12
 8141              		.cfi_offset 6, -8
 8142              		.cfi_offset 14, -4
 8143 0004 82B0     		sub	sp, sp, #8
 8144              	.LCFI120:
 8145              		.cfi_def_cfa_offset 24
 8146 0006 0446     		mov	r4, r0
 8147 0008 0D46     		mov	r5, r1
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 280


5050:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8148              		.loc 1 5050 3 discriminator 2 view .LVU2467
 8149 000a FFF7FEFF 		bl	vPortValidateInterruptPriority
 8150              	.LVL528:
5052:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8151              		.loc 1 5052 3 is_stmt 1 discriminator 2 view .LVU2468
5054:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 8152              		.loc 1 5054 3 discriminator 2 view .LVU2469
 8153              	.LBB502:
 8154              	.LBI502:
 207:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 8155              		.loc 2 207 34 discriminator 2 view .LVU2470
 8156              	.LBB503:
 209:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8157              		.loc 2 209 1 discriminator 2 view .LVU2471
 211:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8158              		.loc 2 211 2 discriminator 2 view .LVU2472
 8159              		.syntax unified
 8160              	@ 211 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8161 000e EFF31186 			mrs r6, basepri											
 8162 0012 4FF05003 		mov r3, #80												
 8163 0016 83F31188 		msr basepri, r3											
 8164 001a BFF36F8F 		isb														
 8165 001e BFF34F8F 		dsb														
 8166              	
 8167              	@ 0 "" 2
 8168              	.LVL529:
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8169              		.loc 2 223 2 discriminator 2 view .LVU2473
 223:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8170              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU2474
 8171              		.thumb
 8172              		.syntax unified
 8173              	.LBE503:
 8174              	.LBE502:
5056:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8175              		.loc 1 5056 4 is_stmt 1 discriminator 2 view .LVU2475
5057:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8176              		.loc 1 5057 25 is_stmt 0 discriminator 2 view .LVU2476
 8177 0022 0223     		movs	r3, #2
5056:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8178              		.loc 1 5056 26 discriminator 2 view .LVU2477
 8179 0024 94F85820 		ldrb	r2, [r4, #88]	@ zero_extendqisi2
 8180              	.LVL530:
5057:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8181              		.loc 1 5057 4 is_stmt 1 discriminator 2 view .LVU2478
5057:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8182              		.loc 1 5057 25 is_stmt 0 discriminator 2 view .LVU2479
 8183 0028 84F85830 		strb	r3, [r4, #88]
5061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8184              		.loc 1 5061 4 is_stmt 1 discriminator 2 view .LVU2480
5067:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8185              		.loc 1 5067 6 is_stmt 0 discriminator 2 view .LVU2481
 8186 002c 012A     		cmp	r2, #1
5061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8187              		.loc 1 5061 11 discriminator 2 view .LVU2482
 8188 002e 636D     		ldr	r3, [r4, #84]
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 281


5061:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8189              		.loc 1 5061 30 discriminator 2 view .LVU2483
 8190 0030 03F10103 		add	r3, r3, #1
 8191 0034 6365     		str	r3, [r4, #84]
5063:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8192              		.loc 1 5063 36 is_stmt 1 discriminator 2 view .LVU2484
5067:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8193              		.loc 1 5067 4 discriminator 2 view .LVU2485
5067:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8194              		.loc 1 5067 6 is_stmt 0 discriminator 2 view .LVU2486
 8195 0036 0CD0     		beq	.L758
 8196              	.LVL531:
 8197              	.L744:
5100:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8198              		.loc 1 5100 30 is_stmt 1 view .LVU2487
5104:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 8199              		.loc 1 5104 3 view .LVU2488
 8200              	.LBB504:
 8201              	.LBI504:
 227:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 8202              		.loc 2 227 30 view .LVU2489
 8203              	.LBB505:
 8204              		.loc 2 229 2 view .LVU2490
 8205              		.syntax unified
 8206              	@ 229 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8207 0038 86F31188 			msr basepri, r6	
 8208              	@ 0 "" 2
 8209              	.LVL532:
 8210              		.loc 2 229 2 is_stmt 0 view .LVU2491
 8211              		.thumb
 8212              		.syntax unified
 8213              	.LBE505:
 8214              	.LBE504:
5105:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8215              		.loc 1 5105 2 view .LVU2492
 8216 003c 02B0     		add	sp, sp, #8
 8217              	.LCFI121:
 8218              		.cfi_def_cfa_offset 16
 8219              		@ sp needed
 8220 003e 70BD     		pop	{r4, r5, r6, pc}
 8221              	.LVL533:
 8222              	.L757:
 8223              	.LCFI122:
 8224              		.cfi_def_cfa_offset 0
 8225              		.cfi_restore 4
 8226              		.cfi_restore 5
 8227              		.cfi_restore 6
 8228              		.cfi_restore 14
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8229              		.loc 1 5032 3 is_stmt 1 view .LVU2493
 8230              	.LBB506:
 8231              	.LBI506:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 8232              		.loc 2 191 30 view .LVU2494
 8233              	.LBB507:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8234              		.loc 2 193 1 view .LVU2495
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 282


 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8235              		.loc 2 195 2 view .LVU2496
 8236              		.syntax unified
 8237              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8238 0040 4FF05003 			mov r3, #80												
 8239 0044 83F31188 		msr basepri, r3											
 8240 0048 BFF36F8F 		isb														
 8241 004c BFF34F8F 		dsb														
 8242              	
 8243              	@ 0 "" 2
 8244              	.LVL534:
 8245              		.thumb
 8246              		.syntax unified
 8247              	.L742:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8248              		.loc 2 195 2 is_stmt 0 view .LVU2497
 8249              	.LBE507:
 8250              	.LBE506:
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8251              		.loc 1 5032 3 is_stmt 1 discriminator 1 view .LVU2498
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8252              		.loc 1 5032 3 discriminator 1 view .LVU2499
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8253              		.loc 1 5032 3 discriminator 1 view .LVU2500
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8254              		.loc 1 5032 3 discriminator 1 view .LVU2501
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8255              		.loc 1 5032 3 discriminator 1 view .LVU2502
5032:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8256              		.loc 1 5032 3 discriminator 1 view .LVU2503
 8257 0050 FEE7     		b	.L742
 8258              	.LVL535:
 8259              	.L758:
 8260              	.LCFI123:
 8261              		.cfi_def_cfa_offset 24
 8262              		.cfi_offset 4, -16
 8263              		.cfi_offset 5, -12
 8264              		.cfi_offset 6, -8
 8265              		.cfi_offset 14, -4
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8266              		.loc 1 5070 5 view .LVU2504
 8267 0052 A36A     		ldr	r3, [r4, #40]
 8268 0054 43B1     		cbz	r3, .L745
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8269              		.loc 1 5070 5 view .LVU2505
 8270              	.LBB508:
 8271              	.LBI508:
 191:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 8272              		.loc 2 191 30 view .LVU2506
 8273              	.LBB509:
 193:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8274              		.loc 2 193 1 view .LVU2507
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8275              		.loc 2 195 2 view .LVU2508
 8276              		.syntax unified
 8277              	@ 195 ".//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8278 0056 4FF05003 			mov r3, #80												
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 283


 8279 005a 83F31188 		msr basepri, r3											
 8280 005e BFF36F8F 		isb														
 8281 0062 BFF34F8F 		dsb														
 8282              	
 8283              	@ 0 "" 2
 8284              	.LVL536:
 8285              		.thumb
 8286              		.syntax unified
 8287              	.L746:
 195:.//Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8288              		.loc 2 195 2 is_stmt 0 view .LVU2509
 8289              	.LBE509:
 8290              	.LBE508:
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8291              		.loc 1 5070 5 is_stmt 1 discriminator 2 view .LVU2510
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8292              		.loc 1 5070 5 discriminator 2 view .LVU2511
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8293              		.loc 1 5070 5 discriminator 2 view .LVU2512
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8294              		.loc 1 5070 5 discriminator 2 view .LVU2513
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8295              		.loc 1 5070 5 discriminator 2 view .LVU2514
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8296              		.loc 1 5070 5 discriminator 2 view .LVU2515
 8297 0066 FEE7     		b	.L746
 8298              	.L745:
5070:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8299              		.loc 1 5070 82 discriminator 2 view .LVU2516
5072:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8300              		.loc 1 5072 5 discriminator 2 view .LVU2517
5072:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8301              		.loc 1 5072 30 is_stmt 0 discriminator 2 view .LVU2518
 8302 0068 144B     		ldr	r3, .L759
 8303 006a 1B68     		ldr	r3, [r3]
5072:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8304              		.loc 1 5072 7 discriminator 2 view .LVU2519
 8305 006c FBB9     		cbnz	r3, .L747
5074:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8306              		.loc 1 5074 6 is_stmt 1 view .LVU2520
5074:.//Libraries/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8307              		.loc 1 5074 15 is_stmt 0 view .LVU2521
 8308 006e 211D     		adds	r1, r4, #4
 8309 0070 0846     		mov	r0, r1
 8310 0072 0191     		str	r1, [sp, #4]
 8311 0074 FFF7FEFF 		bl	uxListRemove
 8312              	.LVL537:
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8313              		.loc 1 5075 6 is_stmt 1 view .LVU2522
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8314              		.loc 1 5075 6 view .LVU2523
 8315 0078 114B     		ldr	r3, .L759+4
 8316 007a E06A     		ldr	r0, [r4, #44]
 8317 007c 1A68     		ldr	r2, [r3]
 8318 007e 0199     		ldr	r1, [sp, #4]
 8319 0080 9042     		cmp	r0, r2
 8320 0082 00D9     		bls	.L748
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 284


5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8321              		.loc 1 5075 6 discriminator 1 view .LVU2524
 8322 0084 1860     		str	r0, [r3]
 8323              	.L748:
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8324              		.loc 1 5075 6 discriminator 3 view .LVU2525
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8325              		.loc 1 5075 6 discriminator 3 view .LVU2526
 8326 0086 00EB8000 		add	r0, r0, r0, lsl #2
 8327 008a 0E4B     		ldr	r3, .L759+8
 8328 008c 03EB8000 		add	r0, r3, r0, lsl #2
 8329 0090 FFF7FEFF 		bl	vListInsertEnd
 8330              	.LVL538:
5075:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8331              		.loc 1 5075 36 discriminator 3 view .LVU2527
 8332              	.L749:
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8333              		.loc 1 5084 5 view .LVU2528
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8334              		.loc 1 5084 41 is_stmt 0 view .LVU2529
 8335 0094 0C4B     		ldr	r3, .L759+12
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8336              		.loc 1 5084 7 view .LVU2530
 8337 0096 E26A     		ldr	r2, [r4, #44]
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8338              		.loc 1 5084 41 view .LVU2531
 8339 0098 1B68     		ldr	r3, [r3]
5084:.//Libraries/FreeRTOS/Source/tasks.c **** 				{
 8340              		.loc 1 5084 7 view .LVU2532
 8341 009a DB6A     		ldr	r3, [r3, #44]
 8342 009c 9A42     		cmp	r2, r3
 8343 009e CBD9     		bls	.L744
5088:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 8344              		.loc 1 5088 6 is_stmt 1 view .LVU2533
5088:.//Libraries/FreeRTOS/Source/tasks.c **** 					{
 8345              		.loc 1 5088 8 is_stmt 0 view .LVU2534
 8346 00a0 0DB1     		cbz	r5, .L751
5090:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 8347              		.loc 1 5090 7 is_stmt 1 view .LVU2535
5090:.//Libraries/FreeRTOS/Source/tasks.c **** 					}
 8348              		.loc 1 5090 34 is_stmt 0 view .LVU2536
 8349 00a2 0123     		movs	r3, #1
 8350 00a4 2B60     		str	r3, [r5]
 8351              	.L751:
5096:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8352              		.loc 1 5096 6 is_stmt 1 view .LVU2537
5096:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8353              		.loc 1 5096 20 is_stmt 0 view .LVU2538
 8354 00a6 094B     		ldr	r3, .L759+16
 8355 00a8 0122     		movs	r2, #1
 8356 00aa 1A60     		str	r2, [r3]
 8357 00ac C4E7     		b	.L744
 8358              	.LVL539:
 8359              	.L747:
5081:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8360              		.loc 1 5081 6 is_stmt 1 view .LVU2539
 8361 00ae 04F11801 		add	r1, r4, #24
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 285


 8362 00b2 0748     		ldr	r0, .L759+20
 8363 00b4 FFF7FEFF 		bl	vListInsertEnd
 8364              	.LVL540:
5081:.//Libraries/FreeRTOS/Source/tasks.c **** 				}
 8365              		.loc 1 5081 6 is_stmt 0 view .LVU2540
 8366 00b8 ECE7     		b	.L749
 8367              	.L760:
 8368 00ba 00BF     		.align	2
 8369              	.L759:
 8370 00bc 00000000 		.word	.LANCHOR18
 8371 00c0 00000000 		.word	.LANCHOR12
 8372 00c4 00000000 		.word	.LANCHOR2
 8373 00c8 00000000 		.word	.LANCHOR1
 8374 00cc 00000000 		.word	.LANCHOR17
 8375 00d0 00000000 		.word	.LANCHOR5
 8376              		.cfi_endproc
 8377              	.LFE62:
 8379              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8380              		.align	1
 8381              		.p2align 2,,3
 8382              		.global	xTaskNotifyStateClear
 8383              		.syntax unified
 8384              		.thumb
 8385              		.thumb_func
 8386              		.fpu fpv5-d16
 8388              	xTaskNotifyStateClear:
 8389              	.LVL541:
 8390              	.LFB63:
5113:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 8391              		.loc 1 5113 2 is_stmt 1 view -0
 8392              		.cfi_startproc
 8393              		@ args = 0, pretend = 0, frame = 8
 8394              		@ frame_needed = 0, uses_anonymous_args = 0
5114:.//Libraries/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 8395              		.loc 1 5114 2 view .LVU2542
5115:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8396              		.loc 1 5115 2 view .LVU2543
5119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8397              		.loc 1 5119 3 view .LVU2544
5113:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 8398              		.loc 1 5113 2 is_stmt 0 view .LVU2545
 8399 0000 10B5     		push	{r4, lr}
 8400              	.LCFI124:
 8401              		.cfi_def_cfa_offset 8
 8402              		.cfi_offset 4, -8
 8403              		.cfi_offset 14, -4
 8404 0002 82B0     		sub	sp, sp, #8
 8405              	.LCFI125:
 8406              		.cfi_def_cfa_offset 16
5119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8407              		.loc 1 5119 11 view .LVU2546
 8408 0004 90B1     		cbz	r0, .L767
 8409 0006 0446     		mov	r4, r0
 8410              	.LVL542:
 8411              	.L762:
5121:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 8412              		.loc 1 5121 3 is_stmt 1 discriminator 4 view .LVU2547
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 286


 8413 0008 FFF7FEFF 		bl	vPortEnterCritical
 8414              	.LVL543:
5123:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8415              		.loc 1 5123 4 discriminator 4 view .LVU2548
5123:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8416              		.loc 1 5123 13 is_stmt 0 discriminator 4 view .LVU2549
 8417 000c 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
5123:.//Libraries/FreeRTOS/Source/tasks.c **** 			{
 8418              		.loc 1 5123 6 discriminator 4 view .LVU2550
 8419 0010 022B     		cmp	r3, #2
 8420 0012 06D0     		beq	.L768
5130:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 8421              		.loc 1 5130 13 view .LVU2551
 8422 0014 0020     		movs	r0, #0
 8423              	.L763:
 8424 0016 0190     		str	r0, [sp, #4]
 8425              	.LVL544:
5133:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8426              		.loc 1 5133 3 is_stmt 1 view .LVU2552
 8427 0018 FFF7FEFF 		bl	vPortExitCritical
 8428              	.LVL545:
5135:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 8429              		.loc 1 5135 3 view .LVU2553
5136:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8430              		.loc 1 5136 2 is_stmt 0 view .LVU2554
 8431 001c 0198     		ldr	r0, [sp, #4]
 8432 001e 02B0     		add	sp, sp, #8
 8433              	.LCFI126:
 8434              		.cfi_remember_state
 8435              		.cfi_def_cfa_offset 8
 8436              		@ sp needed
 8437 0020 10BD     		pop	{r4, pc}
 8438              	.LVL546:
 8439              	.L768:
 8440              	.LCFI127:
 8441              		.cfi_restore_state
5125:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8442              		.loc 1 5125 5 is_stmt 1 view .LVU2555
5125:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8443              		.loc 1 5125 26 is_stmt 0 view .LVU2556
 8444 0022 0023     		movs	r3, #0
5126:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 8445              		.loc 1 5126 13 view .LVU2557
 8446 0024 0120     		movs	r0, #1
5125:.//Libraries/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8447              		.loc 1 5125 26 view .LVU2558
 8448 0026 84F85830 		strb	r3, [r4, #88]
5126:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 8449              		.loc 1 5126 5 is_stmt 1 view .LVU2559
 8450              	.LVL547:
5126:.//Libraries/FreeRTOS/Source/tasks.c **** 			}
 8451              		.loc 1 5126 5 is_stmt 0 view .LVU2560
 8452 002a F4E7     		b	.L763
 8453              	.LVL548:
 8454              	.L767:
5119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8455              		.loc 1 5119 11 discriminator 1 view .LVU2561
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 287


 8456 002c 014B     		ldr	r3, .L769
 8457 002e 1C68     		ldr	r4, [r3]
 8458              	.LVL549:
5119:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8459              		.loc 1 5119 11 discriminator 1 view .LVU2562
 8460 0030 EAE7     		b	.L762
 8461              	.L770:
 8462 0032 00BF     		.align	2
 8463              	.L769:
 8464 0034 00000000 		.word	.LANCHOR1
 8465              		.cfi_endproc
 8466              	.LFE63:
 8468              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 8469              		.align	1
 8470              		.p2align 2,,3
 8471              		.global	ulTaskNotifyValueClear
 8472              		.syntax unified
 8473              		.thumb
 8474              		.thumb_func
 8475              		.fpu fpv5-d16
 8477              	ulTaskNotifyValueClear:
 8478              	.LVL550:
 8479              	.LFB64:
5144:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 8480              		.loc 1 5144 2 is_stmt 1 view -0
 8481              		.cfi_startproc
 8482              		@ args = 0, pretend = 0, frame = 8
 8483              		@ frame_needed = 0, uses_anonymous_args = 0
5145:.//Libraries/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 8484              		.loc 1 5145 2 view .LVU2564
5146:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8485              		.loc 1 5146 2 view .LVU2565
5150:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8486              		.loc 1 5150 3 view .LVU2566
5144:.//Libraries/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 8487              		.loc 1 5144 2 is_stmt 0 view .LVU2567
 8488 0000 70B5     		push	{r4, r5, r6, lr}
 8489              	.LCFI128:
 8490              		.cfi_def_cfa_offset 16
 8491              		.cfi_offset 4, -16
 8492              		.cfi_offset 5, -12
 8493              		.cfi_offset 6, -8
 8494              		.cfi_offset 14, -4
 8495 0002 0D46     		mov	r5, r1
 8496 0004 82B0     		sub	sp, sp, #8
 8497              	.LCFI129:
 8498              		.cfi_def_cfa_offset 24
5150:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8499              		.loc 1 5150 11 view .LVU2568
 8500 0006 78B1     		cbz	r0, .L774
 8501 0008 0446     		mov	r4, r0
 8502 000a 094E     		ldr	r6, .L776
 8503              	.LVL551:
 8504              	.L772:
5152:.//Libraries/FreeRTOS/Source/tasks.c **** 		{
 8505              		.loc 1 5152 3 is_stmt 1 discriminator 4 view .LVU2569
 8506 000c FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 288


 8507              	.LVL552:
5156:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8508              		.loc 1 5156 4 discriminator 4 view .LVU2570
5156:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8509              		.loc 1 5156 27 is_stmt 0 discriminator 4 view .LVU2571
 8510 0010 3368     		ldr	r3, [r6]
5156:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8511              		.loc 1 5156 13 discriminator 4 view .LVU2572
 8512 0012 586D     		ldr	r0, [r3, #84]
5157:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 8513              		.loc 1 5157 27 discriminator 4 view .LVU2573
 8514 0014 636D     		ldr	r3, [r4, #84]
5156:.//Libraries/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8515              		.loc 1 5156 13 discriminator 4 view .LVU2574
 8516 0016 0190     		str	r0, [sp, #4]
 8517              	.LVL553:
5157:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 8518              		.loc 1 5157 4 is_stmt 1 discriminator 4 view .LVU2575
5157:.//Libraries/FreeRTOS/Source/tasks.c **** 		}
 8519              		.loc 1 5157 27 is_stmt 0 discriminator 4 view .LVU2576
 8520 0018 23EA0503 		bic	r3, r3, r5
 8521 001c 6365     		str	r3, [r4, #84]
5159:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8522              		.loc 1 5159 3 is_stmt 1 discriminator 4 view .LVU2577
 8523 001e FFF7FEFF 		bl	vPortExitCritical
 8524              	.LVL554:
5161:.//Libraries/FreeRTOS/Source/tasks.c **** 	}
 8525              		.loc 1 5161 3 discriminator 4 view .LVU2578
5162:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8526              		.loc 1 5162 2 is_stmt 0 discriminator 4 view .LVU2579
 8527 0022 0198     		ldr	r0, [sp, #4]
 8528 0024 02B0     		add	sp, sp, #8
 8529              	.LCFI130:
 8530              		.cfi_remember_state
 8531              		.cfi_def_cfa_offset 16
 8532              		@ sp needed
 8533 0026 70BD     		pop	{r4, r5, r6, pc}
 8534              	.LVL555:
 8535              	.L774:
 8536              	.LCFI131:
 8537              		.cfi_restore_state
5150:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8538              		.loc 1 5150 11 discriminator 1 view .LVU2580
 8539 0028 014E     		ldr	r6, .L776
 8540 002a 3468     		ldr	r4, [r6]
 8541              	.LVL556:
5150:.//Libraries/FreeRTOS/Source/tasks.c **** 
 8542              		.loc 1 5150 11 discriminator 1 view .LVU2581
 8543 002c EEE7     		b	.L772
 8544              	.L777:
 8545 002e 00BF     		.align	2
 8546              	.L776:
 8547 0030 00000000 		.word	.LANCHOR1
 8548              		.cfi_endproc
 8549              	.LFE64:
 8551              		.global	pxCurrentTCB
 8552              		.section	.bss.pxCurrentTCB,"aw",%nobits
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 289


 8553              		.align	2
 8554              		.set	.LANCHOR1,. + 0
 8557              	pxCurrentTCB:
 8558 0000 00000000 		.space	4
 8559              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 8560              		.align	2
 8561              		.set	.LANCHOR8,. + 0
 8564              	pxDelayedTaskList:
 8565 0000 00000000 		.space	4
 8566              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 8567              		.align	2
 8568              		.set	.LANCHOR9,. + 0
 8571              	pxOverflowDelayedTaskList:
 8572 0000 00000000 		.space	4
 8573              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 8574              		.align	2
 8575              		.set	.LANCHOR2,. + 0
 8578              	pxReadyTasksLists:
 8579 0000 00000000 		.space	1120
 8579      00000000 
 8579      00000000 
 8579      00000000 
 8579      00000000 
 8580              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 8581              		.align	2
 8582              		.set	.LANCHOR0,. + 0
 8585              	uxCurrentNumberOfTasks:
 8586 0000 00000000 		.space	4
 8587              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 8588              		.align	2
 8589              		.set	.LANCHOR14,. + 0
 8592              	uxDeletedTasksWaitingCleanUp:
 8593 0000 00000000 		.space	4
 8594              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 8595              		.align	2
 8596              		.set	.LANCHOR18,. + 0
 8599              	uxSchedulerSuspended:
 8600 0000 00000000 		.space	4
 8601              		.section	.bss.uxTaskNumber,"aw",%nobits
 8602              		.align	2
 8603              		.set	.LANCHOR11,. + 0
 8606              	uxTaskNumber:
 8607 0000 00000000 		.space	4
 8608              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 8609              		.align	2
 8610              		.set	.LANCHOR12,. + 0
 8613              	uxTopReadyPriority:
 8614 0000 00000000 		.space	4
 8615              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 8616              		.align	2
 8617              		.set	.LANCHOR3,. + 0
 8620              	xDelayedTaskList1:
 8621 0000 00000000 		.space	20
 8621      00000000 
 8621      00000000 
 8621      00000000 
 8621      00000000 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 290


 8622              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 8623              		.align	2
 8624              		.set	.LANCHOR4,. + 0
 8627              	xDelayedTaskList2:
 8628 0000 00000000 		.space	20
 8628      00000000 
 8628      00000000 
 8628      00000000 
 8628      00000000 
 8629              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 8630              		.align	2
 8631              		.set	.LANCHOR13,. + 0
 8634              	xNextTaskUnblockTime:
 8635 0000 00000000 		.space	4
 8636              		.section	.bss.xNumOfOverflows,"aw",%nobits
 8637              		.align	2
 8638              		.set	.LANCHOR16,. + 0
 8641              	xNumOfOverflows:
 8642 0000 00000000 		.space	4
 8643              		.section	.bss.xPendedTicks,"aw",%nobits
 8644              		.align	2
 8645              		.set	.LANCHOR19,. + 0
 8648              	xPendedTicks:
 8649 0000 00000000 		.space	4
 8650              		.section	.bss.xPendingReadyList,"aw",%nobits
 8651              		.align	2
 8652              		.set	.LANCHOR5,. + 0
 8655              	xPendingReadyList:
 8656 0000 00000000 		.space	20
 8656      00000000 
 8656      00000000 
 8656      00000000 
 8656      00000000 
 8657              		.section	.bss.xSchedulerRunning,"aw",%nobits
 8658              		.align	2
 8659              		.set	.LANCHOR10,. + 0
 8662              	xSchedulerRunning:
 8663 0000 00000000 		.space	4
 8664              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 8665              		.align	2
 8666              		.set	.LANCHOR7,. + 0
 8669              	xSuspendedTaskList:
 8670 0000 00000000 		.space	20
 8670      00000000 
 8670      00000000 
 8670      00000000 
 8670      00000000 
 8671              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 8672              		.align	2
 8673              		.set	.LANCHOR6,. + 0
 8676              	xTasksWaitingTermination:
 8677 0000 00000000 		.space	20
 8677      00000000 
 8677      00000000 
 8677      00000000 
 8677      00000000 
 8678              		.section	.bss.xTickCount,"aw",%nobits
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 291


 8679              		.align	2
 8680              		.set	.LANCHOR15,. + 0
 8683              	xTickCount:
 8684 0000 00000000 		.space	4
 8685              		.section	.bss.xYieldPending,"aw",%nobits
 8686              		.align	2
 8687              		.set	.LANCHOR17,. + 0
 8690              	xYieldPending:
 8691 0000 00000000 		.space	4
 8692              		.text
 8693              	.Letext0:
 8694              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/in
 8695              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/machine/
 8696              		.file 5 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/lock
 8697              		.file 6 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_typ
 8698              		.file 7 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/reen
 8699              		.file 8 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/stdlib.h
 8700              		.file 9 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_std
 8701              		.file 10 ".//User/code/Inc/FreeRTOSConfig.h"
 8702              		.file 11 ".//Libraries/FreeRTOS/Source/include/projdefs.h"
 8703              		.file 12 ".//Libraries/FreeRTOS/Source/include/FreeRTOS.h"
 8704              		.file 13 ".//Libraries/FreeRTOS/Source/include/list.h"
 8705              		.file 14 ".//Libraries/FreeRTOS/Source/include/task.h"
 8706              		.file 15 ".//Libraries/FreeRTOS/Source/include/portable.h"
 8707              		.file 16 ".//Libraries/FreeRTOS/Source/include/timers.h"
 8708              		.file 17 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/string.
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 292


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:17     .text.prvAddNewTaskToReadyList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:25     .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:235    .text.prvAddNewTaskToReadyList:00000000000000dc $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:255    .text.prvTaskIsTaskSuspended:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:262    .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:345    .text.prvTaskIsTaskSuspended:000000000000002c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:350    .text.prvResetNextTaskUnblockTime.part.0:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:357    .text.prvResetNextTaskUnblockTime.part.0:0000000000000000 prvResetNextTaskUnblockTime.part.0
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:389    .text.prvResetNextTaskUnblockTime.part.0:0000000000000010 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:395    .text.prvInitialiseNewTask.isra.0:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:402    .text.prvInitialiseNewTask.isra.0:0000000000000000 prvInitialiseNewTask.isra.0
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:562    .text.prvDeleteTCB:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:569    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:672    .text.prvIdleTask:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:679    .text.prvIdleTask:0000000000000000 prvIdleTask
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:766    .text.prvIdleTask:0000000000000058 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:775    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:782    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:918    .text.prvAddCurrentTaskToDelayedList:0000000000000058 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:930    .text.xTaskIncrementTick.part.0:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:937    .text.xTaskIncrementTick.part.0:0000000000000000 xTaskIncrementTick.part.0
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1245   .text.xTaskIncrementTick.part.0:000000000000011c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1259   .text.xTaskCreateStatic:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1267   .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1455   .text.xTaskCreate:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1463   .text.xTaskCreate:0000000000000000 xTaskCreate
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1602   .text.vTaskDelete:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1610   .text.vTaskDelete:0000000000000000 vTaskDelete
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1815   .text.vTaskDelete:00000000000000a8 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1829   .text.eTaskGetState:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:1837   .text.eTaskGetState:0000000000000000 eTaskGetState
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2007   .text.eTaskGetState:000000000000006c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2016   .text.uxTaskPriorityGet:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2024   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2082   .text.uxTaskPriorityGet:0000000000000020 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2087   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2095   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2199   .text.uxTaskPriorityGetFromISR:0000000000000034 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2204   .text.vTaskPrioritySet:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2212   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2454   .text.vTaskPrioritySet:00000000000000c0 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2462   .text.vTaskResume:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2470   .text.vTaskResume:0000000000000000 vTaskResume
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2636   .text.vTaskResume:0000000000000080 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2644   .text.xTaskResumeFromISR:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2652   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2846   .text.xTaskResumeFromISR:0000000000000094 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2855   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2859   .text.vTaskStartScheduler:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:2867   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3018   .text.vTaskStartScheduler:0000000000000074 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3027   .text.vTaskEndScheduler:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3035   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3072   .text.vTaskEndScheduler:000000000000001c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3077   .text.vTaskSuspendAll:0000000000000000 $t
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 293


/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3085   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3104   .text.vTaskSuspendAll:000000000000000c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3109   .text.xTaskResumeAll:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3117   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3457   .text.xTaskResumeAll:0000000000000108 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3474   .text.vTaskDelayUntil:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3482   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3706   .text.vTaskDelayUntil:0000000000000088 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3714   .text.vTaskDelay:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3722   .text.vTaskDelay:0000000000000000 vTaskDelay
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3823   .text.vTaskDelay:0000000000000040 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3829   .text.xTaskGetTickCount:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3837   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3858   .text.xTaskGetTickCount:0000000000000008 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3863   .text.xTaskGetTickCountFromISR:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3871   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3902   .text.xTaskGetTickCountFromISR:000000000000000c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3907   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3915   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3931   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3936   .text.pcTaskGetName:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:3944   .text.pcTaskGetName:0000000000000000 pcTaskGetName
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4006   .text.pcTaskGetName:0000000000000020 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4011   .text.xTaskCatchUpTicks:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4019   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4090   .text.xTaskCatchUpTicks:000000000000002c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4096   .text.xTaskIncrementTick:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4104   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4139   .text.xTaskIncrementTick:0000000000000018 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4145   .text.vTaskSwitchContext:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4153   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4300   .text.vTaskSwitchContext:0000000000000074 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4311   .text.vTaskSuspend:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4319   .text.vTaskSuspend:0000000000000000 vTaskSuspend
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4548   .text.vTaskSuspend:00000000000000b4 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4560   .text.vTaskPlaceOnEventList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4568   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4641   .text.vTaskPlaceOnEventList:0000000000000030 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4646   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4654   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4768   .text.vTaskPlaceOnUnorderedEventList:0000000000000050 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4774   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4782   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4870   .text.vTaskPlaceOnEventListRestricted:0000000000000038 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4875   .text.xTaskRemoveFromEventList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:4883   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5039   .text.xTaskRemoveFromEventList:000000000000007c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5049   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5057   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5204   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5213   .text.vTaskSetTimeOutState:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5221   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5295   .text.vTaskSetTimeOutState:0000000000000030 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5301   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5309   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5332   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5338   .text.xTaskCheckForTimeOut:0000000000000000 $t
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 294


/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5346   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5550   .text.xTaskCheckForTimeOut:0000000000000088 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5557   .text.vTaskMissedYield:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5565   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5582   .text.vTaskMissedYield:0000000000000008 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5587   .text.uxTaskGetTaskNumber:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5595   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5621   .text.vTaskSetTaskNumber:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5629   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5654   .text.vTaskGetInfo:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5662   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5853   .text.vTaskGetInfo:000000000000008c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5861   .text.prvListTasksWithinSingleList.part.0:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5868   .text.prvListTasksWithinSingleList.part.0:0000000000000000 prvListTasksWithinSingleList.part.0
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:5999   .text.uxTaskGetSystemState:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6007   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6263   .text.uxTaskGetSystemState:00000000000000cc $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6274   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6282   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6370   .text.uxTaskGetStackHighWaterMark:0000000000000030 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6375   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6383   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6402   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6407   .text.xTaskGetSchedulerState:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6415   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6448   .text.xTaskGetSchedulerState:0000000000000018 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6454   .text.xTaskPriorityInherit:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6462   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6609   .text.xTaskPriorityInherit:0000000000000080 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6616   .text.xTaskPriorityDisinherit:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6624   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6815   .text.xTaskPriorityDisinherit:0000000000000080 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6822   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:6830   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7047   .text.vTaskPriorityDisinheritAfterTimeout:000000000000009c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7054   .text.uxTaskResetEventItemValue:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7062   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7090   .text.uxTaskResetEventItemValue:0000000000000014 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7095   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7103   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7132   .text.pvTaskIncrementMutexHeldCount:0000000000000014 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7137   .text.ulTaskNotifyTake:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7145   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7262   .text.ulTaskNotifyTake:0000000000000060 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7268   .text.xTaskNotifyWait:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7276   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7431   .text.xTaskNotifyWait:0000000000000090 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7437   .text.xTaskGenericNotify:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7445   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7504   .text.xTaskGenericNotify:000000000000002c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7747   .text.xTaskGenericNotify:00000000000000e0 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7755   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7763   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7851   .text.xTaskGenericNotifyFromISR:000000000000004c $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8103   .text.xTaskGenericNotifyFromISR:0000000000000110 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8113   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8121   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 295


/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8370   .text.vTaskNotifyGiveFromISR:00000000000000bc $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8380   .text.xTaskNotifyStateClear:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8388   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8464   .text.xTaskNotifyStateClear:0000000000000034 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8469   .text.ulTaskNotifyValueClear:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8477   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8547   .text.ulTaskNotifyValueClear:0000000000000030 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8557   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8553   .bss.pxCurrentTCB:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8560   .bss.pxDelayedTaskList:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8564   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8567   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8571   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8574   .bss.pxReadyTasksLists:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8578   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8581   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8585   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8588   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8592   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8595   .bss.uxSchedulerSuspended:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8599   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8602   .bss.uxTaskNumber:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8606   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8609   .bss.uxTopReadyPriority:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8613   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8616   .bss.xDelayedTaskList1:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8620   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8623   .bss.xDelayedTaskList2:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8627   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8630   .bss.xNextTaskUnblockTime:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8634   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8637   .bss.xNumOfOverflows:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8641   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8644   .bss.xPendedTicks:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8648   .bss.xPendedTicks:0000000000000000 xPendedTicks
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8651   .bss.xPendingReadyList:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8655   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8658   .bss.xSchedulerRunning:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8662   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8665   .bss.xSuspendedTaskList:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8669   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8672   .bss.xTasksWaitingTermination:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8676   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8679   .bss.xTickCount:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8683   .bss.xTickCount:0000000000000000 xTickCount
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8686   .bss.xYieldPending:0000000000000000 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:8690   .bss.xYieldPending:0000000000000000 xYieldPending
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7510   .text.xTaskGenericNotify:0000000000000031 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7510   .text.xTaskGenericNotify:0000000000000032 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7857   .text.xTaskGenericNotifyFromISR:0000000000000051 $d
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s:7857   .text.xTaskGenericNotifyFromISR:0000000000000052 $t

UNDEFINED SYMBOLS
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vListInitialise
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cch7enyY.s 			page 296


memset
vListInitialiseItem
pxPortInitialiseStack
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
