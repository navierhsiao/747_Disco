ARM GAS  /tmp/cc6IR6gN.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"timers.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.bss.xActiveTimerList1,"aw",%nobits
  17              		.align	2
  20              	xActiveTimerList1:
  21 0000 00000000 		.space	20
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.section	.bss.xActiveTimerList2,"aw",%nobits
  23              		.align	2
  26              	xActiveTimerList2:
  27 0000 00000000 		.space	20
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.section	.bss.pxCurrentTimerList,"aw",%nobits
  29              		.align	2
  32              	pxCurrentTimerList:
  33 0000 00000000 		.space	4
  34              		.section	.bss.pxOverflowTimerList,"aw",%nobits
  35              		.align	2
  38              	pxOverflowTimerList:
  39 0000 00000000 		.space	4
  40              		.section	.bss.xTimerQueue,"aw",%nobits
  41              		.align	2
  44              	xTimerQueue:
  45 0000 00000000 		.space	4
  46              		.section	.bss.xTimerTaskHandle,"aw",%nobits
  47              		.align	2
  50              	xTimerTaskHandle:
  51 0000 00000000 		.space	4
  52              		.section	.rodata
  53              		.align	2
  54              	.LC0:
  55 0000 546D7220 		.ascii	"Tmr Svc\000"
  55      53766300 
  56              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
  57              		.align	1
  58              		.global	xTimerCreateTimerTask
  59              		.arch armv7e-m
  60              		.syntax unified
ARM GAS  /tmp/cc6IR6gN.s 			page 2


  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	xTimerCreateTimerTask:
  66              	.LFB4:
  67              		.file 1 "./Libraries/FreeRTOS/Source/timers.c"
   1:./Libraries/FreeRTOS/Source/timers.c **** /*
   2:./Libraries/FreeRTOS/Source/timers.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/timers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/timers.c ****  *
   5:./Libraries/FreeRTOS/Source/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/timers.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/timers.c ****  *
  12:./Libraries/FreeRTOS/Source/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/timers.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/timers.c ****  *
  15:./Libraries/FreeRTOS/Source/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/timers.c ****  *
  22:./Libraries/FreeRTOS/Source/timers.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/timers.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/timers.c ****  *
  25:./Libraries/FreeRTOS/Source/timers.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/timers.c ****  */
  27:./Libraries/FreeRTOS/Source/timers.c **** 
  28:./Libraries/FreeRTOS/Source/timers.c **** /* Standard includes. */
  29:./Libraries/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  30:./Libraries/FreeRTOS/Source/timers.c **** 
  31:./Libraries/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:./Libraries/FreeRTOS/Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:./Libraries/FreeRTOS/Source/timers.c **** task.h is included from an application file. */
  34:./Libraries/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:./Libraries/FreeRTOS/Source/timers.c **** 
  36:./Libraries/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  37:./Libraries/FreeRTOS/Source/timers.c **** #include "task.h"
  38:./Libraries/FreeRTOS/Source/timers.c **** #include "queue.h"
  39:./Libraries/FreeRTOS/Source/timers.c **** #include "timers.h"
  40:./Libraries/FreeRTOS/Source/timers.c **** 
  41:./Libraries/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:./Libraries/FreeRTOS/Source/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:./Libraries/FreeRTOS/Source/timers.c **** #endif
  44:./Libraries/FreeRTOS/Source/timers.c **** 
  45:./Libraries/FreeRTOS/Source/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:./Libraries/FreeRTOS/Source/timers.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:./Libraries/FreeRTOS/Source/timers.c **** for the header files above, but not in this file, in order to generate the
  48:./Libraries/FreeRTOS/Source/timers.c **** correct privileged Vs unprivileged linkage and placement. */
  49:./Libraries/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  50:./Libraries/FreeRTOS/Source/timers.c **** 
  51:./Libraries/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6IR6gN.s 			page 3


  52:./Libraries/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:./Libraries/FreeRTOS/Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:./Libraries/FreeRTOS/Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:./Libraries/FreeRTOS/Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:./Libraries/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:./Libraries/FreeRTOS/Source/timers.c **** 
  58:./Libraries/FreeRTOS/Source/timers.c **** /* Misc definitions. */
  59:./Libraries/FreeRTOS/Source/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:./Libraries/FreeRTOS/Source/timers.c **** 
  61:./Libraries/FreeRTOS/Source/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:./Libraries/FreeRTOS/Source/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:./Libraries/FreeRTOS/Source/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:./Libraries/FreeRTOS/Source/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:./Libraries/FreeRTOS/Source/timers.c **** #endif
  66:./Libraries/FreeRTOS/Source/timers.c **** 
  67:./Libraries/FreeRTOS/Source/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  68:./Libraries/FreeRTOS/Source/timers.c **** #define tmrSTATUS_IS_ACTIVE					( ( uint8_t ) 0x01 )
  69:./Libraries/FreeRTOS/Source/timers.c **** #define tmrSTATUS_IS_STATICALLY_ALLOCATED	( ( uint8_t ) 0x02 )
  70:./Libraries/FreeRTOS/Source/timers.c **** #define tmrSTATUS_IS_AUTORELOAD				( ( uint8_t ) 0x04 )
  71:./Libraries/FreeRTOS/Source/timers.c **** 
  72:./Libraries/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
  73:./Libraries/FreeRTOS/Source/timers.c **** typedef struct tmrTimerControl /* The old naming convention is used to prevent breaking kernel awar
  74:./Libraries/FreeRTOS/Source/timers.c **** {
  75:./Libraries/FreeRTOS/Source/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  76:./Libraries/FreeRTOS/Source/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  77:./Libraries/FreeRTOS/Source/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  78:./Libraries/FreeRTOS/Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  79:./Libraries/FreeRTOS/Source/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  80:./Libraries/FreeRTOS/Source/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  81:./Libraries/FreeRTOS/Source/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  82:./Libraries/FreeRTOS/Source/timers.c **** 	#endif
  83:./Libraries/FreeRTOS/Source/timers.c **** 	uint8_t 				ucStatus;			/*<< Holds bits to say if the timer was statically allocated or not, and i
  84:./Libraries/FreeRTOS/Source/timers.c **** } xTIMER;
  85:./Libraries/FreeRTOS/Source/timers.c **** 
  86:./Libraries/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  87:./Libraries/FreeRTOS/Source/timers.c **** name below to enable the use of older kernel aware debuggers. */
  88:./Libraries/FreeRTOS/Source/timers.c **** typedef xTIMER Timer_t;
  89:./Libraries/FreeRTOS/Source/timers.c **** 
  90:./Libraries/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  91:./Libraries/FreeRTOS/Source/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  92:./Libraries/FreeRTOS/Source/timers.c **** and messages that request the execution of a non-timer related callback.  The
  93:./Libraries/FreeRTOS/Source/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  94:./Libraries/FreeRTOS/Source/timers.c **** and xCallbackParametersType respectively. */
  95:./Libraries/FreeRTOS/Source/timers.c **** typedef struct tmrTimerParameters
  96:./Libraries/FreeRTOS/Source/timers.c **** {
  97:./Libraries/FreeRTOS/Source/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  98:./Libraries/FreeRTOS/Source/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  99:./Libraries/FreeRTOS/Source/timers.c **** } TimerParameter_t;
 100:./Libraries/FreeRTOS/Source/timers.c **** 
 101:./Libraries/FreeRTOS/Source/timers.c **** 
 102:./Libraries/FreeRTOS/Source/timers.c **** typedef struct tmrCallbackParameters
 103:./Libraries/FreeRTOS/Source/timers.c **** {
 104:./Libraries/FreeRTOS/Source/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 105:./Libraries/FreeRTOS/Source/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 106:./Libraries/FreeRTOS/Source/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 107:./Libraries/FreeRTOS/Source/timers.c **** } CallbackParameters_t;
 108:./Libraries/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6IR6gN.s 			page 4


 109:./Libraries/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 110:./Libraries/FreeRTOS/Source/timers.c **** that is used to determine which message type is valid. */
 111:./Libraries/FreeRTOS/Source/timers.c **** typedef struct tmrTimerQueueMessage
 112:./Libraries/FreeRTOS/Source/timers.c **** {
 113:./Libraries/FreeRTOS/Source/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 114:./Libraries/FreeRTOS/Source/timers.c **** 	union
 115:./Libraries/FreeRTOS/Source/timers.c **** 	{
 116:./Libraries/FreeRTOS/Source/timers.c **** 		TimerParameter_t xTimerParameters;
 117:./Libraries/FreeRTOS/Source/timers.c **** 
 118:./Libraries/FreeRTOS/Source/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 119:./Libraries/FreeRTOS/Source/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 120:./Libraries/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 121:./Libraries/FreeRTOS/Source/timers.c **** 			CallbackParameters_t xCallbackParameters;
 122:./Libraries/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 123:./Libraries/FreeRTOS/Source/timers.c **** 	} u;
 124:./Libraries/FreeRTOS/Source/timers.c **** } DaemonTaskMessage_t;
 125:./Libraries/FreeRTOS/Source/timers.c **** 
 126:./Libraries/FreeRTOS/Source/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 127:./Libraries/FreeRTOS/Source/timers.c **** which static variables must be declared volatile. */
 128:./Libraries/FreeRTOS/Source/timers.c **** 
 129:./Libraries/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 130:./Libraries/FreeRTOS/Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 131:./Libraries/FreeRTOS/Source/timers.c **** timer service task is allowed to access these lists.
 132:./Libraries/FreeRTOS/Source/timers.c **** xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 133:./Libraries/FreeRTOS/Source/timers.c **** breaks some kernel aware debuggers, and debuggers that reply on removing the
 134:./Libraries/FreeRTOS/Source/timers.c **** static qualifier. */
 135:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 136:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 137:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 138:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 139:./Libraries/FreeRTOS/Source/timers.c **** 
 140:./Libraries/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 141:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 142:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 143:./Libraries/FreeRTOS/Source/timers.c **** 
 144:./Libraries/FreeRTOS/Source/timers.c **** /*lint -restore */
 145:./Libraries/FreeRTOS/Source/timers.c **** 
 146:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 147:./Libraries/FreeRTOS/Source/timers.c **** 
 148:./Libraries/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 149:./Libraries/FreeRTOS/Source/timers.c **** 
 150:./Libraries/FreeRTOS/Source/timers.c **** 	/* If static allocation is supported then the application must provide the
 151:./Libraries/FreeRTOS/Source/timers.c **** 	following callback function - which enables the application to optionally
 152:./Libraries/FreeRTOS/Source/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 153:./Libraries/FreeRTOS/Source/timers.c **** 	and TCB. */
 154:./Libraries/FreeRTOS/Source/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 155:./Libraries/FreeRTOS/Source/timers.c **** 
 156:./Libraries/FreeRTOS/Source/timers.c **** #endif
 157:./Libraries/FreeRTOS/Source/timers.c **** 
 158:./Libraries/FreeRTOS/Source/timers.c **** /*
 159:./Libraries/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 160:./Libraries/FreeRTOS/Source/timers.c ****  * been initialised already.
 161:./Libraries/FreeRTOS/Source/timers.c ****  */
 162:./Libraries/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 163:./Libraries/FreeRTOS/Source/timers.c **** 
 164:./Libraries/FreeRTOS/Source/timers.c **** /*
 165:./Libraries/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
ARM GAS  /tmp/cc6IR6gN.s 			page 5


 166:./Libraries/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 167:./Libraries/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 168:./Libraries/FreeRTOS/Source/timers.c ****  */
 169:./Libraries/FreeRTOS/Source/timers.c **** static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 170:./Libraries/FreeRTOS/Source/timers.c **** 
 171:./Libraries/FreeRTOS/Source/timers.c **** /*
 172:./Libraries/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 173:./Libraries/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 174:./Libraries/FreeRTOS/Source/timers.c ****  */
 175:./Libraries/FreeRTOS/Source/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 176:./Libraries/FreeRTOS/Source/timers.c **** 
 177:./Libraries/FreeRTOS/Source/timers.c **** /*
 178:./Libraries/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 179:./Libraries/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 180:./Libraries/FreeRTOS/Source/timers.c ****  */
 181:./Libraries/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 182:./Libraries/FreeRTOS/Source/timers.c **** 
 183:./Libraries/FreeRTOS/Source/timers.c **** /*
 184:./Libraries/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 185:./Libraries/FreeRTOS/Source/timers.c ****  * auto-reload timer, then call its callback.
 186:./Libraries/FreeRTOS/Source/timers.c ****  */
 187:./Libraries/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 188:./Libraries/FreeRTOS/Source/timers.c **** 
 189:./Libraries/FreeRTOS/Source/timers.c **** /*
 190:./Libraries/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 191:./Libraries/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 192:./Libraries/FreeRTOS/Source/timers.c ****  */
 193:./Libraries/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 194:./Libraries/FreeRTOS/Source/timers.c **** 
 195:./Libraries/FreeRTOS/Source/timers.c **** /*
 196:./Libraries/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 197:./Libraries/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 198:./Libraries/FreeRTOS/Source/timers.c ****  */
 199:./Libraries/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 200:./Libraries/FreeRTOS/Source/timers.c **** 
 201:./Libraries/FreeRTOS/Source/timers.c **** /*
 202:./Libraries/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 203:./Libraries/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 204:./Libraries/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 205:./Libraries/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 206:./Libraries/FreeRTOS/Source/timers.c ****  */
 207:./Libraries/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 208:./Libraries/FreeRTOS/Source/timers.c **** 
 209:./Libraries/FreeRTOS/Source/timers.c **** /*
 210:./Libraries/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 211:./Libraries/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 212:./Libraries/FreeRTOS/Source/timers.c ****  */
 213:./Libraries/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 214:./Libraries/FreeRTOS/Source/timers.c **** 
 215:./Libraries/FreeRTOS/Source/timers.c **** /*
 216:./Libraries/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 217:./Libraries/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 218:./Libraries/FreeRTOS/Source/timers.c ****  */
 219:./Libraries/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 220:./Libraries/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 221:./Libraries/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 222:./Libraries/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
ARM GAS  /tmp/cc6IR6gN.s 			page 6


 223:./Libraries/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 224:./Libraries/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 225:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 226:./Libraries/FreeRTOS/Source/timers.c **** 
 227:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 228:./Libraries/FreeRTOS/Source/timers.c **** {
  68              		.loc 1 228 1
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 24
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72 0000 80B5     		push	{r7, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 8AB0     		sub	sp, sp, #40
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 48
  80 0004 04AF     		add	r7, sp, #16
  81              	.LCFI2:
  82              		.cfi_def_cfa 7, 32
 229:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
  83              		.loc 1 229 12
  84 0006 0023     		movs	r3, #0
  85 0008 7B61     		str	r3, [r7, #20]
 230:./Libraries/FreeRTOS/Source/timers.c **** 
 231:./Libraries/FreeRTOS/Source/timers.c **** 	/* This function is called when the scheduler is started if
 232:./Libraries/FreeRTOS/Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 233:./Libraries/FreeRTOS/Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 234:./Libraries/FreeRTOS/Source/timers.c **** 	been created then the initialisation will already have been performed. */
 235:./Libraries/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
  86              		.loc 1 235 2
  87 000a FFF7FEFF 		bl	prvCheckForValidListAndQueue
 236:./Libraries/FreeRTOS/Source/timers.c **** 
 237:./Libraries/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
  88              		.loc 1 237 18
  89 000e 1C4B     		ldr	r3, .L7
  90 0010 1B68     		ldr	r3, [r3]
  91              		.loc 1 237 4
  92 0012 002B     		cmp	r3, #0
  93 0014 21D0     		beq	.L2
  94              	.LBB45:
 238:./Libraries/FreeRTOS/Source/timers.c **** 	{
 239:./Libraries/FreeRTOS/Source/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 240:./Libraries/FreeRTOS/Source/timers.c **** 		{
 241:./Libraries/FreeRTOS/Source/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
  95              		.loc 1 241 18
  96 0016 0023     		movs	r3, #0
  97 0018 FB60     		str	r3, [r7, #12]
 242:./Libraries/FreeRTOS/Source/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
  98              		.loc 1 242 17
  99 001a 0023     		movs	r3, #0
 100 001c BB60     		str	r3, [r7, #8]
 243:./Libraries/FreeRTOS/Source/timers.c **** 			uint32_t ulTimerTaskStackSize;
 244:./Libraries/FreeRTOS/Source/timers.c **** 
 245:./Libraries/FreeRTOS/Source/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 101              		.loc 1 245 4
ARM GAS  /tmp/cc6IR6gN.s 			page 7


 102 001e 3A1D     		adds	r2, r7, #4
 103 0020 07F10801 		add	r1, r7, #8
 104 0024 07F10C03 		add	r3, r7, #12
 105 0028 1846     		mov	r0, r3
 106 002a FFF7FEFF 		bl	vApplicationGetTimerTaskMemory
 246:./Libraries/FreeRTOS/Source/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 107              		.loc 1 246 23
 108 002e 7968     		ldr	r1, [r7, #4]
 109 0030 BB68     		ldr	r3, [r7, #8]
 110 0032 FA68     		ldr	r2, [r7, #12]
 111 0034 0292     		str	r2, [sp, #8]
 112 0036 0193     		str	r3, [sp, #4]
 113 0038 0223     		movs	r3, #2
 114 003a 0093     		str	r3, [sp]
 115 003c 0023     		movs	r3, #0
 116 003e 0A46     		mov	r2, r1
 117 0040 1049     		ldr	r1, .L7+4
 118 0042 1148     		ldr	r0, .L7+8
 119 0044 FFF7FEFF 		bl	xTaskCreateStatic
 120 0048 0346     		mov	r3, r0
 121              		.loc 1 246 21
 122 004a 104A     		ldr	r2, .L7+12
 123 004c 1360     		str	r3, [r2]
 247:./Libraries/FreeRTOS/Source/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 248:./Libraries/FreeRTOS/Source/timers.c **** 													ulTimerTaskStackSize,
 249:./Libraries/FreeRTOS/Source/timers.c **** 													NULL,
 250:./Libraries/FreeRTOS/Source/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 251:./Libraries/FreeRTOS/Source/timers.c **** 													pxTimerTaskStackBuffer,
 252:./Libraries/FreeRTOS/Source/timers.c **** 													pxTimerTaskTCBBuffer );
 253:./Libraries/FreeRTOS/Source/timers.c **** 
 254:./Libraries/FreeRTOS/Source/timers.c **** 			if( xTimerTaskHandle != NULL )
 124              		.loc 1 254 25
 125 004e 0F4B     		ldr	r3, .L7+12
 126 0050 1B68     		ldr	r3, [r3]
 127              		.loc 1 254 6
 128 0052 002B     		cmp	r3, #0
 129 0054 01D0     		beq	.L2
 255:./Libraries/FreeRTOS/Source/timers.c **** 			{
 256:./Libraries/FreeRTOS/Source/timers.c **** 				xReturn = pdPASS;
 130              		.loc 1 256 13
 131 0056 0123     		movs	r3, #1
 132 0058 7B61     		str	r3, [r7, #20]
 133              	.L2:
 134              	.LBE45:
 257:./Libraries/FreeRTOS/Source/timers.c **** 			}
 258:./Libraries/FreeRTOS/Source/timers.c **** 		}
 259:./Libraries/FreeRTOS/Source/timers.c **** 		#else
 260:./Libraries/FreeRTOS/Source/timers.c **** 		{
 261:./Libraries/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 262:./Libraries/FreeRTOS/Source/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 263:./Libraries/FreeRTOS/Source/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 264:./Libraries/FreeRTOS/Source/timers.c **** 									NULL,
 265:./Libraries/FreeRTOS/Source/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 266:./Libraries/FreeRTOS/Source/timers.c **** 									&xTimerTaskHandle );
 267:./Libraries/FreeRTOS/Source/timers.c **** 		}
 268:./Libraries/FreeRTOS/Source/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 269:./Libraries/FreeRTOS/Source/timers.c **** 	}
ARM GAS  /tmp/cc6IR6gN.s 			page 8


 270:./Libraries/FreeRTOS/Source/timers.c **** 	else
 271:./Libraries/FreeRTOS/Source/timers.c **** 	{
 272:./Libraries/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 273:./Libraries/FreeRTOS/Source/timers.c **** 	}
 274:./Libraries/FreeRTOS/Source/timers.c **** 
 275:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 135              		.loc 1 275 2
 136 005a 7B69     		ldr	r3, [r7, #20]
 137 005c 002B     		cmp	r3, #0
 138 005e 0AD1     		bne	.L4
 139              	.LBB46:
 140              	.LBB47:
 141              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  /tmp/cc6IR6gN.s 			page 9


  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  /tmp/cc6IR6gN.s 			page 10


 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/cc6IR6gN.s 			page 11


 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 142              		.loc 2 195 2
 143              		.syntax unified
 144              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 145 0060 4FF05003 			mov r3, #80												
 146 0064 83F31188 		msr basepri, r3											
 147 0068 BFF36F8F 		isb														
 148 006c BFF34F8F 		dsb														
 149              	
 150              	@ 0 "" 2
 151              		.thumb
 152              		.syntax unified
 153 0070 3B61     		str	r3, [r7, #16]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/cc6IR6gN.s 			page 12


 154              		.loc 2 203 1
 155 0072 00BF     		nop
 156              	.L5:
 157              	.LBE47:
 158              	.LBE46:
 159              		.loc 1 275 2 discriminator 1
 160 0074 FEE7     		b	.L5
 161              	.L4:
 276:./Libraries/FreeRTOS/Source/timers.c **** 	return xReturn;
 162              		.loc 1 276 9
 163 0076 7B69     		ldr	r3, [r7, #20]
 277:./Libraries/FreeRTOS/Source/timers.c **** }
 164              		.loc 1 277 1
 165 0078 1846     		mov	r0, r3
 166 007a 1837     		adds	r7, r7, #24
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169 007c BD46     		mov	sp, r7
 170              	.LCFI4:
 171              		.cfi_def_cfa_register 13
 172              		@ sp needed
 173 007e 80BD     		pop	{r7, pc}
 174              	.L8:
 175              		.align	2
 176              	.L7:
 177 0080 00000000 		.word	xTimerQueue
 178 0084 00000000 		.word	.LC0
 179 0088 00000000 		.word	prvTimerTask
 180 008c 00000000 		.word	xTimerTaskHandle
 181              		.cfi_endproc
 182              	.LFE4:
 184              		.section	.text.xTimerCreate,"ax",%progbits
 185              		.align	1
 186              		.global	xTimerCreate
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu fpv5-d16
 192              	xTimerCreate:
 193              	.LFB5:
 278:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 279:./Libraries/FreeRTOS/Source/timers.c **** 
 280:./Libraries/FreeRTOS/Source/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 281:./Libraries/FreeRTOS/Source/timers.c **** 
 282:./Libraries/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 283:./Libraries/FreeRTOS/Source/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 284:./Libraries/FreeRTOS/Source/timers.c **** 								const UBaseType_t uxAutoReload,
 285:./Libraries/FreeRTOS/Source/timers.c **** 								void * const pvTimerID,
 286:./Libraries/FreeRTOS/Source/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 287:./Libraries/FreeRTOS/Source/timers.c **** 	{
 194              		.loc 1 287 2
 195              		.cfi_startproc
 196              		@ args = 4, pretend = 0, frame = 24
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198 0000 80B5     		push	{r7, lr}
 199              	.LCFI5:
 200              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6IR6gN.s 			page 13


 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203 0002 88B0     		sub	sp, sp, #32
 204              	.LCFI6:
 205              		.cfi_def_cfa_offset 40
 206 0004 02AF     		add	r7, sp, #8
 207              	.LCFI7:
 208              		.cfi_def_cfa 7, 32
 209 0006 F860     		str	r0, [r7, #12]
 210 0008 B960     		str	r1, [r7, #8]
 211 000a 7A60     		str	r2, [r7, #4]
 212 000c 3B60     		str	r3, [r7]
 288:./Libraries/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 289:./Libraries/FreeRTOS/Source/timers.c **** 
 290:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values ret
 213              		.loc 1 290 30
 214 000e 2C20     		movs	r0, #44
 215 0010 FFF7FEFF 		bl	pvPortMalloc
 216 0014 7861     		str	r0, [r7, #20]
 291:./Libraries/FreeRTOS/Source/timers.c **** 
 292:./Libraries/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 217              		.loc 1 292 5
 218 0016 7B69     		ldr	r3, [r7, #20]
 219 0018 002B     		cmp	r3, #0
 220 001a 0DD0     		beq	.L10
 293:./Libraries/FreeRTOS/Source/timers.c **** 		{
 294:./Libraries/FreeRTOS/Source/timers.c **** 			/* Status is thus far zero as the timer is not created statically
 295:./Libraries/FreeRTOS/Source/timers.c **** 			and has not been started.  The auto-reload bit may get set in
 296:./Libraries/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer. */
 297:./Libraries/FreeRTOS/Source/timers.c **** 			pxNewTimer->ucStatus = 0x00;
 221              		.loc 1 297 25
 222 001c 7B69     		ldr	r3, [r7, #20]
 223 001e 0022     		movs	r2, #0
 224 0020 83F82820 		strb	r2, [r3, #40]
 298:./Libraries/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 225              		.loc 1 298 4
 226 0024 7B69     		ldr	r3, [r7, #20]
 227 0026 0193     		str	r3, [sp, #4]
 228 0028 3B6A     		ldr	r3, [r7, #32]
 229 002a 0093     		str	r3, [sp]
 230 002c 3B68     		ldr	r3, [r7]
 231 002e 7A68     		ldr	r2, [r7, #4]
 232 0030 B968     		ldr	r1, [r7, #8]
 233 0032 F868     		ldr	r0, [r7, #12]
 234 0034 FFF7FEFF 		bl	prvInitialiseNewTimer
 235              	.L10:
 299:./Libraries/FreeRTOS/Source/timers.c **** 		}
 300:./Libraries/FreeRTOS/Source/timers.c **** 
 301:./Libraries/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 236              		.loc 1 301 10
 237 0038 7B69     		ldr	r3, [r7, #20]
 302:./Libraries/FreeRTOS/Source/timers.c **** 	}
 238              		.loc 1 302 2
 239 003a 1846     		mov	r0, r3
 240 003c 1837     		adds	r7, r7, #24
 241              	.LCFI8:
 242              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6IR6gN.s 			page 14


 243 003e BD46     		mov	sp, r7
 244              	.LCFI9:
 245              		.cfi_def_cfa_register 13
 246              		@ sp needed
 247 0040 80BD     		pop	{r7, pc}
 248              		.cfi_endproc
 249              	.LFE5:
 251              		.section	.text.xTimerCreateStatic,"ax",%progbits
 252              		.align	1
 253              		.global	xTimerCreateStatic
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv5-d16
 259              	xTimerCreateStatic:
 260              	.LFB6:
 303:./Libraries/FreeRTOS/Source/timers.c **** 
 304:./Libraries/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 305:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 306:./Libraries/FreeRTOS/Source/timers.c **** 
 307:./Libraries/FreeRTOS/Source/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 308:./Libraries/FreeRTOS/Source/timers.c **** 
 309:./Libraries/FreeRTOS/Source/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 310:./Libraries/FreeRTOS/Source/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 311:./Libraries/FreeRTOS/Source/timers.c **** 										const UBaseType_t uxAutoReload,
 312:./Libraries/FreeRTOS/Source/timers.c **** 										void * const pvTimerID,
 313:./Libraries/FreeRTOS/Source/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 314:./Libraries/FreeRTOS/Source/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 315:./Libraries/FreeRTOS/Source/timers.c **** 	{
 261              		.loc 1 315 2
 262              		.cfi_startproc
 263              		@ args = 8, pretend = 0, frame = 32
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              	.LCFI10:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 8AB0     		sub	sp, sp, #40
 271              	.LCFI11:
 272              		.cfi_def_cfa_offset 48
 273 0004 02AF     		add	r7, sp, #8
 274              	.LCFI12:
 275              		.cfi_def_cfa 7, 40
 276 0006 F860     		str	r0, [r7, #12]
 277 0008 B960     		str	r1, [r7, #8]
 278 000a 7A60     		str	r2, [r7, #4]
 279 000c 3B60     		str	r3, [r7]
 280              	.LBB48:
 316:./Libraries/FreeRTOS/Source/timers.c **** 	Timer_t *pxNewTimer;
 317:./Libraries/FreeRTOS/Source/timers.c **** 
 318:./Libraries/FreeRTOS/Source/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 319:./Libraries/FreeRTOS/Source/timers.c **** 		{
 320:./Libraries/FreeRTOS/Source/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 321:./Libraries/FreeRTOS/Source/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 322:./Libraries/FreeRTOS/Source/timers.c **** 			structure. */
 323:./Libraries/FreeRTOS/Source/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
ARM GAS  /tmp/cc6IR6gN.s 			page 15


 281              		.loc 1 323 20
 282 000e 2C23     		movs	r3, #44
 283 0010 3B61     		str	r3, [r7, #16]
 324:./Libraries/FreeRTOS/Source/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 284              		.loc 1 324 4
 285 0012 3B69     		ldr	r3, [r7, #16]
 286 0014 2C2B     		cmp	r3, #44
 287 0016 0AD0     		beq	.L13
 288              	.LBB49:
 289              	.LBB50:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 290              		.loc 2 195 2
 291              		.syntax unified
 292              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 293 0018 4FF05003 			mov r3, #80												
 294 001c 83F31188 		msr basepri, r3											
 295 0020 BFF36F8F 		isb														
 296 0024 BFF34F8F 		dsb														
 297              	
 298              	@ 0 "" 2
 299              		.thumb
 300              		.syntax unified
 301 0028 BB61     		str	r3, [r7, #24]
 302              		.loc 2 203 1
 303 002a 00BF     		nop
 304              	.L14:
 305              	.LBE50:
 306              	.LBE49:
 307              		.loc 1 324 4 discriminator 1
 308 002c FEE7     		b	.L14
 309              	.L13:
 325:./Libraries/FreeRTOS/Source/timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 310              		.loc 1 325 4
 311 002e 3B69     		ldr	r3, [r7, #16]
 312              	.LBE48:
 326:./Libraries/FreeRTOS/Source/timers.c **** 		}
 327:./Libraries/FreeRTOS/Source/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:./Libraries/FreeRTOS/Source/timers.c **** 
 329:./Libraries/FreeRTOS/Source/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:./Libraries/FreeRTOS/Source/timers.c **** 		configASSERT( pxTimerBuffer );
 313              		.loc 1 330 3
 314 0030 FB6A     		ldr	r3, [r7, #44]
 315 0032 002B     		cmp	r3, #0
 316 0034 0AD1     		bne	.L15
 317              	.LBB51:
 318              	.LBB52:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 319              		.loc 2 195 2
 320              		.syntax unified
 321              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 322 0036 4FF05003 			mov r3, #80												
 323 003a 83F31188 		msr basepri, r3											
 324 003e BFF36F8F 		isb														
 325 0042 BFF34F8F 		dsb														
 326              	
 327              	@ 0 "" 2
 328              		.thumb
ARM GAS  /tmp/cc6IR6gN.s 			page 16


 329              		.syntax unified
 330 0046 7B61     		str	r3, [r7, #20]
 331              		.loc 2 203 1
 332 0048 00BF     		nop
 333              	.L16:
 334              	.LBE52:
 335              	.LBE51:
 336              		.loc 1 330 3 discriminator 2
 337 004a FEE7     		b	.L16
 338              	.L15:
 331:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 339              		.loc 1 331 14
 340 004c FB6A     		ldr	r3, [r7, #44]
 341 004e FB61     		str	r3, [r7, #28]
 332:./Libraries/FreeRTOS/Source/timers.c **** 
 333:./Libraries/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 342              		.loc 1 333 5
 343 0050 FB69     		ldr	r3, [r7, #28]
 344 0052 002B     		cmp	r3, #0
 345 0054 0DD0     		beq	.L17
 334:./Libraries/FreeRTOS/Source/timers.c **** 		{
 335:./Libraries/FreeRTOS/Source/timers.c **** 			/* Timers can be created statically or dynamically so note this
 336:./Libraries/FreeRTOS/Source/timers.c **** 			timer was created statically in case it is later deleted.  The
 337:./Libraries/FreeRTOS/Source/timers.c **** 			auto-reload bit may get set in prvInitialiseNewTimer(). */
 338:./Libraries/FreeRTOS/Source/timers.c **** 			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 346              		.loc 1 338 25
 347 0056 FB69     		ldr	r3, [r7, #28]
 348 0058 0222     		movs	r2, #2
 349 005a 83F82820 		strb	r2, [r3, #40]
 339:./Libraries/FreeRTOS/Source/timers.c **** 
 340:./Libraries/FreeRTOS/Source/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 350              		.loc 1 340 4
 351 005e FB69     		ldr	r3, [r7, #28]
 352 0060 0193     		str	r3, [sp, #4]
 353 0062 BB6A     		ldr	r3, [r7, #40]
 354 0064 0093     		str	r3, [sp]
 355 0066 3B68     		ldr	r3, [r7]
 356 0068 7A68     		ldr	r2, [r7, #4]
 357 006a B968     		ldr	r1, [r7, #8]
 358 006c F868     		ldr	r0, [r7, #12]
 359 006e FFF7FEFF 		bl	prvInitialiseNewTimer
 360              	.L17:
 341:./Libraries/FreeRTOS/Source/timers.c **** 		}
 342:./Libraries/FreeRTOS/Source/timers.c **** 
 343:./Libraries/FreeRTOS/Source/timers.c **** 		return pxNewTimer;
 361              		.loc 1 343 10
 362 0072 FB69     		ldr	r3, [r7, #28]
 344:./Libraries/FreeRTOS/Source/timers.c **** 	}
 363              		.loc 1 344 2
 364 0074 1846     		mov	r0, r3
 365 0076 2037     		adds	r7, r7, #32
 366              	.LCFI13:
 367              		.cfi_def_cfa_offset 8
 368 0078 BD46     		mov	sp, r7
 369              	.LCFI14:
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
ARM GAS  /tmp/cc6IR6gN.s 			page 17


 372 007a 80BD     		pop	{r7, pc}
 373              		.cfi_endproc
 374              	.LFE6:
 376              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 377              		.align	1
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv5-d16
 383              	prvInitialiseNewTimer:
 384              	.LFB7:
 345:./Libraries/FreeRTOS/Source/timers.c **** 
 346:./Libraries/FreeRTOS/Source/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 347:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 348:./Libraries/FreeRTOS/Source/timers.c **** 
 349:./Libraries/FreeRTOS/Source/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 350:./Libraries/FreeRTOS/Source/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 351:./Libraries/FreeRTOS/Source/timers.c **** 									const UBaseType_t uxAutoReload,
 352:./Libraries/FreeRTOS/Source/timers.c **** 									void * const pvTimerID,
 353:./Libraries/FreeRTOS/Source/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 354:./Libraries/FreeRTOS/Source/timers.c **** 									Timer_t *pxNewTimer )
 355:./Libraries/FreeRTOS/Source/timers.c **** {
 385              		.loc 1 355 1
 386              		.cfi_startproc
 387              		@ args = 8, pretend = 0, frame = 24
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389 0000 80B5     		push	{r7, lr}
 390              	.LCFI15:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 86B0     		sub	sp, sp, #24
 395              	.LCFI16:
 396              		.cfi_def_cfa_offset 32
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI17:
 399              		.cfi_def_cfa_register 7
 400 0006 F860     		str	r0, [r7, #12]
 401 0008 B960     		str	r1, [r7, #8]
 402 000a 7A60     		str	r2, [r7, #4]
 403 000c 3B60     		str	r3, [r7]
 356:./Libraries/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 357:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 404              		.loc 1 357 2
 405 000e BB68     		ldr	r3, [r7, #8]
 406 0010 002B     		cmp	r3, #0
 407 0012 0AD1     		bne	.L20
 408              	.LBB53:
 409              	.LBB54:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 410              		.loc 2 195 2
 411              		.syntax unified
 412              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 413 0014 4FF05003 			mov r3, #80												
 414 0018 83F31188 		msr basepri, r3											
 415 001c BFF36F8F 		isb														
 416 0020 BFF34F8F 		dsb														
ARM GAS  /tmp/cc6IR6gN.s 			page 18


 417              	
 418              	@ 0 "" 2
 419              		.thumb
 420              		.syntax unified
 421 0024 7B61     		str	r3, [r7, #20]
 422              		.loc 2 203 1
 423 0026 00BF     		nop
 424              	.L21:
 425              	.LBE54:
 426              	.LBE53:
 427              		.loc 1 357 2 discriminator 1
 428 0028 FEE7     		b	.L21
 429              	.L20:
 358:./Libraries/FreeRTOS/Source/timers.c **** 
 359:./Libraries/FreeRTOS/Source/timers.c **** 	if( pxNewTimer != NULL )
 430              		.loc 1 359 4
 431 002a 7B6A     		ldr	r3, [r7, #36]
 432 002c 002B     		cmp	r3, #0
 433 002e 1ED0     		beq	.L23
 360:./Libraries/FreeRTOS/Source/timers.c **** 	{
 361:./Libraries/FreeRTOS/Source/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 362:./Libraries/FreeRTOS/Source/timers.c **** 		created/initialised. */
 363:./Libraries/FreeRTOS/Source/timers.c **** 		prvCheckForValidListAndQueue();
 434              		.loc 1 363 3
 435 0030 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 364:./Libraries/FreeRTOS/Source/timers.c **** 
 365:./Libraries/FreeRTOS/Source/timers.c **** 		/* Initialise the timer structure members using the function
 366:./Libraries/FreeRTOS/Source/timers.c **** 		parameters. */
 367:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 436              		.loc 1 367 27
 437 0034 7B6A     		ldr	r3, [r7, #36]
 438 0036 FA68     		ldr	r2, [r7, #12]
 439 0038 1A60     		str	r2, [r3]
 368:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 440              		.loc 1 368 35
 441 003a 7B6A     		ldr	r3, [r7, #36]
 442 003c BA68     		ldr	r2, [r7, #8]
 443 003e 9A61     		str	r2, [r3, #24]
 369:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 444              		.loc 1 369 25
 445 0040 7B6A     		ldr	r3, [r7, #36]
 446 0042 3A68     		ldr	r2, [r7]
 447 0044 DA61     		str	r2, [r3, #28]
 370:./Libraries/FreeRTOS/Source/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 448              		.loc 1 370 34
 449 0046 7B6A     		ldr	r3, [r7, #36]
 450 0048 3A6A     		ldr	r2, [r7, #32]
 451 004a 1A62     		str	r2, [r3, #32]
 371:./Libraries/FreeRTOS/Source/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 452              		.loc 1 371 3
 453 004c 7B6A     		ldr	r3, [r7, #36]
 454 004e 0433     		adds	r3, r3, #4
 455 0050 1846     		mov	r0, r3
 456 0052 FFF7FEFF 		bl	vListInitialiseItem
 372:./Libraries/FreeRTOS/Source/timers.c **** 		if( uxAutoReload != pdFALSE )
 457              		.loc 1 372 5
 458 0056 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6IR6gN.s 			page 19


 459 0058 002B     		cmp	r3, #0
 460 005a 08D0     		beq	.L23
 373:./Libraries/FreeRTOS/Source/timers.c **** 		{
 374:./Libraries/FreeRTOS/Source/timers.c **** 			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 461              		.loc 1 374 25
 462 005c 7B6A     		ldr	r3, [r7, #36]
 463 005e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 464 0062 43F00403 		orr	r3, r3, #4
 465 0066 DAB2     		uxtb	r2, r3
 466 0068 7B6A     		ldr	r3, [r7, #36]
 467 006a 83F82820 		strb	r2, [r3, #40]
 468              	.L23:
 375:./Libraries/FreeRTOS/Source/timers.c **** 		}
 376:./Libraries/FreeRTOS/Source/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:./Libraries/FreeRTOS/Source/timers.c **** 	}
 378:./Libraries/FreeRTOS/Source/timers.c **** }
 469              		.loc 1 378 1
 470 006e 00BF     		nop
 471 0070 1837     		adds	r7, r7, #24
 472              	.LCFI18:
 473              		.cfi_def_cfa_offset 8
 474 0072 BD46     		mov	sp, r7
 475              	.LCFI19:
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 0074 80BD     		pop	{r7, pc}
 479              		.cfi_endproc
 480              	.LFE7:
 482              		.section	.text.xTimerGenericCommand,"ax",%progbits
 483              		.align	1
 484              		.global	xTimerGenericCommand
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv5-d16
 490              	xTimerGenericCommand:
 491              	.LFB8:
 379:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 380:./Libraries/FreeRTOS/Source/timers.c **** 
 381:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:./Libraries/FreeRTOS/Source/timers.c **** {
 492              		.loc 1 382 1
 493              		.cfi_startproc
 494              		@ args = 4, pretend = 0, frame = 40
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              	.LCFI20:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 8AB0     		sub	sp, sp, #40
 502              	.LCFI21:
 503              		.cfi_def_cfa_offset 48
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI22:
 506              		.cfi_def_cfa_register 7
 507 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/cc6IR6gN.s 			page 20


 508 0008 B960     		str	r1, [r7, #8]
 509 000a 7A60     		str	r2, [r7, #4]
 510 000c 3B60     		str	r3, [r7]
 383:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xReturn = pdFAIL;
 511              		.loc 1 383 12
 512 000e 0023     		movs	r3, #0
 513 0010 7B62     		str	r3, [r7, #36]
 384:./Libraries/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 385:./Libraries/FreeRTOS/Source/timers.c **** 
 386:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 514              		.loc 1 386 2
 515 0012 FB68     		ldr	r3, [r7, #12]
 516 0014 002B     		cmp	r3, #0
 517 0016 0AD1     		bne	.L25
 518              	.LBB55:
 519              	.LBB56:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 520              		.loc 2 195 2
 521              		.syntax unified
 522              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 523 0018 4FF05003 			mov r3, #80												
 524 001c 83F31188 		msr basepri, r3											
 525 0020 BFF36F8F 		isb														
 526 0024 BFF34F8F 		dsb														
 527              	
 528              	@ 0 "" 2
 529              		.thumb
 530              		.syntax unified
 531 0028 3B62     		str	r3, [r7, #32]
 532              		.loc 2 203 1
 533 002a 00BF     		nop
 534              	.L26:
 535              	.LBE56:
 536              	.LBE55:
 537              		.loc 1 386 2 discriminator 1
 538 002c FEE7     		b	.L26
 539              	.L25:
 387:./Libraries/FreeRTOS/Source/timers.c **** 
 388:./Libraries/FreeRTOS/Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:./Libraries/FreeRTOS/Source/timers.c **** 	on a particular timer definition. */
 390:./Libraries/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 540              		.loc 1 390 18
 541 002e 1A4B     		ldr	r3, .L31
 542 0030 1B68     		ldr	r3, [r3]
 543              		.loc 1 390 4
 544 0032 002B     		cmp	r3, #0
 545 0034 2AD0     		beq	.L27
 391:./Libraries/FreeRTOS/Source/timers.c **** 	{
 392:./Libraries/FreeRTOS/Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 546              		.loc 1 393 23
 547 0036 BB68     		ldr	r3, [r7, #8]
 548 0038 3B61     		str	r3, [r7, #16]
 394:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 549              		.loc 1 394 45
 550 003a 7B68     		ldr	r3, [r7, #4]
 551 003c 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cc6IR6gN.s 			page 21


 395:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 552              		.loc 1 395 39
 553 003e FB68     		ldr	r3, [r7, #12]
 554 0040 BB61     		str	r3, [r7, #24]
 396:./Libraries/FreeRTOS/Source/timers.c **** 
 397:./Libraries/FreeRTOS/Source/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 555              		.loc 1 397 5
 556 0042 BB68     		ldr	r3, [r7, #8]
 557 0044 052B     		cmp	r3, #5
 558 0046 18DC     		bgt	.L28
 398:./Libraries/FreeRTOS/Source/timers.c **** 		{
 399:./Libraries/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 559              		.loc 1 399 8
 560 0048 FFF7FEFF 		bl	xTaskGetSchedulerState
 561 004c 0346     		mov	r3, r0
 562              		.loc 1 399 6
 563 004e 022B     		cmp	r3, #2
 564 0050 09D1     		bne	.L29
 400:./Libraries/FreeRTOS/Source/timers.c **** 			{
 401:./Libraries/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 565              		.loc 1 401 15
 566 0052 114B     		ldr	r3, .L31
 567 0054 1868     		ldr	r0, [r3]
 568 0056 07F11001 		add	r1, r7, #16
 569 005a 0023     		movs	r3, #0
 570 005c 3A6B     		ldr	r2, [r7, #48]
 571 005e FFF7FEFF 		bl	xQueueGenericSend
 572 0062 7862     		str	r0, [r7, #36]
 573 0064 12E0     		b	.L27
 574              	.L29:
 402:./Libraries/FreeRTOS/Source/timers.c **** 			}
 403:./Libraries/FreeRTOS/Source/timers.c **** 			else
 404:./Libraries/FreeRTOS/Source/timers.c **** 			{
 405:./Libraries/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 575              		.loc 1 405 15
 576 0066 0C4B     		ldr	r3, .L31
 577 0068 1868     		ldr	r0, [r3]
 578 006a 07F11001 		add	r1, r7, #16
 579 006e 0023     		movs	r3, #0
 580 0070 0022     		movs	r2, #0
 581 0072 FFF7FEFF 		bl	xQueueGenericSend
 582 0076 7862     		str	r0, [r7, #36]
 583 0078 08E0     		b	.L27
 584              	.L28:
 406:./Libraries/FreeRTOS/Source/timers.c **** 			}
 407:./Libraries/FreeRTOS/Source/timers.c **** 		}
 408:./Libraries/FreeRTOS/Source/timers.c **** 		else
 409:./Libraries/FreeRTOS/Source/timers.c **** 		{
 410:./Libraries/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 585              		.loc 1 410 14
 586 007a 074B     		ldr	r3, .L31
 587 007c 1868     		ldr	r0, [r3]
 588 007e 07F11001 		add	r1, r7, #16
 589 0082 0023     		movs	r3, #0
 590 0084 3A68     		ldr	r2, [r7]
 591 0086 FFF7FEFF 		bl	xQueueGenericSendFromISR
 592 008a 7862     		str	r0, [r7, #36]
ARM GAS  /tmp/cc6IR6gN.s 			page 22


 593              	.L27:
 411:./Libraries/FreeRTOS/Source/timers.c **** 		}
 412:./Libraries/FreeRTOS/Source/timers.c **** 
 413:./Libraries/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:./Libraries/FreeRTOS/Source/timers.c **** 	}
 415:./Libraries/FreeRTOS/Source/timers.c **** 	else
 416:./Libraries/FreeRTOS/Source/timers.c **** 	{
 417:./Libraries/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:./Libraries/FreeRTOS/Source/timers.c **** 	}
 419:./Libraries/FreeRTOS/Source/timers.c **** 
 420:./Libraries/FreeRTOS/Source/timers.c **** 	return xReturn;
 594              		.loc 1 420 9
 595 008c 7B6A     		ldr	r3, [r7, #36]
 421:./Libraries/FreeRTOS/Source/timers.c **** }
 596              		.loc 1 421 1
 597 008e 1846     		mov	r0, r3
 598 0090 2837     		adds	r7, r7, #40
 599              	.LCFI23:
 600              		.cfi_def_cfa_offset 8
 601 0092 BD46     		mov	sp, r7
 602              	.LCFI24:
 603              		.cfi_def_cfa_register 13
 604              		@ sp needed
 605 0094 80BD     		pop	{r7, pc}
 606              	.L32:
 607 0096 00BF     		.align	2
 608              	.L31:
 609 0098 00000000 		.word	xTimerQueue
 610              		.cfi_endproc
 611              	.LFE8:
 613              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 614              		.align	1
 615              		.global	xTimerGetTimerDaemonTaskHandle
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv5-d16
 621              	xTimerGetTimerDaemonTaskHandle:
 622              	.LFB9:
 422:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 423:./Libraries/FreeRTOS/Source/timers.c **** 
 424:./Libraries/FreeRTOS/Source/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:./Libraries/FreeRTOS/Source/timers.c **** {
 623              		.loc 1 425 1
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 8
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628 0000 80B4     		push	{r7}
 629              	.LCFI25:
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 7, -4
 632 0002 83B0     		sub	sp, sp, #12
 633              	.LCFI26:
 634              		.cfi_def_cfa_offset 16
 635 0004 00AF     		add	r7, sp, #0
 636              	.LCFI27:
ARM GAS  /tmp/cc6IR6gN.s 			page 23


 637              		.cfi_def_cfa_register 7
 426:./Libraries/FreeRTOS/Source/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:./Libraries/FreeRTOS/Source/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 638              		.loc 1 428 2
 639 0006 0B4B     		ldr	r3, .L37
 640 0008 1B68     		ldr	r3, [r3]
 641 000a 002B     		cmp	r3, #0
 642 000c 0AD1     		bne	.L34
 643              	.LBB57:
 644              	.LBB58:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 645              		.loc 2 195 2
 646              		.syntax unified
 647              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 648 000e 4FF05003 			mov r3, #80												
 649 0012 83F31188 		msr basepri, r3											
 650 0016 BFF36F8F 		isb														
 651 001a BFF34F8F 		dsb														
 652              	
 653              	@ 0 "" 2
 654              		.thumb
 655              		.syntax unified
 656 001e 7B60     		str	r3, [r7, #4]
 657              		.loc 2 203 1
 658 0020 00BF     		nop
 659              	.L35:
 660              	.LBE58:
 661              	.LBE57:
 662              		.loc 1 428 2 discriminator 1
 663 0022 FEE7     		b	.L35
 664              	.L34:
 429:./Libraries/FreeRTOS/Source/timers.c **** 	return xTimerTaskHandle;
 665              		.loc 1 429 9
 666 0024 034B     		ldr	r3, .L37
 667 0026 1B68     		ldr	r3, [r3]
 430:./Libraries/FreeRTOS/Source/timers.c **** }
 668              		.loc 1 430 1
 669 0028 1846     		mov	r0, r3
 670 002a 0C37     		adds	r7, r7, #12
 671              	.LCFI28:
 672              		.cfi_def_cfa_offset 4
 673 002c BD46     		mov	sp, r7
 674              	.LCFI29:
 675              		.cfi_def_cfa_register 13
 676              		@ sp needed
 677 002e 5DF8047B 		ldr	r7, [sp], #4
 678              	.LCFI30:
 679              		.cfi_restore 7
 680              		.cfi_def_cfa_offset 0
 681 0032 7047     		bx	lr
 682              	.L38:
 683              		.align	2
 684              	.L37:
 685 0034 00000000 		.word	xTimerTaskHandle
 686              		.cfi_endproc
 687              	.LFE9:
ARM GAS  /tmp/cc6IR6gN.s 			page 24


 689              		.section	.text.xTimerGetPeriod,"ax",%progbits
 690              		.align	1
 691              		.global	xTimerGetPeriod
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv5-d16
 697              	xTimerGetPeriod:
 698              	.LFB10:
 431:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 432:./Libraries/FreeRTOS/Source/timers.c **** 
 433:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:./Libraries/FreeRTOS/Source/timers.c **** {
 699              		.loc 1 434 1
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 16
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 0000 80B4     		push	{r7}
 705              	.LCFI31:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 7, -4
 708 0002 85B0     		sub	sp, sp, #20
 709              	.LCFI32:
 710              		.cfi_def_cfa_offset 24
 711 0004 00AF     		add	r7, sp, #0
 712              	.LCFI33:
 713              		.cfi_def_cfa_register 7
 714 0006 7860     		str	r0, [r7, #4]
 435:./Libraries/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = xTimer;
 715              		.loc 1 435 10
 716 0008 7B68     		ldr	r3, [r7, #4]
 717 000a FB60     		str	r3, [r7, #12]
 436:./Libraries/FreeRTOS/Source/timers.c **** 
 437:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 718              		.loc 1 437 2
 719 000c 7B68     		ldr	r3, [r7, #4]
 720 000e 002B     		cmp	r3, #0
 721 0010 0AD1     		bne	.L40
 722              	.LBB59:
 723              	.LBB60:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 724              		.loc 2 195 2
 725              		.syntax unified
 726              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 727 0012 4FF05003 			mov r3, #80												
 728 0016 83F31188 		msr basepri, r3											
 729 001a BFF36F8F 		isb														
 730 001e BFF34F8F 		dsb														
 731              	
 732              	@ 0 "" 2
 733              		.thumb
 734              		.syntax unified
 735 0022 BB60     		str	r3, [r7, #8]
 736              		.loc 2 203 1
 737 0024 00BF     		nop
 738              	.L41:
ARM GAS  /tmp/cc6IR6gN.s 			page 25


 739              	.LBE60:
 740              	.LBE59:
 741              		.loc 1 437 2 discriminator 1
 742 0026 FEE7     		b	.L41
 743              	.L40:
 438:./Libraries/FreeRTOS/Source/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 744              		.loc 1 438 16
 745 0028 FB68     		ldr	r3, [r7, #12]
 746 002a 9B69     		ldr	r3, [r3, #24]
 439:./Libraries/FreeRTOS/Source/timers.c **** }
 747              		.loc 1 439 1
 748 002c 1846     		mov	r0, r3
 749 002e 1437     		adds	r7, r7, #20
 750              	.LCFI34:
 751              		.cfi_def_cfa_offset 4
 752 0030 BD46     		mov	sp, r7
 753              	.LCFI35:
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 0032 5DF8047B 		ldr	r7, [sp], #4
 757              	.LCFI36:
 758              		.cfi_restore 7
 759              		.cfi_def_cfa_offset 0
 760 0036 7047     		bx	lr
 761              		.cfi_endproc
 762              	.LFE10:
 764              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 765              		.align	1
 766              		.global	vTimerSetReloadMode
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu fpv5-d16
 772              	vTimerSetReloadMode:
 773              	.LFB11:
 440:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 441:./Libraries/FreeRTOS/Source/timers.c **** 
 442:./Libraries/FreeRTOS/Source/timers.c **** void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
 443:./Libraries/FreeRTOS/Source/timers.c **** {
 774              		.loc 1 443 1
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 16
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778 0000 80B5     		push	{r7, lr}
 779              	.LCFI37:
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0002 84B0     		sub	sp, sp, #16
 784              	.LCFI38:
 785              		.cfi_def_cfa_offset 24
 786 0004 00AF     		add	r7, sp, #0
 787              	.LCFI39:
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 790 0008 3960     		str	r1, [r7]
 444:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * pxTimer =  xTimer;
ARM GAS  /tmp/cc6IR6gN.s 			page 26


 791              		.loc 1 444 11
 792 000a 7B68     		ldr	r3, [r7, #4]
 793 000c FB60     		str	r3, [r7, #12]
 445:./Libraries/FreeRTOS/Source/timers.c **** 
 446:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 794              		.loc 1 446 2
 795 000e 7B68     		ldr	r3, [r7, #4]
 796 0010 002B     		cmp	r3, #0
 797 0012 0AD1     		bne	.L44
 798              	.LBB61:
 799              	.LBB62:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 800              		.loc 2 195 2
 801              		.syntax unified
 802              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 803 0014 4FF05003 			mov r3, #80												
 804 0018 83F31188 		msr basepri, r3											
 805 001c BFF36F8F 		isb														
 806 0020 BFF34F8F 		dsb														
 807              	
 808              	@ 0 "" 2
 809              		.thumb
 810              		.syntax unified
 811 0024 BB60     		str	r3, [r7, #8]
 812              		.loc 2 203 1
 813 0026 00BF     		nop
 814              	.L45:
 815              	.LBE62:
 816              	.LBE61:
 817              		.loc 1 446 2 discriminator 1
 818 0028 FEE7     		b	.L45
 819              	.L44:
 447:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 820              		.loc 1 447 2
 821 002a FFF7FEFF 		bl	vPortEnterCritical
 448:./Libraries/FreeRTOS/Source/timers.c **** 	{
 449:./Libraries/FreeRTOS/Source/timers.c **** 		if( uxAutoReload != pdFALSE )
 822              		.loc 1 449 5
 823 002e 3B68     		ldr	r3, [r7]
 824 0030 002B     		cmp	r3, #0
 825 0032 09D0     		beq	.L46
 450:./Libraries/FreeRTOS/Source/timers.c **** 		{
 451:./Libraries/FreeRTOS/Source/timers.c **** 			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 826              		.loc 1 451 22
 827 0034 FB68     		ldr	r3, [r7, #12]
 828 0036 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 829 003a 43F00403 		orr	r3, r3, #4
 830 003e DAB2     		uxtb	r2, r3
 831 0040 FB68     		ldr	r3, [r7, #12]
 832 0042 83F82820 		strb	r2, [r3, #40]
 833 0046 08E0     		b	.L47
 834              	.L46:
 452:./Libraries/FreeRTOS/Source/timers.c **** 		}
 453:./Libraries/FreeRTOS/Source/timers.c **** 		else
 454:./Libraries/FreeRTOS/Source/timers.c **** 		{
 455:./Libraries/FreeRTOS/Source/timers.c **** 			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 835              		.loc 1 455 22
ARM GAS  /tmp/cc6IR6gN.s 			page 27


 836 0048 FB68     		ldr	r3, [r7, #12]
 837 004a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 838 004e 23F00403 		bic	r3, r3, #4
 839 0052 DAB2     		uxtb	r2, r3
 840 0054 FB68     		ldr	r3, [r7, #12]
 841 0056 83F82820 		strb	r2, [r3, #40]
 842              	.L47:
 456:./Libraries/FreeRTOS/Source/timers.c **** 		}
 457:./Libraries/FreeRTOS/Source/timers.c **** 	}
 458:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 843              		.loc 1 458 2
 844 005a FFF7FEFF 		bl	vPortExitCritical
 459:./Libraries/FreeRTOS/Source/timers.c **** }
 845              		.loc 1 459 1
 846 005e 00BF     		nop
 847 0060 1037     		adds	r7, r7, #16
 848              	.LCFI40:
 849              		.cfi_def_cfa_offset 8
 850 0062 BD46     		mov	sp, r7
 851              	.LCFI41:
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0064 80BD     		pop	{r7, pc}
 855              		.cfi_endproc
 856              	.LFE11:
 858              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 859              		.align	1
 860              		.global	uxTimerGetReloadMode
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu fpv5-d16
 866              	uxTimerGetReloadMode:
 867              	.LFB12:
 460:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 461:./Libraries/FreeRTOS/Source/timers.c **** 
 462:./Libraries/FreeRTOS/Source/timers.c **** UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 463:./Libraries/FreeRTOS/Source/timers.c **** {
 868              		.loc 1 463 1
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 24
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 80B5     		push	{r7, lr}
 873              	.LCFI42:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 86B0     		sub	sp, sp, #24
 878              	.LCFI43:
 879              		.cfi_def_cfa_offset 32
 880 0004 00AF     		add	r7, sp, #0
 881              	.LCFI44:
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
 464:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * pxTimer =  xTimer;
 884              		.loc 1 464 11
 885 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6IR6gN.s 			page 28


 886 000a 3B61     		str	r3, [r7, #16]
 465:./Libraries/FreeRTOS/Source/timers.c **** UBaseType_t uxReturn;
 466:./Libraries/FreeRTOS/Source/timers.c **** 
 467:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 887              		.loc 1 467 2
 888 000c 7B68     		ldr	r3, [r7, #4]
 889 000e 002B     		cmp	r3, #0
 890 0010 0AD1     		bne	.L49
 891              	.LBB63:
 892              	.LBB64:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 893              		.loc 2 195 2
 894              		.syntax unified
 895              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 896 0012 4FF05003 			mov r3, #80												
 897 0016 83F31188 		msr basepri, r3											
 898 001a BFF36F8F 		isb														
 899 001e BFF34F8F 		dsb														
 900              	
 901              	@ 0 "" 2
 902              		.thumb
 903              		.syntax unified
 904 0022 FB60     		str	r3, [r7, #12]
 905              		.loc 2 203 1
 906 0024 00BF     		nop
 907              	.L50:
 908              	.LBE64:
 909              	.LBE63:
 910              		.loc 1 467 2 discriminator 1
 911 0026 FEE7     		b	.L50
 912              	.L49:
 468:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 913              		.loc 1 468 2
 914 0028 FFF7FEFF 		bl	vPortEnterCritical
 469:./Libraries/FreeRTOS/Source/timers.c **** 	{
 470:./Libraries/FreeRTOS/Source/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 915              		.loc 1 470 16
 916 002c 3B69     		ldr	r3, [r7, #16]
 917 002e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 918              		.loc 1 470 27
 919 0032 03F00403 		and	r3, r3, #4
 920              		.loc 1 470 5
 921 0036 002B     		cmp	r3, #0
 922 0038 02D1     		bne	.L51
 471:./Libraries/FreeRTOS/Source/timers.c **** 		{
 472:./Libraries/FreeRTOS/Source/timers.c **** 			/* Not an auto-reload timer. */
 473:./Libraries/FreeRTOS/Source/timers.c **** 			uxReturn = ( UBaseType_t ) pdFALSE;
 923              		.loc 1 473 13
 924 003a 0023     		movs	r3, #0
 925 003c 7B61     		str	r3, [r7, #20]
 926 003e 01E0     		b	.L52
 927              	.L51:
 474:./Libraries/FreeRTOS/Source/timers.c **** 		}
 475:./Libraries/FreeRTOS/Source/timers.c **** 		else
 476:./Libraries/FreeRTOS/Source/timers.c **** 		{
 477:./Libraries/FreeRTOS/Source/timers.c **** 			/* Is an auto-reload timer. */
 478:./Libraries/FreeRTOS/Source/timers.c **** 			uxReturn = ( UBaseType_t ) pdTRUE;
ARM GAS  /tmp/cc6IR6gN.s 			page 29


 928              		.loc 1 478 13
 929 0040 0123     		movs	r3, #1
 930 0042 7B61     		str	r3, [r7, #20]
 931              	.L52:
 479:./Libraries/FreeRTOS/Source/timers.c **** 		}
 480:./Libraries/FreeRTOS/Source/timers.c **** 	}
 481:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 932              		.loc 1 481 2
 933 0044 FFF7FEFF 		bl	vPortExitCritical
 482:./Libraries/FreeRTOS/Source/timers.c **** 
 483:./Libraries/FreeRTOS/Source/timers.c **** 	return uxReturn;
 934              		.loc 1 483 9
 935 0048 7B69     		ldr	r3, [r7, #20]
 484:./Libraries/FreeRTOS/Source/timers.c **** }
 936              		.loc 1 484 1
 937 004a 1846     		mov	r0, r3
 938 004c 1837     		adds	r7, r7, #24
 939              	.LCFI45:
 940              		.cfi_def_cfa_offset 8
 941 004e BD46     		mov	sp, r7
 942              	.LCFI46:
 943              		.cfi_def_cfa_register 13
 944              		@ sp needed
 945 0050 80BD     		pop	{r7, pc}
 946              		.cfi_endproc
 947              	.LFE12:
 949              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 950              		.align	1
 951              		.global	xTimerGetExpiryTime
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 955              		.fpu fpv5-d16
 957              	xTimerGetExpiryTime:
 958              	.LFB13:
 485:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 486:./Libraries/FreeRTOS/Source/timers.c **** 
 487:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 488:./Libraries/FreeRTOS/Source/timers.c **** {
 959              		.loc 1 488 1
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 24
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963              		@ link register save eliminated.
 964 0000 80B4     		push	{r7}
 965              	.LCFI47:
 966              		.cfi_def_cfa_offset 4
 967              		.cfi_offset 7, -4
 968 0002 87B0     		sub	sp, sp, #28
 969              	.LCFI48:
 970              		.cfi_def_cfa_offset 32
 971 0004 00AF     		add	r7, sp, #0
 972              	.LCFI49:
 973              		.cfi_def_cfa_register 7
 974 0006 7860     		str	r0, [r7, #4]
 489:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * pxTimer =  xTimer;
 975              		.loc 1 489 11
ARM GAS  /tmp/cc6IR6gN.s 			page 30


 976 0008 7B68     		ldr	r3, [r7, #4]
 977 000a 7B61     		str	r3, [r7, #20]
 490:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xReturn;
 491:./Libraries/FreeRTOS/Source/timers.c **** 
 492:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 978              		.loc 1 492 2
 979 000c 7B68     		ldr	r3, [r7, #4]
 980 000e 002B     		cmp	r3, #0
 981 0010 0AD1     		bne	.L55
 982              	.LBB65:
 983              	.LBB66:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 984              		.loc 2 195 2
 985              		.syntax unified
 986              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 987 0012 4FF05003 			mov r3, #80												
 988 0016 83F31188 		msr basepri, r3											
 989 001a BFF36F8F 		isb														
 990 001e BFF34F8F 		dsb														
 991              	
 992              	@ 0 "" 2
 993              		.thumb
 994              		.syntax unified
 995 0022 FB60     		str	r3, [r7, #12]
 996              		.loc 2 203 1
 997 0024 00BF     		nop
 998              	.L56:
 999              	.LBE66:
 1000              	.LBE65:
 1001              		.loc 1 492 2 discriminator 1
 1002 0026 FEE7     		b	.L56
 1003              	.L55:
 493:./Libraries/FreeRTOS/Source/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1004              		.loc 1 493 10
 1005 0028 7B69     		ldr	r3, [r7, #20]
 1006 002a 5B68     		ldr	r3, [r3, #4]
 1007 002c 3B61     		str	r3, [r7, #16]
 494:./Libraries/FreeRTOS/Source/timers.c **** 	return xReturn;
 1008              		.loc 1 494 9
 1009 002e 3B69     		ldr	r3, [r7, #16]
 495:./Libraries/FreeRTOS/Source/timers.c **** }
 1010              		.loc 1 495 1
 1011 0030 1846     		mov	r0, r3
 1012 0032 1C37     		adds	r7, r7, #28
 1013              	.LCFI50:
 1014              		.cfi_def_cfa_offset 4
 1015 0034 BD46     		mov	sp, r7
 1016              	.LCFI51:
 1017              		.cfi_def_cfa_register 13
 1018              		@ sp needed
 1019 0036 5DF8047B 		ldr	r7, [sp], #4
 1020              	.LCFI52:
 1021              		.cfi_restore 7
 1022              		.cfi_def_cfa_offset 0
 1023 003a 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE13:
ARM GAS  /tmp/cc6IR6gN.s 			page 31


 1027              		.section	.text.pcTimerGetName,"ax",%progbits
 1028              		.align	1
 1029              		.global	pcTimerGetName
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv5-d16
 1035              	pcTimerGetName:
 1036              	.LFB14:
 496:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 497:./Libraries/FreeRTOS/Source/timers.c **** 
 498:./Libraries/FreeRTOS/Source/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 499:./Libraries/FreeRTOS/Source/timers.c **** {
 1037              		.loc 1 499 1
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 16
 1040              		@ frame_needed = 1, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042 0000 80B4     		push	{r7}
 1043              	.LCFI53:
 1044              		.cfi_def_cfa_offset 4
 1045              		.cfi_offset 7, -4
 1046 0002 85B0     		sub	sp, sp, #20
 1047              	.LCFI54:
 1048              		.cfi_def_cfa_offset 24
 1049 0004 00AF     		add	r7, sp, #0
 1050              	.LCFI55:
 1051              		.cfi_def_cfa_register 7
 1052 0006 7860     		str	r0, [r7, #4]
 500:./Libraries/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = xTimer;
 1053              		.loc 1 500 10
 1054 0008 7B68     		ldr	r3, [r7, #4]
 1055 000a FB60     		str	r3, [r7, #12]
 501:./Libraries/FreeRTOS/Source/timers.c **** 
 502:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 1056              		.loc 1 502 2
 1057 000c 7B68     		ldr	r3, [r7, #4]
 1058 000e 002B     		cmp	r3, #0
 1059 0010 0AD1     		bne	.L59
 1060              	.LBB67:
 1061              	.LBB68:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1062              		.loc 2 195 2
 1063              		.syntax unified
 1064              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1065 0012 4FF05003 			mov r3, #80												
 1066 0016 83F31188 		msr basepri, r3											
 1067 001a BFF36F8F 		isb														
 1068 001e BFF34F8F 		dsb														
 1069              	
 1070              	@ 0 "" 2
 1071              		.thumb
 1072              		.syntax unified
 1073 0022 BB60     		str	r3, [r7, #8]
 1074              		.loc 2 203 1
 1075 0024 00BF     		nop
 1076              	.L60:
ARM GAS  /tmp/cc6IR6gN.s 			page 32


 1077              	.LBE68:
 1078              	.LBE67:
 1079              		.loc 1 502 2 discriminator 1
 1080 0026 FEE7     		b	.L60
 1081              	.L59:
 503:./Libraries/FreeRTOS/Source/timers.c **** 	return pxTimer->pcTimerName;
 1082              		.loc 1 503 16
 1083 0028 FB68     		ldr	r3, [r7, #12]
 1084 002a 1B68     		ldr	r3, [r3]
 504:./Libraries/FreeRTOS/Source/timers.c **** }
 1085              		.loc 1 504 1
 1086 002c 1846     		mov	r0, r3
 1087 002e 1437     		adds	r7, r7, #20
 1088              	.LCFI56:
 1089              		.cfi_def_cfa_offset 4
 1090 0030 BD46     		mov	sp, r7
 1091              	.LCFI57:
 1092              		.cfi_def_cfa_register 13
 1093              		@ sp needed
 1094 0032 5DF8047B 		ldr	r7, [sp], #4
 1095              	.LCFI58:
 1096              		.cfi_restore 7
 1097              		.cfi_def_cfa_offset 0
 1098 0036 7047     		bx	lr
 1099              		.cfi_endproc
 1100              	.LFE14:
 1102              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 1103              		.align	1
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv5-d16
 1109              	prvProcessExpiredTimer:
 1110              	.LFB15:
 505:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 506:./Libraries/FreeRTOS/Source/timers.c **** 
 507:./Libraries/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 508:./Libraries/FreeRTOS/Source/timers.c **** {
 1111              		.loc 1 508 1
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 24
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 80B5     		push	{r7, lr}
 1116              	.LCFI59:
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 7, -8
 1119              		.cfi_offset 14, -4
 1120 0002 88B0     		sub	sp, sp, #32
 1121              	.LCFI60:
 1122              		.cfi_def_cfa_offset 40
 1123 0004 02AF     		add	r7, sp, #8
 1124              	.LCFI61:
 1125              		.cfi_def_cfa 7, 32
 1126 0006 7860     		str	r0, [r7, #4]
 1127 0008 3960     		str	r1, [r7]
 509:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 510:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
ARM GAS  /tmp/cc6IR6gN.s 			page 33


 1128              		.loc 1 510 41
 1129 000a 224B     		ldr	r3, .L66
 1130 000c 1B68     		ldr	r3, [r3]
 1131 000e DB68     		ldr	r3, [r3, #12]
 1132              		.loc 1 510 17
 1133 0010 DB68     		ldr	r3, [r3, #12]
 1134 0012 7B61     		str	r3, [r7, #20]
 511:./Libraries/FreeRTOS/Source/timers.c **** 
 512:./Libraries/FreeRTOS/Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 513:./Libraries/FreeRTOS/Source/timers.c **** 	been performed to ensure the list is not empty. */
 514:./Libraries/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1135              		.loc 1 514 11
 1136 0014 7B69     		ldr	r3, [r7, #20]
 1137 0016 0433     		adds	r3, r3, #4
 1138 0018 1846     		mov	r0, r3
 1139 001a FFF7FEFF 		bl	uxListRemove
 515:./Libraries/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 516:./Libraries/FreeRTOS/Source/timers.c **** 
 517:./Libraries/FreeRTOS/Source/timers.c **** 	/* If the timer is an auto-reload timer then calculate the next
 518:./Libraries/FreeRTOS/Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 519:./Libraries/FreeRTOS/Source/timers.c **** 	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1140              		.loc 1 519 15
 1141 001e 7B69     		ldr	r3, [r7, #20]
 1142 0020 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1143              		.loc 1 519 26
 1144 0024 03F00403 		and	r3, r3, #4
 1145              		.loc 1 519 4
 1146 0028 002B     		cmp	r3, #0
 1147 002a 22D0     		beq	.L63
 520:./Libraries/FreeRTOS/Source/timers.c **** 	{
 521:./Libraries/FreeRTOS/Source/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 522:./Libraries/FreeRTOS/Source/timers.c **** 		other than the current time.  It will therefore be inserted into the
 523:./Libraries/FreeRTOS/Source/timers.c **** 		correct list relative to the time this task thinks it is now. */
 524:./Libraries/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 1148              		.loc 1 524 71
 1149 002c 7B69     		ldr	r3, [r7, #20]
 1150 002e 9A69     		ldr	r2, [r3, #24]
 1151              		.loc 1 524 7
 1152 0030 7B68     		ldr	r3, [r7, #4]
 1153 0032 D118     		adds	r1, r2, r3
 1154 0034 7B68     		ldr	r3, [r7, #4]
 1155 0036 3A68     		ldr	r2, [r7]
 1156 0038 7869     		ldr	r0, [r7, #20]
 1157 003a FFF7FEFF 		bl	prvInsertTimerInActiveList
 1158 003e 0346     		mov	r3, r0
 1159              		.loc 1 524 5
 1160 0040 002B     		cmp	r3, #0
 1161 0042 1FD0     		beq	.L64
 525:./Libraries/FreeRTOS/Source/timers.c **** 		{
 526:./Libraries/FreeRTOS/Source/timers.c **** 			/* The timer expired before it was added to the active timer
 527:./Libraries/FreeRTOS/Source/timers.c **** 			list.  Reload it now.  */
 528:./Libraries/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 1162              		.loc 1 528 14
 1163 0044 0023     		movs	r3, #0
 1164 0046 0093     		str	r3, [sp]
 1165 0048 0023     		movs	r3, #0
 1166 004a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cc6IR6gN.s 			page 34


 1167 004c 0021     		movs	r1, #0
 1168 004e 7869     		ldr	r0, [r7, #20]
 1169 0050 FFF7FEFF 		bl	xTimerGenericCommand
 1170 0054 3861     		str	r0, [r7, #16]
 529:./Libraries/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 1171              		.loc 1 529 4
 1172 0056 3B69     		ldr	r3, [r7, #16]
 1173 0058 002B     		cmp	r3, #0
 1174 005a 13D1     		bne	.L64
 1175              	.LBB69:
 1176              	.LBB70:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1177              		.loc 2 195 2
 1178              		.syntax unified
 1179              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1180 005c 4FF05003 			mov r3, #80												
 1181 0060 83F31188 		msr basepri, r3											
 1182 0064 BFF36F8F 		isb														
 1183 0068 BFF34F8F 		dsb														
 1184              	
 1185              	@ 0 "" 2
 1186              		.thumb
 1187              		.syntax unified
 1188 006c FB60     		str	r3, [r7, #12]
 1189              		.loc 2 203 1
 1190 006e 00BF     		nop
 1191              	.L65:
 1192              	.LBE70:
 1193              	.LBE69:
 1194              		.loc 1 529 4 discriminator 1
 1195 0070 FEE7     		b	.L65
 1196              	.L63:
 530:./Libraries/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 531:./Libraries/FreeRTOS/Source/timers.c **** 		}
 532:./Libraries/FreeRTOS/Source/timers.c **** 		else
 533:./Libraries/FreeRTOS/Source/timers.c **** 		{
 534:./Libraries/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 535:./Libraries/FreeRTOS/Source/timers.c **** 		}
 536:./Libraries/FreeRTOS/Source/timers.c **** 	}
 537:./Libraries/FreeRTOS/Source/timers.c **** 	else
 538:./Libraries/FreeRTOS/Source/timers.c **** 	{
 539:./Libraries/FreeRTOS/Source/timers.c **** 		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1197              		.loc 1 539 21
 1198 0072 7B69     		ldr	r3, [r7, #20]
 1199 0074 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1200 0078 23F00103 		bic	r3, r3, #1
 1201 007c DAB2     		uxtb	r2, r3
 1202 007e 7B69     		ldr	r3, [r7, #20]
 1203 0080 83F82820 		strb	r2, [r3, #40]
 1204              	.L64:
 540:./Libraries/FreeRTOS/Source/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 541:./Libraries/FreeRTOS/Source/timers.c **** 	}
 542:./Libraries/FreeRTOS/Source/timers.c **** 
 543:./Libraries/FreeRTOS/Source/timers.c **** 	/* Call the timer callback. */
 544:./Libraries/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1205              		.loc 1 544 9
 1206 0084 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc6IR6gN.s 			page 35


 1207 0086 1B6A     		ldr	r3, [r3, #32]
 1208              		.loc 1 544 2
 1209 0088 7869     		ldr	r0, [r7, #20]
 1210 008a 9847     		blx	r3
 1211              	.LVL0:
 545:./Libraries/FreeRTOS/Source/timers.c **** }
 1212              		.loc 1 545 1
 1213 008c 00BF     		nop
 1214 008e 1837     		adds	r7, r7, #24
 1215              	.LCFI62:
 1216              		.cfi_def_cfa_offset 8
 1217 0090 BD46     		mov	sp, r7
 1218              	.LCFI63:
 1219              		.cfi_def_cfa_register 13
 1220              		@ sp needed
 1221 0092 80BD     		pop	{r7, pc}
 1222              	.L67:
 1223              		.align	2
 1224              	.L66:
 1225 0094 00000000 		.word	pxCurrentTimerList
 1226              		.cfi_endproc
 1227              	.LFE15:
 1229              		.section	.text.prvTimerTask,"ax",%progbits
 1230              		.align	1
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv5-d16
 1236              	prvTimerTask:
 1237              	.LFB16:
 546:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 547:./Libraries/FreeRTOS/Source/timers.c **** 
 548:./Libraries/FreeRTOS/Source/timers.c **** static portTASK_FUNCTION( prvTimerTask, pvParameters )
 549:./Libraries/FreeRTOS/Source/timers.c **** {
 1238              		.loc 1 549 1
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 16
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242 0000 80B5     		push	{r7, lr}
 1243              	.LCFI64:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 7, -8
 1246              		.cfi_offset 14, -4
 1247 0002 84B0     		sub	sp, sp, #16
 1248              	.LCFI65:
 1249              		.cfi_def_cfa_offset 24
 1250 0004 00AF     		add	r7, sp, #0
 1251              	.LCFI66:
 1252              		.cfi_def_cfa_register 7
 1253 0006 7860     		str	r0, [r7, #4]
 1254              	.L69:
 550:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 551:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xListWasEmpty;
 552:./Libraries/FreeRTOS/Source/timers.c **** 
 553:./Libraries/FreeRTOS/Source/timers.c **** 	/* Just to avoid compiler warnings. */
 554:./Libraries/FreeRTOS/Source/timers.c **** 	( void ) pvParameters;
 555:./Libraries/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6IR6gN.s 			page 36


 556:./Libraries/FreeRTOS/Source/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 557:./Libraries/FreeRTOS/Source/timers.c **** 	{
 558:./Libraries/FreeRTOS/Source/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 559:./Libraries/FreeRTOS/Source/timers.c **** 
 560:./Libraries/FreeRTOS/Source/timers.c **** 		/* Allow the application writer to execute some code in the context of
 561:./Libraries/FreeRTOS/Source/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 562:./Libraries/FreeRTOS/Source/timers.c **** 		application includes initialisation code that would benefit from
 563:./Libraries/FreeRTOS/Source/timers.c **** 		executing after the scheduler has been started. */
 564:./Libraries/FreeRTOS/Source/timers.c **** 		vApplicationDaemonTaskStartupHook();
 565:./Libraries/FreeRTOS/Source/timers.c **** 	}
 566:./Libraries/FreeRTOS/Source/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 567:./Libraries/FreeRTOS/Source/timers.c **** 
 568:./Libraries/FreeRTOS/Source/timers.c **** 	for( ;; )
 569:./Libraries/FreeRTOS/Source/timers.c **** 	{
 570:./Libraries/FreeRTOS/Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 571:./Libraries/FreeRTOS/Source/timers.c **** 		obtain the time at which the next timer will expire. */
 572:./Libraries/FreeRTOS/Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1255              		.loc 1 572 21 discriminator 1
 1256 0008 07F10803 		add	r3, r7, #8
 1257 000c 1846     		mov	r0, r3
 1258 000e FFF7FEFF 		bl	prvGetNextExpireTime
 1259 0012 F860     		str	r0, [r7, #12]
 573:./Libraries/FreeRTOS/Source/timers.c **** 
 574:./Libraries/FreeRTOS/Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 575:./Libraries/FreeRTOS/Source/timers.c **** 		until either a timer does expire, or a command is received. */
 576:./Libraries/FreeRTOS/Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1260              		.loc 1 576 3 discriminator 1
 1261 0014 BB68     		ldr	r3, [r7, #8]
 1262 0016 1946     		mov	r1, r3
 1263 0018 F868     		ldr	r0, [r7, #12]
 1264 001a FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 577:./Libraries/FreeRTOS/Source/timers.c **** 
 578:./Libraries/FreeRTOS/Source/timers.c **** 		/* Empty the command queue. */
 579:./Libraries/FreeRTOS/Source/timers.c **** 		prvProcessReceivedCommands();
 1265              		.loc 1 579 3 discriminator 1
 1266 001e FFF7FEFF 		bl	prvProcessReceivedCommands
 572:./Libraries/FreeRTOS/Source/timers.c **** 
 1267              		.loc 1 572 19 discriminator 1
 1268 0022 F1E7     		b	.L69
 1269              		.cfi_endproc
 1270              	.LFE16:
 1272              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 1273              		.align	1
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv5-d16
 1279              	prvProcessTimerOrBlockTask:
 1280              	.LFB17:
 580:./Libraries/FreeRTOS/Source/timers.c **** 	}
 581:./Libraries/FreeRTOS/Source/timers.c **** }
 582:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 583:./Libraries/FreeRTOS/Source/timers.c **** 
 584:./Libraries/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 585:./Libraries/FreeRTOS/Source/timers.c **** {
 1281              		.loc 1 585 1
 1282              		.cfi_startproc
ARM GAS  /tmp/cc6IR6gN.s 			page 37


 1283              		@ args = 0, pretend = 0, frame = 16
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              	.LCFI67:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
 1290 0002 84B0     		sub	sp, sp, #16
 1291              	.LCFI68:
 1292              		.cfi_def_cfa_offset 24
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI69:
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 1297 0008 3960     		str	r1, [r7]
 586:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 587:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched;
 588:./Libraries/FreeRTOS/Source/timers.c **** 
 589:./Libraries/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 1298              		.loc 1 589 2
 1299 000a FFF7FEFF 		bl	vTaskSuspendAll
 590:./Libraries/FreeRTOS/Source/timers.c **** 	{
 591:./Libraries/FreeRTOS/Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 592:./Libraries/FreeRTOS/Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 593:./Libraries/FreeRTOS/Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 594:./Libraries/FreeRTOS/Source/timers.c **** 		when the lists were switched will have been processed within the
 595:./Libraries/FreeRTOS/Source/timers.c **** 		prvSampleTimeNow() function. */
 596:./Libraries/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1300              		.loc 1 596 14
 1301 000e 07F10803 		add	r3, r7, #8
 1302 0012 1846     		mov	r0, r3
 1303 0014 FFF7FEFF 		bl	prvSampleTimeNow
 1304 0018 F860     		str	r0, [r7, #12]
 597:./Libraries/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 1305              		.loc 1 597 31
 1306 001a BB68     		ldr	r3, [r7, #8]
 1307              		.loc 1 597 5
 1308 001c 002B     		cmp	r3, #0
 1309 001e 30D1     		bne	.L71
 598:./Libraries/FreeRTOS/Source/timers.c **** 		{
 599:./Libraries/FreeRTOS/Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 600:./Libraries/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1310              		.loc 1 600 6
 1311 0020 3B68     		ldr	r3, [r7]
 1312 0022 002B     		cmp	r3, #0
 1313 0024 0AD1     		bne	.L72
 1314              		.loc 1 600 37 discriminator 1
 1315 0026 7A68     		ldr	r2, [r7, #4]
 1316 0028 FB68     		ldr	r3, [r7, #12]
 1317 002a 9A42     		cmp	r2, r3
 1318 002c 06D8     		bhi	.L72
 601:./Libraries/FreeRTOS/Source/timers.c **** 			{
 602:./Libraries/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 1319              		.loc 1 602 14
 1320 002e FFF7FEFF 		bl	xTaskResumeAll
 603:./Libraries/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1321              		.loc 1 603 5
ARM GAS  /tmp/cc6IR6gN.s 			page 38


 1322 0032 F968     		ldr	r1, [r7, #12]
 1323 0034 7868     		ldr	r0, [r7, #4]
 1324 0036 FFF7FEFF 		bl	prvProcessExpiredTimer
 604:./Libraries/FreeRTOS/Source/timers.c **** 			}
 605:./Libraries/FreeRTOS/Source/timers.c **** 			else
 606:./Libraries/FreeRTOS/Source/timers.c **** 			{
 607:./Libraries/FreeRTOS/Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 608:./Libraries/FreeRTOS/Source/timers.c **** 				time has not been reached yet.  This task should therefore
 609:./Libraries/FreeRTOS/Source/timers.c **** 				block to wait for the next expire time or a command to be
 610:./Libraries/FreeRTOS/Source/timers.c **** 				received - whichever comes first.  The following line cannot
 611:./Libraries/FreeRTOS/Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 612:./Libraries/FreeRTOS/Source/timers.c **** 				case when the current timer list is empty. */
 613:./Libraries/FreeRTOS/Source/timers.c **** 				if( xListWasEmpty != pdFALSE )
 614:./Libraries/FreeRTOS/Source/timers.c **** 				{
 615:./Libraries/FreeRTOS/Source/timers.c **** 					/* The current timer list is empty - is the overflow list
 616:./Libraries/FreeRTOS/Source/timers.c **** 					also empty? */
 617:./Libraries/FreeRTOS/Source/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 618:./Libraries/FreeRTOS/Source/timers.c **** 				}
 619:./Libraries/FreeRTOS/Source/timers.c **** 
 620:./Libraries/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 621:./Libraries/FreeRTOS/Source/timers.c **** 
 622:./Libraries/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 623:./Libraries/FreeRTOS/Source/timers.c **** 				{
 624:./Libraries/FreeRTOS/Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 625:./Libraries/FreeRTOS/Source/timers.c **** 					block time to expire.  If a command arrived between the
 626:./Libraries/FreeRTOS/Source/timers.c **** 					critical section being exited and this yield then the yield
 627:./Libraries/FreeRTOS/Source/timers.c **** 					will not cause the task to block. */
 628:./Libraries/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 629:./Libraries/FreeRTOS/Source/timers.c **** 				}
 630:./Libraries/FreeRTOS/Source/timers.c **** 				else
 631:./Libraries/FreeRTOS/Source/timers.c **** 				{
 632:./Libraries/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 633:./Libraries/FreeRTOS/Source/timers.c **** 				}
 634:./Libraries/FreeRTOS/Source/timers.c **** 			}
 635:./Libraries/FreeRTOS/Source/timers.c **** 		}
 636:./Libraries/FreeRTOS/Source/timers.c **** 		else
 637:./Libraries/FreeRTOS/Source/timers.c **** 		{
 638:./Libraries/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 639:./Libraries/FreeRTOS/Source/timers.c **** 		}
 640:./Libraries/FreeRTOS/Source/timers.c **** 	}
 641:./Libraries/FreeRTOS/Source/timers.c **** }
 1325              		.loc 1 641 1
 1326 003a 24E0     		b	.L78
 1327              	.L72:
 613:./Libraries/FreeRTOS/Source/timers.c **** 				{
 1328              		.loc 1 613 7
 1329 003c 3B68     		ldr	r3, [r7]
 1330 003e 002B     		cmp	r3, #0
 1331 0040 08D0     		beq	.L74
 617:./Libraries/FreeRTOS/Source/timers.c **** 				}
 1332              		.loc 1 617 22
 1333 0042 134B     		ldr	r3, .L79
 1334 0044 1B68     		ldr	r3, [r3]
 1335 0046 1B68     		ldr	r3, [r3]
 1336 0048 002B     		cmp	r3, #0
 1337 004a 01D1     		bne	.L75
 617:./Libraries/FreeRTOS/Source/timers.c **** 				}
ARM GAS  /tmp/cc6IR6gN.s 			page 39


 1338              		.loc 1 617 22 is_stmt 0 discriminator 1
 1339 004c 0123     		movs	r3, #1
 1340 004e 00E0     		b	.L76
 1341              	.L75:
 617:./Libraries/FreeRTOS/Source/timers.c **** 				}
 1342              		.loc 1 617 22 discriminator 2
 1343 0050 0023     		movs	r3, #0
 1344              	.L76:
 617:./Libraries/FreeRTOS/Source/timers.c **** 				}
 1345              		.loc 1 617 20 is_stmt 1 discriminator 4
 1346 0052 3B60     		str	r3, [r7]
 1347              	.L74:
 620:./Libraries/FreeRTOS/Source/timers.c **** 
 1348              		.loc 1 620 5
 1349 0054 0F4B     		ldr	r3, .L79+4
 1350 0056 1868     		ldr	r0, [r3]
 1351 0058 7A68     		ldr	r2, [r7, #4]
 1352 005a FB68     		ldr	r3, [r7, #12]
 1353 005c D31A     		subs	r3, r2, r3
 1354 005e 3A68     		ldr	r2, [r7]
 1355 0060 1946     		mov	r1, r3
 1356 0062 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 622:./Libraries/FreeRTOS/Source/timers.c **** 				{
 1357              		.loc 1 622 9
 1358 0066 FFF7FEFF 		bl	xTaskResumeAll
 1359 006a 0346     		mov	r3, r0
 622:./Libraries/FreeRTOS/Source/timers.c **** 				{
 1360              		.loc 1 622 7
 1361 006c 002B     		cmp	r3, #0
 1362 006e 0AD1     		bne	.L78
 628:./Libraries/FreeRTOS/Source/timers.c **** 				}
 1363              		.loc 1 628 6
 1364 0070 094B     		ldr	r3, .L79+8
 1365 0072 4FF08052 		mov	r2, #268435456
 1366 0076 1A60     		str	r2, [r3]
 1367              		.syntax unified
 1368              	@ 628 "./Libraries/FreeRTOS/Source/timers.c" 1
 1369 0078 BFF34F8F 		dsb
 1370              	@ 0 "" 2
 1371              	@ 628 "./Libraries/FreeRTOS/Source/timers.c" 1
 1372 007c BFF36F8F 		isb
 1373              	@ 0 "" 2
 1374              		.loc 1 641 1
 1375              		.thumb
 1376              		.syntax unified
 1377 0080 01E0     		b	.L78
 1378              	.L71:
 638:./Libraries/FreeRTOS/Source/timers.c **** 		}
 1379              		.loc 1 638 13
 1380 0082 FFF7FEFF 		bl	xTaskResumeAll
 1381              	.L78:
 1382              		.loc 1 641 1
 1383 0086 00BF     		nop
 1384 0088 1037     		adds	r7, r7, #16
 1385              	.LCFI70:
 1386              		.cfi_def_cfa_offset 8
 1387 008a BD46     		mov	sp, r7
ARM GAS  /tmp/cc6IR6gN.s 			page 40


 1388              	.LCFI71:
 1389              		.cfi_def_cfa_register 13
 1390              		@ sp needed
 1391 008c 80BD     		pop	{r7, pc}
 1392              	.L80:
 1393 008e 00BF     		.align	2
 1394              	.L79:
 1395 0090 00000000 		.word	pxOverflowTimerList
 1396 0094 00000000 		.word	xTimerQueue
 1397 0098 04ED00E0 		.word	-536810236
 1398              		.cfi_endproc
 1399              	.LFE17:
 1401              		.section	.text.prvGetNextExpireTime,"ax",%progbits
 1402              		.align	1
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv5-d16
 1408              	prvGetNextExpireTime:
 1409              	.LFB18:
 642:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 643:./Libraries/FreeRTOS/Source/timers.c **** 
 644:./Libraries/FreeRTOS/Source/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 645:./Libraries/FreeRTOS/Source/timers.c **** {
 1410              		.loc 1 645 1
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 16
 1413              		@ frame_needed = 1, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415 0000 80B4     		push	{r7}
 1416              	.LCFI72:
 1417              		.cfi_def_cfa_offset 4
 1418              		.cfi_offset 7, -4
 1419 0002 85B0     		sub	sp, sp, #20
 1420              	.LCFI73:
 1421              		.cfi_def_cfa_offset 24
 1422 0004 00AF     		add	r7, sp, #0
 1423              	.LCFI74:
 1424              		.cfi_def_cfa_register 7
 1425 0006 7860     		str	r0, [r7, #4]
 646:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime;
 647:./Libraries/FreeRTOS/Source/timers.c **** 
 648:./Libraries/FreeRTOS/Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 649:./Libraries/FreeRTOS/Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 650:./Libraries/FreeRTOS/Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 651:./Libraries/FreeRTOS/Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 652:./Libraries/FreeRTOS/Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 653:./Libraries/FreeRTOS/Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 654:./Libraries/FreeRTOS/Source/timers.c **** 	re-assessed.  */
 655:./Libraries/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1426              		.loc 1 655 20
 1427 0008 0E4B     		ldr	r3, .L87
 1428 000a 1B68     		ldr	r3, [r3]
 1429 000c 1B68     		ldr	r3, [r3]
 1430 000e 002B     		cmp	r3, #0
 1431 0010 01D1     		bne	.L82
 1432              		.loc 1 655 20 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc6IR6gN.s 			page 41


 1433 0012 0122     		movs	r2, #1
 1434 0014 00E0     		b	.L83
 1435              	.L82:
 1436              		.loc 1 655 20 discriminator 2
 1437 0016 0022     		movs	r2, #0
 1438              	.L83:
 1439              		.loc 1 655 18 is_stmt 1 discriminator 4
 1440 0018 7B68     		ldr	r3, [r7, #4]
 1441 001a 1A60     		str	r2, [r3]
 656:./Libraries/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 1442              		.loc 1 656 6 discriminator 4
 1443 001c 7B68     		ldr	r3, [r7, #4]
 1444 001e 1B68     		ldr	r3, [r3]
 1445              		.loc 1 656 4 discriminator 4
 1446 0020 002B     		cmp	r3, #0
 1447 0022 05D1     		bne	.L84
 657:./Libraries/FreeRTOS/Source/timers.c **** 	{
 658:./Libraries/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1448              		.loc 1 658 21
 1449 0024 074B     		ldr	r3, .L87
 1450 0026 1B68     		ldr	r3, [r3]
 1451 0028 DB68     		ldr	r3, [r3, #12]
 1452              		.loc 1 658 19
 1453 002a 1B68     		ldr	r3, [r3]
 1454 002c FB60     		str	r3, [r7, #12]
 1455 002e 01E0     		b	.L85
 1456              	.L84:
 659:./Libraries/FreeRTOS/Source/timers.c **** 	}
 660:./Libraries/FreeRTOS/Source/timers.c **** 	else
 661:./Libraries/FreeRTOS/Source/timers.c **** 	{
 662:./Libraries/FreeRTOS/Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 663:./Libraries/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 1457              		.loc 1 663 19
 1458 0030 0023     		movs	r3, #0
 1459 0032 FB60     		str	r3, [r7, #12]
 1460              	.L85:
 664:./Libraries/FreeRTOS/Source/timers.c **** 	}
 665:./Libraries/FreeRTOS/Source/timers.c **** 
 666:./Libraries/FreeRTOS/Source/timers.c **** 	return xNextExpireTime;
 1461              		.loc 1 666 9
 1462 0034 FB68     		ldr	r3, [r7, #12]
 667:./Libraries/FreeRTOS/Source/timers.c **** }
 1463              		.loc 1 667 1
 1464 0036 1846     		mov	r0, r3
 1465 0038 1437     		adds	r7, r7, #20
 1466              	.LCFI75:
 1467              		.cfi_def_cfa_offset 4
 1468 003a BD46     		mov	sp, r7
 1469              	.LCFI76:
 1470              		.cfi_def_cfa_register 13
 1471              		@ sp needed
 1472 003c 5DF8047B 		ldr	r7, [sp], #4
 1473              	.LCFI77:
 1474              		.cfi_restore 7
 1475              		.cfi_def_cfa_offset 0
 1476 0040 7047     		bx	lr
 1477              	.L88:
ARM GAS  /tmp/cc6IR6gN.s 			page 42


 1478 0042 00BF     		.align	2
 1479              	.L87:
 1480 0044 00000000 		.word	pxCurrentTimerList
 1481              		.cfi_endproc
 1482              	.LFE18:
 1484              		.section	.text.prvSampleTimeNow,"ax",%progbits
 1485              		.align	1
 1486              		.syntax unified
 1487              		.thumb
 1488              		.thumb_func
 1489              		.fpu fpv5-d16
 1491              	prvSampleTimeNow:
 1492              	.LFB19:
 668:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 669:./Libraries/FreeRTOS/Source/timers.c **** 
 670:./Libraries/FreeRTOS/Source/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 671:./Libraries/FreeRTOS/Source/timers.c **** {
 1493              		.loc 1 671 1
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 16
 1496              		@ frame_needed = 1, uses_anonymous_args = 0
 1497 0000 80B5     		push	{r7, lr}
 1498              	.LCFI78:
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 84B0     		sub	sp, sp, #16
 1503              	.LCFI79:
 1504              		.cfi_def_cfa_offset 24
 1505 0004 00AF     		add	r7, sp, #0
 1506              	.LCFI80:
 1507              		.cfi_def_cfa_register 7
 1508 0006 7860     		str	r0, [r7, #4]
 672:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 673:./Libraries/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 674:./Libraries/FreeRTOS/Source/timers.c **** 
 675:./Libraries/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 1509              		.loc 1 675 13
 1510 0008 FFF7FEFF 		bl	xTaskGetTickCount
 1511 000c F860     		str	r0, [r7, #12]
 676:./Libraries/FreeRTOS/Source/timers.c **** 
 677:./Libraries/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 1512              		.loc 1 677 15
 1513 000e 0B4B     		ldr	r3, .L93
 1514 0010 1B68     		ldr	r3, [r3]
 1515              		.loc 1 677 4
 1516 0012 FA68     		ldr	r2, [r7, #12]
 1517 0014 9A42     		cmp	r2, r3
 1518 0016 05D2     		bcs	.L90
 678:./Libraries/FreeRTOS/Source/timers.c **** 	{
 679:./Libraries/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists();
 1519              		.loc 1 679 3
 1520 0018 FFF7FEFF 		bl	prvSwitchTimerLists
 680:./Libraries/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 1521              		.loc 1 680 29
 1522 001c 7B68     		ldr	r3, [r7, #4]
 1523 001e 0122     		movs	r2, #1
ARM GAS  /tmp/cc6IR6gN.s 			page 43


 1524 0020 1A60     		str	r2, [r3]
 1525 0022 02E0     		b	.L91
 1526              	.L90:
 681:./Libraries/FreeRTOS/Source/timers.c **** 	}
 682:./Libraries/FreeRTOS/Source/timers.c **** 	else
 683:./Libraries/FreeRTOS/Source/timers.c **** 	{
 684:./Libraries/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 1527              		.loc 1 684 29
 1528 0024 7B68     		ldr	r3, [r7, #4]
 1529 0026 0022     		movs	r2, #0
 1530 0028 1A60     		str	r2, [r3]
 1531              	.L91:
 685:./Libraries/FreeRTOS/Source/timers.c **** 	}
 686:./Libraries/FreeRTOS/Source/timers.c **** 
 687:./Libraries/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
 1532              		.loc 1 687 12
 1533 002a 044A     		ldr	r2, .L93
 1534 002c FB68     		ldr	r3, [r7, #12]
 1535 002e 1360     		str	r3, [r2]
 688:./Libraries/FreeRTOS/Source/timers.c **** 
 689:./Libraries/FreeRTOS/Source/timers.c **** 	return xTimeNow;
 1536              		.loc 1 689 9
 1537 0030 FB68     		ldr	r3, [r7, #12]
 690:./Libraries/FreeRTOS/Source/timers.c **** }
 1538              		.loc 1 690 1
 1539 0032 1846     		mov	r0, r3
 1540 0034 1037     		adds	r7, r7, #16
 1541              	.LCFI81:
 1542              		.cfi_def_cfa_offset 8
 1543 0036 BD46     		mov	sp, r7
 1544              	.LCFI82:
 1545              		.cfi_def_cfa_register 13
 1546              		@ sp needed
 1547 0038 80BD     		pop	{r7, pc}
 1548              	.L94:
 1549 003a 00BF     		.align	2
 1550              	.L93:
 1551 003c 00000000 		.word	xLastTime.6887
 1552              		.cfi_endproc
 1553              	.LFE19:
 1555              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
 1556              		.align	1
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv5-d16
 1562              	prvInsertTimerInActiveList:
 1563              	.LFB20:
 691:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 692:./Libraries/FreeRTOS/Source/timers.c **** 
 693:./Libraries/FreeRTOS/Source/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 694:./Libraries/FreeRTOS/Source/timers.c **** {
 1564              		.loc 1 694 1
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 24
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cc6IR6gN.s 			page 44


 1569              	.LCFI83:
 1570              		.cfi_def_cfa_offset 8
 1571              		.cfi_offset 7, -8
 1572              		.cfi_offset 14, -4
 1573 0002 86B0     		sub	sp, sp, #24
 1574              	.LCFI84:
 1575              		.cfi_def_cfa_offset 32
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI85:
 1578              		.cfi_def_cfa_register 7
 1579 0006 F860     		str	r0, [r7, #12]
 1580 0008 B960     		str	r1, [r7, #8]
 1581 000a 7A60     		str	r2, [r7, #4]
 1582 000c 3B60     		str	r3, [r7]
 695:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 1583              		.loc 1 695 12
 1584 000e 0023     		movs	r3, #0
 1585 0010 7B61     		str	r3, [r7, #20]
 696:./Libraries/FreeRTOS/Source/timers.c **** 
 697:./Libraries/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1586              		.loc 1 697 2
 1587 0012 FB68     		ldr	r3, [r7, #12]
 1588 0014 BA68     		ldr	r2, [r7, #8]
 1589 0016 5A60     		str	r2, [r3, #4]
 698:./Libraries/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1590              		.loc 1 698 2
 1591 0018 FB68     		ldr	r3, [r7, #12]
 1592 001a FA68     		ldr	r2, [r7, #12]
 1593 001c 1A61     		str	r2, [r3, #16]
 699:./Libraries/FreeRTOS/Source/timers.c **** 
 700:./Libraries/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 1594              		.loc 1 700 4
 1595 001e BA68     		ldr	r2, [r7, #8]
 1596 0020 7B68     		ldr	r3, [r7, #4]
 1597 0022 9A42     		cmp	r2, r3
 1598 0024 12D8     		bhi	.L96
 701:./Libraries/FreeRTOS/Source/timers.c **** 	{
 702:./Libraries/FreeRTOS/Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 703:./Libraries/FreeRTOS/Source/timers.c **** 		timer was issued, and the time the command was processed? */
 704:./Libraries/FreeRTOS/Source/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 1599              		.loc 1 704 9
 1600 0026 7A68     		ldr	r2, [r7, #4]
 1601 0028 3B68     		ldr	r3, [r7]
 1602 002a D21A     		subs	r2, r2, r3
 1603              		.loc 1 704 64
 1604 002c FB68     		ldr	r3, [r7, #12]
 1605 002e 9B69     		ldr	r3, [r3, #24]
 1606              		.loc 1 704 5
 1607 0030 9A42     		cmp	r2, r3
 1608 0032 02D3     		bcc	.L97
 705:./Libraries/FreeRTOS/Source/timers.c **** 		{
 706:./Libraries/FreeRTOS/Source/timers.c **** 			/* The time between a command being issued and the command being
 707:./Libraries/FreeRTOS/Source/timers.c **** 			processed actually exceeds the timers period.  */
 708:./Libraries/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 1609              		.loc 1 708 21
 1610 0034 0123     		movs	r3, #1
 1611 0036 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cc6IR6gN.s 			page 45


 1612 0038 1BE0     		b	.L98
 1613              	.L97:
 709:./Libraries/FreeRTOS/Source/timers.c **** 		}
 710:./Libraries/FreeRTOS/Source/timers.c **** 		else
 711:./Libraries/FreeRTOS/Source/timers.c **** 		{
 712:./Libraries/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1614              		.loc 1 712 4
 1615 003a 104B     		ldr	r3, .L101
 1616 003c 1A68     		ldr	r2, [r3]
 1617 003e FB68     		ldr	r3, [r7, #12]
 1618 0040 0433     		adds	r3, r3, #4
 1619 0042 1946     		mov	r1, r3
 1620 0044 1046     		mov	r0, r2
 1621 0046 FFF7FEFF 		bl	vListInsert
 1622 004a 12E0     		b	.L98
 1623              	.L96:
 713:./Libraries/FreeRTOS/Source/timers.c **** 		}
 714:./Libraries/FreeRTOS/Source/timers.c **** 	}
 715:./Libraries/FreeRTOS/Source/timers.c **** 	else
 716:./Libraries/FreeRTOS/Source/timers.c **** 	{
 717:./Libraries/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1624              		.loc 1 717 5
 1625 004c 7A68     		ldr	r2, [r7, #4]
 1626 004e 3B68     		ldr	r3, [r7]
 1627 0050 9A42     		cmp	r2, r3
 1628 0052 06D2     		bcs	.L99
 1629              		.loc 1 717 35 discriminator 1
 1630 0054 BA68     		ldr	r2, [r7, #8]
 1631 0056 3B68     		ldr	r3, [r7]
 1632 0058 9A42     		cmp	r2, r3
 1633 005a 02D3     		bcc	.L99
 718:./Libraries/FreeRTOS/Source/timers.c **** 		{
 719:./Libraries/FreeRTOS/Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 720:./Libraries/FreeRTOS/Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 721:./Libraries/FreeRTOS/Source/timers.c **** 			its expiry time and should be processed immediately. */
 722:./Libraries/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 1634              		.loc 1 722 21
 1635 005c 0123     		movs	r3, #1
 1636 005e 7B61     		str	r3, [r7, #20]
 1637 0060 07E0     		b	.L98
 1638              	.L99:
 723:./Libraries/FreeRTOS/Source/timers.c **** 		}
 724:./Libraries/FreeRTOS/Source/timers.c **** 		else
 725:./Libraries/FreeRTOS/Source/timers.c **** 		{
 726:./Libraries/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1639              		.loc 1 726 4
 1640 0062 074B     		ldr	r3, .L101+4
 1641 0064 1A68     		ldr	r2, [r3]
 1642 0066 FB68     		ldr	r3, [r7, #12]
 1643 0068 0433     		adds	r3, r3, #4
 1644 006a 1946     		mov	r1, r3
 1645 006c 1046     		mov	r0, r2
 1646 006e FFF7FEFF 		bl	vListInsert
 1647              	.L98:
 727:./Libraries/FreeRTOS/Source/timers.c **** 		}
 728:./Libraries/FreeRTOS/Source/timers.c **** 	}
 729:./Libraries/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6IR6gN.s 			page 46


 730:./Libraries/FreeRTOS/Source/timers.c **** 	return xProcessTimerNow;
 1648              		.loc 1 730 9
 1649 0072 7B69     		ldr	r3, [r7, #20]
 731:./Libraries/FreeRTOS/Source/timers.c **** }
 1650              		.loc 1 731 1
 1651 0074 1846     		mov	r0, r3
 1652 0076 1837     		adds	r7, r7, #24
 1653              	.LCFI86:
 1654              		.cfi_def_cfa_offset 8
 1655 0078 BD46     		mov	sp, r7
 1656              	.LCFI87:
 1657              		.cfi_def_cfa_register 13
 1658              		@ sp needed
 1659 007a 80BD     		pop	{r7, pc}
 1660              	.L102:
 1661              		.align	2
 1662              	.L101:
 1663 007c 00000000 		.word	pxOverflowTimerList
 1664 0080 00000000 		.word	pxCurrentTimerList
 1665              		.cfi_endproc
 1666              	.LFE20:
 1668              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1669              		.align	1
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1673              		.fpu fpv5-d16
 1675              	prvProcessReceivedCommands:
 1676              	.LFB21:
 732:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 733:./Libraries/FreeRTOS/Source/timers.c **** 
 734:./Libraries/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void )
 735:./Libraries/FreeRTOS/Source/timers.c **** {
 1677              		.loc 1 735 1
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 48
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681 0000 80B5     		push	{r7, lr}
 1682              	.LCFI88:
 1683              		.cfi_def_cfa_offset 8
 1684              		.cfi_offset 7, -8
 1685              		.cfi_offset 14, -4
 1686 0002 8EB0     		sub	sp, sp, #56
 1687              	.LCFI89:
 1688              		.cfi_def_cfa_offset 64
 1689 0004 02AF     		add	r7, sp, #8
 1690              	.LCFI90:
 1691              		.cfi_def_cfa 7, 56
 736:./Libraries/FreeRTOS/Source/timers.c **** DaemonTaskMessage_t xMessage;
 737:./Libraries/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 738:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 739:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xTimeNow;
 740:./Libraries/FreeRTOS/Source/timers.c **** 
 741:./Libraries/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 1692              		.loc 1 741 7
 1693 0006 CAE0     		b	.L104
 1694              	.L121:
ARM GAS  /tmp/cc6IR6gN.s 			page 47


 742:./Libraries/FreeRTOS/Source/timers.c **** 	{
 743:./Libraries/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 744:./Libraries/FreeRTOS/Source/timers.c **** 		{
 745:./Libraries/FreeRTOS/Source/timers.c **** 			/* Negative commands are pended function calls rather than timer
 746:./Libraries/FreeRTOS/Source/timers.c **** 			commands. */
 747:./Libraries/FreeRTOS/Source/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1695              		.loc 1 747 16
 1696 0008 7B68     		ldr	r3, [r7, #4]
 1697              		.loc 1 747 6
 1698 000a 002B     		cmp	r3, #0
 1699 000c 18DA     		bge	.L105
 1700              	.LBB71:
 748:./Libraries/FreeRTOS/Source/timers.c **** 			{
 749:./Libraries/FreeRTOS/Source/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 1701              		.loc 1 749 40
 1702 000e 3B1D     		adds	r3, r7, #4
 1703 0010 0433     		adds	r3, r3, #4
 1704 0012 FB62     		str	r3, [r7, #44]
 750:./Libraries/FreeRTOS/Source/timers.c **** 
 751:./Libraries/FreeRTOS/Source/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 752:./Libraries/FreeRTOS/Source/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 753:./Libraries/FreeRTOS/Source/timers.c **** 				configASSERT( pxCallback );
 1705              		.loc 1 753 5
 1706 0014 FB6A     		ldr	r3, [r7, #44]
 1707 0016 002B     		cmp	r3, #0
 1708 0018 0AD1     		bne	.L106
 1709              	.LBB72:
 1710              	.LBB73:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1711              		.loc 2 195 2
 1712              		.syntax unified
 1713              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1714 001a 4FF05003 			mov r3, #80												
 1715 001e 83F31188 		msr basepri, r3											
 1716 0022 BFF36F8F 		isb														
 1717 0026 BFF34F8F 		dsb														
 1718              	
 1719              	@ 0 "" 2
 1720              		.thumb
 1721              		.syntax unified
 1722 002a FB61     		str	r3, [r7, #28]
 1723              		.loc 2 203 1
 1724 002c 00BF     		nop
 1725              	.L107:
 1726              	.LBE73:
 1727              	.LBE72:
 1728              		.loc 1 753 5 discriminator 1
 1729 002e FEE7     		b	.L107
 1730              	.L106:
 754:./Libraries/FreeRTOS/Source/timers.c **** 
 755:./Libraries/FreeRTOS/Source/timers.c **** 				/* Call the function. */
 756:./Libraries/FreeRTOS/Source/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 1731              		.loc 1 756 15
 1732 0030 FB6A     		ldr	r3, [r7, #44]
 1733 0032 1B68     		ldr	r3, [r3]
 1734              		.loc 1 756 5
 1735 0034 FA6A     		ldr	r2, [r7, #44]
ARM GAS  /tmp/cc6IR6gN.s 			page 48


 1736 0036 5068     		ldr	r0, [r2, #4]
 1737 0038 FA6A     		ldr	r2, [r7, #44]
 1738 003a 9268     		ldr	r2, [r2, #8]
 1739 003c 1146     		mov	r1, r2
 1740 003e 9847     		blx	r3
 1741              	.LVL1:
 1742              	.L105:
 1743              	.LBE71:
 757:./Libraries/FreeRTOS/Source/timers.c **** 			}
 758:./Libraries/FreeRTOS/Source/timers.c **** 			else
 759:./Libraries/FreeRTOS/Source/timers.c **** 			{
 760:./Libraries/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 761:./Libraries/FreeRTOS/Source/timers.c **** 			}
 762:./Libraries/FreeRTOS/Source/timers.c **** 		}
 763:./Libraries/FreeRTOS/Source/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 764:./Libraries/FreeRTOS/Source/timers.c **** 
 765:./Libraries/FreeRTOS/Source/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 766:./Libraries/FreeRTOS/Source/timers.c **** 		function calls. */
 767:./Libraries/FreeRTOS/Source/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1744              		.loc 1 767 15
 1745 0040 7B68     		ldr	r3, [r7, #4]
 1746              		.loc 1 767 5
 1747 0042 002B     		cmp	r3, #0
 1748 0044 C0F2AA80 		blt	.L122
 768:./Libraries/FreeRTOS/Source/timers.c **** 		{
 769:./Libraries/FreeRTOS/Source/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 770:./Libraries/FreeRTOS/Source/timers.c **** 			software timer. */
 771:./Libraries/FreeRTOS/Source/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1749              		.loc 1 771 12
 1750 0048 FB68     		ldr	r3, [r7, #12]
 1751 004a BB62     		str	r3, [r7, #40]
 772:./Libraries/FreeRTOS/Source/timers.c **** 
 773:./Libraries/FreeRTOS/Source/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 1752              		.loc 1 773 8
 1753 004c BB6A     		ldr	r3, [r7, #40]
 1754 004e 5B69     		ldr	r3, [r3, #20]
 1755              		.loc 1 773 6
 1756 0050 002B     		cmp	r3, #0
 1757 0052 04D0     		beq	.L108
 774:./Libraries/FreeRTOS/Source/timers.c **** 			{
 775:./Libraries/FreeRTOS/Source/timers.c **** 				/* The timer is in a list, remove it. */
 776:./Libraries/FreeRTOS/Source/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1758              		.loc 1 776 14
 1759 0054 BB6A     		ldr	r3, [r7, #40]
 1760 0056 0433     		adds	r3, r3, #4
 1761 0058 1846     		mov	r0, r3
 1762 005a FFF7FEFF 		bl	uxListRemove
 1763              	.L108:
 777:./Libraries/FreeRTOS/Source/timers.c **** 			}
 778:./Libraries/FreeRTOS/Source/timers.c **** 			else
 779:./Libraries/FreeRTOS/Source/timers.c **** 			{
 780:./Libraries/FreeRTOS/Source/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 781:./Libraries/FreeRTOS/Source/timers.c **** 			}
 782:./Libraries/FreeRTOS/Source/timers.c **** 
 783:./Libraries/FreeRTOS/Source/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 784:./Libraries/FreeRTOS/Source/timers.c **** 
 785:./Libraries/FreeRTOS/Source/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
ARM GAS  /tmp/cc6IR6gN.s 			page 49


 786:./Libraries/FreeRTOS/Source/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 787:./Libraries/FreeRTOS/Source/timers.c **** 			called after the message is received from xTimerQueue so there is no
 788:./Libraries/FreeRTOS/Source/timers.c **** 			possibility of a higher priority task adding a message to the message
 789:./Libraries/FreeRTOS/Source/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 790:./Libraries/FreeRTOS/Source/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 791:./Libraries/FreeRTOS/Source/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1764              		.loc 1 791 15
 1765 005e 3B46     		mov	r3, r7
 1766 0060 1846     		mov	r0, r3
 1767 0062 FFF7FEFF 		bl	prvSampleTimeNow
 1768 0066 7862     		str	r0, [r7, #36]
 792:./Libraries/FreeRTOS/Source/timers.c **** 
 793:./Libraries/FreeRTOS/Source/timers.c **** 			switch( xMessage.xMessageID )
 1769              		.loc 1 793 20
 1770 0068 7B68     		ldr	r3, [r7, #4]
 1771 006a 092B     		cmp	r3, #9
 1772 006c 00F29780 		bhi	.L104
 1773 0070 01A2     		adr	r2, .L111
 1774 0072 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1775 0076 00BF     		.p2align 2
 1776              	.L111:
 1777 0078 A1000000 		.word	.L113+1
 1778 007c A1000000 		.word	.L113+1
 1779 0080 A1000000 		.word	.L113+1
 1780 0084 15010000 		.word	.L112+1
 1781 0088 29010000 		.word	.L110+1
 1782 008c 73010000 		.word	.L114+1
 1783 0090 A1000000 		.word	.L113+1
 1784 0094 A1000000 		.word	.L113+1
 1785 0098 15010000 		.word	.L112+1
 1786 009c 29010000 		.word	.L110+1
 1787              		.p2align 1
 1788              	.L113:
 794:./Libraries/FreeRTOS/Source/timers.c **** 			{
 795:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START :
 796:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START_FROM_ISR :
 797:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_RESET :
 798:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_RESET_FROM_ISR :
 799:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 800:./Libraries/FreeRTOS/Source/timers.c **** 					/* Start or restart a timer. */
 801:./Libraries/FreeRTOS/Source/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1789              		.loc 1 801 24
 1790 00a0 BB6A     		ldr	r3, [r7, #40]
 1791 00a2 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1792 00a6 43F00103 		orr	r3, r3, #1
 1793 00aa DAB2     		uxtb	r2, r3
 1794 00ac BB6A     		ldr	r3, [r7, #40]
 1795 00ae 83F82820 		strb	r2, [r3, #40]
 802:./Libraries/FreeRTOS/Source/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1796              		.loc 1 802 75
 1797 00b2 BA68     		ldr	r2, [r7, #8]
 1798              		.loc 1 802 99
 1799 00b4 BB6A     		ldr	r3, [r7, #40]
 1800 00b6 9B69     		ldr	r3, [r3, #24]
 1801              		.loc 1 802 10
 1802 00b8 D118     		adds	r1, r2, r3
 1803 00ba BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cc6IR6gN.s 			page 50


 1804 00bc 7A6A     		ldr	r2, [r7, #36]
 1805 00be B86A     		ldr	r0, [r7, #40]
 1806 00c0 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1807 00c4 0346     		mov	r3, r0
 1808              		.loc 1 802 8
 1809 00c6 002B     		cmp	r3, #0
 1810 00c8 69D0     		beq	.L104
 803:./Libraries/FreeRTOS/Source/timers.c **** 					{
 804:./Libraries/FreeRTOS/Source/timers.c **** 						/* The timer expired before it was added to the active
 805:./Libraries/FreeRTOS/Source/timers.c **** 						timer list.  Process it now. */
 806:./Libraries/FreeRTOS/Source/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1811              		.loc 1 806 14
 1812 00ca BB6A     		ldr	r3, [r7, #40]
 1813 00cc 1B6A     		ldr	r3, [r3, #32]
 1814              		.loc 1 806 7
 1815 00ce B86A     		ldr	r0, [r7, #40]
 1816 00d0 9847     		blx	r3
 1817              	.LVL2:
 807:./Libraries/FreeRTOS/Source/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 808:./Libraries/FreeRTOS/Source/timers.c **** 
 809:./Libraries/FreeRTOS/Source/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1818              		.loc 1 809 20
 1819 00d2 BB6A     		ldr	r3, [r7, #40]
 1820 00d4 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1821              		.loc 1 809 31
 1822 00d8 03F00403 		and	r3, r3, #4
 1823              		.loc 1 809 9
 1824 00dc 002B     		cmp	r3, #0
 1825 00de 5ED0     		beq	.L104
 810:./Libraries/FreeRTOS/Source/timers.c **** 						{
 811:./Libraries/FreeRTOS/Source/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 1826              		.loc 1 811 105
 1827 00e0 BA68     		ldr	r2, [r7, #8]
 1828              		.loc 1 811 129
 1829 00e2 BB6A     		ldr	r3, [r7, #40]
 1830 00e4 9B69     		ldr	r3, [r3, #24]
 1831              		.loc 1 811 18
 1832 00e6 1A44     		add	r2, r2, r3
 1833 00e8 0023     		movs	r3, #0
 1834 00ea 0093     		str	r3, [sp]
 1835 00ec 0023     		movs	r3, #0
 1836 00ee 0021     		movs	r1, #0
 1837 00f0 B86A     		ldr	r0, [r7, #40]
 1838 00f2 FFF7FEFF 		bl	xTimerGenericCommand
 1839 00f6 3862     		str	r0, [r7, #32]
 812:./Libraries/FreeRTOS/Source/timers.c **** 							configASSERT( xResult );
 1840              		.loc 1 812 8
 1841 00f8 3B6A     		ldr	r3, [r7, #32]
 1842 00fa 002B     		cmp	r3, #0
 1843 00fc 4FD1     		bne	.L104
 1844              	.LBB74:
 1845              	.LBB75:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1846              		.loc 2 195 2
 1847              		.syntax unified
 1848              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1849 00fe 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc6IR6gN.s 			page 51


 1850 0102 83F31188 		msr basepri, r3											
 1851 0106 BFF36F8F 		isb														
 1852 010a BFF34F8F 		dsb														
 1853              	
 1854              	@ 0 "" 2
 1855              		.thumb
 1856              		.syntax unified
 1857 010e BB61     		str	r3, [r7, #24]
 1858              		.loc 2 203 1
 1859 0110 00BF     		nop
 1860              	.L116:
 1861              	.LBE75:
 1862              	.LBE74:
 1863              		.loc 1 812 8 discriminator 2
 1864 0112 FEE7     		b	.L116
 1865              	.L112:
 813:./Libraries/FreeRTOS/Source/timers.c **** 							( void ) xResult;
 814:./Libraries/FreeRTOS/Source/timers.c **** 						}
 815:./Libraries/FreeRTOS/Source/timers.c **** 						else
 816:./Libraries/FreeRTOS/Source/timers.c **** 						{
 817:./Libraries/FreeRTOS/Source/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 818:./Libraries/FreeRTOS/Source/timers.c **** 						}
 819:./Libraries/FreeRTOS/Source/timers.c **** 					}
 820:./Libraries/FreeRTOS/Source/timers.c **** 					else
 821:./Libraries/FreeRTOS/Source/timers.c **** 					{
 822:./Libraries/FreeRTOS/Source/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 823:./Libraries/FreeRTOS/Source/timers.c **** 					}
 824:./Libraries/FreeRTOS/Source/timers.c **** 					break;
 825:./Libraries/FreeRTOS/Source/timers.c **** 
 826:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP :
 827:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 828:./Libraries/FreeRTOS/Source/timers.c **** 					/* The timer has already been removed from the active list. */
 829:./Libraries/FreeRTOS/Source/timers.c **** 					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1866              		.loc 1 829 24
 1867 0114 BB6A     		ldr	r3, [r7, #40]
 1868 0116 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1869 011a 23F00103 		bic	r3, r3, #1
 1870 011e DAB2     		uxtb	r2, r3
 1871 0120 BB6A     		ldr	r3, [r7, #40]
 1872 0122 83F82820 		strb	r2, [r3, #40]
 830:./Libraries/FreeRTOS/Source/timers.c **** 					break;
 1873              		.loc 1 830 6
 1874 0126 3AE0     		b	.L104
 1875              	.L110:
 831:./Libraries/FreeRTOS/Source/timers.c **** 
 832:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 833:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 834:./Libraries/FreeRTOS/Source/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1876              		.loc 1 834 24
 1877 0128 BB6A     		ldr	r3, [r7, #40]
 1878 012a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1879 012e 43F00103 		orr	r3, r3, #1
 1880 0132 DAB2     		uxtb	r2, r3
 1881 0134 BB6A     		ldr	r3, [r7, #40]
 1882 0136 83F82820 		strb	r2, [r3, #40]
 835:./Libraries/FreeRTOS/Source/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1883              		.loc 1 835 64
ARM GAS  /tmp/cc6IR6gN.s 			page 52


 1884 013a BA68     		ldr	r2, [r7, #8]
 1885              		.loc 1 835 35
 1886 013c BB6A     		ldr	r3, [r7, #40]
 1887 013e 9A61     		str	r2, [r3, #24]
 836:./Libraries/FreeRTOS/Source/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1888              		.loc 1 836 6
 1889 0140 BB6A     		ldr	r3, [r7, #40]
 1890 0142 9B69     		ldr	r3, [r3, #24]
 1891 0144 002B     		cmp	r3, #0
 1892 0146 0AD1     		bne	.L117
 1893              	.LBB76:
 1894              	.LBB77:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1895              		.loc 2 195 2
 1896              		.syntax unified
 1897              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1898 0148 4FF05003 			mov r3, #80												
 1899 014c 83F31188 		msr basepri, r3											
 1900 0150 BFF36F8F 		isb														
 1901 0154 BFF34F8F 		dsb														
 1902              	
 1903              	@ 0 "" 2
 1904              		.thumb
 1905              		.syntax unified
 1906 0158 7B61     		str	r3, [r7, #20]
 1907              		.loc 2 203 1
 1908 015a 00BF     		nop
 1909              	.L118:
 1910              	.LBE77:
 1911              	.LBE76:
 1912              		.loc 1 836 6 discriminator 5
 1913 015c FEE7     		b	.L118
 1914              	.L117:
 837:./Libraries/FreeRTOS/Source/timers.c **** 
 838:./Libraries/FreeRTOS/Source/timers.c **** 					/* The new period does not really have a reference, and can
 839:./Libraries/FreeRTOS/Source/timers.c **** 					be longer or shorter than the old one.  The command time is
 840:./Libraries/FreeRTOS/Source/timers.c **** 					therefore set to the current time, and as the period cannot
 841:./Libraries/FreeRTOS/Source/timers.c **** 					be zero the next expiry time can only be in the future,
 842:./Libraries/FreeRTOS/Source/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 843:./Libraries/FreeRTOS/Source/timers.c **** 					no fail case that needs to be handled here. */
 844:./Libraries/FreeRTOS/Source/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 1915              		.loc 1 844 72
 1916 015e BB6A     		ldr	r3, [r7, #40]
 1917 0160 9A69     		ldr	r2, [r3, #24]
 1918              		.loc 1 844 15
 1919 0162 7B6A     		ldr	r3, [r7, #36]
 1920 0164 D118     		adds	r1, r2, r3
 1921 0166 7B6A     		ldr	r3, [r7, #36]
 1922 0168 7A6A     		ldr	r2, [r7, #36]
 1923 016a B86A     		ldr	r0, [r7, #40]
 1924 016c FFF7FEFF 		bl	prvInsertTimerInActiveList
 845:./Libraries/FreeRTOS/Source/timers.c **** 					break;
 1925              		.loc 1 845 6
 1926 0170 15E0     		b	.L104
 1927              	.L114:
 846:./Libraries/FreeRTOS/Source/timers.c **** 
 847:./Libraries/FreeRTOS/Source/timers.c **** 				case tmrCOMMAND_DELETE :
ARM GAS  /tmp/cc6IR6gN.s 			page 53


 848:./Libraries/FreeRTOS/Source/timers.c **** 					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 849:./Libraries/FreeRTOS/Source/timers.c **** 					{
 850:./Libraries/FreeRTOS/Source/timers.c **** 						/* The timer has already been removed from the active list,
 851:./Libraries/FreeRTOS/Source/timers.c **** 						just free up the memory if the memory was dynamically
 852:./Libraries/FreeRTOS/Source/timers.c **** 						allocated. */
 853:./Libraries/FreeRTOS/Source/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 1928              		.loc 1 853 20
 1929 0172 BB6A     		ldr	r3, [r7, #40]
 1930 0174 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1931              		.loc 1 853 31
 1932 0178 03F00203 		and	r3, r3, #2
 1933              		.loc 1 853 9
 1934 017c 002B     		cmp	r3, #0
 1935 017e 03D1     		bne	.L119
 854:./Libraries/FreeRTOS/Source/timers.c **** 						{
 855:./Libraries/FreeRTOS/Source/timers.c **** 							vPortFree( pxTimer );
 1936              		.loc 1 855 8
 1937 0180 B86A     		ldr	r0, [r7, #40]
 1938 0182 FFF7FEFF 		bl	vPortFree
 1939 0186 0AE0     		b	.L104
 1940              	.L119:
 856:./Libraries/FreeRTOS/Source/timers.c **** 						}
 857:./Libraries/FreeRTOS/Source/timers.c **** 						else
 858:./Libraries/FreeRTOS/Source/timers.c **** 						{
 859:./Libraries/FreeRTOS/Source/timers.c **** 							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1941              		.loc 1 859 26
 1942 0188 BB6A     		ldr	r3, [r7, #40]
 1943 018a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1944 018e 23F00103 		bic	r3, r3, #1
 1945 0192 DAB2     		uxtb	r2, r3
 1946 0194 BB6A     		ldr	r3, [r7, #40]
 1947 0196 83F82820 		strb	r2, [r3, #40]
 860:./Libraries/FreeRTOS/Source/timers.c **** 						}
 861:./Libraries/FreeRTOS/Source/timers.c **** 					}
 862:./Libraries/FreeRTOS/Source/timers.c **** 					#else
 863:./Libraries/FreeRTOS/Source/timers.c **** 					{
 864:./Libraries/FreeRTOS/Source/timers.c **** 						/* If dynamic allocation is not enabled, the memory
 865:./Libraries/FreeRTOS/Source/timers.c **** 						could not have been dynamically allocated. So there is
 866:./Libraries/FreeRTOS/Source/timers.c **** 						no need to free the memory - just mark the timer as
 867:./Libraries/FreeRTOS/Source/timers.c **** 						"not active". */
 868:./Libraries/FreeRTOS/Source/timers.c **** 						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 869:./Libraries/FreeRTOS/Source/timers.c **** 					}
 870:./Libraries/FreeRTOS/Source/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 871:./Libraries/FreeRTOS/Source/timers.c **** 					break;
 1948              		.loc 1 871 6
 1949 019a 00E0     		b	.L104
 1950              	.L122:
 872:./Libraries/FreeRTOS/Source/timers.c **** 
 873:./Libraries/FreeRTOS/Source/timers.c **** 				default	:
 874:./Libraries/FreeRTOS/Source/timers.c **** 					/* Don't expect to get here. */
 875:./Libraries/FreeRTOS/Source/timers.c **** 					break;
 876:./Libraries/FreeRTOS/Source/timers.c **** 			}
 877:./Libraries/FreeRTOS/Source/timers.c **** 		}
 1951              		.loc 1 877 3
 1952 019c 00BF     		nop
 1953              	.L104:
 741:./Libraries/FreeRTOS/Source/timers.c **** 	{
ARM GAS  /tmp/cc6IR6gN.s 			page 54


 1954              		.loc 1 741 9
 1955 019e 084B     		ldr	r3, .L123
 1956 01a0 1B68     		ldr	r3, [r3]
 1957 01a2 391D     		adds	r1, r7, #4
 1958 01a4 0022     		movs	r2, #0
 1959 01a6 1846     		mov	r0, r3
 1960 01a8 FFF7FEFF 		bl	xQueueReceive
 1961 01ac 0346     		mov	r3, r0
 741:./Libraries/FreeRTOS/Source/timers.c **** 	{
 1962              		.loc 1 741 7
 1963 01ae 002B     		cmp	r3, #0
 1964 01b0 7FF42AAF 		bne	.L121
 878:./Libraries/FreeRTOS/Source/timers.c **** 	}
 879:./Libraries/FreeRTOS/Source/timers.c **** }
 1965              		.loc 1 879 1
 1966 01b4 00BF     		nop
 1967 01b6 00BF     		nop
 1968 01b8 3037     		adds	r7, r7, #48
 1969              	.LCFI91:
 1970              		.cfi_def_cfa_offset 8
 1971 01ba BD46     		mov	sp, r7
 1972              	.LCFI92:
 1973              		.cfi_def_cfa_register 13
 1974              		@ sp needed
 1975 01bc 80BD     		pop	{r7, pc}
 1976              	.L124:
 1977 01be 00BF     		.align	2
 1978              	.L123:
 1979 01c0 00000000 		.word	xTimerQueue
 1980              		.cfi_endproc
 1981              	.LFE21:
 1983              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 1984              		.align	1
 1985              		.syntax unified
 1986              		.thumb
 1987              		.thumb_func
 1988              		.fpu fpv5-d16
 1990              	prvSwitchTimerLists:
 1991              	.LFB22:
 880:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 881:./Libraries/FreeRTOS/Source/timers.c **** 
 882:./Libraries/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( void )
 883:./Libraries/FreeRTOS/Source/timers.c **** {
 1992              		.loc 1 883 1
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 24
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996 0000 80B5     		push	{r7, lr}
 1997              	.LCFI93:
 1998              		.cfi_def_cfa_offset 8
 1999              		.cfi_offset 7, -8
 2000              		.cfi_offset 14, -4
 2001 0002 88B0     		sub	sp, sp, #32
 2002              	.LCFI94:
 2003              		.cfi_def_cfa_offset 40
 2004 0004 02AF     		add	r7, sp, #8
 2005              	.LCFI95:
ARM GAS  /tmp/cc6IR6gN.s 			page 55


 2006              		.cfi_def_cfa 7, 32
 884:./Libraries/FreeRTOS/Source/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 885:./Libraries/FreeRTOS/Source/timers.c **** List_t *pxTemp;
 886:./Libraries/FreeRTOS/Source/timers.c **** Timer_t *pxTimer;
 887:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xResult;
 888:./Libraries/FreeRTOS/Source/timers.c **** 
 889:./Libraries/FreeRTOS/Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 890:./Libraries/FreeRTOS/Source/timers.c **** 	If there are any timers still referenced from the current timer list
 891:./Libraries/FreeRTOS/Source/timers.c **** 	then they must have expired and should be processed before the lists
 892:./Libraries/FreeRTOS/Source/timers.c **** 	are switched. */
 893:./Libraries/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 2007              		.loc 1 893 7
 2008 0006 48E0     		b	.L126
 2009              	.L129:
 894:./Libraries/FreeRTOS/Source/timers.c **** 	{
 895:./Libraries/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 2010              		.loc 1 895 21
 2011 0008 2D4B     		ldr	r3, .L130
 2012 000a 1B68     		ldr	r3, [r3]
 2013 000c DB68     		ldr	r3, [r3, #12]
 2014              		.loc 1 895 19
 2015 000e 1B68     		ldr	r3, [r3]
 2016 0010 3B61     		str	r3, [r7, #16]
 896:./Libraries/FreeRTOS/Source/timers.c **** 
 897:./Libraries/FreeRTOS/Source/timers.c **** 		/* Remove the timer from the list. */
 898:./Libraries/FreeRTOS/Source/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 v
 2017              		.loc 1 898 27
 2018 0012 2B4B     		ldr	r3, .L130
 2019 0014 1B68     		ldr	r3, [r3]
 2020 0016 DB68     		ldr	r3, [r3, #12]
 2021              		.loc 1 898 11
 2022 0018 DB68     		ldr	r3, [r3, #12]
 2023 001a FB60     		str	r3, [r7, #12]
 899:./Libraries/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 2024              		.loc 1 899 12
 2025 001c FB68     		ldr	r3, [r7, #12]
 2026 001e 0433     		adds	r3, r3, #4
 2027 0020 1846     		mov	r0, r3
 2028 0022 FFF7FEFF 		bl	uxListRemove
 900:./Libraries/FreeRTOS/Source/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 901:./Libraries/FreeRTOS/Source/timers.c **** 
 902:./Libraries/FreeRTOS/Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 903:./Libraries/FreeRTOS/Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 904:./Libraries/FreeRTOS/Source/timers.c **** 		have not yet been switched. */
 905:./Libraries/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 2029              		.loc 1 905 10
 2030 0026 FB68     		ldr	r3, [r7, #12]
 2031 0028 1B6A     		ldr	r3, [r3, #32]
 2032              		.loc 1 905 3
 2033 002a F868     		ldr	r0, [r7, #12]
 2034 002c 9847     		blx	r3
 2035              	.LVL3:
 906:./Libraries/FreeRTOS/Source/timers.c **** 
 907:./Libraries/FreeRTOS/Source/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 2036              		.loc 1 907 16
 2037 002e FB68     		ldr	r3, [r7, #12]
 2038 0030 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
ARM GAS  /tmp/cc6IR6gN.s 			page 56


 2039              		.loc 1 907 27
 2040 0034 03F00403 		and	r3, r3, #4
 2041              		.loc 1 907 5
 2042 0038 002B     		cmp	r3, #0
 2043 003a 2ED0     		beq	.L126
 908:./Libraries/FreeRTOS/Source/timers.c **** 		{
 909:./Libraries/FreeRTOS/Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 910:./Libraries/FreeRTOS/Source/timers.c **** 			the timer going into the same timer list then it has already expired
 911:./Libraries/FreeRTOS/Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 912:./Libraries/FreeRTOS/Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 913:./Libraries/FreeRTOS/Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 914:./Libraries/FreeRTOS/Source/timers.c **** 			the lists have been swapped. */
 915:./Libraries/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 2044              		.loc 1 915 45
 2045 003c FB68     		ldr	r3, [r7, #12]
 2046 003e 9B69     		ldr	r3, [r3, #24]
 2047              		.loc 1 915 16
 2048 0040 3A69     		ldr	r2, [r7, #16]
 2049 0042 1344     		add	r3, r3, r2
 2050 0044 BB60     		str	r3, [r7, #8]
 916:./Libraries/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 2051              		.loc 1 916 6
 2052 0046 BA68     		ldr	r2, [r7, #8]
 2053 0048 3B69     		ldr	r3, [r7, #16]
 2054 004a 9A42     		cmp	r2, r3
 2055 004c 0ED9     		bls	.L127
 917:./Libraries/FreeRTOS/Source/timers.c **** 			{
 918:./Libraries/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 2056              		.loc 1 918 5
 2057 004e FB68     		ldr	r3, [r7, #12]
 2058 0050 BA68     		ldr	r2, [r7, #8]
 2059 0052 5A60     		str	r2, [r3, #4]
 919:./Libraries/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 2060              		.loc 1 919 5
 2061 0054 FB68     		ldr	r3, [r7, #12]
 2062 0056 FA68     		ldr	r2, [r7, #12]
 2063 0058 1A61     		str	r2, [r3, #16]
 920:./Libraries/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 2064              		.loc 1 920 5
 2065 005a 194B     		ldr	r3, .L130
 2066 005c 1A68     		ldr	r2, [r3]
 2067 005e FB68     		ldr	r3, [r7, #12]
 2068 0060 0433     		adds	r3, r3, #4
 2069 0062 1946     		mov	r1, r3
 2070 0064 1046     		mov	r0, r2
 2071 0066 FFF7FEFF 		bl	vListInsert
 2072 006a 16E0     		b	.L126
 2073              	.L127:
 921:./Libraries/FreeRTOS/Source/timers.c **** 			}
 922:./Libraries/FreeRTOS/Source/timers.c **** 			else
 923:./Libraries/FreeRTOS/Source/timers.c **** 			{
 924:./Libraries/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 2074              		.loc 1 924 15
 2075 006c 0023     		movs	r3, #0
 2076 006e 0093     		str	r3, [sp]
 2077 0070 0023     		movs	r3, #0
 2078 0072 3A69     		ldr	r2, [r7, #16]
ARM GAS  /tmp/cc6IR6gN.s 			page 57


 2079 0074 0021     		movs	r1, #0
 2080 0076 F868     		ldr	r0, [r7, #12]
 2081 0078 FFF7FEFF 		bl	xTimerGenericCommand
 2082 007c 7860     		str	r0, [r7, #4]
 925:./Libraries/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 2083              		.loc 1 925 5
 2084 007e 7B68     		ldr	r3, [r7, #4]
 2085 0080 002B     		cmp	r3, #0
 2086 0082 0AD1     		bne	.L126
 2087              	.LBB78:
 2088              	.LBB79:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2089              		.loc 2 195 2
 2090              		.syntax unified
 2091              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2092 0084 4FF05003 			mov r3, #80												
 2093 0088 83F31188 		msr basepri, r3											
 2094 008c BFF36F8F 		isb														
 2095 0090 BFF34F8F 		dsb														
 2096              	
 2097              	@ 0 "" 2
 2098              		.thumb
 2099              		.syntax unified
 2100 0094 3B60     		str	r3, [r7]
 2101              		.loc 2 203 1
 2102 0096 00BF     		nop
 2103              	.L128:
 2104              	.LBE79:
 2105              	.LBE78:
 2106              		.loc 1 925 5 discriminator 1
 2107 0098 FEE7     		b	.L128
 2108              	.L126:
 893:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2109              		.loc 1 893 9
 2110 009a 094B     		ldr	r3, .L130
 2111 009c 1B68     		ldr	r3, [r3]
 2112 009e 1B68     		ldr	r3, [r3]
 893:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2113              		.loc 1 893 7
 2114 00a0 002B     		cmp	r3, #0
 2115 00a2 B1D1     		bne	.L129
 926:./Libraries/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 927:./Libraries/FreeRTOS/Source/timers.c **** 			}
 928:./Libraries/FreeRTOS/Source/timers.c **** 		}
 929:./Libraries/FreeRTOS/Source/timers.c **** 		else
 930:./Libraries/FreeRTOS/Source/timers.c **** 		{
 931:./Libraries/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 932:./Libraries/FreeRTOS/Source/timers.c **** 		}
 933:./Libraries/FreeRTOS/Source/timers.c **** 	}
 934:./Libraries/FreeRTOS/Source/timers.c **** 
 935:./Libraries/FreeRTOS/Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 2116              		.loc 1 935 9
 2117 00a4 064B     		ldr	r3, .L130
 2118 00a6 1B68     		ldr	r3, [r3]
 2119 00a8 7B61     		str	r3, [r7, #20]
 936:./Libraries/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 2120              		.loc 1 936 21
ARM GAS  /tmp/cc6IR6gN.s 			page 58


 2121 00aa 064B     		ldr	r3, .L130+4
 2122 00ac 1B68     		ldr	r3, [r3]
 2123 00ae 044A     		ldr	r2, .L130
 2124 00b0 1360     		str	r3, [r2]
 937:./Libraries/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 2125              		.loc 1 937 22
 2126 00b2 044A     		ldr	r2, .L130+4
 2127 00b4 7B69     		ldr	r3, [r7, #20]
 2128 00b6 1360     		str	r3, [r2]
 938:./Libraries/FreeRTOS/Source/timers.c **** }
 2129              		.loc 1 938 1
 2130 00b8 00BF     		nop
 2131 00ba 1837     		adds	r7, r7, #24
 2132              	.LCFI96:
 2133              		.cfi_def_cfa_offset 8
 2134 00bc BD46     		mov	sp, r7
 2135              	.LCFI97:
 2136              		.cfi_def_cfa_register 13
 2137              		@ sp needed
 2138 00be 80BD     		pop	{r7, pc}
 2139              	.L131:
 2140              		.align	2
 2141              	.L130:
 2142 00c0 00000000 		.word	pxCurrentTimerList
 2143 00c4 00000000 		.word	pxOverflowTimerList
 2144              		.cfi_endproc
 2145              	.LFE22:
 2147              		.section	.rodata
 2148              		.align	2
 2149              	.LC1:
 2150 0008 546D7251 		.ascii	"TmrQ\000"
 2150      00
 2151              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 2152              		.align	1
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu fpv5-d16
 2158              	prvCheckForValidListAndQueue:
 2159              	.LFB23:
 939:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 940:./Libraries/FreeRTOS/Source/timers.c **** 
 941:./Libraries/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 942:./Libraries/FreeRTOS/Source/timers.c **** {
 2160              		.loc 1 942 1
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0000 80B5     		push	{r7, lr}
 2165              	.LCFI98:
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 7, -8
 2168              		.cfi_offset 14, -4
 2169 0002 82B0     		sub	sp, sp, #8
 2170              	.LCFI99:
 2171              		.cfi_def_cfa_offset 16
 2172 0004 02AF     		add	r7, sp, #8
ARM GAS  /tmp/cc6IR6gN.s 			page 59


 2173              	.LCFI100:
 2174              		.cfi_def_cfa 7, 8
 943:./Libraries/FreeRTOS/Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 944:./Libraries/FreeRTOS/Source/timers.c **** 	queue used to communicate with the timer service, have been
 945:./Libraries/FreeRTOS/Source/timers.c **** 	initialised. */
 946:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 2175              		.loc 1 946 2
 2176 0006 FFF7FEFF 		bl	vPortEnterCritical
 947:./Libraries/FreeRTOS/Source/timers.c **** 	{
 948:./Libraries/FreeRTOS/Source/timers.c **** 		if( xTimerQueue == NULL )
 2177              		.loc 1 948 19
 2178 000a 154B     		ldr	r3, .L134
 2179 000c 1B68     		ldr	r3, [r3]
 2180              		.loc 1 948 5
 2181 000e 002B     		cmp	r3, #0
 2182 0010 20D1     		bne	.L133
 949:./Libraries/FreeRTOS/Source/timers.c **** 		{
 950:./Libraries/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 2183              		.loc 1 950 4
 2184 0012 1448     		ldr	r0, .L134+4
 2185 0014 FFF7FEFF 		bl	vListInitialise
 951:./Libraries/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 2186              		.loc 1 951 4
 2187 0018 1348     		ldr	r0, .L134+8
 2188 001a FFF7FEFF 		bl	vListInitialise
 952:./Libraries/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 2189              		.loc 1 952 23
 2190 001e 134B     		ldr	r3, .L134+12
 2191 0020 104A     		ldr	r2, .L134+4
 2192 0022 1A60     		str	r2, [r3]
 953:./Libraries/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 2193              		.loc 1 953 24
 2194 0024 124B     		ldr	r3, .L134+16
 2195 0026 104A     		ldr	r2, .L134+8
 2196 0028 1A60     		str	r2, [r3]
 2197              	.LBB80:
 954:./Libraries/FreeRTOS/Source/timers.c **** 
 955:./Libraries/FreeRTOS/Source/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 956:./Libraries/FreeRTOS/Source/timers.c **** 			{
 957:./Libraries/FreeRTOS/Source/timers.c **** 				/* The timer queue is allocated statically in case
 958:./Libraries/FreeRTOS/Source/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 959:./Libraries/FreeRTOS/Source/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 960:./Libraries/FreeRTOS/Source/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 961:./Libraries/FreeRTOS/Source/timers.c **** 
 962:./Libraries/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 2198              		.loc 1 962 19
 2199 002a 0023     		movs	r3, #0
 2200 002c 0093     		str	r3, [sp]
 2201 002e 114B     		ldr	r3, .L134+20
 2202 0030 114A     		ldr	r2, .L134+24
 2203 0032 1021     		movs	r1, #16
 2204 0034 0A20     		movs	r0, #10
 2205 0036 FFF7FEFF 		bl	xQueueGenericCreateStatic
 2206 003a 0346     		mov	r3, r0
 2207              		.loc 1 962 17
 2208 003c 084A     		ldr	r2, .L134
 2209 003e 1360     		str	r3, [r2]
ARM GAS  /tmp/cc6IR6gN.s 			page 60


 2210              	.LBE80:
 963:./Libraries/FreeRTOS/Source/timers.c **** 			}
 964:./Libraries/FreeRTOS/Source/timers.c **** 			#else
 965:./Libraries/FreeRTOS/Source/timers.c **** 			{
 966:./Libraries/FreeRTOS/Source/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 967:./Libraries/FreeRTOS/Source/timers.c **** 			}
 968:./Libraries/FreeRTOS/Source/timers.c **** 			#endif
 969:./Libraries/FreeRTOS/Source/timers.c **** 
 970:./Libraries/FreeRTOS/Source/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 971:./Libraries/FreeRTOS/Source/timers.c **** 			{
 972:./Libraries/FreeRTOS/Source/timers.c **** 				if( xTimerQueue != NULL )
 2211              		.loc 1 972 21
 2212 0040 074B     		ldr	r3, .L134
 2213 0042 1B68     		ldr	r3, [r3]
 2214              		.loc 1 972 7
 2215 0044 002B     		cmp	r3, #0
 2216 0046 05D0     		beq	.L133
 973:./Libraries/FreeRTOS/Source/timers.c **** 				{
 974:./Libraries/FreeRTOS/Source/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 2217              		.loc 1 974 6
 2218 0048 054B     		ldr	r3, .L134
 2219 004a 1B68     		ldr	r3, [r3]
 2220 004c 0B49     		ldr	r1, .L134+28
 2221 004e 1846     		mov	r0, r3
 2222 0050 FFF7FEFF 		bl	vQueueAddToRegistry
 2223              	.L133:
 975:./Libraries/FreeRTOS/Source/timers.c **** 				}
 976:./Libraries/FreeRTOS/Source/timers.c **** 				else
 977:./Libraries/FreeRTOS/Source/timers.c **** 				{
 978:./Libraries/FreeRTOS/Source/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 979:./Libraries/FreeRTOS/Source/timers.c **** 				}
 980:./Libraries/FreeRTOS/Source/timers.c **** 			}
 981:./Libraries/FreeRTOS/Source/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 982:./Libraries/FreeRTOS/Source/timers.c **** 		}
 983:./Libraries/FreeRTOS/Source/timers.c **** 		else
 984:./Libraries/FreeRTOS/Source/timers.c **** 		{
 985:./Libraries/FreeRTOS/Source/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 986:./Libraries/FreeRTOS/Source/timers.c **** 		}
 987:./Libraries/FreeRTOS/Source/timers.c **** 	}
 988:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 2224              		.loc 1 988 2
 2225 0054 FFF7FEFF 		bl	vPortExitCritical
 989:./Libraries/FreeRTOS/Source/timers.c **** }
 2226              		.loc 1 989 1
 2227 0058 00BF     		nop
 2228 005a BD46     		mov	sp, r7
 2229              	.LCFI101:
 2230              		.cfi_def_cfa_register 13
 2231              		@ sp needed
 2232 005c 80BD     		pop	{r7, pc}
 2233              	.L135:
 2234 005e 00BF     		.align	2
 2235              	.L134:
 2236 0060 00000000 		.word	xTimerQueue
 2237 0064 00000000 		.word	xActiveTimerList1
 2238 0068 00000000 		.word	xActiveTimerList2
 2239 006c 00000000 		.word	pxCurrentTimerList
ARM GAS  /tmp/cc6IR6gN.s 			page 61


 2240 0070 00000000 		.word	pxOverflowTimerList
 2241 0074 00000000 		.word	xStaticTimerQueue.6937
 2242 0078 00000000 		.word	ucStaticTimerQueueStorage.6938
 2243 007c 08000000 		.word	.LC1
 2244              		.cfi_endproc
 2245              	.LFE23:
 2247              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 2248              		.align	1
 2249              		.global	xTimerIsTimerActive
 2250              		.syntax unified
 2251              		.thumb
 2252              		.thumb_func
 2253              		.fpu fpv5-d16
 2255              	xTimerIsTimerActive:
 2256              	.LFB24:
 990:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 991:./Libraries/FreeRTOS/Source/timers.c **** 
 992:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 993:./Libraries/FreeRTOS/Source/timers.c **** {
 2257              		.loc 1 993 1
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 24
 2260              		@ frame_needed = 1, uses_anonymous_args = 0
 2261 0000 80B5     		push	{r7, lr}
 2262              	.LCFI102:
 2263              		.cfi_def_cfa_offset 8
 2264              		.cfi_offset 7, -8
 2265              		.cfi_offset 14, -4
 2266 0002 86B0     		sub	sp, sp, #24
 2267              	.LCFI103:
 2268              		.cfi_def_cfa_offset 32
 2269 0004 00AF     		add	r7, sp, #0
 2270              	.LCFI104:
 2271              		.cfi_def_cfa_register 7
 2272 0006 7860     		str	r0, [r7, #4]
 994:./Libraries/FreeRTOS/Source/timers.c **** BaseType_t xReturn;
 995:./Libraries/FreeRTOS/Source/timers.c **** Timer_t *pxTimer = xTimer;
 2273              		.loc 1 995 10
 2274 0008 7B68     		ldr	r3, [r7, #4]
 2275 000a 3B61     		str	r3, [r7, #16]
 996:./Libraries/FreeRTOS/Source/timers.c **** 
 997:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 2276              		.loc 1 997 2
 2277 000c 7B68     		ldr	r3, [r7, #4]
 2278 000e 002B     		cmp	r3, #0
 2279 0010 0AD1     		bne	.L137
 2280              	.LBB81:
 2281              	.LBB82:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2282              		.loc 2 195 2
 2283              		.syntax unified
 2284              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2285 0012 4FF05003 			mov r3, #80												
 2286 0016 83F31188 		msr basepri, r3											
 2287 001a BFF36F8F 		isb														
 2288 001e BFF34F8F 		dsb														
 2289              	
ARM GAS  /tmp/cc6IR6gN.s 			page 62


 2290              	@ 0 "" 2
 2291              		.thumb
 2292              		.syntax unified
 2293 0022 FB60     		str	r3, [r7, #12]
 2294              		.loc 2 203 1
 2295 0024 00BF     		nop
 2296              	.L138:
 2297              	.LBE82:
 2298              	.LBE81:
 2299              		.loc 1 997 2 discriminator 1
 2300 0026 FEE7     		b	.L138
 2301              	.L137:
 998:./Libraries/FreeRTOS/Source/timers.c **** 
 999:./Libraries/FreeRTOS/Source/timers.c **** 	/* Is the timer in the list of active timers? */
1000:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 2302              		.loc 1 1000 2
 2303 0028 FFF7FEFF 		bl	vPortEnterCritical
1001:./Libraries/FreeRTOS/Source/timers.c **** 	{
1002:./Libraries/FreeRTOS/Source/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 2304              		.loc 1 1002 16
 2305 002c 3B69     		ldr	r3, [r7, #16]
 2306 002e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2307              		.loc 1 1002 27
 2308 0032 03F00103 		and	r3, r3, #1
 2309              		.loc 1 1002 5
 2310 0036 002B     		cmp	r3, #0
 2311 0038 02D1     		bne	.L139
1003:./Libraries/FreeRTOS/Source/timers.c **** 		{
1004:./Libraries/FreeRTOS/Source/timers.c **** 			xReturn = pdFALSE;
 2312              		.loc 1 1004 12
 2313 003a 0023     		movs	r3, #0
 2314 003c 7B61     		str	r3, [r7, #20]
 2315 003e 01E0     		b	.L140
 2316              	.L139:
1005:./Libraries/FreeRTOS/Source/timers.c **** 		}
1006:./Libraries/FreeRTOS/Source/timers.c **** 		else
1007:./Libraries/FreeRTOS/Source/timers.c **** 		{
1008:./Libraries/FreeRTOS/Source/timers.c **** 			xReturn = pdTRUE;
 2317              		.loc 1 1008 12
 2318 0040 0123     		movs	r3, #1
 2319 0042 7B61     		str	r3, [r7, #20]
 2320              	.L140:
1009:./Libraries/FreeRTOS/Source/timers.c **** 		}
1010:./Libraries/FreeRTOS/Source/timers.c **** 	}
1011:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 2321              		.loc 1 1011 2
 2322 0044 FFF7FEFF 		bl	vPortExitCritical
1012:./Libraries/FreeRTOS/Source/timers.c **** 
1013:./Libraries/FreeRTOS/Source/timers.c **** 	return xReturn;
 2323              		.loc 1 1013 9
 2324 0048 7B69     		ldr	r3, [r7, #20]
1014:./Libraries/FreeRTOS/Source/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 2325              		.loc 1 1014 1
 2326 004a 1846     		mov	r0, r3
 2327 004c 1837     		adds	r7, r7, #24
 2328              	.LCFI105:
 2329              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6IR6gN.s 			page 63


 2330 004e BD46     		mov	sp, r7
 2331              	.LCFI106:
 2332              		.cfi_def_cfa_register 13
 2333              		@ sp needed
 2334 0050 80BD     		pop	{r7, pc}
 2335              		.cfi_endproc
 2336              	.LFE24:
 2338              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 2339              		.align	1
 2340              		.global	pvTimerGetTimerID
 2341              		.syntax unified
 2342              		.thumb
 2343              		.thumb_func
 2344              		.fpu fpv5-d16
 2346              	pvTimerGetTimerID:
 2347              	.LFB25:
1015:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1016:./Libraries/FreeRTOS/Source/timers.c **** 
1017:./Libraries/FreeRTOS/Source/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1018:./Libraries/FreeRTOS/Source/timers.c **** {
 2348              		.loc 1 1018 1
 2349              		.cfi_startproc
 2350              		@ args = 0, pretend = 0, frame = 24
 2351              		@ frame_needed = 1, uses_anonymous_args = 0
 2352 0000 80B5     		push	{r7, lr}
 2353              	.LCFI107:
 2354              		.cfi_def_cfa_offset 8
 2355              		.cfi_offset 7, -8
 2356              		.cfi_offset 14, -4
 2357 0002 86B0     		sub	sp, sp, #24
 2358              	.LCFI108:
 2359              		.cfi_def_cfa_offset 32
 2360 0004 00AF     		add	r7, sp, #0
 2361              	.LCFI109:
 2362              		.cfi_def_cfa_register 7
 2363 0006 7860     		str	r0, [r7, #4]
1019:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = xTimer;
 2364              		.loc 1 1019 17
 2365 0008 7B68     		ldr	r3, [r7, #4]
 2366 000a 7B61     		str	r3, [r7, #20]
1020:./Libraries/FreeRTOS/Source/timers.c **** void *pvReturn;
1021:./Libraries/FreeRTOS/Source/timers.c **** 
1022:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 2367              		.loc 1 1022 2
 2368 000c 7B68     		ldr	r3, [r7, #4]
 2369 000e 002B     		cmp	r3, #0
 2370 0010 0AD1     		bne	.L143
 2371              	.LBB83:
 2372              	.LBB84:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2373              		.loc 2 195 2
 2374              		.syntax unified
 2375              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2376 0012 4FF05003 			mov r3, #80												
 2377 0016 83F31188 		msr basepri, r3											
 2378 001a BFF36F8F 		isb														
 2379 001e BFF34F8F 		dsb														
ARM GAS  /tmp/cc6IR6gN.s 			page 64


 2380              	
 2381              	@ 0 "" 2
 2382              		.thumb
 2383              		.syntax unified
 2384 0022 FB60     		str	r3, [r7, #12]
 2385              		.loc 2 203 1
 2386 0024 00BF     		nop
 2387              	.L144:
 2388              	.LBE84:
 2389              	.LBE83:
 2390              		.loc 1 1022 2 discriminator 1
 2391 0026 FEE7     		b	.L144
 2392              	.L143:
1023:./Libraries/FreeRTOS/Source/timers.c **** 
1024:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 2393              		.loc 1 1024 2
 2394 0028 FFF7FEFF 		bl	vPortEnterCritical
1025:./Libraries/FreeRTOS/Source/timers.c **** 	{
1026:./Libraries/FreeRTOS/Source/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 2395              		.loc 1 1026 12
 2396 002c 7B69     		ldr	r3, [r7, #20]
 2397 002e DB69     		ldr	r3, [r3, #28]
 2398 0030 3B61     		str	r3, [r7, #16]
1027:./Libraries/FreeRTOS/Source/timers.c **** 	}
1028:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 2399              		.loc 1 1028 2
 2400 0032 FFF7FEFF 		bl	vPortExitCritical
1029:./Libraries/FreeRTOS/Source/timers.c **** 
1030:./Libraries/FreeRTOS/Source/timers.c **** 	return pvReturn;
 2401              		.loc 1 1030 9
 2402 0036 3B69     		ldr	r3, [r7, #16]
1031:./Libraries/FreeRTOS/Source/timers.c **** }
 2403              		.loc 1 1031 1
 2404 0038 1846     		mov	r0, r3
 2405 003a 1837     		adds	r7, r7, #24
 2406              	.LCFI110:
 2407              		.cfi_def_cfa_offset 8
 2408 003c BD46     		mov	sp, r7
 2409              	.LCFI111:
 2410              		.cfi_def_cfa_register 13
 2411              		@ sp needed
 2412 003e 80BD     		pop	{r7, pc}
 2413              		.cfi_endproc
 2414              	.LFE25:
 2416              		.section	.text.vTimerSetTimerID,"ax",%progbits
 2417              		.align	1
 2418              		.global	vTimerSetTimerID
 2419              		.syntax unified
 2420              		.thumb
 2421              		.thumb_func
 2422              		.fpu fpv5-d16
 2424              	vTimerSetTimerID:
 2425              	.LFB26:
1032:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1033:./Libraries/FreeRTOS/Source/timers.c **** 
1034:./Libraries/FreeRTOS/Source/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1035:./Libraries/FreeRTOS/Source/timers.c **** {
ARM GAS  /tmp/cc6IR6gN.s 			page 65


 2426              		.loc 1 1035 1
 2427              		.cfi_startproc
 2428              		@ args = 0, pretend = 0, frame = 16
 2429              		@ frame_needed = 1, uses_anonymous_args = 0
 2430 0000 80B5     		push	{r7, lr}
 2431              	.LCFI112:
 2432              		.cfi_def_cfa_offset 8
 2433              		.cfi_offset 7, -8
 2434              		.cfi_offset 14, -4
 2435 0002 84B0     		sub	sp, sp, #16
 2436              	.LCFI113:
 2437              		.cfi_def_cfa_offset 24
 2438 0004 00AF     		add	r7, sp, #0
 2439              	.LCFI114:
 2440              		.cfi_def_cfa_register 7
 2441 0006 7860     		str	r0, [r7, #4]
 2442 0008 3960     		str	r1, [r7]
1036:./Libraries/FreeRTOS/Source/timers.c **** Timer_t * const pxTimer = xTimer;
 2443              		.loc 1 1036 17
 2444 000a 7B68     		ldr	r3, [r7, #4]
 2445 000c FB60     		str	r3, [r7, #12]
1037:./Libraries/FreeRTOS/Source/timers.c **** 
1038:./Libraries/FreeRTOS/Source/timers.c **** 	configASSERT( xTimer );
 2446              		.loc 1 1038 2
 2447 000e 7B68     		ldr	r3, [r7, #4]
 2448 0010 002B     		cmp	r3, #0
 2449 0012 0AD1     		bne	.L147
 2450              	.LBB85:
 2451              	.LBB86:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2452              		.loc 2 195 2
 2453              		.syntax unified
 2454              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2455 0014 4FF05003 			mov r3, #80												
 2456 0018 83F31188 		msr basepri, r3											
 2457 001c BFF36F8F 		isb														
 2458 0020 BFF34F8F 		dsb														
 2459              	
 2460              	@ 0 "" 2
 2461              		.thumb
 2462              		.syntax unified
 2463 0024 BB60     		str	r3, [r7, #8]
 2464              		.loc 2 203 1
 2465 0026 00BF     		nop
 2466              	.L148:
 2467              	.LBE86:
 2468              	.LBE85:
 2469              		.loc 1 1038 2 discriminator 1
 2470 0028 FEE7     		b	.L148
 2471              	.L147:
1039:./Libraries/FreeRTOS/Source/timers.c **** 
1040:./Libraries/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 2472              		.loc 1 1040 2
 2473 002a FFF7FEFF 		bl	vPortEnterCritical
1041:./Libraries/FreeRTOS/Source/timers.c **** 	{
1042:./Libraries/FreeRTOS/Source/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 2474              		.loc 1 1042 22
ARM GAS  /tmp/cc6IR6gN.s 			page 66


 2475 002e FB68     		ldr	r3, [r7, #12]
 2476 0030 3A68     		ldr	r2, [r7]
 2477 0032 DA61     		str	r2, [r3, #28]
1043:./Libraries/FreeRTOS/Source/timers.c **** 	}
1044:./Libraries/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 2478              		.loc 1 1044 2
 2479 0034 FFF7FEFF 		bl	vPortExitCritical
1045:./Libraries/FreeRTOS/Source/timers.c **** }
 2480              		.loc 1 1045 1
 2481 0038 00BF     		nop
 2482 003a 1037     		adds	r7, r7, #16
 2483              	.LCFI115:
 2484              		.cfi_def_cfa_offset 8
 2485 003c BD46     		mov	sp, r7
 2486              	.LCFI116:
 2487              		.cfi_def_cfa_register 13
 2488              		@ sp needed
 2489 003e 80BD     		pop	{r7, pc}
 2490              		.cfi_endproc
 2491              	.LFE26:
 2493              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 2494              		.align	1
 2495              		.global	xTimerPendFunctionCallFromISR
 2496              		.syntax unified
 2497              		.thumb
 2498              		.thumb_func
 2499              		.fpu fpv5-d16
 2501              	xTimerPendFunctionCallFromISR:
 2502              	.LFB27:
1046:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1047:./Libraries/FreeRTOS/Source/timers.c **** 
1048:./Libraries/FreeRTOS/Source/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1049:./Libraries/FreeRTOS/Source/timers.c **** 
1050:./Libraries/FreeRTOS/Source/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1051:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2503              		.loc 1 1051 2
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 40
 2506              		@ frame_needed = 1, uses_anonymous_args = 0
 2507 0000 80B5     		push	{r7, lr}
 2508              	.LCFI117:
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 7, -8
 2511              		.cfi_offset 14, -4
 2512 0002 8AB0     		sub	sp, sp, #40
 2513              	.LCFI118:
 2514              		.cfi_def_cfa_offset 48
 2515 0004 00AF     		add	r7, sp, #0
 2516              	.LCFI119:
 2517              		.cfi_def_cfa_register 7
 2518 0006 F860     		str	r0, [r7, #12]
 2519 0008 B960     		str	r1, [r7, #8]
 2520 000a 7A60     		str	r2, [r7, #4]
 2521 000c 3B60     		str	r3, [r7]
1052:./Libraries/FreeRTOS/Source/timers.c **** 	DaemonTaskMessage_t xMessage;
1053:./Libraries/FreeRTOS/Source/timers.c **** 	BaseType_t xReturn;
1054:./Libraries/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6IR6gN.s 			page 67


1055:./Libraries/FreeRTOS/Source/timers.c **** 		/* Complete the message with the function parameters and post it to the
1056:./Libraries/FreeRTOS/Source/timers.c **** 		daemon task. */
1057:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 2522              		.loc 1 1057 23
 2523 000e 6FF00103 		mvn	r3, #1
 2524 0012 7B61     		str	r3, [r7, #20]
1058:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2525              		.loc 1 1058 53
 2526 0014 FB68     		ldr	r3, [r7, #12]
 2527 0016 BB61     		str	r3, [r7, #24]
1059:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2528              		.loc 1 1059 47
 2529 0018 BB68     		ldr	r3, [r7, #8]
 2530 001a FB61     		str	r3, [r7, #28]
1060:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2531              		.loc 1 1060 47
 2532 001c 7B68     		ldr	r3, [r7, #4]
 2533 001e 3B62     		str	r3, [r7, #32]
1061:./Libraries/FreeRTOS/Source/timers.c **** 
1062:./Libraries/FreeRTOS/Source/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 2534              		.loc 1 1062 13
 2535 0020 064B     		ldr	r3, .L151
 2536 0022 1868     		ldr	r0, [r3]
 2537 0024 07F11401 		add	r1, r7, #20
 2538 0028 0023     		movs	r3, #0
 2539 002a 3A68     		ldr	r2, [r7]
 2540 002c FFF7FEFF 		bl	xQueueGenericSendFromISR
 2541 0030 7862     		str	r0, [r7, #36]
1063:./Libraries/FreeRTOS/Source/timers.c **** 
1064:./Libraries/FreeRTOS/Source/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1065:./Libraries/FreeRTOS/Source/timers.c **** 
1066:./Libraries/FreeRTOS/Source/timers.c **** 		return xReturn;
 2542              		.loc 1 1066 10
 2543 0032 7B6A     		ldr	r3, [r7, #36]
1067:./Libraries/FreeRTOS/Source/timers.c **** 	}
 2544              		.loc 1 1067 2
 2545 0034 1846     		mov	r0, r3
 2546 0036 2837     		adds	r7, r7, #40
 2547              	.LCFI120:
 2548              		.cfi_def_cfa_offset 8
 2549 0038 BD46     		mov	sp, r7
 2550              	.LCFI121:
 2551              		.cfi_def_cfa_register 13
 2552              		@ sp needed
 2553 003a 80BD     		pop	{r7, pc}
 2554              	.L152:
 2555              		.align	2
 2556              	.L151:
 2557 003c 00000000 		.word	xTimerQueue
 2558              		.cfi_endproc
 2559              	.LFE27:
 2561              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 2562              		.align	1
 2563              		.global	xTimerPendFunctionCall
 2564              		.syntax unified
 2565              		.thumb
 2566              		.thumb_func
ARM GAS  /tmp/cc6IR6gN.s 			page 68


 2567              		.fpu fpv5-d16
 2569              	xTimerPendFunctionCall:
 2570              	.LFB28:
1068:./Libraries/FreeRTOS/Source/timers.c **** 
1069:./Libraries/FreeRTOS/Source/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1070:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1071:./Libraries/FreeRTOS/Source/timers.c **** 
1072:./Libraries/FreeRTOS/Source/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1073:./Libraries/FreeRTOS/Source/timers.c **** 
1074:./Libraries/FreeRTOS/Source/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1075:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2571              		.loc 1 1075 2
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 40
 2574              		@ frame_needed = 1, uses_anonymous_args = 0
 2575 0000 80B5     		push	{r7, lr}
 2576              	.LCFI122:
 2577              		.cfi_def_cfa_offset 8
 2578              		.cfi_offset 7, -8
 2579              		.cfi_offset 14, -4
 2580 0002 8AB0     		sub	sp, sp, #40
 2581              	.LCFI123:
 2582              		.cfi_def_cfa_offset 48
 2583 0004 00AF     		add	r7, sp, #0
 2584              	.LCFI124:
 2585              		.cfi_def_cfa_register 7
 2586 0006 F860     		str	r0, [r7, #12]
 2587 0008 B960     		str	r1, [r7, #8]
 2588 000a 7A60     		str	r2, [r7, #4]
 2589 000c 3B60     		str	r3, [r7]
1076:./Libraries/FreeRTOS/Source/timers.c **** 	DaemonTaskMessage_t xMessage;
1077:./Libraries/FreeRTOS/Source/timers.c **** 	BaseType_t xReturn;
1078:./Libraries/FreeRTOS/Source/timers.c **** 
1079:./Libraries/FreeRTOS/Source/timers.c **** 		/* This function can only be called after a timer has been created or
1080:./Libraries/FreeRTOS/Source/timers.c **** 		after the scheduler has been started because, until then, the timer
1081:./Libraries/FreeRTOS/Source/timers.c **** 		queue does not exist. */
1082:./Libraries/FreeRTOS/Source/timers.c **** 		configASSERT( xTimerQueue );
 2590              		.loc 1 1082 3
 2591 000e 134B     		ldr	r3, .L157
 2592 0010 1B68     		ldr	r3, [r3]
 2593 0012 002B     		cmp	r3, #0
 2594 0014 0AD1     		bne	.L154
 2595              	.LBB87:
 2596              	.LBB88:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2597              		.loc 2 195 2
 2598              		.syntax unified
 2599              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2600 0016 4FF05003 			mov r3, #80												
 2601 001a 83F31188 		msr basepri, r3											
 2602 001e BFF36F8F 		isb														
 2603 0022 BFF34F8F 		dsb														
 2604              	
 2605              	@ 0 "" 2
 2606              		.thumb
 2607              		.syntax unified
 2608 0026 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/cc6IR6gN.s 			page 69


 2609              		.loc 2 203 1
 2610 0028 00BF     		nop
 2611              	.L155:
 2612              	.LBE88:
 2613              	.LBE87:
 2614              		.loc 1 1082 3 discriminator 1
 2615 002a FEE7     		b	.L155
 2616              	.L154:
1083:./Libraries/FreeRTOS/Source/timers.c **** 
1084:./Libraries/FreeRTOS/Source/timers.c **** 		/* Complete the message with the function parameters and post it to the
1085:./Libraries/FreeRTOS/Source/timers.c **** 		daemon task. */
1086:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2617              		.loc 1 1086 23
 2618 002c 4FF0FF33 		mov	r3, #-1
 2619 0030 3B61     		str	r3, [r7, #16]
1087:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2620              		.loc 1 1087 53
 2621 0032 FB68     		ldr	r3, [r7, #12]
 2622 0034 7B61     		str	r3, [r7, #20]
1088:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2623              		.loc 1 1088 47
 2624 0036 BB68     		ldr	r3, [r7, #8]
 2625 0038 BB61     		str	r3, [r7, #24]
1089:./Libraries/FreeRTOS/Source/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2626              		.loc 1 1089 47
 2627 003a 7B68     		ldr	r3, [r7, #4]
 2628 003c FB61     		str	r3, [r7, #28]
1090:./Libraries/FreeRTOS/Source/timers.c **** 
1091:./Libraries/FreeRTOS/Source/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2629              		.loc 1 1091 13
 2630 003e 074B     		ldr	r3, .L157
 2631 0040 1868     		ldr	r0, [r3]
 2632 0042 07F11001 		add	r1, r7, #16
 2633 0046 0023     		movs	r3, #0
 2634 0048 3A68     		ldr	r2, [r7]
 2635 004a FFF7FEFF 		bl	xQueueGenericSend
 2636 004e 7862     		str	r0, [r7, #36]
1092:./Libraries/FreeRTOS/Source/timers.c **** 
1093:./Libraries/FreeRTOS/Source/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1094:./Libraries/FreeRTOS/Source/timers.c **** 
1095:./Libraries/FreeRTOS/Source/timers.c **** 		return xReturn;
 2637              		.loc 1 1095 10
 2638 0050 7B6A     		ldr	r3, [r7, #36]
1096:./Libraries/FreeRTOS/Source/timers.c **** 	}
 2639              		.loc 1 1096 2
 2640 0052 1846     		mov	r0, r3
 2641 0054 2837     		adds	r7, r7, #40
 2642              	.LCFI125:
 2643              		.cfi_def_cfa_offset 8
 2644 0056 BD46     		mov	sp, r7
 2645              	.LCFI126:
 2646              		.cfi_def_cfa_register 13
 2647              		@ sp needed
 2648 0058 80BD     		pop	{r7, pc}
 2649              	.L158:
 2650 005a 00BF     		.align	2
 2651              	.L157:
ARM GAS  /tmp/cc6IR6gN.s 			page 70


 2652 005c 00000000 		.word	xTimerQueue
 2653              		.cfi_endproc
 2654              	.LFE28:
 2656              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2657              		.align	1
 2658              		.global	uxTimerGetTimerNumber
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2662              		.fpu fpv5-d16
 2664              	uxTimerGetTimerNumber:
 2665              	.LFB29:
1097:./Libraries/FreeRTOS/Source/timers.c **** 
1098:./Libraries/FreeRTOS/Source/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1099:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1100:./Libraries/FreeRTOS/Source/timers.c **** 
1101:./Libraries/FreeRTOS/Source/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1102:./Libraries/FreeRTOS/Source/timers.c **** 
1103:./Libraries/FreeRTOS/Source/timers.c **** 	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1104:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2666              		.loc 1 1104 2
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 8
 2669              		@ frame_needed = 1, uses_anonymous_args = 0
 2670              		@ link register save eliminated.
 2671 0000 80B4     		push	{r7}
 2672              	.LCFI127:
 2673              		.cfi_def_cfa_offset 4
 2674              		.cfi_offset 7, -4
 2675 0002 83B0     		sub	sp, sp, #12
 2676              	.LCFI128:
 2677              		.cfi_def_cfa_offset 16
 2678 0004 00AF     		add	r7, sp, #0
 2679              	.LCFI129:
 2680              		.cfi_def_cfa_register 7
 2681 0006 7860     		str	r0, [r7, #4]
1105:./Libraries/FreeRTOS/Source/timers.c **** 		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2682              		.loc 1 1105 34
 2683 0008 7B68     		ldr	r3, [r7, #4]
 2684 000a 5B6A     		ldr	r3, [r3, #36]
1106:./Libraries/FreeRTOS/Source/timers.c **** 	}
 2685              		.loc 1 1106 2
 2686 000c 1846     		mov	r0, r3
 2687 000e 0C37     		adds	r7, r7, #12
 2688              	.LCFI130:
 2689              		.cfi_def_cfa_offset 4
 2690 0010 BD46     		mov	sp, r7
 2691              	.LCFI131:
 2692              		.cfi_def_cfa_register 13
 2693              		@ sp needed
 2694 0012 5DF8047B 		ldr	r7, [sp], #4
 2695              	.LCFI132:
 2696              		.cfi_restore 7
 2697              		.cfi_def_cfa_offset 0
 2698 0016 7047     		bx	lr
 2699              		.cfi_endproc
 2700              	.LFE29:
ARM GAS  /tmp/cc6IR6gN.s 			page 71


 2702              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2703              		.align	1
 2704              		.global	vTimerSetTimerNumber
 2705              		.syntax unified
 2706              		.thumb
 2707              		.thumb_func
 2708              		.fpu fpv5-d16
 2710              	vTimerSetTimerNumber:
 2711              	.LFB30:
1107:./Libraries/FreeRTOS/Source/timers.c **** 
1108:./Libraries/FreeRTOS/Source/timers.c **** #endif /* configUSE_TRACE_FACILITY */
1109:./Libraries/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1110:./Libraries/FreeRTOS/Source/timers.c **** 
1111:./Libraries/FreeRTOS/Source/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1112:./Libraries/FreeRTOS/Source/timers.c **** 
1113:./Libraries/FreeRTOS/Source/timers.c **** 	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
1114:./Libraries/FreeRTOS/Source/timers.c **** 	{
 2712              		.loc 1 1114 2
 2713              		.cfi_startproc
 2714              		@ args = 0, pretend = 0, frame = 8
 2715              		@ frame_needed = 1, uses_anonymous_args = 0
 2716              		@ link register save eliminated.
 2717 0000 80B4     		push	{r7}
 2718              	.LCFI133:
 2719              		.cfi_def_cfa_offset 4
 2720              		.cfi_offset 7, -4
 2721 0002 83B0     		sub	sp, sp, #12
 2722              	.LCFI134:
 2723              		.cfi_def_cfa_offset 16
 2724 0004 00AF     		add	r7, sp, #0
 2725              	.LCFI135:
 2726              		.cfi_def_cfa_register 7
 2727 0006 7860     		str	r0, [r7, #4]
 2728 0008 3960     		str	r1, [r7]
1115:./Libraries/FreeRTOS/Source/timers.c **** 		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2729              		.loc 1 1115 43
 2730 000a 7B68     		ldr	r3, [r7, #4]
 2731 000c 3A68     		ldr	r2, [r7]
 2732 000e 5A62     		str	r2, [r3, #36]
1116:./Libraries/FreeRTOS/Source/timers.c **** 	}
 2733              		.loc 1 1116 2
 2734 0010 00BF     		nop
 2735 0012 0C37     		adds	r7, r7, #12
 2736              	.LCFI136:
 2737              		.cfi_def_cfa_offset 4
 2738 0014 BD46     		mov	sp, r7
 2739              	.LCFI137:
 2740              		.cfi_def_cfa_register 13
 2741              		@ sp needed
 2742 0016 5DF8047B 		ldr	r7, [sp], #4
 2743              	.LCFI138:
 2744              		.cfi_restore 7
 2745              		.cfi_def_cfa_offset 0
 2746 001a 7047     		bx	lr
 2747              		.cfi_endproc
 2748              	.LFE30:
 2750              		.section	.bss.xLastTime.6887,"aw",%nobits
ARM GAS  /tmp/cc6IR6gN.s 			page 72


 2751              		.align	2
 2754              	xLastTime.6887:
 2755 0000 00000000 		.space	4
 2756              		.section	.bss.ucStaticTimerQueueStorage.6938,"aw",%nobits
 2757              		.align	2
 2760              	ucStaticTimerQueueStorage.6938:
 2761 0000 00000000 		.space	160
 2761      00000000 
 2761      00000000 
 2761      00000000 
 2761      00000000 
 2762              		.section	.bss.xStaticTimerQueue.6937,"aw",%nobits
 2763              		.align	2
 2766              	xStaticTimerQueue.6937:
 2767 0000 00000000 		.space	80
 2767      00000000 
 2767      00000000 
 2767      00000000 
 2767      00000000 
 2768              		.text
 2769              	.Letext0:
 2770              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2771              		.file 4 "/usr/include/newlib/sys/_types.h"
 2772              		.file 5 "/usr/include/newlib/sys/reent.h"
 2773              		.file 6 "/usr/include/newlib/sys/lock.h"
 2774              		.file 7 "/usr/include/newlib/stdlib.h"
 2775              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2776              		.file 9 "./User/code/Inc/FreeRTOSConfig.h"
 2777              		.file 10 "./Libraries/FreeRTOS/Source/include/projdefs.h"
 2778              		.file 11 "./Libraries/FreeRTOS/Source/include/FreeRTOS.h"
 2779              		.file 12 "./Libraries/FreeRTOS/Source/include/list.h"
 2780              		.file 13 "./Libraries/FreeRTOS/Source/include/task.h"
 2781              		.file 14 "./Libraries/FreeRTOS/Source/include/queue.h"
 2782              		.file 15 "./Libraries/FreeRTOS/Source/include/timers.h"
ARM GAS  /tmp/cc6IR6gN.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
     /tmp/cc6IR6gN.s:17     .bss.xActiveTimerList1:0000000000000000 $d
     /tmp/cc6IR6gN.s:20     .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
     /tmp/cc6IR6gN.s:23     .bss.xActiveTimerList2:0000000000000000 $d
     /tmp/cc6IR6gN.s:26     .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
     /tmp/cc6IR6gN.s:29     .bss.pxCurrentTimerList:0000000000000000 $d
     /tmp/cc6IR6gN.s:32     .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
     /tmp/cc6IR6gN.s:35     .bss.pxOverflowTimerList:0000000000000000 $d
     /tmp/cc6IR6gN.s:38     .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
     /tmp/cc6IR6gN.s:41     .bss.xTimerQueue:0000000000000000 $d
     /tmp/cc6IR6gN.s:44     .bss.xTimerQueue:0000000000000000 xTimerQueue
     /tmp/cc6IR6gN.s:47     .bss.xTimerTaskHandle:0000000000000000 $d
     /tmp/cc6IR6gN.s:50     .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle
     /tmp/cc6IR6gN.s:53     .rodata:0000000000000000 $d
     /tmp/cc6IR6gN.s:57     .text.xTimerCreateTimerTask:0000000000000000 $t
     /tmp/cc6IR6gN.s:65     .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
     /tmp/cc6IR6gN.s:2158   .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
     /tmp/cc6IR6gN.s:177    .text.xTimerCreateTimerTask:0000000000000080 $d
     /tmp/cc6IR6gN.s:1236   .text.prvTimerTask:0000000000000000 prvTimerTask
     /tmp/cc6IR6gN.s:185    .text.xTimerCreate:0000000000000000 $t
     /tmp/cc6IR6gN.s:192    .text.xTimerCreate:0000000000000000 xTimerCreate
     /tmp/cc6IR6gN.s:383    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
     /tmp/cc6IR6gN.s:252    .text.xTimerCreateStatic:0000000000000000 $t
     /tmp/cc6IR6gN.s:259    .text.xTimerCreateStatic:0000000000000000 xTimerCreateStatic
     /tmp/cc6IR6gN.s:377    .text.prvInitialiseNewTimer:0000000000000000 $t
     /tmp/cc6IR6gN.s:483    .text.xTimerGenericCommand:0000000000000000 $t
     /tmp/cc6IR6gN.s:490    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
     /tmp/cc6IR6gN.s:609    .text.xTimerGenericCommand:0000000000000098 $d
     /tmp/cc6IR6gN.s:614    .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
     /tmp/cc6IR6gN.s:621    .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
     /tmp/cc6IR6gN.s:685    .text.xTimerGetTimerDaemonTaskHandle:0000000000000034 $d
     /tmp/cc6IR6gN.s:690    .text.xTimerGetPeriod:0000000000000000 $t
     /tmp/cc6IR6gN.s:697    .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
     /tmp/cc6IR6gN.s:765    .text.vTimerSetReloadMode:0000000000000000 $t
     /tmp/cc6IR6gN.s:772    .text.vTimerSetReloadMode:0000000000000000 vTimerSetReloadMode
     /tmp/cc6IR6gN.s:859    .text.uxTimerGetReloadMode:0000000000000000 $t
     /tmp/cc6IR6gN.s:866    .text.uxTimerGetReloadMode:0000000000000000 uxTimerGetReloadMode
     /tmp/cc6IR6gN.s:950    .text.xTimerGetExpiryTime:0000000000000000 $t
     /tmp/cc6IR6gN.s:957    .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
     /tmp/cc6IR6gN.s:1028   .text.pcTimerGetName:0000000000000000 $t
     /tmp/cc6IR6gN.s:1035   .text.pcTimerGetName:0000000000000000 pcTimerGetName
     /tmp/cc6IR6gN.s:1103   .text.prvProcessExpiredTimer:0000000000000000 $t
     /tmp/cc6IR6gN.s:1109   .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
     /tmp/cc6IR6gN.s:1562   .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
     /tmp/cc6IR6gN.s:1225   .text.prvProcessExpiredTimer:0000000000000094 $d
     /tmp/cc6IR6gN.s:1230   .text.prvTimerTask:0000000000000000 $t
     /tmp/cc6IR6gN.s:1408   .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
     /tmp/cc6IR6gN.s:1279   .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
     /tmp/cc6IR6gN.s:1675   .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
     /tmp/cc6IR6gN.s:1273   .text.prvProcessTimerOrBlockTask:0000000000000000 $t
     /tmp/cc6IR6gN.s:1491   .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
     /tmp/cc6IR6gN.s:1395   .text.prvProcessTimerOrBlockTask:0000000000000090 $d
     /tmp/cc6IR6gN.s:1402   .text.prvGetNextExpireTime:0000000000000000 $t
     /tmp/cc6IR6gN.s:1480   .text.prvGetNextExpireTime:0000000000000044 $d
     /tmp/cc6IR6gN.s:1485   .text.prvSampleTimeNow:0000000000000000 $t
     /tmp/cc6IR6gN.s:1990   .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
ARM GAS  /tmp/cc6IR6gN.s 			page 74


     /tmp/cc6IR6gN.s:1551   .text.prvSampleTimeNow:000000000000003c $d
     /tmp/cc6IR6gN.s:2754   .bss.xLastTime.6887:0000000000000000 xLastTime.6887
     /tmp/cc6IR6gN.s:1556   .text.prvInsertTimerInActiveList:0000000000000000 $t
     /tmp/cc6IR6gN.s:1663   .text.prvInsertTimerInActiveList:000000000000007c $d
     /tmp/cc6IR6gN.s:1669   .text.prvProcessReceivedCommands:0000000000000000 $t
     /tmp/cc6IR6gN.s:1777   .text.prvProcessReceivedCommands:0000000000000078 $d
     /tmp/cc6IR6gN.s:1787   .text.prvProcessReceivedCommands:00000000000000a0 $t
     /tmp/cc6IR6gN.s:1979   .text.prvProcessReceivedCommands:00000000000001c0 $d
     /tmp/cc6IR6gN.s:1984   .text.prvSwitchTimerLists:0000000000000000 $t
     /tmp/cc6IR6gN.s:2142   .text.prvSwitchTimerLists:00000000000000c0 $d
     /tmp/cc6IR6gN.s:2152   .text.prvCheckForValidListAndQueue:0000000000000000 $t
     /tmp/cc6IR6gN.s:2236   .text.prvCheckForValidListAndQueue:0000000000000060 $d
     /tmp/cc6IR6gN.s:2766   .bss.xStaticTimerQueue.6937:0000000000000000 xStaticTimerQueue.6937
     /tmp/cc6IR6gN.s:2760   .bss.ucStaticTimerQueueStorage.6938:0000000000000000 ucStaticTimerQueueStorage.6938
     /tmp/cc6IR6gN.s:2248   .text.xTimerIsTimerActive:0000000000000000 $t
     /tmp/cc6IR6gN.s:2255   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
     /tmp/cc6IR6gN.s:2339   .text.pvTimerGetTimerID:0000000000000000 $t
     /tmp/cc6IR6gN.s:2346   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
     /tmp/cc6IR6gN.s:2417   .text.vTimerSetTimerID:0000000000000000 $t
     /tmp/cc6IR6gN.s:2424   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
     /tmp/cc6IR6gN.s:2494   .text.xTimerPendFunctionCallFromISR:0000000000000000 $t
     /tmp/cc6IR6gN.s:2501   .text.xTimerPendFunctionCallFromISR:0000000000000000 xTimerPendFunctionCallFromISR
     /tmp/cc6IR6gN.s:2557   .text.xTimerPendFunctionCallFromISR:000000000000003c $d
     /tmp/cc6IR6gN.s:2562   .text.xTimerPendFunctionCall:0000000000000000 $t
     /tmp/cc6IR6gN.s:2569   .text.xTimerPendFunctionCall:0000000000000000 xTimerPendFunctionCall
     /tmp/cc6IR6gN.s:2652   .text.xTimerPendFunctionCall:000000000000005c $d
     /tmp/cc6IR6gN.s:2657   .text.uxTimerGetTimerNumber:0000000000000000 $t
     /tmp/cc6IR6gN.s:2664   .text.uxTimerGetTimerNumber:0000000000000000 uxTimerGetTimerNumber
     /tmp/cc6IR6gN.s:2703   .text.vTimerSetTimerNumber:0000000000000000 $t
     /tmp/cc6IR6gN.s:2710   .text.vTimerSetTimerNumber:0000000000000000 vTimerSetTimerNumber
     /tmp/cc6IR6gN.s:2751   .bss.xLastTime.6887:0000000000000000 $d
     /tmp/cc6IR6gN.s:2757   .bss.ucStaticTimerQueueStorage.6938:0000000000000000 $d
     /tmp/cc6IR6gN.s:2763   .bss.xStaticTimerQueue.6937:0000000000000000 $d

UNDEFINED SYMBOLS
vApplicationGetTimerTaskMemory
xTaskCreateStatic
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
vPortEnterCritical
vPortExitCritical
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
xTaskGetTickCount
vListInsert
vPortFree
xQueueReceive
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
