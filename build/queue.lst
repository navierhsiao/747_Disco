ARM GAS  /tmp/ccv5E8P7.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"queue.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	xQueueRegistry,64,4
  17              		.section	.text.xQueueGenericReset,"ax",%progbits
  18              		.align	1
  19              		.global	xQueueGenericReset
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	xQueueGenericReset:
  27              	.LFB4:
  28              		.file 1 "./Libraries/FreeRTOS/Source/queue.c"
   1:./Libraries/FreeRTOS/Source/queue.c **** /*
   2:./Libraries/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/queue.c ****  *
   5:./Libraries/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/queue.c ****  *
  12:./Libraries/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/queue.c ****  *
  15:./Libraries/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/queue.c ****  *
  22:./Libraries/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/queue.c ****  *
  25:./Libraries/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/queue.c ****  */
  27:./Libraries/FreeRTOS/Source/queue.c **** 
  28:./Libraries/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:./Libraries/FreeRTOS/Source/queue.c **** #include <string.h>
  30:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 2


  31:./Libraries/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:./Libraries/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:./Libraries/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:./Libraries/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:./Libraries/FreeRTOS/Source/queue.c **** 
  36:./Libraries/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:./Libraries/FreeRTOS/Source/queue.c **** #include "task.h"
  38:./Libraries/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:./Libraries/FreeRTOS/Source/queue.c **** 
  40:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:./Libraries/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:./Libraries/FreeRTOS/Source/queue.c **** #endif
  43:./Libraries/FreeRTOS/Source/queue.c **** 
  44:./Libraries/FreeRTOS/Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:./Libraries/FreeRTOS/Source/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:./Libraries/FreeRTOS/Source/queue.c **** for the header files above, but not in this file, in order to generate the
  47:./Libraries/FreeRTOS/Source/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:./Libraries/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:./Libraries/FreeRTOS/Source/queue.c **** 
  50:./Libraries/FreeRTOS/Source/queue.c **** 
  51:./Libraries/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:./Libraries/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:./Libraries/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:./Libraries/FreeRTOS/Source/queue.c **** 
  55:./Libraries/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:./Libraries/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:./Libraries/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:./Libraries/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:./Libraries/FreeRTOS/Source/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:./Libraries/FreeRTOS/Source/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:./Libraries/FreeRTOS/Source/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:./Libraries/FreeRTOS/Source/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:./Libraries/FreeRTOS/Source/queue.c **** being used for. */
  64:./Libraries/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  65:./Libraries/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:./Libraries/FreeRTOS/Source/queue.c **** 
  67:./Libraries/FreeRTOS/Source/queue.c **** typedef struct QueuePointers
  68:./Libraries/FreeRTOS/Source/queue.c **** {
  69:./Libraries/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:./Libraries/FreeRTOS/Source/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:./Libraries/FreeRTOS/Source/queue.c **** } QueuePointers_t;
  72:./Libraries/FreeRTOS/Source/queue.c **** 
  73:./Libraries/FreeRTOS/Source/queue.c **** typedef struct SemaphoreData
  74:./Libraries/FreeRTOS/Source/queue.c **** {
  75:./Libraries/FreeRTOS/Source/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:./Libraries/FreeRTOS/Source/queue.c **** } SemaphoreData_t;
  78:./Libraries/FreeRTOS/Source/queue.c **** 
  79:./Libraries/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:./Libraries/FreeRTOS/Source/queue.c **** zero. */
  81:./Libraries/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:./Libraries/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:./Libraries/FreeRTOS/Source/queue.c **** 
  84:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:./Libraries/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:./Libraries/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  87:./Libraries/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
ARM GAS  /tmp/ccv5E8P7.s 			page 3


  88:./Libraries/FreeRTOS/Source/queue.c **** #else
  89:./Libraries/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:./Libraries/FreeRTOS/Source/queue.c **** #endif
  91:./Libraries/FreeRTOS/Source/queue.c **** 
  92:./Libraries/FreeRTOS/Source/queue.c **** /*
  93:./Libraries/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  94:./Libraries/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:./Libraries/FreeRTOS/Source/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:./Libraries/FreeRTOS/Source/queue.c ****  */
  97:./Libraries/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:./Libraries/FreeRTOS/Source/queue.c **** {
  99:./Libraries/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:./Libraries/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:./Libraries/FreeRTOS/Source/queue.c **** 
 102:./Libraries/FreeRTOS/Source/queue.c **** 	union
 103:./Libraries/FreeRTOS/Source/queue.c **** 	{
 104:./Libraries/FreeRTOS/Source/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:./Libraries/FreeRTOS/Source/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:./Libraries/FreeRTOS/Source/queue.c **** 	} u;
 107:./Libraries/FreeRTOS/Source/queue.c **** 
 108:./Libraries/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:./Libraries/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:./Libraries/FreeRTOS/Source/queue.c **** 
 111:./Libraries/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:./Libraries/FreeRTOS/Source/queue.c **** 
 115:./Libraries/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:./Libraries/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:./Libraries/FreeRTOS/Source/queue.c **** 
 118:./Libraries/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:./Libraries/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
 121:./Libraries/FreeRTOS/Source/queue.c **** 
 122:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:./Libraries/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
 125:./Libraries/FreeRTOS/Source/queue.c **** 
 126:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:./Libraries/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 128:./Libraries/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 129:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
 130:./Libraries/FreeRTOS/Source/queue.c **** 
 131:./Libraries/FreeRTOS/Source/queue.c **** } xQUEUE;
 132:./Libraries/FreeRTOS/Source/queue.c **** 
 133:./Libraries/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:./Libraries/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:./Libraries/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 136:./Libraries/FreeRTOS/Source/queue.c **** 
 137:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 138:./Libraries/FreeRTOS/Source/queue.c **** 
 139:./Libraries/FreeRTOS/Source/queue.c **** /*
 140:./Libraries/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:./Libraries/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:./Libraries/FreeRTOS/Source/queue.c ****  */
 143:./Libraries/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 4


 145:./Libraries/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:./Libraries/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:./Libraries/FreeRTOS/Source/queue.c **** 	more user friendly. */
 148:./Libraries/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:./Libraries/FreeRTOS/Source/queue.c **** 	{
 150:./Libraries/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:./Libraries/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 152:./Libraries/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 153:./Libraries/FreeRTOS/Source/queue.c **** 
 154:./Libraries/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:./Libraries/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:./Libraries/FreeRTOS/Source/queue.c **** 	debuggers. */
 157:./Libraries/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:./Libraries/FreeRTOS/Source/queue.c **** 
 159:./Libraries/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:./Libraries/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:./Libraries/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 162:./Libraries/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:./Libraries/FreeRTOS/Source/queue.c **** 
 164:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:./Libraries/FreeRTOS/Source/queue.c **** 
 166:./Libraries/FreeRTOS/Source/queue.c **** /*
 167:./Libraries/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:./Libraries/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:./Libraries/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:./Libraries/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:./Libraries/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:./Libraries/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:./Libraries/FreeRTOS/Source/queue.c ****  */
 174:./Libraries/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:./Libraries/FreeRTOS/Source/queue.c **** 
 176:./Libraries/FreeRTOS/Source/queue.c **** /*
 177:./Libraries/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:./Libraries/FreeRTOS/Source/queue.c ****  *
 179:./Libraries/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:./Libraries/FreeRTOS/Source/queue.c ****  */
 181:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:./Libraries/FreeRTOS/Source/queue.c **** 
 183:./Libraries/FreeRTOS/Source/queue.c **** /*
 184:./Libraries/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:./Libraries/FreeRTOS/Source/queue.c ****  *
 186:./Libraries/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:./Libraries/FreeRTOS/Source/queue.c ****  */
 188:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:./Libraries/FreeRTOS/Source/queue.c **** 
 190:./Libraries/FreeRTOS/Source/queue.c **** /*
 191:./Libraries/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:./Libraries/FreeRTOS/Source/queue.c ****  * back of the queue.
 193:./Libraries/FreeRTOS/Source/queue.c ****  */
 194:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:./Libraries/FreeRTOS/Source/queue.c **** 
 196:./Libraries/FreeRTOS/Source/queue.c **** /*
 197:./Libraries/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 198:./Libraries/FreeRTOS/Source/queue.c ****  */
 199:./Libraries/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:./Libraries/FreeRTOS/Source/queue.c **** 
 201:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  /tmp/ccv5E8P7.s 			page 5


 202:./Libraries/FreeRTOS/Source/queue.c **** 	/*
 203:./Libraries/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:./Libraries/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 205:./Libraries/FreeRTOS/Source/queue.c **** 	 */
 206:./Libraries/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 207:./Libraries/FreeRTOS/Source/queue.c **** #endif
 208:./Libraries/FreeRTOS/Source/queue.c **** 
 209:./Libraries/FreeRTOS/Source/queue.c **** /*
 210:./Libraries/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:./Libraries/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 212:./Libraries/FreeRTOS/Source/queue.c ****  */
 213:./Libraries/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:./Libraries/FreeRTOS/Source/queue.c **** 
 215:./Libraries/FreeRTOS/Source/queue.c **** /*
 216:./Libraries/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:./Libraries/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:./Libraries/FreeRTOS/Source/queue.c ****  * as a mutex.
 219:./Libraries/FreeRTOS/Source/queue.c ****  */
 220:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:./Libraries/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:./Libraries/FreeRTOS/Source/queue.c **** #endif
 223:./Libraries/FreeRTOS/Source/queue.c **** 
 224:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:./Libraries/FreeRTOS/Source/queue.c **** 	/*
 226:./Libraries/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:./Libraries/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:./Libraries/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:./Libraries/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:./Libraries/FreeRTOS/Source/queue.c **** 	 * that priority.
 231:./Libraries/FreeRTOS/Source/queue.c **** 	 */
 232:./Libraries/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:./Libraries/FreeRTOS/Source/queue.c **** #endif
 234:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 235:./Libraries/FreeRTOS/Source/queue.c **** 
 236:./Libraries/FreeRTOS/Source/queue.c **** /*
 237:./Libraries/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:./Libraries/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 239:./Libraries/FreeRTOS/Source/queue.c ****  */
 240:./Libraries/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 241:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 242:./Libraries/FreeRTOS/Source/queue.c **** 	{														\
 243:./Libraries/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:./Libraries/FreeRTOS/Source/queue.c **** 		{													\
 245:./Libraries/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:./Libraries/FreeRTOS/Source/queue.c **** 		}													\
 247:./Libraries/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:./Libraries/FreeRTOS/Source/queue.c **** 		{													\
 249:./Libraries/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:./Libraries/FreeRTOS/Source/queue.c **** 		}													\
 251:./Libraries/FreeRTOS/Source/queue.c **** 	}														\
 252:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 253:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 254:./Libraries/FreeRTOS/Source/queue.c **** 
 255:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:./Libraries/FreeRTOS/Source/queue.c **** {
  29              		.loc 1 256 1
  30              		.cfi_startproc
ARM GAS  /tmp/ccv5E8P7.s 			page 6


  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  45 0008 3960     		str	r1, [r7]
 257:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
  46              		.loc 1 257 17
  47 000a 7B68     		ldr	r3, [r7, #4]
  48 000c FB60     		str	r3, [r7, #12]
 258:./Libraries/FreeRTOS/Source/queue.c **** 
 259:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
  49              		.loc 1 259 2
  50 000e FB68     		ldr	r3, [r7, #12]
  51 0010 002B     		cmp	r3, #0
  52 0012 0AD1     		bne	.L2
  53              	.LBB118:
  54              	.LBB119:
  55              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  /tmp/ccv5E8P7.s 			page 7


  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
ARM GAS  /tmp/ccv5E8P7.s 			page 8


  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
ARM GAS  /tmp/ccv5E8P7.s 			page 9


 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 2
  57              		.syntax unified
  58              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0014 4FF05003 			mov r3, #80												
  60 0018 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccv5E8P7.s 			page 10


  61 001c BFF36F8F 		isb														
  62 0020 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              		.thumb
  66              		.syntax unified
  67 0024 BB60     		str	r3, [r7, #8]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  68              		.loc 2 203 1
  69 0026 00BF     		nop
  70              	.L3:
  71              	.LBE119:
  72              	.LBE118:
  73              		.loc 1 259 2 discriminator 1
  74 0028 FEE7     		b	.L3
  75              	.L2:
 260:./Libraries/FreeRTOS/Source/queue.c **** 
 261:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  76              		.loc 1 261 2
  77 002a FFF7FEFF 		bl	vPortEnterCritical
 262:./Libraries/FreeRTOS/Source/queue.c **** 	{
 263:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
  78              		.loc 1 263 37
  79 002e FB68     		ldr	r3, [r7, #12]
  80 0030 1A68     		ldr	r2, [r3]
  81              		.loc 1 263 57
  82 0032 FB68     		ldr	r3, [r7, #12]
  83 0034 DB6B     		ldr	r3, [r3, #60]
  84              		.loc 1 263 77
  85 0036 F968     		ldr	r1, [r7, #12]
  86 0038 096C     		ldr	r1, [r1, #64]
  87              		.loc 1 263 68
  88 003a 01FB03F3 		mul	r3, r1, r3
  89              		.loc 1 263 46
  90 003e 1A44     		add	r2, r2, r3
  91              		.loc 1 263 28
  92 0040 FB68     		ldr	r3, [r7, #12]
  93 0042 9A60     		str	r2, [r3, #8]
 264:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  94              		.loc 1 264 30
  95 0044 FB68     		ldr	r3, [r7, #12]
  96 0046 0022     		movs	r2, #0
  97 0048 9A63     		str	r2, [r3, #56]
 265:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  98              		.loc 1 265 31
  99 004a FB68     		ldr	r3, [r7, #12]
 100 004c 1A68     		ldr	r2, [r3]
 101              		.loc 1 265 22
 102 004e FB68     		ldr	r3, [r7, #12]
 103 0050 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccv5E8P7.s 			page 11


 266:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 104              		.loc 1 266 41
 105 0052 FB68     		ldr	r3, [r7, #12]
 106 0054 1A68     		ldr	r2, [r3]
 107              		.loc 1 266 63
 108 0056 FB68     		ldr	r3, [r7, #12]
 109 0058 DB6B     		ldr	r3, [r3, #60]
 110              		.loc 1 266 74
 111 005a 013B     		subs	r3, r3, #1
 112              		.loc 1 266 90
 113 005c F968     		ldr	r1, [r7, #12]
 114 005e 096C     		ldr	r1, [r1, #64]
 115              		.loc 1 266 81
 116 0060 01FB03F3 		mul	r3, r1, r3
 117              		.loc 1 266 50
 118 0064 1A44     		add	r2, r2, r3
 119              		.loc 1 266 32
 120 0066 FB68     		ldr	r3, [r7, #12]
 121 0068 DA60     		str	r2, [r3, #12]
 267:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 122              		.loc 1 267 20
 123 006a FB68     		ldr	r3, [r7, #12]
 124 006c FF22     		movs	r2, #255
 125 006e 83F84420 		strb	r2, [r3, #68]
 268:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 126              		.loc 1 268 20
 127 0072 FB68     		ldr	r3, [r7, #12]
 128 0074 FF22     		movs	r2, #255
 129 0076 83F84520 		strb	r2, [r3, #69]
 269:./Libraries/FreeRTOS/Source/queue.c **** 
 270:./Libraries/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 130              		.loc 1 270 5
 131 007a 3B68     		ldr	r3, [r7]
 132 007c 002B     		cmp	r3, #0
 133 007e 14D1     		bne	.L4
 271:./Libraries/FreeRTOS/Source/queue.c **** 		{
 272:./Libraries/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:./Libraries/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:./Libraries/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:./Libraries/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:./Libraries/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 277:./Libraries/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 134              		.loc 1 277 8
 135 0080 FB68     		ldr	r3, [r7, #12]
 136 0082 1B69     		ldr	r3, [r3, #16]
 137              		.loc 1 277 6
 138 0084 002B     		cmp	r3, #0
 139 0086 1AD0     		beq	.L5
 278:./Libraries/FreeRTOS/Source/queue.c **** 			{
 279:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 140              		.loc 1 279 35
 141 0088 FB68     		ldr	r3, [r7, #12]
 142 008a 1033     		adds	r3, r3, #16
 143              		.loc 1 279 9
 144 008c 1846     		mov	r0, r3
 145 008e FFF7FEFF 		bl	xTaskRemoveFromEventList
 146 0092 0346     		mov	r3, r0
ARM GAS  /tmp/ccv5E8P7.s 			page 12


 147              		.loc 1 279 7
 148 0094 002B     		cmp	r3, #0
 149 0096 12D0     		beq	.L5
 280:./Libraries/FreeRTOS/Source/queue.c **** 				{
 281:./Libraries/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 150              		.loc 1 281 6
 151 0098 0C4B     		ldr	r3, .L7
 152 009a 4FF08052 		mov	r2, #268435456
 153 009e 1A60     		str	r2, [r3]
 154              		.syntax unified
 155              	@ 281 "./Libraries/FreeRTOS/Source/queue.c" 1
 156 00a0 BFF34F8F 		dsb
 157              	@ 0 "" 2
 158              	@ 281 "./Libraries/FreeRTOS/Source/queue.c" 1
 159 00a4 BFF36F8F 		isb
 160              	@ 0 "" 2
 161              		.thumb
 162              		.syntax unified
 163 00a8 09E0     		b	.L5
 164              	.L4:
 282:./Libraries/FreeRTOS/Source/queue.c **** 				}
 283:./Libraries/FreeRTOS/Source/queue.c **** 				else
 284:./Libraries/FreeRTOS/Source/queue.c **** 				{
 285:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:./Libraries/FreeRTOS/Source/queue.c **** 				}
 287:./Libraries/FreeRTOS/Source/queue.c **** 			}
 288:./Libraries/FreeRTOS/Source/queue.c **** 			else
 289:./Libraries/FreeRTOS/Source/queue.c **** 			{
 290:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:./Libraries/FreeRTOS/Source/queue.c **** 			}
 292:./Libraries/FreeRTOS/Source/queue.c **** 		}
 293:./Libraries/FreeRTOS/Source/queue.c **** 		else
 294:./Libraries/FreeRTOS/Source/queue.c **** 		{
 295:./Libraries/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:./Libraries/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 165              		.loc 1 296 4
 166 00aa FB68     		ldr	r3, [r7, #12]
 167 00ac 1033     		adds	r3, r3, #16
 168 00ae 1846     		mov	r0, r3
 169 00b0 FFF7FEFF 		bl	vListInitialise
 297:./Libraries/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 170              		.loc 1 297 4
 171 00b4 FB68     		ldr	r3, [r7, #12]
 172 00b6 2433     		adds	r3, r3, #36
 173 00b8 1846     		mov	r0, r3
 174 00ba FFF7FEFF 		bl	vListInitialise
 175              	.L5:
 298:./Libraries/FreeRTOS/Source/queue.c **** 		}
 299:./Libraries/FreeRTOS/Source/queue.c **** 	}
 300:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 176              		.loc 1 300 2
 177 00be FFF7FEFF 		bl	vPortExitCritical
 301:./Libraries/FreeRTOS/Source/queue.c **** 
 302:./Libraries/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:./Libraries/FreeRTOS/Source/queue.c **** 	versions. */
 304:./Libraries/FreeRTOS/Source/queue.c **** 	return pdPASS;
 178              		.loc 1 304 9
ARM GAS  /tmp/ccv5E8P7.s 			page 13


 179 00c2 0123     		movs	r3, #1
 305:./Libraries/FreeRTOS/Source/queue.c **** }
 180              		.loc 1 305 1
 181 00c4 1846     		mov	r0, r3
 182 00c6 1037     		adds	r7, r7, #16
 183              	.LCFI3:
 184              		.cfi_def_cfa_offset 8
 185 00c8 BD46     		mov	sp, r7
 186              	.LCFI4:
 187              		.cfi_def_cfa_register 13
 188              		@ sp needed
 189 00ca 80BD     		pop	{r7, pc}
 190              	.L8:
 191              		.align	2
 192              	.L7:
 193 00cc 04ED00E0 		.word	-536810236
 194              		.cfi_endproc
 195              	.LFE4:
 197              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 198              		.align	1
 199              		.global	xQueueGenericCreateStatic
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu fpv5-d16
 205              	xQueueGenericCreateStatic:
 206              	.LFB5:
 306:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 307:./Libraries/FreeRTOS/Source/queue.c **** 
 308:./Libraries/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:./Libraries/FreeRTOS/Source/queue.c **** 
 310:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:./Libraries/FreeRTOS/Source/queue.c **** 	{
 207              		.loc 1 311 2
 208              		.cfi_startproc
 209              		@ args = 4, pretend = 0, frame = 48
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 80B5     		push	{r7, lr}
 212              	.LCFI5:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 8EB0     		sub	sp, sp, #56
 217              	.LCFI6:
 218              		.cfi_def_cfa_offset 64
 219 0004 02AF     		add	r7, sp, #8
 220              	.LCFI7:
 221              		.cfi_def_cfa 7, 56
 222 0006 F860     		str	r0, [r7, #12]
 223 0008 B960     		str	r1, [r7, #8]
 224 000a 7A60     		str	r2, [r7, #4]
 225 000c 3B60     		str	r3, [r7]
 312:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 313:./Libraries/FreeRTOS/Source/queue.c **** 
 314:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 226              		.loc 1 314 3
 227 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccv5E8P7.s 			page 14


 228 0010 002B     		cmp	r3, #0
 229 0012 0AD1     		bne	.L10
 230              	.LBB120:
 231              	.LBB121:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 232              		.loc 2 195 2
 233              		.syntax unified
 234              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 235 0014 4FF05003 			mov r3, #80												
 236 0018 83F31188 		msr basepri, r3											
 237 001c BFF36F8F 		isb														
 238 0020 BFF34F8F 		dsb														
 239              	
 240              	@ 0 "" 2
 241              		.thumb
 242              		.syntax unified
 243 0024 BB62     		str	r3, [r7, #40]
 244              		.loc 2 203 1
 245 0026 00BF     		nop
 246              	.L11:
 247              	.LBE121:
 248              	.LBE120:
 249              		.loc 1 314 3 discriminator 1
 250 0028 FEE7     		b	.L11
 251              	.L10:
 315:./Libraries/FreeRTOS/Source/queue.c **** 
 316:./Libraries/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:./Libraries/FreeRTOS/Source/queue.c **** 		supplied. */
 318:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 252              		.loc 1 318 3
 253 002a 3B68     		ldr	r3, [r7]
 254 002c 002B     		cmp	r3, #0
 255 002e 0AD1     		bne	.L12
 256              	.LBB122:
 257              	.LBB123:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 258              		.loc 2 195 2
 259              		.syntax unified
 260              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 261 0030 4FF05003 			mov r3, #80												
 262 0034 83F31188 		msr basepri, r3											
 263 0038 BFF36F8F 		isb														
 264 003c BFF34F8F 		dsb														
 265              	
 266              	@ 0 "" 2
 267              		.thumb
 268              		.syntax unified
 269 0040 7B62     		str	r3, [r7, #36]
 270              		.loc 2 203 1
 271 0042 00BF     		nop
 272              	.L13:
 273              	.LBE123:
 274              	.LBE122:
 275              		.loc 1 318 3 discriminator 2
 276 0044 FEE7     		b	.L13
 277              	.L12:
 319:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 15


 320:./Libraries/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:./Libraries/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 322:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 278              		.loc 1 322 3
 279 0046 7B68     		ldr	r3, [r7, #4]
 280 0048 002B     		cmp	r3, #0
 281 004a 02D0     		beq	.L14
 282              		.loc 1 322 3 is_stmt 0 discriminator 2
 283 004c BB68     		ldr	r3, [r7, #8]
 284 004e 002B     		cmp	r3, #0
 285 0050 01D0     		beq	.L15
 286              	.L14:
 287              		.loc 1 322 3 discriminator 3
 288 0052 0123     		movs	r3, #1
 289 0054 00E0     		b	.L16
 290              	.L15:
 291              		.loc 1 322 3 discriminator 4
 292 0056 0023     		movs	r3, #0
 293              	.L16:
 294              		.loc 1 322 3 discriminator 6
 295 0058 002B     		cmp	r3, #0
 296 005a 0AD1     		bne	.L17
 297              	.LBB124:
 298              	.LBB125:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 299              		.loc 2 195 2 is_stmt 1
 300              		.syntax unified
 301              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 302 005c 4FF05003 			mov r3, #80												
 303 0060 83F31188 		msr basepri, r3											
 304 0064 BFF36F8F 		isb														
 305 0068 BFF34F8F 		dsb														
 306              	
 307              	@ 0 "" 2
 308              		.thumb
 309              		.syntax unified
 310 006c 3B62     		str	r3, [r7, #32]
 311              		.loc 2 203 1
 312 006e 00BF     		nop
 313              	.L18:
 314              	.LBE125:
 315              	.LBE124:
 316              		.loc 1 322 3 discriminator 3
 317 0070 FEE7     		b	.L18
 318              	.L17:
 323:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 319              		.loc 1 323 3
 320 0072 7B68     		ldr	r3, [r7, #4]
 321 0074 002B     		cmp	r3, #0
 322 0076 02D1     		bne	.L19
 323              		.loc 1 323 3 is_stmt 0 discriminator 2
 324 0078 BB68     		ldr	r3, [r7, #8]
 325 007a 002B     		cmp	r3, #0
 326 007c 01D1     		bne	.L20
 327              	.L19:
 328              		.loc 1 323 3 discriminator 3
 329 007e 0123     		movs	r3, #1
ARM GAS  /tmp/ccv5E8P7.s 			page 16


 330 0080 00E0     		b	.L21
 331              	.L20:
 332              		.loc 1 323 3 discriminator 4
 333 0082 0023     		movs	r3, #0
 334              	.L21:
 335              		.loc 1 323 3 discriminator 6
 336 0084 002B     		cmp	r3, #0
 337 0086 0AD1     		bne	.L22
 338              	.LBB126:
 339              	.LBB127:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 340              		.loc 2 195 2 is_stmt 1
 341              		.syntax unified
 342              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 343 0088 4FF05003 			mov r3, #80												
 344 008c 83F31188 		msr basepri, r3											
 345 0090 BFF36F8F 		isb														
 346 0094 BFF34F8F 		dsb														
 347              	
 348              	@ 0 "" 2
 349              		.thumb
 350              		.syntax unified
 351 0098 FB61     		str	r3, [r7, #28]
 352              		.loc 2 203 1
 353 009a 00BF     		nop
 354              	.L23:
 355              	.LBE127:
 356              	.LBE126:
 357              		.loc 1 323 3 discriminator 4
 358 009c FEE7     		b	.L23
 359              	.L22:
 360              	.LBB128:
 324:./Libraries/FreeRTOS/Source/queue.c **** 
 325:./Libraries/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:./Libraries/FreeRTOS/Source/queue.c **** 		{
 327:./Libraries/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:./Libraries/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:./Libraries/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 330:./Libraries/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 361              		.loc 1 330 20
 362 009e 5023     		movs	r3, #80
 363 00a0 7B61     		str	r3, [r7, #20]
 331:./Libraries/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 364              		.loc 1 331 4
 365 00a2 7B69     		ldr	r3, [r7, #20]
 366 00a4 502B     		cmp	r3, #80
 367 00a6 0AD0     		beq	.L24
 368              	.LBB129:
 369              	.LBB130:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 370              		.loc 2 195 2
 371              		.syntax unified
 372              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 373 00a8 4FF05003 			mov r3, #80												
 374 00ac 83F31188 		msr basepri, r3											
 375 00b0 BFF36F8F 		isb														
 376 00b4 BFF34F8F 		dsb														
ARM GAS  /tmp/ccv5E8P7.s 			page 17


 377              	
 378              	@ 0 "" 2
 379              		.thumb
 380              		.syntax unified
 381 00b8 BB61     		str	r3, [r7, #24]
 382              		.loc 2 203 1
 383 00ba 00BF     		nop
 384              	.L25:
 385              	.LBE130:
 386              	.LBE129:
 387              		.loc 1 331 4 discriminator 5
 388 00bc FEE7     		b	.L25
 389              	.L24:
 332:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 390              		.loc 1 332 4
 391 00be 7B69     		ldr	r3, [r7, #20]
 392              	.LBE128:
 333:./Libraries/FreeRTOS/Source/queue.c **** 		}
 334:./Libraries/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:./Libraries/FreeRTOS/Source/queue.c **** 
 336:./Libraries/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:./Libraries/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:./Libraries/FreeRTOS/Source/queue.c **** 		but is already set. */
 339:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 393              		.loc 1 339 14
 394 00c0 3B68     		ldr	r3, [r7]
 395 00c2 FB62     		str	r3, [r7, #44]
 340:./Libraries/FreeRTOS/Source/queue.c **** 
 341:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 396              		.loc 1 341 5
 397 00c4 FB6A     		ldr	r3, [r7, #44]
 398 00c6 002B     		cmp	r3, #0
 399 00c8 0DD0     		beq	.L26
 342:./Libraries/FreeRTOS/Source/queue.c **** 		{
 343:./Libraries/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:./Libraries/FreeRTOS/Source/queue.c **** 			{
 345:./Libraries/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:./Libraries/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 347:./Libraries/FreeRTOS/Source/queue.c **** 				later deleted. */
 348:./Libraries/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 400              		.loc 1 348 39
 401 00ca FB6A     		ldr	r3, [r7, #44]
 402 00cc 0122     		movs	r2, #1
 403 00ce 83F84620 		strb	r2, [r3, #70]
 349:./Libraries/FreeRTOS/Source/queue.c **** 			}
 350:./Libraries/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:./Libraries/FreeRTOS/Source/queue.c **** 
 352:./Libraries/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 404              		.loc 1 352 4
 405 00d2 97F83820 		ldrb	r2, [r7, #56]	@ zero_extendqisi2
 406 00d6 FB6A     		ldr	r3, [r7, #44]
 407 00d8 0093     		str	r3, [sp]
 408 00da 1346     		mov	r3, r2
 409 00dc 7A68     		ldr	r2, [r7, #4]
 410 00de B968     		ldr	r1, [r7, #8]
 411 00e0 F868     		ldr	r0, [r7, #12]
 412 00e2 FFF7FEFF 		bl	prvInitialiseNewQueue
ARM GAS  /tmp/ccv5E8P7.s 			page 18


 413              	.L26:
 353:./Libraries/FreeRTOS/Source/queue.c **** 		}
 354:./Libraries/FreeRTOS/Source/queue.c **** 		else
 355:./Libraries/FreeRTOS/Source/queue.c **** 		{
 356:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:./Libraries/FreeRTOS/Source/queue.c **** 		}
 359:./Libraries/FreeRTOS/Source/queue.c **** 
 360:./Libraries/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 414              		.loc 1 360 10
 415 00e6 FB6A     		ldr	r3, [r7, #44]
 361:./Libraries/FreeRTOS/Source/queue.c **** 	}
 416              		.loc 1 361 2
 417 00e8 1846     		mov	r0, r3
 418 00ea 3037     		adds	r7, r7, #48
 419              	.LCFI8:
 420              		.cfi_def_cfa_offset 8
 421 00ec BD46     		mov	sp, r7
 422              	.LCFI9:
 423              		.cfi_def_cfa_register 13
 424              		@ sp needed
 425 00ee 80BD     		pop	{r7, pc}
 426              		.cfi_endproc
 427              	.LFE5:
 429              		.section	.text.xQueueGenericCreate,"ax",%progbits
 430              		.align	1
 431              		.global	xQueueGenericCreate
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv5-d16
 437              	xQueueGenericCreate:
 438              	.LFB6:
 362:./Libraries/FreeRTOS/Source/queue.c **** 
 363:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 365:./Libraries/FreeRTOS/Source/queue.c **** 
 366:./Libraries/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:./Libraries/FreeRTOS/Source/queue.c **** 
 368:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:./Libraries/FreeRTOS/Source/queue.c **** 	{
 439              		.loc 1 369 2
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 32
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443 0000 80B5     		push	{r7, lr}
 444              	.LCFI10:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 7, -8
 447              		.cfi_offset 14, -4
 448 0002 8AB0     		sub	sp, sp, #40
 449              	.LCFI11:
 450              		.cfi_def_cfa_offset 48
 451 0004 02AF     		add	r7, sp, #8
 452              	.LCFI12:
 453              		.cfi_def_cfa 7, 40
 454 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccv5E8P7.s 			page 19


 455 0008 B960     		str	r1, [r7, #8]
 456 000a 1346     		mov	r3, r2
 457 000c FB71     		strb	r3, [r7, #7]
 370:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 371:./Libraries/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 372:./Libraries/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 373:./Libraries/FreeRTOS/Source/queue.c **** 
 374:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 458              		.loc 1 374 3
 459 000e FB68     		ldr	r3, [r7, #12]
 460 0010 002B     		cmp	r3, #0
 461 0012 0AD1     		bne	.L29
 462              	.LBB131:
 463              	.LBB132:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 464              		.loc 2 195 2
 465              		.syntax unified
 466              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 467 0014 4FF05003 			mov r3, #80												
 468 0018 83F31188 		msr basepri, r3											
 469 001c BFF36F8F 		isb														
 470 0020 BFF34F8F 		dsb														
 471              	
 472              	@ 0 "" 2
 473              		.thumb
 474              		.syntax unified
 475 0024 3B61     		str	r3, [r7, #16]
 476              		.loc 2 203 1
 477 0026 00BF     		nop
 478              	.L30:
 479              	.LBE132:
 480              	.LBE131:
 481              		.loc 1 374 3 discriminator 1
 482 0028 FEE7     		b	.L30
 483              	.L29:
 375:./Libraries/FreeRTOS/Source/queue.c **** 
 376:./Libraries/FreeRTOS/Source/queue.c **** 		/* Allocate enough space to hold the maximum number of items that
 377:./Libraries/FreeRTOS/Source/queue.c **** 		can be in the queue at any time.  It is valid for uxItemSize to be
 378:./Libraries/FreeRTOS/Source/queue.c **** 		zero in the case the queue is used as a semaphore. */
 379:./Libraries/FreeRTOS/Source/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as th
 484              		.loc 1 379 21
 485 002a FB68     		ldr	r3, [r7, #12]
 486 002c BA68     		ldr	r2, [r7, #8]
 487 002e 02FB03F3 		mul	r3, r2, r3
 488 0032 FB61     		str	r3, [r7, #28]
 380:./Libraries/FreeRTOS/Source/queue.c **** 
 381:./Libraries/FreeRTOS/Source/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 382:./Libraries/FreeRTOS/Source/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 383:./Libraries/FreeRTOS/Source/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 384:./Libraries/FreeRTOS/Source/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 385:./Libraries/FreeRTOS/Source/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 386:./Libraries/FreeRTOS/Source/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 387:./Libraries/FreeRTOS/Source/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 388:./Libraries/FreeRTOS/Source/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 389:./Libraries/FreeRTOS/Source/queue.c **** 		two bytes). */
 390:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 489              		.loc 1 390 30
ARM GAS  /tmp/ccv5E8P7.s 			page 20


 490 0034 FB69     		ldr	r3, [r7, #28]
 491 0036 5033     		adds	r3, r3, #80
 492 0038 1846     		mov	r0, r3
 493 003a FFF7FEFF 		bl	pvPortMalloc
 494 003e B861     		str	r0, [r7, #24]
 391:./Libraries/FreeRTOS/Source/queue.c **** 
 392:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 495              		.loc 1 392 5
 496 0040 BB69     		ldr	r3, [r7, #24]
 497 0042 002B     		cmp	r3, #0
 498 0044 11D0     		beq	.L31
 393:./Libraries/FreeRTOS/Source/queue.c **** 		{
 394:./Libraries/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 395:./Libraries/FreeRTOS/Source/queue.c **** 			storage area. */
 396:./Libraries/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 499              		.loc 1 396 20
 500 0046 BB69     		ldr	r3, [r7, #24]
 501 0048 7B61     		str	r3, [r7, #20]
 397:./Libraries/FreeRTOS/Source/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 502              		.loc 1 397 20
 503 004a 7B69     		ldr	r3, [r7, #20]
 504 004c 5033     		adds	r3, r3, #80
 505 004e 7B61     		str	r3, [r7, #20]
 398:./Libraries/FreeRTOS/Source/queue.c **** 
 399:./Libraries/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 400:./Libraries/FreeRTOS/Source/queue.c **** 			{
 401:./Libraries/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 402:./Libraries/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 403:./Libraries/FreeRTOS/Source/queue.c **** 				deleted. */
 404:./Libraries/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 506              		.loc 1 404 39
 507 0050 BB69     		ldr	r3, [r7, #24]
 508 0052 0022     		movs	r2, #0
 509 0054 83F84620 		strb	r2, [r3, #70]
 405:./Libraries/FreeRTOS/Source/queue.c **** 			}
 406:./Libraries/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 407:./Libraries/FreeRTOS/Source/queue.c **** 
 408:./Libraries/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 510              		.loc 1 408 4
 511 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 512 005a BB69     		ldr	r3, [r7, #24]
 513 005c 0093     		str	r3, [sp]
 514 005e 1346     		mov	r3, r2
 515 0060 7A69     		ldr	r2, [r7, #20]
 516 0062 B968     		ldr	r1, [r7, #8]
 517 0064 F868     		ldr	r0, [r7, #12]
 518 0066 FFF7FEFF 		bl	prvInitialiseNewQueue
 519              	.L31:
 409:./Libraries/FreeRTOS/Source/queue.c **** 		}
 410:./Libraries/FreeRTOS/Source/queue.c **** 		else
 411:./Libraries/FreeRTOS/Source/queue.c **** 		{
 412:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 413:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 414:./Libraries/FreeRTOS/Source/queue.c **** 		}
 415:./Libraries/FreeRTOS/Source/queue.c **** 
 416:./Libraries/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 520              		.loc 1 416 10
ARM GAS  /tmp/ccv5E8P7.s 			page 21


 521 006a BB69     		ldr	r3, [r7, #24]
 417:./Libraries/FreeRTOS/Source/queue.c **** 	}
 522              		.loc 1 417 2
 523 006c 1846     		mov	r0, r3
 524 006e 2037     		adds	r7, r7, #32
 525              	.LCFI13:
 526              		.cfi_def_cfa_offset 8
 527 0070 BD46     		mov	sp, r7
 528              	.LCFI14:
 529              		.cfi_def_cfa_register 13
 530              		@ sp needed
 531 0072 80BD     		pop	{r7, pc}
 532              		.cfi_endproc
 533              	.LFE6:
 535              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 536              		.align	1
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv5-d16
 542              	prvInitialiseNewQueue:
 543              	.LFB7:
 418:./Libraries/FreeRTOS/Source/queue.c **** 
 419:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 420:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 421:./Libraries/FreeRTOS/Source/queue.c **** 
 422:./Libraries/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 423:./Libraries/FreeRTOS/Source/queue.c **** {
 544              		.loc 1 423 1
 545              		.cfi_startproc
 546              		@ args = 4, pretend = 0, frame = 16
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 80B5     		push	{r7, lr}
 549              	.LCFI15:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 84B0     		sub	sp, sp, #16
 554              	.LCFI16:
 555              		.cfi_def_cfa_offset 24
 556 0004 00AF     		add	r7, sp, #0
 557              	.LCFI17:
 558              		.cfi_def_cfa_register 7
 559 0006 F860     		str	r0, [r7, #12]
 560 0008 B960     		str	r1, [r7, #8]
 561 000a 7A60     		str	r2, [r7, #4]
 562 000c FB70     		strb	r3, [r7, #3]
 424:./Libraries/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 425:./Libraries/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 426:./Libraries/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 427:./Libraries/FreeRTOS/Source/queue.c **** 
 428:./Libraries/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 563              		.loc 1 428 4
 564 000e BB68     		ldr	r3, [r7, #8]
 565 0010 002B     		cmp	r3, #0
 566 0012 03D1     		bne	.L34
 429:./Libraries/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/ccv5E8P7.s 			page 22


 430:./Libraries/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 431:./Libraries/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 432:./Libraries/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 433:./Libraries/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 434:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 567              		.loc 1 434 22
 568 0014 BB69     		ldr	r3, [r7, #24]
 569 0016 BA69     		ldr	r2, [r7, #24]
 570 0018 1A60     		str	r2, [r3]
 571 001a 02E0     		b	.L35
 572              	.L34:
 435:./Libraries/FreeRTOS/Source/queue.c **** 	}
 436:./Libraries/FreeRTOS/Source/queue.c **** 	else
 437:./Libraries/FreeRTOS/Source/queue.c **** 	{
 438:./Libraries/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 439:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 573              		.loc 1 439 22
 574 001c BB69     		ldr	r3, [r7, #24]
 575 001e 7A68     		ldr	r2, [r7, #4]
 576 0020 1A60     		str	r2, [r3]
 577              	.L35:
 440:./Libraries/FreeRTOS/Source/queue.c **** 	}
 441:./Libraries/FreeRTOS/Source/queue.c **** 
 442:./Libraries/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 443:./Libraries/FreeRTOS/Source/queue.c **** 	defined. */
 444:./Libraries/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 578              		.loc 1 444 23
 579 0022 BB69     		ldr	r3, [r7, #24]
 580 0024 FA68     		ldr	r2, [r7, #12]
 581 0026 DA63     		str	r2, [r3, #60]
 445:./Libraries/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 582              		.loc 1 445 25
 583 0028 BB69     		ldr	r3, [r7, #24]
 584 002a BA68     		ldr	r2, [r7, #8]
 585 002c 1A64     		str	r2, [r3, #64]
 446:./Libraries/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 586              		.loc 1 446 11
 587 002e 0121     		movs	r1, #1
 588 0030 B869     		ldr	r0, [r7, #24]
 589 0032 FFF7FEFF 		bl	xQueueGenericReset
 447:./Libraries/FreeRTOS/Source/queue.c **** 
 448:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 449:./Libraries/FreeRTOS/Source/queue.c **** 	{
 450:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 590              		.loc 1 450 27
 591 0036 BB69     		ldr	r3, [r7, #24]
 592 0038 FA78     		ldrb	r2, [r7, #3]
 593 003a 83F84C20 		strb	r2, [r3, #76]
 451:./Libraries/FreeRTOS/Source/queue.c **** 	}
 452:./Libraries/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 453:./Libraries/FreeRTOS/Source/queue.c **** 
 454:./Libraries/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 455:./Libraries/FreeRTOS/Source/queue.c **** 	{
 456:./Libraries/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 457:./Libraries/FreeRTOS/Source/queue.c **** 	}
 458:./Libraries/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 459:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 23


 460:./Libraries/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 461:./Libraries/FreeRTOS/Source/queue.c **** }
 594              		.loc 1 461 1
 595 003e 00BF     		nop
 596 0040 1037     		adds	r7, r7, #16
 597              	.LCFI18:
 598              		.cfi_def_cfa_offset 8
 599 0042 BD46     		mov	sp, r7
 600              	.LCFI19:
 601              		.cfi_def_cfa_register 13
 602              		@ sp needed
 603 0044 80BD     		pop	{r7, pc}
 604              		.cfi_endproc
 605              	.LFE7:
 607              		.section	.text.prvInitialiseMutex,"ax",%progbits
 608              		.align	1
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv5-d16
 614              	prvInitialiseMutex:
 615              	.LFB8:
 462:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 463:./Libraries/FreeRTOS/Source/queue.c **** 
 464:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 465:./Libraries/FreeRTOS/Source/queue.c **** 
 466:./Libraries/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 467:./Libraries/FreeRTOS/Source/queue.c **** 	{
 616              		.loc 1 467 2
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 8
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620 0000 80B5     		push	{r7, lr}
 621              	.LCFI20:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 82B0     		sub	sp, sp, #8
 626              	.LCFI21:
 627              		.cfi_def_cfa_offset 16
 628 0004 00AF     		add	r7, sp, #0
 629              	.LCFI22:
 630              		.cfi_def_cfa_register 7
 631 0006 7860     		str	r0, [r7, #4]
 468:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 632              		.loc 1 468 5
 633 0008 7B68     		ldr	r3, [r7, #4]
 634 000a 002B     		cmp	r3, #0
 635 000c 0ED0     		beq	.L38
 469:./Libraries/FreeRTOS/Source/queue.c **** 		{
 470:./Libraries/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 471:./Libraries/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 472:./Libraries/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 473:./Libraries/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 474:./Libraries/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 636              		.loc 1 474 42
 637 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccv5E8P7.s 			page 24


 638 0010 0022     		movs	r2, #0
 639 0012 9A60     		str	r2, [r3, #8]
 475:./Libraries/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 640              		.loc 1 475 28
 641 0014 7B68     		ldr	r3, [r7, #4]
 642 0016 0022     		movs	r2, #0
 643 0018 1A60     		str	r2, [r3]
 476:./Libraries/FreeRTOS/Source/queue.c **** 
 477:./Libraries/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 478:./Libraries/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 644              		.loc 1 478 50
 645 001a 7B68     		ldr	r3, [r7, #4]
 646 001c 0022     		movs	r2, #0
 647 001e DA60     		str	r2, [r3, #12]
 479:./Libraries/FreeRTOS/Source/queue.c **** 
 480:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 481:./Libraries/FreeRTOS/Source/queue.c **** 
 482:./Libraries/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 483:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 648              		.loc 1 483 13
 649 0020 0023     		movs	r3, #0
 650 0022 0022     		movs	r2, #0
 651 0024 0021     		movs	r1, #0
 652 0026 7868     		ldr	r0, [r7, #4]
 653 0028 FFF7FEFF 		bl	xQueueGenericSend
 654              	.L38:
 484:./Libraries/FreeRTOS/Source/queue.c **** 		}
 485:./Libraries/FreeRTOS/Source/queue.c **** 		else
 486:./Libraries/FreeRTOS/Source/queue.c **** 		{
 487:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 488:./Libraries/FreeRTOS/Source/queue.c **** 		}
 489:./Libraries/FreeRTOS/Source/queue.c **** 	}
 655              		.loc 1 489 2
 656 002c 00BF     		nop
 657 002e 0837     		adds	r7, r7, #8
 658              	.LCFI23:
 659              		.cfi_def_cfa_offset 8
 660 0030 BD46     		mov	sp, r7
 661              	.LCFI24:
 662              		.cfi_def_cfa_register 13
 663              		@ sp needed
 664 0032 80BD     		pop	{r7, pc}
 665              		.cfi_endproc
 666              	.LFE8:
 668              		.section	.text.xQueueCreateMutex,"ax",%progbits
 669              		.align	1
 670              		.global	xQueueCreateMutex
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv5-d16
 676              	xQueueCreateMutex:
 677              	.LFB9:
 490:./Libraries/FreeRTOS/Source/queue.c **** 
 491:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 492:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 493:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 25


 494:./Libraries/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 495:./Libraries/FreeRTOS/Source/queue.c **** 
 496:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 497:./Libraries/FreeRTOS/Source/queue.c **** 	{
 678              		.loc 1 497 2
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 24
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682 0000 80B5     		push	{r7, lr}
 683              	.LCFI25:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 86B0     		sub	sp, sp, #24
 688              	.LCFI26:
 689              		.cfi_def_cfa_offset 32
 690 0004 00AF     		add	r7, sp, #0
 691              	.LCFI27:
 692              		.cfi_def_cfa_register 7
 693 0006 0346     		mov	r3, r0
 694 0008 FB71     		strb	r3, [r7, #7]
 498:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 499:./Libraries/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 695              		.loc 1 499 20
 696 000a 0123     		movs	r3, #1
 697 000c 7B61     		str	r3, [r7, #20]
 698              		.loc 1 499 55
 699 000e 0023     		movs	r3, #0
 700 0010 3B61     		str	r3, [r7, #16]
 500:./Libraries/FreeRTOS/Source/queue.c **** 
 501:./Libraries/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 701              		.loc 1 501 15
 702 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 703 0014 1A46     		mov	r2, r3
 704 0016 3969     		ldr	r1, [r7, #16]
 705 0018 7869     		ldr	r0, [r7, #20]
 706 001a FFF7FEFF 		bl	xQueueGenericCreate
 707 001e F860     		str	r0, [r7, #12]
 502:./Libraries/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 708              		.loc 1 502 3
 709 0020 F868     		ldr	r0, [r7, #12]
 710 0022 FFF7FEFF 		bl	prvInitialiseMutex
 503:./Libraries/FreeRTOS/Source/queue.c **** 
 504:./Libraries/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 711              		.loc 1 504 10
 712 0026 FB68     		ldr	r3, [r7, #12]
 505:./Libraries/FreeRTOS/Source/queue.c **** 	}
 713              		.loc 1 505 2
 714 0028 1846     		mov	r0, r3
 715 002a 1837     		adds	r7, r7, #24
 716              	.LCFI28:
 717              		.cfi_def_cfa_offset 8
 718 002c BD46     		mov	sp, r7
 719              	.LCFI29:
 720              		.cfi_def_cfa_register 13
 721              		@ sp needed
 722 002e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccv5E8P7.s 			page 26


 723              		.cfi_endproc
 724              	.LFE9:
 726              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 727              		.align	1
 728              		.global	xQueueCreateMutexStatic
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu fpv5-d16
 734              	xQueueCreateMutexStatic:
 735              	.LFB10:
 506:./Libraries/FreeRTOS/Source/queue.c **** 
 507:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 508:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 509:./Libraries/FreeRTOS/Source/queue.c **** 
 510:./Libraries/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 511:./Libraries/FreeRTOS/Source/queue.c **** 
 512:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 513:./Libraries/FreeRTOS/Source/queue.c **** 	{
 736              		.loc 1 513 2
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 24
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740 0000 80B5     		push	{r7, lr}
 741              	.LCFI30:
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 7, -8
 744              		.cfi_offset 14, -4
 745 0002 88B0     		sub	sp, sp, #32
 746              	.LCFI31:
 747              		.cfi_def_cfa_offset 40
 748 0004 02AF     		add	r7, sp, #8
 749              	.LCFI32:
 750              		.cfi_def_cfa 7, 32
 751 0006 0346     		mov	r3, r0
 752 0008 3960     		str	r1, [r7]
 753 000a FB71     		strb	r3, [r7, #7]
 514:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 515:./Libraries/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 754              		.loc 1 515 20
 755 000c 0123     		movs	r3, #1
 756 000e 7B61     		str	r3, [r7, #20]
 757              		.loc 1 515 55
 758 0010 0023     		movs	r3, #0
 759 0012 3B61     		str	r3, [r7, #16]
 516:./Libraries/FreeRTOS/Source/queue.c **** 
 517:./Libraries/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 518:./Libraries/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 519:./Libraries/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 520:./Libraries/FreeRTOS/Source/queue.c **** 
 521:./Libraries/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 760              		.loc 1 521 15
 761 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 762 0016 0093     		str	r3, [sp]
 763 0018 3B68     		ldr	r3, [r7]
 764 001a 0022     		movs	r2, #0
 765 001c 3969     		ldr	r1, [r7, #16]
ARM GAS  /tmp/ccv5E8P7.s 			page 27


 766 001e 7869     		ldr	r0, [r7, #20]
 767 0020 FFF7FEFF 		bl	xQueueGenericCreateStatic
 768 0024 F860     		str	r0, [r7, #12]
 522:./Libraries/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 769              		.loc 1 522 3
 770 0026 F868     		ldr	r0, [r7, #12]
 771 0028 FFF7FEFF 		bl	prvInitialiseMutex
 523:./Libraries/FreeRTOS/Source/queue.c **** 
 524:./Libraries/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 772              		.loc 1 524 10
 773 002c FB68     		ldr	r3, [r7, #12]
 525:./Libraries/FreeRTOS/Source/queue.c **** 	}
 774              		.loc 1 525 2
 775 002e 1846     		mov	r0, r3
 776 0030 1837     		adds	r7, r7, #24
 777              	.LCFI33:
 778              		.cfi_def_cfa_offset 8
 779 0032 BD46     		mov	sp, r7
 780              	.LCFI34:
 781              		.cfi_def_cfa_register 13
 782              		@ sp needed
 783 0034 80BD     		pop	{r7, pc}
 784              		.cfi_endproc
 785              	.LFE10:
 787              		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 788              		.align	1
 789              		.global	xQueueGetMutexHolder
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 793              		.fpu fpv5-d16
 795              	xQueueGetMutexHolder:
 796              	.LFB11:
 526:./Libraries/FreeRTOS/Source/queue.c **** 
 527:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 528:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 529:./Libraries/FreeRTOS/Source/queue.c **** 
 530:./Libraries/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 531:./Libraries/FreeRTOS/Source/queue.c **** 
 532:./Libraries/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 533:./Libraries/FreeRTOS/Source/queue.c **** 	{
 797              		.loc 1 533 2
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 80B5     		push	{r7, lr}
 802              	.LCFI35:
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 84B0     		sub	sp, sp, #16
 807              	.LCFI36:
 808              		.cfi_def_cfa_offset 24
 809 0004 00AF     		add	r7, sp, #0
 810              	.LCFI37:
 811              		.cfi_def_cfa_register 7
 812 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccv5E8P7.s 			page 28


 534:./Libraries/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 535:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 813              		.loc 1 535 18
 814 0008 7B68     		ldr	r3, [r7, #4]
 815 000a BB60     		str	r3, [r7, #8]
 536:./Libraries/FreeRTOS/Source/queue.c **** 
 537:./Libraries/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 538:./Libraries/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 539:./Libraries/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 540:./Libraries/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 541:./Libraries/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 542:./Libraries/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 816              		.loc 1 542 3
 817 000c FFF7FEFF 		bl	vPortEnterCritical
 543:./Libraries/FreeRTOS/Source/queue.c **** 		{
 544:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 818              		.loc 1 544 19
 819 0010 BB68     		ldr	r3, [r7, #8]
 820 0012 1B68     		ldr	r3, [r3]
 821              		.loc 1 544 6
 822 0014 002B     		cmp	r3, #0
 823 0016 03D1     		bne	.L44
 545:./Libraries/FreeRTOS/Source/queue.c **** 			{
 546:./Libraries/FreeRTOS/Source/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 824              		.loc 1 546 14
 825 0018 BB68     		ldr	r3, [r7, #8]
 826 001a 9B68     		ldr	r3, [r3, #8]
 827 001c FB60     		str	r3, [r7, #12]
 828 001e 01E0     		b	.L45
 829              	.L44:
 547:./Libraries/FreeRTOS/Source/queue.c **** 			}
 548:./Libraries/FreeRTOS/Source/queue.c **** 			else
 549:./Libraries/FreeRTOS/Source/queue.c **** 			{
 550:./Libraries/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 830              		.loc 1 550 14
 831 0020 0023     		movs	r3, #0
 832 0022 FB60     		str	r3, [r7, #12]
 833              	.L45:
 551:./Libraries/FreeRTOS/Source/queue.c **** 			}
 552:./Libraries/FreeRTOS/Source/queue.c **** 		}
 553:./Libraries/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 834              		.loc 1 553 3
 835 0024 FFF7FEFF 		bl	vPortExitCritical
 554:./Libraries/FreeRTOS/Source/queue.c **** 
 555:./Libraries/FreeRTOS/Source/queue.c **** 		return pxReturn;
 836              		.loc 1 555 10
 837 0028 FB68     		ldr	r3, [r7, #12]
 556:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 838              		.loc 1 556 2
 839 002a 1846     		mov	r0, r3
 840 002c 1037     		adds	r7, r7, #16
 841              	.LCFI38:
 842              		.cfi_def_cfa_offset 8
 843 002e BD46     		mov	sp, r7
 844              	.LCFI39:
 845              		.cfi_def_cfa_register 13
 846              		@ sp needed
ARM GAS  /tmp/ccv5E8P7.s 			page 29


 847 0030 80BD     		pop	{r7, pc}
 848              		.cfi_endproc
 849              	.LFE11:
 851              		.section	.text.xQueueGetMutexHolderFromISR,"ax",%progbits
 852              		.align	1
 853              		.global	xQueueGetMutexHolderFromISR
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 857              		.fpu fpv5-d16
 859              	xQueueGetMutexHolderFromISR:
 860              	.LFB12:
 557:./Libraries/FreeRTOS/Source/queue.c **** 
 558:./Libraries/FreeRTOS/Source/queue.c **** #endif
 559:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 560:./Libraries/FreeRTOS/Source/queue.c **** 
 561:./Libraries/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 562:./Libraries/FreeRTOS/Source/queue.c **** 
 563:./Libraries/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 564:./Libraries/FreeRTOS/Source/queue.c **** 	{
 861              		.loc 1 564 2
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 16
 864              		@ frame_needed = 1, uses_anonymous_args = 0
 865              		@ link register save eliminated.
 866 0000 80B4     		push	{r7}
 867              	.LCFI40:
 868              		.cfi_def_cfa_offset 4
 869              		.cfi_offset 7, -4
 870 0002 85B0     		sub	sp, sp, #20
 871              	.LCFI41:
 872              		.cfi_def_cfa_offset 24
 873 0004 00AF     		add	r7, sp, #0
 874              	.LCFI42:
 875              		.cfi_def_cfa_register 7
 876 0006 7860     		str	r0, [r7, #4]
 565:./Libraries/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 566:./Libraries/FreeRTOS/Source/queue.c **** 
 567:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 877              		.loc 1 567 3
 878 0008 7B68     		ldr	r3, [r7, #4]
 879 000a 002B     		cmp	r3, #0
 880 000c 0AD1     		bne	.L48
 881              	.LBB133:
 882              	.LBB134:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 883              		.loc 2 195 2
 884              		.syntax unified
 885              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 886 000e 4FF05003 			mov r3, #80												
 887 0012 83F31188 		msr basepri, r3											
 888 0016 BFF36F8F 		isb														
 889 001a BFF34F8F 		dsb														
 890              	
 891              	@ 0 "" 2
 892              		.thumb
 893              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 30


 894 001e BB60     		str	r3, [r7, #8]
 895              		.loc 2 203 1
 896 0020 00BF     		nop
 897              	.L49:
 898              	.LBE134:
 899              	.LBE133:
 900              		.loc 1 567 3 discriminator 1
 901 0022 FEE7     		b	.L49
 902              	.L48:
 568:./Libraries/FreeRTOS/Source/queue.c **** 
 569:./Libraries/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 570:./Libraries/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 571:./Libraries/FreeRTOS/Source/queue.c **** 		not required here. */
 572:./Libraries/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 903              		.loc 1 572 35
 904 0024 7B68     		ldr	r3, [r7, #4]
 905 0026 1B68     		ldr	r3, [r3]
 906              		.loc 1 572 5
 907 0028 002B     		cmp	r3, #0
 908 002a 03D1     		bne	.L50
 573:./Libraries/FreeRTOS/Source/queue.c **** 		{
 574:./Libraries/FreeRTOS/Source/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 909              		.loc 1 574 13
 910 002c 7B68     		ldr	r3, [r7, #4]
 911 002e 9B68     		ldr	r3, [r3, #8]
 912 0030 FB60     		str	r3, [r7, #12]
 913 0032 01E0     		b	.L51
 914              	.L50:
 575:./Libraries/FreeRTOS/Source/queue.c **** 		}
 576:./Libraries/FreeRTOS/Source/queue.c **** 		else
 577:./Libraries/FreeRTOS/Source/queue.c **** 		{
 578:./Libraries/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 915              		.loc 1 578 13
 916 0034 0023     		movs	r3, #0
 917 0036 FB60     		str	r3, [r7, #12]
 918              	.L51:
 579:./Libraries/FreeRTOS/Source/queue.c **** 		}
 580:./Libraries/FreeRTOS/Source/queue.c **** 
 581:./Libraries/FreeRTOS/Source/queue.c **** 		return pxReturn;
 919              		.loc 1 581 10
 920 0038 FB68     		ldr	r3, [r7, #12]
 582:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 921              		.loc 1 582 2
 922 003a 1846     		mov	r0, r3
 923 003c 1437     		adds	r7, r7, #20
 924              	.LCFI43:
 925              		.cfi_def_cfa_offset 4
 926 003e BD46     		mov	sp, r7
 927              	.LCFI44:
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 0040 5DF8047B 		ldr	r7, [sp], #4
 931              	.LCFI45:
 932              		.cfi_restore 7
 933              		.cfi_def_cfa_offset 0
 934 0044 7047     		bx	lr
 935              		.cfi_endproc
ARM GAS  /tmp/ccv5E8P7.s 			page 31


 936              	.LFE12:
 938              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 939              		.align	1
 940              		.global	xQueueGiveMutexRecursive
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv5-d16
 946              	xQueueGiveMutexRecursive:
 947              	.LFB13:
 583:./Libraries/FreeRTOS/Source/queue.c **** 
 584:./Libraries/FreeRTOS/Source/queue.c **** #endif
 585:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 586:./Libraries/FreeRTOS/Source/queue.c **** 
 587:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 588:./Libraries/FreeRTOS/Source/queue.c **** 
 589:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 590:./Libraries/FreeRTOS/Source/queue.c **** 	{
 948              		.loc 1 590 2
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 24
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952 0000 90B5     		push	{r4, r7, lr}
 953              	.LCFI46:
 954              		.cfi_def_cfa_offset 12
 955              		.cfi_offset 4, -12
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 87B0     		sub	sp, sp, #28
 959              	.LCFI47:
 960              		.cfi_def_cfa_offset 40
 961 0004 00AF     		add	r7, sp, #0
 962              	.LCFI48:
 963              		.cfi_def_cfa_register 7
 964 0006 7860     		str	r0, [r7, #4]
 591:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 592:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 965              		.loc 1 592 18
 966 0008 7B68     		ldr	r3, [r7, #4]
 967 000a 3B61     		str	r3, [r7, #16]
 593:./Libraries/FreeRTOS/Source/queue.c **** 
 594:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 968              		.loc 1 594 3
 969 000c 3B69     		ldr	r3, [r7, #16]
 970 000e 002B     		cmp	r3, #0
 971 0010 0AD1     		bne	.L54
 972              	.LBB135:
 973              	.LBB136:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 974              		.loc 2 195 2
 975              		.syntax unified
 976              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 977 0012 4FF05003 			mov r3, #80												
 978 0016 83F31188 		msr basepri, r3											
 979 001a BFF36F8F 		isb														
 980 001e BFF34F8F 		dsb														
 981              	
ARM GAS  /tmp/ccv5E8P7.s 			page 32


 982              	@ 0 "" 2
 983              		.thumb
 984              		.syntax unified
 985 0022 FB60     		str	r3, [r7, #12]
 986              		.loc 2 203 1
 987 0024 00BF     		nop
 988              	.L55:
 989              	.LBE136:
 990              	.LBE135:
 991              		.loc 1 594 3 discriminator 1
 992 0026 FEE7     		b	.L55
 993              	.L54:
 595:./Libraries/FreeRTOS/Source/queue.c **** 
 596:./Libraries/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 597:./Libraries/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 598:./Libraries/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 599:./Libraries/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 600:./Libraries/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 601:./Libraries/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 602:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 994              		.loc 1 602 28
 995 0028 3B69     		ldr	r3, [r7, #16]
 996 002a 9C68     		ldr	r4, [r3, #8]
 997              		.loc 1 602 45
 998 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 999 0030 0346     		mov	r3, r0
 1000              		.loc 1 602 5
 1001 0032 9C42     		cmp	r4, r3
 1002 0034 11D1     		bne	.L56
 603:./Libraries/FreeRTOS/Source/queue.c **** 		{
 604:./Libraries/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 605:./Libraries/FreeRTOS/Source/queue.c **** 
 606:./Libraries/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 607:./Libraries/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 608:./Libraries/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 609:./Libraries/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 610:./Libraries/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 611:./Libraries/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 1003              		.loc 1 611 27
 1004 0036 3B69     		ldr	r3, [r7, #16]
 1005 0038 DB68     		ldr	r3, [r3, #12]
 1006              		.loc 1 611 50
 1007 003a 5A1E     		subs	r2, r3, #1
 1008 003c 3B69     		ldr	r3, [r7, #16]
 1009 003e DA60     		str	r2, [r3, #12]
 612:./Libraries/FreeRTOS/Source/queue.c **** 
 613:./Libraries/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 614:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 1010              		.loc 1 614 29
 1011 0040 3B69     		ldr	r3, [r7, #16]
 1012 0042 DB68     		ldr	r3, [r3, #12]
 1013              		.loc 1 614 6
 1014 0044 002B     		cmp	r3, #0
 1015 0046 05D1     		bne	.L57
 615:./Libraries/FreeRTOS/Source/queue.c **** 			{
 616:./Libraries/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 617:./Libraries/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  /tmp/ccv5E8P7.s 			page 33


 618:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 1016              		.loc 1 618 14
 1017 0048 0023     		movs	r3, #0
 1018 004a 0022     		movs	r2, #0
 1019 004c 0021     		movs	r1, #0
 1020 004e 3869     		ldr	r0, [r7, #16]
 1021 0050 FFF7FEFF 		bl	xQueueGenericSend
 1022              	.L57:
 619:./Libraries/FreeRTOS/Source/queue.c **** 			}
 620:./Libraries/FreeRTOS/Source/queue.c **** 			else
 621:./Libraries/FreeRTOS/Source/queue.c **** 			{
 622:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 623:./Libraries/FreeRTOS/Source/queue.c **** 			}
 624:./Libraries/FreeRTOS/Source/queue.c **** 
 625:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1023              		.loc 1 625 12
 1024 0054 0123     		movs	r3, #1
 1025 0056 7B61     		str	r3, [r7, #20]
 1026 0058 01E0     		b	.L58
 1027              	.L56:
 626:./Libraries/FreeRTOS/Source/queue.c **** 		}
 627:./Libraries/FreeRTOS/Source/queue.c **** 		else
 628:./Libraries/FreeRTOS/Source/queue.c **** 		{
 629:./Libraries/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 630:./Libraries/FreeRTOS/Source/queue.c **** 			holder. */
 631:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1028              		.loc 1 631 12
 1029 005a 0023     		movs	r3, #0
 1030 005c 7B61     		str	r3, [r7, #20]
 1031              	.L58:
 632:./Libraries/FreeRTOS/Source/queue.c **** 
 633:./Libraries/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 634:./Libraries/FreeRTOS/Source/queue.c **** 		}
 635:./Libraries/FreeRTOS/Source/queue.c **** 
 636:./Libraries/FreeRTOS/Source/queue.c **** 		return xReturn;
 1032              		.loc 1 636 10
 1033 005e 7B69     		ldr	r3, [r7, #20]
 637:./Libraries/FreeRTOS/Source/queue.c **** 	}
 1034              		.loc 1 637 2
 1035 0060 1846     		mov	r0, r3
 1036 0062 1C37     		adds	r7, r7, #28
 1037              	.LCFI49:
 1038              		.cfi_def_cfa_offset 12
 1039 0064 BD46     		mov	sp, r7
 1040              	.LCFI50:
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 0066 90BD     		pop	{r4, r7, pc}
 1044              		.cfi_endproc
 1045              	.LFE13:
 1047              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1048              		.align	1
 1049              		.global	xQueueTakeMutexRecursive
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv5-d16
ARM GAS  /tmp/ccv5E8P7.s 			page 34


 1055              	xQueueTakeMutexRecursive:
 1056              	.LFB14:
 638:./Libraries/FreeRTOS/Source/queue.c **** 
 639:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 640:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 641:./Libraries/FreeRTOS/Source/queue.c **** 
 642:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 643:./Libraries/FreeRTOS/Source/queue.c **** 
 644:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 645:./Libraries/FreeRTOS/Source/queue.c **** 	{
 1057              		.loc 1 645 2
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 24
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061 0000 90B5     		push	{r4, r7, lr}
 1062              	.LCFI51:
 1063              		.cfi_def_cfa_offset 12
 1064              		.cfi_offset 4, -12
 1065              		.cfi_offset 7, -8
 1066              		.cfi_offset 14, -4
 1067 0002 87B0     		sub	sp, sp, #28
 1068              	.LCFI52:
 1069              		.cfi_def_cfa_offset 40
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI53:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 1074 0008 3960     		str	r1, [r7]
 646:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 647:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1075              		.loc 1 647 18
 1076 000a 7B68     		ldr	r3, [r7, #4]
 1077 000c 3B61     		str	r3, [r7, #16]
 648:./Libraries/FreeRTOS/Source/queue.c **** 
 649:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 1078              		.loc 1 649 3
 1079 000e 3B69     		ldr	r3, [r7, #16]
 1080 0010 002B     		cmp	r3, #0
 1081 0012 0AD1     		bne	.L61
 1082              	.LBB137:
 1083              	.LBB138:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1084              		.loc 2 195 2
 1085              		.syntax unified
 1086              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1087 0014 4FF05003 			mov r3, #80												
 1088 0018 83F31188 		msr basepri, r3											
 1089 001c BFF36F8F 		isb														
 1090 0020 BFF34F8F 		dsb														
 1091              	
 1092              	@ 0 "" 2
 1093              		.thumb
 1094              		.syntax unified
 1095 0024 FB60     		str	r3, [r7, #12]
 1096              		.loc 2 203 1
 1097 0026 00BF     		nop
 1098              	.L62:
ARM GAS  /tmp/ccv5E8P7.s 			page 35


 1099              	.LBE138:
 1100              	.LBE137:
 1101              		.loc 1 649 3 discriminator 1
 1102 0028 FEE7     		b	.L62
 1103              	.L61:
 650:./Libraries/FreeRTOS/Source/queue.c **** 
 651:./Libraries/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 652:./Libraries/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 653:./Libraries/FreeRTOS/Source/queue.c **** 
 654:./Libraries/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 655:./Libraries/FreeRTOS/Source/queue.c **** 
 656:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 1104              		.loc 1 656 28
 1105 002a 3B69     		ldr	r3, [r7, #16]
 1106 002c 9C68     		ldr	r4, [r3, #8]
 1107              		.loc 1 656 45
 1108 002e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1109 0032 0346     		mov	r3, r0
 1110              		.loc 1 656 5
 1111 0034 9C42     		cmp	r4, r3
 1112 0036 07D1     		bne	.L63
 657:./Libraries/FreeRTOS/Source/queue.c **** 		{
 658:./Libraries/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 1113              		.loc 1 658 27
 1114 0038 3B69     		ldr	r3, [r7, #16]
 1115 003a DB68     		ldr	r3, [r3, #12]
 1116              		.loc 1 658 50
 1117 003c 5A1C     		adds	r2, r3, #1
 1118 003e 3B69     		ldr	r3, [r7, #16]
 1119 0040 DA60     		str	r2, [r3, #12]
 659:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1120              		.loc 1 659 12
 1121 0042 0123     		movs	r3, #1
 1122 0044 7B61     		str	r3, [r7, #20]
 1123 0046 0CE0     		b	.L64
 1124              	.L63:
 660:./Libraries/FreeRTOS/Source/queue.c **** 		}
 661:./Libraries/FreeRTOS/Source/queue.c **** 		else
 662:./Libraries/FreeRTOS/Source/queue.c **** 		{
 663:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 1125              		.loc 1 663 14
 1126 0048 3968     		ldr	r1, [r7]
 1127 004a 3869     		ldr	r0, [r7, #16]
 1128 004c FFF7FEFF 		bl	xQueueSemaphoreTake
 1129 0050 7861     		str	r0, [r7, #20]
 664:./Libraries/FreeRTOS/Source/queue.c **** 
 665:./Libraries/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 666:./Libraries/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 667:./Libraries/FreeRTOS/Source/queue.c **** 			before reaching here. */
 668:./Libraries/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 1130              		.loc 1 668 6
 1131 0052 7B69     		ldr	r3, [r7, #20]
 1132 0054 002B     		cmp	r3, #0
 1133 0056 04D0     		beq	.L64
 669:./Libraries/FreeRTOS/Source/queue.c **** 			{
 670:./Libraries/FreeRTOS/Source/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 1134              		.loc 1 670 28
ARM GAS  /tmp/ccv5E8P7.s 			page 36


 1135 0058 3B69     		ldr	r3, [r7, #16]
 1136 005a DB68     		ldr	r3, [r3, #12]
 1137              		.loc 1 670 51
 1138 005c 5A1C     		adds	r2, r3, #1
 1139 005e 3B69     		ldr	r3, [r7, #16]
 1140 0060 DA60     		str	r2, [r3, #12]
 1141              	.L64:
 671:./Libraries/FreeRTOS/Source/queue.c **** 			}
 672:./Libraries/FreeRTOS/Source/queue.c **** 			else
 673:./Libraries/FreeRTOS/Source/queue.c **** 			{
 674:./Libraries/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 675:./Libraries/FreeRTOS/Source/queue.c **** 			}
 676:./Libraries/FreeRTOS/Source/queue.c **** 		}
 677:./Libraries/FreeRTOS/Source/queue.c **** 
 678:./Libraries/FreeRTOS/Source/queue.c **** 		return xReturn;
 1142              		.loc 1 678 10
 1143 0062 7B69     		ldr	r3, [r7, #20]
 679:./Libraries/FreeRTOS/Source/queue.c **** 	}
 1144              		.loc 1 679 2
 1145 0064 1846     		mov	r0, r3
 1146 0066 1C37     		adds	r7, r7, #28
 1147              	.LCFI54:
 1148              		.cfi_def_cfa_offset 12
 1149 0068 BD46     		mov	sp, r7
 1150              	.LCFI55:
 1151              		.cfi_def_cfa_register 13
 1152              		@ sp needed
 1153 006a 90BD     		pop	{r4, r7, pc}
 1154              		.cfi_endproc
 1155              	.LFE14:
 1157              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 1158              		.align	1
 1159              		.global	xQueueCreateCountingSemaphoreStatic
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv5-d16
 1165              	xQueueCreateCountingSemaphoreStatic:
 1166              	.LFB15:
 680:./Libraries/FreeRTOS/Source/queue.c **** 
 681:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 682:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 683:./Libraries/FreeRTOS/Source/queue.c **** 
 684:./Libraries/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 685:./Libraries/FreeRTOS/Source/queue.c **** 
 686:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 687:./Libraries/FreeRTOS/Source/queue.c **** 	{
 1167              		.loc 1 687 2
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 32
 1170              		@ frame_needed = 1, uses_anonymous_args = 0
 1171 0000 80B5     		push	{r7, lr}
 1172              	.LCFI56:
 1173              		.cfi_def_cfa_offset 8
 1174              		.cfi_offset 7, -8
 1175              		.cfi_offset 14, -4
 1176 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccv5E8P7.s 			page 37


 1177              	.LCFI57:
 1178              		.cfi_def_cfa_offset 48
 1179 0004 02AF     		add	r7, sp, #8
 1180              	.LCFI58:
 1181              		.cfi_def_cfa 7, 40
 1182 0006 F860     		str	r0, [r7, #12]
 1183 0008 B960     		str	r1, [r7, #8]
 1184 000a 7A60     		str	r2, [r7, #4]
 688:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 689:./Libraries/FreeRTOS/Source/queue.c **** 
 690:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 1185              		.loc 1 690 3
 1186 000c FB68     		ldr	r3, [r7, #12]
 1187 000e 002B     		cmp	r3, #0
 1188 0010 0AD1     		bne	.L67
 1189              	.LBB139:
 1190              	.LBB140:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1191              		.loc 2 195 2
 1192              		.syntax unified
 1193              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1194 0012 4FF05003 			mov r3, #80												
 1195 0016 83F31188 		msr basepri, r3											
 1196 001a BFF36F8F 		isb														
 1197 001e BFF34F8F 		dsb														
 1198              	
 1199              	@ 0 "" 2
 1200              		.thumb
 1201              		.syntax unified
 1202 0022 BB61     		str	r3, [r7, #24]
 1203              		.loc 2 203 1
 1204 0024 00BF     		nop
 1205              	.L68:
 1206              	.LBE140:
 1207              	.LBE139:
 1208              		.loc 1 690 3 discriminator 1
 1209 0026 FEE7     		b	.L68
 1210              	.L67:
 691:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 1211              		.loc 1 691 3
 1212 0028 BA68     		ldr	r2, [r7, #8]
 1213 002a FB68     		ldr	r3, [r7, #12]
 1214 002c 9A42     		cmp	r2, r3
 1215 002e 0AD9     		bls	.L69
 1216              	.LBB141:
 1217              	.LBB142:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1218              		.loc 2 195 2
 1219              		.syntax unified
 1220              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1221 0030 4FF05003 			mov r3, #80												
 1222 0034 83F31188 		msr basepri, r3											
 1223 0038 BFF36F8F 		isb														
 1224 003c BFF34F8F 		dsb														
 1225              	
 1226              	@ 0 "" 2
 1227              		.thumb
ARM GAS  /tmp/ccv5E8P7.s 			page 38


 1228              		.syntax unified
 1229 0040 7B61     		str	r3, [r7, #20]
 1230              		.loc 2 203 1
 1231 0042 00BF     		nop
 1232              	.L70:
 1233              	.LBE142:
 1234              	.LBE141:
 1235              		.loc 1 691 3 discriminator 2
 1236 0044 FEE7     		b	.L70
 1237              	.L69:
 692:./Libraries/FreeRTOS/Source/queue.c **** 
 693:./Libraries/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 1238              		.loc 1 693 13
 1239 0046 0223     		movs	r3, #2
 1240 0048 0093     		str	r3, [sp]
 1241 004a 7B68     		ldr	r3, [r7, #4]
 1242 004c 0022     		movs	r2, #0
 1243 004e 0021     		movs	r1, #0
 1244 0050 F868     		ldr	r0, [r7, #12]
 1245 0052 FFF7FEFF 		bl	xQueueGenericCreateStatic
 1246 0056 F861     		str	r0, [r7, #28]
 694:./Libraries/FreeRTOS/Source/queue.c **** 
 695:./Libraries/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 1247              		.loc 1 695 5
 1248 0058 FB69     		ldr	r3, [r7, #28]
 1249 005a 002B     		cmp	r3, #0
 1250 005c 02D0     		beq	.L71
 696:./Libraries/FreeRTOS/Source/queue.c **** 		{
 697:./Libraries/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1251              		.loc 1 697 49
 1252 005e FB69     		ldr	r3, [r7, #28]
 1253 0060 BA68     		ldr	r2, [r7, #8]
 1254 0062 9A63     		str	r2, [r3, #56]
 1255              	.L71:
 698:./Libraries/FreeRTOS/Source/queue.c **** 
 699:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 700:./Libraries/FreeRTOS/Source/queue.c **** 		}
 701:./Libraries/FreeRTOS/Source/queue.c **** 		else
 702:./Libraries/FreeRTOS/Source/queue.c **** 		{
 703:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 704:./Libraries/FreeRTOS/Source/queue.c **** 		}
 705:./Libraries/FreeRTOS/Source/queue.c **** 
 706:./Libraries/FreeRTOS/Source/queue.c **** 		return xHandle;
 1256              		.loc 1 706 10
 1257 0064 FB69     		ldr	r3, [r7, #28]
 707:./Libraries/FreeRTOS/Source/queue.c **** 	}
 1258              		.loc 1 707 2
 1259 0066 1846     		mov	r0, r3
 1260 0068 2037     		adds	r7, r7, #32
 1261              	.LCFI59:
 1262              		.cfi_def_cfa_offset 8
 1263 006a BD46     		mov	sp, r7
 1264              	.LCFI60:
 1265              		.cfi_def_cfa_register 13
 1266              		@ sp needed
 1267 006c 80BD     		pop	{r7, pc}
 1268              		.cfi_endproc
ARM GAS  /tmp/ccv5E8P7.s 			page 39


 1269              	.LFE15:
 1271              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 1272              		.align	1
 1273              		.global	xQueueCreateCountingSemaphore
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv5-d16
 1279              	xQueueCreateCountingSemaphore:
 1280              	.LFB16:
 708:./Libraries/FreeRTOS/Source/queue.c **** 
 709:./Libraries/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 710:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 711:./Libraries/FreeRTOS/Source/queue.c **** 
 712:./Libraries/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 713:./Libraries/FreeRTOS/Source/queue.c **** 
 714:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 715:./Libraries/FreeRTOS/Source/queue.c **** 	{
 1281              		.loc 1 715 2
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 24
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              	.LCFI61:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
 1290 0002 86B0     		sub	sp, sp, #24
 1291              	.LCFI62:
 1292              		.cfi_def_cfa_offset 32
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI63:
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 1297 0008 3960     		str	r1, [r7]
 716:./Libraries/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 717:./Libraries/FreeRTOS/Source/queue.c **** 
 718:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 1298              		.loc 1 718 3
 1299 000a 7B68     		ldr	r3, [r7, #4]
 1300 000c 002B     		cmp	r3, #0
 1301 000e 0AD1     		bne	.L74
 1302              	.LBB143:
 1303              	.LBB144:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1304              		.loc 2 195 2
 1305              		.syntax unified
 1306              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1307 0010 4FF05003 			mov r3, #80												
 1308 0014 83F31188 		msr basepri, r3											
 1309 0018 BFF36F8F 		isb														
 1310 001c BFF34F8F 		dsb														
 1311              	
 1312              	@ 0 "" 2
 1313              		.thumb
 1314              		.syntax unified
 1315 0020 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccv5E8P7.s 			page 40


 1316              		.loc 2 203 1
 1317 0022 00BF     		nop
 1318              	.L75:
 1319              	.LBE144:
 1320              	.LBE143:
 1321              		.loc 1 718 3 discriminator 1
 1322 0024 FEE7     		b	.L75
 1323              	.L74:
 719:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 1324              		.loc 1 719 3
 1325 0026 3A68     		ldr	r2, [r7]
 1326 0028 7B68     		ldr	r3, [r7, #4]
 1327 002a 9A42     		cmp	r2, r3
 1328 002c 0AD9     		bls	.L76
 1329              	.LBB145:
 1330              	.LBB146:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1331              		.loc 2 195 2
 1332              		.syntax unified
 1333              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1334 002e 4FF05003 			mov r3, #80												
 1335 0032 83F31188 		msr basepri, r3											
 1336 0036 BFF36F8F 		isb														
 1337 003a BFF34F8F 		dsb														
 1338              	
 1339              	@ 0 "" 2
 1340              		.thumb
 1341              		.syntax unified
 1342 003e FB60     		str	r3, [r7, #12]
 1343              		.loc 2 203 1
 1344 0040 00BF     		nop
 1345              	.L77:
 1346              	.LBE146:
 1347              	.LBE145:
 1348              		.loc 1 719 3 discriminator 2
 1349 0042 FEE7     		b	.L77
 1350              	.L76:
 720:./Libraries/FreeRTOS/Source/queue.c **** 
 721:./Libraries/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 1351              		.loc 1 721 13
 1352 0044 0222     		movs	r2, #2
 1353 0046 0021     		movs	r1, #0
 1354 0048 7868     		ldr	r0, [r7, #4]
 1355 004a FFF7FEFF 		bl	xQueueGenericCreate
 1356 004e 7861     		str	r0, [r7, #20]
 722:./Libraries/FreeRTOS/Source/queue.c **** 
 723:./Libraries/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 1357              		.loc 1 723 5
 1358 0050 7B69     		ldr	r3, [r7, #20]
 1359 0052 002B     		cmp	r3, #0
 1360 0054 02D0     		beq	.L78
 724:./Libraries/FreeRTOS/Source/queue.c **** 		{
 725:./Libraries/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1361              		.loc 1 725 49
 1362 0056 7B69     		ldr	r3, [r7, #20]
 1363 0058 3A68     		ldr	r2, [r7]
 1364 005a 9A63     		str	r2, [r3, #56]
ARM GAS  /tmp/ccv5E8P7.s 			page 41


 1365              	.L78:
 726:./Libraries/FreeRTOS/Source/queue.c **** 
 727:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 728:./Libraries/FreeRTOS/Source/queue.c **** 		}
 729:./Libraries/FreeRTOS/Source/queue.c **** 		else
 730:./Libraries/FreeRTOS/Source/queue.c **** 		{
 731:./Libraries/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 732:./Libraries/FreeRTOS/Source/queue.c **** 		}
 733:./Libraries/FreeRTOS/Source/queue.c **** 
 734:./Libraries/FreeRTOS/Source/queue.c **** 		return xHandle;
 1366              		.loc 1 734 10
 1367 005c 7B69     		ldr	r3, [r7, #20]
 735:./Libraries/FreeRTOS/Source/queue.c **** 	}
 1368              		.loc 1 735 2
 1369 005e 1846     		mov	r0, r3
 1370 0060 1837     		adds	r7, r7, #24
 1371              	.LCFI64:
 1372              		.cfi_def_cfa_offset 8
 1373 0062 BD46     		mov	sp, r7
 1374              	.LCFI65:
 1375              		.cfi_def_cfa_register 13
 1376              		@ sp needed
 1377 0064 80BD     		pop	{r7, pc}
 1378              		.cfi_endproc
 1379              	.LFE16:
 1381              		.section	.text.xQueueGenericSend,"ax",%progbits
 1382              		.align	1
 1383              		.global	xQueueGenericSend
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1387              		.fpu fpv5-d16
 1389              	xQueueGenericSend:
 1390              	.LFB17:
 736:./Libraries/FreeRTOS/Source/queue.c **** 
 737:./Libraries/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 738:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 739:./Libraries/FreeRTOS/Source/queue.c **** 
 740:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 741:./Libraries/FreeRTOS/Source/queue.c **** {
 1391              		.loc 1 741 1
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 56
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395 0000 80B5     		push	{r7, lr}
 1396              	.LCFI66:
 1397              		.cfi_def_cfa_offset 8
 1398              		.cfi_offset 7, -8
 1399              		.cfi_offset 14, -4
 1400 0002 8EB0     		sub	sp, sp, #56
 1401              	.LCFI67:
 1402              		.cfi_def_cfa_offset 64
 1403 0004 00AF     		add	r7, sp, #0
 1404              	.LCFI68:
 1405              		.cfi_def_cfa_register 7
 1406 0006 F860     		str	r0, [r7, #12]
 1407 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccv5E8P7.s 			page 42


 1408 000a 7A60     		str	r2, [r7, #4]
 1409 000c 3B60     		str	r3, [r7]
 742:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1410              		.loc 1 742 12
 1411 000e 0023     		movs	r3, #0
 1412 0010 7B63     		str	r3, [r7, #52]
 743:./Libraries/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 744:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 1413              		.loc 1 744 17
 1414 0012 FB68     		ldr	r3, [r7, #12]
 1415 0014 3B63     		str	r3, [r7, #48]
 745:./Libraries/FreeRTOS/Source/queue.c **** 
 746:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1416              		.loc 1 746 2
 1417 0016 3B6B     		ldr	r3, [r7, #48]
 1418 0018 002B     		cmp	r3, #0
 1419 001a 0AD1     		bne	.L81
 1420              	.LBB147:
 1421              	.LBB148:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1422              		.loc 2 195 2
 1423              		.syntax unified
 1424              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1425 001c 4FF05003 			mov r3, #80												
 1426 0020 83F31188 		msr basepri, r3											
 1427 0024 BFF36F8F 		isb														
 1428 0028 BFF34F8F 		dsb														
 1429              	
 1430              	@ 0 "" 2
 1431              		.thumb
 1432              		.syntax unified
 1433 002c BB62     		str	r3, [r7, #40]
 1434              		.loc 2 203 1
 1435 002e 00BF     		nop
 1436              	.L82:
 1437              	.LBE148:
 1438              	.LBE147:
 1439              		.loc 1 746 2 discriminator 1
 1440 0030 FEE7     		b	.L82
 1441              	.L81:
 747:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1442              		.loc 1 747 2
 1443 0032 BB68     		ldr	r3, [r7, #8]
 1444 0034 002B     		cmp	r3, #0
 1445 0036 03D1     		bne	.L83
 1446              		.loc 1 747 2 is_stmt 0 discriminator 2
 1447 0038 3B6B     		ldr	r3, [r7, #48]
 1448 003a 1B6C     		ldr	r3, [r3, #64]
 1449 003c 002B     		cmp	r3, #0
 1450 003e 01D1     		bne	.L84
 1451              	.L83:
 1452              		.loc 1 747 2 discriminator 3
 1453 0040 0123     		movs	r3, #1
 1454 0042 00E0     		b	.L85
 1455              	.L84:
 1456              		.loc 1 747 2 discriminator 4
 1457 0044 0023     		movs	r3, #0
ARM GAS  /tmp/ccv5E8P7.s 			page 43


 1458              	.L85:
 1459              		.loc 1 747 2 discriminator 6
 1460 0046 002B     		cmp	r3, #0
 1461 0048 0AD1     		bne	.L86
 1462              	.LBB149:
 1463              	.LBB150:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1464              		.loc 2 195 2 is_stmt 1
 1465              		.syntax unified
 1466              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1467 004a 4FF05003 			mov r3, #80												
 1468 004e 83F31188 		msr basepri, r3											
 1469 0052 BFF36F8F 		isb														
 1470 0056 BFF34F8F 		dsb														
 1471              	
 1472              	@ 0 "" 2
 1473              		.thumb
 1474              		.syntax unified
 1475 005a 7B62     		str	r3, [r7, #36]
 1476              		.loc 2 203 1
 1477 005c 00BF     		nop
 1478              	.L87:
 1479              	.LBE150:
 1480              	.LBE149:
 1481              		.loc 1 747 2 discriminator 2
 1482 005e FEE7     		b	.L87
 1483              	.L86:
 748:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1484              		.loc 1 748 2
 1485 0060 3B68     		ldr	r3, [r7]
 1486 0062 022B     		cmp	r3, #2
 1487 0064 03D1     		bne	.L88
 1488              		.loc 1 748 2 is_stmt 0 discriminator 2
 1489 0066 3B6B     		ldr	r3, [r7, #48]
 1490 0068 DB6B     		ldr	r3, [r3, #60]
 1491 006a 012B     		cmp	r3, #1
 1492 006c 01D1     		bne	.L89
 1493              	.L88:
 1494              		.loc 1 748 2 discriminator 3
 1495 006e 0123     		movs	r3, #1
 1496 0070 00E0     		b	.L90
 1497              	.L89:
 1498              		.loc 1 748 2 discriminator 4
 1499 0072 0023     		movs	r3, #0
 1500              	.L90:
 1501              		.loc 1 748 2 discriminator 6
 1502 0074 002B     		cmp	r3, #0
 1503 0076 0AD1     		bne	.L91
 1504              	.LBB151:
 1505              	.LBB152:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1506              		.loc 2 195 2 is_stmt 1
 1507              		.syntax unified
 1508              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1509 0078 4FF05003 			mov r3, #80												
 1510 007c 83F31188 		msr basepri, r3											
 1511 0080 BFF36F8F 		isb														
ARM GAS  /tmp/ccv5E8P7.s 			page 44


 1512 0084 BFF34F8F 		dsb														
 1513              	
 1514              	@ 0 "" 2
 1515              		.thumb
 1516              		.syntax unified
 1517 0088 3B62     		str	r3, [r7, #32]
 1518              		.loc 2 203 1
 1519 008a 00BF     		nop
 1520              	.L92:
 1521              	.LBE152:
 1522              	.LBE151:
 1523              		.loc 1 748 2 discriminator 3
 1524 008c FEE7     		b	.L92
 1525              	.L91:
 749:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 750:./Libraries/FreeRTOS/Source/queue.c **** 	{
 751:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1526              		.loc 1 751 3
 1527 008e FFF7FEFF 		bl	xTaskGetSchedulerState
 1528 0092 0346     		mov	r3, r0
 1529 0094 002B     		cmp	r3, #0
 1530 0096 02D1     		bne	.L93
 1531              		.loc 1 751 3 is_stmt 0 discriminator 2
 1532 0098 7B68     		ldr	r3, [r7, #4]
 1533 009a 002B     		cmp	r3, #0
 1534 009c 01D1     		bne	.L94
 1535              	.L93:
 1536              		.loc 1 751 3 discriminator 3
 1537 009e 0123     		movs	r3, #1
 1538 00a0 00E0     		b	.L95
 1539              	.L94:
 1540              		.loc 1 751 3 discriminator 4
 1541 00a2 0023     		movs	r3, #0
 1542              	.L95:
 1543              		.loc 1 751 3 discriminator 6
 1544 00a4 002B     		cmp	r3, #0
 1545 00a6 0AD1     		bne	.L96
 1546              	.LBB153:
 1547              	.LBB154:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1548              		.loc 2 195 2 is_stmt 1
 1549              		.syntax unified
 1550              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1551 00a8 4FF05003 			mov r3, #80												
 1552 00ac 83F31188 		msr basepri, r3											
 1553 00b0 BFF36F8F 		isb														
 1554 00b4 BFF34F8F 		dsb														
 1555              	
 1556              	@ 0 "" 2
 1557              		.thumb
 1558              		.syntax unified
 1559 00b8 FB61     		str	r3, [r7, #28]
 1560              		.loc 2 203 1
 1561 00ba 00BF     		nop
 1562              	.L97:
 1563              	.LBE154:
 1564              	.LBE153:
ARM GAS  /tmp/ccv5E8P7.s 			page 45


 1565              		.loc 1 751 3 discriminator 4
 1566 00bc FEE7     		b	.L97
 1567              	.L96:
 752:./Libraries/FreeRTOS/Source/queue.c **** 	}
 753:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
 754:./Libraries/FreeRTOS/Source/queue.c **** 
 755:./Libraries/FreeRTOS/Source/queue.c **** 
 756:./Libraries/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 757:./Libraries/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
 758:./Libraries/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
 759:./Libraries/FreeRTOS/Source/queue.c **** 	for( ;; )
 760:./Libraries/FreeRTOS/Source/queue.c **** 	{
 761:./Libraries/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 1568              		.loc 1 761 3
 1569 00be FFF7FEFF 		bl	vPortEnterCritical
 762:./Libraries/FreeRTOS/Source/queue.c **** 		{
 763:./Libraries/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 764:./Libraries/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 765:./Libraries/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 766:./Libraries/FreeRTOS/Source/queue.c **** 			queue is full. */
 767:./Libraries/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1570              		.loc 1 767 17
 1571 00c2 3B6B     		ldr	r3, [r7, #48]
 1572 00c4 9A6B     		ldr	r2, [r3, #56]
 1573              		.loc 1 767 46
 1574 00c6 3B6B     		ldr	r3, [r7, #48]
 1575 00c8 DB6B     		ldr	r3, [r3, #60]
 1576              		.loc 1 767 6
 1577 00ca 9A42     		cmp	r2, r3
 1578 00cc 02D3     		bcc	.L98
 1579              		.loc 1 767 59 discriminator 1
 1580 00ce 3B68     		ldr	r3, [r7]
 1581 00d0 022B     		cmp	r3, #2
 1582 00d2 29D1     		bne	.L99
 1583              	.L98:
 768:./Libraries/FreeRTOS/Source/queue.c **** 			{
 769:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 770:./Libraries/FreeRTOS/Source/queue.c **** 
 771:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 772:./Libraries/FreeRTOS/Source/queue.c **** 				{
 773:./Libraries/FreeRTOS/Source/queue.c **** 				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 774:./Libraries/FreeRTOS/Source/queue.c **** 
 775:./Libraries/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 776:./Libraries/FreeRTOS/Source/queue.c **** 
 777:./Libraries/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 778:./Libraries/FreeRTOS/Source/queue.c **** 					{
 779:./Libraries/FreeRTOS/Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 780:./Libraries/FreeRTOS/Source/queue.c **** 						{
 781:./Libraries/FreeRTOS/Source/queue.c **** 							/* Do not notify the queue set as an existing item
 782:./Libraries/FreeRTOS/Source/queue.c **** 							was overwritten in the queue so the number of items
 783:./Libraries/FreeRTOS/Source/queue.c **** 							in the queue has not changed. */
 784:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 785:./Libraries/FreeRTOS/Source/queue.c **** 						}
 786:./Libraries/FreeRTOS/Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 787:./Libraries/FreeRTOS/Source/queue.c **** 						{
 788:./Libraries/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 789:./Libraries/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
ARM GAS  /tmp/ccv5E8P7.s 			page 46


 790:./Libraries/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 791:./Libraries/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 792:./Libraries/FreeRTOS/Source/queue.c **** 						}
 793:./Libraries/FreeRTOS/Source/queue.c **** 						else
 794:./Libraries/FreeRTOS/Source/queue.c **** 						{
 795:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 796:./Libraries/FreeRTOS/Source/queue.c **** 						}
 797:./Libraries/FreeRTOS/Source/queue.c **** 					}
 798:./Libraries/FreeRTOS/Source/queue.c **** 					else
 799:./Libraries/FreeRTOS/Source/queue.c **** 					{
 800:./Libraries/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 801:./Libraries/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 802:./Libraries/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803:./Libraries/FreeRTOS/Source/queue.c **** 						{
 804:./Libraries/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805:./Libraries/FreeRTOS/Source/queue.c **** 							{
 806:./Libraries/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 807:./Libraries/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 808:./Libraries/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 809:./Libraries/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 810:./Libraries/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 811:./Libraries/FreeRTOS/Source/queue.c **** 							}
 812:./Libraries/FreeRTOS/Source/queue.c **** 							else
 813:./Libraries/FreeRTOS/Source/queue.c **** 							{
 814:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 815:./Libraries/FreeRTOS/Source/queue.c **** 							}
 816:./Libraries/FreeRTOS/Source/queue.c **** 						}
 817:./Libraries/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 818:./Libraries/FreeRTOS/Source/queue.c **** 						{
 819:./Libraries/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 820:./Libraries/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 821:./Libraries/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 822:./Libraries/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 823:./Libraries/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 824:./Libraries/FreeRTOS/Source/queue.c **** 						}
 825:./Libraries/FreeRTOS/Source/queue.c **** 						else
 826:./Libraries/FreeRTOS/Source/queue.c **** 						{
 827:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 828:./Libraries/FreeRTOS/Source/queue.c **** 						}
 829:./Libraries/FreeRTOS/Source/queue.c **** 					}
 830:./Libraries/FreeRTOS/Source/queue.c **** 				}
 831:./Libraries/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 832:./Libraries/FreeRTOS/Source/queue.c **** 				{
 833:./Libraries/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1584              		.loc 1 833 23
 1585 00d4 3A68     		ldr	r2, [r7]
 1586 00d6 B968     		ldr	r1, [r7, #8]
 1587 00d8 386B     		ldr	r0, [r7, #48]
 1588 00da FFF7FEFF 		bl	prvCopyDataToQueue
 1589 00de F862     		str	r0, [r7, #44]
 834:./Libraries/FreeRTOS/Source/queue.c **** 
 835:./Libraries/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:./Libraries/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 837:./Libraries/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1590              		.loc 1 837 10
 1591 00e0 3B6B     		ldr	r3, [r7, #48]
 1592 00e2 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccv5E8P7.s 			page 47


 1593              		.loc 1 837 8
 1594 00e4 002B     		cmp	r3, #0
 1595 00e6 10D0     		beq	.L100
 838:./Libraries/FreeRTOS/Source/queue.c **** 					{
 839:./Libraries/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1596              		.loc 1 839 37
 1597 00e8 3B6B     		ldr	r3, [r7, #48]
 1598 00ea 2433     		adds	r3, r3, #36
 1599              		.loc 1 839 11
 1600 00ec 1846     		mov	r0, r3
 1601 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1602 00f2 0346     		mov	r3, r0
 1603              		.loc 1 839 9
 1604 00f4 002B     		cmp	r3, #0
 1605 00f6 13D0     		beq	.L101
 840:./Libraries/FreeRTOS/Source/queue.c **** 						{
 841:./Libraries/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 842:./Libraries/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 843:./Libraries/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 844:./Libraries/FreeRTOS/Source/queue.c **** 							takes care of that. */
 845:./Libraries/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1606              		.loc 1 845 8
 1607 00f8 3F4B     		ldr	r3, .L111
 1608 00fa 4FF08052 		mov	r2, #268435456
 1609 00fe 1A60     		str	r2, [r3]
 1610              		.syntax unified
 1611              	@ 845 "./Libraries/FreeRTOS/Source/queue.c" 1
 1612 0100 BFF34F8F 		dsb
 1613              	@ 0 "" 2
 1614              	@ 845 "./Libraries/FreeRTOS/Source/queue.c" 1
 1615 0104 BFF36F8F 		isb
 1616              	@ 0 "" 2
 1617              		.thumb
 1618              		.syntax unified
 1619 0108 0AE0     		b	.L101
 1620              	.L100:
 846:./Libraries/FreeRTOS/Source/queue.c **** 						}
 847:./Libraries/FreeRTOS/Source/queue.c **** 						else
 848:./Libraries/FreeRTOS/Source/queue.c **** 						{
 849:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 850:./Libraries/FreeRTOS/Source/queue.c **** 						}
 851:./Libraries/FreeRTOS/Source/queue.c **** 					}
 852:./Libraries/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 1621              		.loc 1 852 13
 1622 010a FB6A     		ldr	r3, [r7, #44]
 1623 010c 002B     		cmp	r3, #0
 1624 010e 07D0     		beq	.L101
 853:./Libraries/FreeRTOS/Source/queue.c **** 					{
 854:./Libraries/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 855:./Libraries/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 856:./Libraries/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 857:./Libraries/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 858:./Libraries/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1625              		.loc 1 858 7
 1626 0110 394B     		ldr	r3, .L111
 1627 0112 4FF08052 		mov	r2, #268435456
 1628 0116 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccv5E8P7.s 			page 48


 1629              		.syntax unified
 1630              	@ 858 "./Libraries/FreeRTOS/Source/queue.c" 1
 1631 0118 BFF34F8F 		dsb
 1632              	@ 0 "" 2
 1633              	@ 858 "./Libraries/FreeRTOS/Source/queue.c" 1
 1634 011c BFF36F8F 		isb
 1635              	@ 0 "" 2
 1636              		.thumb
 1637              		.syntax unified
 1638              	.L101:
 859:./Libraries/FreeRTOS/Source/queue.c **** 					}
 860:./Libraries/FreeRTOS/Source/queue.c **** 					else
 861:./Libraries/FreeRTOS/Source/queue.c **** 					{
 862:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 863:./Libraries/FreeRTOS/Source/queue.c **** 					}
 864:./Libraries/FreeRTOS/Source/queue.c **** 				}
 865:./Libraries/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 866:./Libraries/FreeRTOS/Source/queue.c **** 
 867:./Libraries/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 1639              		.loc 1 867 5
 1640 0120 FFF7FEFF 		bl	vPortExitCritical
 868:./Libraries/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1641              		.loc 1 868 12
 1642 0124 0123     		movs	r3, #1
 1643 0126 63E0     		b	.L110
 1644              	.L99:
 869:./Libraries/FreeRTOS/Source/queue.c **** 			}
 870:./Libraries/FreeRTOS/Source/queue.c **** 			else
 871:./Libraries/FreeRTOS/Source/queue.c **** 			{
 872:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1645              		.loc 1 872 22
 1646 0128 7B68     		ldr	r3, [r7, #4]
 1647              		.loc 1 872 7
 1648 012a 002B     		cmp	r3, #0
 1649 012c 03D1     		bne	.L103
 873:./Libraries/FreeRTOS/Source/queue.c **** 				{
 874:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 875:./Libraries/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 876:./Libraries/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 1650              		.loc 1 876 6
 1651 012e FFF7FEFF 		bl	vPortExitCritical
 877:./Libraries/FreeRTOS/Source/queue.c **** 
 878:./Libraries/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 879:./Libraries/FreeRTOS/Source/queue.c **** 					the function. */
 880:./Libraries/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 881:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1652              		.loc 1 881 13
 1653 0132 0023     		movs	r3, #0
 1654 0134 5CE0     		b	.L110
 1655              	.L103:
 882:./Libraries/FreeRTOS/Source/queue.c **** 				}
 883:./Libraries/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1656              		.loc 1 883 12
 1657 0136 7B6B     		ldr	r3, [r7, #52]
 1658 0138 002B     		cmp	r3, #0
 1659 013a 06D1     		bne	.L104
 884:./Libraries/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccv5E8P7.s 			page 49


 885:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 886:./Libraries/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 887:./Libraries/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1660              		.loc 1 887 6
 1661 013c 07F11403 		add	r3, r7, #20
 1662 0140 1846     		mov	r0, r3
 1663 0142 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 888:./Libraries/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1664              		.loc 1 888 20
 1665 0146 0123     		movs	r3, #1
 1666 0148 7B63     		str	r3, [r7, #52]
 1667              	.L104:
 889:./Libraries/FreeRTOS/Source/queue.c **** 				}
 890:./Libraries/FreeRTOS/Source/queue.c **** 				else
 891:./Libraries/FreeRTOS/Source/queue.c **** 				{
 892:./Libraries/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 893:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 894:./Libraries/FreeRTOS/Source/queue.c **** 				}
 895:./Libraries/FreeRTOS/Source/queue.c **** 			}
 896:./Libraries/FreeRTOS/Source/queue.c **** 		}
 897:./Libraries/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1668              		.loc 1 897 3
 1669 014a FFF7FEFF 		bl	vPortExitCritical
 898:./Libraries/FreeRTOS/Source/queue.c **** 
 899:./Libraries/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 900:./Libraries/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 901:./Libraries/FreeRTOS/Source/queue.c **** 
 902:./Libraries/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1670              		.loc 1 902 3
 1671 014e FFF7FEFF 		bl	vTaskSuspendAll
 903:./Libraries/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1672              		.loc 1 903 3
 1673 0152 FFF7FEFF 		bl	vPortEnterCritical
 1674 0156 3B6B     		ldr	r3, [r7, #48]
 1675 0158 93F84430 		ldrb	r3, [r3, #68]
 1676 015c 5BB2     		sxtb	r3, r3
 1677 015e B3F1FF3F 		cmp	r3, #-1
 1678 0162 03D1     		bne	.L105
 1679              		.loc 1 903 3 is_stmt 0 discriminator 1
 1680 0164 3B6B     		ldr	r3, [r7, #48]
 1681 0166 0022     		movs	r2, #0
 1682 0168 83F84420 		strb	r2, [r3, #68]
 1683              	.L105:
 1684              		.loc 1 903 3 discriminator 3
 1685 016c 3B6B     		ldr	r3, [r7, #48]
 1686 016e 93F84530 		ldrb	r3, [r3, #69]
 1687 0172 5BB2     		sxtb	r3, r3
 1688 0174 B3F1FF3F 		cmp	r3, #-1
 1689 0178 03D1     		bne	.L106
 1690              		.loc 1 903 3 discriminator 4
 1691 017a 3B6B     		ldr	r3, [r7, #48]
 1692 017c 0022     		movs	r2, #0
 1693 017e 83F84520 		strb	r2, [r3, #69]
 1694              	.L106:
 1695              		.loc 1 903 3 discriminator 6
 1696 0182 FFF7FEFF 		bl	vPortExitCritical
 904:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 50


 905:./Libraries/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 906:./Libraries/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1697              		.loc 1 906 7 is_stmt 1 discriminator 6
 1698 0186 3A1D     		adds	r2, r7, #4
 1699 0188 07F11403 		add	r3, r7, #20
 1700 018c 1146     		mov	r1, r2
 1701 018e 1846     		mov	r0, r3
 1702 0190 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1703 0194 0346     		mov	r3, r0
 1704              		.loc 1 906 5 discriminator 6
 1705 0196 002B     		cmp	r3, #0
 1706 0198 24D1     		bne	.L107
 907:./Libraries/FreeRTOS/Source/queue.c **** 		{
 908:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1707              		.loc 1 908 8
 1708 019a 386B     		ldr	r0, [r7, #48]
 1709 019c FFF7FEFF 		bl	prvIsQueueFull
 1710 01a0 0346     		mov	r3, r0
 1711              		.loc 1 908 6
 1712 01a2 002B     		cmp	r3, #0
 1713 01a4 18D0     		beq	.L108
 909:./Libraries/FreeRTOS/Source/queue.c **** 			{
 910:./Libraries/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 911:./Libraries/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1714              		.loc 1 911 5
 1715 01a6 3B6B     		ldr	r3, [r7, #48]
 1716 01a8 1033     		adds	r3, r3, #16
 1717 01aa 7A68     		ldr	r2, [r7, #4]
 1718 01ac 1146     		mov	r1, r2
 1719 01ae 1846     		mov	r0, r3
 1720 01b0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 912:./Libraries/FreeRTOS/Source/queue.c **** 
 913:./Libraries/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 914:./Libraries/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 915:./Libraries/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 916:./Libraries/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 917:./Libraries/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 918:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1721              		.loc 1 918 5
 1722 01b4 386B     		ldr	r0, [r7, #48]
 1723 01b6 FFF7FEFF 		bl	prvUnlockQueue
 919:./Libraries/FreeRTOS/Source/queue.c **** 
 920:./Libraries/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 921:./Libraries/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 922:./Libraries/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 923:./Libraries/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 924:./Libraries/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 925:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1724              		.loc 1 925 9
 1725 01ba FFF7FEFF 		bl	xTaskResumeAll
 1726 01be 0346     		mov	r3, r0
 1727              		.loc 1 925 7
 1728 01c0 002B     		cmp	r3, #0
 1729 01c2 7FF47CAF 		bne	.L96
 926:./Libraries/FreeRTOS/Source/queue.c **** 				{
 927:./Libraries/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1730              		.loc 1 927 6
ARM GAS  /tmp/ccv5E8P7.s 			page 51


 1731 01c6 0C4B     		ldr	r3, .L111
 1732 01c8 4FF08052 		mov	r2, #268435456
 1733 01cc 1A60     		str	r2, [r3]
 1734              		.syntax unified
 1735              	@ 927 "./Libraries/FreeRTOS/Source/queue.c" 1
 1736 01ce BFF34F8F 		dsb
 1737              	@ 0 "" 2
 1738              	@ 927 "./Libraries/FreeRTOS/Source/queue.c" 1
 1739 01d2 BFF36F8F 		isb
 1740              	@ 0 "" 2
 1741              		.thumb
 1742              		.syntax unified
 1743 01d6 72E7     		b	.L96
 1744              	.L108:
 928:./Libraries/FreeRTOS/Source/queue.c **** 				}
 929:./Libraries/FreeRTOS/Source/queue.c **** 			}
 930:./Libraries/FreeRTOS/Source/queue.c **** 			else
 931:./Libraries/FreeRTOS/Source/queue.c **** 			{
 932:./Libraries/FreeRTOS/Source/queue.c **** 				/* Try again. */
 933:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1745              		.loc 1 933 5
 1746 01d8 386B     		ldr	r0, [r7, #48]
 1747 01da FFF7FEFF 		bl	prvUnlockQueue
 934:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1748              		.loc 1 934 14
 1749 01de FFF7FEFF 		bl	xTaskResumeAll
 1750 01e2 6CE7     		b	.L96
 1751              	.L107:
 935:./Libraries/FreeRTOS/Source/queue.c **** 			}
 936:./Libraries/FreeRTOS/Source/queue.c **** 		}
 937:./Libraries/FreeRTOS/Source/queue.c **** 		else
 938:./Libraries/FreeRTOS/Source/queue.c **** 		{
 939:./Libraries/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 940:./Libraries/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1752              		.loc 1 940 4
 1753 01e4 386B     		ldr	r0, [r7, #48]
 1754 01e6 FFF7FEFF 		bl	prvUnlockQueue
 941:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1755              		.loc 1 941 13
 1756 01ea FFF7FEFF 		bl	xTaskResumeAll
 942:./Libraries/FreeRTOS/Source/queue.c **** 
 943:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 944:./Libraries/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 1757              		.loc 1 944 11
 1758 01ee 0023     		movs	r3, #0
 1759              	.L110:
 945:./Libraries/FreeRTOS/Source/queue.c **** 		}
 946:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
 947:./Libraries/FreeRTOS/Source/queue.c **** }
 1760              		.loc 1 947 1 discriminator 7
 1761 01f0 1846     		mov	r0, r3
 1762 01f2 3837     		adds	r7, r7, #56
 1763              	.LCFI69:
 1764              		.cfi_def_cfa_offset 8
 1765 01f4 BD46     		mov	sp, r7
 1766              	.LCFI70:
 1767              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccv5E8P7.s 			page 52


 1768              		@ sp needed
 1769 01f6 80BD     		pop	{r7, pc}
 1770              	.L112:
 1771              		.align	2
 1772              	.L111:
 1773 01f8 04ED00E0 		.word	-536810236
 1774              		.cfi_endproc
 1775              	.LFE17:
 1777              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1778              		.align	1
 1779              		.global	xQueueGenericSendFromISR
 1780              		.syntax unified
 1781              		.thumb
 1782              		.thumb_func
 1783              		.fpu fpv5-d16
 1785              	xQueueGenericSendFromISR:
 1786              	.LFB18:
 948:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 949:./Libraries/FreeRTOS/Source/queue.c **** 
 950:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 951:./Libraries/FreeRTOS/Source/queue.c **** {
 1787              		.loc 1 951 1
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 64
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791 0000 80B5     		push	{r7, lr}
 1792              	.LCFI71:
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796 0002 90B0     		sub	sp, sp, #64
 1797              	.LCFI72:
 1798              		.cfi_def_cfa_offset 72
 1799 0004 00AF     		add	r7, sp, #0
 1800              	.LCFI73:
 1801              		.cfi_def_cfa_register 7
 1802 0006 F860     		str	r0, [r7, #12]
 1803 0008 B960     		str	r1, [r7, #8]
 1804 000a 7A60     		str	r2, [r7, #4]
 1805 000c 3B60     		str	r3, [r7]
 952:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 953:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 954:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 1806              		.loc 1 954 17
 1807 000e FB68     		ldr	r3, [r7, #12]
 1808 0010 BB63     		str	r3, [r7, #56]
 955:./Libraries/FreeRTOS/Source/queue.c **** 
 956:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1809              		.loc 1 956 2
 1810 0012 BB6B     		ldr	r3, [r7, #56]
 1811 0014 002B     		cmp	r3, #0
 1812 0016 0AD1     		bne	.L114
 1813              	.LBB155:
 1814              	.LBB156:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1815              		.loc 2 195 2
 1816              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 53


 1817              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1818 0018 4FF05003 			mov r3, #80												
 1819 001c 83F31188 		msr basepri, r3											
 1820 0020 BFF36F8F 		isb														
 1821 0024 BFF34F8F 		dsb														
 1822              	
 1823              	@ 0 "" 2
 1824              		.thumb
 1825              		.syntax unified
 1826 0028 BB62     		str	r3, [r7, #40]
 1827              		.loc 2 203 1
 1828 002a 00BF     		nop
 1829              	.L115:
 1830              	.LBE156:
 1831              	.LBE155:
 1832              		.loc 1 956 2 discriminator 1
 1833 002c FEE7     		b	.L115
 1834              	.L114:
 957:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1835              		.loc 1 957 2
 1836 002e BB68     		ldr	r3, [r7, #8]
 1837 0030 002B     		cmp	r3, #0
 1838 0032 03D1     		bne	.L116
 1839              		.loc 1 957 2 is_stmt 0 discriminator 2
 1840 0034 BB6B     		ldr	r3, [r7, #56]
 1841 0036 1B6C     		ldr	r3, [r3, #64]
 1842 0038 002B     		cmp	r3, #0
 1843 003a 01D1     		bne	.L117
 1844              	.L116:
 1845              		.loc 1 957 2 discriminator 3
 1846 003c 0123     		movs	r3, #1
 1847 003e 00E0     		b	.L118
 1848              	.L117:
 1849              		.loc 1 957 2 discriminator 4
 1850 0040 0023     		movs	r3, #0
 1851              	.L118:
 1852              		.loc 1 957 2 discriminator 6
 1853 0042 002B     		cmp	r3, #0
 1854 0044 0AD1     		bne	.L119
 1855              	.LBB157:
 1856              	.LBB158:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1857              		.loc 2 195 2 is_stmt 1
 1858              		.syntax unified
 1859              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1860 0046 4FF05003 			mov r3, #80												
 1861 004a 83F31188 		msr basepri, r3											
 1862 004e BFF36F8F 		isb														
 1863 0052 BFF34F8F 		dsb														
 1864              	
 1865              	@ 0 "" 2
 1866              		.thumb
 1867              		.syntax unified
 1868 0056 7B62     		str	r3, [r7, #36]
 1869              		.loc 2 203 1
 1870 0058 00BF     		nop
 1871              	.L120:
ARM GAS  /tmp/ccv5E8P7.s 			page 54


 1872              	.LBE158:
 1873              	.LBE157:
 1874              		.loc 1 957 2 discriminator 2
 1875 005a FEE7     		b	.L120
 1876              	.L119:
 958:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1877              		.loc 1 958 2
 1878 005c 3B68     		ldr	r3, [r7]
 1879 005e 022B     		cmp	r3, #2
 1880 0060 03D1     		bne	.L121
 1881              		.loc 1 958 2 is_stmt 0 discriminator 2
 1882 0062 BB6B     		ldr	r3, [r7, #56]
 1883 0064 DB6B     		ldr	r3, [r3, #60]
 1884 0066 012B     		cmp	r3, #1
 1885 0068 01D1     		bne	.L122
 1886              	.L121:
 1887              		.loc 1 958 2 discriminator 3
 1888 006a 0123     		movs	r3, #1
 1889 006c 00E0     		b	.L123
 1890              	.L122:
 1891              		.loc 1 958 2 discriminator 4
 1892 006e 0023     		movs	r3, #0
 1893              	.L123:
 1894              		.loc 1 958 2 discriminator 6
 1895 0070 002B     		cmp	r3, #0
 1896 0072 0AD1     		bne	.L124
 1897              	.LBB159:
 1898              	.LBB160:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1899              		.loc 2 195 2 is_stmt 1
 1900              		.syntax unified
 1901              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1902 0074 4FF05003 			mov r3, #80												
 1903 0078 83F31188 		msr basepri, r3											
 1904 007c BFF36F8F 		isb														
 1905 0080 BFF34F8F 		dsb														
 1906              	
 1907              	@ 0 "" 2
 1908              		.thumb
 1909              		.syntax unified
 1910 0084 3B62     		str	r3, [r7, #32]
 1911              		.loc 2 203 1
 1912 0086 00BF     		nop
 1913              	.L125:
 1914              	.LBE160:
 1915              	.LBE159:
 1916              		.loc 1 958 2 discriminator 3
 1917 0088 FEE7     		b	.L125
 1918              	.L124:
 959:./Libraries/FreeRTOS/Source/queue.c **** 
 960:./Libraries/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 961:./Libraries/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 962:./Libraries/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 963:./Libraries/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 964:./Libraries/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 965:./Libraries/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 966:./Libraries/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  /tmp/ccv5E8P7.s 			page 55


 967:./Libraries/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 968:./Libraries/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 969:./Libraries/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 970:./Libraries/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 971:./Libraries/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 972:./Libraries/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 973:./Libraries/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 974:./Libraries/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1919              		.loc 1 974 2
 1920 008a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1921              	.LBB161:
 1922              	.LBB162:
 204:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1923              		.loc 2 211 2
 1924              		.syntax unified
 1925              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1926 008e EFF31182 			mrs r2, basepri											
 1927 0092 4FF05003 		mov r3, #80												
 1928 0096 83F31188 		msr basepri, r3											
 1929 009a BFF36F8F 		isb														
 1930 009e BFF34F8F 		dsb														
 1931              	
 1932              	@ 0 "" 2
 1933              		.thumb
 1934              		.syntax unified
 1935 00a2 FA61     		str	r2, [r7, #28]
 1936 00a4 BB61     		str	r3, [r7, #24]
 212:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1937              		.loc 2 223 9
 1938 00a6 FB69     		ldr	r3, [r7, #28]
 1939              	.LBE162:
 1940              	.LBE161:
 975:./Libraries/FreeRTOS/Source/queue.c **** 
 976:./Libraries/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 977:./Libraries/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 978:./Libraries/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 979:./Libraries/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 980:./Libraries/FreeRTOS/Source/queue.c **** 	post). */
 981:./Libraries/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/ccv5E8P7.s 			page 56


 1941              		.loc 1 981 27
 1942 00a8 7B63     		str	r3, [r7, #52]
 982:./Libraries/FreeRTOS/Source/queue.c **** 	{
 983:./Libraries/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1943              		.loc 1 983 16
 1944 00aa BB6B     		ldr	r3, [r7, #56]
 1945 00ac 9A6B     		ldr	r2, [r3, #56]
 1946              		.loc 1 983 45
 1947 00ae BB6B     		ldr	r3, [r7, #56]
 1948 00b0 DB6B     		ldr	r3, [r3, #60]
 1949              		.loc 1 983 5
 1950 00b2 9A42     		cmp	r2, r3
 1951 00b4 02D3     		bcc	.L127
 1952              		.loc 1 983 58 discriminator 1
 1953 00b6 3B68     		ldr	r3, [r7]
 1954 00b8 022B     		cmp	r3, #2
 1955 00ba 2FD1     		bne	.L128
 1956              	.L127:
 1957              	.LBB163:
 984:./Libraries/FreeRTOS/Source/queue.c **** 		{
 985:./Libraries/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1958              		.loc 1 985 17
 1959 00bc BB6B     		ldr	r3, [r7, #56]
 1960 00be 93F84530 		ldrb	r3, [r3, #69]
 1961 00c2 87F83330 		strb	r3, [r7, #51]
 986:./Libraries/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1962              		.loc 1 986 22
 1963 00c6 BB6B     		ldr	r3, [r7, #56]
 1964 00c8 9B6B     		ldr	r3, [r3, #56]
 1965 00ca FB62     		str	r3, [r7, #44]
 987:./Libraries/FreeRTOS/Source/queue.c **** 
 988:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 989:./Libraries/FreeRTOS/Source/queue.c **** 
 990:./Libraries/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 991:./Libraries/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 992:./Libraries/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 993:./Libraries/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 994:./Libraries/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 995:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1966              		.loc 1 995 13
 1967 00cc 3A68     		ldr	r2, [r7]
 1968 00ce B968     		ldr	r1, [r7, #8]
 1969 00d0 B86B     		ldr	r0, [r7, #56]
 1970 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
 996:./Libraries/FreeRTOS/Source/queue.c **** 
 997:./Libraries/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 998:./Libraries/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 999:./Libraries/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1971              		.loc 1 999 6
 1972 00d6 97F93330 		ldrsb	r3, [r7, #51]
 1973 00da B3F1FF3F 		cmp	r3, #-1
 1974 00de 12D1     		bne	.L129
1000:./Libraries/FreeRTOS/Source/queue.c **** 			{
1001:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1002:./Libraries/FreeRTOS/Source/queue.c **** 				{
1003:./Libraries/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1004:./Libraries/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccv5E8P7.s 			page 57


1005:./Libraries/FreeRTOS/Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
1006:./Libraries/FreeRTOS/Source/queue.c **** 						{
1007:./Libraries/FreeRTOS/Source/queue.c **** 							/* Do not notify the queue set as an existing item
1008:./Libraries/FreeRTOS/Source/queue.c **** 							was overwritten in the queue so the number of items
1009:./Libraries/FreeRTOS/Source/queue.c **** 							in the queue has not changed. */
1010:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1011:./Libraries/FreeRTOS/Source/queue.c **** 						}
1012:./Libraries/FreeRTOS/Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1013:./Libraries/FreeRTOS/Source/queue.c **** 						{
1014:./Libraries/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1015:./Libraries/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
1016:./Libraries/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
1017:./Libraries/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1018:./Libraries/FreeRTOS/Source/queue.c **** 							{
1019:./Libraries/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1020:./Libraries/FreeRTOS/Source/queue.c **** 							}
1021:./Libraries/FreeRTOS/Source/queue.c **** 							else
1022:./Libraries/FreeRTOS/Source/queue.c **** 							{
1023:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1024:./Libraries/FreeRTOS/Source/queue.c **** 							}
1025:./Libraries/FreeRTOS/Source/queue.c **** 						}
1026:./Libraries/FreeRTOS/Source/queue.c **** 						else
1027:./Libraries/FreeRTOS/Source/queue.c **** 						{
1028:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1029:./Libraries/FreeRTOS/Source/queue.c **** 						}
1030:./Libraries/FreeRTOS/Source/queue.c **** 					}
1031:./Libraries/FreeRTOS/Source/queue.c **** 					else
1032:./Libraries/FreeRTOS/Source/queue.c **** 					{
1033:./Libraries/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1034:./Libraries/FreeRTOS/Source/queue.c **** 						{
1035:./Libraries/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1036:./Libraries/FreeRTOS/Source/queue.c **** 							{
1037:./Libraries/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1038:./Libraries/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1039:./Libraries/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1040:./Libraries/FreeRTOS/Source/queue.c **** 								{
1041:./Libraries/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1042:./Libraries/FreeRTOS/Source/queue.c **** 								}
1043:./Libraries/FreeRTOS/Source/queue.c **** 								else
1044:./Libraries/FreeRTOS/Source/queue.c **** 								{
1045:./Libraries/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1046:./Libraries/FreeRTOS/Source/queue.c **** 								}
1047:./Libraries/FreeRTOS/Source/queue.c **** 							}
1048:./Libraries/FreeRTOS/Source/queue.c **** 							else
1049:./Libraries/FreeRTOS/Source/queue.c **** 							{
1050:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1051:./Libraries/FreeRTOS/Source/queue.c **** 							}
1052:./Libraries/FreeRTOS/Source/queue.c **** 						}
1053:./Libraries/FreeRTOS/Source/queue.c **** 						else
1054:./Libraries/FreeRTOS/Source/queue.c **** 						{
1055:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1056:./Libraries/FreeRTOS/Source/queue.c **** 						}
1057:./Libraries/FreeRTOS/Source/queue.c **** 					}
1058:./Libraries/FreeRTOS/Source/queue.c **** 				}
1059:./Libraries/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1060:./Libraries/FreeRTOS/Source/queue.c **** 				{
1061:./Libraries/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/ccv5E8P7.s 			page 58


 1975              		.loc 1 1061 10
 1976 00e0 BB6B     		ldr	r3, [r7, #56]
 1977 00e2 5B6A     		ldr	r3, [r3, #36]
 1978              		.loc 1 1061 8
 1979 00e4 002B     		cmp	r3, #0
 1980 00e6 16D0     		beq	.L130
1062:./Libraries/FreeRTOS/Source/queue.c **** 					{
1063:./Libraries/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1981              		.loc 1 1063 37
 1982 00e8 BB6B     		ldr	r3, [r7, #56]
 1983 00ea 2433     		adds	r3, r3, #36
 1984              		.loc 1 1063 11
 1985 00ec 1846     		mov	r0, r3
 1986 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1987 00f2 0346     		mov	r3, r0
 1988              		.loc 1 1063 9
 1989 00f4 002B     		cmp	r3, #0
 1990 00f6 0ED0     		beq	.L130
1064:./Libraries/FreeRTOS/Source/queue.c **** 						{
1065:./Libraries/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1066:./Libraries/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1067:./Libraries/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1991              		.loc 1 1067 10
 1992 00f8 7B68     		ldr	r3, [r7, #4]
 1993 00fa 002B     		cmp	r3, #0
 1994 00fc 0BD0     		beq	.L130
1068:./Libraries/FreeRTOS/Source/queue.c **** 							{
1069:./Libraries/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1995              		.loc 1 1069 36
 1996 00fe 7B68     		ldr	r3, [r7, #4]
 1997 0100 0122     		movs	r2, #1
 1998 0102 1A60     		str	r2, [r3]
 1999 0104 07E0     		b	.L130
 2000              	.L129:
1070:./Libraries/FreeRTOS/Source/queue.c **** 							}
1071:./Libraries/FreeRTOS/Source/queue.c **** 							else
1072:./Libraries/FreeRTOS/Source/queue.c **** 							{
1073:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1074:./Libraries/FreeRTOS/Source/queue.c **** 							}
1075:./Libraries/FreeRTOS/Source/queue.c **** 						}
1076:./Libraries/FreeRTOS/Source/queue.c **** 						else
1077:./Libraries/FreeRTOS/Source/queue.c **** 						{
1078:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1079:./Libraries/FreeRTOS/Source/queue.c **** 						}
1080:./Libraries/FreeRTOS/Source/queue.c **** 					}
1081:./Libraries/FreeRTOS/Source/queue.c **** 					else
1082:./Libraries/FreeRTOS/Source/queue.c **** 					{
1083:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1084:./Libraries/FreeRTOS/Source/queue.c **** 					}
1085:./Libraries/FreeRTOS/Source/queue.c **** 					
1086:./Libraries/FreeRTOS/Source/queue.c **** 					/* Not used in this path. */
1087:./Libraries/FreeRTOS/Source/queue.c **** 					( void ) uxPreviousMessagesWaiting;
1088:./Libraries/FreeRTOS/Source/queue.c **** 				}
1089:./Libraries/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1090:./Libraries/FreeRTOS/Source/queue.c **** 			}
1091:./Libraries/FreeRTOS/Source/queue.c **** 			else
1092:./Libraries/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccv5E8P7.s 			page 59


1093:./Libraries/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1094:./Libraries/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1095:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2001              		.loc 1 1095 45
 2002 0106 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 2003 010a 0133     		adds	r3, r3, #1
 2004 010c DBB2     		uxtb	r3, r3
 2005              		.loc 1 1095 24
 2006 010e 5AB2     		sxtb	r2, r3
 2007              		.loc 1 1095 22
 2008 0110 BB6B     		ldr	r3, [r7, #56]
 2009 0112 83F84520 		strb	r2, [r3, #69]
 2010              	.L130:
1096:./Libraries/FreeRTOS/Source/queue.c **** 			}
1097:./Libraries/FreeRTOS/Source/queue.c **** 
1098:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2011              		.loc 1 1098 12
 2012 0116 0123     		movs	r3, #1
 2013 0118 FB63     		str	r3, [r7, #60]
 2014              	.LBE163:
 984:./Libraries/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 2015              		.loc 1 984 3
 2016 011a 01E0     		b	.L131
 2017              	.L128:
1099:./Libraries/FreeRTOS/Source/queue.c **** 		}
1100:./Libraries/FreeRTOS/Source/queue.c **** 		else
1101:./Libraries/FreeRTOS/Source/queue.c **** 		{
1102:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1103:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 2018              		.loc 1 1103 12
 2019 011c 0023     		movs	r3, #0
 2020 011e FB63     		str	r3, [r7, #60]
 2021              	.L131:
 2022 0120 7B6B     		ldr	r3, [r7, #52]
 2023 0122 7B61     		str	r3, [r7, #20]
 2024              	.LBB164:
 2025              	.LBB165:
 224:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 2026              		.loc 2 229 2
 2027 0124 7B69     		ldr	r3, [r7, #20]
 2028              		.syntax unified
 2029              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2030 0126 83F31188 			msr basepri, r3	
 2031              	@ 0 "" 2
 230:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2032              		.loc 2 233 1
 2033              		.thumb
 2034              		.syntax unified
 2035 012a 00BF     		nop
ARM GAS  /tmp/ccv5E8P7.s 			page 60


 2036              	.LBE165:
 2037              	.LBE164:
1104:./Libraries/FreeRTOS/Source/queue.c **** 		}
1105:./Libraries/FreeRTOS/Source/queue.c **** 	}
1106:./Libraries/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1107:./Libraries/FreeRTOS/Source/queue.c **** 
1108:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 2038              		.loc 1 1108 9
 2039 012c FB6B     		ldr	r3, [r7, #60]
1109:./Libraries/FreeRTOS/Source/queue.c **** }
 2040              		.loc 1 1109 1
 2041 012e 1846     		mov	r0, r3
 2042 0130 4037     		adds	r7, r7, #64
 2043              	.LCFI74:
 2044              		.cfi_def_cfa_offset 8
 2045 0132 BD46     		mov	sp, r7
 2046              	.LCFI75:
 2047              		.cfi_def_cfa_register 13
 2048              		@ sp needed
 2049 0134 80BD     		pop	{r7, pc}
 2050              		.cfi_endproc
 2051              	.LFE18:
 2053              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 2054              		.align	1
 2055              		.global	xQueueGiveFromISR
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv5-d16
 2061              	xQueueGiveFromISR:
 2062              	.LFB19:
1110:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1111:./Libraries/FreeRTOS/Source/queue.c **** 
1112:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1113:./Libraries/FreeRTOS/Source/queue.c **** {
 2063              		.loc 1 1113 1
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 56
 2066              		@ frame_needed = 1, uses_anonymous_args = 0
 2067 0000 80B5     		push	{r7, lr}
 2068              	.LCFI76:
 2069              		.cfi_def_cfa_offset 8
 2070              		.cfi_offset 7, -8
 2071              		.cfi_offset 14, -4
 2072 0002 8EB0     		sub	sp, sp, #56
 2073              	.LCFI77:
 2074              		.cfi_def_cfa_offset 64
 2075 0004 00AF     		add	r7, sp, #0
 2076              	.LCFI78:
 2077              		.cfi_def_cfa_register 7
 2078 0006 7860     		str	r0, [r7, #4]
 2079 0008 3960     		str	r1, [r7]
1114:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1115:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1116:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 2080              		.loc 1 1116 17
 2081 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccv5E8P7.s 			page 61


 2082 000c 3B63     		str	r3, [r7, #48]
1117:./Libraries/FreeRTOS/Source/queue.c **** 
1118:./Libraries/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1119:./Libraries/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1120:./Libraries/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1121:./Libraries/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1122:./Libraries/FreeRTOS/Source/queue.c **** 	post). */
1123:./Libraries/FreeRTOS/Source/queue.c **** 
1124:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 2083              		.loc 1 1124 2
 2084 000e 3B6B     		ldr	r3, [r7, #48]
 2085 0010 002B     		cmp	r3, #0
 2086 0012 0AD1     		bne	.L134
 2087              	.LBB166:
 2088              	.LBB167:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2089              		.loc 2 195 2
 2090              		.syntax unified
 2091              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2092 0014 4FF05003 			mov r3, #80												
 2093 0018 83F31188 		msr basepri, r3											
 2094 001c BFF36F8F 		isb														
 2095 0020 BFF34F8F 		dsb														
 2096              	
 2097              	@ 0 "" 2
 2098              		.thumb
 2099              		.syntax unified
 2100 0024 3B62     		str	r3, [r7, #32]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2101              		.loc 2 203 1
 2102 0026 00BF     		nop
 2103              	.L135:
 2104              	.LBE167:
 2105              	.LBE166:
 2106              		.loc 1 1124 2 discriminator 1
 2107 0028 FEE7     		b	.L135
 2108              	.L134:
1125:./Libraries/FreeRTOS/Source/queue.c **** 
1126:./Libraries/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1127:./Libraries/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1128:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 2109              		.loc 1 1128 2
 2110 002a 3B6B     		ldr	r3, [r7, #48]
 2111 002c 1B6C     		ldr	r3, [r3, #64]
 2112 002e 002B     		cmp	r3, #0
 2113 0030 0AD0     		beq	.L136
 2114              	.LBB168:
 2115              	.LBB169:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2116              		.loc 2 195 2
 2117              		.syntax unified
 2118              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2119 0032 4FF05003 			mov r3, #80												
 2120 0036 83F31188 		msr basepri, r3											
 2121 003a BFF36F8F 		isb														
 2122 003e BFF34F8F 		dsb														
 2123              	
ARM GAS  /tmp/ccv5E8P7.s 			page 62


 2124              	@ 0 "" 2
 2125              		.thumb
 2126              		.syntax unified
 2127 0042 FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2128              		.loc 2 203 1
 2129 0044 00BF     		nop
 2130              	.L137:
 2131              	.LBE169:
 2132              	.LBE168:
 2133              		.loc 1 1128 2 discriminator 2
 2134 0046 FEE7     		b	.L137
 2135              	.L136:
1129:./Libraries/FreeRTOS/Source/queue.c **** 
1130:./Libraries/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1131:./Libraries/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1132:./Libraries/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1133:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
 2136              		.loc 1 1133 2
 2137 0048 3B6B     		ldr	r3, [r7, #48]
 2138 004a 1B68     		ldr	r3, [r3]
 2139 004c 002B     		cmp	r3, #0
 2140 004e 03D1     		bne	.L138
 2141              		.loc 1 1133 2 is_stmt 0 discriminator 2
 2142 0050 3B6B     		ldr	r3, [r7, #48]
 2143 0052 9B68     		ldr	r3, [r3, #8]
 2144 0054 002B     		cmp	r3, #0
 2145 0056 01D1     		bne	.L139
 2146              	.L138:
 2147              		.loc 1 1133 2 discriminator 3
 2148 0058 0123     		movs	r3, #1
 2149 005a 00E0     		b	.L140
 2150              	.L139:
 2151              		.loc 1 1133 2 discriminator 4
 2152 005c 0023     		movs	r3, #0
 2153              	.L140:
 2154              		.loc 1 1133 2 discriminator 6
 2155 005e 002B     		cmp	r3, #0
 2156 0060 0AD1     		bne	.L141
 2157              	.LBB170:
 2158              	.LBB171:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2159              		.loc 2 195 2 is_stmt 1
 2160              		.syntax unified
 2161              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2162 0062 4FF05003 			mov r3, #80												
 2163 0066 83F31188 		msr basepri, r3											
 2164 006a BFF36F8F 		isb														
 2165 006e BFF34F8F 		dsb														
 2166              	
 2167              	@ 0 "" 2
 2168              		.thumb
 2169              		.syntax unified
 2170 0072 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2171              		.loc 2 203 1
 2172 0074 00BF     		nop
ARM GAS  /tmp/ccv5E8P7.s 			page 63


 2173              	.L142:
 2174              	.LBE171:
 2175              	.LBE170:
 2176              		.loc 1 1133 2 discriminator 3
 2177 0076 FEE7     		b	.L142
 2178              	.L141:
1134:./Libraries/FreeRTOS/Source/queue.c **** 
1135:./Libraries/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1136:./Libraries/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1137:./Libraries/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1138:./Libraries/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1139:./Libraries/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1140:./Libraries/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1141:./Libraries/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1142:./Libraries/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1143:./Libraries/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1144:./Libraries/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1145:./Libraries/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1146:./Libraries/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1147:./Libraries/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1148:./Libraries/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1149:./Libraries/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2179              		.loc 1 1149 2
 2180 0078 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2181              	.LBB172:
 2182              	.LBB173:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2183              		.loc 2 211 2
 2184              		.syntax unified
 2185              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2186 007c EFF31182 			mrs r2, basepri											
 2187 0080 4FF05003 		mov r3, #80												
 2188 0084 83F31188 		msr basepri, r3											
 2189 0088 BFF36F8F 		isb														
 2190 008c BFF34F8F 		dsb														
 2191              	
 2192              	@ 0 "" 2
 2193              		.thumb
 2194              		.syntax unified
 2195 0090 7A61     		str	r2, [r7, #20]
 2196 0092 3B61     		str	r3, [r7, #16]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2197              		.loc 2 223 9
 2198 0094 7B69     		ldr	r3, [r7, #20]
 2199              	.LBE173:
 2200              	.LBE172:
1150:./Libraries/FreeRTOS/Source/queue.c **** 
1151:./Libraries/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2201              		.loc 1 1151 27
 2202 0096 FB62     		str	r3, [r7, #44]
 2203              	.LBB174:
1152:./Libraries/FreeRTOS/Source/queue.c **** 	{
1153:./Libraries/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2204              		.loc 1 1153 21
 2205 0098 3B6B     		ldr	r3, [r7, #48]
 2206 009a 9B6B     		ldr	r3, [r3, #56]
 2207 009c BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccv5E8P7.s 			page 64


1154:./Libraries/FreeRTOS/Source/queue.c **** 
1155:./Libraries/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1156:./Libraries/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1157:./Libraries/FreeRTOS/Source/queue.c **** 		space'. */
1158:./Libraries/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 2208              		.loc 1 1158 34
 2209 009e 3B6B     		ldr	r3, [r7, #48]
 2210 00a0 DB6B     		ldr	r3, [r3, #60]
 2211              		.loc 1 1158 5
 2212 00a2 BA6A     		ldr	r2, [r7, #40]
 2213 00a4 9A42     		cmp	r2, r3
 2214 00a6 2BD2     		bcs	.L144
 2215              	.LBB175:
1159:./Libraries/FreeRTOS/Source/queue.c **** 		{
1160:./Libraries/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 2216              		.loc 1 1160 17
 2217 00a8 3B6B     		ldr	r3, [r7, #48]
 2218 00aa 93F84530 		ldrb	r3, [r3, #69]
 2219 00ae 87F82730 		strb	r3, [r7, #39]
1161:./Libraries/FreeRTOS/Source/queue.c **** 
1162:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1163:./Libraries/FreeRTOS/Source/queue.c **** 
1164:./Libraries/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1165:./Libraries/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1166:./Libraries/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1167:./Libraries/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1168:./Libraries/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1169:./Libraries/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1170:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 2220              		.loc 1 1170 51
 2221 00b2 BB6A     		ldr	r3, [r7, #40]
 2222 00b4 5A1C     		adds	r2, r3, #1
 2223              		.loc 1 1170 31
 2224 00b6 3B6B     		ldr	r3, [r7, #48]
 2225 00b8 9A63     		str	r2, [r3, #56]
1171:./Libraries/FreeRTOS/Source/queue.c **** 
1172:./Libraries/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1173:./Libraries/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1174:./Libraries/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 2226              		.loc 1 1174 6
 2227 00ba 97F92730 		ldrsb	r3, [r7, #39]
 2228 00be B3F1FF3F 		cmp	r3, #-1
 2229 00c2 12D1     		bne	.L145
1175:./Libraries/FreeRTOS/Source/queue.c **** 			{
1176:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1177:./Libraries/FreeRTOS/Source/queue.c **** 				{
1178:./Libraries/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1179:./Libraries/FreeRTOS/Source/queue.c **** 					{
1180:./Libraries/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1181:./Libraries/FreeRTOS/Source/queue.c **** 						{
1182:./Libraries/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1183:./Libraries/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1184:./Libraries/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1185:./Libraries/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1186:./Libraries/FreeRTOS/Source/queue.c **** 							{
1187:./Libraries/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1188:./Libraries/FreeRTOS/Source/queue.c **** 							}
ARM GAS  /tmp/ccv5E8P7.s 			page 65


1189:./Libraries/FreeRTOS/Source/queue.c **** 							else
1190:./Libraries/FreeRTOS/Source/queue.c **** 							{
1191:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1192:./Libraries/FreeRTOS/Source/queue.c **** 							}
1193:./Libraries/FreeRTOS/Source/queue.c **** 						}
1194:./Libraries/FreeRTOS/Source/queue.c **** 						else
1195:./Libraries/FreeRTOS/Source/queue.c **** 						{
1196:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1197:./Libraries/FreeRTOS/Source/queue.c **** 						}
1198:./Libraries/FreeRTOS/Source/queue.c **** 					}
1199:./Libraries/FreeRTOS/Source/queue.c **** 					else
1200:./Libraries/FreeRTOS/Source/queue.c **** 					{
1201:./Libraries/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1202:./Libraries/FreeRTOS/Source/queue.c **** 						{
1203:./Libraries/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1204:./Libraries/FreeRTOS/Source/queue.c **** 							{
1205:./Libraries/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1206:./Libraries/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1207:./Libraries/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1208:./Libraries/FreeRTOS/Source/queue.c **** 								{
1209:./Libraries/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1210:./Libraries/FreeRTOS/Source/queue.c **** 								}
1211:./Libraries/FreeRTOS/Source/queue.c **** 								else
1212:./Libraries/FreeRTOS/Source/queue.c **** 								{
1213:./Libraries/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1214:./Libraries/FreeRTOS/Source/queue.c **** 								}
1215:./Libraries/FreeRTOS/Source/queue.c **** 							}
1216:./Libraries/FreeRTOS/Source/queue.c **** 							else
1217:./Libraries/FreeRTOS/Source/queue.c **** 							{
1218:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1219:./Libraries/FreeRTOS/Source/queue.c **** 							}
1220:./Libraries/FreeRTOS/Source/queue.c **** 						}
1221:./Libraries/FreeRTOS/Source/queue.c **** 						else
1222:./Libraries/FreeRTOS/Source/queue.c **** 						{
1223:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1224:./Libraries/FreeRTOS/Source/queue.c **** 						}
1225:./Libraries/FreeRTOS/Source/queue.c **** 					}
1226:./Libraries/FreeRTOS/Source/queue.c **** 				}
1227:./Libraries/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1228:./Libraries/FreeRTOS/Source/queue.c **** 				{
1229:./Libraries/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2230              		.loc 1 1229 10
 2231 00c4 3B6B     		ldr	r3, [r7, #48]
 2232 00c6 5B6A     		ldr	r3, [r3, #36]
 2233              		.loc 1 1229 8
 2234 00c8 002B     		cmp	r3, #0
 2235 00ca 16D0     		beq	.L146
1230:./Libraries/FreeRTOS/Source/queue.c **** 					{
1231:./Libraries/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2236              		.loc 1 1231 37
 2237 00cc 3B6B     		ldr	r3, [r7, #48]
 2238 00ce 2433     		adds	r3, r3, #36
 2239              		.loc 1 1231 11
 2240 00d0 1846     		mov	r0, r3
 2241 00d2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2242 00d6 0346     		mov	r3, r0
 2243              		.loc 1 1231 9
ARM GAS  /tmp/ccv5E8P7.s 			page 66


 2244 00d8 002B     		cmp	r3, #0
 2245 00da 0ED0     		beq	.L146
1232:./Libraries/FreeRTOS/Source/queue.c **** 						{
1233:./Libraries/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1234:./Libraries/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1235:./Libraries/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 2246              		.loc 1 1235 10
 2247 00dc 3B68     		ldr	r3, [r7]
 2248 00de 002B     		cmp	r3, #0
 2249 00e0 0BD0     		beq	.L146
1236:./Libraries/FreeRTOS/Source/queue.c **** 							{
1237:./Libraries/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 2250              		.loc 1 1237 36
 2251 00e2 3B68     		ldr	r3, [r7]
 2252 00e4 0122     		movs	r2, #1
 2253 00e6 1A60     		str	r2, [r3]
 2254 00e8 07E0     		b	.L146
 2255              	.L145:
1238:./Libraries/FreeRTOS/Source/queue.c **** 							}
1239:./Libraries/FreeRTOS/Source/queue.c **** 							else
1240:./Libraries/FreeRTOS/Source/queue.c **** 							{
1241:./Libraries/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1242:./Libraries/FreeRTOS/Source/queue.c **** 							}
1243:./Libraries/FreeRTOS/Source/queue.c **** 						}
1244:./Libraries/FreeRTOS/Source/queue.c **** 						else
1245:./Libraries/FreeRTOS/Source/queue.c **** 						{
1246:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1247:./Libraries/FreeRTOS/Source/queue.c **** 						}
1248:./Libraries/FreeRTOS/Source/queue.c **** 					}
1249:./Libraries/FreeRTOS/Source/queue.c **** 					else
1250:./Libraries/FreeRTOS/Source/queue.c **** 					{
1251:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1252:./Libraries/FreeRTOS/Source/queue.c **** 					}
1253:./Libraries/FreeRTOS/Source/queue.c **** 				}
1254:./Libraries/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1255:./Libraries/FreeRTOS/Source/queue.c **** 			}
1256:./Libraries/FreeRTOS/Source/queue.c **** 			else
1257:./Libraries/FreeRTOS/Source/queue.c **** 			{
1258:./Libraries/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1259:./Libraries/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1260:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2256              		.loc 1 1260 45
 2257 00ea 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2258 00ee 0133     		adds	r3, r3, #1
 2259 00f0 DBB2     		uxtb	r3, r3
 2260              		.loc 1 1260 24
 2261 00f2 5AB2     		sxtb	r2, r3
 2262              		.loc 1 1260 22
 2263 00f4 3B6B     		ldr	r3, [r7, #48]
 2264 00f6 83F84520 		strb	r2, [r3, #69]
 2265              	.L146:
1261:./Libraries/FreeRTOS/Source/queue.c **** 			}
1262:./Libraries/FreeRTOS/Source/queue.c **** 
1263:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2266              		.loc 1 1263 12
 2267 00fa 0123     		movs	r3, #1
 2268 00fc 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/ccv5E8P7.s 			page 67


 2269              	.LBE175:
 2270 00fe 01E0     		b	.L147
 2271              	.L144:
1264:./Libraries/FreeRTOS/Source/queue.c **** 		}
1265:./Libraries/FreeRTOS/Source/queue.c **** 		else
1266:./Libraries/FreeRTOS/Source/queue.c **** 		{
1267:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1268:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 2272              		.loc 1 1268 12
 2273 0100 0023     		movs	r3, #0
 2274 0102 7B63     		str	r3, [r7, #52]
 2275              	.L147:
 2276 0104 FB6A     		ldr	r3, [r7, #44]
 2277 0106 FB60     		str	r3, [r7, #12]
 2278              	.LBE174:
 2279              	.LBB176:
 2280              	.LBB177:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2281              		.loc 2 229 2
 2282 0108 FB68     		ldr	r3, [r7, #12]
 2283              		.syntax unified
 2284              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2285 010a 83F31188 			msr basepri, r3	
 2286              	@ 0 "" 2
 2287              		.loc 2 233 1
 2288              		.thumb
 2289              		.syntax unified
 2290 010e 00BF     		nop
 2291              	.LBE177:
 2292              	.LBE176:
1269:./Libraries/FreeRTOS/Source/queue.c **** 		}
1270:./Libraries/FreeRTOS/Source/queue.c **** 	}
1271:./Libraries/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1272:./Libraries/FreeRTOS/Source/queue.c **** 
1273:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 2293              		.loc 1 1273 9
 2294 0110 7B6B     		ldr	r3, [r7, #52]
1274:./Libraries/FreeRTOS/Source/queue.c **** }
 2295              		.loc 1 1274 1
 2296 0112 1846     		mov	r0, r3
 2297 0114 3837     		adds	r7, r7, #56
 2298              	.LCFI79:
 2299              		.cfi_def_cfa_offset 8
 2300 0116 BD46     		mov	sp, r7
 2301              	.LCFI80:
 2302              		.cfi_def_cfa_register 13
 2303              		@ sp needed
 2304 0118 80BD     		pop	{r7, pc}
 2305              		.cfi_endproc
 2306              	.LFE19:
 2308              		.section	.text.xQueueReceive,"ax",%progbits
 2309              		.align	1
 2310              		.global	xQueueReceive
 2311              		.syntax unified
 2312              		.thumb
 2313              		.thumb_func
 2314              		.fpu fpv5-d16
ARM GAS  /tmp/ccv5E8P7.s 			page 68


 2316              	xQueueReceive:
 2317              	.LFB20:
1275:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1276:./Libraries/FreeRTOS/Source/queue.c **** 
1277:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1278:./Libraries/FreeRTOS/Source/queue.c **** {
 2318              		.loc 1 1278 1
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 48
 2321              		@ frame_needed = 1, uses_anonymous_args = 0
 2322 0000 80B5     		push	{r7, lr}
 2323              	.LCFI81:
 2324              		.cfi_def_cfa_offset 8
 2325              		.cfi_offset 7, -8
 2326              		.cfi_offset 14, -4
 2327 0002 8CB0     		sub	sp, sp, #48
 2328              	.LCFI82:
 2329              		.cfi_def_cfa_offset 56
 2330 0004 00AF     		add	r7, sp, #0
 2331              	.LCFI83:
 2332              		.cfi_def_cfa_register 7
 2333 0006 F860     		str	r0, [r7, #12]
 2334 0008 B960     		str	r1, [r7, #8]
 2335 000a 7A60     		str	r2, [r7, #4]
1279:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2336              		.loc 1 1279 12
 2337 000c 0023     		movs	r3, #0
 2338 000e FB62     		str	r3, [r7, #44]
1280:./Libraries/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1281:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 2339              		.loc 1 1281 17
 2340 0010 FB68     		ldr	r3, [r7, #12]
 2341 0012 BB62     		str	r3, [r7, #40]
1282:./Libraries/FreeRTOS/Source/queue.c **** 
1283:./Libraries/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1284:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
 2342              		.loc 1 1284 2
 2343 0014 BB6A     		ldr	r3, [r7, #40]
 2344 0016 002B     		cmp	r3, #0
 2345 0018 0AD1     		bne	.L150
 2346              	.LBB178:
 2347              	.LBB179:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2348              		.loc 2 195 2
 2349              		.syntax unified
 2350              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2351 001a 4FF05003 			mov r3, #80												
 2352 001e 83F31188 		msr basepri, r3											
 2353 0022 BFF36F8F 		isb														
 2354 0026 BFF34F8F 		dsb														
 2355              	
 2356              	@ 0 "" 2
 2357              		.thumb
 2358              		.syntax unified
 2359 002a 3B62     		str	r3, [r7, #32]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2360              		.loc 2 203 1
ARM GAS  /tmp/ccv5E8P7.s 			page 69


 2361 002c 00BF     		nop
 2362              	.L151:
 2363              	.LBE179:
 2364              	.LBE178:
 2365              		.loc 1 1284 2 discriminator 1
 2366 002e FEE7     		b	.L151
 2367              	.L150:
1285:./Libraries/FreeRTOS/Source/queue.c **** 
1286:./Libraries/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1287:./Libraries/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1288:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2368              		.loc 1 1288 2
 2369 0030 BB68     		ldr	r3, [r7, #8]
 2370 0032 002B     		cmp	r3, #0
 2371 0034 03D1     		bne	.L152
 2372              		.loc 1 1288 2 is_stmt 0 discriminator 2
 2373 0036 BB6A     		ldr	r3, [r7, #40]
 2374 0038 1B6C     		ldr	r3, [r3, #64]
 2375 003a 002B     		cmp	r3, #0
 2376 003c 01D1     		bne	.L153
 2377              	.L152:
 2378              		.loc 1 1288 2 discriminator 3
 2379 003e 0123     		movs	r3, #1
 2380 0040 00E0     		b	.L154
 2381              	.L153:
 2382              		.loc 1 1288 2 discriminator 4
 2383 0042 0023     		movs	r3, #0
 2384              	.L154:
 2385              		.loc 1 1288 2 discriminator 6
 2386 0044 002B     		cmp	r3, #0
 2387 0046 0AD1     		bne	.L155
 2388              	.LBB180:
 2389              	.LBB181:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2390              		.loc 2 195 2 is_stmt 1
 2391              		.syntax unified
 2392              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2393 0048 4FF05003 			mov r3, #80												
 2394 004c 83F31188 		msr basepri, r3											
 2395 0050 BFF36F8F 		isb														
 2396 0054 BFF34F8F 		dsb														
 2397              	
 2398              	@ 0 "" 2
 2399              		.thumb
 2400              		.syntax unified
 2401 0058 FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2402              		.loc 2 203 1
 2403 005a 00BF     		nop
 2404              	.L156:
 2405              	.LBE181:
 2406              	.LBE180:
 2407              		.loc 1 1288 2 discriminator 2
 2408 005c FEE7     		b	.L156
 2409              	.L155:
1289:./Libraries/FreeRTOS/Source/queue.c **** 
1290:./Libraries/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
ARM GAS  /tmp/ccv5E8P7.s 			page 70


1291:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1292:./Libraries/FreeRTOS/Source/queue.c **** 	{
1293:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 2410              		.loc 1 1293 3
 2411 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 2412 0062 0346     		mov	r3, r0
 2413 0064 002B     		cmp	r3, #0
 2414 0066 02D1     		bne	.L157
 2415              		.loc 1 1293 3 is_stmt 0 discriminator 2
 2416 0068 7B68     		ldr	r3, [r7, #4]
 2417 006a 002B     		cmp	r3, #0
 2418 006c 01D1     		bne	.L158
 2419              	.L157:
 2420              		.loc 1 1293 3 discriminator 3
 2421 006e 0123     		movs	r3, #1
 2422 0070 00E0     		b	.L159
 2423              	.L158:
 2424              		.loc 1 1293 3 discriminator 4
 2425 0072 0023     		movs	r3, #0
 2426              	.L159:
 2427              		.loc 1 1293 3 discriminator 6
 2428 0074 002B     		cmp	r3, #0
 2429 0076 0AD1     		bne	.L160
 2430              	.LBB182:
 2431              	.LBB183:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2432              		.loc 2 195 2 is_stmt 1
 2433              		.syntax unified
 2434              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2435 0078 4FF05003 			mov r3, #80												
 2436 007c 83F31188 		msr basepri, r3											
 2437 0080 BFF36F8F 		isb														
 2438 0084 BFF34F8F 		dsb														
 2439              	
 2440              	@ 0 "" 2
 2441              		.thumb
 2442              		.syntax unified
 2443 0088 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2444              		.loc 2 203 1
 2445 008a 00BF     		nop
 2446              	.L161:
 2447              	.LBE183:
 2448              	.LBE182:
 2449              		.loc 1 1293 3 discriminator 3
 2450 008c FEE7     		b	.L161
 2451              	.L160:
1294:./Libraries/FreeRTOS/Source/queue.c **** 	}
1295:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
1296:./Libraries/FreeRTOS/Source/queue.c **** 
1297:./Libraries/FreeRTOS/Source/queue.c **** 
1298:./Libraries/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1299:./Libraries/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1300:./Libraries/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1301:./Libraries/FreeRTOS/Source/queue.c **** 	for( ;; )
1302:./Libraries/FreeRTOS/Source/queue.c **** 	{
1303:./Libraries/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccv5E8P7.s 			page 71


 2452              		.loc 1 1303 3
 2453 008e FFF7FEFF 		bl	vPortEnterCritical
 2454              	.LBB184:
1304:./Libraries/FreeRTOS/Source/queue.c **** 		{
1305:./Libraries/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2455              		.loc 1 1305 22
 2456 0092 BB6A     		ldr	r3, [r7, #40]
 2457 0094 9B6B     		ldr	r3, [r3, #56]
 2458 0096 7B62     		str	r3, [r7, #36]
1306:./Libraries/FreeRTOS/Source/queue.c **** 
1307:./Libraries/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1308:./Libraries/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1309:./Libraries/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2459              		.loc 1 1309 6
 2460 0098 7B6A     		ldr	r3, [r7, #36]
 2461 009a 002B     		cmp	r3, #0
 2462 009c 1FD0     		beq	.L162
1310:./Libraries/FreeRTOS/Source/queue.c **** 			{
1311:./Libraries/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1312:./Libraries/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2463              		.loc 1 1312 5
 2464 009e B968     		ldr	r1, [r7, #8]
 2465 00a0 B86A     		ldr	r0, [r7, #40]
 2466 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1313:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1314:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2467              		.loc 1 1314 52
 2468 00a6 7B6A     		ldr	r3, [r7, #36]
 2469 00a8 5A1E     		subs	r2, r3, #1
 2470              		.loc 1 1314 32
 2471 00aa BB6A     		ldr	r3, [r7, #40]
 2472 00ac 9A63     		str	r2, [r3, #56]
1315:./Libraries/FreeRTOS/Source/queue.c **** 
1316:./Libraries/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1317:./Libraries/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1318:./Libraries/FreeRTOS/Source/queue.c **** 				task. */
1319:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2473              		.loc 1 1319 9
 2474 00ae BB6A     		ldr	r3, [r7, #40]
 2475 00b0 1B69     		ldr	r3, [r3, #16]
 2476              		.loc 1 1319 7
 2477 00b2 002B     		cmp	r3, #0
 2478 00b4 0FD0     		beq	.L163
1320:./Libraries/FreeRTOS/Source/queue.c **** 				{
1321:./Libraries/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2479              		.loc 1 1321 36
 2480 00b6 BB6A     		ldr	r3, [r7, #40]
 2481 00b8 1033     		adds	r3, r3, #16
 2482              		.loc 1 1321 10
 2483 00ba 1846     		mov	r0, r3
 2484 00bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 2485 00c0 0346     		mov	r3, r0
 2486              		.loc 1 1321 8
 2487 00c2 002B     		cmp	r3, #0
 2488 00c4 07D0     		beq	.L163
1322:./Libraries/FreeRTOS/Source/queue.c **** 					{
1323:./Libraries/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/ccv5E8P7.s 			page 72


 2489              		.loc 1 1323 7
 2490 00c6 3D4B     		ldr	r3, .L173
 2491 00c8 4FF08052 		mov	r2, #268435456
 2492 00cc 1A60     		str	r2, [r3]
 2493              		.syntax unified
 2494              	@ 1323 "./Libraries/FreeRTOS/Source/queue.c" 1
 2495 00ce BFF34F8F 		dsb
 2496              	@ 0 "" 2
 2497              	@ 1323 "./Libraries/FreeRTOS/Source/queue.c" 1
 2498 00d2 BFF36F8F 		isb
 2499              	@ 0 "" 2
 2500              		.thumb
 2501              		.syntax unified
 2502              	.L163:
1324:./Libraries/FreeRTOS/Source/queue.c **** 					}
1325:./Libraries/FreeRTOS/Source/queue.c **** 					else
1326:./Libraries/FreeRTOS/Source/queue.c **** 					{
1327:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1328:./Libraries/FreeRTOS/Source/queue.c **** 					}
1329:./Libraries/FreeRTOS/Source/queue.c **** 				}
1330:./Libraries/FreeRTOS/Source/queue.c **** 				else
1331:./Libraries/FreeRTOS/Source/queue.c **** 				{
1332:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1333:./Libraries/FreeRTOS/Source/queue.c **** 				}
1334:./Libraries/FreeRTOS/Source/queue.c **** 
1335:./Libraries/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 2503              		.loc 1 1335 5
 2504 00d6 FFF7FEFF 		bl	vPortExitCritical
1336:./Libraries/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2505              		.loc 1 1336 12
 2506 00da 0123     		movs	r3, #1
 2507 00dc 69E0     		b	.L172
 2508              	.L162:
1337:./Libraries/FreeRTOS/Source/queue.c **** 			}
1338:./Libraries/FreeRTOS/Source/queue.c **** 			else
1339:./Libraries/FreeRTOS/Source/queue.c **** 			{
1340:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 2509              		.loc 1 1340 22
 2510 00de 7B68     		ldr	r3, [r7, #4]
 2511              		.loc 1 1340 7
 2512 00e0 002B     		cmp	r3, #0
 2513 00e2 03D1     		bne	.L165
1341:./Libraries/FreeRTOS/Source/queue.c **** 				{
1342:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1343:./Libraries/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1344:./Libraries/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 2514              		.loc 1 1344 6
 2515 00e4 FFF7FEFF 		bl	vPortExitCritical
1345:./Libraries/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1346:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 2516              		.loc 1 1346 13
 2517 00e8 0023     		movs	r3, #0
 2518 00ea 62E0     		b	.L172
 2519              	.L165:
1347:./Libraries/FreeRTOS/Source/queue.c **** 				}
1348:./Libraries/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 2520              		.loc 1 1348 12
ARM GAS  /tmp/ccv5E8P7.s 			page 73


 2521 00ec FB6A     		ldr	r3, [r7, #44]
 2522 00ee 002B     		cmp	r3, #0
 2523 00f0 06D1     		bne	.L166
1349:./Libraries/FreeRTOS/Source/queue.c **** 				{
1350:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1351:./Libraries/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1352:./Libraries/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 2524              		.loc 1 1352 6
 2525 00f2 07F11003 		add	r3, r7, #16
 2526 00f6 1846     		mov	r0, r3
 2527 00f8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1353:./Libraries/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2528              		.loc 1 1353 20
 2529 00fc 0123     		movs	r3, #1
 2530 00fe FB62     		str	r3, [r7, #44]
 2531              	.L166:
 2532              	.LBE184:
1354:./Libraries/FreeRTOS/Source/queue.c **** 				}
1355:./Libraries/FreeRTOS/Source/queue.c **** 				else
1356:./Libraries/FreeRTOS/Source/queue.c **** 				{
1357:./Libraries/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1358:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1359:./Libraries/FreeRTOS/Source/queue.c **** 				}
1360:./Libraries/FreeRTOS/Source/queue.c **** 			}
1361:./Libraries/FreeRTOS/Source/queue.c **** 		}
1362:./Libraries/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 2533              		.loc 1 1362 3
 2534 0100 FFF7FEFF 		bl	vPortExitCritical
1363:./Libraries/FreeRTOS/Source/queue.c **** 
1364:./Libraries/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1365:./Libraries/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1366:./Libraries/FreeRTOS/Source/queue.c **** 
1367:./Libraries/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 2535              		.loc 1 1367 3
 2536 0104 FFF7FEFF 		bl	vTaskSuspendAll
1368:./Libraries/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2537              		.loc 1 1368 3
 2538 0108 FFF7FEFF 		bl	vPortEnterCritical
 2539 010c BB6A     		ldr	r3, [r7, #40]
 2540 010e 93F84430 		ldrb	r3, [r3, #68]
 2541 0112 5BB2     		sxtb	r3, r3
 2542 0114 B3F1FF3F 		cmp	r3, #-1
 2543 0118 03D1     		bne	.L167
 2544              		.loc 1 1368 3 is_stmt 0 discriminator 1
 2545 011a BB6A     		ldr	r3, [r7, #40]
 2546 011c 0022     		movs	r2, #0
 2547 011e 83F84420 		strb	r2, [r3, #68]
 2548              	.L167:
 2549              		.loc 1 1368 3 discriminator 3
 2550 0122 BB6A     		ldr	r3, [r7, #40]
 2551 0124 93F84530 		ldrb	r3, [r3, #69]
 2552 0128 5BB2     		sxtb	r3, r3
 2553 012a B3F1FF3F 		cmp	r3, #-1
 2554 012e 03D1     		bne	.L168
 2555              		.loc 1 1368 3 discriminator 4
 2556 0130 BB6A     		ldr	r3, [r7, #40]
 2557 0132 0022     		movs	r2, #0
ARM GAS  /tmp/ccv5E8P7.s 			page 74


 2558 0134 83F84520 		strb	r2, [r3, #69]
 2559              	.L168:
 2560              		.loc 1 1368 3 discriminator 6
 2561 0138 FFF7FEFF 		bl	vPortExitCritical
1369:./Libraries/FreeRTOS/Source/queue.c **** 
1370:./Libraries/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1371:./Libraries/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2562              		.loc 1 1371 7 is_stmt 1 discriminator 6
 2563 013c 3A1D     		adds	r2, r7, #4
 2564 013e 07F11003 		add	r3, r7, #16
 2565 0142 1146     		mov	r1, r2
 2566 0144 1846     		mov	r0, r3
 2567 0146 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2568 014a 0346     		mov	r3, r0
 2569              		.loc 1 1371 5 discriminator 6
 2570 014c 002B     		cmp	r3, #0
 2571 014e 23D1     		bne	.L169
1372:./Libraries/FreeRTOS/Source/queue.c **** 		{
1373:./Libraries/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1374:./Libraries/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1375:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2572              		.loc 1 1375 8
 2573 0150 B86A     		ldr	r0, [r7, #40]
 2574 0152 FFF7FEFF 		bl	prvIsQueueEmpty
 2575 0156 0346     		mov	r3, r0
 2576              		.loc 1 1375 6
 2577 0158 002B     		cmp	r3, #0
 2578 015a 17D0     		beq	.L170
1376:./Libraries/FreeRTOS/Source/queue.c **** 			{
1377:./Libraries/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1378:./Libraries/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2579              		.loc 1 1378 5
 2580 015c BB6A     		ldr	r3, [r7, #40]
 2581 015e 2433     		adds	r3, r3, #36
 2582 0160 7A68     		ldr	r2, [r7, #4]
 2583 0162 1146     		mov	r1, r2
 2584 0164 1846     		mov	r0, r3
 2585 0166 FFF7FEFF 		bl	vTaskPlaceOnEventList
1379:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2586              		.loc 1 1379 5
 2587 016a B86A     		ldr	r0, [r7, #40]
 2588 016c FFF7FEFF 		bl	prvUnlockQueue
1380:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2589              		.loc 1 1380 9
 2590 0170 FFF7FEFF 		bl	xTaskResumeAll
 2591 0174 0346     		mov	r3, r0
 2592              		.loc 1 1380 7
 2593 0176 002B     		cmp	r3, #0
 2594 0178 89D1     		bne	.L160
1381:./Libraries/FreeRTOS/Source/queue.c **** 				{
1382:./Libraries/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 2595              		.loc 1 1382 6
 2596 017a 104B     		ldr	r3, .L173
 2597 017c 4FF08052 		mov	r2, #268435456
 2598 0180 1A60     		str	r2, [r3]
 2599              		.syntax unified
 2600              	@ 1382 "./Libraries/FreeRTOS/Source/queue.c" 1
ARM GAS  /tmp/ccv5E8P7.s 			page 75


 2601 0182 BFF34F8F 		dsb
 2602              	@ 0 "" 2
 2603              	@ 1382 "./Libraries/FreeRTOS/Source/queue.c" 1
 2604 0186 BFF36F8F 		isb
 2605              	@ 0 "" 2
 2606              		.thumb
 2607              		.syntax unified
 2608 018a 80E7     		b	.L160
 2609              	.L170:
1383:./Libraries/FreeRTOS/Source/queue.c **** 				}
1384:./Libraries/FreeRTOS/Source/queue.c **** 				else
1385:./Libraries/FreeRTOS/Source/queue.c **** 				{
1386:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1387:./Libraries/FreeRTOS/Source/queue.c **** 				}
1388:./Libraries/FreeRTOS/Source/queue.c **** 			}
1389:./Libraries/FreeRTOS/Source/queue.c **** 			else
1390:./Libraries/FreeRTOS/Source/queue.c **** 			{
1391:./Libraries/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1392:./Libraries/FreeRTOS/Source/queue.c **** 				data. */
1393:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2610              		.loc 1 1393 5
 2611 018c B86A     		ldr	r0, [r7, #40]
 2612 018e FFF7FEFF 		bl	prvUnlockQueue
1394:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2613              		.loc 1 1394 14
 2614 0192 FFF7FEFF 		bl	xTaskResumeAll
 2615 0196 7AE7     		b	.L160
 2616              	.L169:
1395:./Libraries/FreeRTOS/Source/queue.c **** 			}
1396:./Libraries/FreeRTOS/Source/queue.c **** 		}
1397:./Libraries/FreeRTOS/Source/queue.c **** 		else
1398:./Libraries/FreeRTOS/Source/queue.c **** 		{
1399:./Libraries/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1400:./Libraries/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1401:./Libraries/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 2617              		.loc 1 1401 4
 2618 0198 B86A     		ldr	r0, [r7, #40]
 2619 019a FFF7FEFF 		bl	prvUnlockQueue
1402:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2620              		.loc 1 1402 13
 2621 019e FFF7FEFF 		bl	xTaskResumeAll
1403:./Libraries/FreeRTOS/Source/queue.c **** 
1404:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2622              		.loc 1 1404 8
 2623 01a2 B86A     		ldr	r0, [r7, #40]
 2624 01a4 FFF7FEFF 		bl	prvIsQueueEmpty
 2625 01a8 0346     		mov	r3, r0
 2626              		.loc 1 1404 6
 2627 01aa 002B     		cmp	r3, #0
 2628 01ac 3FF46FAF 		beq	.L160
1405:./Libraries/FreeRTOS/Source/queue.c **** 			{
1406:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1407:./Libraries/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
 2629              		.loc 1 1407 12
 2630 01b0 0023     		movs	r3, #0
 2631              	.L172:
1408:./Libraries/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccv5E8P7.s 			page 76


1409:./Libraries/FreeRTOS/Source/queue.c **** 			else
1410:./Libraries/FreeRTOS/Source/queue.c **** 			{
1411:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1412:./Libraries/FreeRTOS/Source/queue.c **** 			}
1413:./Libraries/FreeRTOS/Source/queue.c **** 		}
1414:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1415:./Libraries/FreeRTOS/Source/queue.c **** }
 2632              		.loc 1 1415 1 discriminator 6
 2633 01b2 1846     		mov	r0, r3
 2634 01b4 3037     		adds	r7, r7, #48
 2635              	.LCFI84:
 2636              		.cfi_def_cfa_offset 8
 2637 01b6 BD46     		mov	sp, r7
 2638              	.LCFI85:
 2639              		.cfi_def_cfa_register 13
 2640              		@ sp needed
 2641 01b8 80BD     		pop	{r7, pc}
 2642              	.L174:
 2643 01ba 00BF     		.align	2
 2644              	.L173:
 2645 01bc 04ED00E0 		.word	-536810236
 2646              		.cfi_endproc
 2647              	.LFE20:
 2649              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2650              		.align	1
 2651              		.global	xQueueSemaphoreTake
 2652              		.syntax unified
 2653              		.thumb
 2654              		.thumb_func
 2655              		.fpu fpv5-d16
 2657              	xQueueSemaphoreTake:
 2658              	.LFB21:
1416:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1417:./Libraries/FreeRTOS/Source/queue.c **** 
1418:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1419:./Libraries/FreeRTOS/Source/queue.c **** {
 2659              		.loc 1 1419 1
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 56
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663 0000 80B5     		push	{r7, lr}
 2664              	.LCFI86:
 2665              		.cfi_def_cfa_offset 8
 2666              		.cfi_offset 7, -8
 2667              		.cfi_offset 14, -4
 2668 0002 8EB0     		sub	sp, sp, #56
 2669              	.LCFI87:
 2670              		.cfi_def_cfa_offset 64
 2671 0004 00AF     		add	r7, sp, #0
 2672              	.LCFI88:
 2673              		.cfi_def_cfa_register 7
 2674 0006 7860     		str	r0, [r7, #4]
 2675 0008 3960     		str	r1, [r7]
1420:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2676              		.loc 1 1420 12
 2677 000a 0023     		movs	r3, #0
 2678 000c 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/ccv5E8P7.s 			page 77


1421:./Libraries/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1422:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 2679              		.loc 1 1422 17
 2680 000e 7B68     		ldr	r3, [r7, #4]
 2681 0010 FB62     		str	r3, [r7, #44]
1423:./Libraries/FreeRTOS/Source/queue.c **** 
1424:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1425:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
 2682              		.loc 1 1425 13
 2683 0012 0023     		movs	r3, #0
 2684 0014 3B63     		str	r3, [r7, #48]
1426:./Libraries/FreeRTOS/Source/queue.c **** #endif
1427:./Libraries/FreeRTOS/Source/queue.c **** 
1428:./Libraries/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1429:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
 2685              		.loc 1 1429 2
 2686 0016 FB6A     		ldr	r3, [r7, #44]
 2687 0018 002B     		cmp	r3, #0
 2688 001a 0AD1     		bne	.L176
 2689              	.LBB185:
 2690              	.LBB186:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2691              		.loc 2 195 2
 2692              		.syntax unified
 2693              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2694 001c 4FF05003 			mov r3, #80												
 2695 0020 83F31188 		msr basepri, r3											
 2696 0024 BFF36F8F 		isb														
 2697 0028 BFF34F8F 		dsb														
 2698              	
 2699              	@ 0 "" 2
 2700              		.thumb
 2701              		.syntax unified
 2702 002c 3B62     		str	r3, [r7, #32]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2703              		.loc 2 203 1
 2704 002e 00BF     		nop
 2705              	.L177:
 2706              	.LBE186:
 2707              	.LBE185:
 2708              		.loc 1 1429 2 discriminator 1
 2709 0030 FEE7     		b	.L177
 2710              	.L176:
1430:./Libraries/FreeRTOS/Source/queue.c **** 
1431:./Libraries/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1432:./Libraries/FreeRTOS/Source/queue.c **** 	0. */
1433:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 2711              		.loc 1 1433 2
 2712 0032 FB6A     		ldr	r3, [r7, #44]
 2713 0034 1B6C     		ldr	r3, [r3, #64]
 2714 0036 002B     		cmp	r3, #0
 2715 0038 0AD0     		beq	.L178
 2716              	.LBB187:
 2717              	.LBB188:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2718              		.loc 2 195 2
 2719              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 78


 2720              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2721 003a 4FF05003 			mov r3, #80												
 2722 003e 83F31188 		msr basepri, r3											
 2723 0042 BFF36F8F 		isb														
 2724 0046 BFF34F8F 		dsb														
 2725              	
 2726              	@ 0 "" 2
 2727              		.thumb
 2728              		.syntax unified
 2729 004a FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2730              		.loc 2 203 1
 2731 004c 00BF     		nop
 2732              	.L179:
 2733              	.LBE188:
 2734              	.LBE187:
 2735              		.loc 1 1433 2 discriminator 2
 2736 004e FEE7     		b	.L179
 2737              	.L178:
1434:./Libraries/FreeRTOS/Source/queue.c **** 
1435:./Libraries/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1436:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1437:./Libraries/FreeRTOS/Source/queue.c **** 	{
1438:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 2738              		.loc 1 1438 3
 2739 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 2740 0054 0346     		mov	r3, r0
 2741 0056 002B     		cmp	r3, #0
 2742 0058 02D1     		bne	.L180
 2743              		.loc 1 1438 3 is_stmt 0 discriminator 2
 2744 005a 3B68     		ldr	r3, [r7]
 2745 005c 002B     		cmp	r3, #0
 2746 005e 01D1     		bne	.L181
 2747              	.L180:
 2748              		.loc 1 1438 3 discriminator 3
 2749 0060 0123     		movs	r3, #1
 2750 0062 00E0     		b	.L182
 2751              	.L181:
 2752              		.loc 1 1438 3 discriminator 4
 2753 0064 0023     		movs	r3, #0
 2754              	.L182:
 2755              		.loc 1 1438 3 discriminator 6
 2756 0066 002B     		cmp	r3, #0
 2757 0068 0AD1     		bne	.L183
 2758              	.LBB189:
 2759              	.LBB190:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2760              		.loc 2 195 2 is_stmt 1
 2761              		.syntax unified
 2762              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2763 006a 4FF05003 			mov r3, #80												
 2764 006e 83F31188 		msr basepri, r3											
 2765 0072 BFF36F8F 		isb														
 2766 0076 BFF34F8F 		dsb														
 2767              	
 2768              	@ 0 "" 2
 2769              		.thumb
ARM GAS  /tmp/ccv5E8P7.s 			page 79


 2770              		.syntax unified
 2771 007a BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2772              		.loc 2 203 1
 2773 007c 00BF     		nop
 2774              	.L184:
 2775              	.LBE190:
 2776              	.LBE189:
 2777              		.loc 1 1438 3 discriminator 3
 2778 007e FEE7     		b	.L184
 2779              	.L183:
1439:./Libraries/FreeRTOS/Source/queue.c **** 	}
1440:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
1441:./Libraries/FreeRTOS/Source/queue.c **** 
1442:./Libraries/FreeRTOS/Source/queue.c **** 
1443:./Libraries/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1444:./Libraries/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1445:./Libraries/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1446:./Libraries/FreeRTOS/Source/queue.c **** 	for( ;; )
1447:./Libraries/FreeRTOS/Source/queue.c **** 	{
1448:./Libraries/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 2780              		.loc 1 1448 3
 2781 0080 FFF7FEFF 		bl	vPortEnterCritical
 2782              	.LBB191:
1449:./Libraries/FreeRTOS/Source/queue.c **** 		{
1450:./Libraries/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1451:./Libraries/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1452:./Libraries/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2783              		.loc 1 1452 22
 2784 0084 FB6A     		ldr	r3, [r7, #44]
 2785 0086 9B6B     		ldr	r3, [r3, #56]
 2786 0088 BB62     		str	r3, [r7, #40]
1453:./Libraries/FreeRTOS/Source/queue.c **** 
1454:./Libraries/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1455:./Libraries/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1456:./Libraries/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2787              		.loc 1 1456 6
 2788 008a BB6A     		ldr	r3, [r7, #40]
 2789 008c 002B     		cmp	r3, #0
 2790 008e 24D0     		beq	.L185
1457:./Libraries/FreeRTOS/Source/queue.c **** 			{
1458:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1459:./Libraries/FreeRTOS/Source/queue.c **** 
1460:./Libraries/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1461:./Libraries/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1462:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2791              		.loc 1 1462 51
 2792 0090 BB6A     		ldr	r3, [r7, #40]
 2793 0092 5A1E     		subs	r2, r3, #1
 2794              		.loc 1 1462 32
 2795 0094 FB6A     		ldr	r3, [r7, #44]
 2796 0096 9A63     		str	r2, [r3, #56]
1463:./Libraries/FreeRTOS/Source/queue.c **** 
1464:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1465:./Libraries/FreeRTOS/Source/queue.c **** 				{
1466:./Libraries/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2797              		.loc 1 1466 17
ARM GAS  /tmp/ccv5E8P7.s 			page 80


 2798 0098 FB6A     		ldr	r3, [r7, #44]
 2799 009a 1B68     		ldr	r3, [r3]
 2800              		.loc 1 1466 8
 2801 009c 002B     		cmp	r3, #0
 2802 009e 04D1     		bne	.L186
1467:./Libraries/FreeRTOS/Source/queue.c **** 					{
1468:./Libraries/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1469:./Libraries/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1470:./Libraries/FreeRTOS/Source/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2803              		.loc 1 1470 44
 2804 00a0 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2805 00a4 0246     		mov	r2, r0
 2806              		.loc 1 1470 42
 2807 00a6 FB6A     		ldr	r3, [r7, #44]
 2808 00a8 9A60     		str	r2, [r3, #8]
 2809              	.L186:
1471:./Libraries/FreeRTOS/Source/queue.c **** 					}
1472:./Libraries/FreeRTOS/Source/queue.c **** 					else
1473:./Libraries/FreeRTOS/Source/queue.c **** 					{
1474:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1475:./Libraries/FreeRTOS/Source/queue.c **** 					}
1476:./Libraries/FreeRTOS/Source/queue.c **** 				}
1477:./Libraries/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1478:./Libraries/FreeRTOS/Source/queue.c **** 
1479:./Libraries/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1480:./Libraries/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1481:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2810              		.loc 1 1481 9
 2811 00aa FB6A     		ldr	r3, [r7, #44]
 2812 00ac 1B69     		ldr	r3, [r3, #16]
 2813              		.loc 1 1481 7
 2814 00ae 002B     		cmp	r3, #0
 2815 00b0 0FD0     		beq	.L187
1482:./Libraries/FreeRTOS/Source/queue.c **** 				{
1483:./Libraries/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2816              		.loc 1 1483 36
 2817 00b2 FB6A     		ldr	r3, [r7, #44]
 2818 00b4 1033     		adds	r3, r3, #16
 2819              		.loc 1 1483 10
 2820 00b6 1846     		mov	r0, r3
 2821 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2822 00bc 0346     		mov	r3, r0
 2823              		.loc 1 1483 8
 2824 00be 002B     		cmp	r3, #0
 2825 00c0 07D0     		beq	.L187
1484:./Libraries/FreeRTOS/Source/queue.c **** 					{
1485:./Libraries/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 2826              		.loc 1 1485 7
 2827 00c2 544B     		ldr	r3, .L201
 2828 00c4 4FF08052 		mov	r2, #268435456
 2829 00c8 1A60     		str	r2, [r3]
 2830              		.syntax unified
 2831              	@ 1485 "./Libraries/FreeRTOS/Source/queue.c" 1
 2832 00ca BFF34F8F 		dsb
 2833              	@ 0 "" 2
 2834              	@ 1485 "./Libraries/FreeRTOS/Source/queue.c" 1
 2835 00ce BFF36F8F 		isb
ARM GAS  /tmp/ccv5E8P7.s 			page 81


 2836              	@ 0 "" 2
 2837              		.thumb
 2838              		.syntax unified
 2839              	.L187:
1486:./Libraries/FreeRTOS/Source/queue.c **** 					}
1487:./Libraries/FreeRTOS/Source/queue.c **** 					else
1488:./Libraries/FreeRTOS/Source/queue.c **** 					{
1489:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1490:./Libraries/FreeRTOS/Source/queue.c **** 					}
1491:./Libraries/FreeRTOS/Source/queue.c **** 				}
1492:./Libraries/FreeRTOS/Source/queue.c **** 				else
1493:./Libraries/FreeRTOS/Source/queue.c **** 				{
1494:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1495:./Libraries/FreeRTOS/Source/queue.c **** 				}
1496:./Libraries/FreeRTOS/Source/queue.c **** 
1497:./Libraries/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 2840              		.loc 1 1497 5
 2841 00d2 FFF7FEFF 		bl	vPortExitCritical
1498:./Libraries/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2842              		.loc 1 1498 12
 2843 00d6 0123     		movs	r3, #1
 2844 00d8 97E0     		b	.L200
 2845              	.L185:
1499:./Libraries/FreeRTOS/Source/queue.c **** 			}
1500:./Libraries/FreeRTOS/Source/queue.c **** 			else
1501:./Libraries/FreeRTOS/Source/queue.c **** 			{
1502:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 2846              		.loc 1 1502 22
 2847 00da 3B68     		ldr	r3, [r7]
 2848              		.loc 1 1502 7
 2849 00dc 002B     		cmp	r3, #0
 2850 00de 11D1     		bne	.L189
1503:./Libraries/FreeRTOS/Source/queue.c **** 				{
1504:./Libraries/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1505:./Libraries/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1506:./Libraries/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1507:./Libraries/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1508:./Libraries/FreeRTOS/Source/queue.c **** 					{
1509:./Libraries/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
 2851              		.loc 1 1509 7
 2852 00e0 3B6B     		ldr	r3, [r7, #48]
 2853 00e2 002B     		cmp	r3, #0
 2854 00e4 0AD0     		beq	.L190
 2855              	.LBB192:
 2856              	.LBB193:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2857              		.loc 2 195 2
 2858              		.syntax unified
 2859              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2860 00e6 4FF05003 			mov r3, #80												
 2861 00ea 83F31188 		msr basepri, r3											
 2862 00ee BFF36F8F 		isb														
 2863 00f2 BFF34F8F 		dsb														
 2864              	
 2865              	@ 0 "" 2
 2866              		.thumb
 2867              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 82


 2868 00f6 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2869              		.loc 2 203 1
 2870 00f8 00BF     		nop
 2871              	.L191:
 2872              	.LBE193:
 2873              	.LBE192:
 2874              		.loc 1 1509 7 discriminator 4
 2875 00fa FEE7     		b	.L191
 2876              	.L190:
1510:./Libraries/FreeRTOS/Source/queue.c **** 					}
1511:./Libraries/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1512:./Libraries/FreeRTOS/Source/queue.c **** 
1513:./Libraries/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1514:./Libraries/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1515:./Libraries/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 2877              		.loc 1 1515 6
 2878 00fc FFF7FEFF 		bl	vPortExitCritical
1516:./Libraries/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1517:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 2879              		.loc 1 1517 13
 2880 0100 0023     		movs	r3, #0
 2881 0102 82E0     		b	.L200
 2882              	.L189:
1518:./Libraries/FreeRTOS/Source/queue.c **** 				}
1519:./Libraries/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 2883              		.loc 1 1519 12
 2884 0104 7B6B     		ldr	r3, [r7, #52]
 2885 0106 002B     		cmp	r3, #0
 2886 0108 06D1     		bne	.L192
1520:./Libraries/FreeRTOS/Source/queue.c **** 				{
1521:./Libraries/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1522:./Libraries/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1523:./Libraries/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 2887              		.loc 1 1523 6
 2888 010a 07F10C03 		add	r3, r7, #12
 2889 010e 1846     		mov	r0, r3
 2890 0110 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1524:./Libraries/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2891              		.loc 1 1524 20
 2892 0114 0123     		movs	r3, #1
 2893 0116 7B63     		str	r3, [r7, #52]
 2894              	.L192:
 2895              	.LBE191:
1525:./Libraries/FreeRTOS/Source/queue.c **** 				}
1526:./Libraries/FreeRTOS/Source/queue.c **** 				else
1527:./Libraries/FreeRTOS/Source/queue.c **** 				{
1528:./Libraries/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1529:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1530:./Libraries/FreeRTOS/Source/queue.c **** 				}
1531:./Libraries/FreeRTOS/Source/queue.c **** 			}
1532:./Libraries/FreeRTOS/Source/queue.c **** 		}
1533:./Libraries/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 2896              		.loc 1 1533 3
 2897 0118 FFF7FEFF 		bl	vPortExitCritical
1534:./Libraries/FreeRTOS/Source/queue.c **** 
1535:./Libraries/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
ARM GAS  /tmp/ccv5E8P7.s 			page 83


1536:./Libraries/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1537:./Libraries/FreeRTOS/Source/queue.c **** 
1538:./Libraries/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 2898              		.loc 1 1538 3
 2899 011c FFF7FEFF 		bl	vTaskSuspendAll
1539:./Libraries/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2900              		.loc 1 1539 3
 2901 0120 FFF7FEFF 		bl	vPortEnterCritical
 2902 0124 FB6A     		ldr	r3, [r7, #44]
 2903 0126 93F84430 		ldrb	r3, [r3, #68]
 2904 012a 5BB2     		sxtb	r3, r3
 2905 012c B3F1FF3F 		cmp	r3, #-1
 2906 0130 03D1     		bne	.L193
 2907              		.loc 1 1539 3 is_stmt 0 discriminator 1
 2908 0132 FB6A     		ldr	r3, [r7, #44]
 2909 0134 0022     		movs	r2, #0
 2910 0136 83F84420 		strb	r2, [r3, #68]
 2911              	.L193:
 2912              		.loc 1 1539 3 discriminator 3
 2913 013a FB6A     		ldr	r3, [r7, #44]
 2914 013c 93F84530 		ldrb	r3, [r3, #69]
 2915 0140 5BB2     		sxtb	r3, r3
 2916 0142 B3F1FF3F 		cmp	r3, #-1
 2917 0146 03D1     		bne	.L194
 2918              		.loc 1 1539 3 discriminator 4
 2919 0148 FB6A     		ldr	r3, [r7, #44]
 2920 014a 0022     		movs	r2, #0
 2921 014c 83F84520 		strb	r2, [r3, #69]
 2922              	.L194:
 2923              		.loc 1 1539 3 discriminator 6
 2924 0150 FFF7FEFF 		bl	vPortExitCritical
1540:./Libraries/FreeRTOS/Source/queue.c **** 
1541:./Libraries/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1542:./Libraries/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2925              		.loc 1 1542 7 is_stmt 1 discriminator 6
 2926 0154 3A46     		mov	r2, r7
 2927 0156 07F10C03 		add	r3, r7, #12
 2928 015a 1146     		mov	r1, r2
 2929 015c 1846     		mov	r0, r3
 2930 015e FFF7FEFF 		bl	xTaskCheckForTimeOut
 2931 0162 0346     		mov	r3, r0
 2932              		.loc 1 1542 5 discriminator 6
 2933 0164 002B     		cmp	r3, #0
 2934 0166 32D1     		bne	.L195
1543:./Libraries/FreeRTOS/Source/queue.c **** 		{
1544:./Libraries/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1545:./Libraries/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1546:./Libraries/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1547:./Libraries/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1548:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2935              		.loc 1 1548 8
 2936 0168 F86A     		ldr	r0, [r7, #44]
 2937 016a FFF7FEFF 		bl	prvIsQueueEmpty
 2938 016e 0346     		mov	r3, r0
 2939              		.loc 1 1548 6
 2940 0170 002B     		cmp	r3, #0
 2941 0172 26D0     		beq	.L196
ARM GAS  /tmp/ccv5E8P7.s 			page 84


1549:./Libraries/FreeRTOS/Source/queue.c **** 			{
1550:./Libraries/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1551:./Libraries/FreeRTOS/Source/queue.c **** 
1552:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1553:./Libraries/FreeRTOS/Source/queue.c **** 				{
1554:./Libraries/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2942              		.loc 1 1554 17
 2943 0174 FB6A     		ldr	r3, [r7, #44]
 2944 0176 1B68     		ldr	r3, [r3]
 2945              		.loc 1 1554 8
 2946 0178 002B     		cmp	r3, #0
 2947 017a 09D1     		bne	.L197
1555:./Libraries/FreeRTOS/Source/queue.c **** 					{
1556:./Libraries/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
 2948              		.loc 1 1556 7
 2949 017c FFF7FEFF 		bl	vPortEnterCritical
1557:./Libraries/FreeRTOS/Source/queue.c **** 						{
1558:./Libraries/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 2950              		.loc 1 1558 31
 2951 0180 FB6A     		ldr	r3, [r7, #44]
 2952 0182 9B68     		ldr	r3, [r3, #8]
 2953 0184 1846     		mov	r0, r3
 2954 0186 FFF7FEFF 		bl	xTaskPriorityInherit
 2955 018a 3863     		str	r0, [r7, #48]
1559:./Libraries/FreeRTOS/Source/queue.c **** 						}
1560:./Libraries/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 2956              		.loc 1 1560 7
 2957 018c FFF7FEFF 		bl	vPortExitCritical
 2958              	.L197:
1561:./Libraries/FreeRTOS/Source/queue.c **** 					}
1562:./Libraries/FreeRTOS/Source/queue.c **** 					else
1563:./Libraries/FreeRTOS/Source/queue.c **** 					{
1564:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1565:./Libraries/FreeRTOS/Source/queue.c **** 					}
1566:./Libraries/FreeRTOS/Source/queue.c **** 				}
1567:./Libraries/FreeRTOS/Source/queue.c **** 				#endif
1568:./Libraries/FreeRTOS/Source/queue.c **** 
1569:./Libraries/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2959              		.loc 1 1569 5
 2960 0190 FB6A     		ldr	r3, [r7, #44]
 2961 0192 2433     		adds	r3, r3, #36
 2962 0194 3A68     		ldr	r2, [r7]
 2963 0196 1146     		mov	r1, r2
 2964 0198 1846     		mov	r0, r3
 2965 019a FFF7FEFF 		bl	vTaskPlaceOnEventList
1570:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2966              		.loc 1 1570 5
 2967 019e F86A     		ldr	r0, [r7, #44]
 2968 01a0 FFF7FEFF 		bl	prvUnlockQueue
1571:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2969              		.loc 1 1571 9
 2970 01a4 FFF7FEFF 		bl	xTaskResumeAll
 2971 01a8 0346     		mov	r3, r0
 2972              		.loc 1 1571 7
 2973 01aa 002B     		cmp	r3, #0
 2974 01ac 7FF468AF 		bne	.L183
1572:./Libraries/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccv5E8P7.s 			page 85


1573:./Libraries/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 2975              		.loc 1 1573 6
 2976 01b0 184B     		ldr	r3, .L201
 2977 01b2 4FF08052 		mov	r2, #268435456
 2978 01b6 1A60     		str	r2, [r3]
 2979              		.syntax unified
 2980              	@ 1573 "./Libraries/FreeRTOS/Source/queue.c" 1
 2981 01b8 BFF34F8F 		dsb
 2982              	@ 0 "" 2
 2983              	@ 1573 "./Libraries/FreeRTOS/Source/queue.c" 1
 2984 01bc BFF36F8F 		isb
 2985              	@ 0 "" 2
 2986              		.thumb
 2987              		.syntax unified
 2988 01c0 5EE7     		b	.L183
 2989              	.L196:
1574:./Libraries/FreeRTOS/Source/queue.c **** 				}
1575:./Libraries/FreeRTOS/Source/queue.c **** 				else
1576:./Libraries/FreeRTOS/Source/queue.c **** 				{
1577:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1578:./Libraries/FreeRTOS/Source/queue.c **** 				}
1579:./Libraries/FreeRTOS/Source/queue.c **** 			}
1580:./Libraries/FreeRTOS/Source/queue.c **** 			else
1581:./Libraries/FreeRTOS/Source/queue.c **** 			{
1582:./Libraries/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1583:./Libraries/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1584:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2990              		.loc 1 1584 5
 2991 01c2 F86A     		ldr	r0, [r7, #44]
 2992 01c4 FFF7FEFF 		bl	prvUnlockQueue
1585:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2993              		.loc 1 1585 14
 2994 01c8 FFF7FEFF 		bl	xTaskResumeAll
 2995 01cc 58E7     		b	.L183
 2996              	.L195:
1586:./Libraries/FreeRTOS/Source/queue.c **** 			}
1587:./Libraries/FreeRTOS/Source/queue.c **** 		}
1588:./Libraries/FreeRTOS/Source/queue.c **** 		else
1589:./Libraries/FreeRTOS/Source/queue.c **** 		{
1590:./Libraries/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1591:./Libraries/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 2997              		.loc 1 1591 4
 2998 01ce F86A     		ldr	r0, [r7, #44]
 2999 01d0 FFF7FEFF 		bl	prvUnlockQueue
1592:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 3000              		.loc 1 1592 13
 3001 01d4 FFF7FEFF 		bl	xTaskResumeAll
1593:./Libraries/FreeRTOS/Source/queue.c **** 
1594:./Libraries/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1595:./Libraries/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1596:./Libraries/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1597:./Libraries/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1598:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 3002              		.loc 1 1598 8
 3003 01d8 F86A     		ldr	r0, [r7, #44]
 3004 01da FFF7FEFF 		bl	prvIsQueueEmpty
 3005 01de 0346     		mov	r3, r0
ARM GAS  /tmp/ccv5E8P7.s 			page 86


 3006              		.loc 1 1598 6
 3007 01e0 002B     		cmp	r3, #0
 3008 01e2 3FF44DAF 		beq	.L183
1599:./Libraries/FreeRTOS/Source/queue.c **** 			{
1600:./Libraries/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1601:./Libraries/FreeRTOS/Source/queue.c **** 				{
1602:./Libraries/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1603:./Libraries/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1604:./Libraries/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1605:./Libraries/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
 3009              		.loc 1 1605 8
 3010 01e6 3B6B     		ldr	r3, [r7, #48]
 3011 01e8 002B     		cmp	r3, #0
 3012 01ea 0DD0     		beq	.L199
1606:./Libraries/FreeRTOS/Source/queue.c **** 					{
1607:./Libraries/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
 3013              		.loc 1 1607 7
 3014 01ec FFF7FEFF 		bl	vPortEnterCritical
 3015              	.LBB194:
1608:./Libraries/FreeRTOS/Source/queue.c **** 						{
1609:./Libraries/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1610:./Libraries/FreeRTOS/Source/queue.c **** 
1611:./Libraries/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1612:./Libraries/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1613:./Libraries/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1614:./Libraries/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1615:./Libraries/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1616:./Libraries/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 3016              		.loc 1 1616 35
 3017 01f0 F86A     		ldr	r0, [r7, #44]
 3018 01f2 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 3019 01f6 7862     		str	r0, [r7, #36]
1617:./Libraries/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 3020              		.loc 1 1617 8
 3021 01f8 FB6A     		ldr	r3, [r7, #44]
 3022 01fa 9B68     		ldr	r3, [r3, #8]
 3023 01fc 796A     		ldr	r1, [r7, #36]
 3024 01fe 1846     		mov	r0, r3
 3025 0200 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 3026              	.LBE194:
1618:./Libraries/FreeRTOS/Source/queue.c **** 						}
1619:./Libraries/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 3027              		.loc 1 1619 7
 3028 0204 FFF7FEFF 		bl	vPortExitCritical
 3029              	.L199:
1620:./Libraries/FreeRTOS/Source/queue.c **** 					}
1621:./Libraries/FreeRTOS/Source/queue.c **** 				}
1622:./Libraries/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1623:./Libraries/FreeRTOS/Source/queue.c **** 
1624:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1625:./Libraries/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
 3030              		.loc 1 1625 12
 3031 0208 0023     		movs	r3, #0
 3032              	.L200:
1626:./Libraries/FreeRTOS/Source/queue.c **** 			}
1627:./Libraries/FreeRTOS/Source/queue.c **** 			else
1628:./Libraries/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccv5E8P7.s 			page 87


1629:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1630:./Libraries/FreeRTOS/Source/queue.c **** 			}
1631:./Libraries/FreeRTOS/Source/queue.c **** 		}
1632:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1633:./Libraries/FreeRTOS/Source/queue.c **** }
 3033              		.loc 1 1633 1 discriminator 7
 3034 020a 1846     		mov	r0, r3
 3035 020c 3837     		adds	r7, r7, #56
 3036              	.LCFI89:
 3037              		.cfi_def_cfa_offset 8
 3038 020e BD46     		mov	sp, r7
 3039              	.LCFI90:
 3040              		.cfi_def_cfa_register 13
 3041              		@ sp needed
 3042 0210 80BD     		pop	{r7, pc}
 3043              	.L202:
 3044 0212 00BF     		.align	2
 3045              	.L201:
 3046 0214 04ED00E0 		.word	-536810236
 3047              		.cfi_endproc
 3048              	.LFE21:
 3050              		.section	.text.xQueuePeek,"ax",%progbits
 3051              		.align	1
 3052              		.global	xQueuePeek
 3053              		.syntax unified
 3054              		.thumb
 3055              		.thumb_func
 3056              		.fpu fpv5-d16
 3058              	xQueuePeek:
 3059              	.LFB22:
1634:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1635:./Libraries/FreeRTOS/Source/queue.c **** 
1636:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1637:./Libraries/FreeRTOS/Source/queue.c **** {
 3060              		.loc 1 1637 1
 3061              		.cfi_startproc
 3062              		@ args = 0, pretend = 0, frame = 56
 3063              		@ frame_needed = 1, uses_anonymous_args = 0
 3064 0000 80B5     		push	{r7, lr}
 3065              	.LCFI91:
 3066              		.cfi_def_cfa_offset 8
 3067              		.cfi_offset 7, -8
 3068              		.cfi_offset 14, -4
 3069 0002 8EB0     		sub	sp, sp, #56
 3070              	.LCFI92:
 3071              		.cfi_def_cfa_offset 64
 3072 0004 00AF     		add	r7, sp, #0
 3073              	.LCFI93:
 3074              		.cfi_def_cfa_register 7
 3075 0006 F860     		str	r0, [r7, #12]
 3076 0008 B960     		str	r1, [r7, #8]
 3077 000a 7A60     		str	r2, [r7, #4]
1638:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 3078              		.loc 1 1638 12
 3079 000c 0023     		movs	r3, #0
 3080 000e 7B63     		str	r3, [r7, #52]
1639:./Libraries/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
ARM GAS  /tmp/ccv5E8P7.s 			page 88


1640:./Libraries/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1641:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3081              		.loc 1 1641 17
 3082 0010 FB68     		ldr	r3, [r7, #12]
 3083 0012 3B63     		str	r3, [r7, #48]
1642:./Libraries/FreeRTOS/Source/queue.c **** 
1643:./Libraries/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1644:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
 3084              		.loc 1 1644 2
 3085 0014 3B6B     		ldr	r3, [r7, #48]
 3086 0016 002B     		cmp	r3, #0
 3087 0018 0AD1     		bne	.L204
 3088              	.LBB195:
 3089              	.LBB196:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3090              		.loc 2 195 2
 3091              		.syntax unified
 3092              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3093 001a 4FF05003 			mov r3, #80												
 3094 001e 83F31188 		msr basepri, r3											
 3095 0022 BFF36F8F 		isb														
 3096 0026 BFF34F8F 		dsb														
 3097              	
 3098              	@ 0 "" 2
 3099              		.thumb
 3100              		.syntax unified
 3101 002a 7B62     		str	r3, [r7, #36]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3102              		.loc 2 203 1
 3103 002c 00BF     		nop
 3104              	.L205:
 3105              	.LBE196:
 3106              	.LBE195:
 3107              		.loc 1 1644 2 discriminator 1
 3108 002e FEE7     		b	.L205
 3109              	.L204:
1645:./Libraries/FreeRTOS/Source/queue.c **** 
1646:./Libraries/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1647:./Libraries/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1648:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
 3110              		.loc 1 1648 2
 3111 0030 BB68     		ldr	r3, [r7, #8]
 3112 0032 002B     		cmp	r3, #0
 3113 0034 03D1     		bne	.L206
 3114              		.loc 1 1648 2 is_stmt 0 discriminator 2
 3115 0036 3B6B     		ldr	r3, [r7, #48]
 3116 0038 1B6C     		ldr	r3, [r3, #64]
 3117 003a 002B     		cmp	r3, #0
 3118 003c 01D1     		bne	.L207
 3119              	.L206:
 3120              		.loc 1 1648 2 discriminator 3
 3121 003e 0123     		movs	r3, #1
 3122 0040 00E0     		b	.L208
 3123              	.L207:
 3124              		.loc 1 1648 2 discriminator 4
 3125 0042 0023     		movs	r3, #0
 3126              	.L208:
ARM GAS  /tmp/ccv5E8P7.s 			page 89


 3127              		.loc 1 1648 2 discriminator 6
 3128 0044 002B     		cmp	r3, #0
 3129 0046 0AD1     		bne	.L209
 3130              	.LBB197:
 3131              	.LBB198:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3132              		.loc 2 195 2 is_stmt 1
 3133              		.syntax unified
 3134              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3135 0048 4FF05003 			mov r3, #80												
 3136 004c 83F31188 		msr basepri, r3											
 3137 0050 BFF36F8F 		isb														
 3138 0054 BFF34F8F 		dsb														
 3139              	
 3140              	@ 0 "" 2
 3141              		.thumb
 3142              		.syntax unified
 3143 0058 3B62     		str	r3, [r7, #32]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3144              		.loc 2 203 1
 3145 005a 00BF     		nop
 3146              	.L210:
 3147              	.LBE198:
 3148              	.LBE197:
 3149              		.loc 1 1648 2 discriminator 2
 3150 005c FEE7     		b	.L210
 3151              	.L209:
1649:./Libraries/FreeRTOS/Source/queue.c **** 
1650:./Libraries/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1651:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1652:./Libraries/FreeRTOS/Source/queue.c **** 	{
1653:./Libraries/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 3152              		.loc 1 1653 3
 3153 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 3154 0062 0346     		mov	r3, r0
 3155 0064 002B     		cmp	r3, #0
 3156 0066 02D1     		bne	.L211
 3157              		.loc 1 1653 3 is_stmt 0 discriminator 2
 3158 0068 7B68     		ldr	r3, [r7, #4]
 3159 006a 002B     		cmp	r3, #0
 3160 006c 01D1     		bne	.L212
 3161              	.L211:
 3162              		.loc 1 1653 3 discriminator 3
 3163 006e 0123     		movs	r3, #1
 3164 0070 00E0     		b	.L213
 3165              	.L212:
 3166              		.loc 1 1653 3 discriminator 4
 3167 0072 0023     		movs	r3, #0
 3168              	.L213:
 3169              		.loc 1 1653 3 discriminator 6
 3170 0074 002B     		cmp	r3, #0
 3171 0076 0AD1     		bne	.L214
 3172              	.LBB199:
 3173              	.LBB200:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3174              		.loc 2 195 2 is_stmt 1
 3175              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 90


 3176              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3177 0078 4FF05003 			mov r3, #80												
 3178 007c 83F31188 		msr basepri, r3											
 3179 0080 BFF36F8F 		isb														
 3180 0084 BFF34F8F 		dsb														
 3181              	
 3182              	@ 0 "" 2
 3183              		.thumb
 3184              		.syntax unified
 3185 0088 FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3186              		.loc 2 203 1
 3187 008a 00BF     		nop
 3188              	.L215:
 3189              	.LBE200:
 3190              	.LBE199:
 3191              		.loc 1 1653 3 discriminator 3
 3192 008c FEE7     		b	.L215
 3193              	.L214:
1654:./Libraries/FreeRTOS/Source/queue.c **** 	}
1655:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
1656:./Libraries/FreeRTOS/Source/queue.c **** 
1657:./Libraries/FreeRTOS/Source/queue.c **** 
1658:./Libraries/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1659:./Libraries/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1660:./Libraries/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1661:./Libraries/FreeRTOS/Source/queue.c **** 	for( ;; )
1662:./Libraries/FreeRTOS/Source/queue.c **** 	{
1663:./Libraries/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 3194              		.loc 1 1663 3
 3195 008e FFF7FEFF 		bl	vPortEnterCritical
 3196              	.LBB201:
1664:./Libraries/FreeRTOS/Source/queue.c **** 		{
1665:./Libraries/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3197              		.loc 1 1665 22
 3198 0092 3B6B     		ldr	r3, [r7, #48]
 3199 0094 9B6B     		ldr	r3, [r3, #56]
 3200 0096 FB62     		str	r3, [r7, #44]
1666:./Libraries/FreeRTOS/Source/queue.c **** 
1667:./Libraries/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1668:./Libraries/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1669:./Libraries/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3201              		.loc 1 1669 6
 3202 0098 FB6A     		ldr	r3, [r7, #44]
 3203 009a 002B     		cmp	r3, #0
 3204 009c 21D0     		beq	.L216
1670:./Libraries/FreeRTOS/Source/queue.c **** 			{
1671:./Libraries/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1672:./Libraries/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1673:./Libraries/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1674:./Libraries/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3205              		.loc 1 1674 28
 3206 009e 3B6B     		ldr	r3, [r7, #48]
 3207 00a0 DB68     		ldr	r3, [r3, #12]
 3208 00a2 BB62     		str	r3, [r7, #40]
1675:./Libraries/FreeRTOS/Source/queue.c **** 
1676:./Libraries/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  /tmp/ccv5E8P7.s 			page 91


 3209              		.loc 1 1676 5
 3210 00a4 B968     		ldr	r1, [r7, #8]
 3211 00a6 386B     		ldr	r0, [r7, #48]
 3212 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1677:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1678:./Libraries/FreeRTOS/Source/queue.c **** 
1679:./Libraries/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1680:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3213              		.loc 1 1680 34
 3214 00ac 3B6B     		ldr	r3, [r7, #48]
 3215 00ae BA6A     		ldr	r2, [r7, #40]
 3216 00b0 DA60     		str	r2, [r3, #12]
1681:./Libraries/FreeRTOS/Source/queue.c **** 
1682:./Libraries/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1683:./Libraries/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1684:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 3217              		.loc 1 1684 9
 3218 00b2 3B6B     		ldr	r3, [r7, #48]
 3219 00b4 5B6A     		ldr	r3, [r3, #36]
 3220              		.loc 1 1684 7
 3221 00b6 002B     		cmp	r3, #0
 3222 00b8 0FD0     		beq	.L217
1685:./Libraries/FreeRTOS/Source/queue.c **** 				{
1686:./Libraries/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 3223              		.loc 1 1686 36
 3224 00ba 3B6B     		ldr	r3, [r7, #48]
 3225 00bc 2433     		adds	r3, r3, #36
 3226              		.loc 1 1686 10
 3227 00be 1846     		mov	r0, r3
 3228 00c0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3229 00c4 0346     		mov	r3, r0
 3230              		.loc 1 1686 8
 3231 00c6 002B     		cmp	r3, #0
 3232 00c8 07D0     		beq	.L217
1687:./Libraries/FreeRTOS/Source/queue.c **** 					{
1688:./Libraries/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1689:./Libraries/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 3233              		.loc 1 1689 7
 3234 00ca 3D4B     		ldr	r3, .L227
 3235 00cc 4FF08052 		mov	r2, #268435456
 3236 00d0 1A60     		str	r2, [r3]
 3237              		.syntax unified
 3238              	@ 1689 "./Libraries/FreeRTOS/Source/queue.c" 1
 3239 00d2 BFF34F8F 		dsb
 3240              	@ 0 "" 2
 3241              	@ 1689 "./Libraries/FreeRTOS/Source/queue.c" 1
 3242 00d6 BFF36F8F 		isb
 3243              	@ 0 "" 2
 3244              		.thumb
 3245              		.syntax unified
 3246              	.L217:
1690:./Libraries/FreeRTOS/Source/queue.c **** 					}
1691:./Libraries/FreeRTOS/Source/queue.c **** 					else
1692:./Libraries/FreeRTOS/Source/queue.c **** 					{
1693:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1694:./Libraries/FreeRTOS/Source/queue.c **** 					}
1695:./Libraries/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/ccv5E8P7.s 			page 92


1696:./Libraries/FreeRTOS/Source/queue.c **** 				else
1697:./Libraries/FreeRTOS/Source/queue.c **** 				{
1698:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1699:./Libraries/FreeRTOS/Source/queue.c **** 				}
1700:./Libraries/FreeRTOS/Source/queue.c **** 
1701:./Libraries/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 3247              		.loc 1 1701 5
 3248 00da FFF7FEFF 		bl	vPortExitCritical
1702:./Libraries/FreeRTOS/Source/queue.c **** 				return pdPASS;
 3249              		.loc 1 1702 12
 3250 00de 0123     		movs	r3, #1
 3251 00e0 69E0     		b	.L226
 3252              	.L216:
1703:./Libraries/FreeRTOS/Source/queue.c **** 			}
1704:./Libraries/FreeRTOS/Source/queue.c **** 			else
1705:./Libraries/FreeRTOS/Source/queue.c **** 			{
1706:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 3253              		.loc 1 1706 22
 3254 00e2 7B68     		ldr	r3, [r7, #4]
 3255              		.loc 1 1706 7
 3256 00e4 002B     		cmp	r3, #0
 3257 00e6 03D1     		bne	.L219
1707:./Libraries/FreeRTOS/Source/queue.c **** 				{
1708:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1709:./Libraries/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1710:./Libraries/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 3258              		.loc 1 1710 6
 3259 00e8 FFF7FEFF 		bl	vPortExitCritical
1711:./Libraries/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1712:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 3260              		.loc 1 1712 13
 3261 00ec 0023     		movs	r3, #0
 3262 00ee 62E0     		b	.L226
 3263              	.L219:
1713:./Libraries/FreeRTOS/Source/queue.c **** 				}
1714:./Libraries/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 3264              		.loc 1 1714 12
 3265 00f0 7B6B     		ldr	r3, [r7, #52]
 3266 00f2 002B     		cmp	r3, #0
 3267 00f4 06D1     		bne	.L220
1715:./Libraries/FreeRTOS/Source/queue.c **** 				{
1716:./Libraries/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1717:./Libraries/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1718:./Libraries/FreeRTOS/Source/queue.c **** 					state. */
1719:./Libraries/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 3268              		.loc 1 1719 6
 3269 00f6 07F11403 		add	r3, r7, #20
 3270 00fa 1846     		mov	r0, r3
 3271 00fc FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1720:./Libraries/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 3272              		.loc 1 1720 20
 3273 0100 0123     		movs	r3, #1
 3274 0102 7B63     		str	r3, [r7, #52]
 3275              	.L220:
 3276              	.LBE201:
1721:./Libraries/FreeRTOS/Source/queue.c **** 				}
1722:./Libraries/FreeRTOS/Source/queue.c **** 				else
ARM GAS  /tmp/ccv5E8P7.s 			page 93


1723:./Libraries/FreeRTOS/Source/queue.c **** 				{
1724:./Libraries/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1725:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1726:./Libraries/FreeRTOS/Source/queue.c **** 				}
1727:./Libraries/FreeRTOS/Source/queue.c **** 			}
1728:./Libraries/FreeRTOS/Source/queue.c **** 		}
1729:./Libraries/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 3277              		.loc 1 1729 3
 3278 0104 FFF7FEFF 		bl	vPortExitCritical
1730:./Libraries/FreeRTOS/Source/queue.c **** 
1731:./Libraries/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1732:./Libraries/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1733:./Libraries/FreeRTOS/Source/queue.c **** 
1734:./Libraries/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 3279              		.loc 1 1734 3
 3280 0108 FFF7FEFF 		bl	vTaskSuspendAll
1735:./Libraries/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 3281              		.loc 1 1735 3
 3282 010c FFF7FEFF 		bl	vPortEnterCritical
 3283 0110 3B6B     		ldr	r3, [r7, #48]
 3284 0112 93F84430 		ldrb	r3, [r3, #68]
 3285 0116 5BB2     		sxtb	r3, r3
 3286 0118 B3F1FF3F 		cmp	r3, #-1
 3287 011c 03D1     		bne	.L221
 3288              		.loc 1 1735 3 is_stmt 0 discriminator 1
 3289 011e 3B6B     		ldr	r3, [r7, #48]
 3290 0120 0022     		movs	r2, #0
 3291 0122 83F84420 		strb	r2, [r3, #68]
 3292              	.L221:
 3293              		.loc 1 1735 3 discriminator 3
 3294 0126 3B6B     		ldr	r3, [r7, #48]
 3295 0128 93F84530 		ldrb	r3, [r3, #69]
 3296 012c 5BB2     		sxtb	r3, r3
 3297 012e B3F1FF3F 		cmp	r3, #-1
 3298 0132 03D1     		bne	.L222
 3299              		.loc 1 1735 3 discriminator 4
 3300 0134 3B6B     		ldr	r3, [r7, #48]
 3301 0136 0022     		movs	r2, #0
 3302 0138 83F84520 		strb	r2, [r3, #69]
 3303              	.L222:
 3304              		.loc 1 1735 3 discriminator 6
 3305 013c FFF7FEFF 		bl	vPortExitCritical
1736:./Libraries/FreeRTOS/Source/queue.c **** 
1737:./Libraries/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1738:./Libraries/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 3306              		.loc 1 1738 7 is_stmt 1 discriminator 6
 3307 0140 3A1D     		adds	r2, r7, #4
 3308 0142 07F11403 		add	r3, r7, #20
 3309 0146 1146     		mov	r1, r2
 3310 0148 1846     		mov	r0, r3
 3311 014a FFF7FEFF 		bl	xTaskCheckForTimeOut
 3312 014e 0346     		mov	r3, r0
 3313              		.loc 1 1738 5 discriminator 6
 3314 0150 002B     		cmp	r3, #0
 3315 0152 23D1     		bne	.L223
1739:./Libraries/FreeRTOS/Source/queue.c **** 		{
1740:./Libraries/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
ARM GAS  /tmp/ccv5E8P7.s 			page 94


1741:./Libraries/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1742:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 3316              		.loc 1 1742 8
 3317 0154 386B     		ldr	r0, [r7, #48]
 3318 0156 FFF7FEFF 		bl	prvIsQueueEmpty
 3319 015a 0346     		mov	r3, r0
 3320              		.loc 1 1742 6
 3321 015c 002B     		cmp	r3, #0
 3322 015e 17D0     		beq	.L224
1743:./Libraries/FreeRTOS/Source/queue.c **** 			{
1744:./Libraries/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1745:./Libraries/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 3323              		.loc 1 1745 5
 3324 0160 3B6B     		ldr	r3, [r7, #48]
 3325 0162 2433     		adds	r3, r3, #36
 3326 0164 7A68     		ldr	r2, [r7, #4]
 3327 0166 1146     		mov	r1, r2
 3328 0168 1846     		mov	r0, r3
 3329 016a FFF7FEFF 		bl	vTaskPlaceOnEventList
1746:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 3330              		.loc 1 1746 5
 3331 016e 386B     		ldr	r0, [r7, #48]
 3332 0170 FFF7FEFF 		bl	prvUnlockQueue
1747:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 3333              		.loc 1 1747 9
 3334 0174 FFF7FEFF 		bl	xTaskResumeAll
 3335 0178 0346     		mov	r3, r0
 3336              		.loc 1 1747 7
 3337 017a 002B     		cmp	r3, #0
 3338 017c 87D1     		bne	.L214
1748:./Libraries/FreeRTOS/Source/queue.c **** 				{
1749:./Libraries/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 3339              		.loc 1 1749 6
 3340 017e 104B     		ldr	r3, .L227
 3341 0180 4FF08052 		mov	r2, #268435456
 3342 0184 1A60     		str	r2, [r3]
 3343              		.syntax unified
 3344              	@ 1749 "./Libraries/FreeRTOS/Source/queue.c" 1
 3345 0186 BFF34F8F 		dsb
 3346              	@ 0 "" 2
 3347              	@ 1749 "./Libraries/FreeRTOS/Source/queue.c" 1
 3348 018a BFF36F8F 		isb
 3349              	@ 0 "" 2
 3350              		.thumb
 3351              		.syntax unified
 3352 018e 7EE7     		b	.L214
 3353              	.L224:
1750:./Libraries/FreeRTOS/Source/queue.c **** 				}
1751:./Libraries/FreeRTOS/Source/queue.c **** 				else
1752:./Libraries/FreeRTOS/Source/queue.c **** 				{
1753:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1754:./Libraries/FreeRTOS/Source/queue.c **** 				}
1755:./Libraries/FreeRTOS/Source/queue.c **** 			}
1756:./Libraries/FreeRTOS/Source/queue.c **** 			else
1757:./Libraries/FreeRTOS/Source/queue.c **** 			{
1758:./Libraries/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1759:./Libraries/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
ARM GAS  /tmp/ccv5E8P7.s 			page 95


1760:./Libraries/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 3354              		.loc 1 1760 5
 3355 0190 386B     		ldr	r0, [r7, #48]
 3356 0192 FFF7FEFF 		bl	prvUnlockQueue
1761:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 3357              		.loc 1 1761 14
 3358 0196 FFF7FEFF 		bl	xTaskResumeAll
 3359 019a 78E7     		b	.L214
 3360              	.L223:
1762:./Libraries/FreeRTOS/Source/queue.c **** 			}
1763:./Libraries/FreeRTOS/Source/queue.c **** 		}
1764:./Libraries/FreeRTOS/Source/queue.c **** 		else
1765:./Libraries/FreeRTOS/Source/queue.c **** 		{
1766:./Libraries/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1767:./Libraries/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1768:./Libraries/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 3361              		.loc 1 1768 4
 3362 019c 386B     		ldr	r0, [r7, #48]
 3363 019e FFF7FEFF 		bl	prvUnlockQueue
1769:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 3364              		.loc 1 1769 13
 3365 01a2 FFF7FEFF 		bl	xTaskResumeAll
1770:./Libraries/FreeRTOS/Source/queue.c **** 
1771:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 3366              		.loc 1 1771 8
 3367 01a6 386B     		ldr	r0, [r7, #48]
 3368 01a8 FFF7FEFF 		bl	prvIsQueueEmpty
 3369 01ac 0346     		mov	r3, r0
 3370              		.loc 1 1771 6
 3371 01ae 002B     		cmp	r3, #0
 3372 01b0 3FF46DAF 		beq	.L214
1772:./Libraries/FreeRTOS/Source/queue.c **** 			{
1773:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1774:./Libraries/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
 3373              		.loc 1 1774 12
 3374 01b4 0023     		movs	r3, #0
 3375              	.L226:
1775:./Libraries/FreeRTOS/Source/queue.c **** 			}
1776:./Libraries/FreeRTOS/Source/queue.c **** 			else
1777:./Libraries/FreeRTOS/Source/queue.c **** 			{
1778:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1779:./Libraries/FreeRTOS/Source/queue.c **** 			}
1780:./Libraries/FreeRTOS/Source/queue.c **** 		}
1781:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1782:./Libraries/FreeRTOS/Source/queue.c **** }
 3376              		.loc 1 1782 1 discriminator 6
 3377 01b6 1846     		mov	r0, r3
 3378 01b8 3837     		adds	r7, r7, #56
 3379              	.LCFI94:
 3380              		.cfi_def_cfa_offset 8
 3381 01ba BD46     		mov	sp, r7
 3382              	.LCFI95:
 3383              		.cfi_def_cfa_register 13
 3384              		@ sp needed
 3385 01bc 80BD     		pop	{r7, pc}
 3386              	.L228:
 3387 01be 00BF     		.align	2
ARM GAS  /tmp/ccv5E8P7.s 			page 96


 3388              	.L227:
 3389 01c0 04ED00E0 		.word	-536810236
 3390              		.cfi_endproc
 3391              	.LFE22:
 3393              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3394              		.align	1
 3395              		.global	xQueueReceiveFromISR
 3396              		.syntax unified
 3397              		.thumb
 3398              		.thumb_func
 3399              		.fpu fpv5-d16
 3401              	xQueueReceiveFromISR:
 3402              	.LFB23:
1783:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1784:./Libraries/FreeRTOS/Source/queue.c **** 
1785:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1786:./Libraries/FreeRTOS/Source/queue.c **** {
 3403              		.loc 1 1786 1
 3404              		.cfi_startproc
 3405              		@ args = 0, pretend = 0, frame = 56
 3406              		@ frame_needed = 1, uses_anonymous_args = 0
 3407 0000 80B5     		push	{r7, lr}
 3408              	.LCFI96:
 3409              		.cfi_def_cfa_offset 8
 3410              		.cfi_offset 7, -8
 3411              		.cfi_offset 14, -4
 3412 0002 8EB0     		sub	sp, sp, #56
 3413              	.LCFI97:
 3414              		.cfi_def_cfa_offset 64
 3415 0004 00AF     		add	r7, sp, #0
 3416              	.LCFI98:
 3417              		.cfi_def_cfa_register 7
 3418 0006 F860     		str	r0, [r7, #12]
 3419 0008 B960     		str	r1, [r7, #8]
 3420 000a 7A60     		str	r2, [r7, #4]
1787:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1788:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1789:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3421              		.loc 1 1789 17
 3422 000c FB68     		ldr	r3, [r7, #12]
 3423 000e 3B63     		str	r3, [r7, #48]
1790:./Libraries/FreeRTOS/Source/queue.c **** 
1791:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 3424              		.loc 1 1791 2
 3425 0010 3B6B     		ldr	r3, [r7, #48]
 3426 0012 002B     		cmp	r3, #0
 3427 0014 0AD1     		bne	.L230
 3428              	.LBB202:
 3429              	.LBB203:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3430              		.loc 2 195 2
 3431              		.syntax unified
 3432              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3433 0016 4FF05003 			mov r3, #80												
 3434 001a 83F31188 		msr basepri, r3											
 3435 001e BFF36F8F 		isb														
 3436 0022 BFF34F8F 		dsb														
ARM GAS  /tmp/ccv5E8P7.s 			page 97


 3437              	
 3438              	@ 0 "" 2
 3439              		.thumb
 3440              		.syntax unified
 3441 0026 3B62     		str	r3, [r7, #32]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3442              		.loc 2 203 1
 3443 0028 00BF     		nop
 3444              	.L231:
 3445              	.LBE203:
 3446              	.LBE202:
 3447              		.loc 1 1791 2 discriminator 1
 3448 002a FEE7     		b	.L231
 3449              	.L230:
1792:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3450              		.loc 1 1792 2
 3451 002c BB68     		ldr	r3, [r7, #8]
 3452 002e 002B     		cmp	r3, #0
 3453 0030 03D1     		bne	.L232
 3454              		.loc 1 1792 2 is_stmt 0 discriminator 2
 3455 0032 3B6B     		ldr	r3, [r7, #48]
 3456 0034 1B6C     		ldr	r3, [r3, #64]
 3457 0036 002B     		cmp	r3, #0
 3458 0038 01D1     		bne	.L233
 3459              	.L232:
 3460              		.loc 1 1792 2 discriminator 3
 3461 003a 0123     		movs	r3, #1
 3462 003c 00E0     		b	.L234
 3463              	.L233:
 3464              		.loc 1 1792 2 discriminator 4
 3465 003e 0023     		movs	r3, #0
 3466              	.L234:
 3467              		.loc 1 1792 2 discriminator 6
 3468 0040 002B     		cmp	r3, #0
 3469 0042 0AD1     		bne	.L235
 3470              	.LBB204:
 3471              	.LBB205:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3472              		.loc 2 195 2 is_stmt 1
 3473              		.syntax unified
 3474              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3475 0044 4FF05003 			mov r3, #80												
 3476 0048 83F31188 		msr basepri, r3											
 3477 004c BFF36F8F 		isb														
 3478 0050 BFF34F8F 		dsb														
 3479              	
 3480              	@ 0 "" 2
 3481              		.thumb
 3482              		.syntax unified
 3483 0054 FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3484              		.loc 2 203 1
 3485 0056 00BF     		nop
 3486              	.L236:
 3487              	.LBE205:
 3488              	.LBE204:
 3489              		.loc 1 1792 2 discriminator 2
ARM GAS  /tmp/ccv5E8P7.s 			page 98


 3490 0058 FEE7     		b	.L236
 3491              	.L235:
1793:./Libraries/FreeRTOS/Source/queue.c **** 
1794:./Libraries/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:./Libraries/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:./Libraries/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:./Libraries/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1798:./Libraries/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1799:./Libraries/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1800:./Libraries/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:./Libraries/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1802:./Libraries/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:./Libraries/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:./Libraries/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:./Libraries/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:./Libraries/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:./Libraries/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1808:./Libraries/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3492              		.loc 1 1808 2
 3493 005a FFF7FEFF 		bl	vPortValidateInterruptPriority
 3494              	.LBB206:
 3495              	.LBB207:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3496              		.loc 2 211 2
 3497              		.syntax unified
 3498              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3499 005e EFF31182 			mrs r2, basepri											
 3500 0062 4FF05003 		mov r3, #80												
 3501 0066 83F31188 		msr basepri, r3											
 3502 006a BFF36F8F 		isb														
 3503 006e BFF34F8F 		dsb														
 3504              	
 3505              	@ 0 "" 2
 3506              		.thumb
 3507              		.syntax unified
 3508 0072 BA61     		str	r2, [r7, #24]
 3509 0074 7B61     		str	r3, [r7, #20]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3510              		.loc 2 223 9
 3511 0076 BB69     		ldr	r3, [r7, #24]
 3512              	.LBE207:
 3513              	.LBE206:
1809:./Libraries/FreeRTOS/Source/queue.c **** 
1810:./Libraries/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3514              		.loc 1 1810 27
 3515 0078 FB62     		str	r3, [r7, #44]
 3516              	.LBB208:
1811:./Libraries/FreeRTOS/Source/queue.c **** 	{
1812:./Libraries/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3517              		.loc 1 1812 21
 3518 007a 3B6B     		ldr	r3, [r7, #48]
 3519 007c 9B6B     		ldr	r3, [r3, #56]
 3520 007e BB62     		str	r3, [r7, #40]
1813:./Libraries/FreeRTOS/Source/queue.c **** 
1814:./Libraries/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1815:./Libraries/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3521              		.loc 1 1815 5
ARM GAS  /tmp/ccv5E8P7.s 			page 99


 3522 0080 BB6A     		ldr	r3, [r7, #40]
 3523 0082 002B     		cmp	r3, #0
 3524 0084 2FD0     		beq	.L238
 3525              	.LBB209:
1816:./Libraries/FreeRTOS/Source/queue.c **** 		{
1817:./Libraries/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 3526              		.loc 1 1817 17
 3527 0086 3B6B     		ldr	r3, [r7, #48]
 3528 0088 93F84430 		ldrb	r3, [r3, #68]
 3529 008c 87F82730 		strb	r3, [r7, #39]
1818:./Libraries/FreeRTOS/Source/queue.c **** 
1819:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1820:./Libraries/FreeRTOS/Source/queue.c **** 
1821:./Libraries/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3530              		.loc 1 1821 4
 3531 0090 B968     		ldr	r1, [r7, #8]
 3532 0092 386B     		ldr	r0, [r7, #48]
 3533 0094 FFF7FEFF 		bl	prvCopyDataFromQueue
1822:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3534              		.loc 1 1822 51
 3535 0098 BB6A     		ldr	r3, [r7, #40]
 3536 009a 5A1E     		subs	r2, r3, #1
 3537              		.loc 1 1822 31
 3538 009c 3B6B     		ldr	r3, [r7, #48]
 3539 009e 9A63     		str	r2, [r3, #56]
1823:./Libraries/FreeRTOS/Source/queue.c **** 
1824:./Libraries/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1825:./Libraries/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1826:./Libraries/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1827:./Libraries/FreeRTOS/Source/queue.c **** 			locked. */
1828:./Libraries/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 3540              		.loc 1 1828 6
 3541 00a0 97F92730 		ldrsb	r3, [r7, #39]
 3542 00a4 B3F1FF3F 		cmp	r3, #-1
 3543 00a8 12D1     		bne	.L239
1829:./Libraries/FreeRTOS/Source/queue.c **** 			{
1830:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3544              		.loc 1 1830 9
 3545 00aa 3B6B     		ldr	r3, [r7, #48]
 3546 00ac 1B69     		ldr	r3, [r3, #16]
 3547              		.loc 1 1830 7
 3548 00ae 002B     		cmp	r3, #0
 3549 00b0 16D0     		beq	.L240
1831:./Libraries/FreeRTOS/Source/queue.c **** 				{
1832:./Libraries/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3550              		.loc 1 1832 36
 3551 00b2 3B6B     		ldr	r3, [r7, #48]
 3552 00b4 1033     		adds	r3, r3, #16
 3553              		.loc 1 1832 10
 3554 00b6 1846     		mov	r0, r3
 3555 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3556 00bc 0346     		mov	r3, r0
 3557              		.loc 1 1832 8
 3558 00be 002B     		cmp	r3, #0
 3559 00c0 0ED0     		beq	.L240
1833:./Libraries/FreeRTOS/Source/queue.c **** 					{
1834:./Libraries/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
ARM GAS  /tmp/ccv5E8P7.s 			page 100


1835:./Libraries/FreeRTOS/Source/queue.c **** 						force a context switch. */
1836:./Libraries/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 3560              		.loc 1 1836 9
 3561 00c2 7B68     		ldr	r3, [r7, #4]
 3562 00c4 002B     		cmp	r3, #0
 3563 00c6 0BD0     		beq	.L240
1837:./Libraries/FreeRTOS/Source/queue.c **** 						{
1838:./Libraries/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 3564              		.loc 1 1838 35
 3565 00c8 7B68     		ldr	r3, [r7, #4]
 3566 00ca 0122     		movs	r2, #1
 3567 00cc 1A60     		str	r2, [r3]
 3568 00ce 07E0     		b	.L240
 3569              	.L239:
1839:./Libraries/FreeRTOS/Source/queue.c **** 						}
1840:./Libraries/FreeRTOS/Source/queue.c **** 						else
1841:./Libraries/FreeRTOS/Source/queue.c **** 						{
1842:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:./Libraries/FreeRTOS/Source/queue.c **** 						}
1844:./Libraries/FreeRTOS/Source/queue.c **** 					}
1845:./Libraries/FreeRTOS/Source/queue.c **** 					else
1846:./Libraries/FreeRTOS/Source/queue.c **** 					{
1847:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1848:./Libraries/FreeRTOS/Source/queue.c **** 					}
1849:./Libraries/FreeRTOS/Source/queue.c **** 				}
1850:./Libraries/FreeRTOS/Source/queue.c **** 				else
1851:./Libraries/FreeRTOS/Source/queue.c **** 				{
1852:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1853:./Libraries/FreeRTOS/Source/queue.c **** 				}
1854:./Libraries/FreeRTOS/Source/queue.c **** 			}
1855:./Libraries/FreeRTOS/Source/queue.c **** 			else
1856:./Libraries/FreeRTOS/Source/queue.c **** 			{
1857:./Libraries/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1858:./Libraries/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1859:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 3570              		.loc 1 1859 45
 3571 00d0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3572 00d4 0133     		adds	r3, r3, #1
 3573 00d6 DBB2     		uxtb	r3, r3
 3574              		.loc 1 1859 24
 3575 00d8 5AB2     		sxtb	r2, r3
 3576              		.loc 1 1859 22
 3577 00da 3B6B     		ldr	r3, [r7, #48]
 3578 00dc 83F84420 		strb	r2, [r3, #68]
 3579              	.L240:
1860:./Libraries/FreeRTOS/Source/queue.c **** 			}
1861:./Libraries/FreeRTOS/Source/queue.c **** 
1862:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 3580              		.loc 1 1862 12
 3581 00e0 0123     		movs	r3, #1
 3582 00e2 7B63     		str	r3, [r7, #52]
 3583              	.LBE209:
 3584 00e4 01E0     		b	.L241
 3585              	.L238:
1863:./Libraries/FreeRTOS/Source/queue.c **** 		}
1864:./Libraries/FreeRTOS/Source/queue.c **** 		else
1865:./Libraries/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccv5E8P7.s 			page 101


1866:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 3586              		.loc 1 1866 12
 3587 00e6 0023     		movs	r3, #0
 3588 00e8 7B63     		str	r3, [r7, #52]
 3589              	.L241:
 3590 00ea FB6A     		ldr	r3, [r7, #44]
 3591 00ec 3B61     		str	r3, [r7, #16]
 3592              	.LBE208:
 3593              	.LBB210:
 3594              	.LBB211:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3595              		.loc 2 229 2
 3596 00ee 3B69     		ldr	r3, [r7, #16]
 3597              		.syntax unified
 3598              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3599 00f0 83F31188 			msr basepri, r3	
 3600              	@ 0 "" 2
 3601              		.loc 2 233 1
 3602              		.thumb
 3603              		.syntax unified
 3604 00f4 00BF     		nop
 3605              	.LBE211:
 3606              	.LBE210:
1867:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1868:./Libraries/FreeRTOS/Source/queue.c **** 		}
1869:./Libraries/FreeRTOS/Source/queue.c **** 	}
1870:./Libraries/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1871:./Libraries/FreeRTOS/Source/queue.c **** 
1872:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 3607              		.loc 1 1872 9
 3608 00f6 7B6B     		ldr	r3, [r7, #52]
1873:./Libraries/FreeRTOS/Source/queue.c **** }
 3609              		.loc 1 1873 1
 3610 00f8 1846     		mov	r0, r3
 3611 00fa 3837     		adds	r7, r7, #56
 3612              	.LCFI99:
 3613              		.cfi_def_cfa_offset 8
 3614 00fc BD46     		mov	sp, r7
 3615              	.LCFI100:
 3616              		.cfi_def_cfa_register 13
 3617              		@ sp needed
 3618 00fe 80BD     		pop	{r7, pc}
 3619              		.cfi_endproc
 3620              	.LFE23:
 3622              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3623              		.align	1
 3624              		.global	xQueuePeekFromISR
 3625              		.syntax unified
 3626              		.thumb
 3627              		.thumb_func
 3628              		.fpu fpv5-d16
 3630              	xQueuePeekFromISR:
 3631              	.LFB24:
1874:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1875:./Libraries/FreeRTOS/Source/queue.c **** 
1876:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1877:./Libraries/FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/ccv5E8P7.s 			page 102


 3632              		.loc 1 1877 1
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 48
 3635              		@ frame_needed = 1, uses_anonymous_args = 0
 3636 0000 80B5     		push	{r7, lr}
 3637              	.LCFI101:
 3638              		.cfi_def_cfa_offset 8
 3639              		.cfi_offset 7, -8
 3640              		.cfi_offset 14, -4
 3641 0002 8CB0     		sub	sp, sp, #48
 3642              	.LCFI102:
 3643              		.cfi_def_cfa_offset 56
 3644 0004 00AF     		add	r7, sp, #0
 3645              	.LCFI103:
 3646              		.cfi_def_cfa_register 7
 3647 0006 7860     		str	r0, [r7, #4]
 3648 0008 3960     		str	r1, [r7]
1878:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1879:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1880:./Libraries/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1881:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3649              		.loc 1 1881 17
 3650 000a 7B68     		ldr	r3, [r7, #4]
 3651 000c BB62     		str	r3, [r7, #40]
1882:./Libraries/FreeRTOS/Source/queue.c **** 
1883:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 3652              		.loc 1 1883 2
 3653 000e BB6A     		ldr	r3, [r7, #40]
 3654 0010 002B     		cmp	r3, #0
 3655 0012 0AD1     		bne	.L244
 3656              	.LBB212:
 3657              	.LBB213:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3658              		.loc 2 195 2
 3659              		.syntax unified
 3660              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3661 0014 4FF05003 			mov r3, #80												
 3662 0018 83F31188 		msr basepri, r3											
 3663 001c BFF36F8F 		isb														
 3664 0020 BFF34F8F 		dsb														
 3665              	
 3666              	@ 0 "" 2
 3667              		.thumb
 3668              		.syntax unified
 3669 0024 FB61     		str	r3, [r7, #28]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3670              		.loc 2 203 1
 3671 0026 00BF     		nop
 3672              	.L245:
 3673              	.LBE213:
 3674              	.LBE212:
 3675              		.loc 1 1883 2 discriminator 1
 3676 0028 FEE7     		b	.L245
 3677              	.L244:
1884:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3678              		.loc 1 1884 2
 3679 002a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccv5E8P7.s 			page 103


 3680 002c 002B     		cmp	r3, #0
 3681 002e 03D1     		bne	.L246
 3682              		.loc 1 1884 2 is_stmt 0 discriminator 2
 3683 0030 BB6A     		ldr	r3, [r7, #40]
 3684 0032 1B6C     		ldr	r3, [r3, #64]
 3685 0034 002B     		cmp	r3, #0
 3686 0036 01D1     		bne	.L247
 3687              	.L246:
 3688              		.loc 1 1884 2 discriminator 3
 3689 0038 0123     		movs	r3, #1
 3690 003a 00E0     		b	.L248
 3691              	.L247:
 3692              		.loc 1 1884 2 discriminator 4
 3693 003c 0023     		movs	r3, #0
 3694              	.L248:
 3695              		.loc 1 1884 2 discriminator 6
 3696 003e 002B     		cmp	r3, #0
 3697 0040 0AD1     		bne	.L249
 3698              	.LBB214:
 3699              	.LBB215:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3700              		.loc 2 195 2 is_stmt 1
 3701              		.syntax unified
 3702              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3703 0042 4FF05003 			mov r3, #80												
 3704 0046 83F31188 		msr basepri, r3											
 3705 004a BFF36F8F 		isb														
 3706 004e BFF34F8F 		dsb														
 3707              	
 3708              	@ 0 "" 2
 3709              		.thumb
 3710              		.syntax unified
 3711 0052 BB61     		str	r3, [r7, #24]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3712              		.loc 2 203 1
 3713 0054 00BF     		nop
 3714              	.L250:
 3715              	.LBE215:
 3716              	.LBE214:
 3717              		.loc 1 1884 2 discriminator 2
 3718 0056 FEE7     		b	.L250
 3719              	.L249:
1885:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3720              		.loc 1 1885 2
 3721 0058 BB6A     		ldr	r3, [r7, #40]
 3722 005a 1B6C     		ldr	r3, [r3, #64]
 3723 005c 002B     		cmp	r3, #0
 3724 005e 0AD1     		bne	.L251
 3725              	.LBB216:
 3726              	.LBB217:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3727              		.loc 2 195 2
 3728              		.syntax unified
 3729              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3730 0060 4FF05003 			mov r3, #80												
 3731 0064 83F31188 		msr basepri, r3											
 3732 0068 BFF36F8F 		isb														
ARM GAS  /tmp/ccv5E8P7.s 			page 104


 3733 006c BFF34F8F 		dsb														
 3734              	
 3735              	@ 0 "" 2
 3736              		.thumb
 3737              		.syntax unified
 3738 0070 7B61     		str	r3, [r7, #20]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3739              		.loc 2 203 1
 3740 0072 00BF     		nop
 3741              	.L252:
 3742              	.LBE217:
 3743              	.LBE216:
 3744              		.loc 1 1885 2 discriminator 3
 3745 0074 FEE7     		b	.L252
 3746              	.L251:
1886:./Libraries/FreeRTOS/Source/queue.c **** 
1887:./Libraries/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1888:./Libraries/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1889:./Libraries/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1890:./Libraries/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1891:./Libraries/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1892:./Libraries/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1893:./Libraries/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1894:./Libraries/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1895:./Libraries/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1896:./Libraries/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1897:./Libraries/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1898:./Libraries/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1899:./Libraries/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1900:./Libraries/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1901:./Libraries/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3747              		.loc 1 1901 2
 3748 0076 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3749              	.LBB218:
 3750              	.LBB219:
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3751              		.loc 2 211 2
 3752              		.syntax unified
 3753              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3754 007a EFF31182 			mrs r2, basepri											
 3755 007e 4FF05003 		mov r3, #80												
 3756 0082 83F31188 		msr basepri, r3											
 3757 0086 BFF36F8F 		isb														
 3758 008a BFF34F8F 		dsb														
 3759              	
 3760              	@ 0 "" 2
 3761              		.thumb
 3762              		.syntax unified
 3763 008e 3A61     		str	r2, [r7, #16]
 3764 0090 FB60     		str	r3, [r7, #12]
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 3765              		.loc 2 223 9
 3766 0092 3B69     		ldr	r3, [r7, #16]
 3767              	.LBE219:
 3768              	.LBE218:
1902:./Libraries/FreeRTOS/Source/queue.c **** 
1903:./Libraries/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/ccv5E8P7.s 			page 105


 3769              		.loc 1 1903 27
 3770 0094 7B62     		str	r3, [r7, #36]
1904:./Libraries/FreeRTOS/Source/queue.c **** 	{
1905:./Libraries/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1906:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 3771              		.loc 1 1906 14
 3772 0096 BB6A     		ldr	r3, [r7, #40]
 3773 0098 9B6B     		ldr	r3, [r3, #56]
 3774              		.loc 1 1906 5
 3775 009a 002B     		cmp	r3, #0
 3776 009c 0CD0     		beq	.L254
1907:./Libraries/FreeRTOS/Source/queue.c **** 		{
1908:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1909:./Libraries/FreeRTOS/Source/queue.c **** 
1910:./Libraries/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1911:./Libraries/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1912:./Libraries/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3777              		.loc 1 1912 27
 3778 009e BB6A     		ldr	r3, [r7, #40]
 3779 00a0 DB68     		ldr	r3, [r3, #12]
 3780 00a2 3B62     		str	r3, [r7, #32]
1913:./Libraries/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3781              		.loc 1 1913 4
 3782 00a4 3968     		ldr	r1, [r7]
 3783 00a6 B86A     		ldr	r0, [r7, #40]
 3784 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1914:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3785              		.loc 1 1914 33
 3786 00ac BB6A     		ldr	r3, [r7, #40]
 3787 00ae 3A6A     		ldr	r2, [r7, #32]
 3788 00b0 DA60     		str	r2, [r3, #12]
1915:./Libraries/FreeRTOS/Source/queue.c **** 
1916:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 3789              		.loc 1 1916 12
 3790 00b2 0123     		movs	r3, #1
 3791 00b4 FB62     		str	r3, [r7, #44]
 3792 00b6 01E0     		b	.L255
 3793              	.L254:
1917:./Libraries/FreeRTOS/Source/queue.c **** 		}
1918:./Libraries/FreeRTOS/Source/queue.c **** 		else
1919:./Libraries/FreeRTOS/Source/queue.c **** 		{
1920:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 3794              		.loc 1 1920 12
 3795 00b8 0023     		movs	r3, #0
 3796 00ba FB62     		str	r3, [r7, #44]
 3797              	.L255:
 3798 00bc 7B6A     		ldr	r3, [r7, #36]
 3799 00be BB60     		str	r3, [r7, #8]
 3800              	.LBB220:
 3801              	.LBB221:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3802              		.loc 2 229 2
 3803 00c0 BB68     		ldr	r3, [r7, #8]
 3804              		.syntax unified
 3805              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3806 00c2 83F31188 			msr basepri, r3	
 3807              	@ 0 "" 2
ARM GAS  /tmp/ccv5E8P7.s 			page 106


 3808              		.loc 2 233 1
 3809              		.thumb
 3810              		.syntax unified
 3811 00c6 00BF     		nop
 3812              	.LBE221:
 3813              	.LBE220:
1921:./Libraries/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1922:./Libraries/FreeRTOS/Source/queue.c **** 		}
1923:./Libraries/FreeRTOS/Source/queue.c **** 	}
1924:./Libraries/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1925:./Libraries/FreeRTOS/Source/queue.c **** 
1926:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 3814              		.loc 1 1926 9
 3815 00c8 FB6A     		ldr	r3, [r7, #44]
1927:./Libraries/FreeRTOS/Source/queue.c **** }
 3816              		.loc 1 1927 1
 3817 00ca 1846     		mov	r0, r3
 3818 00cc 3037     		adds	r7, r7, #48
 3819              	.LCFI104:
 3820              		.cfi_def_cfa_offset 8
 3821 00ce BD46     		mov	sp, r7
 3822              	.LCFI105:
 3823              		.cfi_def_cfa_register 13
 3824              		@ sp needed
 3825 00d0 80BD     		pop	{r7, pc}
 3826              		.cfi_endproc
 3827              	.LFE24:
 3829              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3830              		.align	1
 3831              		.global	uxQueueMessagesWaiting
 3832              		.syntax unified
 3833              		.thumb
 3834              		.thumb_func
 3835              		.fpu fpv5-d16
 3837              	uxQueueMessagesWaiting:
 3838              	.LFB25:
1928:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1929:./Libraries/FreeRTOS/Source/queue.c **** 
1930:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1931:./Libraries/FreeRTOS/Source/queue.c **** {
 3839              		.loc 1 1931 1
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 16
 3842              		@ frame_needed = 1, uses_anonymous_args = 0
 3843 0000 80B5     		push	{r7, lr}
 3844              	.LCFI106:
 3845              		.cfi_def_cfa_offset 8
 3846              		.cfi_offset 7, -8
 3847              		.cfi_offset 14, -4
 3848 0002 84B0     		sub	sp, sp, #16
 3849              	.LCFI107:
 3850              		.cfi_def_cfa_offset 24
 3851 0004 00AF     		add	r7, sp, #0
 3852              	.LCFI108:
 3853              		.cfi_def_cfa_register 7
 3854 0006 7860     		str	r0, [r7, #4]
1932:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
ARM GAS  /tmp/ccv5E8P7.s 			page 107


1933:./Libraries/FreeRTOS/Source/queue.c **** 
1934:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3855              		.loc 1 1934 2
 3856 0008 7B68     		ldr	r3, [r7, #4]
 3857 000a 002B     		cmp	r3, #0
 3858 000c 0AD1     		bne	.L258
 3859              	.LBB222:
 3860              	.LBB223:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3861              		.loc 2 195 2
 3862              		.syntax unified
 3863              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3864 000e 4FF05003 			mov r3, #80												
 3865 0012 83F31188 		msr basepri, r3											
 3866 0016 BFF36F8F 		isb														
 3867 001a BFF34F8F 		dsb														
 3868              	
 3869              	@ 0 "" 2
 3870              		.thumb
 3871              		.syntax unified
 3872 001e BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3873              		.loc 2 203 1
 3874 0020 00BF     		nop
 3875              	.L259:
 3876              	.LBE223:
 3877              	.LBE222:
 3878              		.loc 1 1934 2 discriminator 1
 3879 0022 FEE7     		b	.L259
 3880              	.L258:
1935:./Libraries/FreeRTOS/Source/queue.c **** 
1936:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3881              		.loc 1 1936 2
 3882 0024 FFF7FEFF 		bl	vPortEnterCritical
1937:./Libraries/FreeRTOS/Source/queue.c **** 	{
1938:./Libraries/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 3883              		.loc 1 1938 12
 3884 0028 7B68     		ldr	r3, [r7, #4]
 3885 002a 9B6B     		ldr	r3, [r3, #56]
 3886 002c FB60     		str	r3, [r7, #12]
1939:./Libraries/FreeRTOS/Source/queue.c **** 	}
1940:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3887              		.loc 1 1940 2
 3888 002e FFF7FEFF 		bl	vPortExitCritical
1941:./Libraries/FreeRTOS/Source/queue.c **** 
1942:./Libraries/FreeRTOS/Source/queue.c **** 	return uxReturn;
 3889              		.loc 1 1942 9
 3890 0032 FB68     		ldr	r3, [r7, #12]
1943:./Libraries/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3891              		.loc 1 1943 1
 3892 0034 1846     		mov	r0, r3
 3893 0036 1037     		adds	r7, r7, #16
 3894              	.LCFI109:
 3895              		.cfi_def_cfa_offset 8
 3896 0038 BD46     		mov	sp, r7
 3897              	.LCFI110:
 3898              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccv5E8P7.s 			page 108


 3899              		@ sp needed
 3900 003a 80BD     		pop	{r7, pc}
 3901              		.cfi_endproc
 3902              	.LFE25:
 3904              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3905              		.align	1
 3906              		.global	uxQueueSpacesAvailable
 3907              		.syntax unified
 3908              		.thumb
 3909              		.thumb_func
 3910              		.fpu fpv5-d16
 3912              	uxQueueSpacesAvailable:
 3913              	.LFB26:
1944:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1945:./Libraries/FreeRTOS/Source/queue.c **** 
1946:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1947:./Libraries/FreeRTOS/Source/queue.c **** {
 3914              		.loc 1 1947 1
 3915              		.cfi_startproc
 3916              		@ args = 0, pretend = 0, frame = 24
 3917              		@ frame_needed = 1, uses_anonymous_args = 0
 3918 0000 80B5     		push	{r7, lr}
 3919              	.LCFI111:
 3920              		.cfi_def_cfa_offset 8
 3921              		.cfi_offset 7, -8
 3922              		.cfi_offset 14, -4
 3923 0002 86B0     		sub	sp, sp, #24
 3924              	.LCFI112:
 3925              		.cfi_def_cfa_offset 32
 3926 0004 00AF     		add	r7, sp, #0
 3927              	.LCFI113:
 3928              		.cfi_def_cfa_register 7
 3929 0006 7860     		str	r0, [r7, #4]
1948:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1949:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3930              		.loc 1 1949 17
 3931 0008 7B68     		ldr	r3, [r7, #4]
 3932 000a 7B61     		str	r3, [r7, #20]
1950:./Libraries/FreeRTOS/Source/queue.c **** 
1951:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 3933              		.loc 1 1951 2
 3934 000c 7B69     		ldr	r3, [r7, #20]
 3935 000e 002B     		cmp	r3, #0
 3936 0010 0AD1     		bne	.L262
 3937              	.LBB224:
 3938              	.LBB225:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3939              		.loc 2 195 2
 3940              		.syntax unified
 3941              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3942 0012 4FF05003 			mov r3, #80												
 3943 0016 83F31188 		msr basepri, r3											
 3944 001a BFF36F8F 		isb														
 3945 001e BFF34F8F 		dsb														
 3946              	
 3947              	@ 0 "" 2
 3948              		.thumb
ARM GAS  /tmp/ccv5E8P7.s 			page 109


 3949              		.syntax unified
 3950 0022 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3951              		.loc 2 203 1
 3952 0024 00BF     		nop
 3953              	.L263:
 3954              	.LBE225:
 3955              	.LBE224:
 3956              		.loc 1 1951 2 discriminator 1
 3957 0026 FEE7     		b	.L263
 3958              	.L262:
1952:./Libraries/FreeRTOS/Source/queue.c **** 
1953:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 3959              		.loc 1 1953 2
 3960 0028 FFF7FEFF 		bl	vPortEnterCritical
1954:./Libraries/FreeRTOS/Source/queue.c **** 	{
1955:./Libraries/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 3961              		.loc 1 1955 21
 3962 002c 7B69     		ldr	r3, [r7, #20]
 3963 002e DA6B     		ldr	r2, [r3, #60]
 3964              		.loc 1 1955 41
 3965 0030 7B69     		ldr	r3, [r7, #20]
 3966 0032 9B6B     		ldr	r3, [r3, #56]
 3967              		.loc 1 1955 12
 3968 0034 D31A     		subs	r3, r2, r3
 3969 0036 3B61     		str	r3, [r7, #16]
1956:./Libraries/FreeRTOS/Source/queue.c **** 	}
1957:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 3970              		.loc 1 1957 2
 3971 0038 FFF7FEFF 		bl	vPortExitCritical
1958:./Libraries/FreeRTOS/Source/queue.c **** 
1959:./Libraries/FreeRTOS/Source/queue.c **** 	return uxReturn;
 3972              		.loc 1 1959 9
 3973 003c 3B69     		ldr	r3, [r7, #16]
1960:./Libraries/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3974              		.loc 1 1960 1
 3975 003e 1846     		mov	r0, r3
 3976 0040 1837     		adds	r7, r7, #24
 3977              	.LCFI114:
 3978              		.cfi_def_cfa_offset 8
 3979 0042 BD46     		mov	sp, r7
 3980              	.LCFI115:
 3981              		.cfi_def_cfa_register 13
 3982              		@ sp needed
 3983 0044 80BD     		pop	{r7, pc}
 3984              		.cfi_endproc
 3985              	.LFE26:
 3987              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3988              		.align	1
 3989              		.global	uxQueueMessagesWaitingFromISR
 3990              		.syntax unified
 3991              		.thumb
 3992              		.thumb_func
 3993              		.fpu fpv5-d16
 3995              	uxQueueMessagesWaitingFromISR:
 3996              	.LFB27:
1961:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccv5E8P7.s 			page 110


1962:./Libraries/FreeRTOS/Source/queue.c **** 
1963:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1964:./Libraries/FreeRTOS/Source/queue.c **** {
 3997              		.loc 1 1964 1
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 24
 4000              		@ frame_needed = 1, uses_anonymous_args = 0
 4001              		@ link register save eliminated.
 4002 0000 80B4     		push	{r7}
 4003              	.LCFI116:
 4004              		.cfi_def_cfa_offset 4
 4005              		.cfi_offset 7, -4
 4006 0002 87B0     		sub	sp, sp, #28
 4007              	.LCFI117:
 4008              		.cfi_def_cfa_offset 32
 4009 0004 00AF     		add	r7, sp, #0
 4010              	.LCFI118:
 4011              		.cfi_def_cfa_register 7
 4012 0006 7860     		str	r0, [r7, #4]
1965:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1966:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 4013              		.loc 1 1966 17
 4014 0008 7B68     		ldr	r3, [r7, #4]
 4015 000a 7B61     		str	r3, [r7, #20]
1967:./Libraries/FreeRTOS/Source/queue.c **** 
1968:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 4016              		.loc 1 1968 2
 4017 000c 7B69     		ldr	r3, [r7, #20]
 4018 000e 002B     		cmp	r3, #0
 4019 0010 0AD1     		bne	.L266
 4020              	.LBB226:
 4021              	.LBB227:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4022              		.loc 2 195 2
 4023              		.syntax unified
 4024              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4025 0012 4FF05003 			mov r3, #80												
 4026 0016 83F31188 		msr basepri, r3											
 4027 001a BFF36F8F 		isb														
 4028 001e BFF34F8F 		dsb														
 4029              	
 4030              	@ 0 "" 2
 4031              		.thumb
 4032              		.syntax unified
 4033 0022 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4034              		.loc 2 203 1
 4035 0024 00BF     		nop
 4036              	.L267:
 4037              	.LBE227:
 4038              	.LBE226:
 4039              		.loc 1 1968 2 discriminator 1
 4040 0026 FEE7     		b	.L267
 4041              	.L266:
1969:./Libraries/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 4042              		.loc 1 1969 11
 4043 0028 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccv5E8P7.s 			page 111


 4044 002a 9B6B     		ldr	r3, [r3, #56]
 4045 002c 3B61     		str	r3, [r7, #16]
1970:./Libraries/FreeRTOS/Source/queue.c **** 
1971:./Libraries/FreeRTOS/Source/queue.c **** 	return uxReturn;
 4046              		.loc 1 1971 9
 4047 002e 3B69     		ldr	r3, [r7, #16]
1972:./Libraries/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 4048              		.loc 1 1972 1
 4049 0030 1846     		mov	r0, r3
 4050 0032 1C37     		adds	r7, r7, #28
 4051              	.LCFI119:
 4052              		.cfi_def_cfa_offset 4
 4053 0034 BD46     		mov	sp, r7
 4054              	.LCFI120:
 4055              		.cfi_def_cfa_register 13
 4056              		@ sp needed
 4057 0036 5DF8047B 		ldr	r7, [sp], #4
 4058              	.LCFI121:
 4059              		.cfi_restore 7
 4060              		.cfi_def_cfa_offset 0
 4061 003a 7047     		bx	lr
 4062              		.cfi_endproc
 4063              	.LFE27:
 4065              		.section	.text.vQueueDelete,"ax",%progbits
 4066              		.align	1
 4067              		.global	vQueueDelete
 4068              		.syntax unified
 4069              		.thumb
 4070              		.thumb_func
 4071              		.fpu fpv5-d16
 4073              	vQueueDelete:
 4074              	.LFB28:
1973:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1974:./Libraries/FreeRTOS/Source/queue.c **** 
1975:./Libraries/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1976:./Libraries/FreeRTOS/Source/queue.c **** {
 4075              		.loc 1 1976 1
 4076              		.cfi_startproc
 4077              		@ args = 0, pretend = 0, frame = 16
 4078              		@ frame_needed = 1, uses_anonymous_args = 0
 4079 0000 80B5     		push	{r7, lr}
 4080              	.LCFI122:
 4081              		.cfi_def_cfa_offset 8
 4082              		.cfi_offset 7, -8
 4083              		.cfi_offset 14, -4
 4084 0002 84B0     		sub	sp, sp, #16
 4085              	.LCFI123:
 4086              		.cfi_def_cfa_offset 24
 4087 0004 00AF     		add	r7, sp, #0
 4088              	.LCFI124:
 4089              		.cfi_def_cfa_register 7
 4090 0006 7860     		str	r0, [r7, #4]
1977:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 4091              		.loc 1 1977 17
 4092 0008 7B68     		ldr	r3, [r7, #4]
 4093 000a FB60     		str	r3, [r7, #12]
1978:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 112


1979:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 4094              		.loc 1 1979 2
 4095 000c FB68     		ldr	r3, [r7, #12]
 4096 000e 002B     		cmp	r3, #0
 4097 0010 0AD1     		bne	.L270
 4098              	.LBB228:
 4099              	.LBB229:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4100              		.loc 2 195 2
 4101              		.syntax unified
 4102              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4103 0012 4FF05003 			mov r3, #80												
 4104 0016 83F31188 		msr basepri, r3											
 4105 001a BFF36F8F 		isb														
 4106 001e BFF34F8F 		dsb														
 4107              	
 4108              	@ 0 "" 2
 4109              		.thumb
 4110              		.syntax unified
 4111 0022 BB60     		str	r3, [r7, #8]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4112              		.loc 2 203 1
 4113 0024 00BF     		nop
 4114              	.L271:
 4115              	.LBE229:
 4116              	.LBE228:
 4117              		.loc 1 1979 2 discriminator 1
 4118 0026 FEE7     		b	.L271
 4119              	.L270:
1980:./Libraries/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1981:./Libraries/FreeRTOS/Source/queue.c **** 
1982:./Libraries/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1983:./Libraries/FreeRTOS/Source/queue.c **** 	{
1984:./Libraries/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 4120              		.loc 1 1984 3
 4121 0028 F868     		ldr	r0, [r7, #12]
 4122 002a FFF7FEFF 		bl	vQueueUnregisterQueue
1985:./Libraries/FreeRTOS/Source/queue.c **** 	}
1986:./Libraries/FreeRTOS/Source/queue.c **** 	#endif
1987:./Libraries/FreeRTOS/Source/queue.c **** 
1988:./Libraries/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1989:./Libraries/FreeRTOS/Source/queue.c **** 	{
1990:./Libraries/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1991:./Libraries/FreeRTOS/Source/queue.c **** 		again. */
1992:./Libraries/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1993:./Libraries/FreeRTOS/Source/queue.c **** 	}
1994:./Libraries/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1995:./Libraries/FreeRTOS/Source/queue.c **** 	{
1996:./Libraries/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1997:./Libraries/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1998:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 4123              		.loc 1 1998 14
 4124 002e FB68     		ldr	r3, [r7, #12]
 4125 0030 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 4126              		.loc 1 1998 5
 4127 0034 002B     		cmp	r3, #0
 4128 0036 02D1     		bne	.L273
ARM GAS  /tmp/ccv5E8P7.s 			page 113


1999:./Libraries/FreeRTOS/Source/queue.c **** 		{
2000:./Libraries/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
 4129              		.loc 1 2000 4
 4130 0038 F868     		ldr	r0, [r7, #12]
 4131 003a FFF7FEFF 		bl	vPortFree
 4132              	.L273:
2001:./Libraries/FreeRTOS/Source/queue.c **** 		}
2002:./Libraries/FreeRTOS/Source/queue.c **** 		else
2003:./Libraries/FreeRTOS/Source/queue.c **** 		{
2004:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2005:./Libraries/FreeRTOS/Source/queue.c **** 		}
2006:./Libraries/FreeRTOS/Source/queue.c **** 	}
2007:./Libraries/FreeRTOS/Source/queue.c **** 	#else
2008:./Libraries/FreeRTOS/Source/queue.c **** 	{
2009:./Libraries/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2010:./Libraries/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2011:./Libraries/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
2012:./Libraries/FreeRTOS/Source/queue.c **** 	}
2013:./Libraries/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2014:./Libraries/FreeRTOS/Source/queue.c **** }
 4133              		.loc 1 2014 1
 4134 003e 00BF     		nop
 4135 0040 1037     		adds	r7, r7, #16
 4136              	.LCFI125:
 4137              		.cfi_def_cfa_offset 8
 4138 0042 BD46     		mov	sp, r7
 4139              	.LCFI126:
 4140              		.cfi_def_cfa_register 13
 4141              		@ sp needed
 4142 0044 80BD     		pop	{r7, pc}
 4143              		.cfi_endproc
 4144              	.LFE28:
 4146              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 4147              		.align	1
 4148              		.global	uxQueueGetQueueNumber
 4149              		.syntax unified
 4150              		.thumb
 4151              		.thumb_func
 4152              		.fpu fpv5-d16
 4154              	uxQueueGetQueueNumber:
 4155              	.LFB29:
2015:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2016:./Libraries/FreeRTOS/Source/queue.c **** 
2017:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:./Libraries/FreeRTOS/Source/queue.c **** 
2019:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2020:./Libraries/FreeRTOS/Source/queue.c **** 	{
 4156              		.loc 1 2020 2
 4157              		.cfi_startproc
 4158              		@ args = 0, pretend = 0, frame = 8
 4159              		@ frame_needed = 1, uses_anonymous_args = 0
 4160              		@ link register save eliminated.
 4161 0000 80B4     		push	{r7}
 4162              	.LCFI127:
 4163              		.cfi_def_cfa_offset 4
 4164              		.cfi_offset 7, -4
 4165 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccv5E8P7.s 			page 114


 4166              	.LCFI128:
 4167              		.cfi_def_cfa_offset 16
 4168 0004 00AF     		add	r7, sp, #0
 4169              	.LCFI129:
 4170              		.cfi_def_cfa_register 7
 4171 0006 7860     		str	r0, [r7, #4]
2021:./Libraries/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 4172              		.loc 1 2021 34
 4173 0008 7B68     		ldr	r3, [r7, #4]
 4174 000a 9B6C     		ldr	r3, [r3, #72]
2022:./Libraries/FreeRTOS/Source/queue.c **** 	}
 4175              		.loc 1 2022 2
 4176 000c 1846     		mov	r0, r3
 4177 000e 0C37     		adds	r7, r7, #12
 4178              	.LCFI130:
 4179              		.cfi_def_cfa_offset 4
 4180 0010 BD46     		mov	sp, r7
 4181              	.LCFI131:
 4182              		.cfi_def_cfa_register 13
 4183              		@ sp needed
 4184 0012 5DF8047B 		ldr	r7, [sp], #4
 4185              	.LCFI132:
 4186              		.cfi_restore 7
 4187              		.cfi_def_cfa_offset 0
 4188 0016 7047     		bx	lr
 4189              		.cfi_endproc
 4190              	.LFE29:
 4192              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 4193              		.align	1
 4194              		.global	vQueueSetQueueNumber
 4195              		.syntax unified
 4196              		.thumb
 4197              		.thumb_func
 4198              		.fpu fpv5-d16
 4200              	vQueueSetQueueNumber:
 4201              	.LFB30:
2023:./Libraries/FreeRTOS/Source/queue.c **** 
2024:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2026:./Libraries/FreeRTOS/Source/queue.c **** 
2027:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2028:./Libraries/FreeRTOS/Source/queue.c **** 
2029:./Libraries/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2030:./Libraries/FreeRTOS/Source/queue.c **** 	{
 4202              		.loc 1 2030 2
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 8
 4205              		@ frame_needed = 1, uses_anonymous_args = 0
 4206              		@ link register save eliminated.
 4207 0000 80B4     		push	{r7}
 4208              	.LCFI133:
 4209              		.cfi_def_cfa_offset 4
 4210              		.cfi_offset 7, -4
 4211 0002 83B0     		sub	sp, sp, #12
 4212              	.LCFI134:
 4213              		.cfi_def_cfa_offset 16
 4214 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccv5E8P7.s 			page 115


 4215              	.LCFI135:
 4216              		.cfi_def_cfa_register 7
 4217 0006 7860     		str	r0, [r7, #4]
 4218 0008 3960     		str	r1, [r7]
2031:./Libraries/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 4219              		.loc 1 2031 43
 4220 000a 7B68     		ldr	r3, [r7, #4]
 4221 000c 3A68     		ldr	r2, [r7]
 4222 000e 9A64     		str	r2, [r3, #72]
2032:./Libraries/FreeRTOS/Source/queue.c **** 	}
 4223              		.loc 1 2032 2
 4224 0010 00BF     		nop
 4225 0012 0C37     		adds	r7, r7, #12
 4226              	.LCFI136:
 4227              		.cfi_def_cfa_offset 4
 4228 0014 BD46     		mov	sp, r7
 4229              	.LCFI137:
 4230              		.cfi_def_cfa_register 13
 4231              		@ sp needed
 4232 0016 5DF8047B 		ldr	r7, [sp], #4
 4233              	.LCFI138:
 4234              		.cfi_restore 7
 4235              		.cfi_def_cfa_offset 0
 4236 001a 7047     		bx	lr
 4237              		.cfi_endproc
 4238              	.LFE30:
 4240              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 4241              		.align	1
 4242              		.global	ucQueueGetQueueType
 4243              		.syntax unified
 4244              		.thumb
 4245              		.thumb_func
 4246              		.fpu fpv5-d16
 4248              	ucQueueGetQueueType:
 4249              	.LFB31:
2033:./Libraries/FreeRTOS/Source/queue.c **** 
2034:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2035:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2036:./Libraries/FreeRTOS/Source/queue.c **** 
2037:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2038:./Libraries/FreeRTOS/Source/queue.c **** 
2039:./Libraries/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2040:./Libraries/FreeRTOS/Source/queue.c **** 	{
 4250              		.loc 1 2040 2
 4251              		.cfi_startproc
 4252              		@ args = 0, pretend = 0, frame = 8
 4253              		@ frame_needed = 1, uses_anonymous_args = 0
 4254              		@ link register save eliminated.
 4255 0000 80B4     		push	{r7}
 4256              	.LCFI139:
 4257              		.cfi_def_cfa_offset 4
 4258              		.cfi_offset 7, -4
 4259 0002 83B0     		sub	sp, sp, #12
 4260              	.LCFI140:
 4261              		.cfi_def_cfa_offset 16
 4262 0004 00AF     		add	r7, sp, #0
 4263              	.LCFI141:
ARM GAS  /tmp/ccv5E8P7.s 			page 116


 4264              		.cfi_def_cfa_register 7
 4265 0006 7860     		str	r0, [r7, #4]
2041:./Libraries/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 4266              		.loc 1 2041 34
 4267 0008 7B68     		ldr	r3, [r7, #4]
 4268 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
2042:./Libraries/FreeRTOS/Source/queue.c **** 	}
 4269              		.loc 1 2042 2
 4270 000e 1846     		mov	r0, r3
 4271 0010 0C37     		adds	r7, r7, #12
 4272              	.LCFI142:
 4273              		.cfi_def_cfa_offset 4
 4274 0012 BD46     		mov	sp, r7
 4275              	.LCFI143:
 4276              		.cfi_def_cfa_register 13
 4277              		@ sp needed
 4278 0014 5DF8047B 		ldr	r7, [sp], #4
 4279              	.LCFI144:
 4280              		.cfi_restore 7
 4281              		.cfi_def_cfa_offset 0
 4282 0018 7047     		bx	lr
 4283              		.cfi_endproc
 4284              	.LFE31:
 4286              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 4287              		.align	1
 4288              		.syntax unified
 4289              		.thumb
 4290              		.thumb_func
 4291              		.fpu fpv5-d16
 4293              	prvGetDisinheritPriorityAfterTimeout:
 4294              	.LFB32:
2043:./Libraries/FreeRTOS/Source/queue.c **** 
2044:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2045:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2046:./Libraries/FreeRTOS/Source/queue.c **** 
2047:./Libraries/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2048:./Libraries/FreeRTOS/Source/queue.c **** 
2049:./Libraries/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2050:./Libraries/FreeRTOS/Source/queue.c **** 	{
 4295              		.loc 1 2050 2
 4296              		.cfi_startproc
 4297              		@ args = 0, pretend = 0, frame = 16
 4298              		@ frame_needed = 1, uses_anonymous_args = 0
 4299              		@ link register save eliminated.
 4300 0000 80B4     		push	{r7}
 4301              	.LCFI145:
 4302              		.cfi_def_cfa_offset 4
 4303              		.cfi_offset 7, -4
 4304 0002 85B0     		sub	sp, sp, #20
 4305              	.LCFI146:
 4306              		.cfi_def_cfa_offset 24
 4307 0004 00AF     		add	r7, sp, #0
 4308              	.LCFI147:
 4309              		.cfi_def_cfa_register 7
 4310 0006 7860     		str	r0, [r7, #4]
2051:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2052:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 117


2053:./Libraries/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2054:./Libraries/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2055:./Libraries/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2056:./Libraries/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2057:./Libraries/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2058:./Libraries/FreeRTOS/Source/queue.c **** 		mutex. */
2059:./Libraries/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 4311              		.loc 1 2059 7
 4312 0008 7B68     		ldr	r3, [r7, #4]
 4313 000a 5B6A     		ldr	r3, [r3, #36]
 4314              		.loc 1 2059 5
 4315 000c 002B     		cmp	r3, #0
 4316 000e 06D0     		beq	.L280
2060:./Libraries/FreeRTOS/Source/queue.c **** 		{
2061:./Libraries/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
 4317              		.loc 1 2061 93
 4318 0010 7B68     		ldr	r3, [r7, #4]
 4319 0012 1B6B     		ldr	r3, [r3, #48]
 4320 0014 1B68     		ldr	r3, [r3]
 4321              		.loc 1 2061 36
 4322 0016 C3F13803 		rsb	r3, r3, #56
 4323 001a FB60     		str	r3, [r7, #12]
 4324 001c 01E0     		b	.L281
 4325              	.L280:
2062:./Libraries/FreeRTOS/Source/queue.c **** 		}
2063:./Libraries/FreeRTOS/Source/queue.c **** 		else
2064:./Libraries/FreeRTOS/Source/queue.c **** 		{
2065:./Libraries/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 4326              		.loc 1 2065 36
 4327 001e 0023     		movs	r3, #0
 4328 0020 FB60     		str	r3, [r7, #12]
 4329              	.L281:
2066:./Libraries/FreeRTOS/Source/queue.c **** 		}
2067:./Libraries/FreeRTOS/Source/queue.c **** 
2068:./Libraries/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
 4330              		.loc 1 2068 10
 4331 0022 FB68     		ldr	r3, [r7, #12]
2069:./Libraries/FreeRTOS/Source/queue.c **** 	}
 4332              		.loc 1 2069 2
 4333 0024 1846     		mov	r0, r3
 4334 0026 1437     		adds	r7, r7, #20
 4335              	.LCFI148:
 4336              		.cfi_def_cfa_offset 4
 4337 0028 BD46     		mov	sp, r7
 4338              	.LCFI149:
 4339              		.cfi_def_cfa_register 13
 4340              		@ sp needed
 4341 002a 5DF8047B 		ldr	r7, [sp], #4
 4342              	.LCFI150:
 4343              		.cfi_restore 7
 4344              		.cfi_def_cfa_offset 0
 4345 002e 7047     		bx	lr
 4346              		.cfi_endproc
 4347              	.LFE32:
 4349              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 4350              		.align	1
 4351              		.syntax unified
ARM GAS  /tmp/ccv5E8P7.s 			page 118


 4352              		.thumb
 4353              		.thumb_func
 4354              		.fpu fpv5-d16
 4356              	prvCopyDataToQueue:
 4357              	.LFB33:
2070:./Libraries/FreeRTOS/Source/queue.c **** 
2071:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2072:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2073:./Libraries/FreeRTOS/Source/queue.c **** 
2074:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2075:./Libraries/FreeRTOS/Source/queue.c **** {
 4358              		.loc 1 2075 1
 4359              		.cfi_startproc
 4360              		@ args = 0, pretend = 0, frame = 24
 4361              		@ frame_needed = 1, uses_anonymous_args = 0
 4362 0000 80B5     		push	{r7, lr}
 4363              	.LCFI151:
 4364              		.cfi_def_cfa_offset 8
 4365              		.cfi_offset 7, -8
 4366              		.cfi_offset 14, -4
 4367 0002 86B0     		sub	sp, sp, #24
 4368              	.LCFI152:
 4369              		.cfi_def_cfa_offset 32
 4370 0004 00AF     		add	r7, sp, #0
 4371              	.LCFI153:
 4372              		.cfi_def_cfa_register 7
 4373 0006 F860     		str	r0, [r7, #12]
 4374 0008 B960     		str	r1, [r7, #8]
 4375 000a 7A60     		str	r2, [r7, #4]
2076:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 4376              		.loc 1 2076 12
 4377 000c 0023     		movs	r3, #0
 4378 000e 7B61     		str	r3, [r7, #20]
2077:./Libraries/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2078:./Libraries/FreeRTOS/Source/queue.c **** 
2079:./Libraries/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2080:./Libraries/FreeRTOS/Source/queue.c **** 
2081:./Libraries/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 4379              		.loc 1 2081 20
 4380 0010 FB68     		ldr	r3, [r7, #12]
 4381 0012 9B6B     		ldr	r3, [r3, #56]
 4382 0014 3B61     		str	r3, [r7, #16]
2082:./Libraries/FreeRTOS/Source/queue.c **** 
2083:./Libraries/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 4383              		.loc 1 2083 13
 4384 0016 FB68     		ldr	r3, [r7, #12]
 4385 0018 1B6C     		ldr	r3, [r3, #64]
 4386              		.loc 1 2083 4
 4387 001a 002B     		cmp	r3, #0
 4388 001c 0DD1     		bne	.L284
2084:./Libraries/FreeRTOS/Source/queue.c **** 	{
2085:./Libraries/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2086:./Libraries/FreeRTOS/Source/queue.c **** 		{
2087:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 4389              		.loc 1 2087 15
 4390 001e FB68     		ldr	r3, [r7, #12]
 4391 0020 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccv5E8P7.s 			page 119


 4392              		.loc 1 2087 6
 4393 0022 002B     		cmp	r3, #0
 4394 0024 4DD1     		bne	.L285
2088:./Libraries/FreeRTOS/Source/queue.c **** 			{
2089:./Libraries/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2090:./Libraries/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 4395              		.loc 1 2090 15
 4396 0026 FB68     		ldr	r3, [r7, #12]
 4397 0028 9B68     		ldr	r3, [r3, #8]
 4398 002a 1846     		mov	r0, r3
 4399 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 4400 0030 7861     		str	r0, [r7, #20]
2091:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 4401              		.loc 1 2091 40
 4402 0032 FB68     		ldr	r3, [r7, #12]
 4403 0034 0022     		movs	r2, #0
 4404 0036 9A60     		str	r2, [r3, #8]
 4405 0038 43E0     		b	.L285
 4406              	.L284:
2092:./Libraries/FreeRTOS/Source/queue.c **** 			}
2093:./Libraries/FreeRTOS/Source/queue.c **** 			else
2094:./Libraries/FreeRTOS/Source/queue.c **** 			{
2095:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2096:./Libraries/FreeRTOS/Source/queue.c **** 			}
2097:./Libraries/FreeRTOS/Source/queue.c **** 		}
2098:./Libraries/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2099:./Libraries/FreeRTOS/Source/queue.c **** 	}
2100:./Libraries/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 4407              		.loc 1 2100 9
 4408 003a 7B68     		ldr	r3, [r7, #4]
 4409 003c 002B     		cmp	r3, #0
 4410 003e 19D1     		bne	.L286
2101:./Libraries/FreeRTOS/Source/queue.c **** 	{
2102:./Libraries/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 4411              		.loc 1 2102 38
 4412 0040 FB68     		ldr	r3, [r7, #12]
 4413 0042 5868     		ldr	r0, [r3, #4]
 4414              		.loc 1 2102 84
 4415 0044 FB68     		ldr	r3, [r7, #12]
 4416 0046 1B6C     		ldr	r3, [r3, #64]
 4417              		.loc 1 2102 12
 4418 0048 1A46     		mov	r2, r3
 4419 004a B968     		ldr	r1, [r7, #8]
 4420 004c FFF7FEFF 		bl	memcpy
2103:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 4421              		.loc 1 2103 22
 4422 0050 FB68     		ldr	r3, [r7, #12]
 4423 0052 5A68     		ldr	r2, [r3, #4]
 4424              		.loc 1 2103 32
 4425 0054 FB68     		ldr	r3, [r7, #12]
 4426 0056 1B6C     		ldr	r3, [r3, #64]
 4427              		.loc 1 2103 22
 4428 0058 1A44     		add	r2, r2, r3
 4429 005a FB68     		ldr	r3, [r7, #12]
 4430 005c 5A60     		str	r2, [r3, #4]
2104:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 4431              		.loc 1 2104 14
ARM GAS  /tmp/ccv5E8P7.s 			page 120


 4432 005e FB68     		ldr	r3, [r7, #12]
 4433 0060 5A68     		ldr	r2, [r3, #4]
 4434              		.loc 1 2104 46
 4435 0062 FB68     		ldr	r3, [r7, #12]
 4436 0064 9B68     		ldr	r3, [r3, #8]
 4437              		.loc 1 2104 5
 4438 0066 9A42     		cmp	r2, r3
 4439 0068 2BD3     		bcc	.L285
2105:./Libraries/FreeRTOS/Source/queue.c **** 		{
2106:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 4440              		.loc 1 2106 32
 4441 006a FB68     		ldr	r3, [r7, #12]
 4442 006c 1A68     		ldr	r2, [r3]
 4443              		.loc 1 2106 23
 4444 006e FB68     		ldr	r3, [r7, #12]
 4445 0070 5A60     		str	r2, [r3, #4]
 4446 0072 26E0     		b	.L285
 4447              	.L286:
2107:./Libraries/FreeRTOS/Source/queue.c **** 		}
2108:./Libraries/FreeRTOS/Source/queue.c **** 		else
2109:./Libraries/FreeRTOS/Source/queue.c **** 		{
2110:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2111:./Libraries/FreeRTOS/Source/queue.c **** 		}
2112:./Libraries/FreeRTOS/Source/queue.c **** 	}
2113:./Libraries/FreeRTOS/Source/queue.c **** 	else
2114:./Libraries/FreeRTOS/Source/queue.c **** 	{
2115:./Libraries/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
 4448              		.loc 1 2115 48
 4449 0074 FB68     		ldr	r3, [r7, #12]
 4450 0076 D868     		ldr	r0, [r3, #12]
 4451              		.loc 1 2115 94
 4452 0078 FB68     		ldr	r3, [r7, #12]
 4453 007a 1B6C     		ldr	r3, [r3, #64]
 4454              		.loc 1 2115 12
 4455 007c 1A46     		mov	r2, r3
 4456 007e B968     		ldr	r1, [r7, #8]
 4457 0080 FFF7FEFF 		bl	memcpy
2116:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 4458              		.loc 1 2116 32
 4459 0084 FB68     		ldr	r3, [r7, #12]
 4460 0086 DA68     		ldr	r2, [r3, #12]
 4461              		.loc 1 2116 42
 4462 0088 FB68     		ldr	r3, [r7, #12]
 4463 008a 1B6C     		ldr	r3, [r3, #64]
 4464              		.loc 1 2116 32
 4465 008c 5B42     		rsbs	r3, r3, #0
 4466 008e 1A44     		add	r2, r2, r3
 4467 0090 FB68     		ldr	r3, [r7, #12]
 4468 0092 DA60     		str	r2, [r3, #12]
2117:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 4469              		.loc 1 2117 24
 4470 0094 FB68     		ldr	r3, [r7, #12]
 4471 0096 DA68     		ldr	r2, [r3, #12]
 4472              		.loc 1 2117 45
 4473 0098 FB68     		ldr	r3, [r7, #12]
 4474 009a 1B68     		ldr	r3, [r3]
 4475              		.loc 1 2117 5
ARM GAS  /tmp/ccv5E8P7.s 			page 121


 4476 009c 9A42     		cmp	r2, r3
 4477 009e 07D2     		bcs	.L287
2118:./Libraries/FreeRTOS/Source/queue.c **** 		{
2119:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 4478              		.loc 1 2119 54
 4479 00a0 FB68     		ldr	r3, [r7, #12]
 4480 00a2 9A68     		ldr	r2, [r3, #8]
 4481              		.loc 1 2119 71
 4482 00a4 FB68     		ldr	r3, [r7, #12]
 4483 00a6 1B6C     		ldr	r3, [r3, #64]
 4484              		.loc 1 2119 62
 4485 00a8 5B42     		rsbs	r3, r3, #0
 4486 00aa 1A44     		add	r2, r2, r3
 4487              		.loc 1 2119 33
 4488 00ac FB68     		ldr	r3, [r7, #12]
 4489 00ae DA60     		str	r2, [r3, #12]
 4490              	.L287:
2120:./Libraries/FreeRTOS/Source/queue.c **** 		}
2121:./Libraries/FreeRTOS/Source/queue.c **** 		else
2122:./Libraries/FreeRTOS/Source/queue.c **** 		{
2123:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:./Libraries/FreeRTOS/Source/queue.c **** 		}
2125:./Libraries/FreeRTOS/Source/queue.c **** 
2126:./Libraries/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 4491              		.loc 1 2126 5
 4492 00b0 7B68     		ldr	r3, [r7, #4]
 4493 00b2 022B     		cmp	r3, #2
 4494 00b4 05D1     		bne	.L285
2127:./Libraries/FreeRTOS/Source/queue.c **** 		{
2128:./Libraries/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 4495              		.loc 1 2128 6
 4496 00b6 3B69     		ldr	r3, [r7, #16]
 4497 00b8 002B     		cmp	r3, #0
 4498 00ba 02D0     		beq	.L285
2129:./Libraries/FreeRTOS/Source/queue.c **** 			{
2130:./Libraries/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2131:./Libraries/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2132:./Libraries/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2133:./Libraries/FreeRTOS/Source/queue.c **** 				correct. */
2134:./Libraries/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
 4499              		.loc 1 2134 5
 4500 00bc 3B69     		ldr	r3, [r7, #16]
 4501 00be 013B     		subs	r3, r3, #1
 4502 00c0 3B61     		str	r3, [r7, #16]
 4503              	.L285:
2135:./Libraries/FreeRTOS/Source/queue.c **** 			}
2136:./Libraries/FreeRTOS/Source/queue.c **** 			else
2137:./Libraries/FreeRTOS/Source/queue.c **** 			{
2138:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2139:./Libraries/FreeRTOS/Source/queue.c **** 			}
2140:./Libraries/FreeRTOS/Source/queue.c **** 		}
2141:./Libraries/FreeRTOS/Source/queue.c **** 		else
2142:./Libraries/FreeRTOS/Source/queue.c **** 		{
2143:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2144:./Libraries/FreeRTOS/Source/queue.c **** 		}
2145:./Libraries/FreeRTOS/Source/queue.c **** 	}
2146:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 122


2147:./Libraries/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 4504              		.loc 1 2147 49
 4505 00c2 3B69     		ldr	r3, [r7, #16]
 4506 00c4 5A1C     		adds	r2, r3, #1
 4507              		.loc 1 2147 29
 4508 00c6 FB68     		ldr	r3, [r7, #12]
 4509 00c8 9A63     		str	r2, [r3, #56]
2148:./Libraries/FreeRTOS/Source/queue.c **** 
2149:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 4510              		.loc 1 2149 9
 4511 00ca 7B69     		ldr	r3, [r7, #20]
2150:./Libraries/FreeRTOS/Source/queue.c **** }
 4512              		.loc 1 2150 1
 4513 00cc 1846     		mov	r0, r3
 4514 00ce 1837     		adds	r7, r7, #24
 4515              	.LCFI154:
 4516              		.cfi_def_cfa_offset 8
 4517 00d0 BD46     		mov	sp, r7
 4518              	.LCFI155:
 4519              		.cfi_def_cfa_register 13
 4520              		@ sp needed
 4521 00d2 80BD     		pop	{r7, pc}
 4522              		.cfi_endproc
 4523              	.LFE33:
 4525              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 4526              		.align	1
 4527              		.syntax unified
 4528              		.thumb
 4529              		.thumb_func
 4530              		.fpu fpv5-d16
 4532              	prvCopyDataFromQueue:
 4533              	.LFB34:
2151:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2152:./Libraries/FreeRTOS/Source/queue.c **** 
2153:./Libraries/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2154:./Libraries/FreeRTOS/Source/queue.c **** {
 4534              		.loc 1 2154 1
 4535              		.cfi_startproc
 4536              		@ args = 0, pretend = 0, frame = 8
 4537              		@ frame_needed = 1, uses_anonymous_args = 0
 4538 0000 80B5     		push	{r7, lr}
 4539              	.LCFI156:
 4540              		.cfi_def_cfa_offset 8
 4541              		.cfi_offset 7, -8
 4542              		.cfi_offset 14, -4
 4543 0002 82B0     		sub	sp, sp, #8
 4544              	.LCFI157:
 4545              		.cfi_def_cfa_offset 16
 4546 0004 00AF     		add	r7, sp, #0
 4547              	.LCFI158:
 4548              		.cfi_def_cfa_register 7
 4549 0006 7860     		str	r0, [r7, #4]
 4550 0008 3960     		str	r1, [r7]
2155:./Libraries/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 4551              		.loc 1 2155 13
 4552 000a 7B68     		ldr	r3, [r7, #4]
 4553 000c 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccv5E8P7.s 			page 123


 4554              		.loc 1 2155 4
 4555 000e 002B     		cmp	r3, #0
 4556 0010 18D0     		beq	.L292
2156:./Libraries/FreeRTOS/Source/queue.c **** 	{
2157:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
 4557              		.loc 1 2157 32
 4558 0012 7B68     		ldr	r3, [r7, #4]
 4559 0014 DA68     		ldr	r2, [r3, #12]
 4560              		.loc 1 2157 42
 4561 0016 7B68     		ldr	r3, [r7, #4]
 4562 0018 1B6C     		ldr	r3, [r3, #64]
 4563              		.loc 1 2157 32
 4564 001a 1A44     		add	r2, r2, r3
 4565 001c 7B68     		ldr	r3, [r7, #4]
 4566 001e DA60     		str	r2, [r3, #12]
2158:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 4567              		.loc 1 2158 24
 4568 0020 7B68     		ldr	r3, [r7, #4]
 4569 0022 DA68     		ldr	r2, [r3, #12]
 4570              		.loc 1 2158 56
 4571 0024 7B68     		ldr	r3, [r7, #4]
 4572 0026 9B68     		ldr	r3, [r3, #8]
 4573              		.loc 1 2158 5
 4574 0028 9A42     		cmp	r2, r3
 4575 002a 03D3     		bcc	.L291
2159:./Libraries/FreeRTOS/Source/queue.c **** 		{
2160:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 4576              		.loc 1 2160 42
 4577 002c 7B68     		ldr	r3, [r7, #4]
 4578 002e 1A68     		ldr	r2, [r3]
 4579              		.loc 1 2160 33
 4580 0030 7B68     		ldr	r3, [r7, #4]
 4581 0032 DA60     		str	r2, [r3, #12]
 4582              	.L291:
2161:./Libraries/FreeRTOS/Source/queue.c **** 		}
2162:./Libraries/FreeRTOS/Source/queue.c **** 		else
2163:./Libraries/FreeRTOS/Source/queue.c **** 		{
2164:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2165:./Libraries/FreeRTOS/Source/queue.c **** 		}
2166:./Libraries/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
 4583              		.loc 1 2166 69
 4584 0034 7B68     		ldr	r3, [r7, #4]
 4585 0036 D968     		ldr	r1, [r3, #12]
 4586              		.loc 1 2166 100
 4587 0038 7B68     		ldr	r3, [r7, #4]
 4588 003a 1B6C     		ldr	r3, [r3, #64]
 4589              		.loc 1 2166 12
 4590 003c 1A46     		mov	r2, r3
 4591 003e 3868     		ldr	r0, [r7]
 4592 0040 FFF7FEFF 		bl	memcpy
 4593              	.L292:
2167:./Libraries/FreeRTOS/Source/queue.c **** 	}
2168:./Libraries/FreeRTOS/Source/queue.c **** }
 4594              		.loc 1 2168 1
 4595 0044 00BF     		nop
 4596 0046 0837     		adds	r7, r7, #8
 4597              	.LCFI159:
ARM GAS  /tmp/ccv5E8P7.s 			page 124


 4598              		.cfi_def_cfa_offset 8
 4599 0048 BD46     		mov	sp, r7
 4600              	.LCFI160:
 4601              		.cfi_def_cfa_register 13
 4602              		@ sp needed
 4603 004a 80BD     		pop	{r7, pc}
 4604              		.cfi_endproc
 4605              	.LFE34:
 4607              		.section	.text.prvUnlockQueue,"ax",%progbits
 4608              		.align	1
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu fpv5-d16
 4614              	prvUnlockQueue:
 4615              	.LFB35:
2169:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2170:./Libraries/FreeRTOS/Source/queue.c **** 
2171:./Libraries/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2172:./Libraries/FreeRTOS/Source/queue.c **** {
 4616              		.loc 1 2172 1
 4617              		.cfi_startproc
 4618              		@ args = 0, pretend = 0, frame = 16
 4619              		@ frame_needed = 1, uses_anonymous_args = 0
 4620 0000 80B5     		push	{r7, lr}
 4621              	.LCFI161:
 4622              		.cfi_def_cfa_offset 8
 4623              		.cfi_offset 7, -8
 4624              		.cfi_offset 14, -4
 4625 0002 84B0     		sub	sp, sp, #16
 4626              	.LCFI162:
 4627              		.cfi_def_cfa_offset 24
 4628 0004 00AF     		add	r7, sp, #0
 4629              	.LCFI163:
 4630              		.cfi_def_cfa_register 7
 4631 0006 7860     		str	r0, [r7, #4]
2173:./Libraries/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2174:./Libraries/FreeRTOS/Source/queue.c **** 
2175:./Libraries/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2176:./Libraries/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2177:./Libraries/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2178:./Libraries/FreeRTOS/Source/queue.c **** 	updated. */
2179:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 4632              		.loc 1 2179 2
 4633 0008 FFF7FEFF 		bl	vPortEnterCritical
 4634              	.LBB230:
2180:./Libraries/FreeRTOS/Source/queue.c **** 	{
2181:./Libraries/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 4635              		.loc 1 2181 10
 4636 000c 7B68     		ldr	r3, [r7, #4]
 4637 000e 93F84530 		ldrb	r3, [r3, #69]
 4638 0012 FB73     		strb	r3, [r7, #15]
2182:./Libraries/FreeRTOS/Source/queue.c **** 
2183:./Libraries/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2184:./Libraries/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 4639              		.loc 1 2184 8
 4640 0014 11E0     		b	.L294
ARM GAS  /tmp/ccv5E8P7.s 			page 125


 4641              	.L298:
2185:./Libraries/FreeRTOS/Source/queue.c **** 		{
2186:./Libraries/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2187:./Libraries/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2188:./Libraries/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2189:./Libraries/FreeRTOS/Source/queue.c **** 			{
2190:./Libraries/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2191:./Libraries/FreeRTOS/Source/queue.c **** 				{
2192:./Libraries/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2193:./Libraries/FreeRTOS/Source/queue.c **** 					{
2194:./Libraries/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2195:./Libraries/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2196:./Libraries/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2197:./Libraries/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2198:./Libraries/FreeRTOS/Source/queue.c **** 					}
2199:./Libraries/FreeRTOS/Source/queue.c **** 					else
2200:./Libraries/FreeRTOS/Source/queue.c **** 					{
2201:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2202:./Libraries/FreeRTOS/Source/queue.c **** 					}
2203:./Libraries/FreeRTOS/Source/queue.c **** 				}
2204:./Libraries/FreeRTOS/Source/queue.c **** 				else
2205:./Libraries/FreeRTOS/Source/queue.c **** 				{
2206:./Libraries/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2207:./Libraries/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2208:./Libraries/FreeRTOS/Source/queue.c **** 					suspended. */
2209:./Libraries/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2210:./Libraries/FreeRTOS/Source/queue.c **** 					{
2211:./Libraries/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2212:./Libraries/FreeRTOS/Source/queue.c **** 						{
2213:./Libraries/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2214:./Libraries/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2215:./Libraries/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2216:./Libraries/FreeRTOS/Source/queue.c **** 						}
2217:./Libraries/FreeRTOS/Source/queue.c **** 						else
2218:./Libraries/FreeRTOS/Source/queue.c **** 						{
2219:./Libraries/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2220:./Libraries/FreeRTOS/Source/queue.c **** 						}
2221:./Libraries/FreeRTOS/Source/queue.c **** 					}
2222:./Libraries/FreeRTOS/Source/queue.c **** 					else
2223:./Libraries/FreeRTOS/Source/queue.c **** 					{
2224:./Libraries/FreeRTOS/Source/queue.c **** 						break;
2225:./Libraries/FreeRTOS/Source/queue.c **** 					}
2226:./Libraries/FreeRTOS/Source/queue.c **** 				}
2227:./Libraries/FreeRTOS/Source/queue.c **** 			}
2228:./Libraries/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2229:./Libraries/FreeRTOS/Source/queue.c **** 			{
2230:./Libraries/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2231:./Libraries/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2232:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 4642              		.loc 1 2232 9
 4643 0016 7B68     		ldr	r3, [r7, #4]
 4644 0018 5B6A     		ldr	r3, [r3, #36]
 4645              		.loc 1 2232 7
 4646 001a 002B     		cmp	r3, #0
 4647 001c 12D0     		beq	.L304
2233:./Libraries/FreeRTOS/Source/queue.c **** 				{
2234:./Libraries/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  /tmp/ccv5E8P7.s 			page 126


 4648              		.loc 1 2234 36
 4649 001e 7B68     		ldr	r3, [r7, #4]
 4650 0020 2433     		adds	r3, r3, #36
 4651              		.loc 1 2234 10
 4652 0022 1846     		mov	r0, r3
 4653 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4654 0028 0346     		mov	r3, r0
 4655              		.loc 1 2234 8
 4656 002a 002B     		cmp	r3, #0
 4657 002c 01D0     		beq	.L296
2235:./Libraries/FreeRTOS/Source/queue.c **** 					{
2236:./Libraries/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2237:./Libraries/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2238:./Libraries/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
 4658              		.loc 1 2238 7
 4659 002e FFF7FEFF 		bl	vTaskMissedYield
 4660              	.L296:
2239:./Libraries/FreeRTOS/Source/queue.c **** 					}
2240:./Libraries/FreeRTOS/Source/queue.c **** 					else
2241:./Libraries/FreeRTOS/Source/queue.c **** 					{
2242:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:./Libraries/FreeRTOS/Source/queue.c **** 					}
2244:./Libraries/FreeRTOS/Source/queue.c **** 				}
2245:./Libraries/FreeRTOS/Source/queue.c **** 				else
2246:./Libraries/FreeRTOS/Source/queue.c **** 				{
2247:./Libraries/FreeRTOS/Source/queue.c **** 					break;
2248:./Libraries/FreeRTOS/Source/queue.c **** 				}
2249:./Libraries/FreeRTOS/Source/queue.c **** 			}
2250:./Libraries/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2251:./Libraries/FreeRTOS/Source/queue.c **** 
2252:./Libraries/FreeRTOS/Source/queue.c **** 			--cTxLock;
 4661              		.loc 1 2252 4
 4662 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4663 0034 013B     		subs	r3, r3, #1
 4664 0036 DBB2     		uxtb	r3, r3
 4665 0038 FB73     		strb	r3, [r7, #15]
 4666              	.L294:
2184:./Libraries/FreeRTOS/Source/queue.c **** 		{
 4667              		.loc 1 2184 8
 4668 003a 97F90F30 		ldrsb	r3, [r7, #15]
 4669 003e 002B     		cmp	r3, #0
 4670 0040 E9DC     		bgt	.L298
 4671 0042 00E0     		b	.L297
 4672              	.L304:
2247:./Libraries/FreeRTOS/Source/queue.c **** 				}
 4673              		.loc 1 2247 6
 4674 0044 00BF     		nop
 4675              	.L297:
2253:./Libraries/FreeRTOS/Source/queue.c **** 		}
2254:./Libraries/FreeRTOS/Source/queue.c **** 
2255:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 4676              		.loc 1 2255 20
 4677 0046 7B68     		ldr	r3, [r7, #4]
 4678 0048 FF22     		movs	r2, #255
 4679 004a 83F84520 		strb	r2, [r3, #69]
 4680              	.LBE230:
2256:./Libraries/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccv5E8P7.s 			page 127


2257:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 4681              		.loc 1 2257 2
 4682 004e FFF7FEFF 		bl	vPortExitCritical
2258:./Libraries/FreeRTOS/Source/queue.c **** 
2259:./Libraries/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2260:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 4683              		.loc 1 2260 2
 4684 0052 FFF7FEFF 		bl	vPortEnterCritical
 4685              	.LBB231:
2261:./Libraries/FreeRTOS/Source/queue.c **** 	{
2262:./Libraries/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 4686              		.loc 1 2262 10
 4687 0056 7B68     		ldr	r3, [r7, #4]
 4688 0058 93F84430 		ldrb	r3, [r3, #68]
 4689 005c BB73     		strb	r3, [r7, #14]
2263:./Libraries/FreeRTOS/Source/queue.c **** 
2264:./Libraries/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 4690              		.loc 1 2264 8
 4691 005e 11E0     		b	.L299
 4692              	.L303:
2265:./Libraries/FreeRTOS/Source/queue.c **** 		{
2266:./Libraries/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4693              		.loc 1 2266 8
 4694 0060 7B68     		ldr	r3, [r7, #4]
 4695 0062 1B69     		ldr	r3, [r3, #16]
 4696              		.loc 1 2266 6
 4697 0064 002B     		cmp	r3, #0
 4698 0066 12D0     		beq	.L305
2267:./Libraries/FreeRTOS/Source/queue.c **** 			{
2268:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4699              		.loc 1 2268 35
 4700 0068 7B68     		ldr	r3, [r7, #4]
 4701 006a 1033     		adds	r3, r3, #16
 4702              		.loc 1 2268 9
 4703 006c 1846     		mov	r0, r3
 4704 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 4705 0072 0346     		mov	r3, r0
 4706              		.loc 1 2268 7
 4707 0074 002B     		cmp	r3, #0
 4708 0076 01D0     		beq	.L301
2269:./Libraries/FreeRTOS/Source/queue.c **** 				{
2270:./Libraries/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
 4709              		.loc 1 2270 6
 4710 0078 FFF7FEFF 		bl	vTaskMissedYield
 4711              	.L301:
2271:./Libraries/FreeRTOS/Source/queue.c **** 				}
2272:./Libraries/FreeRTOS/Source/queue.c **** 				else
2273:./Libraries/FreeRTOS/Source/queue.c **** 				{
2274:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2275:./Libraries/FreeRTOS/Source/queue.c **** 				}
2276:./Libraries/FreeRTOS/Source/queue.c **** 
2277:./Libraries/FreeRTOS/Source/queue.c **** 				--cRxLock;
 4712              		.loc 1 2277 5
 4713 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4714 007e 013B     		subs	r3, r3, #1
 4715 0080 DBB2     		uxtb	r3, r3
 4716 0082 BB73     		strb	r3, [r7, #14]
ARM GAS  /tmp/ccv5E8P7.s 			page 128


 4717              	.L299:
2264:./Libraries/FreeRTOS/Source/queue.c **** 		{
 4718              		.loc 1 2264 8
 4719 0084 97F90E30 		ldrsb	r3, [r7, #14]
 4720 0088 002B     		cmp	r3, #0
 4721 008a E9DC     		bgt	.L303
 4722 008c 00E0     		b	.L302
 4723              	.L305:
2278:./Libraries/FreeRTOS/Source/queue.c **** 			}
2279:./Libraries/FreeRTOS/Source/queue.c **** 			else
2280:./Libraries/FreeRTOS/Source/queue.c **** 			{
2281:./Libraries/FreeRTOS/Source/queue.c **** 				break;
 4724              		.loc 1 2281 5
 4725 008e 00BF     		nop
 4726              	.L302:
2282:./Libraries/FreeRTOS/Source/queue.c **** 			}
2283:./Libraries/FreeRTOS/Source/queue.c **** 		}
2284:./Libraries/FreeRTOS/Source/queue.c **** 
2285:./Libraries/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 4727              		.loc 1 2285 20
 4728 0090 7B68     		ldr	r3, [r7, #4]
 4729 0092 FF22     		movs	r2, #255
 4730 0094 83F84420 		strb	r2, [r3, #68]
 4731              	.LBE231:
2286:./Libraries/FreeRTOS/Source/queue.c **** 	}
2287:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 4732              		.loc 1 2287 2
 4733 0098 FFF7FEFF 		bl	vPortExitCritical
2288:./Libraries/FreeRTOS/Source/queue.c **** }
 4734              		.loc 1 2288 1
 4735 009c 00BF     		nop
 4736 009e 1037     		adds	r7, r7, #16
 4737              	.LCFI164:
 4738              		.cfi_def_cfa_offset 8
 4739 00a0 BD46     		mov	sp, r7
 4740              	.LCFI165:
 4741              		.cfi_def_cfa_register 13
 4742              		@ sp needed
 4743 00a2 80BD     		pop	{r7, pc}
 4744              		.cfi_endproc
 4745              	.LFE35:
 4747              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 4748              		.align	1
 4749              		.syntax unified
 4750              		.thumb
 4751              		.thumb_func
 4752              		.fpu fpv5-d16
 4754              	prvIsQueueEmpty:
 4755              	.LFB36:
2289:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2290:./Libraries/FreeRTOS/Source/queue.c **** 
2291:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2292:./Libraries/FreeRTOS/Source/queue.c **** {
 4756              		.loc 1 2292 1
 4757              		.cfi_startproc
 4758              		@ args = 0, pretend = 0, frame = 16
 4759              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccv5E8P7.s 			page 129


 4760 0000 80B5     		push	{r7, lr}
 4761              	.LCFI166:
 4762              		.cfi_def_cfa_offset 8
 4763              		.cfi_offset 7, -8
 4764              		.cfi_offset 14, -4
 4765 0002 84B0     		sub	sp, sp, #16
 4766              	.LCFI167:
 4767              		.cfi_def_cfa_offset 24
 4768 0004 00AF     		add	r7, sp, #0
 4769              	.LCFI168:
 4770              		.cfi_def_cfa_register 7
 4771 0006 7860     		str	r0, [r7, #4]
2293:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2294:./Libraries/FreeRTOS/Source/queue.c **** 
2295:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 4772              		.loc 1 2295 2
 4773 0008 FFF7FEFF 		bl	vPortEnterCritical
2296:./Libraries/FreeRTOS/Source/queue.c **** 	{
2297:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 4774              		.loc 1 2297 14
 4775 000c 7B68     		ldr	r3, [r7, #4]
 4776 000e 9B6B     		ldr	r3, [r3, #56]
 4777              		.loc 1 2297 5
 4778 0010 002B     		cmp	r3, #0
 4779 0012 02D1     		bne	.L307
2298:./Libraries/FreeRTOS/Source/queue.c **** 		{
2299:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 4780              		.loc 1 2299 12
 4781 0014 0123     		movs	r3, #1
 4782 0016 FB60     		str	r3, [r7, #12]
 4783 0018 01E0     		b	.L308
 4784              	.L307:
2300:./Libraries/FreeRTOS/Source/queue.c **** 		}
2301:./Libraries/FreeRTOS/Source/queue.c **** 		else
2302:./Libraries/FreeRTOS/Source/queue.c **** 		{
2303:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 4785              		.loc 1 2303 12
 4786 001a 0023     		movs	r3, #0
 4787 001c FB60     		str	r3, [r7, #12]
 4788              	.L308:
2304:./Libraries/FreeRTOS/Source/queue.c **** 		}
2305:./Libraries/FreeRTOS/Source/queue.c **** 	}
2306:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 4789              		.loc 1 2306 2
 4790 001e FFF7FEFF 		bl	vPortExitCritical
2307:./Libraries/FreeRTOS/Source/queue.c **** 
2308:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 4791              		.loc 1 2308 9
 4792 0022 FB68     		ldr	r3, [r7, #12]
2309:./Libraries/FreeRTOS/Source/queue.c **** }
 4793              		.loc 1 2309 1
 4794 0024 1846     		mov	r0, r3
 4795 0026 1037     		adds	r7, r7, #16
 4796              	.LCFI169:
 4797              		.cfi_def_cfa_offset 8
 4798 0028 BD46     		mov	sp, r7
 4799              	.LCFI170:
ARM GAS  /tmp/ccv5E8P7.s 			page 130


 4800              		.cfi_def_cfa_register 13
 4801              		@ sp needed
 4802 002a 80BD     		pop	{r7, pc}
 4803              		.cfi_endproc
 4804              	.LFE36:
 4806              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4807              		.align	1
 4808              		.global	xQueueIsQueueEmptyFromISR
 4809              		.syntax unified
 4810              		.thumb
 4811              		.thumb_func
 4812              		.fpu fpv5-d16
 4814              	xQueueIsQueueEmptyFromISR:
 4815              	.LFB37:
2310:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2311:./Libraries/FreeRTOS/Source/queue.c **** 
2312:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2313:./Libraries/FreeRTOS/Source/queue.c **** {
 4816              		.loc 1 2313 1
 4817              		.cfi_startproc
 4818              		@ args = 0, pretend = 0, frame = 24
 4819              		@ frame_needed = 1, uses_anonymous_args = 0
 4820              		@ link register save eliminated.
 4821 0000 80B4     		push	{r7}
 4822              	.LCFI171:
 4823              		.cfi_def_cfa_offset 4
 4824              		.cfi_offset 7, -4
 4825 0002 87B0     		sub	sp, sp, #28
 4826              	.LCFI172:
 4827              		.cfi_def_cfa_offset 32
 4828 0004 00AF     		add	r7, sp, #0
 4829              	.LCFI173:
 4830              		.cfi_def_cfa_register 7
 4831 0006 7860     		str	r0, [r7, #4]
2314:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2315:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 4832              		.loc 1 2315 17
 4833 0008 7B68     		ldr	r3, [r7, #4]
 4834 000a 3B61     		str	r3, [r7, #16]
2316:./Libraries/FreeRTOS/Source/queue.c **** 
2317:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 4835              		.loc 1 2317 2
 4836 000c 3B69     		ldr	r3, [r7, #16]
 4837 000e 002B     		cmp	r3, #0
 4838 0010 0AD1     		bne	.L311
 4839              	.LBB232:
 4840              	.LBB233:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4841              		.loc 2 195 2
 4842              		.syntax unified
 4843              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4844 0012 4FF05003 			mov r3, #80												
 4845 0016 83F31188 		msr basepri, r3											
 4846 001a BFF36F8F 		isb														
 4847 001e BFF34F8F 		dsb														
 4848              	
 4849              	@ 0 "" 2
ARM GAS  /tmp/ccv5E8P7.s 			page 131


 4850              		.thumb
 4851              		.syntax unified
 4852 0022 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4853              		.loc 2 203 1
 4854 0024 00BF     		nop
 4855              	.L312:
 4856              	.LBE233:
 4857              	.LBE232:
 4858              		.loc 1 2317 2 discriminator 1
 4859 0026 FEE7     		b	.L312
 4860              	.L311:
2318:./Libraries/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4861              		.loc 1 2318 13
 4862 0028 3B69     		ldr	r3, [r7, #16]
 4863 002a 9B6B     		ldr	r3, [r3, #56]
 4864              		.loc 1 2318 4
 4865 002c 002B     		cmp	r3, #0
 4866 002e 02D1     		bne	.L313
2319:./Libraries/FreeRTOS/Source/queue.c **** 	{
2320:./Libraries/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 4867              		.loc 1 2320 11
 4868 0030 0123     		movs	r3, #1
 4869 0032 7B61     		str	r3, [r7, #20]
 4870 0034 01E0     		b	.L314
 4871              	.L313:
2321:./Libraries/FreeRTOS/Source/queue.c **** 	}
2322:./Libraries/FreeRTOS/Source/queue.c **** 	else
2323:./Libraries/FreeRTOS/Source/queue.c **** 	{
2324:./Libraries/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 4872              		.loc 1 2324 11
 4873 0036 0023     		movs	r3, #0
 4874 0038 7B61     		str	r3, [r7, #20]
 4875              	.L314:
2325:./Libraries/FreeRTOS/Source/queue.c **** 	}
2326:./Libraries/FreeRTOS/Source/queue.c **** 
2327:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 4876              		.loc 1 2327 9
 4877 003a 7B69     		ldr	r3, [r7, #20]
2328:./Libraries/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4878              		.loc 1 2328 1
 4879 003c 1846     		mov	r0, r3
 4880 003e 1C37     		adds	r7, r7, #28
 4881              	.LCFI174:
 4882              		.cfi_def_cfa_offset 4
 4883 0040 BD46     		mov	sp, r7
 4884              	.LCFI175:
 4885              		.cfi_def_cfa_register 13
 4886              		@ sp needed
 4887 0042 5DF8047B 		ldr	r7, [sp], #4
 4888              	.LCFI176:
 4889              		.cfi_restore 7
 4890              		.cfi_def_cfa_offset 0
 4891 0046 7047     		bx	lr
 4892              		.cfi_endproc
 4893              	.LFE37:
 4895              		.section	.text.prvIsQueueFull,"ax",%progbits
ARM GAS  /tmp/ccv5E8P7.s 			page 132


 4896              		.align	1
 4897              		.syntax unified
 4898              		.thumb
 4899              		.thumb_func
 4900              		.fpu fpv5-d16
 4902              	prvIsQueueFull:
 4903              	.LFB38:
2329:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2330:./Libraries/FreeRTOS/Source/queue.c **** 
2331:./Libraries/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2332:./Libraries/FreeRTOS/Source/queue.c **** {
 4904              		.loc 1 2332 1
 4905              		.cfi_startproc
 4906              		@ args = 0, pretend = 0, frame = 16
 4907              		@ frame_needed = 1, uses_anonymous_args = 0
 4908 0000 80B5     		push	{r7, lr}
 4909              	.LCFI177:
 4910              		.cfi_def_cfa_offset 8
 4911              		.cfi_offset 7, -8
 4912              		.cfi_offset 14, -4
 4913 0002 84B0     		sub	sp, sp, #16
 4914              	.LCFI178:
 4915              		.cfi_def_cfa_offset 24
 4916 0004 00AF     		add	r7, sp, #0
 4917              	.LCFI179:
 4918              		.cfi_def_cfa_register 7
 4919 0006 7860     		str	r0, [r7, #4]
2333:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2334:./Libraries/FreeRTOS/Source/queue.c **** 
2335:./Libraries/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 4920              		.loc 1 2335 2
 4921 0008 FFF7FEFF 		bl	vPortEnterCritical
2336:./Libraries/FreeRTOS/Source/queue.c **** 	{
2337:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4922              		.loc 1 2337 14
 4923 000c 7B68     		ldr	r3, [r7, #4]
 4924 000e 9A6B     		ldr	r2, [r3, #56]
 4925              		.loc 1 2337 44
 4926 0010 7B68     		ldr	r3, [r7, #4]
 4927 0012 DB6B     		ldr	r3, [r3, #60]
 4928              		.loc 1 2337 5
 4929 0014 9A42     		cmp	r2, r3
 4930 0016 02D1     		bne	.L317
2338:./Libraries/FreeRTOS/Source/queue.c **** 		{
2339:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
 4931              		.loc 1 2339 12
 4932 0018 0123     		movs	r3, #1
 4933 001a FB60     		str	r3, [r7, #12]
 4934 001c 01E0     		b	.L318
 4935              	.L317:
2340:./Libraries/FreeRTOS/Source/queue.c **** 		}
2341:./Libraries/FreeRTOS/Source/queue.c **** 		else
2342:./Libraries/FreeRTOS/Source/queue.c **** 		{
2343:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
 4936              		.loc 1 2343 12
 4937 001e 0023     		movs	r3, #0
 4938 0020 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccv5E8P7.s 			page 133


 4939              	.L318:
2344:./Libraries/FreeRTOS/Source/queue.c **** 		}
2345:./Libraries/FreeRTOS/Source/queue.c **** 	}
2346:./Libraries/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 4940              		.loc 1 2346 2
 4941 0022 FFF7FEFF 		bl	vPortExitCritical
2347:./Libraries/FreeRTOS/Source/queue.c **** 
2348:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 4942              		.loc 1 2348 9
 4943 0026 FB68     		ldr	r3, [r7, #12]
2349:./Libraries/FreeRTOS/Source/queue.c **** }
 4944              		.loc 1 2349 1
 4945 0028 1846     		mov	r0, r3
 4946 002a 1037     		adds	r7, r7, #16
 4947              	.LCFI180:
 4948              		.cfi_def_cfa_offset 8
 4949 002c BD46     		mov	sp, r7
 4950              	.LCFI181:
 4951              		.cfi_def_cfa_register 13
 4952              		@ sp needed
 4953 002e 80BD     		pop	{r7, pc}
 4954              		.cfi_endproc
 4955              	.LFE38:
 4957              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 4958              		.align	1
 4959              		.global	xQueueIsQueueFullFromISR
 4960              		.syntax unified
 4961              		.thumb
 4962              		.thumb_func
 4963              		.fpu fpv5-d16
 4965              	xQueueIsQueueFullFromISR:
 4966              	.LFB39:
2350:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2351:./Libraries/FreeRTOS/Source/queue.c **** 
2352:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2353:./Libraries/FreeRTOS/Source/queue.c **** {
 4967              		.loc 1 2353 1
 4968              		.cfi_startproc
 4969              		@ args = 0, pretend = 0, frame = 24
 4970              		@ frame_needed = 1, uses_anonymous_args = 0
 4971              		@ link register save eliminated.
 4972 0000 80B4     		push	{r7}
 4973              	.LCFI182:
 4974              		.cfi_def_cfa_offset 4
 4975              		.cfi_offset 7, -4
 4976 0002 87B0     		sub	sp, sp, #28
 4977              	.LCFI183:
 4978              		.cfi_def_cfa_offset 32
 4979 0004 00AF     		add	r7, sp, #0
 4980              	.LCFI184:
 4981              		.cfi_def_cfa_register 7
 4982 0006 7860     		str	r0, [r7, #4]
2354:./Libraries/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2355:./Libraries/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 4983              		.loc 1 2355 17
 4984 0008 7B68     		ldr	r3, [r7, #4]
 4985 000a 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccv5E8P7.s 			page 134


2356:./Libraries/FreeRTOS/Source/queue.c **** 
2357:./Libraries/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 4986              		.loc 1 2357 2
 4987 000c 3B69     		ldr	r3, [r7, #16]
 4988 000e 002B     		cmp	r3, #0
 4989 0010 0AD1     		bne	.L321
 4990              	.LBB234:
 4991              	.LBB235:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4992              		.loc 2 195 2
 4993              		.syntax unified
 4994              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4995 0012 4FF05003 			mov r3, #80												
 4996 0016 83F31188 		msr basepri, r3											
 4997 001a BFF36F8F 		isb														
 4998 001e BFF34F8F 		dsb														
 4999              	
 5000              	@ 0 "" 2
 5001              		.thumb
 5002              		.syntax unified
 5003 0022 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5004              		.loc 2 203 1
 5005 0024 00BF     		nop
 5006              	.L322:
 5007              	.LBE235:
 5008              	.LBE234:
 5009              		.loc 1 2357 2 discriminator 1
 5010 0026 FEE7     		b	.L322
 5011              	.L321:
2358:./Libraries/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 5012              		.loc 1 2358 13
 5013 0028 3B69     		ldr	r3, [r7, #16]
 5014 002a 9A6B     		ldr	r2, [r3, #56]
 5015              		.loc 1 2358 43
 5016 002c 3B69     		ldr	r3, [r7, #16]
 5017 002e DB6B     		ldr	r3, [r3, #60]
 5018              		.loc 1 2358 4
 5019 0030 9A42     		cmp	r2, r3
 5020 0032 02D1     		bne	.L323
2359:./Libraries/FreeRTOS/Source/queue.c **** 	{
2360:./Libraries/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 5021              		.loc 1 2360 11
 5022 0034 0123     		movs	r3, #1
 5023 0036 7B61     		str	r3, [r7, #20]
 5024 0038 01E0     		b	.L324
 5025              	.L323:
2361:./Libraries/FreeRTOS/Source/queue.c **** 	}
2362:./Libraries/FreeRTOS/Source/queue.c **** 	else
2363:./Libraries/FreeRTOS/Source/queue.c **** 	{
2364:./Libraries/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 5026              		.loc 1 2364 11
 5027 003a 0023     		movs	r3, #0
 5028 003c 7B61     		str	r3, [r7, #20]
 5029              	.L324:
2365:./Libraries/FreeRTOS/Source/queue.c **** 	}
2366:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 135


2367:./Libraries/FreeRTOS/Source/queue.c **** 	return xReturn;
 5030              		.loc 1 2367 9
 5031 003e 7B69     		ldr	r3, [r7, #20]
2368:./Libraries/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 5032              		.loc 1 2368 1
 5033 0040 1846     		mov	r0, r3
 5034 0042 1C37     		adds	r7, r7, #28
 5035              	.LCFI185:
 5036              		.cfi_def_cfa_offset 4
 5037 0044 BD46     		mov	sp, r7
 5038              	.LCFI186:
 5039              		.cfi_def_cfa_register 13
 5040              		@ sp needed
 5041 0046 5DF8047B 		ldr	r7, [sp], #4
 5042              	.LCFI187:
 5043              		.cfi_restore 7
 5044              		.cfi_def_cfa_offset 0
 5045 004a 7047     		bx	lr
 5046              		.cfi_endproc
 5047              	.LFE39:
 5049              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 5050              		.align	1
 5051              		.global	vQueueAddToRegistry
 5052              		.syntax unified
 5053              		.thumb
 5054              		.thumb_func
 5055              		.fpu fpv5-d16
 5057              	vQueueAddToRegistry:
 5058              	.LFB40:
2369:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2370:./Libraries/FreeRTOS/Source/queue.c **** 
2371:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2372:./Libraries/FreeRTOS/Source/queue.c **** 
2373:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2374:./Libraries/FreeRTOS/Source/queue.c **** 	{
2375:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2376:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2377:./Libraries/FreeRTOS/Source/queue.c **** 
2378:./Libraries/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2379:./Libraries/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2380:./Libraries/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2381:./Libraries/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2382:./Libraries/FreeRTOS/Source/queue.c **** 		{
2383:./Libraries/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2384:./Libraries/FreeRTOS/Source/queue.c **** 			{
2385:./Libraries/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2386:./Libraries/FreeRTOS/Source/queue.c **** 				posting? */
2387:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2388:./Libraries/FreeRTOS/Source/queue.c **** 				{
2389:./Libraries/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2390:./Libraries/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2391:./Libraries/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2392:./Libraries/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2393:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2394:./Libraries/FreeRTOS/Source/queue.c **** 				}
2395:./Libraries/FreeRTOS/Source/queue.c **** 				else
2396:./Libraries/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccv5E8P7.s 			page 136


2397:./Libraries/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2398:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2399:./Libraries/FreeRTOS/Source/queue.c **** 				}
2400:./Libraries/FreeRTOS/Source/queue.c **** 			}
2401:./Libraries/FreeRTOS/Source/queue.c **** 		}
2402:./Libraries/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2403:./Libraries/FreeRTOS/Source/queue.c **** 
2404:./Libraries/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2405:./Libraries/FreeRTOS/Source/queue.c **** 		{
2406:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2407:./Libraries/FreeRTOS/Source/queue.c **** 			{
2408:./Libraries/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2409:./Libraries/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2410:./Libraries/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2411:./Libraries/FreeRTOS/Source/queue.c **** 
2412:./Libraries/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2413:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2414:./Libraries/FreeRTOS/Source/queue.c **** 				{
2415:./Libraries/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2416:./Libraries/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2417:./Libraries/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2418:./Libraries/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2419:./Libraries/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2420:./Libraries/FreeRTOS/Source/queue.c **** 					{
2421:./Libraries/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2422:./Libraries/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2423:./Libraries/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2424:./Libraries/FreeRTOS/Source/queue.c **** 					}
2425:./Libraries/FreeRTOS/Source/queue.c **** 					else
2426:./Libraries/FreeRTOS/Source/queue.c **** 					{
2427:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2428:./Libraries/FreeRTOS/Source/queue.c **** 					}
2429:./Libraries/FreeRTOS/Source/queue.c **** 				}
2430:./Libraries/FreeRTOS/Source/queue.c **** 				else
2431:./Libraries/FreeRTOS/Source/queue.c **** 				{
2432:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2433:./Libraries/FreeRTOS/Source/queue.c **** 				}
2434:./Libraries/FreeRTOS/Source/queue.c **** 			}
2435:./Libraries/FreeRTOS/Source/queue.c **** 			else
2436:./Libraries/FreeRTOS/Source/queue.c **** 			{
2437:./Libraries/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2438:./Libraries/FreeRTOS/Source/queue.c **** 			}
2439:./Libraries/FreeRTOS/Source/queue.c **** 		}
2440:./Libraries/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2441:./Libraries/FreeRTOS/Source/queue.c **** 
2442:./Libraries/FreeRTOS/Source/queue.c **** 		return xReturn;
2443:./Libraries/FreeRTOS/Source/queue.c **** 	}
2444:./Libraries/FreeRTOS/Source/queue.c **** 
2445:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2446:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2447:./Libraries/FreeRTOS/Source/queue.c **** 
2448:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2449:./Libraries/FreeRTOS/Source/queue.c **** 
2450:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2451:./Libraries/FreeRTOS/Source/queue.c **** 	{
2452:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2453:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
ARM GAS  /tmp/ccv5E8P7.s 			page 137


2454:./Libraries/FreeRTOS/Source/queue.c **** 
2455:./Libraries/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2456:./Libraries/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2457:./Libraries/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2458:./Libraries/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2459:./Libraries/FreeRTOS/Source/queue.c **** 		{
2460:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2461:./Libraries/FreeRTOS/Source/queue.c **** 			{
2462:./Libraries/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2463:./Libraries/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2464:./Libraries/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2465:./Libraries/FreeRTOS/Source/queue.c **** 				{
2466:./Libraries/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2467:./Libraries/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2468:./Libraries/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2469:./Libraries/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2470:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2471:./Libraries/FreeRTOS/Source/queue.c **** 				}
2472:./Libraries/FreeRTOS/Source/queue.c **** 				else
2473:./Libraries/FreeRTOS/Source/queue.c **** 				{
2474:./Libraries/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2475:./Libraries/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2476:./Libraries/FreeRTOS/Source/queue.c **** 				}
2477:./Libraries/FreeRTOS/Source/queue.c **** 			}
2478:./Libraries/FreeRTOS/Source/queue.c **** 			else
2479:./Libraries/FreeRTOS/Source/queue.c **** 			{
2480:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2481:./Libraries/FreeRTOS/Source/queue.c **** 			}
2482:./Libraries/FreeRTOS/Source/queue.c **** 		}
2483:./Libraries/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2484:./Libraries/FreeRTOS/Source/queue.c **** 
2485:./Libraries/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2486:./Libraries/FreeRTOS/Source/queue.c **** 		{
2487:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2488:./Libraries/FreeRTOS/Source/queue.c **** 			{
2489:./Libraries/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2490:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2491:./Libraries/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2492:./Libraries/FreeRTOS/Source/queue.c **** 				{
2493:./Libraries/FreeRTOS/Source/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2494:./Libraries/FreeRTOS/Source/queue.c **** 				}
2495:./Libraries/FreeRTOS/Source/queue.c **** 				else
2496:./Libraries/FreeRTOS/Source/queue.c **** 				{
2497:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2498:./Libraries/FreeRTOS/Source/queue.c **** 				}
2499:./Libraries/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2500:./Libraries/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2501:./Libraries/FreeRTOS/Source/queue.c **** 
2502:./Libraries/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2503:./Libraries/FreeRTOS/Source/queue.c **** 
2504:./Libraries/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2505:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2506:./Libraries/FreeRTOS/Source/queue.c **** 				{
2507:./Libraries/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2508:./Libraries/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2509:./Libraries/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2510:./Libraries/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
ARM GAS  /tmp/ccv5E8P7.s 			page 138


2511:./Libraries/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2512:./Libraries/FreeRTOS/Source/queue.c **** 					{
2513:./Libraries/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2514:./Libraries/FreeRTOS/Source/queue.c **** 					}
2515:./Libraries/FreeRTOS/Source/queue.c **** 					else
2516:./Libraries/FreeRTOS/Source/queue.c **** 					{
2517:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2518:./Libraries/FreeRTOS/Source/queue.c **** 					}
2519:./Libraries/FreeRTOS/Source/queue.c **** 				}
2520:./Libraries/FreeRTOS/Source/queue.c **** 				else
2521:./Libraries/FreeRTOS/Source/queue.c **** 				{
2522:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2523:./Libraries/FreeRTOS/Source/queue.c **** 				}
2524:./Libraries/FreeRTOS/Source/queue.c **** 			}
2525:./Libraries/FreeRTOS/Source/queue.c **** 			else
2526:./Libraries/FreeRTOS/Source/queue.c **** 			{
2527:./Libraries/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2528:./Libraries/FreeRTOS/Source/queue.c **** 			}
2529:./Libraries/FreeRTOS/Source/queue.c **** 		}
2530:./Libraries/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2531:./Libraries/FreeRTOS/Source/queue.c **** 
2532:./Libraries/FreeRTOS/Source/queue.c **** 		return xReturn;
2533:./Libraries/FreeRTOS/Source/queue.c **** 	}
2534:./Libraries/FreeRTOS/Source/queue.c **** 
2535:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2536:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2537:./Libraries/FreeRTOS/Source/queue.c **** 
2538:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2539:./Libraries/FreeRTOS/Source/queue.c **** 
2540:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2541:./Libraries/FreeRTOS/Source/queue.c **** 	{
2542:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2543:./Libraries/FreeRTOS/Source/queue.c **** 
2544:./Libraries/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2545:./Libraries/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2546:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2547:./Libraries/FreeRTOS/Source/queue.c **** 		{
2548:./Libraries/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2549:./Libraries/FreeRTOS/Source/queue.c **** 
2550:./Libraries/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2551:./Libraries/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2552:./Libraries/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2553:./Libraries/FreeRTOS/Source/queue.c **** 			{
2554:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2555:./Libraries/FreeRTOS/Source/queue.c **** 				{
2556:./Libraries/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2557:./Libraries/FreeRTOS/Source/queue.c **** 					{
2558:./Libraries/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2559:./Libraries/FreeRTOS/Source/queue.c **** 					}
2560:./Libraries/FreeRTOS/Source/queue.c **** 					else
2561:./Libraries/FreeRTOS/Source/queue.c **** 					{
2562:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2563:./Libraries/FreeRTOS/Source/queue.c **** 					}
2564:./Libraries/FreeRTOS/Source/queue.c **** 				}
2565:./Libraries/FreeRTOS/Source/queue.c **** 				else
2566:./Libraries/FreeRTOS/Source/queue.c **** 				{
2567:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv5E8P7.s 			page 139


2568:./Libraries/FreeRTOS/Source/queue.c **** 				}
2569:./Libraries/FreeRTOS/Source/queue.c **** 			}
2570:./Libraries/FreeRTOS/Source/queue.c **** 			else
2571:./Libraries/FreeRTOS/Source/queue.c **** 			{
2572:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2573:./Libraries/FreeRTOS/Source/queue.c **** 			}
2574:./Libraries/FreeRTOS/Source/queue.c **** 		}
2575:./Libraries/FreeRTOS/Source/queue.c **** 		else
2576:./Libraries/FreeRTOS/Source/queue.c **** 		{
2577:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2578:./Libraries/FreeRTOS/Source/queue.c **** 		}
2579:./Libraries/FreeRTOS/Source/queue.c **** 
2580:./Libraries/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2581:./Libraries/FreeRTOS/Source/queue.c **** 	}
2582:./Libraries/FreeRTOS/Source/queue.c **** 
2583:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2584:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2585:./Libraries/FreeRTOS/Source/queue.c **** 
2586:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2587:./Libraries/FreeRTOS/Source/queue.c **** 
2588:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2589:./Libraries/FreeRTOS/Source/queue.c **** 	{
2590:./Libraries/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2591:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2592:./Libraries/FreeRTOS/Source/queue.c **** 
2593:./Libraries/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2594:./Libraries/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2595:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2596:./Libraries/FreeRTOS/Source/queue.c **** 		{
2597:./Libraries/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2598:./Libraries/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2599:./Libraries/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2600:./Libraries/FreeRTOS/Source/queue.c **** 			{
2601:./Libraries/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2602:./Libraries/FreeRTOS/Source/queue.c **** 			}
2603:./Libraries/FreeRTOS/Source/queue.c **** 			else
2604:./Libraries/FreeRTOS/Source/queue.c **** 			{
2605:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2606:./Libraries/FreeRTOS/Source/queue.c **** 			}
2607:./Libraries/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2608:./Libraries/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2609:./Libraries/FreeRTOS/Source/queue.c **** 
2610:./Libraries/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2611:./Libraries/FreeRTOS/Source/queue.c **** 			{
2612:./Libraries/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2613:./Libraries/FreeRTOS/Source/queue.c **** 				{
2614:./Libraries/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2615:./Libraries/FreeRTOS/Source/queue.c **** 					{
2616:./Libraries/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2617:./Libraries/FreeRTOS/Source/queue.c **** 					}
2618:./Libraries/FreeRTOS/Source/queue.c **** 					else
2619:./Libraries/FreeRTOS/Source/queue.c **** 					{
2620:./Libraries/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2621:./Libraries/FreeRTOS/Source/queue.c **** 					}
2622:./Libraries/FreeRTOS/Source/queue.c **** 				}
2623:./Libraries/FreeRTOS/Source/queue.c **** 				else
2624:./Libraries/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccv5E8P7.s 			page 140


2625:./Libraries/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2626:./Libraries/FreeRTOS/Source/queue.c **** 				}
2627:./Libraries/FreeRTOS/Source/queue.c **** 			}
2628:./Libraries/FreeRTOS/Source/queue.c **** 			else
2629:./Libraries/FreeRTOS/Source/queue.c **** 			{
2630:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:./Libraries/FreeRTOS/Source/queue.c **** 			}
2632:./Libraries/FreeRTOS/Source/queue.c **** 
2633:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2634:./Libraries/FreeRTOS/Source/queue.c **** 		}
2635:./Libraries/FreeRTOS/Source/queue.c **** 		else
2636:./Libraries/FreeRTOS/Source/queue.c **** 		{
2637:./Libraries/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2638:./Libraries/FreeRTOS/Source/queue.c **** 		}
2639:./Libraries/FreeRTOS/Source/queue.c **** 
2640:./Libraries/FreeRTOS/Source/queue.c **** 		return xReturn;
2641:./Libraries/FreeRTOS/Source/queue.c **** 	}
2642:./Libraries/FreeRTOS/Source/queue.c **** 
2643:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2644:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2645:./Libraries/FreeRTOS/Source/queue.c **** 
2646:./Libraries/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2647:./Libraries/FreeRTOS/Source/queue.c **** 
2648:./Libraries/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2649:./Libraries/FreeRTOS/Source/queue.c **** 	{
 5059              		.loc 1 2649 2
 5060              		.cfi_startproc
 5061              		@ args = 0, pretend = 0, frame = 16
 5062              		@ frame_needed = 1, uses_anonymous_args = 0
 5063              		@ link register save eliminated.
 5064 0000 80B4     		push	{r7}
 5065              	.LCFI188:
 5066              		.cfi_def_cfa_offset 4
 5067              		.cfi_offset 7, -4
 5068 0002 85B0     		sub	sp, sp, #20
 5069              	.LCFI189:
 5070              		.cfi_def_cfa_offset 24
 5071 0004 00AF     		add	r7, sp, #0
 5072              	.LCFI190:
 5073              		.cfi_def_cfa_register 7
 5074 0006 7860     		str	r0, [r7, #4]
 5075 0008 3960     		str	r1, [r7]
2650:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2651:./Libraries/FreeRTOS/Source/queue.c **** 
2652:./Libraries/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2653:./Libraries/FreeRTOS/Source/queue.c **** 		a free slot. */
2654:./Libraries/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 5076              		.loc 1 2654 11
 5077 000a 0023     		movs	r3, #0
 5078 000c FB60     		str	r3, [r7, #12]
 5079              		.loc 1 2654 3
 5080 000e 14E0     		b	.L327
 5081              	.L330:
2655:./Libraries/FreeRTOS/Source/queue.c **** 		{
2656:./Libraries/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 5082              		.loc 1 2656 28
 5083 0010 0F4A     		ldr	r2, .L331
ARM GAS  /tmp/ccv5E8P7.s 			page 141


 5084 0012 FB68     		ldr	r3, [r7, #12]
 5085 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 5086              		.loc 1 2656 6
 5087 0018 002B     		cmp	r3, #0
 5088 001a 0BD1     		bne	.L328
2657:./Libraries/FreeRTOS/Source/queue.c **** 			{
2658:./Libraries/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2659:./Libraries/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 5089              		.loc 1 2659 38
 5090 001c 0C49     		ldr	r1, .L331
 5091 001e FB68     		ldr	r3, [r7, #12]
 5092 0020 3A68     		ldr	r2, [r7]
 5093 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2660:./Libraries/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 5094              		.loc 1 2660 34
 5095 0026 0A4A     		ldr	r2, .L331
 5096 0028 FB68     		ldr	r3, [r7, #12]
 5097 002a DB00     		lsls	r3, r3, #3
 5098 002c 1344     		add	r3, r3, r2
 5099 002e 7A68     		ldr	r2, [r7, #4]
 5100 0030 5A60     		str	r2, [r3, #4]
2661:./Libraries/FreeRTOS/Source/queue.c **** 
2662:./Libraries/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2663:./Libraries/FreeRTOS/Source/queue.c **** 				break;
 5101              		.loc 1 2663 5
 5102 0032 06E0     		b	.L329
 5103              	.L328:
2654:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5104              		.loc 1 2654 83 discriminator 2
 5105 0034 FB68     		ldr	r3, [r7, #12]
 5106 0036 0133     		adds	r3, r3, #1
 5107 0038 FB60     		str	r3, [r7, #12]
 5108              	.L327:
2654:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5109              		.loc 1 2654 3 discriminator 1
 5110 003a FB68     		ldr	r3, [r7, #12]
 5111 003c 072B     		cmp	r3, #7
 5112 003e E7D9     		bls	.L330
2664:./Libraries/FreeRTOS/Source/queue.c **** 			}
2665:./Libraries/FreeRTOS/Source/queue.c **** 			else
2666:./Libraries/FreeRTOS/Source/queue.c **** 			{
2667:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2668:./Libraries/FreeRTOS/Source/queue.c **** 			}
2669:./Libraries/FreeRTOS/Source/queue.c **** 		}
2670:./Libraries/FreeRTOS/Source/queue.c **** 	}
 5113              		.loc 1 2670 2
 5114 0040 00BF     		nop
 5115              	.L329:
 5116 0042 00BF     		nop
 5117 0044 1437     		adds	r7, r7, #20
 5118              	.LCFI191:
 5119              		.cfi_def_cfa_offset 4
 5120 0046 BD46     		mov	sp, r7
 5121              	.LCFI192:
 5122              		.cfi_def_cfa_register 13
 5123              		@ sp needed
 5124 0048 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccv5E8P7.s 			page 142


 5125              	.LCFI193:
 5126              		.cfi_restore 7
 5127              		.cfi_def_cfa_offset 0
 5128 004c 7047     		bx	lr
 5129              	.L332:
 5130 004e 00BF     		.align	2
 5131              	.L331:
 5132 0050 00000000 		.word	xQueueRegistry
 5133              		.cfi_endproc
 5134              	.LFE40:
 5136              		.section	.text.pcQueueGetName,"ax",%progbits
 5137              		.align	1
 5138              		.global	pcQueueGetName
 5139              		.syntax unified
 5140              		.thumb
 5141              		.thumb_func
 5142              		.fpu fpv5-d16
 5144              	pcQueueGetName:
 5145              	.LFB41:
2671:./Libraries/FreeRTOS/Source/queue.c **** 
2672:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2673:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2674:./Libraries/FreeRTOS/Source/queue.c **** 
2675:./Libraries/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2676:./Libraries/FreeRTOS/Source/queue.c **** 
2677:./Libraries/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2678:./Libraries/FreeRTOS/Source/queue.c **** 	{
 5146              		.loc 1 2678 2
 5147              		.cfi_startproc
 5148              		@ args = 0, pretend = 0, frame = 16
 5149              		@ frame_needed = 1, uses_anonymous_args = 0
 5150              		@ link register save eliminated.
 5151 0000 80B4     		push	{r7}
 5152              	.LCFI194:
 5153              		.cfi_def_cfa_offset 4
 5154              		.cfi_offset 7, -4
 5155 0002 85B0     		sub	sp, sp, #20
 5156              	.LCFI195:
 5157              		.cfi_def_cfa_offset 24
 5158 0004 00AF     		add	r7, sp, #0
 5159              	.LCFI196:
 5160              		.cfi_def_cfa_register 7
 5161 0006 7860     		str	r0, [r7, #4]
2679:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2680:./Libraries/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 5162              		.loc 1 2680 14
 5163 0008 0023     		movs	r3, #0
 5164 000a BB60     		str	r3, [r7, #8]
2681:./Libraries/FreeRTOS/Source/queue.c **** 
2682:./Libraries/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2683:./Libraries/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2684:./Libraries/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 5165              		.loc 1 2684 11
 5166 000c 0023     		movs	r3, #0
 5167 000e FB60     		str	r3, [r7, #12]
 5168              		.loc 1 2684 3
 5169 0010 10E0     		b	.L334
ARM GAS  /tmp/ccv5E8P7.s 			page 143


 5170              	.L337:
2685:./Libraries/FreeRTOS/Source/queue.c **** 		{
2686:./Libraries/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 5171              		.loc 1 2686 28
 5172 0012 0D4A     		ldr	r2, .L339
 5173 0014 FB68     		ldr	r3, [r7, #12]
 5174 0016 DB00     		lsls	r3, r3, #3
 5175 0018 1344     		add	r3, r3, r2
 5176 001a 5B68     		ldr	r3, [r3, #4]
 5177              		.loc 1 2686 6
 5178 001c 7A68     		ldr	r2, [r7, #4]
 5179 001e 9A42     		cmp	r2, r3
 5180 0020 05D1     		bne	.L335
2687:./Libraries/FreeRTOS/Source/queue.c **** 			{
2688:./Libraries/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 5181              		.loc 1 2688 14
 5182 0022 094A     		ldr	r2, .L339
 5183 0024 FB68     		ldr	r3, [r7, #12]
 5184 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 5185 002a BB60     		str	r3, [r7, #8]
2689:./Libraries/FreeRTOS/Source/queue.c **** 				break;
 5186              		.loc 1 2689 5
 5187 002c 05E0     		b	.L336
 5188              	.L335:
2684:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5189              		.loc 1 2684 83 discriminator 2
 5190 002e FB68     		ldr	r3, [r7, #12]
 5191 0030 0133     		adds	r3, r3, #1
 5192 0032 FB60     		str	r3, [r7, #12]
 5193              	.L334:
2684:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5194              		.loc 1 2684 3 discriminator 1
 5195 0034 FB68     		ldr	r3, [r7, #12]
 5196 0036 072B     		cmp	r3, #7
 5197 0038 EBD9     		bls	.L337
 5198              	.L336:
2690:./Libraries/FreeRTOS/Source/queue.c **** 			}
2691:./Libraries/FreeRTOS/Source/queue.c **** 			else
2692:./Libraries/FreeRTOS/Source/queue.c **** 			{
2693:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2694:./Libraries/FreeRTOS/Source/queue.c **** 			}
2695:./Libraries/FreeRTOS/Source/queue.c **** 		}
2696:./Libraries/FreeRTOS/Source/queue.c **** 
2697:./Libraries/FreeRTOS/Source/queue.c **** 		return pcReturn;
 5199              		.loc 1 2697 10
 5200 003a BB68     		ldr	r3, [r7, #8]
2698:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 5201              		.loc 1 2698 2
 5202 003c 1846     		mov	r0, r3
 5203 003e 1437     		adds	r7, r7, #20
 5204              	.LCFI197:
 5205              		.cfi_def_cfa_offset 4
 5206 0040 BD46     		mov	sp, r7
 5207              	.LCFI198:
 5208              		.cfi_def_cfa_register 13
 5209              		@ sp needed
 5210 0042 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccv5E8P7.s 			page 144


 5211              	.LCFI199:
 5212              		.cfi_restore 7
 5213              		.cfi_def_cfa_offset 0
 5214 0046 7047     		bx	lr
 5215              	.L340:
 5216              		.align	2
 5217              	.L339:
 5218 0048 00000000 		.word	xQueueRegistry
 5219              		.cfi_endproc
 5220              	.LFE41:
 5222              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 5223              		.align	1
 5224              		.global	vQueueUnregisterQueue
 5225              		.syntax unified
 5226              		.thumb
 5227              		.thumb_func
 5228              		.fpu fpv5-d16
 5230              	vQueueUnregisterQueue:
 5231              	.LFB42:
2699:./Libraries/FreeRTOS/Source/queue.c **** 
2700:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2701:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2702:./Libraries/FreeRTOS/Source/queue.c **** 
2703:./Libraries/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2704:./Libraries/FreeRTOS/Source/queue.c **** 
2705:./Libraries/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2706:./Libraries/FreeRTOS/Source/queue.c **** 	{
 5232              		.loc 1 2706 2
 5233              		.cfi_startproc
 5234              		@ args = 0, pretend = 0, frame = 16
 5235              		@ frame_needed = 1, uses_anonymous_args = 0
 5236              		@ link register save eliminated.
 5237 0000 80B4     		push	{r7}
 5238              	.LCFI200:
 5239              		.cfi_def_cfa_offset 4
 5240              		.cfi_offset 7, -4
 5241 0002 85B0     		sub	sp, sp, #20
 5242              	.LCFI201:
 5243              		.cfi_def_cfa_offset 24
 5244 0004 00AF     		add	r7, sp, #0
 5245              	.LCFI202:
 5246              		.cfi_def_cfa_register 7
 5247 0006 7860     		str	r0, [r7, #4]
2707:./Libraries/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2708:./Libraries/FreeRTOS/Source/queue.c **** 
2709:./Libraries/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2710:./Libraries/FreeRTOS/Source/queue.c **** 		registry. */
2711:./Libraries/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 5248              		.loc 1 2711 11
 5249 0008 0023     		movs	r3, #0
 5250 000a FB60     		str	r3, [r7, #12]
 5251              		.loc 1 2711 3
 5252 000c 16E0     		b	.L342
 5253              	.L345:
2712:./Libraries/FreeRTOS/Source/queue.c **** 		{
2713:./Libraries/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 5254              		.loc 1 2713 28
ARM GAS  /tmp/ccv5E8P7.s 			page 145


 5255 000e 104A     		ldr	r2, .L346
 5256 0010 FB68     		ldr	r3, [r7, #12]
 5257 0012 DB00     		lsls	r3, r3, #3
 5258 0014 1344     		add	r3, r3, r2
 5259 0016 5B68     		ldr	r3, [r3, #4]
 5260              		.loc 1 2713 6
 5261 0018 7A68     		ldr	r2, [r7, #4]
 5262 001a 9A42     		cmp	r2, r3
 5263 001c 0BD1     		bne	.L343
2714:./Libraries/FreeRTOS/Source/queue.c **** 			{
2715:./Libraries/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2716:./Libraries/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 5264              		.loc 1 2716 38
 5265 001e 0C4A     		ldr	r2, .L346
 5266 0020 FB68     		ldr	r3, [r7, #12]
 5267 0022 0021     		movs	r1, #0
 5268 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2717:./Libraries/FreeRTOS/Source/queue.c **** 
2718:./Libraries/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2719:./Libraries/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2720:./Libraries/FreeRTOS/Source/queue.c **** 				added again. */
2721:./Libraries/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 5269              		.loc 1 2721 34
 5270 0028 094A     		ldr	r2, .L346
 5271 002a FB68     		ldr	r3, [r7, #12]
 5272 002c DB00     		lsls	r3, r3, #3
 5273 002e 1344     		add	r3, r3, r2
 5274 0030 0022     		movs	r2, #0
 5275 0032 5A60     		str	r2, [r3, #4]
2722:./Libraries/FreeRTOS/Source/queue.c **** 				break;
 5276              		.loc 1 2722 5
 5277 0034 06E0     		b	.L344
 5278              	.L343:
2711:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5279              		.loc 1 2711 83 discriminator 2
 5280 0036 FB68     		ldr	r3, [r7, #12]
 5281 0038 0133     		adds	r3, r3, #1
 5282 003a FB60     		str	r3, [r7, #12]
 5283              	.L342:
2711:./Libraries/FreeRTOS/Source/queue.c **** 		{
 5284              		.loc 1 2711 3 discriminator 1
 5285 003c FB68     		ldr	r3, [r7, #12]
 5286 003e 072B     		cmp	r3, #7
 5287 0040 E5D9     		bls	.L345
2723:./Libraries/FreeRTOS/Source/queue.c **** 			}
2724:./Libraries/FreeRTOS/Source/queue.c **** 			else
2725:./Libraries/FreeRTOS/Source/queue.c **** 			{
2726:./Libraries/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2727:./Libraries/FreeRTOS/Source/queue.c **** 			}
2728:./Libraries/FreeRTOS/Source/queue.c **** 		}
2729:./Libraries/FreeRTOS/Source/queue.c **** 
2730:./Libraries/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 5288              		.loc 1 2730 2
 5289 0042 00BF     		nop
 5290              	.L344:
 5291 0044 00BF     		nop
 5292 0046 1437     		adds	r7, r7, #20
ARM GAS  /tmp/ccv5E8P7.s 			page 146


 5293              	.LCFI203:
 5294              		.cfi_def_cfa_offset 4
 5295 0048 BD46     		mov	sp, r7
 5296              	.LCFI204:
 5297              		.cfi_def_cfa_register 13
 5298              		@ sp needed
 5299 004a 5DF8047B 		ldr	r7, [sp], #4
 5300              	.LCFI205:
 5301              		.cfi_restore 7
 5302              		.cfi_def_cfa_offset 0
 5303 004e 7047     		bx	lr
 5304              	.L347:
 5305              		.align	2
 5306              	.L346:
 5307 0050 00000000 		.word	xQueueRegistry
 5308              		.cfi_endproc
 5309              	.LFE42:
 5311              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 5312              		.align	1
 5313              		.global	vQueueWaitForMessageRestricted
 5314              		.syntax unified
 5315              		.thumb
 5316              		.thumb_func
 5317              		.fpu fpv5-d16
 5319              	vQueueWaitForMessageRestricted:
 5320              	.LFB43:
2731:./Libraries/FreeRTOS/Source/queue.c **** 
2732:./Libraries/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2733:./Libraries/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2734:./Libraries/FreeRTOS/Source/queue.c **** 
2735:./Libraries/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2736:./Libraries/FreeRTOS/Source/queue.c **** 
2737:./Libraries/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2738:./Libraries/FreeRTOS/Source/queue.c **** 	{
 5321              		.loc 1 2738 2
 5322              		.cfi_startproc
 5323              		@ args = 0, pretend = 0, frame = 24
 5324              		@ frame_needed = 1, uses_anonymous_args = 0
 5325 0000 80B5     		push	{r7, lr}
 5326              	.LCFI206:
 5327              		.cfi_def_cfa_offset 8
 5328              		.cfi_offset 7, -8
 5329              		.cfi_offset 14, -4
 5330 0002 86B0     		sub	sp, sp, #24
 5331              	.LCFI207:
 5332              		.cfi_def_cfa_offset 32
 5333 0004 00AF     		add	r7, sp, #0
 5334              	.LCFI208:
 5335              		.cfi_def_cfa_register 7
 5336 0006 F860     		str	r0, [r7, #12]
 5337 0008 B960     		str	r1, [r7, #8]
 5338 000a 7A60     		str	r2, [r7, #4]
2739:./Libraries/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
 5339              		.loc 1 2739 18
 5340 000c FB68     		ldr	r3, [r7, #12]
 5341 000e 7B61     		str	r3, [r7, #20]
2740:./Libraries/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccv5E8P7.s 			page 147


2741:./Libraries/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
2742:./Libraries/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2743:./Libraries/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2744:./Libraries/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2745:./Libraries/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2746:./Libraries/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2747:./Libraries/FreeRTOS/Source/queue.c **** 		section. */
2748:./Libraries/FreeRTOS/Source/queue.c **** 
2749:./Libraries/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2750:./Libraries/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2751:./Libraries/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2752:./Libraries/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2753:./Libraries/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2754:./Libraries/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2755:./Libraries/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 5342              		.loc 1 2755 3
 5343 0010 FFF7FEFF 		bl	vPortEnterCritical
 5344 0014 7B69     		ldr	r3, [r7, #20]
 5345 0016 93F84430 		ldrb	r3, [r3, #68]
 5346 001a 5BB2     		sxtb	r3, r3
 5347 001c B3F1FF3F 		cmp	r3, #-1
 5348 0020 03D1     		bne	.L349
 5349              		.loc 1 2755 3 is_stmt 0 discriminator 1
 5350 0022 7B69     		ldr	r3, [r7, #20]
 5351 0024 0022     		movs	r2, #0
 5352 0026 83F84420 		strb	r2, [r3, #68]
 5353              	.L349:
 5354              		.loc 1 2755 3 discriminator 3
 5355 002a 7B69     		ldr	r3, [r7, #20]
 5356 002c 93F84530 		ldrb	r3, [r3, #69]
 5357 0030 5BB2     		sxtb	r3, r3
 5358 0032 B3F1FF3F 		cmp	r3, #-1
 5359 0036 03D1     		bne	.L350
 5360              		.loc 1 2755 3 discriminator 4
 5361 0038 7B69     		ldr	r3, [r7, #20]
 5362 003a 0022     		movs	r2, #0
 5363 003c 83F84520 		strb	r2, [r3, #69]
 5364              	.L350:
 5365              		.loc 1 2755 3 discriminator 6
 5366 0040 FFF7FEFF 		bl	vPortExitCritical
2756:./Libraries/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 5367              		.loc 1 2756 14 is_stmt 1 discriminator 6
 5368 0044 7B69     		ldr	r3, [r7, #20]
 5369 0046 9B6B     		ldr	r3, [r3, #56]
 5370              		.loc 1 2756 5 discriminator 6
 5371 0048 002B     		cmp	r3, #0
 5372 004a 06D1     		bne	.L351
2757:./Libraries/FreeRTOS/Source/queue.c **** 		{
2758:./Libraries/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2759:./Libraries/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 5373              		.loc 1 2759 4
 5374 004c 7B69     		ldr	r3, [r7, #20]
 5375 004e 2433     		adds	r3, r3, #36
 5376 0050 7A68     		ldr	r2, [r7, #4]
 5377 0052 B968     		ldr	r1, [r7, #8]
 5378 0054 1846     		mov	r0, r3
 5379 0056 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
ARM GAS  /tmp/ccv5E8P7.s 			page 148


 5380              	.L351:
2760:./Libraries/FreeRTOS/Source/queue.c **** 		}
2761:./Libraries/FreeRTOS/Source/queue.c **** 		else
2762:./Libraries/FreeRTOS/Source/queue.c **** 		{
2763:./Libraries/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2764:./Libraries/FreeRTOS/Source/queue.c **** 		}
2765:./Libraries/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 5381              		.loc 1 2765 3
 5382 005a 7869     		ldr	r0, [r7, #20]
 5383 005c FFF7FEFF 		bl	prvUnlockQueue
2766:./Libraries/FreeRTOS/Source/queue.c **** 	}
 5384              		.loc 1 2766 2
 5385 0060 00BF     		nop
 5386 0062 1837     		adds	r7, r7, #24
 5387              	.LCFI209:
 5388              		.cfi_def_cfa_offset 8
 5389 0064 BD46     		mov	sp, r7
 5390              	.LCFI210:
 5391              		.cfi_def_cfa_register 13
 5392              		@ sp needed
 5393 0066 80BD     		pop	{r7, pc}
 5394              		.cfi_endproc
 5395              	.LFE43:
 5397              		.text
 5398              	.Letext0:
 5399              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5400              		.file 4 "/usr/include/newlib/sys/_types.h"
 5401              		.file 5 "/usr/include/newlib/sys/reent.h"
 5402              		.file 6 "/usr/include/newlib/sys/lock.h"
 5403              		.file 7 "/usr/include/newlib/stdlib.h"
 5404              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 5405              		.file 9 "./User/code/Inc/FreeRTOSConfig.h"
 5406              		.file 10 "./Libraries/FreeRTOS/Source/include/FreeRTOS.h"
 5407              		.file 11 "./Libraries/FreeRTOS/Source/include/list.h"
 5408              		.file 12 "./Libraries/FreeRTOS/Source/include/task.h"
 5409              		.file 13 "./Libraries/FreeRTOS/Source/include/queue.h"
ARM GAS  /tmp/ccv5E8P7.s 			page 149


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccv5E8P7.s:18     .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccv5E8P7.s:26     .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccv5E8P7.s:193    .text.xQueueGenericReset:00000000000000cc $d
     /tmp/ccv5E8P7.s:198    .text.xQueueGenericCreateStatic:0000000000000000 $t
     /tmp/ccv5E8P7.s:205    .text.xQueueGenericCreateStatic:0000000000000000 xQueueGenericCreateStatic
     /tmp/ccv5E8P7.s:542    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccv5E8P7.s:430    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccv5E8P7.s:437    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccv5E8P7.s:536    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccv5E8P7.s:608    .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccv5E8P7.s:614    .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccv5E8P7.s:1389   .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccv5E8P7.s:669    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccv5E8P7.s:676    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccv5E8P7.s:727    .text.xQueueCreateMutexStatic:0000000000000000 $t
     /tmp/ccv5E8P7.s:734    .text.xQueueCreateMutexStatic:0000000000000000 xQueueCreateMutexStatic
     /tmp/ccv5E8P7.s:788    .text.xQueueGetMutexHolder:0000000000000000 $t
     /tmp/ccv5E8P7.s:795    .text.xQueueGetMutexHolder:0000000000000000 xQueueGetMutexHolder
     /tmp/ccv5E8P7.s:852    .text.xQueueGetMutexHolderFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:859    .text.xQueueGetMutexHolderFromISR:0000000000000000 xQueueGetMutexHolderFromISR
     /tmp/ccv5E8P7.s:939    .text.xQueueGiveMutexRecursive:0000000000000000 $t
     /tmp/ccv5E8P7.s:946    .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
     /tmp/ccv5E8P7.s:1048   .text.xQueueTakeMutexRecursive:0000000000000000 $t
     /tmp/ccv5E8P7.s:1055   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
     /tmp/ccv5E8P7.s:2657   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccv5E8P7.s:1158   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 $t
     /tmp/ccv5E8P7.s:1165   .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 xQueueCreateCountingSemaphoreStatic
     /tmp/ccv5E8P7.s:1272   .text.xQueueCreateCountingSemaphore:0000000000000000 $t
     /tmp/ccv5E8P7.s:1279   .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
     /tmp/ccv5E8P7.s:1382   .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccv5E8P7.s:4356   .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccv5E8P7.s:4902   .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccv5E8P7.s:4614   .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccv5E8P7.s:1773   .text.xQueueGenericSend:00000000000001f8 $d
     /tmp/ccv5E8P7.s:1778   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:1785   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccv5E8P7.s:2054   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:2061   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccv5E8P7.s:2309   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccv5E8P7.s:2316   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccv5E8P7.s:4532   .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccv5E8P7.s:4754   .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccv5E8P7.s:2645   .text.xQueueReceive:00000000000001bc $d
     /tmp/ccv5E8P7.s:2650   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccv5E8P7.s:4293   .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/ccv5E8P7.s:3046   .text.xQueueSemaphoreTake:0000000000000214 $d
     /tmp/ccv5E8P7.s:3051   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccv5E8P7.s:3058   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccv5E8P7.s:3389   .text.xQueuePeek:00000000000001c0 $d
     /tmp/ccv5E8P7.s:3394   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:3401   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccv5E8P7.s:3623   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:3630   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccv5E8P7.s:3830   .text.uxQueueMessagesWaiting:0000000000000000 $t
ARM GAS  /tmp/ccv5E8P7.s 			page 150


     /tmp/ccv5E8P7.s:3837   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccv5E8P7.s:3905   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccv5E8P7.s:3912   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccv5E8P7.s:3988   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:3995   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccv5E8P7.s:4066   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccv5E8P7.s:4073   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccv5E8P7.s:5230   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccv5E8P7.s:4147   .text.uxQueueGetQueueNumber:0000000000000000 $t
     /tmp/ccv5E8P7.s:4154   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
     /tmp/ccv5E8P7.s:4193   .text.vQueueSetQueueNumber:0000000000000000 $t
     /tmp/ccv5E8P7.s:4200   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
     /tmp/ccv5E8P7.s:4241   .text.ucQueueGetQueueType:0000000000000000 $t
     /tmp/ccv5E8P7.s:4248   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
     /tmp/ccv5E8P7.s:4287   .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/ccv5E8P7.s:4350   .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccv5E8P7.s:4526   .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccv5E8P7.s:4608   .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccv5E8P7.s:4748   .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccv5E8P7.s:4807   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:4814   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccv5E8P7.s:4896   .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccv5E8P7.s:4958   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccv5E8P7.s:4965   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccv5E8P7.s:5050   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccv5E8P7.s:5057   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccv5E8P7.s:5132   .text.vQueueAddToRegistry:0000000000000050 $d
     /tmp/ccv5E8P7.s:5137   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccv5E8P7.s:5144   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccv5E8P7.s:5218   .text.pcQueueGetName:0000000000000048 $d
     /tmp/ccv5E8P7.s:5223   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccv5E8P7.s:5307   .text.vQueueUnregisterQueue:0000000000000050 $d
     /tmp/ccv5E8P7.s:5312   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
     /tmp/ccv5E8P7.s:5319   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
ARM GAS  /tmp/ccv5E8P7.s 			page 151


