ARM GAS  /tmp/ccrDqndT.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_inverse_f64.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_inverse_f64,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	arm_mat_inverse_f64
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	arm_mat_inverse_f64:
  27              	.LVL0:
  28              	.LFB145:
  29              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Title:        arm_mat_inverse_f64.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Description:  Floating-point matrix inverse
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #include "arm_math.h"
ARM GAS  /tmp/ccrDqndT.s 			page 2


  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @addtogroup MatrixInv
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @{
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @brief         Floating-point (64 bit) matrix inverse.
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @param[in]     pSrc      points to input matrix structure
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @param[out]    pDst      points to output matrix structure
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @return        execution status
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invert
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** arm_status arm_mat_inverse_f64(
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   const arm_matrix_instance_f64 * pSrc,
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         arm_matrix_instance_f64 * pDst)
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** {
  30              		.loc 1 54 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 32
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  34              		.loc 1 55 3 view .LVU1
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  35              		.loc 1 54 1 is_stmt 0 view .LVU2
  36 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  48              		.loc 1 56 14 view .LVU3
  49 0004 4B68     		ldr	r3, [r1, #4]
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  50              		.loc 1 54 1 view .LVU4
  51 0006 89B0     		sub	sp, sp, #36
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 72
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
ARM GAS  /tmp/ccrDqndT.s 			page 3


  54              		.loc 1 60 12 view .LVU5
  55 0008 B0F80090 		ldrh	r9, [r0]
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  56              		.loc 1 56 14 view .LVU6
  57 000c 0593     		str	r3, [sp, #20]
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  58              		.loc 1 55 14 view .LVU7
  59 000e 4368     		ldr	r3, [r0, #4]
  60 0010 0793     		str	r3, [sp, #28]
  61              	.LVL1:
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  62              		.loc 1 56 3 is_stmt 1 view .LVU8
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  63              		.loc 1 57 3 view .LVU9
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
  64              		.loc 1 58 3 view .LVU10
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
  65              		.loc 1 59 3 view .LVU11
  66              		.loc 1 60 3 view .LVU12
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
  67              		.loc 1 61 3 view .LVU13
  68              		.loc 1 61 12 is_stmt 0 view .LVU14
  69 0012 4388     		ldrh	r3, [r0, #2]
  70              	.LVL2:
  71              		.loc 1 61 12 view .LVU15
  72 0014 0193     		str	r3, [sp, #4]
  73              	.LVL3:
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #if defined (ARM_MATH_DSP)
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t maxC;                                /* maximum value in the column */
  74              		.loc 1 64 3 is_stmt 1 view .LVU16
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0, in1;                /* Temporary input values  */
  75              		.loc 1 66 3 view .LVU17
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
  76              		.loc 1 67 3 view .LVU18
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
  77              		.loc 1 68 3 view .LVU19
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) ||
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pDst->numRows != pDst->numCols) ||
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pSrc->numRows != pDst->numRows)   )
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   else
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      * Matrix Inverse can be solved using elementary row operations.
ARM GAS  /tmp/ccrDqndT.s 			page 4


  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *  Gauss-Jordan Method:
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *        augmented matrix as follows:
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                      _                  _         _         _
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  a11  a12 | 1   0  |       |  X11 X12  |
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |           |        |   =   |           |
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |_ a21  a22 | 0   1 _|       |_ X21 X21 _|
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      3. Begin with the first row. Let i = 1.
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      4. Check to see if the pivot for column i is the greatest of the column.
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The pivot is the element of the main diagonal that is on the current row.
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         For instance, if working with row i, then the pivot element is aii.
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         If the pivot is not the most significant of the columns, exchange that row with a ro
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         below it that does contain the most significant value in column i. If the most
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         significant value of the column is zero, then an inverse to that matrix does not exi
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The most significant value of the column is the absolute maximum.
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      5. Divide every element of row i by the pivot.
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         for every element below and above the main diagonal.
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *---------------------------------------------------------------------------------------------
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
  78              		.loc 1 123 5 view .LVU20
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
  79              		.loc 1 126 5 view .LVU21
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0U)
  80              		.loc 1 129 5 view .LVU22
  81              		.loc 1 129 11 view .LVU23
  82 0016 B9F1000F 		cmp	r9, #0
  83 001a 25D0     		beq	.L3
  84              	.LVL4:
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
ARM GAS  /tmp/ccrDqndT.s 			page 5


 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0;
  85              		.loc 1 140 7 view .LVU24
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
  86              		.loc 1 129 11 is_stmt 0 view .LVU25
  87 001c 4D46     		mov	r5, r9
  88              		.loc 1 140 17 view .LVU26
  89 001e 4FF0000A 		mov	r10, #0
  90 0022 DFF8F4B1 		ldr	fp, .L62+8
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
  91              		.loc 1 129 11 view .LVU27
  92 0026 0126     		movs	r6, #1
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  93              		.loc 1 123 12 view .LVU28
  94 0028 059C     		ldr	r4, [sp, #20]
  95              	.LVL5:
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1U;
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
  96              		.loc 1 144 13 view .LVU29
  97 002a 013D     		subs	r5, r5, #1
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
  98              		.loc 1 146 19 view .LVU30
  99 002c 4FF00000 		mov	r0, #0
 100              	.LVL6:
 101              		.loc 1 146 19 view .LVU31
 102 0030 4FF00001 		mov	r1, #0
 103              	.LVL7:
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 104              		.loc 1 140 17 view .LVU32
 105 0034 E4E802AB 		strd	r10, [r4], #8
 106              	.LVL8:
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 107              		.loc 1 143 7 is_stmt 1 view .LVU33
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 108              		.loc 1 144 7 view .LVU34
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 109              		.loc 1 144 13 view .LVU35
 110 0038 16D0     		beq	.L3
 111              	.LVL9:
 112              	.L55:
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 113              		.loc 1 144 13 is_stmt 0 view .LVU36
 114 003a 2B46     		mov	r3, r5
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 115              		.loc 1 140 14 view .LVU37
 116 003c 2246     		mov	r2, r4
 117              	.LVL10:
 118              	.L5:
 119              		.loc 1 146 9 is_stmt 1 view .LVU38
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 120              		.loc 1 144 13 is_stmt 0 view .LVU39
 121 003e 013B     		subs	r3, r3, #1
 122              	.LVL11:
ARM GAS  /tmp/ccrDqndT.s 			page 6


 123              		.loc 1 146 19 view .LVU40
 124 0040 E2E80201 		strd	r0, [r2], #8
 125              	.LVL12:
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 126              		.loc 1 147 9 is_stmt 1 view .LVU41
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 127              		.loc 1 144 13 view .LVU42
 128 0044 FBD1     		bne	.L5
 129 0046 04EBC504 		add	r4, r4, r5, lsl #3
 130              	.LVL13:
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 131              		.loc 1 129 11 view .LVU43
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 132              		.loc 1 132 7 view .LVU44
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 133              		.loc 1 133 7 view .LVU45
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 134              		.loc 1 133 13 view .LVU46
 135 004a 3EB1     		cbz	r6, .L25
 136 004c 3346     		mov	r3, r6
 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 137              		.loc 1 146 16 is_stmt 0 view .LVU47
 138 004e 2246     		mov	r2, r4
 139              	.LVL14:
 140              	.L4:
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 141              		.loc 1 135 9 is_stmt 1 view .LVU48
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 142              		.loc 1 133 13 is_stmt 0 view .LVU49
 143 0050 013B     		subs	r3, r3, #1
 144              	.LVL15:
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 145              		.loc 1 135 19 view .LVU50
 146 0052 E2E80201 		strd	r0, [r2], #8
 147              	.LVL16:
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 148              		.loc 1 136 9 is_stmt 1 view .LVU51
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 149              		.loc 1 133 13 view .LVU52
 150 0056 FBD1     		bne	.L4
 151 0058 04EBC604 		add	r4, r4, r6, lsl #3
 152              	.LVL17:
 153              	.L25:
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 154              		.loc 1 144 13 is_stmt 0 view .LVU53
 155 005c 013D     		subs	r5, r5, #1
 156              	.LVL18:
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 157              		.loc 1 144 13 view .LVU54
 158 005e 06F10106 		add	r6, r6, #1
 159              	.LVL19:
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 160              		.loc 1 140 7 is_stmt 1 view .LVU55
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 161              		.loc 1 140 17 is_stmt 0 view .LVU56
 162 0062 E4E802AB 		strd	r10, [r4], #8
 163              	.LVL20:
ARM GAS  /tmp/ccrDqndT.s 			page 7


 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 164              		.loc 1 143 7 is_stmt 1 view .LVU57
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 165              		.loc 1 144 7 view .LVU58
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 166              		.loc 1 144 13 view .LVU59
 167 0066 E8D1     		bne	.L55
 168              	.LVL21:
 169              	.L3:
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement loop counter */
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0U;
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0U)
 170              		.loc 1 161 11 view .LVU60
 171 0068 019B     		ldr	r3, [sp, #4]
 172 006a 002B     		cmp	r3, #0
 173 006c 00F0B880 		beq	.L7
 174 0070 059A     		ldr	r2, [sp, #20]
 175 0072 4FEAC30C 		lsl	ip, r3, #3
 176 0076 9B46     		mov	fp, r3
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 177              		.loc 1 159 7 is_stmt 0 view .LVU61
 178 0078 4FF0000E 		mov	lr, #0
 179 007c 0092     		str	r2, [sp]
 180 007e 0CF10803 		add	r3, ip, #8
 181 0082 079A     		ldr	r2, [sp, #28]
 182              		.loc 1 161 11 view .LVU62
 183 0084 E046     		mov	r8, ip
 184 0086 0693     		str	r3, [sp, #24]
 185 0088 1146     		mov	r1, r2
 186 008a 02EB0C03 		add	r3, r2, ip
 187 008e 0831     		adds	r1, r1, #8
 188 0090 0493     		str	r3, [sp, #16]
 189 0092 0291     		str	r1, [sp, #8]
 190              	.LVL22:
 191              	.L22:
 192              		.loc 1 161 11 view .LVU63
 193 0094 049B     		ldr	r3, [sp, #16]
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
ARM GAS  /tmp/ccrDqndT.s 			page 8


 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Grab the most significant value from column l */
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       maxC = 0;
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 194              		.loc 1 181 7 view .LVU64
 195 0096 F145     		cmp	r9, lr
 196 0098 A3EB0805 		sub	r5, r3, r8
 197              	.LVL23:
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 198              		.loc 1 170 7 is_stmt 1 view .LVU65
 199 009c 029B     		ldr	r3, [sp, #8]
 200 009e A3F10802 		sub	r2, r3, #8
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 201              		.loc 1 177 10 is_stmt 0 view .LVU66
 202 00a2 13ED026B 		vldr.64	d6, [r3, #-8]
 203 00a6 1046     		mov	r0, r2
 204              	.LVL24:
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 205              		.loc 1 174 7 is_stmt 1 view .LVU67
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 206              		.loc 1 177 7 view .LVU68
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 207              		.loc 1 180 7 view .LVU69
 208              		.loc 1 181 7 view .LVU70
 209              		.loc 1 181 19 view .LVU71
 210              		.loc 1 181 7 is_stmt 0 view .LVU72
 211 00a8 00F09A80 		beq	.L7
 212 00ac B0EE467B 		vmov.f64	d7, d6
 213 00b0 7646     		mov	r6, lr
 214 00b2 1346     		mov	r3, r2
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 215              		.loc 1 180 12 view .LVU73
 216 00b4 9FED565B 		vldr.64	d5, .L62
 217 00b8 0CE0     		b	.L8
 218              	.LVL25:
 219              	.L56:
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 220              		.loc 1 183 53 discriminator 1 view .LVU74
 221 00ba B4EE457B 		vcmp.f64	d7, d5
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 222              		.loc 1 181 33 discriminator 1 view .LVU75
 223 00be 721C     		adds	r2, r6, #1
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 224              		.loc 1 184 15 discriminator 1 view .LVU76
 225 00c0 6344     		add	r3, r3, ip
 226              	.LVL26:
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 227              		.loc 1 183 53 discriminator 1 view .LVU77
 228 00c2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccrDqndT.s 			page 9


 229 00c6 37FE055B 		vselgt.f64	d5, d7, d5
 230              	.LVL27:
 231              		.loc 1 184 9 is_stmt 1 discriminator 1 view .LVU78
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 232              		.loc 1 181 32 discriminator 1 view .LVU79
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 233              		.loc 1 181 19 discriminator 1 view .LVU80
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 234              		.loc 1 181 7 is_stmt 0 discriminator 1 view .LVU81
 235 00ca 9145     		cmp	r9, r2
 236 00cc 13D0     		beq	.L13
 237              	.L57:
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 238              		.loc 1 181 7 view .LVU82
 239 00ce 1646     		mov	r6, r2
 240 00d0 93ED007B 		vldr.64	d7, [r3]
 241              	.LVL28:
 242              	.L8:
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 243              		.loc 1 183 9 is_stmt 1 view .LVU83
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 244              		.loc 1 183 61 is_stmt 0 view .LVU84
 245 00d4 B5EEC07B 		vcmpe.f64	d7, #0
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 246              		.loc 1 183 64 view .LVU85
 247 00d8 B1EE474B 		vneg.f64	d4, d7
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 248              		.loc 1 183 61 view .LVU86
 249 00dc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 250 00e0 EBDC     		bgt	.L56
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 251              		.loc 1 183 89 discriminator 2 view .LVU87
 252 00e2 B4EE454B 		vcmp.f64	d4, d5
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 253              		.loc 1 181 33 discriminator 2 view .LVU88
 254 00e6 721C     		adds	r2, r6, #1
 255              		.loc 1 184 15 discriminator 2 view .LVU89
 256 00e8 6344     		add	r3, r3, ip
 257              	.LVL29:
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 258              		.loc 1 183 89 discriminator 2 view .LVU90
 259 00ea F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 260 00ee 34FE055B 		vselgt.f64	d5, d4, d5
 261              	.LVL30:
 262              		.loc 1 184 9 is_stmt 1 discriminator 2 view .LVU91
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 263              		.loc 1 181 32 discriminator 2 view .LVU92
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 264              		.loc 1 181 19 discriminator 2 view .LVU93
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 265              		.loc 1 181 7 is_stmt 0 discriminator 2 view .LVU94
 266 00f2 9145     		cmp	r9, r2
 267 00f4 EBD1     		bne	.L57
 268              	.L13:
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
ARM GAS  /tmp/ccrDqndT.s 			page 10


 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (maxC == 0.0)
 269              		.loc 1 188 7 is_stmt 1 view .LVU95
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Restore pInT1  */
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 270              		.loc 1 194 7 view .LVU96
 271              	.LVL31:
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1U;
 272              		.loc 1 197 7 view .LVU97
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is the most significant of the column */
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ( (in > 0.0 ? in : -in) != maxC)
 273              		.loc 1 200 7 view .LVU98
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         i = numRows - (l + 1U);
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         while (i > 0U)
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Look for the most significant element to
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           if ((*pInT2 > 0.0 ? *pInT2: -*pInT2) == maxC)
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols - l;
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0U)
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement the loop counter */
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns of the destination matrix */
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols;
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0U)
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the destination matrix */
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccrDqndT.s 			page 11


 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement loop counter */
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1U;
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Decrement loop counter */
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           i--;
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1U) && (in == 0.0))
 274              		.loc 1 260 7 view .LVU99
 275              		.loc 1 260 10 is_stmt 0 view .LVU100
 276 00f6 B5EE406B 		vcmp.f64	d6, #0
 277 00fa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 278 00fe 6FD0     		beq	.L7
 279 0100 B5EE405B 		vcmp.f64	d5, #0
 280 0104 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 281 0108 6AD0     		beq	.L7
 282              		.loc 1 260 10 view .LVU101
 283 010a B0EE467B 		vmov.f64	d7, d6
 284 010e 0299     		ldr	r1, [sp, #8]
 285 0110 5B46     		mov	r3, fp
 286 0112 0246     		mov	r2, r0
 287              	.LVL32:
 288              		.loc 1 260 10 view .LVU102
 289 0114 01E0     		b	.L15
 290              	.LVL33:
 291              	.L58:
 292              		.loc 1 260 10 view .LVU103
 293 0116 B1EC027B 		vldmia.64	r1!, {d7}
 294              	.LVL34:
 295              	.L15:
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pPivotRowDst;
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pPivotRowIn;
ARM GAS  /tmp/ccrDqndT.s 			page 12


 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = (numCols - l);
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT1;
 296              		.loc 1 284 9 is_stmt 1 view .LVU104
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1++ = in1 / in;
 297              		.loc 1 285 9 view .LVU105
 298              		.loc 1 285 24 is_stmt 0 view .LVU106
 299 011a 87EE065B 		vdiv.f64	d5, d7, d6
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 300              		.loc 1 280 13 view .LVU107
 301 011e 013B     		subs	r3, r3, #1
 302              	.LVL35:
 303              		.loc 1 285 18 view .LVU108
 304 0120 A2EC025B 		vstmia.64	r2!, {d5}
 305              	.LVL36:
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 306              		.loc 1 288 9 is_stmt 1 view .LVU109
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 307              		.loc 1 280 13 view .LVU110
 308 0124 F7D1     		bne	.L58
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 309              		.loc 1 271 13 is_stmt 0 view .LVU111
 310 0126 DDE90034 		ldrd	r3, r4, [sp]
 311              	.L14:
 312              	.LVL37:
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns of the destination matrix */
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numCols;
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT2;
 313              		.loc 1 298 9 is_stmt 1 view .LVU112
 314              		.loc 1 298 13 is_stmt 0 view .LVU113
 315 012a 93ED005B 		vldr.64	d5, [r3]
 316              	.LVL38:
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT2++ = in1 / in;
 317              		.loc 1 299 9 is_stmt 1 view .LVU114
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 318              		.loc 1 294 13 is_stmt 0 view .LVU115
 319 012e 013C     		subs	r4, r4, #1
 320              	.LVL39:
 321              		.loc 1 299 24 view .LVU116
 322 0130 85EE067B 		vdiv.f64	d7, d5, d6
 323              		.loc 1 299 18 view .LVU117
ARM GAS  /tmp/ccrDqndT.s 			page 13


 324 0134 A3EC027B 		vstmia.64	r3!, {d7}
 325              	.LVL40:
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 326              		.loc 1 302 9 is_stmt 1 view .LVU118
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 327              		.loc 1 294 13 view .LVU119
 328 0138 F7D1     		bne	.L14
 329              	.LVL41:
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pOut;
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* index used to check for pivot element */
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       i = 0U;
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of rows */
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /*  to be replaced by the sum of that row and a multiple of row i */
 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = numRows;
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (k > 0U)
 330              		.loc 1 319 13 view .LVU120
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 331              		.loc 1 322 12 is_stmt 0 view .LVU121
 332 013a 7445     		cmp	r4, lr
 333 013c CDF80C90 		str	r9, [sp, #12]
 334 0140 4FEACE0A 		lsl	r10, lr, #3
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 335              		.loc 1 310 13 view .LVU122
 336 0144 059F     		ldr	r7, [sp, #20]
 337 0146 8146     		mov	r9, r0
 338              	.LVL42:
 339              		.loc 1 322 9 is_stmt 1 view .LVU123
 340              		.loc 1 322 12 is_stmt 0 view .LVU124
 341 0148 29D0     		beq	.L59
 342              	.LVL43:
 343              	.L16:
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 += numCols;
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         else
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 344              		.loc 1 333 11 is_stmt 1 view .LVU125
ARM GAS  /tmp/ccrDqndT.s 			page 14


 345              		.loc 1 333 14 is_stmt 0 view .LVU126
 346 014a 2A46     		mov	r2, r5
 347 014c 5B46     		mov	r3, fp
 348 014e 4846     		mov	r0, r9
 349 0150 2946     		mov	r1, r5
 350 0152 B2EC026B 		vldmia.64	r2!, {d6}
 351              	.LVL44:
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 352              		.loc 1 336 11 is_stmt 1 view .LVU127
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 353              		.loc 1 337 11 view .LVU128
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           j = (numCols - l);
 354              		.loc 1 341 11 view .LVU129
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0U)
 355              		.loc 1 343 11 view .LVU130
 356              		.loc 1 343 17 view .LVU131
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 357              		.loc 1 333 14 is_stmt 0 view .LVU132
 358 0156 B0EE467B 		vmov.f64	d7, d6
 359 015a 01E0     		b	.L20
 360              	.LVL45:
 361              	.L18:
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 362              		.loc 1 333 14 view .LVU133
 363 015c B2EC027B 		vldmia.64	r2!, {d7}
 364              	.L20:
 365              	.LVL46:
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT1;
 366              		.loc 1 347 13 is_stmt 1 view .LVU134
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 367              		.loc 1 348 13 view .LVU135
 368              		.loc 1 348 28 is_stmt 0 view .LVU136
 369 0160 B0EC025B 		vldmia.64	r0!, {d5}
 370              	.LVL47:
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 371              		.loc 1 343 17 view .LVU137
 372 0164 013B     		subs	r3, r3, #1
 373              	.LVL48:
 374              		.loc 1 348 28 view .LVU138
 375 0166 A5EE467B 		vfms.f64	d7, d5, d6
 376              		.loc 1 348 22 view .LVU139
 377 016a A1EC027B 		vstmia.64	r1!, {d7}
 378              	.LVL49:
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement the loop counter */
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 379              		.loc 1 351 13 is_stmt 1 view .LVU140
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
ARM GAS  /tmp/ccrDqndT.s 			page 15


 380              		.loc 1 343 17 view .LVU141
 381 016e F5D1     		bne	.L18
 382 0170 4544     		add	r5, r5, r8
 383              	.LVL50:
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           j = numCols;
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0U)
 384              		.loc 1 358 17 view .LVU142
 385 0172 3A46     		mov	r2, r7
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 386              		.loc 1 337 21 is_stmt 0 view .LVU143
 387 0174 DDE90013 		ldrd	r1, r3, [sp]
 388              	.LVL51:
 389              	.L19:
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT2;
 390              		.loc 1 362 13 is_stmt 1 view .LVU144
 391              		.loc 1 362 17 is_stmt 0 view .LVU145
 392 0178 92ED007B 		vldr.64	d7, [r2]
 393              	.LVL52:
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 394              		.loc 1 363 13 is_stmt 1 view .LVU146
 395              		.loc 1 363 28 is_stmt 0 view .LVU147
 396 017c B1EC025B 		vldmia.64	r1!, {d5}
 397              	.LVL53:
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 398              		.loc 1 358 17 view .LVU148
 399 0180 013B     		subs	r3, r3, #1
 400              	.LVL54:
 401              		.loc 1 363 28 view .LVU149
 402 0182 A5EE467B 		vfms.f64	d7, d5, d6
 403              	.LVL55:
 404              		.loc 1 363 22 view .LVU150
 405 0186 A2EC027B 		vstmia.64	r2!, {d7}
 406              	.LVL56:
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement loop counter */
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 407              		.loc 1 366 13 is_stmt 1 view .LVU151
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 408              		.loc 1 358 17 view .LVU152
 409 018a F5D1     		bne	.L19
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 410              		.loc 1 319 13 is_stmt 0 view .LVU153
 411 018c A642     		cmp	r6, r4
 412 018e 6744     		add	r7, r7, ip
 413              	.LVL57:
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccrDqndT.s 			page 16


 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment temporary input pointer */
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 414              		.loc 1 372 9 is_stmt 1 view .LVU154
 415              		.loc 1 372 15 is_stmt 0 view .LVU155
 416 0190 5544     		add	r5, r5, r10
 417              	.LVL58:
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement loop counter */
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         k--;
 418              		.loc 1 375 9 is_stmt 1 view .LVU156
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment pivot index */
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         i++;
 419              		.loc 1 378 9 view .LVU157
 420              		.loc 1 378 10 is_stmt 0 view .LVU158
 421 0192 04F10103 		add	r3, r4, #1
 422              	.LVL59:
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 423              		.loc 1 319 13 is_stmt 1 view .LVU159
 424 0196 09D0     		beq	.L60
 425              	.LVL60:
 426              	.L31:
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 427              		.loc 1 319 13 is_stmt 0 view .LVU160
 428 0198 1C46     		mov	r4, r3
 429              	.LVL61:
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 430              		.loc 1 322 9 is_stmt 1 view .LVU161
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 431              		.loc 1 322 12 is_stmt 0 view .LVU162
 432 019a 7445     		cmp	r4, lr
 433 019c D5D1     		bne	.L16
 434              	.LVL62:
 435              	.L59:
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 436              		.loc 1 326 11 is_stmt 1 view .LVU163
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 437              		.loc 1 326 17 is_stmt 0 view .LVU164
 438 019e 4544     		add	r5, r5, r8
 439              	.LVL63:
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 440              		.loc 1 328 11 is_stmt 1 view .LVU165
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 441              		.loc 1 319 13 is_stmt 0 view .LVU166
 442 01a0 A642     		cmp	r6, r4
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 443              		.loc 1 328 17 view .LVU167
 444 01a2 6744     		add	r7, r7, ip
 445              	.LVL64:
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 446              		.loc 1 372 9 is_stmt 1 view .LVU168
 447              		.loc 1 378 10 is_stmt 0 view .LVU169
 448 01a4 04F10103 		add	r3, r4, #1
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 449              		.loc 1 372 15 view .LVU170
 450 01a8 5544     		add	r5, r5, r10
 451              	.LVL65:
ARM GAS  /tmp/ccrDqndT.s 			page 17


 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 452              		.loc 1 375 9 is_stmt 1 view .LVU171
 453              		.loc 1 378 9 view .LVU172
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 454              		.loc 1 319 13 view .LVU173
 455 01aa F5D1     		bne	.L31
 456              	.LVL66:
 457              	.L60:
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 458              		.loc 1 382 7 view .LVU174
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 459              		.loc 1 385 7 view .LVU175
 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 460              		.loc 1 388 7 view .LVU176
 461 01ac 009B     		ldr	r3, [sp]
 462              	.LVL67:
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 463              		.loc 1 161 11 is_stmt 0 view .LVU177
 464 01ae BBF1010B 		subs	fp, fp, #1
 465              	.LVL68:
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 466              		.loc 1 161 11 view .LVU178
 467 01b2 069A     		ldr	r2, [sp, #24]
 468              		.loc 1 388 8 view .LVU179
 469 01b4 0EF1010E 		add	lr, lr, #1
 470              	.LVL69:
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 471              		.loc 1 161 11 is_stmt 1 view .LVU180
 472 01b8 6344     		add	r3, r3, ip
 473 01ba DDF80C90 		ldr	r9, [sp, #12]
 474 01be A8F10808 		sub	r8, r8, #8
 475 01c2 0093     		str	r3, [sp]
 476              	.LVL70:
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 477              		.loc 1 161 11 is_stmt 0 view .LVU181
 478 01c4 029B     		ldr	r3, [sp, #8]
 479 01c6 1344     		add	r3, r3, r2
 480 01c8 0293     		str	r3, [sp, #8]
 481 01ca 7FF463AF 		bne	.L22
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #else
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0;                     /* Temporary input values  */
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccrDqndT.s 			page 18


 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) ||
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pDst->numRows != pDst->numCols) ||
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pSrc->numRows != pDst->numRows)   )
 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   else
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      * Matrix Inverse can be solved using elementary row operations.
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *  Gauss-Jordan Method:
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *        augmented matrix as follows:
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                      _  _          _     _      _   _         _         _
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  |  a11  a12  | | | 1   0  |   |       |  X11 X12  |
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  |            | | |        |   |   =   |           |
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |_ |_ a21  a22 _| | |_0   1 _|  _|       |_ X21 X21 _|
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      3. Begin with the first row. Let i = 1.
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      4. Check to see if the pivot for row i is zero.
 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The pivot is the element of the main diagonal that is on the current row.
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         For instance, if working with row i, then the pivot element is aii.
 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         If the pivot is zero, exchange that row with a row below it that does not
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         contain a zero in column i. If this is not possible, then an inverse
 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         to that matrix does not exist.
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      5. Divide every element of row i by the pivot.
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         for every element below and above the main diagonal.
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, src).
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         Therefore, the matrix to the right of the bar is our solution(dst matrix, dst).
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *---------------------------------------------------------------------------------------------
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0U)
ARM GAS  /tmp/ccrDqndT.s 			page 19


 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0;
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1U;
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement loop counter */
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 480:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 481:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 482:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 483:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 484:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 485:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 486:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0U;
 487:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 488:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0U)
 489:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 491:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 492:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 493:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 494:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 495:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 496:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 497:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
 498:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 499:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 500:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 501:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 502:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 503:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 504:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 505:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 506:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 507:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1U;
 508:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 509:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero */
 510:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (*pInT1 == 0.0)
 511:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 512:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 513:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         for (i = (l + 1U); i < numRows; i++)
ARM GAS  /tmp/ccrDqndT.s 			page 20


 514:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 515:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 516:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 517:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 518:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 519:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Check if there is a non zero pivot element to
 520:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 521:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           if (*pInT2 != 0.0)
 522:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 523:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 524:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 525:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0U; j < (numCols - l); j++)
 526:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 527:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 528:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 529:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 530:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 531:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 532:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 533:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0U; j < numCols; j++)
 534:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 535:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 536:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 537:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 538:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 539:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 540:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 541:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1U;
 542:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 543:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 544:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 545:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 546:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 547:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 548:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 549:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 550:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 551:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 552:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 553:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1U) && (in == 0.0))
 554:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 555:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 556:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 557:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 558:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 559:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 560:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 561:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 562:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 563:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 564:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pPivotRowDst;
 565:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 566:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 567:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *(pIn + (l * numCols));
 568:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 569:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 570:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
ARM GAS  /tmp/ccrDqndT.s 			page 21


 571:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0U; j < (numCols - l); j++)
 572:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 573:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 574:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 575:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1 = *pInT1 / in;
 576:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1++;
 577:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 578:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0U; j < numCols; j++)
 579:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 580:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 581:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 582:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1 = *pOutT1 / in;
 583:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pOutT1++;
 584:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 585:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 586:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 587:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 588:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 589:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 590:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 591:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut;
 592:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 593:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0U; i < numRows; i++)
 594:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 595:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 596:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 597:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 598:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 599:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 600:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 601:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT1 += numCols;
 602:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 603:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         else
 604:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 605:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
 606:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 607:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 608:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 609:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 610:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 611:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 612:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 613:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 614:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0U; j < (numCols - l); j++)
 615:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 616:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 617:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 618:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1 = *pInT1 - (in * *pPRT_in++);
 619:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             pInT1++;
 620:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 621:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 622:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 623:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 624:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0U; j < numCols; j++)
 625:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 626:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 627:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
ARM GAS  /tmp/ccrDqndT.s 			page 22


 628:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
 629:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             pOutT1++;
 630:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 631:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 632:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 633:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 634:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment temporary input pointer */
 635:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 636:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 637:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 638:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 639:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 640:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 641:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 642:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 643:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 644:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 645:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 646:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 647:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 648:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #if defined (ARM_MATH_DSP) */
 649:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 650:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SUCCESS */
 651:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SUCCESS;
 482              		.loc 1 651 5 is_stmt 1 view .LVU182
 483              	.LVL71:
 652:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 653:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     if ((flag != 1U) && (in == 0.0))
 484              		.loc 1 653 5 view .LVU183
 485              		.loc 1 653 8 is_stmt 0 view .LVU184
 486 01ce B5EE406B 		vcmp.f64	d6, #0
 487 01d2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 488 01d6 08D0     		beq	.L23
 489              	.L32:
 651:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 490              		.loc 1 651 12 view .LVU185
 491 01d8 0020     		movs	r0, #0
 492              	.LVL72:
 654:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 655:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn = pSrc->pData;
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 657:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (pIn[i] != 0.0)
 659:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 660:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 661:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 662:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (i == numRows * numCols)
 663:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         status = ARM_MATH_SINGULAR;
 664:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 665:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 666:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 667:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Return to application */
 668:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   return (status);
 669:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** }
 493              		.loc 1 669 1 view .LVU186
 494 01da 09B0     		add	sp, sp, #36
 495              	.LCFI2:
ARM GAS  /tmp/ccrDqndT.s 			page 23


 496              		.cfi_remember_state
 497              		.cfi_def_cfa_offset 36
 498              		@ sp needed
 499 01dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 500              	.LVL73:
 501              	.L7:
 502              	.LCFI3:
 503              		.cfi_restore_state
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 504              		.loc 1 262 16 view .LVU187
 505 01e0 6FF00400 		mvn	r0, #4
 506              		.loc 1 669 1 view .LVU188
 507 01e4 09B0     		add	sp, sp, #36
 508              	.LCFI4:
 509              		.cfi_remember_state
 510              		.cfi_def_cfa_offset 36
 511              		@ sp needed
 512 01e6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 513              	.LVL74:
 514              	.L23:
 515              	.LCFI5:
 516              		.cfi_restore_state
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 517              		.loc 1 656 19 is_stmt 1 view .LVU189
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 518              		.loc 1 656 31 is_stmt 0 view .LVU190
 519 01ea 019B     		ldr	r3, [sp, #4]
 520 01ec 03FB09F9 		mul	r9, r3, r9
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 521              		.loc 1 656 31 view .LVU191
 522 01f0 079B     		ldr	r3, [sp, #28]
 523 01f2 01E0     		b	.L24
 524              	.LVL75:
 525              	.L61:
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 526              		.loc 1 656 7 discriminator 2 view .LVU192
 527 01f4 CB45     		cmp	fp, r9
 528 01f6 F3D0     		beq	.L7
 529              	.LVL76:
 530              	.L24:
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 531              		.loc 1 658 9 is_stmt 1 view .LVU193
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 532              		.loc 1 656 42 view .LVU194
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 533              		.loc 1 656 43 is_stmt 0 view .LVU195
 534 01f8 0BF1010B 		add	fp, fp, #1
 535              	.LVL77:
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 536              		.loc 1 656 19 is_stmt 1 view .LVU196
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 537              		.loc 1 658 16 is_stmt 0 view .LVU197
 538 01fc B3EC027B 		vldmia.64	r3!, {d7}
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 539              		.loc 1 658 12 view .LVU198
 540 0200 B5EE407B 		vcmp.f64	d7, #0
 541 0204 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccrDqndT.s 			page 24


 542 0208 F4D0     		beq	.L61
 543 020a E5E7     		b	.L32
 544              	.L63:
 545 020c AFF30080 		.align	3
 546              	.L62:
 547 0210 00000000 		.word	0
 548 0214 00000000 		.word	0
 549 0218 0000F03F 		.word	1072693248
 550              		.cfi_endproc
 551              	.LFE145:
 553              		.text
 554              	.Letext0:
 555              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 556              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 557              		.file 4 "/usr/include/newlib/sys/_types.h"
 558              		.file 5 "/usr/include/newlib/sys/reent.h"
 559              		.file 6 "/usr/include/newlib/sys/lock.h"
 560              		.file 7 "/usr/include/newlib/math.h"
 561              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccrDqndT.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_inverse_f64.c
     /tmp/ccrDqndT.s:17     .text.arm_mat_inverse_f64:0000000000000000 $t
     /tmp/ccrDqndT.s:26     .text.arm_mat_inverse_f64:0000000000000000 arm_mat_inverse_f64
     /tmp/ccrDqndT.s:547    .text.arm_mat_inverse_f64:0000000000000210 $d

NO UNDEFINED SYMBOLS
