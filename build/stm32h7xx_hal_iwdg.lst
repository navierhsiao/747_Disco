ARM GAS  /tmp/cc6z2a0h.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_iwdg.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_IWDG_Init,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_IWDG_Init
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_IWDG_Init:
  26              	.LFB331:
  27              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @file    stm32h7xx_hal_iwdg.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @brief   IWDG HAL module driver.
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *          This file provides firmware functions to manage the following
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *          functionalities of the Independent Watchdog (IWDG) peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *           + Initialization and Start functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *           + IO operation functions
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   @verbatim
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ==============================================================================
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****                     ##### IWDG Generic features #####
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ==============================================================================
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   [..]
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) The IWDG can be started by either software or hardware (configurable
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         through option byte).
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) The IWDG is clocked by the Low-Speed Internal clock (LSI) and thus stays
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         active even if the main clock fails.
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) Once the IWDG is started, the LSI is forced ON and both cannot be
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         disabled. The counter starts counting down from the reset value (0xFFF).
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         When it reaches the end of count value (0x000) a reset signal is
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         generated (IWDG reset).
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) Whenever the key value 0x0000 AAAA is written in the IWDG_KR register,
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         the IWDG_RLR value is reloaded into the counter and the watchdog reset
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         is prevented.
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) The IWDG is implemented in the VDD voltage domain that is still functional
ARM GAS  /tmp/cc6z2a0h.s 			page 2


  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         in STOP and STANDBY mode (IWDG reset can wake up the CPU from STANDBY).
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         IWDGRST flag in RCC_CSR register can be used to inform when an IWDG
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         reset occurs.
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (+) Debug mode: When the microcontroller enters debug mode (core halted),
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         the IWDG counter either continues to work normally or stops, depending
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         on DBG_IWDG_STOP configuration bit in DBG module, accessible through
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         __HAL_DBGMCU_FREEZE_IWDG1() or __HAL_DBGMCU_FREEZE2_IWDG2() and
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         __HAL_DBGMCU_UnFreeze_IWDG1 or __HAL_DBGMCU_UnFreeze2_IWDG2() macros.
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     [..] Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          The IWDG timeout may vary due to LSI clock frequency dispersion.
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          STM32H7xx devices provide the capability to measure the LSI clock
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          frequency (LSI clock is internally connected to TIM16 CH1 input capture).
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          The measured value can be used to have an IWDG timeout with an
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          acceptable accuracy.
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     [..] Default timeout value (necessary for IWDG_SR status register update):
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          Constant LSI_VALUE is defined based on the nominal LSI clock frequency.
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          This frequency being subject to variations as mentioned above, the
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          default timeout value (defined through constant HAL_IWDG_DEFAULT_TIMEOUT
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          below) may become too short or too long.
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          In such cases, this default timeout value can be tuned by redefining
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          the constant LSI_VALUE at user-application level (based, for instance,
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****          on the measured LSI clock frequency as explained above).
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****                      ##### How to use this driver #####
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ==============================================================================
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   [..]
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (#) Use IWDG using HAL_IWDG_Init() function to :
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (++) Enable instance by writing Start keyword in IWDG_KEY register. LSI
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****            clock is forced ON and IWDG counter starts counting down.
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (++) Enable write access to configuration registers:
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****           IWDG_PR, IWDG_RLR and IWDG_WINR.
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (++) Configure the IWDG prescaler and counter reload value. This reload
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****            value will be loaded in the IWDG counter each time the watchdog is
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****            reloaded, then the IWDG will start counting down from this value.
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (++) Depending on window parameter:
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         (+++) If Window Init parameter is same as Window register value,
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****              nothing more is done but reload counter value in order to exit
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****              function with exact time base.
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         (+++) Else modify Window register. This will automatically reload
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****              watchdog counter.
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (++) Wait for status flags to be reset.
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     (#) Then the application program must refresh the IWDG counter at regular
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         HAL_IWDG_Refresh() function.
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****      *** IWDG HAL driver macros list ***
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****      ====================================
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****      [..]
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****        Below the list of most used macros in IWDG HAL driver:
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) __HAL_IWDG_START: Enable the IWDG peripheral
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) __HAL_IWDG_RELOAD_COUNTER: Reloads IWDG counter with value defined in
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****           the reload register
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
ARM GAS  /tmp/cc6z2a0h.s 			page 3


  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   @endverbatim
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ******************************************************************************
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @attention
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * All rights reserved.</center></h2>
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * the "License"; You may not use this file except in compliance with the
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * License. You may obtain a copy of the License at:
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *                        opensource.org/licenses/BSD-3-Clause
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   ******************************************************************************
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Includes ------------------------------------------------------------------*/
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** #include "stm32h7xx_hal.h"
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @addtogroup STM32H7xx_HAL_Driver
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** #ifdef HAL_IWDG_MODULE_ENABLED
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @addtogroup IWDG
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @brief IWDG HAL module driver.
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Private define ------------------------------------------------------------*/
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @defgroup IWDG_Private_Defines IWDG Private Defines
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Status register needs up to 5 LSI clock periods divided by the clock
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    prescaler to be updated. The number of LSI clock periods is upper-rounded to
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    6 for the timeout value calculation.
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    The timeout value is also calculated using the highest prescaler (256) and
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    the LSI_VALUE constant. The value of this constant can be changed by the user
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    to take into account possible LSI clock period variations.
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****    The timeout value is multiplied by 1000 to be converted in milliseconds. */
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** #define HAL_IWDG_DEFAULT_TIMEOUT        ((6UL * 256UL * 1000UL) / LSI_VALUE)
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** #define IWDG_KERNEL_UPDATE_FLAGS        (IWDG_SR_WVU | IWDG_SR_RVU | IWDG_SR_PVU)
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /**
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @}
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Private macro -------------------------------------------------------------*/
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Private variables ---------------------------------------------------------*/
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /* Exported functions --------------------------------------------------------*/
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group1
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *  @brief    Initialization and Start functions.
ARM GAS  /tmp/cc6z2a0h.s 			page 4


 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** @verbatim
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  ===============================================================================
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****           ##### Initialization and Start functions #####
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  ===============================================================================
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) Initialize the IWDG according to the specified parameters in the
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****           IWDG_InitTypeDef of associated handle.
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) Manage Window option.
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) Once initialization is performed in HAL_IWDG_Init function, Watchdog
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****           is reloaded in order to exit function with correct time base.
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** @endverbatim
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /**
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @brief  Initialize the IWDG according to the specified parameters in the
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *         IWDG_InitTypeDef and start watchdog. Before exiting function,
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *         watchdog is refreshed in order to have correct time base.
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @retval HAL status
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** {
  28              		.loc 1 171 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   uint32_t tickstart;
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Check the IWDG handle allocation */
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   if (hiwdg == NULL)
  44              		.loc 1 175 6
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 01D1     		bne	.L2
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     return HAL_ERROR;
  48              		.loc 1 177 12
  49 000e 0123     		movs	r3, #1
  50 0010 41E0     		b	.L3
  51              	.L2:
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   }
ARM GAS  /tmp/cc6z2a0h.s 			page 5


 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Check the parameters */
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Enable IWDG. LSI is turned on automatically */
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   __HAL_IWDG_START(hiwdg);
  52              		.loc 1 187 3
  53 0012 7B68     		ldr	r3, [r7, #4]
  54 0014 1B68     		ldr	r3, [r3]
  55 0016 4CF6CC42 		movw	r2, #52428
  56 001a 1A60     		str	r2, [r3]
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   0x5555 in KR */
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   IWDG_ENABLE_WRITE_ACCESS(hiwdg);
  57              		.loc 1 191 3
  58 001c 7B68     		ldr	r3, [r7, #4]
  59 001e 1B68     		ldr	r3, [r3]
  60 0020 45F25552 		movw	r2, #21845
  61 0024 1A60     		str	r2, [r3]
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Write to IWDG registers the Prescaler & Reload values to work with */
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  62              		.loc 1 194 8
  63 0026 7B68     		ldr	r3, [r7, #4]
  64 0028 1B68     		ldr	r3, [r3]
  65              		.loc 1 194 36
  66 002a 7A68     		ldr	r2, [r7, #4]
  67 002c 5268     		ldr	r2, [r2, #4]
  68              		.loc 1 194 23
  69 002e 5A60     		str	r2, [r3, #4]
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   hiwdg->Instance->RLR = hiwdg->Init.Reload;
  70              		.loc 1 195 8
  71 0030 7B68     		ldr	r3, [r7, #4]
  72 0032 1B68     		ldr	r3, [r3]
  73              		.loc 1 195 37
  74 0034 7A68     		ldr	r2, [r7, #4]
  75 0036 9268     		ldr	r2, [r2, #8]
  76              		.loc 1 195 24
  77 0038 9A60     		str	r2, [r3, #8]
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Check pending flag, if previous update not done, return timeout */
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   tickstart = HAL_GetTick();
  78              		.loc 1 198 15
  79 003a FFF7FEFF 		bl	HAL_GetTick
  80 003e F860     		str	r0, [r7, #12]
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Wait for register to be updated */
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
  81              		.loc 1 201 9
  82 0040 0FE0     		b	.L4
  83              	.L5:
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
ARM GAS  /tmp/cc6z2a0h.s 			page 6


  84              		.loc 1 203 10
  85 0042 FFF7FEFF 		bl	HAL_GetTick
  86 0046 0246     		mov	r2, r0
  87              		.loc 1 203 24
  88 0048 FB68     		ldr	r3, [r7, #12]
  89 004a D31A     		subs	r3, r2, r3
  90              		.loc 1 203 8
  91 004c 302B     		cmp	r3, #48
  92 004e 08D9     		bls	.L4
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     {
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
  93              		.loc 1 205 17
  94 0050 7B68     		ldr	r3, [r7, #4]
  95 0052 1B68     		ldr	r3, [r3]
  96              		.loc 1 205 27
  97 0054 DB68     		ldr	r3, [r3, #12]
  98              		.loc 1 205 32
  99 0056 03F00703 		and	r3, r3, #7
 100              		.loc 1 205 10
 101 005a 002B     		cmp	r3, #0
 102 005c 01D0     		beq	.L4
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       {
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****         return HAL_TIMEOUT;
 103              		.loc 1 207 16
 104 005e 0323     		movs	r3, #3
 105 0060 19E0     		b	.L3
 106              	.L4:
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 107              		.loc 1 201 16
 108 0062 7B68     		ldr	r3, [r7, #4]
 109 0064 1B68     		ldr	r3, [r3]
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 110              		.loc 1 201 26
 111 0066 DB68     		ldr	r3, [r3, #12]
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 112              		.loc 1 201 31
 113 0068 03F00703 		and	r3, r3, #7
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 114              		.loc 1 201 9
 115 006c 002B     		cmp	r3, #0
 116 006e E8D1     		bne	.L5
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       }
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     }
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   }
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* If window parameter is different than current value, modify window
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   register */
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 117              		.loc 1 214 12
 118 0070 7B68     		ldr	r3, [r7, #4]
 119 0072 1B68     		ldr	r3, [r3]
 120              		.loc 1 214 22
 121 0074 1A69     		ldr	r2, [r3, #16]
 122              		.loc 1 214 43
 123 0076 7B68     		ldr	r3, [r7, #4]
 124 0078 DB68     		ldr	r3, [r3, #12]
 125              		.loc 1 214 6
ARM GAS  /tmp/cc6z2a0h.s 			page 7


 126 007a 9A42     		cmp	r2, r3
 127 007c 05D0     		beq	.L6
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     even if window feature is disabled, Watchdog will be reloaded by writing
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     windows register */
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     hiwdg->Instance->WINR = hiwdg->Init.Window;
 128              		.loc 1 219 10
 129 007e 7B68     		ldr	r3, [r7, #4]
 130 0080 1B68     		ldr	r3, [r3]
 131              		.loc 1 219 40
 132 0082 7A68     		ldr	r2, [r7, #4]
 133 0084 D268     		ldr	r2, [r2, #12]
 134              		.loc 1 219 27
 135 0086 1A61     		str	r2, [r3, #16]
 136 0088 04E0     		b	.L7
 137              	.L6:
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   }
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   else
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   {
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     /* Reload IWDG counter with value defined in the reload register */
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****     __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 138              		.loc 1 224 5
 139 008a 7B68     		ldr	r3, [r7, #4]
 140 008c 1B68     		ldr	r3, [r3]
 141 008e 4AF6AA22 		movw	r2, #43690
 142 0092 1A60     		str	r2, [r3]
 143              	.L7:
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   }
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Return function status */
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   return HAL_OK;
 144              		.loc 1 228 10
 145 0094 0023     		movs	r3, #0
 146              	.L3:
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** }
 147              		.loc 1 229 1
 148 0096 1846     		mov	r0, r3
 149 0098 1037     		adds	r7, r7, #16
 150              	.LCFI3:
 151              		.cfi_def_cfa_offset 8
 152 009a BD46     		mov	sp, r7
 153              	.LCFI4:
 154              		.cfi_def_cfa_register 13
 155              		@ sp needed
 156 009c 80BD     		pop	{r7, pc}
 157              		.cfi_endproc
 158              	.LFE331:
 160              		.section	.text.HAL_IWDG_Refresh,"ax",%progbits
 161              		.align	1
 162              		.global	HAL_IWDG_Refresh
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv5-d16
 168              	HAL_IWDG_Refresh:
 169              	.LFB332:
ARM GAS  /tmp/cc6z2a0h.s 			page 8


 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /**
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @}
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group2
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *  @brief   IO operation functions
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** @verbatim
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  ===============================================================================
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****                       ##### IO operation functions #####
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  ===============================================================================
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****       (+) Refresh the IWDG.
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** @endverbatim
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @{
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** /**
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @brief  Refresh the IWDG.
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   * @retval HAL status
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   */
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** {
 170              		.loc 1 258 1
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175 0000 80B4     		push	{r7}
 176              	.LCFI5:
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 7, -4
 179 0002 83B0     		sub	sp, sp, #12
 180              	.LCFI6:
 181              		.cfi_def_cfa_offset 16
 182 0004 00AF     		add	r7, sp, #0
 183              	.LCFI7:
 184              		.cfi_def_cfa_register 7
 185 0006 7860     		str	r0, [r7, #4]
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Reload IWDG counter with value defined in the reload register */
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 186              		.loc 1 260 3
 187 0008 7B68     		ldr	r3, [r7, #4]
 188 000a 1B68     		ldr	r3, [r3]
 189 000c 4AF6AA22 		movw	r2, #43690
 190 0010 1A60     		str	r2, [r3]
 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** 
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   /* Return function status */
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c ****   return HAL_OK;
 191              		.loc 1 263 10
 192 0012 0023     		movs	r3, #0
ARM GAS  /tmp/cc6z2a0h.s 			page 9


 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_iwdg.c **** }
 193              		.loc 1 264 1
 194 0014 1846     		mov	r0, r3
 195 0016 0C37     		adds	r7, r7, #12
 196              	.LCFI8:
 197              		.cfi_def_cfa_offset 4
 198 0018 BD46     		mov	sp, r7
 199              	.LCFI9:
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 001a 5DF8047B 		ldr	r7, [sp], #4
 203              	.LCFI10:
 204              		.cfi_restore 7
 205              		.cfi_def_cfa_offset 0
 206 001e 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE332:
 210              		.text
 211              	.Letext0:
 212              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 213              		.file 3 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 214              		.file 4 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 215              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 216              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 217              		.file 7 "/usr/include/newlib/sys/_types.h"
 218              		.file 8 "/usr/include/newlib/sys/reent.h"
 219              		.file 9 "/usr/include/newlib/sys/lock.h"
 220              		.file 10 "/usr/include/newlib/math.h"
 221              		.file 11 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 222              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 223              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_iwdg.h"
 224              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 225              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cc6z2a0h.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_iwdg.c
     /tmp/cc6z2a0h.s:17     .text.HAL_IWDG_Init:0000000000000000 $t
     /tmp/cc6z2a0h.s:25     .text.HAL_IWDG_Init:0000000000000000 HAL_IWDG_Init
     /tmp/cc6z2a0h.s:161    .text.HAL_IWDG_Refresh:0000000000000000 $t
     /tmp/cc6z2a0h.s:168    .text.HAL_IWDG_Refresh:0000000000000000 HAL_IWDG_Refresh

UNDEFINED SYMBOLS
HAL_GetTick
