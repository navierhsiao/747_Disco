ARM GAS  /tmp/ccWTSxZT.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"event_groups.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  17              		.align	1
  18              		.global	xEventGroupCreateStatic
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	xEventGroupCreateStatic:
  26              	.LFB4:
  27              		.file 1 "./Libraries/FreeRTOS/Source/event_groups.c"
   1:./Libraries/FreeRTOS/Source/event_groups.c **** /*
   2:./Libraries/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/event_groups.c ****  *
   5:./Libraries/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/event_groups.c ****  *
  12:./Libraries/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/event_groups.c ****  *
  15:./Libraries/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/event_groups.c ****  *
  22:./Libraries/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/event_groups.c ****  *
  25:./Libraries/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/event_groups.c ****  */
  27:./Libraries/FreeRTOS/Source/event_groups.c **** 
  28:./Libraries/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:./Libraries/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:./Libraries/FreeRTOS/Source/event_groups.c **** 
  31:./Libraries/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccWTSxZT.s 			page 2


  32:./Libraries/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:./Libraries/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:./Libraries/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:./Libraries/FreeRTOS/Source/event_groups.c **** 
  36:./Libraries/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:./Libraries/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:./Libraries/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:./Libraries/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:./Libraries/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:./Libraries/FreeRTOS/Source/event_groups.c **** 
  42:./Libraries/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:./Libraries/FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:./Libraries/FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:./Libraries/FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:./Libraries/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:./Libraries/FreeRTOS/Source/event_groups.c **** 
  48:./Libraries/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:./Libraries/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:./Libraries/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:./Libraries/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:./Libraries/FreeRTOS/Source/event_groups.c **** #else
  57:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:./Libraries/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:./Libraries/FreeRTOS/Source/event_groups.c **** #endif
  62:./Libraries/FreeRTOS/Source/event_groups.c **** 
  63:./Libraries/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:./Libraries/FreeRTOS/Source/event_groups.c **** {
  65:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:./Libraries/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:./Libraries/FreeRTOS/Source/event_groups.c **** 
  68:./Libraries/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:./Libraries/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:./Libraries/FreeRTOS/Source/event_groups.c **** 	#endif
  71:./Libraries/FreeRTOS/Source/event_groups.c **** 
  72:./Libraries/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:./Libraries/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:./Libraries/FreeRTOS/Source/event_groups.c **** 	#endif
  75:./Libraries/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:./Libraries/FreeRTOS/Source/event_groups.c **** 
  77:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:./Libraries/FreeRTOS/Source/event_groups.c **** 
  79:./Libraries/FreeRTOS/Source/event_groups.c **** /*
  80:./Libraries/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:./Libraries/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:./Libraries/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:./Libraries/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:./Libraries/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:./Libraries/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:./Libraries/FreeRTOS/Source/event_groups.c ****  */
  87:./Libraries/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:./Libraries/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccWTSxZT.s 			page 3


  89:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:./Libraries/FreeRTOS/Source/event_groups.c **** 
  91:./Libraries/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:./Libraries/FreeRTOS/Source/event_groups.c **** 
  93:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
  28              		.loc 1 94 2
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 86B0     		sub	sp, sp, #24
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  95:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:./Libraries/FreeRTOS/Source/event_groups.c **** 
  97:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:./Libraries/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  44              		.loc 1 98 3
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 0AD1     		bne	.L2
  48              	.LBB36:
  49              	.LBB37:
  50              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/ccWTSxZT.s 			page 4


  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
ARM GAS  /tmp/ccWTSxZT.s 			page 5


  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
ARM GAS  /tmp/ccWTSxZT.s 			page 6


 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccWTSxZT.s 			page 7


  51              		.loc 2 195 2
  52              		.syntax unified
  53              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  54 000e 4FF05003 			mov r3, #80												
  55 0012 83F31188 		msr basepri, r3											
  56 0016 BFF36F8F 		isb														
  57 001a BFF34F8F 		dsb														
  58              	
  59              	@ 0 "" 2
  60              		.thumb
  61              		.syntax unified
  62 001e 3B61     		str	r3, [r7, #16]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  63              		.loc 2 203 1
  64 0020 00BF     		nop
  65              	.L3:
  66              	.LBE37:
  67              	.LBE36:
  68              		.loc 1 98 3 discriminator 1
  69 0022 FEE7     		b	.L3
  70              	.L2:
  71              	.LBB38:
  99:./Libraries/FreeRTOS/Source/event_groups.c **** 
 100:./Libraries/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 102:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:./Libraries/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:./Libraries/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:./Libraries/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
  72              		.loc 1 105 20
  73 0024 2023     		movs	r3, #32
  74 0026 BB60     		str	r3, [r7, #8]
 106:./Libraries/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  75              		.loc 1 106 4
  76 0028 BB68     		ldr	r3, [r7, #8]
  77 002a 202B     		cmp	r3, #32
  78 002c 0AD0     		beq	.L4
  79              	.LBB39:
  80              	.LBB40:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
  81              		.loc 2 195 2
  82              		.syntax unified
  83              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  84 002e 4FF05003 			mov r3, #80												
  85 0032 83F31188 		msr basepri, r3											
  86 0036 BFF36F8F 		isb														
  87 003a BFF34F8F 		dsb														
  88              	
  89              	@ 0 "" 2
  90              		.thumb
ARM GAS  /tmp/ccWTSxZT.s 			page 8


  91              		.syntax unified
  92 003e FB60     		str	r3, [r7, #12]
  93              		.loc 2 203 1
  94 0040 00BF     		nop
  95              	.L5:
  96              	.LBE40:
  97              	.LBE39:
  98              		.loc 1 106 4 discriminator 2
  99 0042 FEE7     		b	.L5
 100              	.L4:
 101              	.LBE38:
 107:./Libraries/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:./Libraries/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:./Libraries/FreeRTOS/Source/event_groups.c **** 
 110:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 102              		.loc 1 111 15
 103 0044 7B68     		ldr	r3, [r7, #4]
 104 0046 7B61     		str	r3, [r7, #20]
 112:./Libraries/FreeRTOS/Source/event_groups.c **** 
 113:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 105              		.loc 1 113 5
 106 0048 7B69     		ldr	r3, [r7, #20]
 107 004a 002B     		cmp	r3, #0
 108 004c 0AD0     		beq	.L6
 114:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 115:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 109              		.loc 1 115 29
 110 004e 7B69     		ldr	r3, [r7, #20]
 111 0050 0022     		movs	r2, #0
 112 0052 1A60     		str	r2, [r3]
 116:./Libraries/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 113              		.loc 1 116 4
 114 0054 7B69     		ldr	r3, [r7, #20]
 115 0056 0433     		adds	r3, r3, #4
 116 0058 1846     		mov	r0, r3
 117 005a FFF7FEFF 		bl	vListInitialise
 117:./Libraries/FreeRTOS/Source/event_groups.c **** 
 118:./Libraries/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 120:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:./Libraries/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:./Libraries/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:./Libraries/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 118              		.loc 1 123 40
 119 005e 7B69     		ldr	r3, [r7, #20]
 120 0060 0122     		movs	r2, #1
 121 0062 1A77     		strb	r2, [r3, #28]
 122              	.L6:
 124:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 125:./Libraries/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:./Libraries/FreeRTOS/Source/event_groups.c **** 
 127:./Libraries/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 129:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 130:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 131:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
ARM GAS  /tmp/ccWTSxZT.s 			page 9


 132:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:./Libraries/FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:./Libraries/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 136:./Libraries/FreeRTOS/Source/event_groups.c **** 
 137:./Libraries/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 123              		.loc 1 137 10
 124 0064 7B69     		ldr	r3, [r7, #20]
 138:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 125              		.loc 1 138 2
 126 0066 1846     		mov	r0, r3
 127 0068 1837     		adds	r7, r7, #24
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130 006a BD46     		mov	sp, r7
 131              	.LCFI4:
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 006c 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE4:
 138              		.section	.text.xEventGroupCreate,"ax",%progbits
 139              		.align	1
 140              		.global	xEventGroupCreate
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv5-d16
 146              	xEventGroupCreate:
 147              	.LFB5:
 139:./Libraries/FreeRTOS/Source/event_groups.c **** 
 140:./Libraries/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:./Libraries/FreeRTOS/Source/event_groups.c **** 
 143:./Libraries/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:./Libraries/FreeRTOS/Source/event_groups.c **** 
 145:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 148              		.loc 1 146 2
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI6:
 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI7:
 162              		.cfi_def_cfa_register 7
 147:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:./Libraries/FreeRTOS/Source/event_groups.c **** 
 149:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:./Libraries/FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
ARM GAS  /tmp/ccWTSxZT.s 			page 10


 151:./Libraries/FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:./Libraries/FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:./Libraries/FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:./Libraries/FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:./Libraries/FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:./Libraries/FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:./Libraries/FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:./Libraries/FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:./Libraries/FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:./Libraries/FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:./Libraries/FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 163              		.loc 1 162 36
 164 0006 2020     		movs	r0, #32
 165 0008 FFF7FEFF 		bl	pvPortMalloc
 166 000c 7860     		str	r0, [r7, #4]
 163:./Libraries/FreeRTOS/Source/event_groups.c **** 
 164:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 167              		.loc 1 164 5
 168 000e 7B68     		ldr	r3, [r7, #4]
 169 0010 002B     		cmp	r3, #0
 170 0012 0AD0     		beq	.L9
 165:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 166:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 171              		.loc 1 166 29
 172 0014 7B68     		ldr	r3, [r7, #4]
 173 0016 0022     		movs	r2, #0
 174 0018 1A60     		str	r2, [r3]
 167:./Libraries/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 175              		.loc 1 167 4
 176 001a 7B68     		ldr	r3, [r7, #4]
 177 001c 0433     		adds	r3, r3, #4
 178 001e 1846     		mov	r0, r3
 179 0020 FFF7FEFF 		bl	vListInitialise
 168:./Libraries/FreeRTOS/Source/event_groups.c **** 
 169:./Libraries/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 171:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:./Libraries/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:./Libraries/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:./Libraries/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 180              		.loc 1 174 40
 181 0024 7B68     		ldr	r3, [r7, #4]
 182 0026 0022     		movs	r2, #0
 183 0028 1A77     		strb	r2, [r3, #28]
 184              	.L9:
 175:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 176:./Libraries/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:./Libraries/FreeRTOS/Source/event_groups.c **** 
 178:./Libraries/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 180:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 181:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 182:./Libraries/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 184:./Libraries/FreeRTOS/Source/event_groups.c **** 
 185:./Libraries/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
ARM GAS  /tmp/ccWTSxZT.s 			page 11


 185              		.loc 1 185 10
 186 002a 7B68     		ldr	r3, [r7, #4]
 186:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 187              		.loc 1 186 2
 188 002c 1846     		mov	r0, r3
 189 002e 0837     		adds	r7, r7, #8
 190              	.LCFI8:
 191              		.cfi_def_cfa_offset 8
 192 0030 BD46     		mov	sp, r7
 193              	.LCFI9:
 194              		.cfi_def_cfa_register 13
 195              		@ sp needed
 196 0032 80BD     		pop	{r7, pc}
 197              		.cfi_endproc
 198              	.LFE5:
 200              		.section	.text.xEventGroupSync,"ax",%progbits
 201              		.align	1
 202              		.global	xEventGroupSync
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv5-d16
 208              	xEventGroupSync:
 209              	.LFB6:
 187:./Libraries/FreeRTOS/Source/event_groups.c **** 
 188:./Libraries/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/event_groups.c **** 
 191:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:./Libraries/FreeRTOS/Source/event_groups.c **** {
 210              		.loc 1 192 1
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 48
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              	.LCFI10:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 8CB0     		sub	sp, sp, #48
 220              	.LCFI11:
 221              		.cfi_def_cfa_offset 56
 222 0004 00AF     		add	r7, sp, #0
 223              	.LCFI12:
 224              		.cfi_def_cfa_register 7
 225 0006 F860     		str	r0, [r7, #12]
 226 0008 B960     		str	r1, [r7, #8]
 227 000a 7A60     		str	r2, [r7, #4]
 228 000c 3B60     		str	r3, [r7]
 193:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 229              		.loc 1 194 15
 230 000e FB68     		ldr	r3, [r7, #12]
 231 0010 BB62     		str	r3, [r7, #40]
 195:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 232              		.loc 1 196 12
ARM GAS  /tmp/ccWTSxZT.s 			page 12


 233 0012 0023     		movs	r3, #0
 234 0014 7B62     		str	r3, [r7, #36]
 197:./Libraries/FreeRTOS/Source/event_groups.c **** 
 198:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 235              		.loc 1 198 2
 236 0016 7B68     		ldr	r3, [r7, #4]
 237 0018 03F07F43 		and	r3, r3, #-16777216
 238 001c 002B     		cmp	r3, #0
 239 001e 0AD0     		beq	.L12
 240              	.LBB41:
 241              	.LBB42:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 242              		.loc 2 195 2
 243              		.syntax unified
 244              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 245 0020 4FF05003 			mov r3, #80												
 246 0024 83F31188 		msr basepri, r3											
 247 0028 BFF36F8F 		isb														
 248 002c BFF34F8F 		dsb														
 249              	
 250              	@ 0 "" 2
 251              		.thumb
 252              		.syntax unified
 253 0030 BB61     		str	r3, [r7, #24]
 254              		.loc 2 203 1
 255 0032 00BF     		nop
 256              	.L13:
 257              	.LBE42:
 258              	.LBE41:
 259              		.loc 1 198 2 discriminator 1
 260 0034 FEE7     		b	.L13
 261              	.L12:
 199:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 262              		.loc 1 199 2
 263 0036 7B68     		ldr	r3, [r7, #4]
 264 0038 002B     		cmp	r3, #0
 265 003a 0AD1     		bne	.L14
 266              	.LBB43:
 267              	.LBB44:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 268              		.loc 2 195 2
 269              		.syntax unified
 270              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 271 003c 4FF05003 			mov r3, #80												
 272 0040 83F31188 		msr basepri, r3											
 273 0044 BFF36F8F 		isb														
 274 0048 BFF34F8F 		dsb														
 275              	
 276              	@ 0 "" 2
 277              		.thumb
 278              		.syntax unified
 279 004c 7B61     		str	r3, [r7, #20]
 280              		.loc 2 203 1
 281 004e 00BF     		nop
 282              	.L15:
 283              	.LBE44:
 284              	.LBE43:
ARM GAS  /tmp/ccWTSxZT.s 			page 13


 285              		.loc 1 199 2 discriminator 2
 286 0050 FEE7     		b	.L15
 287              	.L14:
 200:./Libraries/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 202:./Libraries/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 288              		.loc 1 202 3
 289 0052 FFF7FEFF 		bl	xTaskGetSchedulerState
 290 0056 0346     		mov	r3, r0
 291 0058 002B     		cmp	r3, #0
 292 005a 02D1     		bne	.L16
 293              		.loc 1 202 3 is_stmt 0 discriminator 2
 294 005c 3B68     		ldr	r3, [r7]
 295 005e 002B     		cmp	r3, #0
 296 0060 01D1     		bne	.L17
 297              	.L16:
 298              		.loc 1 202 3 discriminator 3
 299 0062 0123     		movs	r3, #1
 300 0064 00E0     		b	.L18
 301              	.L17:
 302              		.loc 1 202 3 discriminator 4
 303 0066 0023     		movs	r3, #0
 304              	.L18:
 305              		.loc 1 202 3 discriminator 6
 306 0068 002B     		cmp	r3, #0
 307 006a 0AD1     		bne	.L19
 308              	.LBB45:
 309              	.LBB46:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 310              		.loc 2 195 2 is_stmt 1
 311              		.syntax unified
 312              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 313 006c 4FF05003 			mov r3, #80												
 314 0070 83F31188 		msr basepri, r3											
 315 0074 BFF36F8F 		isb														
 316 0078 BFF34F8F 		dsb														
 317              	
 318              	@ 0 "" 2
 319              		.thumb
 320              		.syntax unified
 321 007c 3B61     		str	r3, [r7, #16]
 322              		.loc 2 203 1
 323 007e 00BF     		nop
 324              	.L20:
 325              	.LBE46:
 326              	.LBE45:
 327              		.loc 1 202 3 discriminator 3
 328 0080 FEE7     		b	.L20
 329              	.L19:
 203:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 204:./Libraries/FreeRTOS/Source/event_groups.c **** 	#endif
 205:./Libraries/FreeRTOS/Source/event_groups.c **** 
 206:./Libraries/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 330              		.loc 1 206 2
 331 0082 FFF7FEFF 		bl	vTaskSuspendAll
 207:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 208:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
ARM GAS  /tmp/ccWTSxZT.s 			page 14


 332              		.loc 1 208 22
 333 0086 BB6A     		ldr	r3, [r7, #40]
 334 0088 1B68     		ldr	r3, [r3]
 335 008a 3B62     		str	r3, [r7, #32]
 209:./Libraries/FreeRTOS/Source/event_groups.c **** 
 210:./Libraries/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 336              		.loc 1 210 12
 337 008c B968     		ldr	r1, [r7, #8]
 338 008e F868     		ldr	r0, [r7, #12]
 339 0090 FFF7FEFF 		bl	xEventGroupSetBits
 211:./Libraries/FreeRTOS/Source/event_groups.c **** 
 212:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 340              		.loc 1 212 30
 341 0094 3A6A     		ldr	r2, [r7, #32]
 342 0096 BB68     		ldr	r3, [r7, #8]
 343 0098 1A43     		orrs	r2, r2, r3
 344              		.loc 1 212 46
 345 009a 7B68     		ldr	r3, [r7, #4]
 346 009c 1340     		ands	r3, r3, r2
 347              		.loc 1 212 5
 348 009e 7A68     		ldr	r2, [r7, #4]
 349 00a0 9A42     		cmp	r2, r3
 350 00a2 0DD1     		bne	.L21
 213:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 214:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 351              		.loc 1 215 13
 352 00a4 3A6A     		ldr	r2, [r7, #32]
 353 00a6 BB68     		ldr	r3, [r7, #8]
 354 00a8 1343     		orrs	r3, r3, r2
 355 00aa FB62     		str	r3, [r7, #44]
 216:./Libraries/FreeRTOS/Source/event_groups.c **** 
 217:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:./Libraries/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 356              		.loc 1 219 29
 357 00ac BB6A     		ldr	r3, [r7, #40]
 358 00ae 1A68     		ldr	r2, [r3]
 359              		.loc 1 219 32
 360 00b0 7B68     		ldr	r3, [r7, #4]
 361 00b2 DB43     		mvns	r3, r3
 362              		.loc 1 219 29
 363 00b4 1A40     		ands	r2, r2, r3
 364 00b6 BB6A     		ldr	r3, [r7, #40]
 365 00b8 1A60     		str	r2, [r3]
 220:./Libraries/FreeRTOS/Source/event_groups.c **** 
 221:./Libraries/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 366              		.loc 1 221 17
 367 00ba 0023     		movs	r3, #0
 368 00bc 3B60     		str	r3, [r7]
 369 00be 13E0     		b	.L22
 370              	.L21:
 222:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 223:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 224:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 225:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 371              		.loc 1 225 6
ARM GAS  /tmp/ccWTSxZT.s 			page 15


 372 00c0 3B68     		ldr	r3, [r7]
 373 00c2 002B     		cmp	r3, #0
 374 00c4 0BD0     		beq	.L23
 226:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 227:./Libraries/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:./Libraries/FreeRTOS/Source/event_groups.c **** 
 229:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:./Libraries/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:./Libraries/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:./Libraries/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 375              		.loc 1 232 5
 376 00c6 BB6A     		ldr	r3, [r7, #40]
 377 00c8 181D     		adds	r0, r3, #4
 378 00ca 7B68     		ldr	r3, [r7, #4]
 379 00cc 43F0A063 		orr	r3, r3, #83886080
 380 00d0 3A68     		ldr	r2, [r7]
 381 00d2 1946     		mov	r1, r3
 382 00d4 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 233:./Libraries/FreeRTOS/Source/event_groups.c **** 
 234:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:./Libraries/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:./Libraries/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:./Libraries/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 383              		.loc 1 238 14
 384 00d8 0023     		movs	r3, #0
 385 00da FB62     		str	r3, [r7, #44]
 386 00dc 04E0     		b	.L22
 387              	.L23:
 239:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 240:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 241:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 242:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:./Libraries/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 388              		.loc 1 244 14
 389 00de BB6A     		ldr	r3, [r7, #40]
 390 00e0 1B68     		ldr	r3, [r3]
 391 00e2 FB62     		str	r3, [r7, #44]
 245:./Libraries/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 392              		.loc 1 245 22
 393 00e4 0123     		movs	r3, #1
 394 00e6 7B62     		str	r3, [r7, #36]
 395              	.L22:
 246:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 247:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 248:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 249:./Libraries/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 396              		.loc 1 249 20
 397 00e8 FFF7FEFF 		bl	xTaskResumeAll
 398 00ec F861     		str	r0, [r7, #28]
 250:./Libraries/FreeRTOS/Source/event_groups.c **** 
 251:./Libraries/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 399              		.loc 1 251 4
 400 00ee 3B68     		ldr	r3, [r7]
 401 00f0 002B     		cmp	r3, #0
 402 00f2 2CD0     		beq	.L24
ARM GAS  /tmp/ccWTSxZT.s 			page 16


 252:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 253:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 403              		.loc 1 253 5
 404 00f4 FB69     		ldr	r3, [r7, #28]
 405 00f6 002B     		cmp	r3, #0
 406 00f8 07D1     		bne	.L25
 254:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 255:./Libraries/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 407              		.loc 1 255 4
 408 00fa 174B     		ldr	r3, .L29
 409 00fc 4FF08052 		mov	r2, #268435456
 410 0100 1A60     		str	r2, [r3]
 411              		.syntax unified
 412              	@ 255 "./Libraries/FreeRTOS/Source/event_groups.c" 1
 413 0102 BFF34F8F 		dsb
 414              	@ 0 "" 2
 415              	@ 255 "./Libraries/FreeRTOS/Source/event_groups.c" 1
 416 0106 BFF36F8F 		isb
 417              	@ 0 "" 2
 418              		.thumb
 419              		.syntax unified
 420              	.L25:
 256:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 257:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 258:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 259:./Libraries/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 261:./Libraries/FreeRTOS/Source/event_groups.c **** 
 262:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:./Libraries/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:./Libraries/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:./Libraries/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 421              		.loc 1 266 14
 422 010a FFF7FEFF 		bl	uxTaskResetEventItemValue
 423 010e F862     		str	r0, [r7, #44]
 267:./Libraries/FreeRTOS/Source/event_groups.c **** 
 268:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 424              		.loc 1 268 18
 425 0110 FB6A     		ldr	r3, [r7, #44]
 426 0112 03F00073 		and	r3, r3, #33554432
 427              		.loc 1 268 5
 428 0116 002B     		cmp	r3, #0
 429 0118 15D1     		bne	.L26
 269:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 270:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:./Libraries/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 430              		.loc 1 271 4
 431 011a FFF7FEFF 		bl	vPortEnterCritical
 272:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 273:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 432              		.loc 1 273 14
 433 011e BB6A     		ldr	r3, [r7, #40]
 434 0120 1B68     		ldr	r3, [r3]
 435 0122 FB62     		str	r3, [r7, #44]
 274:./Libraries/FreeRTOS/Source/event_groups.c **** 
 275:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
ARM GAS  /tmp/ccWTSxZT.s 			page 17


 276:./Libraries/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:./Libraries/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:./Libraries/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:./Libraries/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 436              		.loc 1 279 20
 437 0124 FA6A     		ldr	r2, [r7, #44]
 438 0126 7B68     		ldr	r3, [r7, #4]
 439 0128 1340     		ands	r3, r3, r2
 440              		.loc 1 279 7
 441 012a 7A68     		ldr	r2, [r7, #4]
 442 012c 9A42     		cmp	r2, r3
 443 012e 06D1     		bne	.L27
 280:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 281:./Libraries/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 444              		.loc 1 281 31
 445 0130 BB6A     		ldr	r3, [r7, #40]
 446 0132 1A68     		ldr	r2, [r3]
 447              		.loc 1 281 34
 448 0134 7B68     		ldr	r3, [r7, #4]
 449 0136 DB43     		mvns	r3, r3
 450              		.loc 1 281 31
 451 0138 1A40     		ands	r2, r2, r3
 452 013a BB6A     		ldr	r3, [r7, #40]
 453 013c 1A60     		str	r2, [r3]
 454              	.L27:
 282:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 283:./Libraries/FreeRTOS/Source/event_groups.c **** 				else
 284:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 285:./Libraries/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 287:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 288:./Libraries/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 455              		.loc 1 288 4
 456 013e FFF7FEFF 		bl	vPortExitCritical
 289:./Libraries/FreeRTOS/Source/event_groups.c **** 
 290:./Libraries/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 457              		.loc 1 290 21
 458 0142 0123     		movs	r3, #1
 459 0144 7B62     		str	r3, [r7, #36]
 460              	.L26:
 291:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 292:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 293:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 294:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 296:./Libraries/FreeRTOS/Source/event_groups.c **** 
 297:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:./Libraries/FreeRTOS/Source/event_groups.c **** 		returned. */
 299:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 461              		.loc 1 299 12
 462 0146 FB6A     		ldr	r3, [r7, #44]
 463 0148 23F07F43 		bic	r3, r3, #-16777216
 464 014c FB62     		str	r3, [r7, #44]
 465              	.L24:
 300:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 301:./Libraries/FreeRTOS/Source/event_groups.c **** 
 302:./Libraries/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
ARM GAS  /tmp/ccWTSxZT.s 			page 18


 303:./Libraries/FreeRTOS/Source/event_groups.c **** 
 304:./Libraries/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:./Libraries/FreeRTOS/Source/event_groups.c **** 
 307:./Libraries/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 466              		.loc 1 307 9
 467 014e FB6A     		ldr	r3, [r7, #44]
 308:./Libraries/FreeRTOS/Source/event_groups.c **** }
 468              		.loc 1 308 1
 469 0150 1846     		mov	r0, r3
 470 0152 3037     		adds	r7, r7, #48
 471              	.LCFI13:
 472              		.cfi_def_cfa_offset 8
 473 0154 BD46     		mov	sp, r7
 474              	.LCFI14:
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 0156 80BD     		pop	{r7, pc}
 478              	.L30:
 479              		.align	2
 480              	.L29:
 481 0158 04ED00E0 		.word	-536810236
 482              		.cfi_endproc
 483              	.LFE6:
 485              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 486              		.align	1
 487              		.global	xEventGroupWaitBits
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu fpv5-d16
 493              	xEventGroupWaitBits:
 494              	.LFB7:
 309:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:./Libraries/FreeRTOS/Source/event_groups.c **** 
 311:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:./Libraries/FreeRTOS/Source/event_groups.c **** {
 495              		.loc 1 312 1
 496              		.cfi_startproc
 497              		@ args = 4, pretend = 0, frame = 64
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0000 80B5     		push	{r7, lr}
 500              	.LCFI15:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 7, -8
 503              		.cfi_offset 14, -4
 504 0002 90B0     		sub	sp, sp, #64
 505              	.LCFI16:
 506              		.cfi_def_cfa_offset 72
 507 0004 00AF     		add	r7, sp, #0
 508              	.LCFI17:
 509              		.cfi_def_cfa_register 7
 510 0006 F860     		str	r0, [r7, #12]
 511 0008 B960     		str	r1, [r7, #8]
 512 000a 7A60     		str	r2, [r7, #4]
 513 000c 3B60     		str	r3, [r7]
 313:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
ARM GAS  /tmp/ccWTSxZT.s 			page 19


 514              		.loc 1 313 15
 515 000e FB68     		ldr	r3, [r7, #12]
 516 0010 7B63     		str	r3, [r7, #52]
 314:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 517              		.loc 1 314 23
 518 0012 0023     		movs	r3, #0
 519 0014 BB63     		str	r3, [r7, #56]
 315:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 520              		.loc 1 316 12
 521 0016 0023     		movs	r3, #0
 522 0018 3B63     		str	r3, [r7, #48]
 317:./Libraries/FreeRTOS/Source/event_groups.c **** 
 318:./Libraries/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:./Libraries/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 523              		.loc 1 320 2
 524 001a FB68     		ldr	r3, [r7, #12]
 525 001c 002B     		cmp	r3, #0
 526 001e 0AD1     		bne	.L32
 527              	.LBB47:
 528              	.LBB48:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 529              		.loc 2 195 2
 530              		.syntax unified
 531              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 532 0020 4FF05003 			mov r3, #80												
 533 0024 83F31188 		msr basepri, r3											
 534 0028 BFF36F8F 		isb														
 535 002c BFF34F8F 		dsb														
 536              	
 537              	@ 0 "" 2
 538              		.thumb
 539              		.syntax unified
 540 0030 3B62     		str	r3, [r7, #32]
 541              		.loc 2 203 1
 542 0032 00BF     		nop
 543              	.L33:
 544              	.LBE48:
 545              	.LBE47:
 546              		.loc 1 320 2 discriminator 1
 547 0034 FEE7     		b	.L33
 548              	.L32:
 321:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 549              		.loc 1 321 2
 550 0036 BB68     		ldr	r3, [r7, #8]
 551 0038 03F07F43 		and	r3, r3, #-16777216
 552 003c 002B     		cmp	r3, #0
 553 003e 0AD0     		beq	.L34
 554              	.LBB49:
 555              	.LBB50:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 556              		.loc 2 195 2
 557              		.syntax unified
 558              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 559 0040 4FF05003 			mov r3, #80												
 560 0044 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccWTSxZT.s 			page 20


 561 0048 BFF36F8F 		isb														
 562 004c BFF34F8F 		dsb														
 563              	
 564              	@ 0 "" 2
 565              		.thumb
 566              		.syntax unified
 567 0050 FB61     		str	r3, [r7, #28]
 568              		.loc 2 203 1
 569 0052 00BF     		nop
 570              	.L35:
 571              	.LBE50:
 572              	.LBE49:
 573              		.loc 1 321 2 discriminator 2
 574 0054 FEE7     		b	.L35
 575              	.L34:
 322:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 576              		.loc 1 322 2
 577 0056 BB68     		ldr	r3, [r7, #8]
 578 0058 002B     		cmp	r3, #0
 579 005a 0AD1     		bne	.L36
 580              	.LBB51:
 581              	.LBB52:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 582              		.loc 2 195 2
 583              		.syntax unified
 584              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 585 005c 4FF05003 			mov r3, #80												
 586 0060 83F31188 		msr basepri, r3											
 587 0064 BFF36F8F 		isb														
 588 0068 BFF34F8F 		dsb														
 589              	
 590              	@ 0 "" 2
 591              		.thumb
 592              		.syntax unified
 593 006c BB61     		str	r3, [r7, #24]
 594              		.loc 2 203 1
 595 006e 00BF     		nop
 596              	.L37:
 597              	.LBE52:
 598              	.LBE51:
 599              		.loc 1 322 2 discriminator 3
 600 0070 FEE7     		b	.L37
 601              	.L36:
 323:./Libraries/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 325:./Libraries/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 602              		.loc 1 325 3
 603 0072 FFF7FEFF 		bl	xTaskGetSchedulerState
 604 0076 0346     		mov	r3, r0
 605 0078 002B     		cmp	r3, #0
 606 007a 02D1     		bne	.L38
 607              		.loc 1 325 3 is_stmt 0 discriminator 2
 608 007c BB6C     		ldr	r3, [r7, #72]
 609 007e 002B     		cmp	r3, #0
 610 0080 01D1     		bne	.L39
 611              	.L38:
 612              		.loc 1 325 3 discriminator 3
ARM GAS  /tmp/ccWTSxZT.s 			page 21


 613 0082 0123     		movs	r3, #1
 614 0084 00E0     		b	.L40
 615              	.L39:
 616              		.loc 1 325 3 discriminator 4
 617 0086 0023     		movs	r3, #0
 618              	.L40:
 619              		.loc 1 325 3 discriminator 6
 620 0088 002B     		cmp	r3, #0
 621 008a 0AD1     		bne	.L41
 622              	.LBB53:
 623              	.LBB54:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 624              		.loc 2 195 2 is_stmt 1
 625              		.syntax unified
 626              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 627 008c 4FF05003 			mov r3, #80												
 628 0090 83F31188 		msr basepri, r3											
 629 0094 BFF36F8F 		isb														
 630 0098 BFF34F8F 		dsb														
 631              	
 632              	@ 0 "" 2
 633              		.thumb
 634              		.syntax unified
 635 009c 7B61     		str	r3, [r7, #20]
 636              		.loc 2 203 1
 637 009e 00BF     		nop
 638              	.L42:
 639              	.LBE54:
 640              	.LBE53:
 641              		.loc 1 325 3 discriminator 4
 642 00a0 FEE7     		b	.L42
 643              	.L41:
 326:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 327:./Libraries/FreeRTOS/Source/event_groups.c **** 	#endif
 328:./Libraries/FreeRTOS/Source/event_groups.c **** 
 329:./Libraries/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 644              		.loc 1 329 2
 645 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 646              	.LBB55:
 330:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 331:./Libraries/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 647              		.loc 1 331 21
 648 00a6 7B6B     		ldr	r3, [r7, #52]
 649 00a8 1B68     		ldr	r3, [r3]
 650 00aa FB62     		str	r3, [r7, #44]
 332:./Libraries/FreeRTOS/Source/event_groups.c **** 
 333:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:./Libraries/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 651              		.loc 1 334 23
 652 00ac 3A68     		ldr	r2, [r7]
 653 00ae B968     		ldr	r1, [r7, #8]
 654 00b0 F86A     		ldr	r0, [r7, #44]
 655 00b2 FFF7FEFF 		bl	prvTestWaitCondition
 656 00b6 B862     		str	r0, [r7, #40]
 335:./Libraries/FreeRTOS/Source/event_groups.c **** 
 336:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 657              		.loc 1 336 5
ARM GAS  /tmp/ccWTSxZT.s 			page 22


 658 00b8 BB6A     		ldr	r3, [r7, #40]
 659 00ba 002B     		cmp	r3, #0
 660 00bc 0ED0     		beq	.L43
 337:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 338:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:./Libraries/FreeRTOS/Source/event_groups.c **** 			block. */
 340:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 661              		.loc 1 340 13
 662 00be FB6A     		ldr	r3, [r7, #44]
 663 00c0 FB63     		str	r3, [r7, #60]
 341:./Libraries/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 664              		.loc 1 341 17
 665 00c2 0023     		movs	r3, #0
 666 00c4 BB64     		str	r3, [r7, #72]
 342:./Libraries/FreeRTOS/Source/event_groups.c **** 
 343:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 667              		.loc 1 344 6
 668 00c6 7B68     		ldr	r3, [r7, #4]
 669 00c8 002B     		cmp	r3, #0
 670 00ca 28D0     		beq	.L44
 345:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 346:./Libraries/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 671              		.loc 1 346 30
 672 00cc 7B6B     		ldr	r3, [r7, #52]
 673 00ce 1A68     		ldr	r2, [r3]
 674              		.loc 1 346 33
 675 00d0 BB68     		ldr	r3, [r7, #8]
 676 00d2 DB43     		mvns	r3, r3
 677              		.loc 1 346 30
 678 00d4 1A40     		ands	r2, r2, r3
 679 00d6 7B6B     		ldr	r3, [r7, #52]
 680 00d8 1A60     		str	r2, [r3]
 681 00da 20E0     		b	.L44
 682              	.L43:
 347:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 348:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 349:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 350:./Libraries/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 352:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 353:./Libraries/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 683              		.loc 1 353 10
 684 00dc BB6C     		ldr	r3, [r7, #72]
 685 00de 002B     		cmp	r3, #0
 686 00e0 04D1     		bne	.L45
 354:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 355:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:./Libraries/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 687              		.loc 1 357 13
 688 00e2 FB6A     		ldr	r3, [r7, #44]
 689 00e4 FB63     		str	r3, [r7, #60]
 358:./Libraries/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 690              		.loc 1 358 21
 691 00e6 0123     		movs	r3, #1
 692 00e8 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/ccWTSxZT.s 			page 23


 693 00ea 18E0     		b	.L44
 694              	.L45:
 359:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 360:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 361:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 362:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:./Libraries/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:./Libraries/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:./Libraries/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 695              		.loc 1 366 6
 696 00ec 7B68     		ldr	r3, [r7, #4]
 697 00ee 002B     		cmp	r3, #0
 698 00f0 03D0     		beq	.L46
 367:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 368:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 699              		.loc 1 368 19
 700 00f2 BB6B     		ldr	r3, [r7, #56]
 701 00f4 43F08073 		orr	r3, r3, #16777216
 702 00f8 BB63     		str	r3, [r7, #56]
 703              	.L46:
 369:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 370:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 371:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 372:./Libraries/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 374:./Libraries/FreeRTOS/Source/event_groups.c **** 
 375:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 704              		.loc 1 375 6
 705 00fa 3B68     		ldr	r3, [r7]
 706 00fc 002B     		cmp	r3, #0
 707 00fe 03D0     		beq	.L47
 376:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 377:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 708              		.loc 1 377 19
 709 0100 BB6B     		ldr	r3, [r7, #56]
 710 0102 43F08063 		orr	r3, r3, #67108864
 711 0106 BB63     		str	r3, [r7, #56]
 712              	.L47:
 378:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 379:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 380:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 381:./Libraries/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 383:./Libraries/FreeRTOS/Source/event_groups.c **** 
 384:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:./Libraries/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:./Libraries/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 387:./Libraries/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 713              		.loc 1 387 4
 714 0108 7B6B     		ldr	r3, [r7, #52]
 715 010a 181D     		adds	r0, r3, #4
 716 010c BA68     		ldr	r2, [r7, #8]
 717 010e BB6B     		ldr	r3, [r7, #56]
 718 0110 1343     		orrs	r3, r3, r2
 719 0112 BA6C     		ldr	r2, [r7, #72]
 720 0114 1946     		mov	r1, r3
ARM GAS  /tmp/ccWTSxZT.s 			page 24


 721 0116 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 388:./Libraries/FreeRTOS/Source/event_groups.c **** 
 389:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:./Libraries/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:./Libraries/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 722              		.loc 1 392 13
 723 011a 0023     		movs	r3, #0
 724 011c FB63     		str	r3, [r7, #60]
 725              	.L44:
 726              	.LBE55:
 393:./Libraries/FreeRTOS/Source/event_groups.c **** 
 394:./Libraries/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 396:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 397:./Libraries/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 727              		.loc 1 397 20
 728 011e FFF7FEFF 		bl	xTaskResumeAll
 729 0122 7862     		str	r0, [r7, #36]
 398:./Libraries/FreeRTOS/Source/event_groups.c **** 
 399:./Libraries/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 730              		.loc 1 399 4
 731 0124 BB6C     		ldr	r3, [r7, #72]
 732 0126 002B     		cmp	r3, #0
 733 0128 31D0     		beq	.L48
 400:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 401:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 734              		.loc 1 401 5
 735 012a 7B6A     		ldr	r3, [r7, #36]
 736 012c 002B     		cmp	r3, #0
 737 012e 07D1     		bne	.L49
 402:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 403:./Libraries/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 738              		.loc 1 403 4
 739 0130 194B     		ldr	r3, .L53
 740 0132 4FF08052 		mov	r2, #268435456
 741 0136 1A60     		str	r2, [r3]
 742              		.syntax unified
 743              	@ 403 "./Libraries/FreeRTOS/Source/event_groups.c" 1
 744 0138 BFF34F8F 		dsb
 745              	@ 0 "" 2
 746              	@ 403 "./Libraries/FreeRTOS/Source/event_groups.c" 1
 747 013c BFF36F8F 		isb
 748              	@ 0 "" 2
 749              		.thumb
 750              		.syntax unified
 751              	.L49:
 404:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 405:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 406:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 407:./Libraries/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 409:./Libraries/FreeRTOS/Source/event_groups.c **** 
 410:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:./Libraries/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:./Libraries/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:./Libraries/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
ARM GAS  /tmp/ccWTSxZT.s 			page 25


 414:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 752              		.loc 1 414 14
 753 0140 FFF7FEFF 		bl	uxTaskResetEventItemValue
 754 0144 F863     		str	r0, [r7, #60]
 415:./Libraries/FreeRTOS/Source/event_groups.c **** 
 416:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 755              		.loc 1 416 18
 756 0146 FB6B     		ldr	r3, [r7, #60]
 757 0148 03F00073 		and	r3, r3, #33554432
 758              		.loc 1 416 5
 759 014c 002B     		cmp	r3, #0
 760 014e 1AD1     		bne	.L50
 417:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 418:./Libraries/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 761              		.loc 1 418 4
 762 0150 FFF7FEFF 		bl	vPortEnterCritical
 419:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 420:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:./Libraries/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 763              		.loc 1 421 14
 764 0154 7B6B     		ldr	r3, [r7, #52]
 765 0156 1B68     		ldr	r3, [r3]
 766 0158 FB63     		str	r3, [r7, #60]
 422:./Libraries/FreeRTOS/Source/event_groups.c **** 
 423:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:./Libraries/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:./Libraries/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 767              		.loc 1 425 9
 768 015a 3A68     		ldr	r2, [r7]
 769 015c B968     		ldr	r1, [r7, #8]
 770 015e F86B     		ldr	r0, [r7, #60]
 771 0160 FFF7FEFF 		bl	prvTestWaitCondition
 772 0164 0346     		mov	r3, r0
 773              		.loc 1 425 7
 774 0166 002B     		cmp	r3, #0
 775 0168 09D0     		beq	.L51
 426:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 427:./Libraries/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 776              		.loc 1 427 8
 777 016a 7B68     		ldr	r3, [r7, #4]
 778 016c 002B     		cmp	r3, #0
 779 016e 06D0     		beq	.L51
 428:./Libraries/FreeRTOS/Source/event_groups.c **** 					{
 429:./Libraries/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 780              		.loc 1 429 32
 781 0170 7B6B     		ldr	r3, [r7, #52]
 782 0172 1A68     		ldr	r2, [r3]
 783              		.loc 1 429 35
 784 0174 BB68     		ldr	r3, [r7, #8]
 785 0176 DB43     		mvns	r3, r3
 786              		.loc 1 429 32
 787 0178 1A40     		ands	r2, r2, r3
 788 017a 7B6B     		ldr	r3, [r7, #52]
 789 017c 1A60     		str	r2, [r3]
 790              	.L51:
 430:./Libraries/FreeRTOS/Source/event_groups.c **** 					}
 431:./Libraries/FreeRTOS/Source/event_groups.c **** 					else
ARM GAS  /tmp/ccWTSxZT.s 			page 26


 432:./Libraries/FreeRTOS/Source/event_groups.c **** 					{
 433:./Libraries/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:./Libraries/FreeRTOS/Source/event_groups.c **** 					}
 435:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 436:./Libraries/FreeRTOS/Source/event_groups.c **** 				else
 437:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 438:./Libraries/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 440:./Libraries/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 791              		.loc 1 440 22
 792 017e 0123     		movs	r3, #1
 793 0180 3B63     		str	r3, [r7, #48]
 441:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 442:./Libraries/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 794              		.loc 1 442 4
 795 0182 FFF7FEFF 		bl	vPortExitCritical
 796              	.L50:
 443:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 444:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 445:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 446:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 448:./Libraries/FreeRTOS/Source/event_groups.c **** 
 449:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 797              		.loc 1 450 12
 798 0186 FB6B     		ldr	r3, [r7, #60]
 799 0188 23F07F43 		bic	r3, r3, #-16777216
 800 018c FB63     		str	r3, [r7, #60]
 801              	.L48:
 451:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 452:./Libraries/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:./Libraries/FreeRTOS/Source/event_groups.c **** 
 454:./Libraries/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:./Libraries/FreeRTOS/Source/event_groups.c **** 
 457:./Libraries/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 802              		.loc 1 457 9
 803 018e FB6B     		ldr	r3, [r7, #60]
 458:./Libraries/FreeRTOS/Source/event_groups.c **** }
 804              		.loc 1 458 1
 805 0190 1846     		mov	r0, r3
 806 0192 4037     		adds	r7, r7, #64
 807              	.LCFI18:
 808              		.cfi_def_cfa_offset 8
 809 0194 BD46     		mov	sp, r7
 810              	.LCFI19:
 811              		.cfi_def_cfa_register 13
 812              		@ sp needed
 813 0196 80BD     		pop	{r7, pc}
 814              	.L54:
 815              		.align	2
 816              	.L53:
 817 0198 04ED00E0 		.word	-536810236
 818              		.cfi_endproc
 819              	.LFE7:
 821              		.section	.text.xEventGroupClearBits,"ax",%progbits
ARM GAS  /tmp/ccWTSxZT.s 			page 27


 822              		.align	1
 823              		.global	xEventGroupClearBits
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv5-d16
 829              	xEventGroupClearBits:
 830              	.LFB8:
 459:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:./Libraries/FreeRTOS/Source/event_groups.c **** 
 461:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:./Libraries/FreeRTOS/Source/event_groups.c **** {
 831              		.loc 1 462 1
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 24
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              	.LCFI20:
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 86B0     		sub	sp, sp, #24
 841              	.LCFI21:
 842              		.cfi_def_cfa_offset 32
 843 0004 00AF     		add	r7, sp, #0
 844              	.LCFI22:
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 847 0008 3960     		str	r1, [r7]
 463:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 848              		.loc 1 463 15
 849 000a 7B68     		ldr	r3, [r7, #4]
 850 000c 7B61     		str	r3, [r7, #20]
 464:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:./Libraries/FreeRTOS/Source/event_groups.c **** 
 466:./Libraries/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:./Libraries/FreeRTOS/Source/event_groups.c **** 	itself. */
 468:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 851              		.loc 1 468 2
 852 000e 7B68     		ldr	r3, [r7, #4]
 853 0010 002B     		cmp	r3, #0
 854 0012 0AD1     		bne	.L56
 855              	.LBB56:
 856              	.LBB57:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 857              		.loc 2 195 2
 858              		.syntax unified
 859              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 860 0014 4FF05003 			mov r3, #80												
 861 0018 83F31188 		msr basepri, r3											
 862 001c BFF36F8F 		isb														
 863 0020 BFF34F8F 		dsb														
 864              	
 865              	@ 0 "" 2
 866              		.thumb
 867              		.syntax unified
 868 0024 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccWTSxZT.s 			page 28


 869              		.loc 2 203 1
 870 0026 00BF     		nop
 871              	.L57:
 872              	.LBE57:
 873              	.LBE56:
 874              		.loc 1 468 2 discriminator 1
 875 0028 FEE7     		b	.L57
 876              	.L56:
 469:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 877              		.loc 1 469 2
 878 002a 3B68     		ldr	r3, [r7]
 879 002c 03F07F43 		and	r3, r3, #-16777216
 880 0030 002B     		cmp	r3, #0
 881 0032 0AD0     		beq	.L58
 882              	.LBB58:
 883              	.LBB59:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 884              		.loc 2 195 2
 885              		.syntax unified
 886              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 887 0034 4FF05003 			mov r3, #80												
 888 0038 83F31188 		msr basepri, r3											
 889 003c BFF36F8F 		isb														
 890 0040 BFF34F8F 		dsb														
 891              	
 892              	@ 0 "" 2
 893              		.thumb
 894              		.syntax unified
 895 0044 BB60     		str	r3, [r7, #8]
 896              		.loc 2 203 1
 897 0046 00BF     		nop
 898              	.L59:
 899              	.LBE59:
 900              	.LBE58:
 901              		.loc 1 469 2 discriminator 2
 902 0048 FEE7     		b	.L59
 903              	.L58:
 470:./Libraries/FreeRTOS/Source/event_groups.c **** 
 471:./Libraries/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 904              		.loc 1 471 2
 905 004a FFF7FEFF 		bl	vPortEnterCritical
 472:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 473:./Libraries/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:./Libraries/FreeRTOS/Source/event_groups.c **** 
 475:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:./Libraries/FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 906              		.loc 1 477 12
 907 004e 7B69     		ldr	r3, [r7, #20]
 908 0050 1B68     		ldr	r3, [r3]
 909 0052 3B61     		str	r3, [r7, #16]
 478:./Libraries/FreeRTOS/Source/event_groups.c **** 
 479:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 910              		.loc 1 480 28
 911 0054 7B69     		ldr	r3, [r7, #20]
 912 0056 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccWTSxZT.s 			page 29


 913              		.loc 1 480 31
 914 0058 3B68     		ldr	r3, [r7]
 915 005a DB43     		mvns	r3, r3
 916              		.loc 1 480 28
 917 005c 1A40     		ands	r2, r2, r3
 918 005e 7B69     		ldr	r3, [r7, #20]
 919 0060 1A60     		str	r2, [r3]
 481:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 482:./Libraries/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 920              		.loc 1 482 2
 921 0062 FFF7FEFF 		bl	vPortExitCritical
 483:./Libraries/FreeRTOS/Source/event_groups.c **** 
 484:./Libraries/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 922              		.loc 1 484 9
 923 0066 3B69     		ldr	r3, [r7, #16]
 485:./Libraries/FreeRTOS/Source/event_groups.c **** }
 924              		.loc 1 485 1
 925 0068 1846     		mov	r0, r3
 926 006a 1837     		adds	r7, r7, #24
 927              	.LCFI23:
 928              		.cfi_def_cfa_offset 8
 929 006c BD46     		mov	sp, r7
 930              	.LCFI24:
 931              		.cfi_def_cfa_register 13
 932              		@ sp needed
 933 006e 80BD     		pop	{r7, pc}
 934              		.cfi_endproc
 935              	.LFE8:
 937              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 938              		.align	1
 939              		.global	xEventGroupClearBitsFromISR
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv5-d16
 945              	xEventGroupClearBitsFromISR:
 946              	.LFB9:
 486:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:./Libraries/FreeRTOS/Source/event_groups.c **** 
 488:./Libraries/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 489:./Libraries/FreeRTOS/Source/event_groups.c **** 
 490:./Libraries/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 947              		.loc 1 491 2
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 16
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0000 80B5     		push	{r7, lr}
 952              	.LCFI25:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
 956 0002 84B0     		sub	sp, sp, #16
 957              	.LCFI26:
 958              		.cfi_def_cfa_offset 24
 959 0004 00AF     		add	r7, sp, #0
 960              	.LCFI27:
ARM GAS  /tmp/ccWTSxZT.s 			page 30


 961              		.cfi_def_cfa_register 7
 962 0006 7860     		str	r0, [r7, #4]
 963 0008 3960     		str	r1, [r7]
 492:./Libraries/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:./Libraries/FreeRTOS/Source/event_groups.c **** 
 494:./Libraries/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:./Libraries/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 964              		.loc 1 495 13
 965 000a 0023     		movs	r3, #0
 966 000c 3A68     		ldr	r2, [r7]
 967 000e 7968     		ldr	r1, [r7, #4]
 968 0010 0448     		ldr	r0, .L63
 969 0012 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 970 0016 F860     		str	r0, [r7, #12]
 496:./Libraries/FreeRTOS/Source/event_groups.c **** 
 497:./Libraries/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 971              		.loc 1 497 10
 972 0018 FB68     		ldr	r3, [r7, #12]
 498:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 973              		.loc 1 498 2
 974 001a 1846     		mov	r0, r3
 975 001c 1037     		adds	r7, r7, #16
 976              	.LCFI28:
 977              		.cfi_def_cfa_offset 8
 978 001e BD46     		mov	sp, r7
 979              	.LCFI29:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 0020 80BD     		pop	{r7, pc}
 983              	.L64:
 984 0022 00BF     		.align	2
 985              	.L63:
 986 0024 00000000 		.word	vEventGroupClearBitsCallback
 987              		.cfi_endproc
 988              	.LFE9:
 990              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 991              		.align	1
 992              		.global	xEventGroupGetBitsFromISR
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 996              		.fpu fpv5-d16
 998              	xEventGroupGetBitsFromISR:
 999              	.LFB10:
 499:./Libraries/FreeRTOS/Source/event_groups.c **** 
 500:./Libraries/FreeRTOS/Source/event_groups.c **** #endif
 501:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:./Libraries/FreeRTOS/Source/event_groups.c **** 
 503:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1000              		.loc 1 504 1
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 32
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              	.LCFI30:
ARM GAS  /tmp/ccWTSxZT.s 			page 31


 1007              		.cfi_def_cfa_offset 4
 1008              		.cfi_offset 7, -4
 1009 0002 89B0     		sub	sp, sp, #36
 1010              	.LCFI31:
 1011              		.cfi_def_cfa_offset 40
 1012 0004 00AF     		add	r7, sp, #0
 1013              	.LCFI32:
 1014              		.cfi_def_cfa_register 7
 1015 0006 7860     		str	r0, [r7, #4]
 505:./Libraries/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 1016              		.loc 1 506 28
 1017 0008 7B68     		ldr	r3, [r7, #4]
 1018 000a FB61     		str	r3, [r7, #28]
 1019              	.LBB60:
 1020              	.LBB61:
 204:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1021              		.loc 2 211 2
 1022              		.syntax unified
 1023              	@ 211 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1024 000c EFF31182 			mrs r2, basepri											
 1025 0010 4FF05003 		mov r3, #80												
 1026 0014 83F31188 		msr basepri, r3											
 1027 0018 BFF36F8F 		isb														
 1028 001c BFF34F8F 		dsb														
 1029              	
 1030              	@ 0 "" 2
 1031              		.thumb
 1032              		.syntax unified
 1033 0020 FA60     		str	r2, [r7, #12]
 1034 0022 BB60     		str	r3, [r7, #8]
 212:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1035              		.loc 2 223 9
 1036 0024 FB68     		ldr	r3, [r7, #12]
 1037              	.LBE61:
 1038              	.LBE60:
 507:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:./Libraries/FreeRTOS/Source/event_groups.c **** 
 509:./Libraries/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/ccWTSxZT.s 			page 32


 1039              		.loc 1 509 27
 1040 0026 BB61     		str	r3, [r7, #24]
 510:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 511:./Libraries/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 1041              		.loc 1 511 12
 1042 0028 FB69     		ldr	r3, [r7, #28]
 1043 002a 1B68     		ldr	r3, [r3]
 1044 002c 7B61     		str	r3, [r7, #20]
 1045 002e BB69     		ldr	r3, [r7, #24]
 1046 0030 3B61     		str	r3, [r7, #16]
 1047              	.LBB62:
 1048              	.LBB63:
 224:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1049              		.loc 2 229 2
 1050 0032 3B69     		ldr	r3, [r7, #16]
 1051              		.syntax unified
 1052              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1053 0034 83F31188 			msr basepri, r3	
 1054              	@ 0 "" 2
 230:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1055              		.loc 2 233 1
 1056              		.thumb
 1057              		.syntax unified
 1058 0038 00BF     		nop
 1059              	.LBE63:
 1060              	.LBE62:
 512:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 513:./Libraries/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:./Libraries/FreeRTOS/Source/event_groups.c **** 
 515:./Libraries/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 1061              		.loc 1 515 9
 1062 003a 7B69     		ldr	r3, [r7, #20]
 516:./Libraries/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 1063              		.loc 1 516 1
 1064 003c 1846     		mov	r0, r3
 1065 003e 2437     		adds	r7, r7, #36
 1066              	.LCFI33:
 1067              		.cfi_def_cfa_offset 4
 1068 0040 BD46     		mov	sp, r7
 1069              	.LCFI34:
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 0042 5DF8047B 		ldr	r7, [sp], #4
 1073              	.LCFI35:
 1074              		.cfi_restore 7
 1075              		.cfi_def_cfa_offset 0
 1076 0046 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE10:
ARM GAS  /tmp/ccWTSxZT.s 			page 33


 1080              		.section	.text.xEventGroupSetBits,"ax",%progbits
 1081              		.align	1
 1082              		.global	xEventGroupSetBits
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv5-d16
 1088              	xEventGroupSetBits:
 1089              	.LFB11:
 517:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:./Libraries/FreeRTOS/Source/event_groups.c **** 
 519:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1090              		.loc 1 520 1
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 56
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094 0000 80B5     		push	{r7, lr}
 1095              	.LCFI36:
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 7, -8
 1098              		.cfi_offset 14, -4
 1099 0002 8EB0     		sub	sp, sp, #56
 1100              	.LCFI37:
 1101              		.cfi_def_cfa_offset 64
 1102 0004 00AF     		add	r7, sp, #0
 1103              	.LCFI38:
 1104              		.cfi_def_cfa_register 7
 1105 0006 7860     		str	r0, [r7, #4]
 1106 0008 3960     		str	r1, [r7]
 521:./Libraries/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:./Libraries/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:./Libraries/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:./Libraries/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1107              		.loc 1 524 13
 1108 000a 0023     		movs	r3, #0
 1109 000c 3B63     		str	r3, [r7, #48]
 525:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1110              		.loc 1 525 15
 1111 000e 7B68     		ldr	r3, [r7, #4]
 1112 0010 BB62     		str	r3, [r7, #40]
 526:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 1113              		.loc 1 526 12
 1114 0012 0023     		movs	r3, #0
 1115 0014 FB62     		str	r3, [r7, #44]
 527:./Libraries/FreeRTOS/Source/event_groups.c **** 
 528:./Libraries/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:./Libraries/FreeRTOS/Source/event_groups.c **** 	itself. */
 530:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 1116              		.loc 1 530 2
 1117 0016 7B68     		ldr	r3, [r7, #4]
 1118 0018 002B     		cmp	r3, #0
 1119 001a 0AD1     		bne	.L69
 1120              	.LBB64:
 1121              	.LBB65:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1122              		.loc 2 195 2
ARM GAS  /tmp/ccWTSxZT.s 			page 34


 1123              		.syntax unified
 1124              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1125 001c 4FF05003 			mov r3, #80												
 1126 0020 83F31188 		msr basepri, r3											
 1127 0024 BFF36F8F 		isb														
 1128 0028 BFF34F8F 		dsb														
 1129              	
 1130              	@ 0 "" 2
 1131              		.thumb
 1132              		.syntax unified
 1133 002c 3B61     		str	r3, [r7, #16]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1134              		.loc 2 203 1
 1135 002e 00BF     		nop
 1136              	.L70:
 1137              	.LBE65:
 1138              	.LBE64:
 1139              		.loc 1 530 2 discriminator 1
 1140 0030 FEE7     		b	.L70
 1141              	.L69:
 531:./Libraries/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 1142              		.loc 1 531 2
 1143 0032 3B68     		ldr	r3, [r7]
 1144 0034 03F07F43 		and	r3, r3, #-16777216
 1145 0038 002B     		cmp	r3, #0
 1146 003a 0AD0     		beq	.L71
 1147              	.LBB66:
 1148              	.LBB67:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1149              		.loc 2 195 2
 1150              		.syntax unified
 1151              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1152 003c 4FF05003 			mov r3, #80												
 1153 0040 83F31188 		msr basepri, r3											
 1154 0044 BFF36F8F 		isb														
 1155 0048 BFF34F8F 		dsb														
 1156              	
 1157              	@ 0 "" 2
 1158              		.thumb
 1159              		.syntax unified
 1160 004c FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1161              		.loc 2 203 1
 1162 004e 00BF     		nop
 1163              	.L72:
 1164              	.LBE67:
 1165              	.LBE66:
 1166              		.loc 1 531 2 discriminator 2
 1167 0050 FEE7     		b	.L72
 1168              	.L71:
 532:./Libraries/FreeRTOS/Source/event_groups.c **** 
 533:./Libraries/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 1169              		.loc 1 533 9
 1170 0052 BB6A     		ldr	r3, [r7, #40]
 1171 0054 0433     		adds	r3, r3, #4
 1172 0056 7B62     		str	r3, [r7, #36]
 534:./Libraries/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
ARM GAS  /tmp/ccWTSxZT.s 			page 35


 1173              		.loc 1 534 12
 1174 0058 7B6A     		ldr	r3, [r7, #36]
 1175 005a 0833     		adds	r3, r3, #8
 1176 005c 3B62     		str	r3, [r7, #32]
 535:./Libraries/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1177              		.loc 1 535 2
 1178 005e FFF7FEFF 		bl	vTaskSuspendAll
 536:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 537:./Libraries/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:./Libraries/FreeRTOS/Source/event_groups.c **** 
 539:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 1179              		.loc 1 539 14
 1180 0062 7B6A     		ldr	r3, [r7, #36]
 1181 0064 DB68     		ldr	r3, [r3, #12]
 1182 0066 7B63     		str	r3, [r7, #52]
 540:./Libraries/FreeRTOS/Source/event_groups.c **** 
 541:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 1183              		.loc 1 542 28
 1184 0068 BB6A     		ldr	r3, [r7, #40]
 1185 006a 1A68     		ldr	r2, [r3]
 1186 006c 3B68     		ldr	r3, [r7]
 1187 006e 1A43     		orrs	r2, r2, r3
 1188 0070 BB6A     		ldr	r3, [r7, #40]
 1189 0072 1A60     		str	r2, [r3]
 543:./Libraries/FreeRTOS/Source/event_groups.c **** 
 544:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:./Libraries/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 1190              		.loc 1 545 8
 1191 0074 3CE0     		b	.L73
 1192              	.L78:
 546:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 547:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 1193              		.loc 1 547 11
 1194 0076 7B6B     		ldr	r3, [r7, #52]
 1195 0078 5B68     		ldr	r3, [r3, #4]
 1196 007a FB61     		str	r3, [r7, #28]
 548:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1197              		.loc 1 548 20
 1198 007c 7B6B     		ldr	r3, [r7, #52]
 1199 007e 1B68     		ldr	r3, [r3]
 1200 0080 BB61     		str	r3, [r7, #24]
 549:./Libraries/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 1201              		.loc 1 549 16
 1202 0082 0023     		movs	r3, #0
 1203 0084 FB62     		str	r3, [r7, #44]
 550:./Libraries/FreeRTOS/Source/event_groups.c **** 
 551:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1204              		.loc 1 552 18
 1205 0086 BB69     		ldr	r3, [r7, #24]
 1206 0088 03F07F43 		and	r3, r3, #-16777216
 1207 008c 7B61     		str	r3, [r7, #20]
 553:./Libraries/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 1208              		.loc 1 553 20
 1209 008e BB69     		ldr	r3, [r7, #24]
 1210 0090 23F07F43 		bic	r3, r3, #-16777216
ARM GAS  /tmp/ccWTSxZT.s 			page 36


 1211 0094 BB61     		str	r3, [r7, #24]
 554:./Libraries/FreeRTOS/Source/event_groups.c **** 
 555:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 1212              		.loc 1 555 24
 1213 0096 7B69     		ldr	r3, [r7, #20]
 1214 0098 03F08063 		and	r3, r3, #67108864
 1215              		.loc 1 555 6
 1216 009c 002B     		cmp	r3, #0
 1217 009e 08D1     		bne	.L74
 556:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 557:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:./Libraries/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 1218              		.loc 1 558 40
 1219 00a0 BB6A     		ldr	r3, [r7, #40]
 1220 00a2 1A68     		ldr	r2, [r3]
 1221              		.loc 1 558 27
 1222 00a4 BB69     		ldr	r3, [r7, #24]
 1223 00a6 1340     		ands	r3, r3, r2
 1224              		.loc 1 558 7
 1225 00a8 002B     		cmp	r3, #0
 1226 00aa 0BD0     		beq	.L75
 559:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 560:./Libraries/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 1227              		.loc 1 560 18
 1228 00ac 0123     		movs	r3, #1
 1229 00ae FB62     		str	r3, [r7, #44]
 1230 00b0 08E0     		b	.L75
 1231              	.L74:
 561:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 562:./Libraries/FreeRTOS/Source/event_groups.c **** 				else
 563:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 564:./Libraries/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 566:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 567:./Libraries/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 1232              		.loc 1 567 44
 1233 00b2 BB6A     		ldr	r3, [r7, #40]
 1234 00b4 1A68     		ldr	r2, [r3]
 1235              		.loc 1 567 31
 1236 00b6 BB69     		ldr	r3, [r7, #24]
 1237 00b8 1340     		ands	r3, r3, r2
 1238              		.loc 1 567 11
 1239 00ba BA69     		ldr	r2, [r7, #24]
 1240 00bc 9A42     		cmp	r2, r3
 1241 00be 01D1     		bne	.L75
 568:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 569:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:./Libraries/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 1242              		.loc 1 570 17
 1243 00c0 0123     		movs	r3, #1
 1244 00c2 FB62     		str	r3, [r7, #44]
 1245              	.L75:
 571:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 572:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 573:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 574:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  /tmp/ccWTSxZT.s 			page 37


 576:./Libraries/FreeRTOS/Source/event_groups.c **** 
 577:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 1246              		.loc 1 577 6
 1247 00c4 FB6A     		ldr	r3, [r7, #44]
 1248 00c6 002B     		cmp	r3, #0
 1249 00c8 10D0     		beq	.L76
 578:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 579:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:./Libraries/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 1250              		.loc 1 580 25
 1251 00ca 7B69     		ldr	r3, [r7, #20]
 1252 00cc 03F08073 		and	r3, r3, #16777216
 1253              		.loc 1 580 7
 1254 00d0 002B     		cmp	r3, #0
 1255 00d2 03D0     		beq	.L77
 581:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 582:./Libraries/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 1256              		.loc 1 582 20
 1257 00d4 3A6B     		ldr	r2, [r7, #48]
 1258 00d6 BB69     		ldr	r3, [r7, #24]
 1259 00d8 1343     		orrs	r3, r3, r2
 1260 00da 3B63     		str	r3, [r7, #48]
 1261              	.L77:
 583:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 584:./Libraries/FreeRTOS/Source/event_groups.c **** 				else
 585:./Libraries/FreeRTOS/Source/event_groups.c **** 				{
 586:./Libraries/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:./Libraries/FreeRTOS/Source/event_groups.c **** 				}
 588:./Libraries/FreeRTOS/Source/event_groups.c **** 
 589:./Libraries/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:./Libraries/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:./Libraries/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:./Libraries/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:./Libraries/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:./Libraries/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 1262              		.loc 1 594 63
 1263 00dc BB6A     		ldr	r3, [r7, #40]
 1264 00de 1B68     		ldr	r3, [r3]
 1265              		.loc 1 594 5
 1266 00e0 43F00073 		orr	r3, r3, #33554432
 1267 00e4 1946     		mov	r1, r3
 1268 00e6 786B     		ldr	r0, [r7, #52]
 1269 00e8 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1270              	.L76:
 595:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 596:./Libraries/FreeRTOS/Source/event_groups.c **** 
 597:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:./Libraries/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:./Libraries/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:./Libraries/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 1271              		.loc 1 600 15
 1272 00ec FB69     		ldr	r3, [r7, #28]
 1273 00ee 7B63     		str	r3, [r7, #52]
 1274              	.L73:
 545:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 1275              		.loc 1 545 8
 1276 00f0 7A6B     		ldr	r2, [r7, #52]
ARM GAS  /tmp/ccWTSxZT.s 			page 38


 1277 00f2 3B6A     		ldr	r3, [r7, #32]
 1278 00f4 9A42     		cmp	r2, r3
 1279 00f6 BED1     		bne	.L78
 601:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 602:./Libraries/FreeRTOS/Source/event_groups.c **** 
 603:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:./Libraries/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:./Libraries/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1280              		.loc 1 605 28
 1281 00f8 BB6A     		ldr	r3, [r7, #40]
 1282 00fa 1A68     		ldr	r2, [r3]
 1283              		.loc 1 605 31
 1284 00fc 3B6B     		ldr	r3, [r7, #48]
 1285 00fe DB43     		mvns	r3, r3
 1286              		.loc 1 605 28
 1287 0100 1A40     		ands	r2, r2, r3
 1288 0102 BB6A     		ldr	r3, [r7, #40]
 1289 0104 1A60     		str	r2, [r3]
 606:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 607:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1290              		.loc 1 607 11
 1291 0106 FFF7FEFF 		bl	xTaskResumeAll
 608:./Libraries/FreeRTOS/Source/event_groups.c **** 
 609:./Libraries/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 1292              		.loc 1 609 20
 1293 010a BB6A     		ldr	r3, [r7, #40]
 1294 010c 1B68     		ldr	r3, [r3]
 610:./Libraries/FreeRTOS/Source/event_groups.c **** }
 1295              		.loc 1 610 1
 1296 010e 1846     		mov	r0, r3
 1297 0110 3837     		adds	r7, r7, #56
 1298              	.LCFI39:
 1299              		.cfi_def_cfa_offset 8
 1300 0112 BD46     		mov	sp, r7
 1301              	.LCFI40:
 1302              		.cfi_def_cfa_register 13
 1303              		@ sp needed
 1304 0114 80BD     		pop	{r7, pc}
 1305              		.cfi_endproc
 1306              	.LFE11:
 1308              		.section	.text.vEventGroupDelete,"ax",%progbits
 1309              		.align	1
 1310              		.global	vEventGroupDelete
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1314              		.fpu fpv5-d16
 1316              	vEventGroupDelete:
 1317              	.LFB12:
 611:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:./Libraries/FreeRTOS/Source/event_groups.c **** 
 613:./Libraries/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1318              		.loc 1 614 1
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 24
 1321              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccWTSxZT.s 			page 39


 1322 0000 80B5     		push	{r7, lr}
 1323              	.LCFI41:
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 86B0     		sub	sp, sp, #24
 1328              	.LCFI42:
 1329              		.cfi_def_cfa_offset 32
 1330 0004 00AF     		add	r7, sp, #0
 1331              	.LCFI43:
 1332              		.cfi_def_cfa_register 7
 1333 0006 7860     		str	r0, [r7, #4]
 615:./Libraries/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1334              		.loc 1 615 15
 1335 0008 7B68     		ldr	r3, [r7, #4]
 1336 000a 7B61     		str	r3, [r7, #20]
 616:./Libraries/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1337              		.loc 1 616 15
 1338 000c 7B69     		ldr	r3, [r7, #20]
 1339 000e 0433     		adds	r3, r3, #4
 1340 0010 3B61     		str	r3, [r7, #16]
 617:./Libraries/FreeRTOS/Source/event_groups.c **** 
 618:./Libraries/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 1341              		.loc 1 618 2
 1342 0012 FFF7FEFF 		bl	vTaskSuspendAll
 619:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 620:./Libraries/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:./Libraries/FreeRTOS/Source/event_groups.c **** 
 622:./Libraries/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 1343              		.loc 1 622 8
 1344 0016 17E0     		b	.L81
 1345              	.L84:
 623:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 624:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:./Libraries/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:./Libraries/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 1346              		.loc 1 626 4
 1347 0018 3B69     		ldr	r3, [r7, #16]
 1348 001a DA68     		ldr	r2, [r3, #12]
 1349 001c 3B69     		ldr	r3, [r7, #16]
 1350 001e 0833     		adds	r3, r3, #8
 1351 0020 9A42     		cmp	r2, r3
 1352 0022 0AD1     		bne	.L82
 1353              	.LBB68:
 1354              	.LBB69:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1355              		.loc 2 195 2
 1356              		.syntax unified
 1357              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1358 0024 4FF05003 			mov r3, #80												
 1359 0028 83F31188 		msr basepri, r3											
 1360 002c BFF36F8F 		isb														
 1361 0030 BFF34F8F 		dsb														
 1362              	
 1363              	@ 0 "" 2
 1364              		.thumb
 1365              		.syntax unified
ARM GAS  /tmp/ccWTSxZT.s 			page 40


 1366 0034 FB60     		str	r3, [r7, #12]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1367              		.loc 2 203 1
 1368 0036 00BF     		nop
 1369              	.L83:
 1370              	.LBE69:
 1371              	.LBE68:
 1372              		.loc 1 626 4 discriminator 1
 1373 0038 FEE7     		b	.L83
 1374              	.L82:
 627:./Libraries/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1375              		.loc 1 627 70
 1376 003a 3B69     		ldr	r3, [r7, #16]
 1377 003c DB68     		ldr	r3, [r3, #12]
 1378              		.loc 1 627 4
 1379 003e 4FF00071 		mov	r1, #33554432
 1380 0042 1846     		mov	r0, r3
 1381 0044 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1382              	.L81:
 622:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 1383              		.loc 1 622 10
 1384 0048 3B69     		ldr	r3, [r7, #16]
 1385 004a 1B68     		ldr	r3, [r3]
 622:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 1386              		.loc 1 622 8
 1387 004c 002B     		cmp	r3, #0
 1388 004e E3D1     		bne	.L84
 628:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 629:./Libraries/FreeRTOS/Source/event_groups.c **** 
 630:./Libraries/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 632:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:./Libraries/FreeRTOS/Source/event_groups.c **** 			it again. */
 634:./Libraries/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 635:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 636:./Libraries/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 638:./Libraries/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:./Libraries/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:./Libraries/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 1389              		.loc 1 640 19
 1390 0050 7B69     		ldr	r3, [r7, #20]
 1391 0052 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1392              		.loc 1 640 6
 1393 0054 002B     		cmp	r3, #0
 1394 0056 02D1     		bne	.L85
 641:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 642:./Libraries/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 1395              		.loc 1 642 5
 1396 0058 7869     		ldr	r0, [r7, #20]
 1397 005a FFF7FEFF 		bl	vPortFree
 1398              	.L85:
 643:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
 644:./Libraries/FreeRTOS/Source/event_groups.c **** 			else
 645:./Libraries/FreeRTOS/Source/event_groups.c **** 			{
 646:./Libraries/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:./Libraries/FreeRTOS/Source/event_groups.c **** 			}
ARM GAS  /tmp/ccWTSxZT.s 			page 41


 648:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 649:./Libraries/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 651:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 1399              		.loc 1 651 11
 1400 005e FFF7FEFF 		bl	xTaskResumeAll
 652:./Libraries/FreeRTOS/Source/event_groups.c **** }
 1401              		.loc 1 652 1
 1402 0062 00BF     		nop
 1403 0064 1837     		adds	r7, r7, #24
 1404              	.LCFI44:
 1405              		.cfi_def_cfa_offset 8
 1406 0066 BD46     		mov	sp, r7
 1407              	.LCFI45:
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 0068 80BD     		pop	{r7, pc}
 1411              		.cfi_endproc
 1412              	.LFE12:
 1414              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1415              		.align	1
 1416              		.global	vEventGroupSetBitsCallback
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1420              		.fpu fpv5-d16
 1422              	vEventGroupSetBitsCallback:
 1423              	.LFB13:
 653:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:./Libraries/FreeRTOS/Source/event_groups.c **** 
 655:./Libraries/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:./Libraries/FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:./Libraries/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1424              		.loc 1 658 1
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 8
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428 0000 80B5     		push	{r7, lr}
 1429              	.LCFI46:
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433 0002 82B0     		sub	sp, sp, #8
 1434              	.LCFI47:
 1435              		.cfi_def_cfa_offset 16
 1436 0004 00AF     		add	r7, sp, #0
 1437              	.LCFI48:
 1438              		.cfi_def_cfa_register 7
 1439 0006 7860     		str	r0, [r7, #4]
 1440 0008 3960     		str	r1, [r7]
 659:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1441              		.loc 1 659 11
 1442 000a 3968     		ldr	r1, [r7]
 1443 000c 7868     		ldr	r0, [r7, #4]
 1444 000e FFF7FEFF 		bl	xEventGroupSetBits
 660:./Libraries/FreeRTOS/Source/event_groups.c **** }
ARM GAS  /tmp/ccWTSxZT.s 			page 42


 1445              		.loc 1 660 1
 1446 0012 00BF     		nop
 1447 0014 0837     		adds	r7, r7, #8
 1448              	.LCFI49:
 1449              		.cfi_def_cfa_offset 8
 1450 0016 BD46     		mov	sp, r7
 1451              	.LCFI50:
 1452              		.cfi_def_cfa_register 13
 1453              		@ sp needed
 1454 0018 80BD     		pop	{r7, pc}
 1455              		.cfi_endproc
 1456              	.LFE13:
 1458              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1459              		.align	1
 1460              		.global	vEventGroupClearBitsCallback
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1464              		.fpu fpv5-d16
 1466              	vEventGroupClearBitsCallback:
 1467              	.LFB14:
 661:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:./Libraries/FreeRTOS/Source/event_groups.c **** 
 663:./Libraries/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:./Libraries/FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:./Libraries/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1468              		.loc 1 666 1
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 8
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0000 80B5     		push	{r7, lr}
 1473              	.LCFI51:
 1474              		.cfi_def_cfa_offset 8
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 82B0     		sub	sp, sp, #8
 1478              	.LCFI52:
 1479              		.cfi_def_cfa_offset 16
 1480 0004 00AF     		add	r7, sp, #0
 1481              	.LCFI53:
 1482              		.cfi_def_cfa_register 7
 1483 0006 7860     		str	r0, [r7, #4]
 1484 0008 3960     		str	r1, [r7]
 667:./Libraries/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 1485              		.loc 1 667 11
 1486 000a 3968     		ldr	r1, [r7]
 1487 000c 7868     		ldr	r0, [r7, #4]
 1488 000e FFF7FEFF 		bl	xEventGroupClearBits
 668:./Libraries/FreeRTOS/Source/event_groups.c **** }
 1489              		.loc 1 668 1
 1490 0012 00BF     		nop
 1491 0014 0837     		adds	r7, r7, #8
 1492              	.LCFI54:
 1493              		.cfi_def_cfa_offset 8
 1494 0016 BD46     		mov	sp, r7
 1495              	.LCFI55:
ARM GAS  /tmp/ccWTSxZT.s 			page 43


 1496              		.cfi_def_cfa_register 13
 1497              		@ sp needed
 1498 0018 80BD     		pop	{r7, pc}
 1499              		.cfi_endproc
 1500              	.LFE14:
 1502              		.section	.text.prvTestWaitCondition,"ax",%progbits
 1503              		.align	1
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu fpv5-d16
 1509              	prvTestWaitCondition:
 1510              	.LFB15:
 669:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:./Libraries/FreeRTOS/Source/event_groups.c **** 
 671:./Libraries/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:./Libraries/FreeRTOS/Source/event_groups.c **** {
 1511              		.loc 1 672 1
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 24
 1514              		@ frame_needed = 1, uses_anonymous_args = 0
 1515              		@ link register save eliminated.
 1516 0000 80B4     		push	{r7}
 1517              	.LCFI56:
 1518              		.cfi_def_cfa_offset 4
 1519              		.cfi_offset 7, -4
 1520 0002 87B0     		sub	sp, sp, #28
 1521              	.LCFI57:
 1522              		.cfi_def_cfa_offset 32
 1523 0004 00AF     		add	r7, sp, #0
 1524              	.LCFI58:
 1525              		.cfi_def_cfa_register 7
 1526 0006 F860     		str	r0, [r7, #12]
 1527 0008 B960     		str	r1, [r7, #8]
 1528 000a 7A60     		str	r2, [r7, #4]
 673:./Libraries/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 1529              		.loc 1 673 12
 1530 000c 0023     		movs	r3, #0
 1531 000e 7B61     		str	r3, [r7, #20]
 674:./Libraries/FreeRTOS/Source/event_groups.c **** 
 675:./Libraries/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 1532              		.loc 1 675 4
 1533 0010 7B68     		ldr	r3, [r7, #4]
 1534 0012 002B     		cmp	r3, #0
 1535 0014 07D1     		bne	.L89
 676:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 677:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:./Libraries/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1536              		.loc 1 679 28
 1537 0016 FA68     		ldr	r2, [r7, #12]
 1538 0018 BB68     		ldr	r3, [r7, #8]
 1539 001a 1340     		ands	r3, r3, r2
 1540              		.loc 1 679 5
 1541 001c 002B     		cmp	r3, #0
 1542 001e 0AD0     		beq	.L90
 680:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccWTSxZT.s 			page 44


 681:./Libraries/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1543              		.loc 1 681 22
 1544 0020 0123     		movs	r3, #1
 1545 0022 7B61     		str	r3, [r7, #20]
 1546 0024 07E0     		b	.L90
 1547              	.L89:
 682:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 683:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 684:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 685:./Libraries/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 687:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 688:./Libraries/FreeRTOS/Source/event_groups.c **** 	else
 689:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 690:./Libraries/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:./Libraries/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1548              		.loc 1 692 28
 1549 0026 FA68     		ldr	r2, [r7, #12]
 1550 0028 BB68     		ldr	r3, [r7, #8]
 1551 002a 1340     		ands	r3, r3, r2
 1552              		.loc 1 692 5
 1553 002c BA68     		ldr	r2, [r7, #8]
 1554 002e 9A42     		cmp	r2, r3
 1555 0030 01D1     		bne	.L90
 693:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 694:./Libraries/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 1556              		.loc 1 694 22
 1557 0032 0123     		movs	r3, #1
 1558 0034 7B61     		str	r3, [r7, #20]
 1559              	.L90:
 695:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 696:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 697:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 698:./Libraries/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 700:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 701:./Libraries/FreeRTOS/Source/event_groups.c **** 
 702:./Libraries/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 1560              		.loc 1 702 9
 1561 0036 7B69     		ldr	r3, [r7, #20]
 703:./Libraries/FreeRTOS/Source/event_groups.c **** }
 1562              		.loc 1 703 1
 1563 0038 1846     		mov	r0, r3
 1564 003a 1C37     		adds	r7, r7, #28
 1565              	.LCFI59:
 1566              		.cfi_def_cfa_offset 4
 1567 003c BD46     		mov	sp, r7
 1568              	.LCFI60:
 1569              		.cfi_def_cfa_register 13
 1570              		@ sp needed
 1571 003e 5DF8047B 		ldr	r7, [sp], #4
 1572              	.LCFI61:
 1573              		.cfi_restore 7
 1574              		.cfi_def_cfa_offset 0
 1575 0042 7047     		bx	lr
 1576              		.cfi_endproc
ARM GAS  /tmp/ccWTSxZT.s 			page 45


 1577              	.LFE15:
 1579              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1580              		.align	1
 1581              		.global	xEventGroupSetBitsFromISR
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu fpv5-d16
 1587              	xEventGroupSetBitsFromISR:
 1588              	.LFB16:
 704:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:./Libraries/FreeRTOS/Source/event_groups.c **** 
 706:./Libraries/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 707:./Libraries/FreeRTOS/Source/event_groups.c **** 
 708:./Libraries/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 709:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 1589              		.loc 1 709 2
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 24
 1592              		@ frame_needed = 1, uses_anonymous_args = 0
 1593 0000 80B5     		push	{r7, lr}
 1594              	.LCFI62:
 1595              		.cfi_def_cfa_offset 8
 1596              		.cfi_offset 7, -8
 1597              		.cfi_offset 14, -4
 1598 0002 86B0     		sub	sp, sp, #24
 1599              	.LCFI63:
 1600              		.cfi_def_cfa_offset 32
 1601 0004 00AF     		add	r7, sp, #0
 1602              	.LCFI64:
 1603              		.cfi_def_cfa_register 7
 1604 0006 F860     		str	r0, [r7, #12]
 1605 0008 B960     		str	r1, [r7, #8]
 1606 000a 7A60     		str	r2, [r7, #4]
 710:./Libraries/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
 711:./Libraries/FreeRTOS/Source/event_groups.c **** 
 712:./Libraries/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 713:./Libraries/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1607              		.loc 1 713 13
 1608 000c 7B68     		ldr	r3, [r7, #4]
 1609 000e BA68     		ldr	r2, [r7, #8]
 1610 0010 F968     		ldr	r1, [r7, #12]
 1611 0012 0448     		ldr	r0, .L94
 1612 0014 FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1613 0018 7861     		str	r0, [r7, #20]
 714:./Libraries/FreeRTOS/Source/event_groups.c **** 
 715:./Libraries/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1614              		.loc 1 715 10
 1615 001a 7B69     		ldr	r3, [r7, #20]
 716:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 1616              		.loc 1 716 2
 1617 001c 1846     		mov	r0, r3
 1618 001e 1837     		adds	r7, r7, #24
 1619              	.LCFI65:
 1620              		.cfi_def_cfa_offset 8
 1621 0020 BD46     		mov	sp, r7
 1622              	.LCFI66:
ARM GAS  /tmp/ccWTSxZT.s 			page 46


 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0022 80BD     		pop	{r7, pc}
 1626              	.L95:
 1627              		.align	2
 1628              	.L94:
 1629 0024 00000000 		.word	vEventGroupSetBitsCallback
 1630              		.cfi_endproc
 1631              	.LFE16:
 1633              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1634              		.align	1
 1635              		.global	uxEventGroupGetNumber
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1639              		.fpu fpv5-d16
 1641              	uxEventGroupGetNumber:
 1642              	.LFB17:
 717:./Libraries/FreeRTOS/Source/event_groups.c **** 
 718:./Libraries/FreeRTOS/Source/event_groups.c **** #endif
 719:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 720:./Libraries/FreeRTOS/Source/event_groups.c **** 
 721:./Libraries/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 722:./Libraries/FreeRTOS/Source/event_groups.c **** 
 723:./Libraries/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 724:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 1643              		.loc 1 724 2
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 16
 1646              		@ frame_needed = 1, uses_anonymous_args = 0
 1647              		@ link register save eliminated.
 1648 0000 80B4     		push	{r7}
 1649              	.LCFI67:
 1650              		.cfi_def_cfa_offset 4
 1651              		.cfi_offset 7, -4
 1652 0002 85B0     		sub	sp, sp, #20
 1653              	.LCFI68:
 1654              		.cfi_def_cfa_offset 24
 1655 0004 00AF     		add	r7, sp, #0
 1656              	.LCFI69:
 1657              		.cfi_def_cfa_register 7
 1658 0006 7860     		str	r0, [r7, #4]
 725:./Libraries/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 726:./Libraries/FreeRTOS/Source/event_groups.c **** 	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupH
 1659              		.loc 1 726 22
 1660 0008 7B68     		ldr	r3, [r7, #4]
 1661 000a BB60     		str	r3, [r7, #8]
 727:./Libraries/FreeRTOS/Source/event_groups.c **** 
 728:./Libraries/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1662              		.loc 1 728 5
 1663 000c 7B68     		ldr	r3, [r7, #4]
 1664 000e 002B     		cmp	r3, #0
 1665 0010 02D1     		bne	.L97
 729:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 730:./Libraries/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 1666              		.loc 1 730 12
 1667 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccWTSxZT.s 			page 47


 1668 0014 FB60     		str	r3, [r7, #12]
 1669 0016 02E0     		b	.L98
 1670              	.L97:
 731:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 732:./Libraries/FreeRTOS/Source/event_groups.c **** 		else
 733:./Libraries/FreeRTOS/Source/event_groups.c **** 		{
 734:./Libraries/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1671              		.loc 1 734 12
 1672 0018 BB68     		ldr	r3, [r7, #8]
 1673 001a 9B69     		ldr	r3, [r3, #24]
 1674 001c FB60     		str	r3, [r7, #12]
 1675              	.L98:
 735:./Libraries/FreeRTOS/Source/event_groups.c **** 		}
 736:./Libraries/FreeRTOS/Source/event_groups.c **** 
 737:./Libraries/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 1676              		.loc 1 737 10
 1677 001e FB68     		ldr	r3, [r7, #12]
 738:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 1678              		.loc 1 738 2
 1679 0020 1846     		mov	r0, r3
 1680 0022 1437     		adds	r7, r7, #20
 1681              	.LCFI70:
 1682              		.cfi_def_cfa_offset 4
 1683 0024 BD46     		mov	sp, r7
 1684              	.LCFI71:
 1685              		.cfi_def_cfa_register 13
 1686              		@ sp needed
 1687 0026 5DF8047B 		ldr	r7, [sp], #4
 1688              	.LCFI72:
 1689              		.cfi_restore 7
 1690              		.cfi_def_cfa_offset 0
 1691 002a 7047     		bx	lr
 1692              		.cfi_endproc
 1693              	.LFE17:
 1695              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1696              		.align	1
 1697              		.global	vEventGroupSetNumber
 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv5-d16
 1703              	vEventGroupSetNumber:
 1704              	.LFB18:
 739:./Libraries/FreeRTOS/Source/event_groups.c **** 
 740:./Libraries/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 741:./Libraries/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 742:./Libraries/FreeRTOS/Source/event_groups.c **** 
 743:./Libraries/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 744:./Libraries/FreeRTOS/Source/event_groups.c **** 
 745:./Libraries/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 746:./Libraries/FreeRTOS/Source/event_groups.c **** 	{
 1705              		.loc 1 746 2
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 8
 1708              		@ frame_needed = 1, uses_anonymous_args = 0
 1709              		@ link register save eliminated.
 1710 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccWTSxZT.s 			page 48


 1711              	.LCFI73:
 1712              		.cfi_def_cfa_offset 4
 1713              		.cfi_offset 7, -4
 1714 0002 83B0     		sub	sp, sp, #12
 1715              	.LCFI74:
 1716              		.cfi_def_cfa_offset 16
 1717 0004 00AF     		add	r7, sp, #0
 1718              	.LCFI75:
 1719              		.cfi_def_cfa_register 7
 1720 0006 7860     		str	r0, [r7, #4]
 1721 0008 3960     		str	r1, [r7]
 747:./Libraries/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079
 1722              		.loc 1 747 58
 1723 000a 7B68     		ldr	r3, [r7, #4]
 1724 000c 3A68     		ldr	r2, [r7]
 1725 000e 9A61     		str	r2, [r3, #24]
 748:./Libraries/FreeRTOS/Source/event_groups.c **** 	}
 1726              		.loc 1 748 2
 1727 0010 00BF     		nop
 1728 0012 0C37     		adds	r7, r7, #12
 1729              	.LCFI76:
 1730              		.cfi_def_cfa_offset 4
 1731 0014 BD46     		mov	sp, r7
 1732              	.LCFI77:
 1733              		.cfi_def_cfa_register 13
 1734              		@ sp needed
 1735 0016 5DF8047B 		ldr	r7, [sp], #4
 1736              	.LCFI78:
 1737              		.cfi_restore 7
 1738              		.cfi_def_cfa_offset 0
 1739 001a 7047     		bx	lr
 1740              		.cfi_endproc
 1741              	.LFE18:
 1743              		.text
 1744              	.Letext0:
 1745              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1746              		.file 4 "/usr/include/newlib/sys/_types.h"
 1747              		.file 5 "/usr/include/newlib/sys/reent.h"
 1748              		.file 6 "/usr/include/newlib/sys/lock.h"
 1749              		.file 7 "/usr/include/newlib/stdlib.h"
 1750              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1751              		.file 9 "./User/code/Inc/FreeRTOSConfig.h"
 1752              		.file 10 "./Libraries/FreeRTOS/Source/include/FreeRTOS.h"
 1753              		.file 11 "./Libraries/FreeRTOS/Source/include/list.h"
 1754              		.file 12 "./Libraries/FreeRTOS/Source/include/event_groups.h"
ARM GAS  /tmp/ccWTSxZT.s 			page 49


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccWTSxZT.s:17     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccWTSxZT.s:25     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccWTSxZT.s:139    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccWTSxZT.s:146    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccWTSxZT.s:201    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccWTSxZT.s:208    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccWTSxZT.s:1088   .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccWTSxZT.s:481    .text.xEventGroupSync:0000000000000158 $d
     /tmp/ccWTSxZT.s:486    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccWTSxZT.s:493    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccWTSxZT.s:1509   .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccWTSxZT.s:817    .text.xEventGroupWaitBits:0000000000000198 $d
     /tmp/ccWTSxZT.s:822    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccWTSxZT.s:829    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccWTSxZT.s:938    .text.xEventGroupClearBitsFromISR:0000000000000000 $t
     /tmp/ccWTSxZT.s:945    .text.xEventGroupClearBitsFromISR:0000000000000000 xEventGroupClearBitsFromISR
     /tmp/ccWTSxZT.s:986    .text.xEventGroupClearBitsFromISR:0000000000000024 $d
     /tmp/ccWTSxZT.s:1466   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccWTSxZT.s:991    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccWTSxZT.s:998    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccWTSxZT.s:1081   .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccWTSxZT.s:1309   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccWTSxZT.s:1316   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccWTSxZT.s:1415   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccWTSxZT.s:1422   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccWTSxZT.s:1459   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccWTSxZT.s:1503   .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccWTSxZT.s:1580   .text.xEventGroupSetBitsFromISR:0000000000000000 $t
     /tmp/ccWTSxZT.s:1587   .text.xEventGroupSetBitsFromISR:0000000000000000 xEventGroupSetBitsFromISR
     /tmp/ccWTSxZT.s:1629   .text.xEventGroupSetBitsFromISR:0000000000000024 $d
     /tmp/ccWTSxZT.s:1634   .text.uxEventGroupGetNumber:0000000000000000 $t
     /tmp/ccWTSxZT.s:1641   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
     /tmp/ccWTSxZT.s:1696   .text.vEventGroupSetNumber:0000000000000000 $t
     /tmp/ccWTSxZT.s:1703   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
