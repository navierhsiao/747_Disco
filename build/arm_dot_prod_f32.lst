ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_dot_prod_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_dot_prod_f32,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	arm_dot_prod_f32
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	arm_dot_prod_f32:
  27              	.LVL0:
  28              	.LFB145:
  29              		.file 1 ".//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c"
   1:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Title:        arm_dot_prod_f32.c
   4:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Description:  Floating-point dot product
   5:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   6:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Date:        18. March 2019
   7:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Revision:    V1.6.0
   8:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   9:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Target Processor: Cortex-M cores
  10:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /*
  12:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  14:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  16:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  20:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  22:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * limitations under the License.
  27:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  28:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  29:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #include "arm_math.h"
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 2


  30:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  31:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  32:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @ingroup groupMath
  33:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  34:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  35:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  36:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @defgroup BasicDotProd Vector Dot Product
  37:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  38:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   Computes the dot product of two vectors.
  39:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  41:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   <pre>
  42:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****       sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
  43:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   </pre>
  44:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  45:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  46:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  47:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  48:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  49:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @addtogroup BasicDotProd
  50:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @{
  51:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  52:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  53:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  54:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @brief         Dot product of floating-point vectors.
  55:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  56:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  57:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[out]    result     output result returned here.
  59:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @return        none
  60:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  61:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  62:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
  63:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcA,
  64:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcB,
  65:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blockSize,
  66:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t * result)
  67:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** {
  30              		.loc 1 67 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  68:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
  35              		.loc 1 68 9 view .LVU1
  69:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t sum = 0.0f;                          /* Temporary return variable */
  36              		.loc 1 69 9 view .LVU2
  70:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  71:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_NEON)
  72:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t vec1;
  73:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t vec2;
  74:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t res;
  75:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t accum = vdupq_n_f32(0);    
  76:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  77:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
  78:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
  79:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 3


  80:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec1 = vld1q_f32(pSrcA);
  81:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec2 = vld1q_f32(pSrcB);
  82:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  83:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
  84:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     {
  85:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]*B[0] + A[1]*B[1] + A[2]*B[2] + ... + A[blockSize-1]*B[blockSize-1] */
  86:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
  87:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
  88:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	accum = vmlaq_f32(accum, vec1, vec2);
  89:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	
  90:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Increment pointers */
  91:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
  92:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4; 
  93:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  94:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec1 = vld1q_f32(pSrcA);
  95:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec2 = vld1q_f32(pSrcB);
  96:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
  97:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Decrement the loop counter */
  98:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt--;
  99:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     }
 100:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     
 101:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if __aarch64__
 102:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vpadds_f32(vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)));
 103:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 104:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = (vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)))[0] + (vpadd_f32(vget_low_f32(accum
 105:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif    
 106:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 107:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Tail */
 108:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 0x3;
 109:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 110:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 111:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 113:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize >> 2U;
 115:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 116:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* First part of the processing with loop unrolling. Compute 4 outputs at a time.
 117:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 118:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
 119:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 120:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 121:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 122:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 123:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 124:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 125:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 126:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 127:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 128:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 129:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 130:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 131:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 132:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 133:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 134:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 135:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 136:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize % 0x4U;
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 4


 137:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 138:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 139:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 140:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 141:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize;
  37              		.loc 1 141 3 view .LVU3
 142:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 143:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 144:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 145:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 146:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
  38              		.loc 1 146 3 view .LVU4
  39              		.loc 1 146 9 view .LVU5
  69:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  40              		.loc 1 69 19 is_stmt 0 view .LVU6
  41 0000 DFED067A 		vldr.32	s15, .L7
  42              		.loc 1 146 9 view .LVU7
  43 0004 3AB1     		cbz	r2, .L2
  44              	.LVL1:
  45              	.L3:
 147:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 148:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 149:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 150:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 151:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  46              		.loc 1 151 5 is_stmt 1 view .LVU8
  47              		.loc 1 151 9 is_stmt 0 view .LVU9
  48 0006 F0EC016A 		vldmia.32	r0!, {s13}
  49              	.LVL2:
 146:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
  50              		.loc 1 146 9 view .LVU10
  51 000a 013A     		subs	r2, r2, #1
  52              	.LVL3:
  53              		.loc 1 151 9 view .LVU11
  54 000c B1EC017A 		vldmia.32	r1!, {s14}
  55              	.LVL4:
  56              		.loc 1 151 9 view .LVU12
  57 0010 E6EE877A 		vfma.f32	s15, s13, s14
  58              	.LVL5:
 152:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 153:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 154:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
  59              		.loc 1 154 5 is_stmt 1 view .LVU13
 146:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
  60              		.loc 1 146 9 view .LVU14
  61 0014 F7D1     		bne	.L3
  62              	.LVL6:
  63              	.L2:
 155:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 156:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 157:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Store result in destination buffer */
 158:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   *result = sum;
  64              		.loc 1 158 3 view .LVU15
  65              		.loc 1 158 11 is_stmt 0 view .LVU16
  66 0016 C3ED007A 		vstr.32	s15, [r3]
 159:.//Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** }
  67              		.loc 1 159 1 view .LVU17
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 5


  68 001a 7047     		bx	lr
  69              	.L8:
  70              		.align	2
  71              	.L7:
  72 001c 00000000 		.word	0
  73              		.cfi_endproc
  74              	.LFE145:
  76              		.text
  77              	.Letext0:
  78              		.file 2 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/machine/
  79              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_std
  80              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/lock
  81              		.file 5 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/_typ
  82              		.file 6 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/lib/gcc/arm-none-eabi/9.2.1/in
  83              		.file 7 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/sys/reen
  84              		.file 8 "/opt/homebrew/Cellar/arm-none-eabi-gcc/9-2019-q4-major/gcc/arm-none-eabi/include/math.h"
  85              		.file 9 ".//Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_dot_prod_f32.c
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s:17     .text.arm_dot_prod_f32:0000000000000000 $t
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s:26     .text.arm_dot_prod_f32:0000000000000000 arm_dot_prod_f32
/var/folders/wl/rshn8xbx1dsfj1zgryf4g1240000gn/T//cc1wATpc.s:72     .text.arm_dot_prod_f32:000000000000001c $d

NO UNDEFINED SYMBOLS
