ARM GAS  /tmp/ccjejDZ3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"list.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.vListInitialise,"ax",%progbits
  17              		.align	1
  18              		.global	vListInitialise
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	vListInitialise:
  26              	.LFB4:
  27              		.file 1 "./Libraries/FreeRTOS/Source/list.c"
   1:./Libraries/FreeRTOS/Source/list.c **** /*
   2:./Libraries/FreeRTOS/Source/list.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/list.c ****  *
   5:./Libraries/FreeRTOS/Source/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/list.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/list.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/list.c ****  *
  12:./Libraries/FreeRTOS/Source/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/list.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/list.c ****  *
  15:./Libraries/FreeRTOS/Source/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/list.c ****  *
  22:./Libraries/FreeRTOS/Source/list.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/list.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/list.c ****  *
  25:./Libraries/FreeRTOS/Source/list.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/list.c ****  */
  27:./Libraries/FreeRTOS/Source/list.c **** 
  28:./Libraries/FreeRTOS/Source/list.c **** 
  29:./Libraries/FreeRTOS/Source/list.c **** #include <stdlib.h>
  30:./Libraries/FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  31:./Libraries/FreeRTOS/Source/list.c **** #include "list.h"
ARM GAS  /tmp/ccjejDZ3.s 			page 2


  32:./Libraries/FreeRTOS/Source/list.c **** 
  33:./Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  34:./Libraries/FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  35:./Libraries/FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  36:./Libraries/FreeRTOS/Source/list.c **** 
  37:./Libraries/FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  38:./Libraries/FreeRTOS/Source/list.c **** {
  28              		.loc 1 38 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  39:./Libraries/FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  40:./Libraries/FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  41:./Libraries/FreeRTOS/Source/list.c **** 	as the only list entry. */
  42:./Libraries/FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini lis
  44              		.loc 1 42 37
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 03F10802 		add	r2, r3, #8
  47              		.loc 1 42 18
  48 000e 7B68     		ldr	r3, [r7, #4]
  49 0010 5A60     		str	r2, [r3, #4]
  43:./Libraries/FreeRTOS/Source/list.c **** 
  44:./Libraries/FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  45:./Libraries/FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  46:./Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  50              		.loc 1 46 30
  51 0012 7B68     		ldr	r3, [r7, #4]
  52 0014 4FF0FF32 		mov	r2, #-1
  53 0018 9A60     		str	r2, [r3, #8]
  47:./Libraries/FreeRTOS/Source/list.c **** 
  48:./Libraries/FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  49:./Libraries/FreeRTOS/Source/list.c **** 	when the list is empty. */
  50:./Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mi
  54              		.loc 1 50 45
  55 001a 7B68     		ldr	r3, [r7, #4]
  56 001c 03F10802 		add	r2, r3, #8
  57              		.loc 1 50 26
  58 0020 7B68     		ldr	r3, [r7, #4]
  59 0022 DA60     		str	r2, [r3, #12]
  51:./Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The
  60              		.loc 1 51 49
  61 0024 7B68     		ldr	r3, [r7, #4]
  62 0026 03F10802 		add	r2, r3, #8
  63              		.loc 1 51 30
  64 002a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccjejDZ3.s 			page 3


  65 002c 1A61     		str	r2, [r3, #16]
  52:./Libraries/FreeRTOS/Source/list.c **** 
  53:./Libraries/FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  66              		.loc 1 53 26
  67 002e 7B68     		ldr	r3, [r7, #4]
  68 0030 0022     		movs	r2, #0
  69 0032 1A60     		str	r2, [r3]
  54:./Libraries/FreeRTOS/Source/list.c **** 
  55:./Libraries/FreeRTOS/Source/list.c **** 	/* Write known values into the list if
  56:./Libraries/FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  57:./Libraries/FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  58:./Libraries/FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  59:./Libraries/FreeRTOS/Source/list.c **** }
  70              		.loc 1 59 1
  71 0034 00BF     		nop
  72 0036 0C37     		adds	r7, r7, #12
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 4
  75 0038 BD46     		mov	sp, r7
  76              	.LCFI4:
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 003a 5DF8047B 		ldr	r7, [sp], #4
  80              	.LCFI5:
  81              		.cfi_restore 7
  82              		.cfi_def_cfa_offset 0
  83 003e 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE4:
  87              		.section	.text.vListInitialiseItem,"ax",%progbits
  88              		.align	1
  89              		.global	vListInitialiseItem
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv5-d16
  95              	vListInitialiseItem:
  96              	.LFB5:
  60:./Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  61:./Libraries/FreeRTOS/Source/list.c **** 
  62:./Libraries/FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  63:./Libraries/FreeRTOS/Source/list.c **** {
  97              		.loc 1 63 1
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 8
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102 0000 80B4     		push	{r7}
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 4
 105              		.cfi_offset 7, -4
 106 0002 83B0     		sub	sp, sp, #12
 107              	.LCFI7:
 108              		.cfi_def_cfa_offset 16
 109 0004 00AF     		add	r7, sp, #0
 110              	.LCFI8:
 111              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccjejDZ3.s 			page 4


 112 0006 7860     		str	r0, [r7, #4]
  64:./Libraries/FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  65:./Libraries/FreeRTOS/Source/list.c **** 	pxItem->pxContainer = NULL;
 113              		.loc 1 65 22
 114 0008 7B68     		ldr	r3, [r7, #4]
 115 000a 0022     		movs	r2, #0
 116 000c 1A61     		str	r2, [r3, #16]
  66:./Libraries/FreeRTOS/Source/list.c **** 
  67:./Libraries/FreeRTOS/Source/list.c **** 	/* Write known values into the list item if
  68:./Libraries/FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  69:./Libraries/FreeRTOS/Source/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  70:./Libraries/FreeRTOS/Source/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  71:./Libraries/FreeRTOS/Source/list.c **** }
 117              		.loc 1 71 1
 118 000e 00BF     		nop
 119 0010 0C37     		adds	r7, r7, #12
 120              	.LCFI9:
 121              		.cfi_def_cfa_offset 4
 122 0012 BD46     		mov	sp, r7
 123              	.LCFI10:
 124              		.cfi_def_cfa_register 13
 125              		@ sp needed
 126 0014 5DF8047B 		ldr	r7, [sp], #4
 127              	.LCFI11:
 128              		.cfi_restore 7
 129              		.cfi_def_cfa_offset 0
 130 0018 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE5:
 134              		.section	.text.vListInsertEnd,"ax",%progbits
 135              		.align	1
 136              		.global	vListInsertEnd
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu fpv5-d16
 142              	vListInsertEnd:
 143              	.LFB6:
  72:./Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  73:./Libraries/FreeRTOS/Source/list.c **** 
  74:./Libraries/FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
  75:./Libraries/FreeRTOS/Source/list.c **** {
 144              		.loc 1 75 1
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 16
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149 0000 80B4     		push	{r7}
 150              	.LCFI12:
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 0002 85B0     		sub	sp, sp, #20
 154              	.LCFI13:
 155              		.cfi_def_cfa_offset 24
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI14:
 158              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccjejDZ3.s 			page 5


 159 0006 7860     		str	r0, [r7, #4]
 160 0008 3960     		str	r1, [r7]
  76:./Libraries/FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 161              		.loc 1 76 20
 162 000a 7B68     		ldr	r3, [r7, #4]
 163 000c 5B68     		ldr	r3, [r3, #4]
 164 000e FB60     		str	r3, [r7, #12]
  77:./Libraries/FreeRTOS/Source/list.c **** 
  78:./Libraries/FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
  79:./Libraries/FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
  80:./Libraries/FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
  81:./Libraries/FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
  82:./Libraries/FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  83:./Libraries/FreeRTOS/Source/list.c **** 
  84:./Libraries/FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  85:./Libraries/FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  86:./Libraries/FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
  87:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 165              		.loc 1 87 24
 166 0010 3B68     		ldr	r3, [r7]
 167 0012 FA68     		ldr	r2, [r7, #12]
 168 0014 5A60     		str	r2, [r3, #4]
  88:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 169              		.loc 1 88 37
 170 0016 FB68     		ldr	r3, [r7, #12]
 171 0018 9A68     		ldr	r2, [r3, #8]
 172              		.loc 1 88 28
 173 001a 3B68     		ldr	r3, [r7]
 174 001c 9A60     		str	r2, [r3, #8]
  89:./Libraries/FreeRTOS/Source/list.c **** 
  90:./Libraries/FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
  91:./Libraries/FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
  92:./Libraries/FreeRTOS/Source/list.c **** 
  93:./Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 175              		.loc 1 93 9
 176 001e FB68     		ldr	r3, [r7, #12]
 177 0020 9B68     		ldr	r3, [r3, #8]
 178              		.loc 1 93 30
 179 0022 3A68     		ldr	r2, [r7]
 180 0024 5A60     		str	r2, [r3, #4]
  94:./Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 181              		.loc 1 94 22
 182 0026 FB68     		ldr	r3, [r7, #12]
 183 0028 3A68     		ldr	r2, [r7]
 184 002a 9A60     		str	r2, [r3, #8]
  95:./Libraries/FreeRTOS/Source/list.c **** 
  96:./Libraries/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
  97:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxContainer = pxList;
 185              		.loc 1 97 29
 186 002c 3B68     		ldr	r3, [r7]
 187 002e 7A68     		ldr	r2, [r7, #4]
 188 0030 1A61     		str	r2, [r3, #16]
  98:./Libraries/FreeRTOS/Source/list.c **** 
  99:./Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 189              		.loc 1 99 10
 190 0032 7B68     		ldr	r3, [r7, #4]
 191 0034 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccjejDZ3.s 			page 6


 192              		.loc 1 99 29
 193 0036 5A1C     		adds	r2, r3, #1
 194 0038 7B68     		ldr	r3, [r7, #4]
 195 003a 1A60     		str	r2, [r3]
 100:./Libraries/FreeRTOS/Source/list.c **** }
 196              		.loc 1 100 1
 197 003c 00BF     		nop
 198 003e 1437     		adds	r7, r7, #20
 199              	.LCFI15:
 200              		.cfi_def_cfa_offset 4
 201 0040 BD46     		mov	sp, r7
 202              	.LCFI16:
 203              		.cfi_def_cfa_register 13
 204              		@ sp needed
 205 0042 5DF8047B 		ldr	r7, [sp], #4
 206              	.LCFI17:
 207              		.cfi_restore 7
 208              		.cfi_def_cfa_offset 0
 209 0046 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE6:
 213              		.section	.text.vListInsert,"ax",%progbits
 214              		.align	1
 215              		.global	vListInsert
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu fpv5-d16
 221              	vListInsert:
 222              	.LFB7:
 101:./Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 102:./Libraries/FreeRTOS/Source/list.c **** 
 103:./Libraries/FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 104:./Libraries/FreeRTOS/Source/list.c **** {
 223              		.loc 1 104 1
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 16
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 0000 80B4     		push	{r7}
 229              	.LCFI18:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 7, -4
 232 0002 85B0     		sub	sp, sp, #20
 233              	.LCFI19:
 234              		.cfi_def_cfa_offset 24
 235 0004 00AF     		add	r7, sp, #0
 236              	.LCFI20:
 237              		.cfi_def_cfa_register 7
 238 0006 7860     		str	r0, [r7, #4]
 239 0008 3960     		str	r1, [r7]
 105:./Libraries/FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 106:./Libraries/FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 240              		.loc 1 106 18
 241 000a 3B68     		ldr	r3, [r7]
 242 000c 1B68     		ldr	r3, [r3]
 243 000e BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccjejDZ3.s 			page 7


 107:./Libraries/FreeRTOS/Source/list.c **** 
 108:./Libraries/FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 109:./Libraries/FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 110:./Libraries/FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 111:./Libraries/FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 112:./Libraries/FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 113:./Libraries/FreeRTOS/Source/list.c **** 
 114:./Libraries/FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 115:./Libraries/FreeRTOS/Source/list.c **** 
 116:./Libraries/FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then the
 117:./Libraries/FreeRTOS/Source/list.c **** 	new list item should be placed after it.  This ensures that TCBs which are
 118:./Libraries/FreeRTOS/Source/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 119:./Libraries/FreeRTOS/Source/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 120:./Libraries/FreeRTOS/Source/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 121:./Libraries/FreeRTOS/Source/list.c **** 	first, and the algorithm slightly modified if necessary. */
 122:./Libraries/FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 244              		.loc 1 122 4
 245 0010 BB68     		ldr	r3, [r7, #8]
 246 0012 B3F1FF3F 		cmp	r3, #-1
 247 0016 03D1     		bne	.L5
 123:./Libraries/FreeRTOS/Source/list.c **** 	{
 124:./Libraries/FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 248              		.loc 1 124 14
 249 0018 7B68     		ldr	r3, [r7, #4]
 250 001a 1B69     		ldr	r3, [r3, #16]
 251 001c FB60     		str	r3, [r7, #12]
 252 001e 0CE0     		b	.L6
 253              	.L5:
 125:./Libraries/FreeRTOS/Source/list.c **** 	}
 126:./Libraries/FreeRTOS/Source/list.c **** 	else
 127:./Libraries/FreeRTOS/Source/list.c **** 	{
 128:./Libraries/FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 129:./Libraries/FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are
 130:./Libraries/FreeRTOS/Source/list.c **** 		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
 131:./Libraries/FreeRTOS/Source/list.c **** 		more tips, and ensure configASSERT() is defined!
 132:./Libraries/FreeRTOS/Source/list.c **** 		https://www.freertos.org/a00110.html#configASSERT
 133:./Libraries/FreeRTOS/Source/list.c **** 
 134:./Libraries/FreeRTOS/Source/list.c **** 			1) Stack overflow -
 135:./Libraries/FreeRTOS/Source/list.c **** 			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
 136:./Libraries/FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 137:./Libraries/FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 138:./Libraries/FreeRTOS/Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 139:./Libraries/FreeRTOS/Source/list.c **** 			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 140:./Libraries/FreeRTOS/Source/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 141:./Libraries/FreeRTOS/Source/list.c **** 			   https://www.freertos.org/a00110.html
 142:./Libraries/FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:./Libraries/FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 144:./Libraries/FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 145:./Libraries/FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 146:./Libraries/FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 147:./Libraries/FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 148:./Libraries/FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:./Libraries/FreeRTOS/Source/list.c **** 
 150:./Libraries/FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 254              		.loc 1 150 19
 255 0020 7B68     		ldr	r3, [r7, #4]
 256 0022 0833     		adds	r3, r3, #8
ARM GAS  /tmp/ccjejDZ3.s 			page 8


 257 0024 FB60     		str	r3, [r7, #12]
 258              		.loc 1 150 3
 259 0026 02E0     		b	.L7
 260              	.L8:
 261              		.loc 1 150 125 discriminator 3
 262 0028 FB68     		ldr	r3, [r7, #12]
 263 002a 5B68     		ldr	r3, [r3, #4]
 264 002c FB60     		str	r3, [r7, #12]
 265              	.L7:
 266              		.loc 1 150 71 discriminator 1
 267 002e FB68     		ldr	r3, [r7, #12]
 268 0030 5B68     		ldr	r3, [r3, #4]
 269              		.loc 1 150 79 discriminator 1
 270 0032 1B68     		ldr	r3, [r3]
 271              		.loc 1 150 3 discriminator 1
 272 0034 BA68     		ldr	r2, [r7, #8]
 273 0036 9A42     		cmp	r2, r3
 274 0038 F6D2     		bcs	.L8
 275              	.L6:
 151:./Libraries/FreeRTOS/Source/list.c **** 		{
 152:./Libraries/FreeRTOS/Source/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 153:./Libraries/FreeRTOS/Source/list.c **** 			insertion position. */
 154:./Libraries/FreeRTOS/Source/list.c **** 		}
 155:./Libraries/FreeRTOS/Source/list.c **** 	}
 156:./Libraries/FreeRTOS/Source/list.c **** 
 157:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 276              		.loc 1 157 36
 277 003a FB68     		ldr	r3, [r7, #12]
 278 003c 5A68     		ldr	r2, [r3, #4]
 279              		.loc 1 157 24
 280 003e 3B68     		ldr	r3, [r7]
 281 0040 5A60     		str	r2, [r3, #4]
 158:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 282              		.loc 1 158 15
 283 0042 3B68     		ldr	r3, [r7]
 284 0044 5B68     		ldr	r3, [r3, #4]
 285              		.loc 1 158 36
 286 0046 3A68     		ldr	r2, [r7]
 287 0048 9A60     		str	r2, [r3, #8]
 159:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 288              		.loc 1 159 28
 289 004a 3B68     		ldr	r3, [r7]
 290 004c FA68     		ldr	r2, [r7, #12]
 291 004e 9A60     		str	r2, [r3, #8]
 160:./Libraries/FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 292              		.loc 1 160 21
 293 0050 FB68     		ldr	r3, [r7, #12]
 294 0052 3A68     		ldr	r2, [r7]
 295 0054 5A60     		str	r2, [r3, #4]
 161:./Libraries/FreeRTOS/Source/list.c **** 
 162:./Libraries/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:./Libraries/FreeRTOS/Source/list.c **** 	item later. */
 164:./Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxContainer = pxList;
 296              		.loc 1 164 29
 297 0056 3B68     		ldr	r3, [r7]
 298 0058 7A68     		ldr	r2, [r7, #4]
 299 005a 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccjejDZ3.s 			page 9


 165:./Libraries/FreeRTOS/Source/list.c **** 
 166:./Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 300              		.loc 1 166 10
 301 005c 7B68     		ldr	r3, [r7, #4]
 302 005e 1B68     		ldr	r3, [r3]
 303              		.loc 1 166 29
 304 0060 5A1C     		adds	r2, r3, #1
 305 0062 7B68     		ldr	r3, [r7, #4]
 306 0064 1A60     		str	r2, [r3]
 167:./Libraries/FreeRTOS/Source/list.c **** }
 307              		.loc 1 167 1
 308 0066 00BF     		nop
 309 0068 1437     		adds	r7, r7, #20
 310              	.LCFI21:
 311              		.cfi_def_cfa_offset 4
 312 006a BD46     		mov	sp, r7
 313              	.LCFI22:
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 006c 5DF8047B 		ldr	r7, [sp], #4
 317              	.LCFI23:
 318              		.cfi_restore 7
 319              		.cfi_def_cfa_offset 0
 320 0070 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE7:
 324              		.section	.text.uxListRemove,"ax",%progbits
 325              		.align	1
 326              		.global	uxListRemove
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv5-d16
 332              	uxListRemove:
 333              	.LFB8:
 168:./Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:./Libraries/FreeRTOS/Source/list.c **** 
 170:./Libraries/FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 171:./Libraries/FreeRTOS/Source/list.c **** {
 334              		.loc 1 171 1
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 16
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI24:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 85B0     		sub	sp, sp, #20
 344              	.LCFI25:
 345              		.cfi_def_cfa_offset 24
 346 0004 00AF     		add	r7, sp, #0
 347              	.LCFI26:
 348              		.cfi_def_cfa_register 7
 349 0006 7860     		str	r0, [r7, #4]
 172:./Libraries/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 173:./Libraries/FreeRTOS/Source/list.c **** item. */
ARM GAS  /tmp/ccjejDZ3.s 			page 10


 174:./Libraries/FreeRTOS/Source/list.c **** List_t * const pxList = pxItemToRemove->pxContainer;
 350              		.loc 1 174 16
 351 0008 7B68     		ldr	r3, [r7, #4]
 352 000a 1B69     		ldr	r3, [r3, #16]
 353 000c FB60     		str	r3, [r7, #12]
 175:./Libraries/FreeRTOS/Source/list.c **** 
 176:./Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 354              		.loc 1 176 16
 355 000e 7B68     		ldr	r3, [r7, #4]
 356 0010 5B68     		ldr	r3, [r3, #4]
 357              		.loc 1 176 53
 358 0012 7A68     		ldr	r2, [r7, #4]
 359 0014 9268     		ldr	r2, [r2, #8]
 360              		.loc 1 176 37
 361 0016 9A60     		str	r2, [r3, #8]
 177:./Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 362              		.loc 1 177 16
 363 0018 7B68     		ldr	r3, [r7, #4]
 364 001a 9B68     		ldr	r3, [r3, #8]
 365              		.loc 1 177 53
 366 001c 7A68     		ldr	r2, [r7, #4]
 367 001e 5268     		ldr	r2, [r2, #4]
 368              		.loc 1 177 37
 369 0020 5A60     		str	r2, [r3, #4]
 178:./Libraries/FreeRTOS/Source/list.c **** 
 179:./Libraries/FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
 180:./Libraries/FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
 181:./Libraries/FreeRTOS/Source/list.c **** 
 182:./Libraries/FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 183:./Libraries/FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 370              		.loc 1 183 12
 371 0022 FB68     		ldr	r3, [r7, #12]
 372 0024 5B68     		ldr	r3, [r3, #4]
 373              		.loc 1 183 4
 374 0026 7A68     		ldr	r2, [r7, #4]
 375 0028 9A42     		cmp	r2, r3
 376 002a 03D1     		bne	.L10
 184:./Libraries/FreeRTOS/Source/list.c **** 	{
 185:./Libraries/FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 377              		.loc 1 185 35
 378 002c 7B68     		ldr	r3, [r7, #4]
 379 002e 9A68     		ldr	r2, [r3, #8]
 380              		.loc 1 185 19
 381 0030 FB68     		ldr	r3, [r7, #12]
 382 0032 5A60     		str	r2, [r3, #4]
 383              	.L10:
 186:./Libraries/FreeRTOS/Source/list.c **** 	}
 187:./Libraries/FreeRTOS/Source/list.c **** 	else
 188:./Libraries/FreeRTOS/Source/list.c **** 	{
 189:./Libraries/FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 190:./Libraries/FreeRTOS/Source/list.c **** 	}
 191:./Libraries/FreeRTOS/Source/list.c **** 
 192:./Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxContainer = NULL;
 384              		.loc 1 192 30
 385 0034 7B68     		ldr	r3, [r7, #4]
 386 0036 0022     		movs	r2, #0
 387 0038 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccjejDZ3.s 			page 11


 193:./Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 388              		.loc 1 193 10
 389 003a FB68     		ldr	r3, [r7, #12]
 390 003c 1B68     		ldr	r3, [r3]
 391              		.loc 1 193 29
 392 003e 5A1E     		subs	r2, r3, #1
 393 0040 FB68     		ldr	r3, [r7, #12]
 394 0042 1A60     		str	r2, [r3]
 194:./Libraries/FreeRTOS/Source/list.c **** 
 195:./Libraries/FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 395              		.loc 1 195 15
 396 0044 FB68     		ldr	r3, [r7, #12]
 397 0046 1B68     		ldr	r3, [r3]
 196:./Libraries/FreeRTOS/Source/list.c **** }
 398              		.loc 1 196 1
 399 0048 1846     		mov	r0, r3
 400 004a 1437     		adds	r7, r7, #20
 401              	.LCFI27:
 402              		.cfi_def_cfa_offset 4
 403 004c BD46     		mov	sp, r7
 404              	.LCFI28:
 405              		.cfi_def_cfa_register 13
 406              		@ sp needed
 407 004e 5DF8047B 		ldr	r7, [sp], #4
 408              	.LCFI29:
 409              		.cfi_restore 7
 410              		.cfi_def_cfa_offset 0
 411 0052 7047     		bx	lr
 412              		.cfi_endproc
 413              	.LFE8:
 415              		.text
 416              	.Letext0:
 417              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 418              		.file 3 "/usr/include/newlib/sys/_types.h"
 419              		.file 4 "/usr/include/newlib/sys/reent.h"
 420              		.file 5 "/usr/include/newlib/sys/lock.h"
 421              		.file 6 "/usr/include/newlib/stdlib.h"
 422              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 423              		.file 8 "./User/code/Inc/FreeRTOSConfig.h"
 424              		.file 9 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 425              		.file 10 "./Libraries/FreeRTOS/Source/include/list.h"
ARM GAS  /tmp/ccjejDZ3.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccjejDZ3.s:17     .text.vListInitialise:0000000000000000 $t
     /tmp/ccjejDZ3.s:25     .text.vListInitialise:0000000000000000 vListInitialise
     /tmp/ccjejDZ3.s:88     .text.vListInitialiseItem:0000000000000000 $t
     /tmp/ccjejDZ3.s:95     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
     /tmp/ccjejDZ3.s:135    .text.vListInsertEnd:0000000000000000 $t
     /tmp/ccjejDZ3.s:142    .text.vListInsertEnd:0000000000000000 vListInsertEnd
     /tmp/ccjejDZ3.s:214    .text.vListInsert:0000000000000000 $t
     /tmp/ccjejDZ3.s:221    .text.vListInsert:0000000000000000 vListInsert
     /tmp/ccjejDZ3.s:325    .text.uxListRemove:0000000000000000 $t
     /tmp/ccjejDZ3.s:332    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
