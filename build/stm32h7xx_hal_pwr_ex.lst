ARM GAS  /tmp/ccklhD6J.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_pwr_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	HAL_PWREx_ConfigSupply
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	HAL_PWREx_ConfigSupply:
  27              	.LVL0:
  28              	.LFB331:
  29              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @verbatim
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   [..]
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with the following different setups according to hardware (support SMPS):
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_DIRECT_SMPS_SUPPLY
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_LDO
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_LDO
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_LDO_SUPPLY
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
ARM GAS  /tmp/ccklhD6J.s 			page 2


  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the following scales :
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE2
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE3
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        main internal regulator output voltage in STOP mode. The voltage scaling
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in STOP mode could be one of the following scales :
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE3
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE4
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE5
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        output voltage applied to the main regulator in STOP mode.
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOP2Mode() function to enter the system in STOP mode
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with core domain in D2STOP mode. This API is used only for STM32H7Axxx
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and STM32H7Bxxx devices.
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOPMode() function to enter the selected domain in
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        DSTOP mode. Call this API with all available power domains to enter the
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        system in STOP mode.
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearPendingEvent() function always before entring the
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Cortex-Mx in any low power mode (SLEEP/DEEP-SLEEP) using WFE entry.
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTANDBYMode() function to enter the selected domain
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DSTANDBY mode. Call this API with all available power domains to enter
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the system in STANDBY mode.
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigD3Domain() function to setup the D3/SRD domain state
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (RUN/STOP) when the system enter to low power mode.
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearDomainFlags() function to clear the CPU flags for the
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        selected power domain. This API is used only for dual core devices.
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_HoldCore() and HAL_PWREx_ReleaseCore() functions to hold
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and release the selected CPU and and their domain peripherals when
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        exiting STOP mode. These APIs are used only for dual core devices.
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableFlashPowerDown() and
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableFlashPowerDown() functions to enable and disable the
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Flash Power Down in STOP mode.
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMemoryShutOff() and
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableMemoryShutOff() functions to enable and disable the
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        memory block shut-off in DStop or DStop2. These APIs are used only for
ARM GAS  /tmp/ccklhD6J.s 			page 3


  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines.
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() and HAL_PWREx_DisableWakeUpPin()
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the Wake-up pin functionality for
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the selected pin.
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to manage wake-up flag for the selected pin.
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_WAKEUP_PIN_IRQHandler() function to handle all wake-up
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        pins interrupts.
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkUpReg() and HAL_PWREx_DisableBkUpReg() functions
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        to enable and disable the backup domain regulator.
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableUSBReg(), HAL_PWREx_DisableUSBReg(),
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_EnableUSBVoltageDetector() and
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableUSBVoltageDetector() functions to manage USB power
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        regulation functionalities.
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBatteryCharging() and
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableBatteryCharging() functions to enable and disable the
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        battery charging feature with the selected resistor.
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableAnalogBooster() and
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableAnalogBooster() functions to enable and disable the
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD boost feature when the VDD supply voltage is below 2V7.
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetMMCVoltage() and HAL_PWREx_DisableMonitoring()
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        function to get VDDMMC voltage level. This API is used only for
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigAVD() after setting parameter to be configured
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (event mode and voltage threshold) in order to set up the Analog Voltage
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Detector then use HAL_PWREx_EnableAVD() and  HAL_PWREx_DisableAVD()
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to start and stop the AVD detection.
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) AVD level could be one of the following values :
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 1V7
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V1
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V5
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V8
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_AVD_IRQHandler() function to handle the PWR PVD and
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD interrupt request.
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @endverbatim
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics.
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccklhD6J.s 			page 4


 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * the "License"; You may not use this file except in compliance with the
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * License. You may obtain a copy of the License at:
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              (0x00010000U)
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             (0x00020000U)
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          (0x00000001U)
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         (0x00000002U)
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  (0x00000003U)
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY   (1000U)
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (EXTI_IMR2_IM57)
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM57 | EXTI_IMR2_IM58 |\
ARM GAS  /tmp/ccklhD6J.s 			page 5


 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM58 | EXTI_IMR2_IM60)
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (EXTI_IMR2_IM57) */
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) When the system is powered on, the POR monitors VDD supply. Once VDD is
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        above the POR threshold level, the voltage regulator is enabled in the
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        default supply configuration:
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1V0 in accordance with
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the VOS3 level configured in PWR (D3/SRD) domain control register
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_D3CR/PWR_SRDCR).
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           oscillator is enabled.
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           and option bytes are loaded and the CPU starts in Run* mode.
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           configuration programming using the HAL_PWREx_ConfigSupply().
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration has been configured, the
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ConfigSupply() function checks the ACTVOSRDY bit in PWR
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control status register 1 (PWR_CSR1) to guarantee a valid voltage
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels:
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             system is in limited Run* mode, write accesses to the RAMs are not
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             permitted and VOS shall not be changed.
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             is in normal Run mode, write accesses to RAMs are allowed and VOS
ARM GAS  /tmp/ccklhD6J.s 			page 6


 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             can be changed.
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        system startup.
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY : The SMPS supplies the Vcore Power
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                          Domains. The LDO is Bypassed.
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO : The SMPS 1.8V output supplies
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO : The SMPS 2.5V output supplies
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO : The SMPS 1.8V output
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO : The SMPS 2.5V output
 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT : The SMPS 1.8V output supplies
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT : The SMPS 2.5V output supplies
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY : The LDO regulator supplies the Vcore Power
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                  Domains. The SMPS regulator is Bypassed.
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY : The SMPS and the LDO are
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Bypassed. The Vcore Power
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Domains are supplied from
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              external source.
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_LDO_SUPPLY and PWR_EXTERNAL_SOURCE_SUPPLY are used by all
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         H7 lines.
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         The PWR_DIRECT_SMPS_SUPPLY, PWR_SMPS_1V8_SUPPLIES_LDO,
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_LDO, PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO,
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO, PWR_SMPS_1V8_SUPPLIES_EXT and
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator.
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
ARM GAS  /tmp/ccklhD6J.s 			page 7


 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  30              		.loc 1 315 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  34              		.loc 1 316 3 view .LVU1
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_SUPPLY (SupplySource));
  35              		.loc 1 319 3 view .LVU2
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if supply source was configured */
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_FLAG_SCUEN)
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_L
  36              		.loc 1 325 3 view .LVU3
  37              		.loc 1 325 11 is_stmt 0 view .LVU4
  38 0000 1C4A     		ldr	r2, .L14
  39 0002 D368     		ldr	r3, [r2, #12]
  40              		.loc 1 325 17 view .LVU5
  41 0004 03F00703 		and	r3, r3, #7
  42              		.loc 1 325 6 view .LVU6
  43 0008 062B     		cmp	r3, #6
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check supply configuration */
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  44              		.loc 1 329 13 view .LVU7
  45 000a D368     		ldr	r3, [r2, #12]
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  46              		.loc 1 315 1 view .LVU8
  47 000c 70B5     		push	{r4, r5, r6, lr}
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 16
  50              		.cfi_offset 4, -16
  51              		.cfi_offset 5, -12
  52              		.cfi_offset 6, -8
  53              		.cfi_offset 14, -4
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  54              		.loc 1 315 1 view .LVU9
  55 000e 0446     		mov	r4, r0
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
  56              		.loc 1 325 6 view .LVU10
  57 0010 05D0     		beq	.L2
  58              		.loc 1 329 5 is_stmt 1 view .LVU11
  59              		.loc 1 329 19 is_stmt 0 view .LVU12
  60 0012 03F03F03 		and	r3, r3, #63
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new supply config */
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  61              		.loc 1 332 14 view .LVU13
  62 0016 181A     		subs	r0, r3, r0
  63              	.LVL1:
  64              		.loc 1 332 14 view .LVU14
  65 0018 18BF     		it	ne
ARM GAS  /tmp/ccklhD6J.s 			page 8


  66 001a 0120     		movne	r0, #1
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, but new supply configuration
 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          matches with old supply configuration : nothing to do
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_OK;
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (SMPS)
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get the current tick number */
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick ();
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_ERROR;
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SMPS) */
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
  67              		.loc 1 380 1 view .LVU15
  68 001c 70BD     		pop	{r4, r5, r6, pc}
  69              	.LVL2:
  70              	.L2:
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  71              		.loc 1 344 3 is_stmt 1 view .LVU16
  72 001e 23F03F03 		bic	r3, r3, #63
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccklhD6J.s 			page 9


  73              		.loc 1 350 10 is_stmt 0 view .LVU17
  74 0022 1646     		mov	r6, r2
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  75              		.loc 1 344 3 view .LVU18
  76 0024 0343     		orrs	r3, r3, r0
  77 0026 D360     		str	r3, [r2, #12]
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  78              		.loc 1 347 3 is_stmt 1 view .LVU19
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  79              		.loc 1 347 15 is_stmt 0 view .LVU20
  80 0028 FFF7FEFF 		bl	HAL_GetTick
  81              	.LVL3:
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  82              		.loc 1 347 15 view .LVU21
  83 002c 0546     		mov	r5, r0
  84              	.LVL4:
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
  85              		.loc 1 350 3 is_stmt 1 view .LVU22
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
  86              		.loc 1 350 9 is_stmt 0 view .LVU23
  87 002e 05E0     		b	.L4
  88              	.LVL5:
  89              	.L5:
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
  90              		.loc 1 352 10 view .LVU24
  91 0030 FFF7FEFF 		bl	HAL_GetTick
  92              	.LVL6:
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
  93              		.loc 1 352 25 view .LVU25
  94 0034 431B     		subs	r3, r0, r5
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
  95              		.loc 1 352 8 view .LVU26
  96 0036 B3F57A7F 		cmp	r3, #1000
  97 003a 19D8     		bhi	.L8
  98              	.L4:
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
  99              		.loc 1 352 5 is_stmt 1 view .LVU27
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 100              		.loc 1 350 9 view .LVU28
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 101              		.loc 1 350 10 is_stmt 0 view .LVU29
 102 003c 7368     		ldr	r3, [r6, #4]
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 103              		.loc 1 350 9 view .LVU30
 104 003e 9A04     		lsls	r2, r3, #18
 105 0040 F6D5     		bpl	.L5
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 106              		.loc 1 360 3 is_stmt 1 view .LVU31
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 107              		.loc 1 362 21 is_stmt 0 view .LVU32
 108 0042 A4F11D03 		sub	r3, r4, #29
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 109              		.loc 1 362 59 view .LVU33
 110 0046 012B     		cmp	r3, #1
 111 0048 05D9     		bls	.L6
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 112              		.loc 1 363 21 view .LVU34
ARM GAS  /tmp/ccklhD6J.s 			page 10


 113 004a A4F12D00 		sub	r0, r4, #45
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 114              		.loc 1 362 59 view .LVU35
 115 004e 0128     		cmp	r0, #1
 116 0050 01D9     		bls	.L6
 117              	.LVL7:
 118              	.L10:
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 119              		.loc 1 379 10 view .LVU36
 120 0052 0020     		movs	r0, #0
 121              		.loc 1 380 1 view .LVU37
 122 0054 70BD     		pop	{r4, r5, r6, pc}
 123              	.LVL8:
 124              	.L6:
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 125              		.loc 1 366 5 is_stmt 1 view .LVU38
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 126              		.loc 1 366 17 is_stmt 0 view .LVU39
 127 0056 FFF7FEFF 		bl	HAL_GetTick
 128              	.LVL9:
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 129              		.loc 1 369 12 view .LVU40
 130 005a 064D     		ldr	r5, .L14
 131              	.LVL10:
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 132              		.loc 1 366 17 view .LVU41
 133 005c 0446     		mov	r4, r0
 134              	.LVL11:
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 135              		.loc 1 369 5 is_stmt 1 view .LVU42
 136              	.L7:
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 137              		.loc 1 371 7 view .LVU43
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 138              		.loc 1 369 11 view .LVU44
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 139              		.loc 1 369 12 is_stmt 0 view .LVU45
 140 005e EB68     		ldr	r3, [r5, #12]
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 141              		.loc 1 369 11 view .LVU46
 142 0060 DB03     		lsls	r3, r3, #15
 143 0062 F6D4     		bmi	.L10
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 144              		.loc 1 371 12 view .LVU47
 145 0064 FFF7FEFF 		bl	HAL_GetTick
 146              	.LVL12:
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 147              		.loc 1 371 27 view .LVU48
 148 0068 001B     		subs	r0, r0, r4
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 149              		.loc 1 371 10 view .LVU49
 150 006a B0F57A7F 		cmp	r0, #1000
 151 006e F6D9     		bls	.L7
 152              	.LVL13:
 153              	.L8:
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 154              		.loc 1 354 14 view .LVU50
ARM GAS  /tmp/ccklhD6J.s 			page 11


 155 0070 0120     		movs	r0, #1
 156              		.loc 1 380 1 view .LVU51
 157 0072 70BD     		pop	{r4, r5, r6, pc}
 158              	.L15:
 159              		.align	2
 160              	.L14:
 161 0074 00480258 		.word	1476544512
 162              		.cfi_endproc
 163              	.LFE331:
 165              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 166              		.align	1
 167              		.p2align 2,,3
 168              		.global	HAL_PWREx_GetSupplyConfig
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv5-d16
 174              	HAL_PWREx_GetSupplyConfig:
 175              	.LFB332:
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig (void)
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 176              		.loc 1 387 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 181              		.loc 1 388 3 view .LVU53
 182              		.loc 1 388 14 is_stmt 0 view .LVU54
 183 0000 024B     		ldr	r3, .L17
 184 0002 D868     		ldr	r0, [r3, #12]
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 185              		.loc 1 389 1 view .LVU55
 186 0004 00F03F00 		and	r0, r0, #63
 187 0008 7047     		bx	lr
 188              	.L18:
 189 000a 00BF     		.align	2
 190              	.L17:
 191 000c 00480258 		.word	1476544512
 192              		.cfi_endproc
 193              	.LFE332:
 195              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 196              		.align	1
 197              		.p2align 2,,3
 198              		.global	HAL_PWREx_ControlVoltageScaling
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv5-d16
 204              	HAL_PWREx_ControlVoltageScaling:
 205              	.LVL14:
 206              	.LFB333:
ARM GAS  /tmp/ccklhD6J.s 			page 12


 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          consumption.
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage output
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                Scale 0 mode.
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage output
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 1 mode.
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2 : Regulator voltage output
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 2 mode.
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3 : Regulator voltage output
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 3 mode.
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For STM32H74x and STM32H75x lines, configuring Voltage Scale 0 is
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only possible when Vcore is supplied from LDO (Low DropOut). The
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SYSCFG Clock must be enabled through __HAL_RCC_SYSCFG_CLK_ENABLE()
 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         macro before configuring Voltage Scale 0.
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         To enter low power mode , and if current regulator voltage is
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         low power mode.
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 207              		.loc 1 415 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 211              		.loc 1 416 3 view .LVU57
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));
 212              		.loc 1 419 3 view .LVU58
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the voltage scaling  */
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 213              		.loc 1 422 3 view .LVU59
 214              		.loc 1 422 11 is_stmt 0 view .LVU60
 215 0000 2D4A     		ldr	r2, .L43
 216 0002 5368     		ldr	r3, [r2, #4]
 217              		.loc 1 422 18 view .LVU61
 218 0004 03F44043 		and	r3, r3, #49152
 219              		.loc 1 422 6 view .LVU62
 220 0008 8342     		cmp	r3, r0
 221 000a 52D0     		beq	.L41
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Old and new voltage scaling configuration match : nothing to do */
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_OK;
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_SRDCR_VOS)
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  /tmp/ccklhD6J.s 			page 13


 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 222              		.loc 1 433 3 is_stmt 1 view .LVU63
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 223              		.loc 1 415 1 is_stmt 0 view .LVU64
 224 000c 70B5     		push	{r4, r5, r6, lr}
 225              	.LCFI1:
 226              		.cfi_def_cfa_offset 16
 227              		.cfi_offset 4, -16
 228              		.cfi_offset 5, -12
 229              		.cfi_offset 6, -8
 230              		.cfi_offset 14, -4
 231 000e 0446     		mov	r4, r0
 232              		.loc 1 433 6 view .LVU65
 233 0010 D8B1     		cbz	r0, .L42
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set the voltage range */
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Get tick */
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       tickstart = HAL_GetTick ();
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Wait till voltage level flag is set */
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           return HAL_ERROR;
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Enable the PWR overdrive */
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* The voltage scale 0 is only possible when LDO regulator is enabled */
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 234              		.loc 1 463 5 is_stmt 1 view .LVU66
 235              		.loc 1 463 13 is_stmt 0 view .LVU67
 236 0012 5368     		ldr	r3, [r2, #4]
 237              		.loc 1 463 20 view .LVU68
 238 0014 03F44043 		and	r3, r3, #49152
 239              		.loc 1 463 8 view .LVU69
 240 0018 B3F5404F 		cmp	r3, #49152
 241 001c 32D0     		beq	.L28
 242              	.LVL15:
 243              	.L29:
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
ARM GAS  /tmp/ccklhD6J.s 			page 14


 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Disable the PWR overdrive */
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Get tick */
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         tickstart = HAL_GetTick ();
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Wait till voltage level flag is set */
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             return HAL_ERROR;
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set the voltage range */
 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 244              		.loc 1 485 5 is_stmt 1 view .LVU70
 245 001e 264B     		ldr	r3, .L43
 246 0020 9869     		ldr	r0, [r3, #24]
 247 0022 20F44040 		bic	r0, r0, #49152
 248 0026 0443     		orrs	r4, r4, r0
 249              	.LVL16:
 250              		.loc 1 485 5 is_stmt 0 view .LVU71
 251 0028 9C61     		str	r4, [r3, #24]
 252              	.L27:
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else  /* STM32H72xxx and STM32H73xxx lines */
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SYSCFG_PWRCR_ODEN) */
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_SRDCR_VOS) */
 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 253              		.loc 1 494 3 is_stmt 1 view .LVU72
 254              		.loc 1 494 15 is_stmt 0 view .LVU73
 255 002a FFF7FEFF 		bl	HAL_GetTick
 256              	.LVL17:
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 257              		.loc 1 497 10 view .LVU74
 258 002e 224D     		ldr	r5, .L43
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 259              		.loc 1 494 15 view .LVU75
 260 0030 0446     		mov	r4, r0
 261              	.LVL18:
 262              		.loc 1 497 3 is_stmt 1 view .LVU76
 263              		.loc 1 497 9 is_stmt 0 view .LVU77
 264 0032 05E0     		b	.L32
 265              	.LVL19:
 266              	.L33:
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccklhD6J.s 			page 15


 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 267              		.loc 1 499 10 view .LVU78
 268 0034 FFF7FEFF 		bl	HAL_GetTick
 269              	.LVL20:
 270              		.loc 1 499 24 view .LVU79
 271 0038 001B     		subs	r0, r0, r4
 272              		.loc 1 499 8 view .LVU80
 273 003a B0F57A7F 		cmp	r0, #1000
 274 003e 07D8     		bhi	.L25
 275              	.L32:
 276              		.loc 1 499 5 is_stmt 1 view .LVU81
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 277              		.loc 1 497 9 view .LVU82
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 278              		.loc 1 497 10 is_stmt 0 view .LVU83
 279 0040 6B68     		ldr	r3, [r5, #4]
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 280              		.loc 1 497 9 view .LVU84
 281 0042 9B04     		lsls	r3, r3, #18
 282 0044 F6D5     		bpl	.L33
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 283              		.loc 1 425 12 view .LVU85
 284 0046 0020     		movs	r0, #0
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 285              		.loc 1 506 1 view .LVU86
 286 0048 70BD     		pop	{r4, r5, r6, pc}
 287              	.LVL21:
 288              	.L42:
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 289              		.loc 1 435 5 is_stmt 1 view .LVU87
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 290              		.loc 1 435 13 is_stmt 0 view .LVU88
 291 004a D368     		ldr	r3, [r2, #12]
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 292              		.loc 1 435 8 view .LVU89
 293 004c 9C07     		lsls	r4, r3, #30
 294 004e 01D4     		bmi	.L23
 295              	.LVL22:
 296              	.L25:
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 297              		.loc 1 458 14 view .LVU90
 298 0050 0120     		movs	r0, #1
 299              		.loc 1 506 1 view .LVU91
 300 0052 70BD     		pop	{r4, r5, r6, pc}
 301              	.LVL23:
 302              	.L23:
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 303              		.loc 1 438 7 is_stmt 1 view .LVU92
 304 0054 9369     		ldr	r3, [r2, #24]
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 305              		.loc 1 444 14 is_stmt 0 view .LVU93
ARM GAS  /tmp/ccklhD6J.s 			page 16


 306 0056 1546     		mov	r5, r2
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 307              		.loc 1 438 7 view .LVU94
 308 0058 43F44043 		orr	r3, r3, #49152
 309 005c 9361     		str	r3, [r2, #24]
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 310              		.loc 1 441 7 is_stmt 1 view .LVU95
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 311              		.loc 1 441 19 is_stmt 0 view .LVU96
 312 005e FFF7FEFF 		bl	HAL_GetTick
 313              	.LVL24:
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 314              		.loc 1 441 19 view .LVU97
 315 0062 0446     		mov	r4, r0
 316              	.LVL25:
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 317              		.loc 1 444 7 is_stmt 1 view .LVU98
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 318              		.loc 1 444 13 is_stmt 0 view .LVU99
 319 0064 05E0     		b	.L24
 320              	.LVL26:
 321              	.L26:
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 322              		.loc 1 446 14 view .LVU100
 323 0066 FFF7FEFF 		bl	HAL_GetTick
 324              	.LVL27:
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 325              		.loc 1 446 29 view .LVU101
 326 006a 001B     		subs	r0, r0, r4
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 327              		.loc 1 446 12 view .LVU102
 328 006c B0F57A7F 		cmp	r0, #1000
 329 0070 EED8     		bhi	.L25
 330              	.L24:
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 331              		.loc 1 446 9 is_stmt 1 view .LVU103
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 332              		.loc 1 444 13 view .LVU104
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 333              		.loc 1 444 14 is_stmt 0 view .LVU105
 334 0072 6B68     		ldr	r3, [r5, #4]
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 335              		.loc 1 444 13 view .LVU106
 336 0074 9804     		lsls	r0, r3, #18
 337 0076 F6D5     		bpl	.L26
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 338              		.loc 1 453 7 is_stmt 1 view .LVU107
 339 0078 104A     		ldr	r2, .L43+4
 340 007a D36A     		ldr	r3, [r2, #44]
 341 007c 43F00103 		orr	r3, r3, #1
 342 0080 D362     		str	r3, [r2, #44]
 343 0082 D2E7     		b	.L27
 344              	.LVL28:
 345              	.L28:
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 346              		.loc 1 465 7 view .LVU108
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
ARM GAS  /tmp/ccklhD6J.s 			page 17


 347              		.loc 1 465 18 is_stmt 0 view .LVU109
 348 0084 0D4B     		ldr	r3, .L43+4
 349 0086 D96A     		ldr	r1, [r3, #44]
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 350              		.loc 1 465 10 view .LVU110
 351 0088 C907     		lsls	r1, r1, #31
 352 008a C8D5     		bpl	.L29
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 353              		.loc 1 468 9 is_stmt 1 view .LVU111
 354 008c D96A     		ldr	r1, [r3, #44]
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 355              		.loc 1 474 16 is_stmt 0 view .LVU112
 356 008e 1546     		mov	r5, r2
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 357              		.loc 1 468 9 view .LVU113
 358 0090 21F00101 		bic	r1, r1, #1
 359 0094 D962     		str	r1, [r3, #44]
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 360              		.loc 1 471 9 is_stmt 1 view .LVU114
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 361              		.loc 1 471 21 is_stmt 0 view .LVU115
 362 0096 FFF7FEFF 		bl	HAL_GetTick
 363              	.LVL29:
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 364              		.loc 1 471 21 view .LVU116
 365 009a 0646     		mov	r6, r0
 366              	.LVL30:
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 367              		.loc 1 474 9 is_stmt 1 view .LVU117
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 368              		.loc 1 474 15 is_stmt 0 view .LVU118
 369 009c 05E0     		b	.L30
 370              	.LVL31:
 371              	.L31:
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 372              		.loc 1 476 16 view .LVU119
 373 009e FFF7FEFF 		bl	HAL_GetTick
 374              	.LVL32:
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 375              		.loc 1 476 31 view .LVU120
 376 00a2 801B     		subs	r0, r0, r6
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 377              		.loc 1 476 14 view .LVU121
 378 00a4 B0F57A7F 		cmp	r0, #1000
 379 00a8 D2D8     		bhi	.L25
 380              	.L30:
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 381              		.loc 1 476 11 is_stmt 1 view .LVU122
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 382              		.loc 1 474 15 view .LVU123
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 383              		.loc 1 474 16 is_stmt 0 view .LVU124
 384 00aa 6B68     		ldr	r3, [r5, #4]
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 385              		.loc 1 474 15 view .LVU125
 386 00ac 9A04     		lsls	r2, r3, #18
 387 00ae F6D5     		bpl	.L31
ARM GAS  /tmp/ccklhD6J.s 			page 18


 388 00b0 B5E7     		b	.L29
 389              	.LVL33:
 390              	.L41:
 391              	.LCFI2:
 392              		.cfi_def_cfa_offset 0
 393              		.cfi_restore 4
 394              		.cfi_restore 5
 395              		.cfi_restore 6
 396              		.cfi_restore 14
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 397              		.loc 1 425 12 view .LVU126
 398 00b2 0020     		movs	r0, #0
 399              	.LVL34:
 400              		.loc 1 506 1 view .LVU127
 401 00b4 7047     		bx	lr
 402              	.L44:
 403 00b6 00BF     		.align	2
 404              	.L43:
 405 00b8 00480258 		.word	1476544512
 406 00bc 00040058 		.word	1476396032
 407              		.cfi_endproc
 408              	.LFE333:
 410              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 411              		.align	1
 412              		.p2align 2,,3
 413              		.global	HAL_PWREx_GetVoltageRange
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu fpv5-d16
 419              	HAL_PWREx_GetVoltageRange:
 420              	.LFB334:
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange (void)
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 421              		.loc 1 514 1 is_stmt 1 view -0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 426              		.loc 1 516 3 view .LVU129
 427              		.loc 1 516 14 is_stmt 0 view .LVU130
 428 0000 024B     		ldr	r3, .L46
 429 0002 5868     		ldr	r0, [r3, #4]
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 430              		.loc 1 517 1 view .LVU131
 431 0004 00F44040 		and	r0, r0, #49152
 432 0008 7047     		bx	lr
 433              	.L47:
 434 000a 00BF     		.align	2
ARM GAS  /tmp/ccklhD6J.s 			page 19


 435              	.L46:
 436 000c 00480258 		.word	1476544512
 437              		.cfi_endproc
 438              	.LFE334:
 440              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 441              		.align	1
 442              		.p2align 2,,3
 443              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv5-d16
 449              	HAL_PWREx_ControlStopModeVoltageScaling:
 450              	.LVL35:
 451              	.LFB335:
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and power consumption.
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3 : Regulator voltage output range
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             3 mode.
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4 : Regulator voltage output range
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             4 mode.
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5 : Regulator voltage output range
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             5 mode.
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator in Low-power (LP) mode to further reduce power consumption.
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode (LP) can be selected by LPDS register bit.
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         when exiting from system Stop mode.
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status.
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 452              		.loc 1 540 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));
 457              		.loc 1 542 3 view .LVU133
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 458              		.loc 1 545 3 view .LVU134
 459 0000 0449     		ldr	r1, .L49
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 460              		.loc 1 540 1 is_stmt 0 view .LVU135
 461 0002 0346     		mov	r3, r0
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/ccklhD6J.s 			page 20


 462              		.loc 1 548 1 view .LVU136
 463 0004 0020     		movs	r0, #0
 464              	.LVL36:
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 465              		.loc 1 545 3 view .LVU137
 466 0006 0A68     		ldr	r2, [r1]
 467 0008 22F44042 		bic	r2, r2, #49152
 468 000c 1343     		orrs	r3, r3, r2
 469              	.LVL37:
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 470              		.loc 1 545 3 view .LVU138
 471 000e 0B60     		str	r3, [r1]
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 472              		.loc 1 547 3 is_stmt 1 view .LVU139
 473              		.loc 1 548 1 is_stmt 0 view .LVU140
 474 0010 7047     		bx	lr
 475              	.L50:
 476 0012 00BF     		.align	2
 477              	.L49:
 478 0014 00480258 		.word	1476544512
 479              		.cfi_endproc
 480              	.LFE335:
 482              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 483              		.align	1
 484              		.p2align 2,,3
 485              		.global	HAL_PWREx_GetStopModeVoltageRange
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv5-d16
 491              	HAL_PWREx_GetStopModeVoltageRange:
 492              	.LFB336:
 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS selection.
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 493              		.loc 1 555 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 498              		.loc 1 557 3 view .LVU142
 499              		.loc 1 557 14 is_stmt 0 view .LVU143
 500 0000 024B     		ldr	r3, .L52
 501 0002 1868     		ldr	r0, [r3]
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 502              		.loc 1 558 1 view .LVU144
 503 0004 00F44040 		and	r0, r0, #49152
 504 0008 7047     		bx	lr
 505              	.L53:
 506 000a 00BF     		.align	2
 507              	.L52:
ARM GAS  /tmp/ccklhD6J.s 			page 21


 508 000c 00480258 		.word	1476544512
 509              		.cfi_endproc
 510              	.LFE336:
 512              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
 513              		.align	1
 514              		.p2align 2,,3
 515              		.global	HAL_PWREx_EnterSTOPMode
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 519              		.fpu fpv5-d16
 521              	HAL_PWREx_EnterSTOPMode:
 522              	.LVL38:
 523              	.LFB337:
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low Power Control Functions
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                      ##### Low power control functions #####
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       This section provides the extended low power mode control APIs.
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system presents 3 principles domains (D1, D2 and D3) that can be
 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       operated in low-power modes (DSTOP or DSTANDBY mode):
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             domain.
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             regulator is running in main or low power mode.
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             enter STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccklhD6J.s 			page 22


 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             register (PWR_CPUCR) for the Dn domain selects Standby mode.
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             DSTANDBY mode. Consequently the VCORE supply regulator is powered
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             off.
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       FLPS in PWR_CR1 register. This allows a trade-off between domain DStop
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       restart time and low power consumption.
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       peripherals having a kernel clock request are still able to operate.
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator,
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          STOPEntry, Domain) function with:
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON     : Main regulator ON.
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON : Low Power regulator ON.
 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI : enter STOP mode with WFI instruction
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE : enter STOP mode with WFE instruction
 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTOP mode.
 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTOP mode.
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTOP mode.
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    =====================
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             are lost.
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (Domain) function with:
 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTANDBY mode.
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTANDBY mode.
ARM GAS  /tmp/ccklhD6J.s 			page 23


 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTANDBY mode.
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin,
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         IWDG reset.
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3/SRD in RUN mode ***
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===============================
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3/SRD domain can be kept in Run mode regardless of the CPU status when
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       entering STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       with :
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP : D3/SDR domain follows the CPU sub-system
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                   mode.
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN : D3/SRD domain remains in Run mode regardless
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                  of CPU subsystem mode.
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the
 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       power down mode when the device enters STOP mode. When the Flash memory is
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in power down mode, an additional startup delay is incurred when waking up
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       from STOP mode.
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function with:
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       generate an interrupt if enabled. The EXTI lines configuration is done by
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_EXTI_Dx_EventInputConfig() functions defined in the stm32h7xxhal.c
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       file.
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPFR register. Then in
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_PWREx_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_RETDS_CD)
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter the system to STOP mode with main domain in DSTOP2.
ARM GAS  /tmp/ccklhD6J.s 			page 24


 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, the domain bus matrix clock is stalled.
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, memories and registers are maintained and peripherals
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in CPU domain are no longer operational.
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   All clocks in the VCORE domain are stopped, the PLL, the HSI and the
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HSE oscillators are disabled. Only Peripherals that have wakeup
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         capability can switch on the HSI to receive a frame, and switch off
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI after receiving the frame if it is not a wakeup frame. In
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         this case the HSI clock is propagated only to the peripheral
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         requesting it.
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When exiting STOP mode by issuing an interrupt or a wakeup event,
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         RCC_CFGR register is set.
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode (uint32_t Regulator, uint8_t STOPEntry)
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Go to DStop2 mode (deep retention) when CPU domain enters Deepsleep */
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CPUCR, PWR_CPUCR_RETDS_CD);
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep DSTOP mode when SmartRun domain enters Deepsleep */
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_SRD);
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Ensure that all instructions are done before entering STOP mode */
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __ISB ();
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __DSB ();
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select Stop mode entry */
 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccklhD6J.s 			page 25


 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_RETDS_CD) */
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTOP mode.
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain STOP
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode. For dual core lines, this API should be executed with the
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         corresponding Cortex-Mx to enter domain to DSTOP mode. When it is
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         executed by all available Cortex-Mx, the system enter to STOP mode.
 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with domain parameter set to
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_D1_DOMAIN (D1/CD), the whole system will enter in STOP mode
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         independently of PWR_CPUCR_PDDS_Dx bits values if RUN_D3 bit in the
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         CPUCR_RUN_D3 is cleared.
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enter Stop mode only when the CPU subsystem
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is in CStop mode, the EXTI wakeup sources are inactive and at least
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         one PDDS_Dn bit in PWR CPU control register (PWR_CPUCR) for
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         any domain request Stop.
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         function in order to clean the D-Cache and guarantee the data
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         integrity for the SRAM memories.
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         clock, and the peripherals that have a kernel clock request to
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select HSI or CSI as source, are still able to operate.
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter in DSTOP mode.
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN : Enter D1/CD Domain to DSTOP mode.
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 524              		.loc 1 818 1 is_stmt 1 view -0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 528              		.loc 1 820 3 view .LVU146
 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 529              		.loc 1 821 3 view .LVU147
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 530              		.loc 1 822 3 view .LVU148
ARM GAS  /tmp/ccklhD6J.s 			page 26


 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 531              		.loc 1 825 3 view .LVU149
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 532              		.loc 1 818 1 is_stmt 0 view .LVU150
 533 0000 38B5     		push	{r3, r4, r5, lr}
 534              	.LCFI3:
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 3, -16
 537              		.cfi_offset 4, -12
 538              		.cfi_offset 5, -8
 539              		.cfi_offset 14, -4
 540              		.loc 1 825 3 view .LVU151
 541 0002 1F4C     		ldr	r4, .L73
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 542              		.loc 1 818 1 view .LVU152
 543 0004 0D46     		mov	r5, r1
 544              		.loc 1 825 3 view .LVU153
 545 0006 2368     		ldr	r3, [r4]
 546 0008 23F00103 		bic	r3, r3, #1
 547 000c 0343     		orrs	r3, r3, r0
 548 000e 2360     		str	r3, [r4]
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 549              		.loc 1 828 3 is_stmt 1 view .LVU154
 550              		.loc 1 828 6 is_stmt 0 view .LVU155
 551 0010 A2B1     		cbz	r2, .L69
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
ARM GAS  /tmp/ccklhD6J.s 			page 27


 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 552              		.loc 1 868 8 is_stmt 1 view .LVU156
 553              		.loc 1 868 11 is_stmt 0 view .LVU157
 554 0012 012A     		cmp	r2, #1
 555 0014 08D0     		beq	.L70
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccklhD6J.s 			page 28


 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 556              		.loc 1 915 5 is_stmt 1 view .LVU158
 557              		.loc 1 915 9 is_stmt 0 view .LVU159
 558 0016 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 559              	.LVL39:
 560              		.loc 1 915 8 view .LVU160
 561 001a 0328     		cmp	r0, #3
 562 001c 28D0     		beq	.L71
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 563              		.loc 1 923 7 is_stmt 1 view .LVU161
 564 001e 6369     		ldr	r3, [r4, #20]
 565 0020 23F00403 		bic	r3, r3, #4
 566 0024 6361     		str	r3, [r4, #20]
 567              	.L54:
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 568              		.loc 1 930 1 is_stmt 0 view .LVU162
 569 0026 38BD     		pop	{r3, r4, r5, pc}
 570              	.LVL40:
 571              	.L70:
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 572              		.loc 1 872 5 is_stmt 1 view .LVU163
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 573              		.loc 1 872 9 is_stmt 0 view .LVU164
 574 0028 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 575              	.LVL41:
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 576              		.loc 1 872 8 view .LVU165
 577 002c 0128     		cmp	r0, #1
 578 002e FAD1     		bne	.L54
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 579              		.loc 1 882 5 is_stmt 1 view .LVU166
 580 0030 6369     		ldr	r3, [r4, #20]
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 581              		.loc 1 885 5 is_stmt 0 view .LVU167
 582 0032 144A     		ldr	r2, .L73+4
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 583              		.loc 1 882 5 view .LVU168
 584 0034 23F00203 		bic	r3, r3, #2
 585 0038 6361     		str	r3, [r4, #20]
ARM GAS  /tmp/ccklhD6J.s 			page 29


 586 003a 08E0     		b	.L68
 587              	.LVL42:
 588              	.L69:
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 589              		.loc 1 832 5 is_stmt 1 view .LVU169
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 590              		.loc 1 832 9 is_stmt 0 view .LVU170
 591 003c FFF7FEFF 		bl	HAL_GetCurrentCPUID
 592              	.LVL43:
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 593              		.loc 1 832 8 view .LVU171
 594 0040 0328     		cmp	r0, #3
 595 0042 F0D1     		bne	.L54
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 596              		.loc 1 843 5 is_stmt 1 view .LVU172
 597 0044 2369     		ldr	r3, [r4, #16]
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 598              		.loc 1 846 5 is_stmt 0 view .LVU173
 599 0046 0F4A     		ldr	r2, .L73+4
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 600              		.loc 1 843 5 view .LVU174
 601 0048 23F00103 		bic	r3, r3, #1
 602 004c 2361     		str	r3, [r4, #16]
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 603              		.loc 1 846 5 is_stmt 1 view .LVU175
 604              	.L68:
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 605              		.loc 1 885 5 view .LVU176
 606 004e 1369     		ldr	r3, [r2, #16]
 607 0050 43F00403 		orr	r3, r3, #4
 608 0054 1361     		str	r3, [r2, #16]
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 609              		.loc 1 888 5 view .LVU177
 610              	.LBB26:
 611              	.LBI26:
 612              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
ARM GAS  /tmp/ccklhD6J.s 			page 30


  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
ARM GAS  /tmp/ccklhD6J.s 			page 31


  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /tmp/ccklhD6J.s 			page 32


 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  /tmp/ccklhD6J.s 			page 33


 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccklhD6J.s 			page 34


 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccklhD6J.s 			page 35


 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccklhD6J.s 			page 36


 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
ARM GAS  /tmp/ccklhD6J.s 			page 37


 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
ARM GAS  /tmp/ccklhD6J.s 			page 38


 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccklhD6J.s 			page 39


 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
ARM GAS  /tmp/ccklhD6J.s 			page 40


 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
ARM GAS  /tmp/ccklhD6J.s 			page 41


 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccklhD6J.s 			page 42


 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
ARM GAS  /tmp/ccklhD6J.s 			page 43


 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
ARM GAS  /tmp/ccklhD6J.s 			page 44


 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccklhD6J.s 			page 45


 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
ARM GAS  /tmp/ccklhD6J.s 			page 46


 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 613              		.loc 2 944 27 view .LVU178
 614              	.LBB27:
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 615              		.loc 2 946 3 view .LVU179
 616              		.syntax unified
 617              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 618 0056 BFF34F8F 		dsb 0xF
 619              	@ 0 "" 2
 620              		.thumb
 621              		.syntax unified
 622              	.LBE27:
 623              	.LBE26:
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 624              		.loc 1 889 5 view .LVU180
 625              	.LBB28:
 626              	.LBI28:
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 627              		.loc 2 933 27 view .LVU181
 628              	.LBB29:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 629              		.loc 2 935 3 view .LVU182
 630              		.syntax unified
 631              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 632 005a BFF36F8F 		isb 0xF
 633              	@ 0 "" 2
 634              		.thumb
 635              		.syntax unified
 636              	.LBE29:
 637              	.LBE28:
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 638              		.loc 1 892 5 view .LVU183
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 639              		.loc 1 892 8 is_stmt 0 view .LVU184
 640 005e 012D     		cmp	r5, #1
 641 0060 0BD0     		beq	.L72
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 642              		.loc 1 900 7 is_stmt 1 view .LVU185
 643              		.syntax unified
 644              	@ 900 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 645 0062 20BF     		wfe
 646              	@ 0 "" 2
 647              		.thumb
 648              		.syntax unified
 649              	.L63:
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  /tmp/ccklhD6J.s 			page 47


 650              		.loc 1 904 5 view .LVU186
 651 0064 074A     		ldr	r2, .L73+4
 652 0066 1369     		ldr	r3, [r2, #16]
 653 0068 23F00403 		bic	r3, r3, #4
 654 006c 1361     		str	r3, [r2, #16]
 655              		.loc 1 930 1 is_stmt 0 view .LVU187
 656 006e 38BD     		pop	{r3, r4, r5, pc}
 657              	.L71:
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 658              		.loc 1 918 7 is_stmt 1 view .LVU188
 659 0070 2369     		ldr	r3, [r4, #16]
 660 0072 23F00403 		bic	r3, r3, #4
 661 0076 2361     		str	r3, [r4, #16]
 662              		.loc 1 930 1 is_stmt 0 view .LVU189
 663 0078 38BD     		pop	{r3, r4, r5, pc}
 664              	.L72:
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 665              		.loc 1 895 7 is_stmt 1 view .LVU190
 666              		.syntax unified
 667              	@ 895 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 668 007a 30BF     		wfi
 669              	@ 0 "" 2
 670              		.thumb
 671              		.syntax unified
 672 007c F2E7     		b	.L63
 673              	.L74:
 674 007e 00BF     		.align	2
 675              	.L73:
 676 0080 00480258 		.word	1476544512
 677 0084 00ED00E0 		.word	-536810240
 678              		.cfi_endproc
 679              	.LFE337:
 681              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 682              		.align	1
 683              		.p2align 2,,3
 684              		.global	HAL_PWREx_ClearPendingEvent
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu fpv5-d16
 690              	HAL_PWREx_ClearPendingEvent:
 691              	.LFB338:
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear pending event.
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clears the pending event in order to enter a given CPU
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to CSLEEP or CSTOP. It should be called just before APIs performing
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         enter low power mode using Wait For Event request.
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent (void)
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 692              		.loc 1 941 1 view -0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccklhD6J.s 			page 48


 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the current Core */
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (HAL_GetCurrentCPUID () == CM7_CPUID)
 696              		.loc 1 944 3 view .LVU192
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 697              		.loc 1 941 1 is_stmt 0 view .LVU193
 698 0000 08B5     		push	{r3, lr}
 699              	.LCFI4:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 3, -8
 702              		.cfi_offset 14, -4
 703              		.loc 1 944 7 view .LVU194
 704 0002 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 705              	.LVL44:
 706              		.loc 1 944 6 view .LVU195
 707 0006 0328     		cmp	r0, #3
 708 0008 00D0     		beq	.L79
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV ();
 709              		.loc 1 950 5 is_stmt 1 view .LVU196
 710              		.syntax unified
 711              	@ 950 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 712 000a 40BF     		sev
 713              	@ 0 "" 2
 714              		.thumb
 715              		.syntax unified
 716              	.L79:
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 717              		.loc 1 951 5 view .LVU197
 718              		.syntax unified
 719              	@ 951 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 720 000c 20BF     		wfe
 721              	@ 0 "" 2
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE ();
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 722              		.loc 1 956 1 is_stmt 0 view .LVU198
 723              		.thumb
 724              		.syntax unified
 725 000e 08BD     		pop	{r3, pc}
 726              		.cfi_endproc
 727              	.LFE338:
 729              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 730              		.align	1
 731              		.p2align 2,,3
 732              		.global	HAL_PWREx_EnterSTANDBYMode
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv5-d16
 738              	HAL_PWREx_EnterSTANDBYMode:
ARM GAS  /tmp/ccklhD6J.s 			page 49


 739              	.LVL45:
 740              	.LFB339:
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTANDBY mode.
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         STANDBY mode. For dual core lines, this API should be executed with
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the corresponding Cortex-Mx to enter domain to DSTANDBY mode. When
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         it is executed by all available Cortex-Mx, the system enter STANDBY
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode.
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with D1/SRD the selected
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain will enter the whole system in STOP if PWR_CPUCR_PDDS_D3 = 0
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and enter the whole system in STANDBY if PWR_CPUCR_PDDS_D3 = 1.
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the Dn domain select Standby mode. When the system enters Standby
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode, the voltage regulator is disabled.
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain PDDS_Dn bit to select Stop mode, the domain remains in
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode. The domain will only exit DStandby when the CPU
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         allocates a peripheral in the domain.
 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enters Standby mode only when the D1 and D2
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain are in DStandby.
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SCB_CleanDCache function in order to clean the D-Cache and guarantee
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the data integrity for the SRAM memories.
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter to STANDBY mode.
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1/CD Domain to DSTANDBY mode.
 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 741              		.loc 1 988 1 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 745              		.loc 1 990 3 view .LVU200
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 746              		.loc 1 993 3 view .LVU201
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 747              		.loc 1 988 1 is_stmt 0 view .LVU202
 748 0000 10B5     		push	{r4, lr}
 749              	.LCFI5:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 4, -8
 752              		.cfi_offset 14, -4
 753              		.loc 1 993 6 view .LVU203
 754 0002 58B1     		cbz	r0, .L87
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
ARM GAS  /tmp/ccklhD6J.s 			page 50


 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 755              		.loc 1 1027 8 is_stmt 1 view .LVU204
 756              		.loc 1 1027 11 is_stmt 0 view .LVU205
 757 0004 0128     		cmp	r0, #1
 758 0006 1DD0     		beq	.L88
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
ARM GAS  /tmp/ccklhD6J.s 			page 51


1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 759              		.loc 1 1062 5 is_stmt 1 view .LVU206
 760 0008 184B     		ldr	r3, .L89
 761 000a 1A69     		ldr	r2, [r3, #16]
 762 000c 42F00402 		orr	r2, r2, #4
 763 0010 1A61     		str	r2, [r3, #16]
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 764              		.loc 1 1066 5 view .LVU207
 765 0012 5A69     		ldr	r2, [r3, #20]
 766 0014 42F00402 		orr	r2, r2, #4
 767 0018 5A61     		str	r2, [r3, #20]
 768              	.LVL46:
 769              	.L80:
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 770              		.loc 1 1069 1 is_stmt 0 view .LVU208
 771 001a 10BD     		pop	{r4, pc}
 772              	.LVL47:
 773              	.L87:
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 774              		.loc 1 997 5 is_stmt 1 view .LVU209
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 775              		.loc 1 997 9 is_stmt 0 view .LVU210
 776 001c FFF7FEFF 		bl	HAL_GetCurrentCPUID
 777              	.LVL48:
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 778              		.loc 1 997 8 view .LVU211
 779 0020 0328     		cmp	r0, #3
 780 0022 FAD1     		bne	.L80
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 781              		.loc 1 1008 5 is_stmt 1 view .LVU212
 782 0024 114B     		ldr	r3, .L89
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 783              		.loc 1 1016 5 is_stmt 0 view .LVU213
 784 0026 1249     		ldr	r1, .L89+4
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 785              		.loc 1 1008 5 view .LVU214
 786 0028 1A69     		ldr	r2, [r3, #16]
 787 002a 42F00102 		orr	r2, r2, #1
 788 002e 1A61     		str	r2, [r3, #16]
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
ARM GAS  /tmp/ccklhD6J.s 			page 52


 789              		.loc 1 1012 5 is_stmt 1 view .LVU215
 790 0030 5A69     		ldr	r2, [r3, #20]
 791 0032 42F00102 		orr	r2, r2, #1
 792 0036 5A61     		str	r2, [r3, #20]
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 793              		.loc 1 1016 5 view .LVU216
 794 0038 0B69     		ldr	r3, [r1, #16]
 795 003a 43F00403 		orr	r3, r3, #4
 796 003e 0B61     		str	r3, [r1, #16]
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 797              		.loc 1 1024 5 view .LVU217
 798              		.syntax unified
 799              	@ 1024 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 800 0040 30BF     		wfi
 801              	@ 0 "" 2
 802              		.loc 1 1069 1 is_stmt 0 view .LVU218
 803              		.thumb
 804              		.syntax unified
 805 0042 10BD     		pop	{r4, pc}
 806              	.LVL49:
 807              	.L88:
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 808              		.loc 1 1030 5 is_stmt 1 view .LVU219
 809 0044 094C     		ldr	r4, .L89
 810 0046 2369     		ldr	r3, [r4, #16]
 811 0048 43F00203 		orr	r3, r3, #2
 812 004c 2361     		str	r3, [r4, #16]
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 813              		.loc 1 1034 5 view .LVU220
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 814              		.loc 1 1034 9 is_stmt 0 view .LVU221
 815 004e FFF7FEFF 		bl	HAL_GetCurrentCPUID
 816              	.LVL50:
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 817              		.loc 1 1034 8 view .LVU222
 818 0052 0128     		cmp	r0, #1
 819 0054 E1D1     		bne	.L80
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 820              		.loc 1 1044 5 is_stmt 1 view .LVU223
 821 0056 6369     		ldr	r3, [r4, #20]
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 822              		.loc 1 1047 5 is_stmt 0 view .LVU224
 823 0058 054A     		ldr	r2, .L89+4
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 824              		.loc 1 1044 5 view .LVU225
 825 005a 43F00203 		orr	r3, r3, #2
 826 005e 6361     		str	r3, [r4, #20]
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 827              		.loc 1 1047 5 is_stmt 1 view .LVU226
 828 0060 1369     		ldr	r3, [r2, #16]
 829 0062 43F00403 		orr	r3, r3, #4
 830 0066 1361     		str	r3, [r2, #16]
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 831              		.loc 1 1055 5 view .LVU227
 832              		.syntax unified
 833              	@ 1055 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 834 0068 30BF     		wfi
ARM GAS  /tmp/ccklhD6J.s 			page 53


 835              	@ 0 "" 2
 836              		.loc 1 1069 1 is_stmt 0 view .LVU228
 837              		.thumb
 838              		.syntax unified
 839 006a 10BD     		pop	{r4, pc}
 840              	.L90:
 841              		.align	2
 842              	.L89:
 843 006c 00480258 		.word	1476544512
 844 0070 00ED00E0 		.word	-536810240
 845              		.cfi_endproc
 846              	.LFE339:
 848              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 849              		.align	1
 850              		.p2align 2,,3
 851              		.global	HAL_PWREx_ConfigD3Domain
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv5-d16
 857              	HAL_PWREx_ConfigD3Domain:
 858              	.LVL51:
 859              	.LFB340:
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the D3/SRD Domain state when the System in low power mode.
1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State : Specifies the D3/SRD state.
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP : D3/SRD domain will follow the most deep
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      CPU sub-system low power mode.
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3/SRD domain will stay in RUN mode
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     regardless of the CPU sub-system low
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     power mode.
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 860              		.loc 1 1083 1 is_stmt 1 view -0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              		@ link register save eliminated.
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_D3_STATE (D3State));
 865              		.loc 1 1085 3 view .LVU230
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3/SRD in run mode */
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 866              		.loc 1 1088 3 view .LVU231
 867 0000 034A     		ldr	r2, .L92
 868 0002 1369     		ldr	r3, [r2, #16]
 869 0004 23F40063 		bic	r3, r3, #2048
 870 0008 1843     		orrs	r0, r0, r3
 871              	.LVL52:
 872              		.loc 1 1088 3 is_stmt 0 view .LVU232
 873 000a 1061     		str	r0, [r2, #16]
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/ccklhD6J.s 			page 54


 874              		.loc 1 1089 1 view .LVU233
 875 000c 7047     		bx	lr
 876              	.L93:
 877 000e 00BF     		.align	2
 878              	.L92:
 879 0010 00480258 		.word	1476544512
 880              		.cfi_endproc
 881              	.LFE340:
 883              		.section	.text.HAL_PWREx_ClearDomainFlags,"ax",%progbits
 884              		.align	1
 885              		.p2align 2,,3
 886              		.global	HAL_PWREx_ClearDomainFlags
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv5-d16
 892              	HAL_PWREx_ClearDomainFlags:
 893              	.LVL53:
 894              	.LFB341:
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear HOLD2F, HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        given domain.
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags : Specifies the Domain flags to be cleared.
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS : Clear D1 Domain flags.
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS : Clear D2 Domain flags.
1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_ALL_DOMAIN_FLAGS : Clear D1 and D2 Domain flags.
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags (uint32_t DomainFlags)
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 895              		.loc 1 1103 1 is_stmt 1 view -0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              		@ link register save eliminated.
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));
 900              		.loc 1 1105 3 view .LVU235
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D1 CPU flags */
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
 901              		.loc 1 1108 3 view .LVU236
 902              		.loc 1 1108 6 is_stmt 0 view .LVU237
 903 0000 28B9     		cbnz	r0, .L95
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
 904              		.loc 1 1111 5 is_stmt 1 view .LVU238
 905 0002 0C4A     		ldr	r2, .L99
 906 0004 1369     		ldr	r3, [r2, #16]
 907 0006 43F40073 		orr	r3, r3, #512
 908 000a 1361     		str	r3, [r2, #16]
 909 000c 7047     		bx	lr
 910              	.L95:
ARM GAS  /tmp/ccklhD6J.s 			page 55


1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D2 CPU flags */
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
 911              		.loc 1 1114 8 view .LVU239
 912              		.loc 1 1114 11 is_stmt 0 view .LVU240
 913 000e 0128     		cmp	r0, #1
 914 0010 09D0     		beq	.L98
1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
 915              		.loc 1 1122 5 is_stmt 1 view .LVU241
 916 0012 084B     		ldr	r3, .L99
 917 0014 1A69     		ldr	r2, [r3, #16]
 918 0016 42F40072 		orr	r2, r2, #512
 919 001a 1A61     		str	r2, [r3, #16]
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
 920              		.loc 1 1124 5 view .LVU242
 921 001c 5A69     		ldr	r2, [r3, #20]
 922 001e 42F40072 		orr	r2, r2, #512
 923 0022 5A61     		str	r2, [r3, #20]
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 924              		.loc 1 1126 1 is_stmt 0 view .LVU243
 925 0024 7047     		bx	lr
 926              	.L98:
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 927              		.loc 1 1117 5 is_stmt 1 view .LVU244
 928 0026 034A     		ldr	r2, .L99
 929 0028 5369     		ldr	r3, [r2, #20]
 930 002a 43F40073 		orr	r3, r3, #512
 931 002e 5361     		str	r3, [r2, #20]
 932 0030 7047     		bx	lr
 933              	.L100:
 934 0032 00BF     		.align	2
 935              	.L99:
 936 0034 00480258 		.word	1476544512
 937              		.cfi_endproc
 938              	.LFE341:
 940              		.section	.text.HAL_PWREx_HoldCore,"ax",%progbits
 941              		.align	1
 942              		.p2align 2,,3
 943              		.global	HAL_PWREx_HoldCore
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv5-d16
 949              	HAL_PWREx_HoldCore:
 950              	.LVL54:
 951              	.LFB342:
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
ARM GAS  /tmp/ccklhD6J.s 			page 56


1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Hold the CPU and their domain peripherals when exiting STOP mode.
1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU : Specifies the core to be held.
1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore (uint32_t CPU)
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 952              		.loc 1 1137 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 957              		.loc 1 1138 3 view .LVU246
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
 958              		.loc 1 1141 3 view .LVU247
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
 959              		.loc 1 1144 3 view .LVU248
 960              		.loc 1 1144 6 is_stmt 0 view .LVU249
 961 0000 0128     		cmp	r0, #1
 962 0002 0BD0     		beq	.L106
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
 963              		.loc 1 1160 5 is_stmt 1 view .LVU250
 964              		.loc 1 1160 13 is_stmt 0 view .LVU251
 965 0004 0B4B     		ldr	r3, .L108
 966 0006 1869     		ldr	r0, [r3, #16]
 967              	.LVL55:
 968              		.loc 1 1160 8 view .LVU252
 969 0008 10F48060 		ands	r0, r0, #1024
 970 000c 01D0     		beq	.L107
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 971              		.loc 1 1154 14 view .LVU253
 972 000e 0120     		movs	r0, #1
 973              	.L103:
 974              	.LVL56:
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
ARM GAS  /tmp/ccklhD6J.s 			page 57


1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
 975              		.loc 1 1171 3 is_stmt 1 view .LVU254
1172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 976              		.loc 1 1172 1 is_stmt 0 view .LVU255
 977 0010 7047     		bx	lr
 978              	.LVL57:
 979              	.L107:
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 980              		.loc 1 1163 7 is_stmt 1 view .LVU256
 981 0012 5A69     		ldr	r2, [r3, #20]
 982 0014 42F48062 		orr	r2, r2, #1024
 983 0018 5A61     		str	r2, [r3, #20]
 984 001a 7047     		bx	lr
 985              	.LVL58:
 986              	.L106:
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 987              		.loc 1 1147 5 view .LVU257
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 988              		.loc 1 1147 13 is_stmt 0 view .LVU258
 989 001c 054A     		ldr	r2, .L108
 990 001e 5369     		ldr	r3, [r2, #20]
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 991              		.loc 1 1147 8 view .LVU259
 992 0020 13F48063 		ands	r3, r3, #1024
 993 0024 F4D1     		bne	.L103
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 994              		.loc 1 1150 7 is_stmt 1 view .LVU260
 995 0026 1169     		ldr	r1, [r2, #16]
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 996              		.loc 1 1138 21 is_stmt 0 view .LVU261
 997 0028 1846     		mov	r0, r3
 998              	.LVL59:
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 999              		.loc 1 1150 7 view .LVU262
 1000 002a 41F48061 		orr	r1, r1, #1024
 1001 002e 1161     		str	r1, [r2, #16]
 1002 0030 7047     		bx	lr
 1003              	.L109:
 1004 0032 00BF     		.align	2
 1005              	.L108:
 1006 0034 00480258 		.word	1476544512
 1007              		.cfi_endproc
 1008              	.LFE342:
 1010              		.section	.text.HAL_PWREx_ReleaseCore,"ax",%progbits
 1011              		.align	1
 1012              		.p2align 2,,3
 1013              		.global	HAL_PWREx_ReleaseCore
 1014              		.syntax unified
ARM GAS  /tmp/ccklhD6J.s 			page 58


 1015              		.thumb
 1016              		.thumb_func
 1017              		.fpu fpv5-d16
 1019              	HAL_PWREx_ReleaseCore:
 1020              	.LVL60:
 1021              	.LFB343:
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Release the CPU and their domain peripherals after a wake-up from
1176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        STOP mode.
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their domain
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their domain
1182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore (uint32_t CPU)
1186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1022              		.loc 1 1186 1 is_stmt 1 view -0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026              		@ link register save eliminated.
1187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
 1027              		.loc 1 1188 3 view .LVU264
1189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
 1028              		.loc 1 1191 3 view .LVU265
 1029              		.loc 1 1191 6 is_stmt 0 view .LVU266
 1030 0000 0128     		cmp	r0, #1
1192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
 1031              		.loc 1 1194 5 view .LVU267
 1032 0002 064A     		ldr	r2, .L114
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1033              		.loc 1 1191 6 view .LVU268
 1034 0004 04D0     		beq	.L113
1195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 1035              		.loc 1 1199 5 is_stmt 1 view .LVU269
 1036 0006 5369     		ldr	r3, [r2, #20]
 1037 0008 23F48063 		bic	r3, r3, #1024
 1038 000c 5361     		str	r3, [r2, #20]
1200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1039              		.loc 1 1201 1 is_stmt 0 view .LVU270
 1040 000e 7047     		bx	lr
 1041              	.L113:
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  /tmp/ccklhD6J.s 			page 59


 1042              		.loc 1 1194 5 is_stmt 1 view .LVU271
 1043 0010 1369     		ldr	r3, [r2, #16]
 1044 0012 23F48063 		bic	r3, r3, #1024
 1045 0016 1361     		str	r3, [r2, #16]
 1046 0018 7047     		bx	lr
 1047              	.L115:
 1048 001a 00BF     		.align	2
 1049              	.L114:
 1050 001c 00480258 		.word	1476544512
 1051              		.cfi_endproc
 1052              	.LFE343:
 1054              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 1055              		.align	1
 1056              		.p2align 2,,3
 1057              		.global	HAL_PWREx_EnableFlashPowerDown
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv5-d16
 1063              	HAL_PWREx_EnableFlashPowerDown:
 1064              	.LFB344:
1202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Flash Power Down in Stop mode.
1207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is enabled  the Flash memory enters low-power
1208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode when D1/SRD domain is in DStop mode. This feature allows to
1209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         obtain the best trade-off between low-power consumption and restart
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         time when exiting from DStop mode.
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown (void)
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1065              		.loc 1 1214 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
1215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
1216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 1070              		.loc 1 1216 3 view .LVU273
 1071 0000 024A     		ldr	r2, .L117
 1072 0002 1368     		ldr	r3, [r2]
 1073 0004 43F40073 		orr	r3, r3, #512
 1074 0008 1360     		str	r3, [r2]
1217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1075              		.loc 1 1217 1 is_stmt 0 view .LVU274
 1076 000a 7047     		bx	lr
 1077              	.L118:
 1078              		.align	2
 1079              	.L117:
 1080 000c 00480258 		.word	1476544512
 1081              		.cfi_endproc
 1082              	.LFE344:
 1084              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 1085              		.align	1
ARM GAS  /tmp/ccklhD6J.s 			page 60


 1086              		.p2align 2,,3
 1087              		.global	HAL_PWREx_DisableFlashPowerDown
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu fpv5-d16
 1093              	HAL_PWREx_DisableFlashPowerDown:
 1094              	.LFB345:
1218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Flash Power Down in Stop mode.
1221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is disabled  the Flash memory is kept on
1222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         normal mode when D1/SRD domain is in DStop mode. This feature allows
1223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to obtain the best trade-off between low-power consumption and
1224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         restart time when exiting from DStop mode.
1225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown (void)
1228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1095              		.loc 1 1228 1 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
1229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
1230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 1100              		.loc 1 1230 3 view .LVU276
 1101 0000 024A     		ldr	r2, .L120
 1102 0002 1368     		ldr	r3, [r2]
 1103 0004 23F40073 		bic	r3, r3, #512
 1104 0008 1360     		str	r3, [r2]
1231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1105              		.loc 1 1231 1 is_stmt 0 view .LVU277
 1106 000a 7047     		bx	lr
 1107              	.L121:
 1108              		.align	2
 1109              	.L120:
 1110 000c 00480258 		.word	1476544512
 1111              		.cfi_endproc
 1112              	.LFE345:
 1114              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 1115              		.align	1
 1116              		.p2align 2,,3
 1117              		.global	HAL_PWREx_EnableWakeUpPin
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu fpv5-d16
 1123              	HAL_PWREx_EnableWakeUpPin:
 1124              	.LVL61:
 1125              	.LFB346:
1232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_SRDRAMSO)
1234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable memory block shut-off in DStop or DStop2 modes
1236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop or DStop2 mode, the content of the memory blocks is
1237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         maintained. Further power optimization can be obtained by switching
ARM GAS  /tmp/ccklhD6J.s 			page 61


1238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         off some memory blocks. This optimization implies loss of the memory
1239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         content. The user can select which memory is discarded during STOP
1240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode by means of xxSO bits.
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to shut-off during DStop or
1242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop2 mode.
1243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMemoryShutOff (uint32_t MemoryBlock)
1257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable memory block shut-off */
1262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, MemoryBlock);
1263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable memory block shut-off in DStop or DStop2 modes
1267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to keep content during
1268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop or DStop2 mode.
1269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMemoryShutOff (uint32_t MemoryBlock)
1283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable memory block shut-off */
1288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, MemoryBlock);
1289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_SRDRAMSO) */
1291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
1294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
ARM GAS  /tmp/ccklhD6J.s 			page 62


1295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
1296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      Pin.
1297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx. All combination are allowed: wake up only
1299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
1300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M4.
1301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
1304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1126              		.loc 1 1304 1 is_stmt 1 view -0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
1305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 1131              		.loc 1 1305 3 view .LVU279
1306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
 1132              		.loc 1 1306 3 view .LVU280
1307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 1133              		.loc 1 1307 3 view .LVU281
1308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
 1134              		.loc 1 1310 3 view .LVU282
1311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
 1135              		.loc 1 1311 3 view .LVU283
1312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));
 1136              		.loc 1 1312 3 view .LVU284
1313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 1137              		.loc 1 1314 3 view .LVU285
1315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1138              		.loc 1 1315 26 is_stmt 0 view .LVU286
 1139 0000 D0E90031 		ldrd	r3, r1, [r0]
 1140              	.LVL62:
 1141              	.LBB30:
 1142              	.LBI30:
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccklhD6J.s 			page 63


 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccklhD6J.s 			page 64


1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1143              		.loc 2 1048 31 is_stmt 1 view .LVU287
 1144              	.LBB31:
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 1145              		.loc 2 1050 3 view .LVU288
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1146              		.loc 2 1055 4 view .LVU289
 1147              		.syntax unified
 1148              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1149 0004 93FAA3F2 		rbit r2, r3
 1150              	@ 0 "" 2
 1151              	.LVL63:
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 1152              		.loc 2 1068 3 view .LVU290
 1153              		.loc 2 1068 3 is_stmt 0 view .LVU291
ARM GAS  /tmp/ccklhD6J.s 			page 65


 1154              		.thumb
 1155              		.syntax unified
 1156              	.LBE31:
 1157              	.LBE30:
 1158              	.LBB32:
 1159              	.LBI32:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 1160              		.loc 2 1078 30 is_stmt 1 view .LVU292
 1161              	.LBB33:
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 1162              		.loc 2 1089 3 view .LVU293
 1163              		.loc 2 1089 6 is_stmt 0 view .LVU294
 1164 0008 92B3     		cbz	r2, .L127
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 1165              		.loc 2 1093 3 is_stmt 1 view .LVU295
 1166              		.loc 2 1093 10 is_stmt 0 view .LVU296
 1167 000a B2FA82F2 		clz	r2, r2
 1168              	.LVL64:
 1169              		.loc 2 1093 10 view .LVU297
 1170 000e 0832     		adds	r2, r2, #8
 1171 0010 02F01F02 		and	r2, r2, #31
 1172              	.L123:
 1173              		.loc 2 1093 10 view .LVU298
 1174              	.LBE33:
 1175              	.LBE32:
 1176              		.loc 1 1315 40 view .LVU299
 1177 0014 01FA02F2 		lsl	r2, r1, r2
1316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 1178              		.loc 1 1316 26 view .LVU300
 1179 0018 8068     		ldr	r0, [r0, #8]
 1180              	.LVL65:
 1181              	.LBB35:
 1182              	.LBI35:
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1183              		.loc 2 1048 31 is_stmt 1 view .LVU301
ARM GAS  /tmp/ccklhD6J.s 			page 66


 1184              	.LBB36:
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 1185              		.loc 2 1050 3 view .LVU302
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1186              		.loc 2 1055 4 view .LVU303
 1187              	.LBE36:
 1188              	.LBE35:
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1189              		.loc 1 1314 37 is_stmt 0 view .LVU304
 1190 001a 42EA0301 		orr	r1, r2, r3
 1191              	.LBB38:
 1192              	.LBB37:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1193              		.loc 2 1055 4 view .LVU305
 1194              		.syntax unified
 1195              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1196 001e 93FAA3F2 		rbit r2, r3
 1197              	@ 0 "" 2
 1198              	.LVL66:
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1199              		.loc 2 1068 3 is_stmt 1 view .LVU306
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1200              		.loc 2 1068 3 is_stmt 0 view .LVU307
 1201              		.thumb
 1202              		.syntax unified
 1203              	.LBE37:
 1204              	.LBE38:
 1205              	.LBB39:
 1206              	.LBI39:
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1207              		.loc 2 1078 30 is_stmt 1 view .LVU308
 1208              	.LBB40:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1209              		.loc 2 1089 3 view .LVU309
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1210              		.loc 2 1089 6 is_stmt 0 view .LVU310
 1211 0022 6AB3     		cbz	r2, .L128
 1212              		.loc 2 1093 3 is_stmt 1 view .LVU311
 1213              		.loc 2 1093 10 is_stmt 0 view .LVU312
 1214 0024 B2FA82F2 		clz	r2, r2
 1215              	.LVL67:
 1216              		.loc 2 1093 10 view .LVU313
 1217 0028 0832     		adds	r2, r2, #8
 1218 002a 5200     		lsls	r2, r2, #1
 1219 002c 02F01E02 		and	r2, r2, #30
 1220              	.L124:
 1221              		.loc 2 1093 10 view .LVU314
 1222              	.LBE40:
 1223              	.LBE39:
 1224              		.loc 1 1316 36 view .LVU315
 1225 0030 00FA02F2 		lsl	r2, r0, r2
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1226              		.loc 1 1314 13 view .LVU316
 1227 0034 0A43     		orrs	r2, r2, r1
 1228              	.LVL68:
1317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
ARM GAS  /tmp/ccklhD6J.s 			page 67


 1229              		.loc 1 1318 3 is_stmt 1 view .LVU317
 1230              	.LBB42:
 1231              	.LBI42:
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1232              		.loc 2 1048 31 view .LVU318
 1233              	.LBB43:
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 1234              		.loc 2 1050 3 view .LVU319
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1235              		.loc 2 1055 4 view .LVU320
 1236              		.syntax unified
 1237              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1238 0036 93FAA3F0 		rbit r0, r3
 1239              	@ 0 "" 2
 1240              	.LVL69:
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1241              		.loc 2 1068 3 view .LVU321
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1242              		.loc 2 1068 3 is_stmt 0 view .LVU322
 1243              		.thumb
 1244              		.syntax unified
 1245              	.LBE43:
 1246              	.LBE42:
 1247              	.LBB44:
 1248              	.LBI44:
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1249              		.loc 2 1078 30 is_stmt 1 view .LVU323
 1250              	.LBB45:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1251              		.loc 2 1089 3 view .LVU324
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1252              		.loc 2 1089 6 is_stmt 0 view .LVU325
 1253 003a F0B1     		cbz	r0, .L129
 1254              		.loc 2 1093 3 is_stmt 1 view .LVU326
 1255              		.loc 2 1093 10 is_stmt 0 view .LVU327
 1256 003c B0FA80F0 		clz	r0, r0
 1257              	.LVL70:
 1258              		.loc 2 1093 10 view .LVU328
 1259 0040 4FF48071 		mov	r1, #256
 1260 0044 8140     		lsls	r1, r1, r0
 1261              	.L125:
 1262              		.loc 2 1093 10 view .LVU329
 1263              	.LBE45:
 1264              	.LBE44:
 1265              		.loc 1 1318 37 view .LVU330
 1266 0046 1943     		orrs	r1, r1, r3
 1267              	.LVL71:
 1268              	.LBB47:
 1269              	.LBI47:
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1270              		.loc 2 1048 31 is_stmt 1 view .LVU331
 1271              	.LBB48:
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 1272              		.loc 2 1050 3 view .LVU332
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1273              		.loc 2 1055 4 view .LVU333
 1274              		.syntax unified
ARM GAS  /tmp/ccklhD6J.s 			page 68


 1275              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1276 0048 93FAA3F3 		rbit r3, r3
 1277              	@ 0 "" 2
 1278              	.LVL72:
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1279              		.loc 2 1068 3 view .LVU334
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1280              		.loc 2 1068 3 is_stmt 0 view .LVU335
 1281              		.thumb
 1282              		.syntax unified
 1283              	.LBE48:
 1284              	.LBE47:
 1285              	.LBB49:
 1286              	.LBI49:
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 1287              		.loc 2 1078 30 is_stmt 1 view .LVU336
 1288              	.LBB50:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1289              		.loc 2 1089 3 view .LVU337
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1290              		.loc 2 1089 6 is_stmt 0 view .LVU338
 1291 004c 93B1     		cbz	r3, .L130
 1292              		.loc 2 1093 3 is_stmt 1 view .LVU339
 1293              		.loc 2 1093 10 is_stmt 0 view .LVU340
 1294 004e B3FA83F3 		clz	r3, r3
 1295              	.LVL73:
 1296              		.loc 2 1093 10 view .LVU341
 1297 0052 4FF44030 		mov	r0, #196608
 1298 0056 5B00     		lsls	r3, r3, #1
 1299 0058 03F01E03 		and	r3, r3, #30
 1300 005c 00FA03F3 		lsl	r3, r0, r3
 1301              	.L126:
 1302              	.LVL74:
 1303              		.loc 2 1093 10 view .LVU342
 1304              	.LBE50:
 1305              	.LBE49:
1319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
1320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
1321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
1323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
1324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 1306              		.loc 1 1324 3 is_stmt 1 view .LVU343
 1307 0060 0848     		ldr	r0, .L131
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 1308              		.loc 1 1318 13 is_stmt 0 view .LVU344
 1309 0062 0B43     		orrs	r3, r3, r1
 1310              	.LVL75:
 1311              		.loc 1 1324 3 view .LVU345
 1312 0064 816A     		ldr	r1, [r0, #40]
 1313 0066 21EA0303 		bic	r3, r1, r3
 1314              	.LVL76:
 1315              		.loc 1 1324 3 view .LVU346
 1316 006a 1343     		orrs	r3, r3, r2
 1317 006c 8362     		str	r3, [r0, #40]
1325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
1326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
ARM GAS  /tmp/ccklhD6J.s 			page 69


1327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos))
1328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !DUAL_CORE */
1329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1318              		.loc 1 1329 1 view .LVU347
 1319 006e 7047     		bx	lr
 1320              	.LVL77:
 1321              	.L127:
 1322              	.LBB52:
 1323              	.LBB34:
 1324              		.loc 1 1329 1 view .LVU348
 1325 0070 0822     		movs	r2, #8
 1326              	.LVL78:
 1327              		.loc 1 1329 1 view .LVU349
 1328 0072 CFE7     		b	.L123
 1329              	.LVL79:
 1330              	.L130:
 1331              		.loc 1 1329 1 view .LVU350
 1332              	.LBE34:
 1333              	.LBE52:
 1334              	.LBB53:
 1335              	.LBB51:
 1336 0074 4FF44033 		mov	r3, #196608
 1337              	.LVL80:
 1338              		.loc 1 1329 1 view .LVU351
 1339 0078 F2E7     		b	.L126
 1340              	.LVL81:
 1341              	.L129:
 1342              		.loc 1 1329 1 view .LVU352
 1343              	.LBE51:
 1344              	.LBE53:
 1345              	.LBB54:
 1346              	.LBB46:
 1347 007a 4FF48071 		mov	r1, #256
 1348 007e E2E7     		b	.L125
 1349              	.LVL82:
 1350              	.L128:
 1351              		.loc 1 1329 1 view .LVU353
 1352              	.LBE46:
 1353              	.LBE54:
 1354              	.LBB55:
 1355              	.LBB41:
 1356 0080 1022     		movs	r2, #16
 1357              	.LVL83:
 1358              		.loc 1 1329 1 view .LVU354
 1359 0082 D5E7     		b	.L124
 1360              	.L132:
 1361              		.align	2
 1362              	.L131:
 1363 0084 00480258 		.word	1476544512
 1364              	.LBE41:
 1365              	.LBE55:
 1366              		.cfi_endproc
 1367              	.LFE346:
 1369              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 1370              		.align	1
 1371              		.p2align 2,,3
 1372              		.global	HAL_PWREx_DisableWakeUpPin
ARM GAS  /tmp/ccklhD6J.s 			page 70


 1373              		.syntax unified
 1374              		.thumb
 1375              		.thumb_func
 1376              		.fpu fpv5-d16
 1378              	HAL_PWREx_DisableWakeUpPin:
 1379              	.LVL84:
 1380              	.LFB347:
1330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
1333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpPin : Specifies the Wake-Up pin to be disabled.
1334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1 : Disable PA0  wake-up PIN.
1336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2 : Disable PA2  wake-up PIN.
1337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3 : Disable PI8  wake-up PIN.
1338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4 : Disable PC13 wake-up PIN.
1339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5 : Disable PI11 wake-up PIN.
1340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6 : Disable PC1  wake-up PIN.
1341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
1342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
1346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1381              		.loc 1 1346 1 is_stmt 1 view -0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              		@ link register save eliminated.
1347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));
 1386              		.loc 1 1348 3 view .LVU356
1349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
1351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 1387              		.loc 1 1351 3 view .LVU357
 1388 0000 024A     		ldr	r2, .L134
 1389 0002 936A     		ldr	r3, [r2, #40]
 1390 0004 23EA0000 		bic	r0, r3, r0
 1391              	.LVL85:
 1392              		.loc 1 1351 3 is_stmt 0 view .LVU358
 1393 0008 9062     		str	r0, [r2, #40]
1352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1394              		.loc 1 1352 1 view .LVU359
 1395 000a 7047     		bx	lr
 1396              	.L135:
 1397              		.align	2
 1398              	.L134:
 1399 000c 00480258 		.word	1476544512
 1400              		.cfi_endproc
 1401              	.LFE347:
 1403              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
 1404              		.align	1
 1405              		.p2align 2,,3
 1406              		.global	HAL_PWREx_GetWakeupFlag
 1407              		.syntax unified
 1408              		.thumb
ARM GAS  /tmp/ccklhD6J.s 			page 71


 1409              		.thumb_func
 1410              		.fpu fpv5-d16
 1412              	HAL_PWREx_GetWakeupFlag:
 1413              	.LVL86:
 1414              	.LFB348:
1353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the Wake-Up Pin pending flags.
1356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
1357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
1359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
1360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PI8.
1361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PC13.
1362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5    : Get wakeup event received from PI11.
1363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6    : Get wakeup event received from PC1.
1364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
1365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      wake up pins.
1366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
1369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1415              		.loc 1 1371 1 is_stmt 1 view -0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              		@ link register save eliminated.
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1420              		.loc 1 1373 3 view .LVU361
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the wake up pin flag */
1376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 1421              		.loc 1 1376 3 view .LVU362
 1422              		.loc 1 1376 14 is_stmt 0 view .LVU363
 1423 0000 014B     		ldr	r3, .L137
 1424 0002 5B6A     		ldr	r3, [r3, #36]
1377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1425              		.loc 1 1377 1 view .LVU364
 1426 0004 1840     		ands	r0, r0, r3
 1427              	.LVL87:
 1428              		.loc 1 1377 1 view .LVU365
 1429 0006 7047     		bx	lr
 1430              	.L138:
 1431              		.align	2
 1432              	.L137:
 1433 0008 00480258 		.word	1476544512
 1434              		.cfi_endproc
 1435              	.LFE348:
 1437              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1438              		.align	1
 1439              		.p2align 2,,3
 1440              		.global	HAL_PWREx_ClearWakeupFlag
 1441              		.syntax unified
 1442              		.thumb
ARM GAS  /tmp/ccklhD6J.s 			page 72


 1443              		.thumb_func
 1444              		.fpu fpv5-d16
 1446              	HAL_PWREx_ClearWakeupFlag:
 1447              	.LVL88:
 1448              	.LFB349:
1378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear the Wake-Up pin pending flag.
1381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
1382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1 : Clear the wakeup event received from PA0.
1384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2 : Clear the wakeup event received from PA2.
1385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3 : Clear the wakeup event received from PI8.
1386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4 : Clear the wakeup event received from PC13.
1387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5 : Clear the wakeup event received from PI11.
1388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6 : Clear the wakeup event received from PC1.
1389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from
1390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      all wake up pins.
1391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
1396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1449              		.loc 1 1396 1 is_stmt 1 view -0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
1397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1454              		.loc 1 1398 3 view .LVU367
1399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear the wake up event received from wake up pin x */
1401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->WKUPCR, WakeUpFlag);
 1455              		.loc 1 1401 3 view .LVU368
 1456 0000 044B     		ldr	r3, .L140
 1457 0002 1A6A     		ldr	r2, [r3, #32]
 1458 0004 0243     		orrs	r2, r2, r0
 1459 0006 1A62     		str	r2, [r3, #32]
1402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the wake up event is well cleared */
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 1460              		.loc 1 1404 3 view .LVU369
 1461              		.loc 1 1404 11 is_stmt 0 view .LVU370
 1462 0008 5B6A     		ldr	r3, [r3, #36]
 1463              		.loc 1 1404 6 view .LVU371
 1464 000a 0342     		tst	r3, r0
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
1410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1465              		.loc 1 1410 1 view .LVU372
 1466 000c 14BF     		ite	ne
 1467 000e 0120     		movne	r0, #1
ARM GAS  /tmp/ccklhD6J.s 			page 73


 1468              	.LVL89:
 1469              		.loc 1 1410 1 view .LVU373
 1470 0010 0020     		moveq	r0, #0
 1471 0012 7047     		bx	lr
 1472              	.L141:
 1473              		.align	2
 1474              	.L140:
 1475 0014 00480258 		.word	1476544512
 1476              		.cfi_endproc
 1477              	.LFE349:
 1479              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1480              		.align	1
 1481              		.p2align 2,,3
 1482              		.weak	HAL_PWREx_WKUP1_Callback
 1483              		.syntax unified
 1484              		.thumb
 1485              		.thumb_func
 1486              		.fpu fpv5-d16
 1488              	HAL_PWREx_WKUP1_Callback:
 1489              	.LFB351:
1411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
1414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
1415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
1421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
1424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback ();
1427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
1429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
1432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback ();
1435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
1438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
1441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback ();
1444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccklhD6J.s 			page 74


1448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
1450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback ();
1453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
1459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback ();
1462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
1468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback ();
1471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP1 interrupt callback.
1476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback (void)
1479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1490              		.loc 1 1479 1 is_stmt 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
1480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback can be implemented in the user file
1482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1495              		.loc 1 1483 1 view .LVU375
 1496 0000 7047     		bx	lr
 1497              		.cfi_endproc
 1498              	.LFE351:
 1500 0002 00BF     		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1501              		.align	1
 1502              		.p2align 2,,3
 1503              		.weak	HAL_PWREx_WKUP2_Callback
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu fpv5-d16
 1509              	HAL_PWREx_WKUP2_Callback:
 1510              	.LFB375:
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccklhD6J.s 			page 75


 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515 0000 7047     		bx	lr
 1516              		.cfi_endproc
 1517              	.LFE375:
 1519 0002 00BF     		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
 1520              		.align	1
 1521              		.p2align 2,,3
 1522              		.weak	HAL_PWREx_WKUP3_Callback
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv5-d16
 1528              	HAL_PWREx_WKUP3_Callback:
 1529              	.LFB377:
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              		@ link register save eliminated.
 1534 0000 7047     		bx	lr
 1535              		.cfi_endproc
 1536              	.LFE377:
 1538 0002 00BF     		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 1539              		.align	1
 1540              		.p2align 2,,3
 1541              		.weak	HAL_PWREx_WKUP4_Callback
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1545              		.fpu fpv5-d16
 1547              	HAL_PWREx_WKUP4_Callback:
 1548              	.LFB379:
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553 0000 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE379:
 1557 0002 00BF     		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 1558              		.align	1
 1559              		.p2align 2,,3
 1560              		.weak	HAL_PWREx_WKUP5_Callback
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv5-d16
 1566              	HAL_PWREx_WKUP5_Callback:
 1567              	.LFB381:
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 0, uses_anonymous_args = 0
 1571              		@ link register save eliminated.
 1572 0000 7047     		bx	lr
 1573              		.cfi_endproc
 1574              	.LFE381:
 1576 0002 00BF     		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
ARM GAS  /tmp/ccklhD6J.s 			page 76


 1577              		.align	1
 1578              		.p2align 2,,3
 1579              		.weak	HAL_PWREx_WKUP6_Callback
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu fpv5-d16
 1585              	HAL_PWREx_WKUP6_Callback:
 1586              	.LFB383:
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 0
 1589              		@ frame_needed = 0, uses_anonymous_args = 0
 1590              		@ link register save eliminated.
 1591 0000 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE383:
 1595 0002 00BF     		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1596              		.align	1
 1597              		.p2align 2,,3
 1598              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv5-d16
 1604              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1605              	.LFB350:
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 1606              		.loc 1 1418 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1610              		.loc 1 1420 3 view .LVU377
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 1611              		.loc 1 1418 1 is_stmt 0 view .LVU378
 1612 0000 08B5     		push	{r3, lr}
 1613              	.LCFI6:
 1614              		.cfi_def_cfa_offset 8
 1615              		.cfi_offset 3, -8
 1616              		.cfi_offset 14, -4
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1617              		.loc 1 1420 7 view .LVU379
 1618 0002 1D4B     		ldr	r3, .L160
 1619 0004 5A6A     		ldr	r2, [r3, #36]
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1620              		.loc 1 1420 6 view .LVU380
 1621 0006 D207     		lsls	r2, r2, #31
 1622 0008 1AD4     		bmi	.L156
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1623              		.loc 1 1428 8 is_stmt 1 view .LVU381
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1624              		.loc 1 1428 12 is_stmt 0 view .LVU382
 1625 000a 5A6A     		ldr	r2, [r3, #36]
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1626              		.loc 1 1428 11 view .LVU383
 1627 000c 9007     		lsls	r0, r2, #30
 1628 000e 10D4     		bmi	.L157
ARM GAS  /tmp/ccklhD6J.s 			page 77


1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1629              		.loc 1 1437 8 is_stmt 1 view .LVU384
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1630              		.loc 1 1437 12 is_stmt 0 view .LVU385
 1631 0010 5A6A     		ldr	r2, [r3, #36]
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1632              		.loc 1 1437 11 view .LVU386
 1633 0012 5107     		lsls	r1, r2, #29
 1634 0014 21D4     		bmi	.L158
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1635              		.loc 1 1446 8 is_stmt 1 view .LVU387
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1636              		.loc 1 1446 12 is_stmt 0 view .LVU388
 1637 0016 5A6A     		ldr	r2, [r3, #36]
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1638              		.loc 1 1446 11 view .LVU389
 1639 0018 1207     		lsls	r2, r2, #28
 1640 001a 25D4     		bmi	.L159
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1641              		.loc 1 1455 8 is_stmt 1 view .LVU390
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1642              		.loc 1 1455 12 is_stmt 0 view .LVU391
 1643 001c 5A6A     		ldr	r2, [r3, #36]
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1644              		.loc 1 1455 11 view .LVU392
 1645 001e 12F0100F 		tst	r2, #16
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1646              		.loc 1 1458 5 view .LVU393
 1647 0022 1A6A     		ldr	r2, [r3, #32]
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1648              		.loc 1 1455 11 view .LVU394
 1649 0024 13D0     		beq	.L154
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1650              		.loc 1 1458 5 is_stmt 1 view .LVU395
 1651 0026 42F01002 		orr	r2, r2, #16
 1652 002a 1A62     		str	r2, [r3, #32]
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1653              		.loc 1 1461 5 view .LVU396
 1654 002c FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1655              	.LVL90:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1656              		.loc 1 1472 1 is_stmt 0 view .LVU397
 1657 0030 08BD     		pop	{r3, pc}
 1658              	.L157:
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1659              		.loc 1 1431 5 is_stmt 1 view .LVU398
 1660 0032 1A6A     		ldr	r2, [r3, #32]
 1661 0034 42F00202 		orr	r2, r2, #2
 1662 0038 1A62     		str	r2, [r3, #32]
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1663              		.loc 1 1434 5 view .LVU399
 1664 003a FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1665              	.LVL91:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1666              		.loc 1 1472 1 is_stmt 0 view .LVU400
 1667 003e 08BD     		pop	{r3, pc}
 1668              	.L156:
ARM GAS  /tmp/ccklhD6J.s 			page 78


1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1669              		.loc 1 1423 5 is_stmt 1 view .LVU401
 1670 0040 1A6A     		ldr	r2, [r3, #32]
 1671 0042 42F00102 		orr	r2, r2, #1
 1672 0046 1A62     		str	r2, [r3, #32]
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1673              		.loc 1 1426 5 view .LVU402
 1674 0048 FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
 1675              	.LVL92:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1676              		.loc 1 1472 1 is_stmt 0 view .LVU403
 1677 004c 08BD     		pop	{r3, pc}
 1678              	.L154:
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1679              		.loc 1 1467 5 is_stmt 1 view .LVU404
 1680 004e 42F02002 		orr	r2, r2, #32
 1681 0052 1A62     		str	r2, [r3, #32]
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1682              		.loc 1 1470 5 view .LVU405
 1683 0054 FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1684              	.LVL93:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1685              		.loc 1 1472 1 is_stmt 0 view .LVU406
 1686 0058 08BD     		pop	{r3, pc}
 1687              	.L158:
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1688              		.loc 1 1440 5 is_stmt 1 view .LVU407
 1689 005a 1A6A     		ldr	r2, [r3, #32]
 1690 005c 42F00402 		orr	r2, r2, #4
 1691 0060 1A62     		str	r2, [r3, #32]
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1692              		.loc 1 1443 5 view .LVU408
 1693 0062 FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1694              	.LVL94:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1695              		.loc 1 1472 1 is_stmt 0 view .LVU409
 1696 0066 08BD     		pop	{r3, pc}
 1697              	.L159:
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1698              		.loc 1 1449 5 is_stmt 1 view .LVU410
 1699 0068 1A6A     		ldr	r2, [r3, #32]
 1700 006a 42F00802 		orr	r2, r2, #8
 1701 006e 1A62     		str	r2, [r3, #32]
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1702              		.loc 1 1452 5 view .LVU411
 1703 0070 FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1704              	.LVL95:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1705              		.loc 1 1472 1 is_stmt 0 view .LVU412
 1706 0074 08BD     		pop	{r3, pc}
 1707              	.L161:
 1708 0076 00BF     		.align	2
 1709              	.L160:
 1710 0078 00480258 		.word	1476544512
 1711              		.cfi_endproc
 1712              	.LFE350:
 1714              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
ARM GAS  /tmp/ccklhD6J.s 			page 79


 1715              		.align	1
 1716              		.p2align 2,,3
 1717              		.global	HAL_PWREx_EnableBkUpReg
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1721              		.fpu fpv5-d16
 1723              	HAL_PWREx_EnableBkUpReg:
 1724              	.LFB357:
1484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP2 interrupt callback.
1487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback (void)
1490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback can be implemented in the user file
1493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP3 interrupt callback.
1499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback (void)
1502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback can be implemented in the user file
1505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP4 interrupt callback.
1511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback (void)
1514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback can be implemented in the user file
1517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP5 interrupt callback.
1523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback (void)
1526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback can be implemented in the user file
1529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
ARM GAS  /tmp/ccklhD6J.s 			page 80


1532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP6 interrupt callback.
1535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback (void)
1538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback can be implemented in the user file
1541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
1553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
1557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only
1559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           from the CPU, and addressed in 32-bit, 16-bit or 8-bit mode. Its
1560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           content is retained even in Standby or VBAT mode when the low power
1561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           backup regulator is enabled. It can be considered as an internal
1562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           EEPROM when VBAT is always present. You can use the
1563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableBkUpReg() function to enable the low power backup
1564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           regulator.
1565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to
1566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD) the backup SRAM is powered from VDD which replaces the VBAT power
1567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           supply to save battery life.
1568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
1569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff
1576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           between performance and power consumption when the device does not
1577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           operate at the maximum frequency. This is done through
1578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ControlVoltageScaling(VOS) function which configure the VOS
1579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           bit in PWR_D3CR register.
1580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power
1581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           mode when the system enters STOP mode to further reduce power
1582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           consumption.
1583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay
1586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           when exiting from system Stop mode.
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccklhD6J.s 			page 81


1589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply
1593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           that can be provided either by the integrated USB regulator, or by an
1594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           external USB supply.
1595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the
1596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD33USB is then provided from the USB regulator.
1597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector
1598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           shall be enabled through  HAL_PWREx_EnableUSBVoltageDetector()
1599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg()
1601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and VDD33USB can be provided from an external supply. In this
1602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           case VDD33USB and VDD50USB shall be connected together.
1603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be
1608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           charged through an internal resistance. VBAT charging can be performed
1609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           either through a 5 KOhm resistor or through a 1.5 KOhm resistor.
1610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging
1611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (ResistorValue) function with:
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging()
1616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Backup Regulator.
1624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1725              		.loc 1 1627 1 is_stmt 1 view -0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
1628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1729              		.loc 1 1628 3 view .LVU414
1629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_BREN);
 1730              		.loc 1 1631 3 view .LVU415
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1731              		.loc 1 1627 1 is_stmt 0 view .LVU416
 1732 0000 38B5     		push	{r3, r4, r5, lr}
 1733              	.LCFI7:
 1734              		.cfi_def_cfa_offset 16
 1735              		.cfi_offset 3, -16
 1736              		.cfi_offset 4, -12
 1737              		.cfi_offset 5, -8
ARM GAS  /tmp/ccklhD6J.s 			page 82


 1738              		.cfi_offset 14, -4
 1739              		.loc 1 1631 3 view .LVU417
 1740 0002 0B4B     		ldr	r3, .L168
 1741 0004 9A68     		ldr	r2, [r3, #8]
1632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
1635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 1742              		.loc 1 1637 10 view .LVU418
 1743 0006 1D46     		mov	r5, r3
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1744              		.loc 1 1631 3 view .LVU419
 1745 0008 42F00102 		orr	r2, r2, #1
 1746 000c 9A60     		str	r2, [r3, #8]
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1747              		.loc 1 1634 3 is_stmt 1 view .LVU420
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1748              		.loc 1 1634 15 is_stmt 0 view .LVU421
 1749 000e FFF7FEFF 		bl	HAL_GetTick
 1750              	.LVL96:
 1751 0012 0446     		mov	r4, r0
 1752              	.LVL97:
 1753              		.loc 1 1637 3 is_stmt 1 view .LVU422
 1754              		.loc 1 1637 9 is_stmt 0 view .LVU423
 1755 0014 05E0     		b	.L163
 1756              	.LVL98:
 1757              	.L165:
1638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1758              		.loc 1 1639 10 view .LVU424
 1759 0016 FFF7FEFF 		bl	HAL_GetTick
 1760              	.LVL99:
 1761              		.loc 1 1639 24 view .LVU425
 1762 001a 001B     		subs	r0, r0, r4
 1763              		.loc 1 1639 8 view .LVU426
 1764 001c B0F57A7F 		cmp	r0, #1000
 1765 0020 04D8     		bhi	.L166
 1766              	.L163:
 1767              		.loc 1 1639 5 is_stmt 1 view .LVU427
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1768              		.loc 1 1637 9 view .LVU428
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1769              		.loc 1 1637 10 is_stmt 0 view .LVU429
 1770 0022 AB68     		ldr	r3, [r5, #8]
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1771              		.loc 1 1637 9 view .LVU430
 1772 0024 DB03     		lsls	r3, r3, #15
 1773 0026 F6D5     		bpl	.L165
1640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
1642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1774              		.loc 1 1645 10 view .LVU431
ARM GAS  /tmp/ccklhD6J.s 			page 83


 1775 0028 0020     		movs	r0, #0
1646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1776              		.loc 1 1646 1 view .LVU432
 1777 002a 38BD     		pop	{r3, r4, r5, pc}
 1778              	.LVL100:
 1779              	.L166:
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 1780              		.loc 1 1641 14 view .LVU433
 1781 002c 0120     		movs	r0, #1
 1782              		.loc 1 1646 1 view .LVU434
 1783 002e 38BD     		pop	{r3, r4, r5, pc}
 1784              	.LVL101:
 1785              	.L169:
 1786              		.loc 1 1646 1 view .LVU435
 1787              		.align	2
 1788              	.L168:
 1789 0030 00480258 		.word	1476544512
 1790              		.cfi_endproc
 1791              	.LFE357:
 1793              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 1794              		.align	1
 1795              		.p2align 2,,3
 1796              		.global	HAL_PWREx_DisableBkUpReg
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1800              		.fpu fpv5-d16
 1802              	HAL_PWREx_DisableBkUpReg:
 1803              	.LFB358:
1647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Backup Regulator.
1650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1804              		.loc 1 1653 1 is_stmt 1 view -0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
1654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1808              		.loc 1 1654 3 view .LVU437
1655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 1809              		.loc 1 1657 3 view .LVU438
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1810              		.loc 1 1653 1 is_stmt 0 view .LVU439
 1811 0000 38B5     		push	{r3, r4, r5, lr}
 1812              	.LCFI8:
 1813              		.cfi_def_cfa_offset 16
 1814              		.cfi_offset 3, -16
 1815              		.cfi_offset 4, -12
 1816              		.cfi_offset 5, -8
 1817              		.cfi_offset 14, -4
 1818              		.loc 1 1657 3 view .LVU440
 1819 0002 0C4B     		ldr	r3, .L176
ARM GAS  /tmp/ccklhD6J.s 			page 84


 1820 0004 9A68     		ldr	r2, [r3, #8]
1658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
1661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 1821              		.loc 1 1663 10 view .LVU441
 1822 0006 1D46     		mov	r5, r3
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1823              		.loc 1 1657 3 view .LVU442
 1824 0008 22F00102 		bic	r2, r2, #1
 1825 000c 9A60     		str	r2, [r3, #8]
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1826              		.loc 1 1660 3 is_stmt 1 view .LVU443
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1827              		.loc 1 1660 15 is_stmt 0 view .LVU444
 1828 000e FFF7FEFF 		bl	HAL_GetTick
 1829              	.LVL102:
 1830 0012 0446     		mov	r4, r0
 1831              	.LVL103:
 1832              		.loc 1 1663 3 is_stmt 1 view .LVU445
 1833              		.loc 1 1663 9 is_stmt 0 view .LVU446
 1834 0014 05E0     		b	.L171
 1835              	.LVL104:
 1836              	.L173:
1664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1837              		.loc 1 1665 10 view .LVU447
 1838 0016 FFF7FEFF 		bl	HAL_GetTick
 1839              	.LVL105:
 1840              		.loc 1 1665 24 view .LVU448
 1841 001a 001B     		subs	r0, r0, r4
 1842              		.loc 1 1665 8 view .LVU449
 1843 001c B0F57A7F 		cmp	r0, #1000
 1844 0020 05D8     		bhi	.L174
 1845              	.L171:
 1846              		.loc 1 1665 5 is_stmt 1 view .LVU450
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1847              		.loc 1 1663 9 view .LVU451
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1848              		.loc 1 1663 10 is_stmt 0 view .LVU452
 1849 0022 AB68     		ldr	r3, [r5, #8]
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1850              		.loc 1 1663 9 view .LVU453
 1851 0024 13F48033 		ands	r3, r3, #65536
 1852 0028 F5D1     		bne	.L173
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
1668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1853              		.loc 1 1671 10 view .LVU454
 1854 002a 1846     		mov	r0, r3
1672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1855              		.loc 1 1672 1 view .LVU455
ARM GAS  /tmp/ccklhD6J.s 			page 85


 1856 002c 38BD     		pop	{r3, r4, r5, pc}
 1857              	.LVL106:
 1858              	.L174:
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 1859              		.loc 1 1667 14 view .LVU456
 1860 002e 0120     		movs	r0, #1
 1861              		.loc 1 1672 1 view .LVU457
 1862 0030 38BD     		pop	{r3, r4, r5, pc}
 1863              	.LVL107:
 1864              	.L177:
 1865              		.loc 1 1672 1 view .LVU458
 1866 0032 00BF     		.align	2
 1867              	.L176:
 1868 0034 00480258 		.word	1476544512
 1869              		.cfi_endproc
 1870              	.LFE358:
 1872              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 1873              		.align	1
 1874              		.p2align 2,,3
 1875              		.global	HAL_PWREx_EnableUSBReg
 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1879              		.fpu fpv5-d16
 1881              	HAL_PWREx_EnableUSBReg:
 1882              	.LFB359:
1673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB Regulator.
1676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1883              		.loc 1 1679 1 is_stmt 1 view -0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
1680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1887              		.loc 1 1680 3 view .LVU460
1681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1888              		.loc 1 1683 3 view .LVU461
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1889              		.loc 1 1679 1 is_stmt 0 view .LVU462
 1890 0000 38B5     		push	{r3, r4, r5, lr}
 1891              	.LCFI9:
 1892              		.cfi_def_cfa_offset 16
 1893              		.cfi_offset 3, -16
 1894              		.cfi_offset 4, -12
 1895              		.cfi_offset 5, -8
 1896              		.cfi_offset 14, -4
 1897              		.loc 1 1683 3 view .LVU463
 1898 0002 0B4B     		ldr	r3, .L184
 1899 0004 DA68     		ldr	r2, [r3, #12]
1684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
ARM GAS  /tmp/ccklhD6J.s 			page 86


1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
1687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 1900              		.loc 1 1689 10 view .LVU464
 1901 0006 1D46     		mov	r5, r3
1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1902              		.loc 1 1683 3 view .LVU465
 1903 0008 42F00072 		orr	r2, r2, #33554432
 1904 000c DA60     		str	r2, [r3, #12]
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1905              		.loc 1 1686 3 is_stmt 1 view .LVU466
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1906              		.loc 1 1686 15 is_stmt 0 view .LVU467
 1907 000e FFF7FEFF 		bl	HAL_GetTick
 1908              	.LVL108:
 1909 0012 0446     		mov	r4, r0
 1910              	.LVL109:
 1911              		.loc 1 1689 3 is_stmt 1 view .LVU468
 1912              		.loc 1 1689 9 is_stmt 0 view .LVU469
 1913 0014 05E0     		b	.L179
 1914              	.LVL110:
 1915              	.L181:
1690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1916              		.loc 1 1691 10 view .LVU470
 1917 0016 FFF7FEFF 		bl	HAL_GetTick
 1918              	.LVL111:
 1919              		.loc 1 1691 24 view .LVU471
 1920 001a 001B     		subs	r0, r0, r4
 1921              		.loc 1 1691 8 view .LVU472
 1922 001c B0F57A7F 		cmp	r0, #1000
 1923 0020 04D8     		bhi	.L182
 1924              	.L179:
 1925              		.loc 1 1691 5 is_stmt 1 view .LVU473
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1926              		.loc 1 1689 9 view .LVU474
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1927              		.loc 1 1689 10 is_stmt 0 view .LVU475
 1928 0022 EB68     		ldr	r3, [r5, #12]
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1929              		.loc 1 1689 9 view .LVU476
 1930 0024 5B01     		lsls	r3, r3, #5
 1931 0026 F6D5     		bpl	.L181
1692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
1694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1932              		.loc 1 1697 10 view .LVU477
 1933 0028 0020     		movs	r0, #0
1698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1934              		.loc 1 1698 1 view .LVU478
 1935 002a 38BD     		pop	{r3, r4, r5, pc}
 1936              	.LVL112:
 1937              	.L182:
ARM GAS  /tmp/ccklhD6J.s 			page 87


1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 1938              		.loc 1 1693 14 view .LVU479
 1939 002c 0120     		movs	r0, #1
 1940              		.loc 1 1698 1 view .LVU480
 1941 002e 38BD     		pop	{r3, r4, r5, pc}
 1942              	.LVL113:
 1943              	.L185:
 1944              		.loc 1 1698 1 view .LVU481
 1945              		.align	2
 1946              	.L184:
 1947 0030 00480258 		.word	1476544512
 1948              		.cfi_endproc
 1949              	.LFE359:
 1951              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
 1952              		.align	1
 1953              		.p2align 2,,3
 1954              		.global	HAL_PWREx_DisableUSBReg
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1958              		.fpu fpv5-d16
 1960              	HAL_PWREx_DisableUSBReg:
 1961              	.LFB360:
1699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB Regulator.
1702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1962              		.loc 1 1705 1 is_stmt 1 view -0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
1706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1966              		.loc 1 1706 3 view .LVU483
1707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1967              		.loc 1 1709 3 view .LVU484
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1968              		.loc 1 1705 1 is_stmt 0 view .LVU485
 1969 0000 38B5     		push	{r3, r4, r5, lr}
 1970              	.LCFI10:
 1971              		.cfi_def_cfa_offset 16
 1972              		.cfi_offset 3, -16
 1973              		.cfi_offset 4, -12
 1974              		.cfi_offset 5, -8
 1975              		.cfi_offset 14, -4
 1976              		.loc 1 1709 3 view .LVU486
 1977 0002 0C4B     		ldr	r3, .L192
 1978 0004 DA68     		ldr	r2, [r3, #12]
1710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
1713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
ARM GAS  /tmp/ccklhD6J.s 			page 88


1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 1979              		.loc 1 1715 9 view .LVU487
 1980 0006 1D46     		mov	r5, r3
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1981              		.loc 1 1709 3 view .LVU488
 1982 0008 22F00072 		bic	r2, r2, #33554432
 1983 000c DA60     		str	r2, [r3, #12]
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1984              		.loc 1 1712 3 is_stmt 1 view .LVU489
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1985              		.loc 1 1712 15 is_stmt 0 view .LVU490
 1986 000e FFF7FEFF 		bl	HAL_GetTick
 1987              	.LVL114:
 1988 0012 0446     		mov	r4, r0
 1989              	.LVL115:
 1990              		.loc 1 1715 3 is_stmt 1 view .LVU491
 1991              		.loc 1 1715 8 is_stmt 0 view .LVU492
 1992 0014 05E0     		b	.L187
 1993              	.LVL116:
 1994              	.L189:
1716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1995              		.loc 1 1717 10 view .LVU493
 1996 0016 FFF7FEFF 		bl	HAL_GetTick
 1997              	.LVL117:
 1998              		.loc 1 1717 24 view .LVU494
 1999 001a 001B     		subs	r0, r0, r4
 2000              		.loc 1 1717 8 view .LVU495
 2001 001c B0F57A7F 		cmp	r0, #1000
 2002 0020 05D8     		bhi	.L190
 2003              	.L187:
 2004              		.loc 1 1717 5 is_stmt 1 view .LVU496
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2005              		.loc 1 1715 8 view .LVU497
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2006              		.loc 1 1715 9 is_stmt 0 view .LVU498
 2007 0022 EB68     		ldr	r3, [r5, #12]
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2008              		.loc 1 1715 8 view .LVU499
 2009 0024 13F08063 		ands	r3, r3, #67108864
 2010 0028 F5D1     		bne	.L189
1718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
1720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 2011              		.loc 1 1723 10 view .LVU500
 2012 002a 1846     		mov	r0, r3
1724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2013              		.loc 1 1724 1 view .LVU501
 2014 002c 38BD     		pop	{r3, r4, r5, pc}
 2015              	.LVL118:
 2016              	.L190:
1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 2017              		.loc 1 1719 14 view .LVU502
 2018 002e 0120     		movs	r0, #1
ARM GAS  /tmp/ccklhD6J.s 			page 89


 2019              		.loc 1 1724 1 view .LVU503
 2020 0030 38BD     		pop	{r3, r4, r5, pc}
 2021              	.LVL119:
 2022              	.L193:
 2023              		.loc 1 1724 1 view .LVU504
 2024 0032 00BF     		.align	2
 2025              	.L192:
 2026 0034 00480258 		.word	1476544512
 2027              		.cfi_endproc
 2028              	.LFE360:
 2030              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
 2031              		.align	1
 2032              		.p2align 2,,3
 2033              		.global	HAL_PWREx_EnableUSBVoltageDetector
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
 2037              		.fpu fpv5-d16
 2039              	HAL_PWREx_EnableUSBVoltageDetector:
 2040              	.LFB361:
1725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB voltage level detector.
1728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector (void)
1731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2041              		.loc 1 1731 1 is_stmt 1 view -0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 0
 2044              		@ frame_needed = 0, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
1732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 2046              		.loc 1 1733 3 view .LVU506
 2047 0000 024A     		ldr	r2, .L195
 2048 0002 D368     		ldr	r3, [r2, #12]
 2049 0004 43F08073 		orr	r3, r3, #16777216
 2050 0008 D360     		str	r3, [r2, #12]
1734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2051              		.loc 1 1734 1 is_stmt 0 view .LVU507
 2052 000a 7047     		bx	lr
 2053              	.L196:
 2054              		.align	2
 2055              	.L195:
 2056 000c 00480258 		.word	1476544512
 2057              		.cfi_endproc
 2058              	.LFE361:
 2060              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	HAL_PWREx_DisableUSBVoltageDetector
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv5-d16
 2069              	HAL_PWREx_DisableUSBVoltageDetector:
ARM GAS  /tmp/ccklhD6J.s 			page 90


 2070              	.LFB362:
1735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB voltage level detector.
1738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector (void)
1741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2071              		.loc 1 1741 1 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
1742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 2076              		.loc 1 1743 3 view .LVU509
 2077 0000 024A     		ldr	r2, .L198
 2078 0002 D368     		ldr	r3, [r2, #12]
 2079 0004 23F08073 		bic	r3, r3, #16777216
 2080 0008 D360     		str	r3, [r2, #12]
1744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2081              		.loc 1 1744 1 is_stmt 0 view .LVU510
 2082 000a 7047     		bx	lr
 2083              	.L199:
 2084              		.align	2
 2085              	.L198:
 2086 000c 00480258 		.word	1476544512
 2087              		.cfi_endproc
 2088              	.LFE362:
 2090              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 2091              		.align	1
 2092              		.p2align 2,,3
 2093              		.global	HAL_PWREx_EnableBatteryCharging
 2094              		.syntax unified
 2095              		.thumb
 2096              		.thumb_func
 2097              		.fpu fpv5-d16
 2099              	HAL_PWREx_EnableBatteryCharging:
 2100              	.LVL120:
 2101              	.LFB363:
1745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Battery charging.
1748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery through an internal
1749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         resistor.
1750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue : Specifies the charging resistor.
1751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
1753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
1754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
1757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2102              		.loc 1 1757 1 is_stmt 1 view -0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 0
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccklhD6J.s 			page 91


 2106              		@ link register save eliminated.
1758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));
 2107              		.loc 1 1759 3 view .LVU512
1760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 2108              		.loc 1 1762 3 view .LVU513
 2109 0000 054A     		ldr	r2, .L201
 2110 0002 D368     		ldr	r3, [r2, #12]
 2111 0004 23F40073 		bic	r3, r3, #512
 2112 0008 1843     		orrs	r0, r0, r3
 2113              	.LVL121:
 2114              		.loc 1 1762 3 is_stmt 0 view .LVU514
 2115 000a D060     		str	r0, [r2, #12]
1763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_VBE);
 2116              		.loc 1 1765 3 is_stmt 1 view .LVU515
 2117 000c D368     		ldr	r3, [r2, #12]
 2118 000e 43F48073 		orr	r3, r3, #256
 2119 0012 D360     		str	r3, [r2, #12]
1766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2120              		.loc 1 1766 1 is_stmt 0 view .LVU516
 2121 0014 7047     		bx	lr
 2122              	.L202:
 2123 0016 00BF     		.align	2
 2124              	.L201:
 2125 0018 00480258 		.word	1476544512
 2126              		.cfi_endproc
 2127              	.LFE363:
 2129              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 2130              		.align	1
 2131              		.p2align 2,,3
 2132              		.global	HAL_PWREx_DisableBatteryCharging
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu fpv5-d16
 2138              	HAL_PWREx_DisableBatteryCharging:
 2139              	.LFB364:
1767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Battery charging.
1770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging (void)
1773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2140              		.loc 1 1773 1 is_stmt 1 view -0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
1774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 2145              		.loc 1 1775 3 view .LVU518
 2146 0000 024A     		ldr	r2, .L204
ARM GAS  /tmp/ccklhD6J.s 			page 92


 2147 0002 D368     		ldr	r3, [r2, #12]
 2148 0004 23F48073 		bic	r3, r3, #256
 2149 0008 D360     		str	r3, [r2, #12]
1776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2150              		.loc 1 1776 1 is_stmt 0 view .LVU519
 2151 000a 7047     		bx	lr
 2152              	.L205:
 2153              		.align	2
 2154              	.L204:
 2155 000c 00480258 		.word	1476544512
 2156              		.cfi_endproc
 2157              	.LFE364:
 2159              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 2160              		.align	1
 2161              		.p2align 2,,3
 2162              		.global	HAL_PWREx_EnableMonitoring
 2163              		.syntax unified
 2164              		.thumb
 2165              		.thumb_func
 2166              		.fpu fpv5-d16
 2168              	HAL_PWREx_EnableMonitoring:
 2169              	.LFB365:
1777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_BOOSTE)
1779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the booster to guarantee the analog switch AC performance when
1781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the VDD supply voltage is below 2V7.
1782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The VDD supply voltage can be monitored through the PVD and the PLS
1783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         field bits.
1784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAnalogBooster (void)
1787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog voltage */
1789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable VDDA booster */
1792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the analog booster.
1797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAnalogBooster (void)
1800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable VDDA booster */
1802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog voltage */
1805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_BOOSTE) */
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/ccklhD6J.s 			page 93


1812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
1813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
1818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
1824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
1825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_CR2), indicate if VBAT is higher or
1826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           lower than the threshold.
1827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
1828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
1829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control register 2 (PWR_CR2), indicate whether the device temperature
1830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
1831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
1832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
1833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
1834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
1835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
1838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level which can be :
1839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1
1847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           register).
1848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
1860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring (void)
1863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2170              		.loc 1 1863 1 is_stmt 1 view -0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              		@ link register save eliminated.
ARM GAS  /tmp/ccklhD6J.s 			page 94


1864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
1865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 2175              		.loc 1 1865 3 view .LVU521
 2176 0000 024A     		ldr	r2, .L207
 2177 0002 9368     		ldr	r3, [r2, #8]
 2178 0004 43F01003 		orr	r3, r3, #16
 2179 0008 9360     		str	r3, [r2, #8]
1866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2180              		.loc 1 1866 1 is_stmt 0 view .LVU522
 2181 000a 7047     		bx	lr
 2182              	.L208:
 2183              		.align	2
 2184              	.L207:
 2185 000c 00480258 		.word	1476544512
 2186              		.cfi_endproc
 2187              	.LFE365:
 2189              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 2190              		.align	1
 2191              		.p2align 2,,3
 2192              		.global	HAL_PWREx_DisableMonitoring
 2193              		.syntax unified
 2194              		.thumb
 2195              		.thumb_func
 2196              		.fpu fpv5-d16
 2198              	HAL_PWREx_DisableMonitoring:
 2199              	.LFB366:
1867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
1870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring (void)
1873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2200              		.loc 1 1873 1 is_stmt 1 view -0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 0
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 2204              		@ link register save eliminated.
1874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 2205              		.loc 1 1875 3 view .LVU524
 2206 0000 024A     		ldr	r2, .L210
 2207 0002 9368     		ldr	r3, [r2, #8]
 2208 0004 23F01003 		bic	r3, r3, #16
 2209 0008 9360     		str	r3, [r2, #8]
1876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2210              		.loc 1 1876 1 is_stmt 0 view .LVU525
 2211 000a 7047     		bx	lr
 2212              	.L211:
 2213              		.align	2
 2214              	.L210:
 2215 000c 00480258 		.word	1476544512
 2216              		.cfi_endproc
 2217              	.LFE366:
 2219              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 2220              		.align	1
 2221              		.p2align 2,,3
ARM GAS  /tmp/ccklhD6J.s 			page 95


 2222              		.global	HAL_PWREx_GetTemperatureLevel
 2223              		.syntax unified
 2224              		.thumb
 2225              		.thumb_func
 2226              		.fpu fpv5-d16
 2228              	HAL_PWREx_GetTemperatureLevel:
 2229              	.LFB367:
1877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
1880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel (void)
1884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2230              		.loc 1 1884 1 is_stmt 1 view -0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 0
 2233              		@ frame_needed = 0, uses_anonymous_args = 0
 2234              		@ link register save eliminated.
1885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel, regValue;
 2235              		.loc 1 1885 3 view .LVU527
1886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 2236              		.loc 1 1888 3 view .LVU528
 2237              		.loc 1 1888 14 is_stmt 0 view .LVU529
 2238 0000 054B     		ldr	r3, .L219
 2239 0002 9868     		ldr	r0, [r3, #8]
 2240              		.loc 1 1888 12 view .LVU530
 2241 0004 00F44000 		and	r0, r0, #12582912
 2242              	.LVL122:
1889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
1891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_TEMPL)
 2243              		.loc 1 1891 3 is_stmt 1 view .LVU531
 2244              		.loc 1 1891 6 is_stmt 0 view .LVU532
 2245 0008 B0F5800F 		cmp	r0, #4194304
 2246 000c 03D0     		beq	.L212
1892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
1894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
1896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_TEMPH)
 2247              		.loc 1 1896 8 is_stmt 1 view .LVU533
1897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
1899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
1901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 2248              		.loc 1 1903 15 is_stmt 0 view .LVU534
 2249 000e B0F5000F 		cmp	r0, #8388608
 2250 0012 18BF     		it	ne
 2251 0014 0020     		movne	r0, #0
 2252              	.LVL123:
ARM GAS  /tmp/ccklhD6J.s 			page 96


 2253              	.L212:
1904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
1907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2254              		.loc 1 1907 1 view .LVU535
 2255 0016 7047     		bx	lr
 2256              	.L220:
 2257              		.align	2
 2258              	.L219:
 2259 0018 00480258 		.word	1476544512
 2260              		.cfi_endproc
 2261              	.LFE367:
 2263              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 2264              		.align	1
 2265              		.p2align 2,,3
 2266              		.global	HAL_PWREx_GetVBATLevel
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu fpv5-d16
 2272              	HAL_PWREx_GetVBATLevel:
 2273              	.LFB368:
1908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
1911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel (void)
1915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2274              		.loc 1 1915 1 is_stmt 1 view -0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 0
 2277              		@ frame_needed = 0, uses_anonymous_args = 0
 2278              		@ link register save eliminated.
1916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel, regValue;
 2279              		.loc 1 1916 3 view .LVU537
1917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
1919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 2280              		.loc 1 1919 3 view .LVU538
 2281              		.loc 1 1919 14 is_stmt 0 view .LVU539
 2282 0000 054B     		ldr	r3, .L228
 2283 0002 9868     		ldr	r0, [r3, #8]
 2284              		.loc 1 1919 12 view .LVU540
 2285 0004 00F44010 		and	r0, r0, #3145728
 2286              	.LVL124:
1920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
1922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_VBATL)
 2287              		.loc 1 1922 3 is_stmt 1 view .LVU541
 2288              		.loc 1 1922 6 is_stmt 0 view .LVU542
 2289 0008 B0F5801F 		cmp	r0, #1048576
 2290 000c 03D0     		beq	.L221
1923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
ARM GAS  /tmp/ccklhD6J.s 			page 97


1925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
1927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_VBATH)
 2291              		.loc 1 1927 8 is_stmt 1 view .LVU543
1928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
1930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
1932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 2292              		.loc 1 1934 15 is_stmt 0 view .LVU544
 2293 000e B0F5001F 		cmp	r0, #2097152
 2294 0012 18BF     		it	ne
 2295 0014 0020     		movne	r0, #0
 2296              	.LVL125:
 2297              	.L221:
1935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
1938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2298              		.loc 1 1938 1 view .LVU545
 2299 0016 7047     		bx	lr
 2300              	.L229:
 2301              		.align	2
 2302              	.L228:
 2303 0018 00480258 		.word	1476544512
 2304              		.cfi_endproc
 2305              	.LFE368:
 2307              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 2308              		.align	1
 2309              		.p2align 2,,3
 2310              		.global	HAL_PWREx_ConfigAVD
 2311              		.syntax unified
 2312              		.thumb
 2313              		.thumb_func
 2314              		.fpu fpv5-d16
 2316              	HAL_PWREx_ConfigAVD:
 2317              	.LVL126:
 2318              	.LFB369:
1939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CSR1_MMCVDO)
1941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the VDDMMC voltage level.
1943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The VDDMMC voltage level.
1944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** PWREx_MMC_VoltageLevel HAL_PWREx_GetMMCVoltage (void)
1946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   PWREx_MMC_VoltageLevel mmc_voltage;
1948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check voltage detector output on VDDMMC value */
1950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_MMCVDO_Msk) == 0U)
1951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_BELOW_1V2;
1953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/ccklhD6J.s 			page 98


1956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_EQUAL_ABOVE_1V2;
1957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return mmc_voltage;
1960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CSR1_MMCVDO) */
1962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the event mode and the voltage threshold detected by the
1965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Analog Voltage Detector (AVD).
1966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD : Pointer to an PWREx_AVDTypeDef structure that contains
1967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      the configuration information for the AVD.
1968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
1969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         more details about the voltage threshold corresponding to each
1970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         detection level.
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx through PWR_Exported_Macro provided by this
1973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         driver. All combination are allowed: wake up only Cortex-M7, wake up
1974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
1975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2319              		.loc 1 1978 1 is_stmt 1 view -0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 0
 2322              		@ frame_needed = 0, uses_anonymous_args = 0
 2323              		@ link register save eliminated.
1979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
 2324              		.loc 1 1980 3 view .LVU547
1981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));
 2325              		.loc 1 1981 3 view .LVU548
1982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 2326              		.loc 1 1984 3 view .LVU549
 2327 0000 1149     		ldr	r1, .L240
1985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
1989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT ();
1990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
1991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 2328              		.loc 1 1992 3 is_stmt 0 view .LVU550
 2329 0002 4FF0B043 		mov	r3, #1476395008
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2330              		.loc 1 1984 3 view .LVU551
 2331 0006 0A68     		ldr	r2, [r1]
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 2332              		.loc 1 1978 1 view .LVU552
 2333 0008 10B4     		push	{r4}
 2334              	.LCFI11:
 2335              		.cfi_def_cfa_offset 4
 2336              		.cfi_offset 4, -4
ARM GAS  /tmp/ccklhD6J.s 			page 99


1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2337              		.loc 1 1984 3 view .LVU553
 2338 000a 22F4C022 		bic	r2, r2, #393216
 2339 000e 0468     		ldr	r4, [r0]
 2340 0010 2243     		orrs	r2, r2, r4
 2341 0012 0A60     		str	r2, [r1]
 2342              		.loc 1 1992 3 is_stmt 1 view .LVU554
 2343 0014 1A68     		ldr	r2, [r3]
 2344 0016 22F48032 		bic	r2, r2, #65536
 2345 001a 1A60     		str	r2, [r3]
1993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 2346              		.loc 1 1993 3 view .LVU555
 2347 001c 5A68     		ldr	r2, [r3, #4]
 2348 001e 22F48032 		bic	r2, r2, #65536
 2349 0022 5A60     		str	r2, [r3, #4]
1994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
1998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT ();
2000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
2003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
2004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
2006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
2008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Rising edge configuration */
2010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 2350              		.loc 1 2010 3 view .LVU556
 2351              		.loc 1 2010 18 is_stmt 0 view .LVU557
 2352 0024 4268     		ldr	r2, [r0, #4]
 2353              		.loc 1 2010 6 view .LVU558
 2354 0026 D107     		lsls	r1, r2, #31
 2355 0028 03D5     		bpl	.L231
2011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 2356              		.loc 1 2012 5 is_stmt 1 view .LVU559
 2357 002a 1968     		ldr	r1, [r3]
 2358 002c 41F48031 		orr	r1, r1, #65536
 2359 0030 1960     		str	r1, [r3]
 2360              	.L231:
2013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Falling edge configuration */
2016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 2361              		.loc 1 2016 3 view .LVU560
 2362              		.loc 1 2016 6 is_stmt 0 view .LVU561
 2363 0032 9307     		lsls	r3, r2, #30
 2364 0034 05D5     		bpl	.L230
2017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 2365              		.loc 1 2018 5 is_stmt 1 view .LVU562
 2366 0036 4FF0B042 		mov	r2, #1476395008
ARM GAS  /tmp/ccklhD6J.s 			page 100


 2367 003a 5368     		ldr	r3, [r2, #4]
 2368 003c 43F48033 		orr	r3, r3, #65536
 2369 0040 5360     		str	r3, [r2, #4]
 2370              	.L230:
2019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2371              		.loc 1 2020 1 is_stmt 0 view .LVU563
 2372 0042 5DF8044B 		ldr	r4, [sp], #4
 2373              	.LCFI12:
 2374              		.cfi_restore 4
 2375              		.cfi_def_cfa_offset 0
 2376 0046 7047     		bx	lr
 2377              	.L241:
 2378              		.align	2
 2379              	.L240:
 2380 0048 00480258 		.word	1476544512
 2381              		.cfi_endproc
 2382              	.LFE369:
 2384              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 2385              		.align	1
 2386              		.p2align 2,,3
 2387              		.global	HAL_PWREx_EnableAVD
 2388              		.syntax unified
 2389              		.thumb
 2390              		.thumb_func
 2391              		.fpu fpv5-d16
 2393              	HAL_PWREx_EnableAVD:
 2394              	.LFB370:
2021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Analog Voltage Detector (AVD).
2024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD (void)
2027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2395              		.loc 1 2027 1 is_stmt 1 view -0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              		@ link register save eliminated.
2028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
2029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2400              		.loc 1 2029 3 view .LVU565
 2401 0000 024A     		ldr	r2, .L243
 2402 0002 1368     		ldr	r3, [r2]
 2403 0004 43F48033 		orr	r3, r3, #65536
 2404 0008 1360     		str	r3, [r2]
2030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2405              		.loc 1 2030 1 is_stmt 0 view .LVU566
 2406 000a 7047     		bx	lr
 2407              	.L244:
 2408              		.align	2
 2409              	.L243:
 2410 000c 00480258 		.word	1476544512
 2411              		.cfi_endproc
 2412              	.LFE370:
 2414              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
ARM GAS  /tmp/ccklhD6J.s 			page 101


 2415              		.align	1
 2416              		.p2align 2,,3
 2417              		.global	HAL_PWREx_DisableAVD
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2421              		.fpu fpv5-d16
 2423              	HAL_PWREx_DisableAVD:
 2424              	.LFB371:
2031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Analog Voltage Detector(AVD).
2034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD (void)
2037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2425              		.loc 1 2037 1 is_stmt 1 view -0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 0
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
2038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
2039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2430              		.loc 1 2039 3 view .LVU568
 2431 0000 024A     		ldr	r2, .L246
 2432 0002 1368     		ldr	r3, [r2]
 2433 0004 23F48033 		bic	r3, r3, #65536
 2434 0008 1360     		str	r3, [r2]
2040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2435              		.loc 1 2040 1 is_stmt 0 view .LVU569
 2436 000a 7047     		bx	lr
 2437              	.L247:
 2438              		.align	2
 2439              	.L246:
 2440 000c 00480258 		.word	1476544512
 2441              		.cfi_endproc
 2442              	.LFE371:
 2444              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 2445              		.align	1
 2446              		.p2align 2,,3
 2447              		.weak	HAL_PWREx_AVDCallback
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2451              		.fpu fpv5-d16
 2453              	HAL_PWREx_AVDCallback:
 2454              	.LFB385:
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 0
 2457              		@ frame_needed = 0, uses_anonymous_args = 0
 2458              		@ link register save eliminated.
 2459 0000 7047     		bx	lr
 2460              		.cfi_endproc
 2461              	.LFE385:
 2463 0002 00BF     		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 2464              		.align	1
 2465              		.p2align 2,,3
ARM GAS  /tmp/ccklhD6J.s 			page 102


 2466              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 2467              		.syntax unified
 2468              		.thumb
 2469              		.thumb_func
 2470              		.fpu fpv5-d16
 2472              	HAL_PWREx_PVD_AVD_IRQHandler:
 2473              	.LFB372:
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
2044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
2045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
2046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler (void)
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2474              		.loc 1 2048 1 is_stmt 1 view -0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 0
 2477              		@ frame_needed = 0, uses_anonymous_args = 0
2049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
2050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 2478              		.loc 1 2050 3 view .LVU571
 2479              		.loc 1 2050 7 is_stmt 0 view .LVU572
 2480 0000 224B     		ldr	r3, .L275
 2481 0002 1B68     		ldr	r3, [r3]
 2482              		.loc 1 2050 6 view .LVU573
 2483 0004 DA06     		lsls	r2, r3, #27
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
 2484              		.loc 1 2048 1 view .LVU574
 2485 0006 10B5     		push	{r4, lr}
 2486              	.LCFI13:
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 4, -8
 2489              		.cfi_offset 14, -4
 2490              		.loc 1 2050 6 view .LVU575
 2491 0008 13D4     		bmi	.L271
 2492              	.L251:
2051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1/CD EXTI flag */
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
ARM GAS  /tmp/ccklhD6J.s 			page 103


2071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Analog Voltage Detector is enabled (AVD) */
2083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 2493              		.loc 1 2083 3 is_stmt 1 view .LVU576
 2494              		.loc 1 2083 7 is_stmt 0 view .LVU577
 2495 000a 204B     		ldr	r3, .L275
 2496 000c 1B68     		ldr	r3, [r3]
 2497              		.loc 1 2083 6 view .LVU578
 2498 000e D903     		lsls	r1, r3, #15
 2499 0010 00D4     		bmi	.L272
 2500              	.L249:
2084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1/CD flag */
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
2091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
2097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
2104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
2110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2501              		.loc 1 2114 1 view .LVU579
 2502 0012 10BD     		pop	{r4, pc}
 2503              	.L272:
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2504              		.loc 1 2086 5 is_stmt 1 view .LVU580
ARM GAS  /tmp/ccklhD6J.s 			page 104


2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2505              		.loc 1 2086 9 is_stmt 0 view .LVU581
 2506 0014 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 2507              	.LVL127:
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2508              		.loc 1 2086 8 view .LVU582
 2509 0018 0328     		cmp	r0, #3
 2510 001a 28D0     		beq	.L273
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2511              		.loc 1 2103 7 is_stmt 1 view .LVU583
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2512              		.loc 1 2103 11 is_stmt 0 view .LVU584
 2513 001c 1C4C     		ldr	r4, .L275+4
 2514 001e A368     		ldr	r3, [r4, #8]
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2515              		.loc 1 2103 10 view .LVU585
 2516 0020 DB03     		lsls	r3, r3, #15
 2517 0022 F6D5     		bpl	.L249
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2518              		.loc 1 2106 9 is_stmt 1 view .LVU586
 2519 0024 FFF7FEFF 		bl	HAL_PWREx_AVDCallback
 2520              	.LVL128:
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2521              		.loc 1 2109 9 view .LVU587
 2522 0028 A368     		ldr	r3, [r4, #8]
 2523 002a 43F48033 		orr	r3, r3, #65536
 2524 002e A360     		str	r3, [r4, #8]
 2525              		.loc 1 2114 1 is_stmt 0 view .LVU588
 2526 0030 10BD     		pop	{r4, pc}
 2527              	.L271:
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2528              		.loc 1 2053 5 is_stmt 1 view .LVU589
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2529              		.loc 1 2053 9 is_stmt 0 view .LVU590
 2530 0032 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 2531              	.LVL129:
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 2532              		.loc 1 2053 8 view .LVU591
 2533 0036 0328     		cmp	r0, #3
 2534 0038 0AD0     		beq	.L274
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2535              		.loc 1 2070 7 is_stmt 1 view .LVU592
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2536              		.loc 1 2070 11 is_stmt 0 view .LVU593
 2537 003a 154C     		ldr	r4, .L275+4
 2538 003c A368     		ldr	r3, [r4, #8]
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2539              		.loc 1 2070 10 view .LVU594
 2540 003e D803     		lsls	r0, r3, #15
 2541 0040 E3D5     		bpl	.L251
2073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2542              		.loc 1 2073 9 is_stmt 1 view .LVU595
 2543 0042 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 2544              	.LVL130:
2076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2545              		.loc 1 2076 9 view .LVU596
 2546 0046 A368     		ldr	r3, [r4, #8]
ARM GAS  /tmp/ccklhD6J.s 			page 105


 2547 0048 43F48033 		orr	r3, r3, #65536
 2548 004c A360     		str	r3, [r4, #8]
 2549 004e DCE7     		b	.L251
 2550              	.L274:
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2551              		.loc 1 2057 7 view .LVU597
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2552              		.loc 1 2057 11 is_stmt 0 view .LVU598
 2553 0050 4FF0B044 		mov	r4, #1476395008
 2554 0054 D4F88830 		ldr	r3, [r4, #136]
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2555              		.loc 1 2057 10 view .LVU599
 2556 0058 DB03     		lsls	r3, r3, #15
 2557 005a D6D5     		bpl	.L251
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2558              		.loc 1 2060 9 is_stmt 1 view .LVU600
 2559 005c FFF7FEFF 		bl	HAL_PWR_PVDCallback
 2560              	.LVL131:
2063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2561              		.loc 1 2063 9 view .LVU601
 2562 0060 D4F88830 		ldr	r3, [r4, #136]
 2563 0064 43F48033 		orr	r3, r3, #65536
 2564 0068 C4F88830 		str	r3, [r4, #136]
 2565 006c CDE7     		b	.L251
 2566              	.L273:
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2567              		.loc 1 2090 7 view .LVU602
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2568              		.loc 1 2090 11 is_stmt 0 view .LVU603
 2569 006e 4FF0B044 		mov	r4, #1476395008
 2570 0072 D4F88830 		ldr	r3, [r4, #136]
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2571              		.loc 1 2090 10 view .LVU604
 2572 0076 DA03     		lsls	r2, r3, #15
 2573 0078 CBD5     		bpl	.L249
2093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2574              		.loc 1 2093 9 is_stmt 1 view .LVU605
 2575 007a FFF7FEFF 		bl	HAL_PWREx_AVDCallback
 2576              	.LVL132:
2096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2577              		.loc 1 2096 9 view .LVU606
 2578 007e D4F88830 		ldr	r3, [r4, #136]
 2579 0082 43F48033 		orr	r3, r3, #65536
 2580 0086 C4F88830 		str	r3, [r4, #136]
 2581              		.loc 1 2114 1 is_stmt 0 view .LVU607
 2582 008a 10BD     		pop	{r4, pc}
 2583              	.L276:
 2584              		.align	2
 2585              	.L275:
 2586 008c 00480258 		.word	1476544512
 2587 0090 C0000058 		.word	1476395200
 2588              		.cfi_endproc
 2589              	.LFE372:
 2591              		.text
 2592              	.Letext0:
 2593              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2594              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
ARM GAS  /tmp/ccklhD6J.s 			page 106


 2595              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2596              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 2597              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2598              		.file 8 "/usr/include/newlib/sys/_types.h"
 2599              		.file 9 "/usr/include/newlib/sys/reent.h"
 2600              		.file 10 "/usr/include/newlib/sys/lock.h"
 2601              		.file 11 "/usr/include/newlib/math.h"
 2602              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2603              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 2604              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
 2605              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 2606              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 2607              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
 2608              		.file 18 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
ARM GAS  /tmp/ccklhD6J.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_pwr_ex.c
     /tmp/ccklhD6J.s:17     .text.HAL_PWREx_ConfigSupply:0000000000000000 $t
     /tmp/ccklhD6J.s:26     .text.HAL_PWREx_ConfigSupply:0000000000000000 HAL_PWREx_ConfigSupply
     /tmp/ccklhD6J.s:161    .text.HAL_PWREx_ConfigSupply:0000000000000074 $d
     /tmp/ccklhD6J.s:166    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 $t
     /tmp/ccklhD6J.s:174    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 HAL_PWREx_GetSupplyConfig
     /tmp/ccklhD6J.s:191    .text.HAL_PWREx_GetSupplyConfig:000000000000000c $d
     /tmp/ccklhD6J.s:196    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/ccklhD6J.s:204    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccklhD6J.s:405    .text.HAL_PWREx_ControlVoltageScaling:00000000000000b8 $d
     /tmp/ccklhD6J.s:411    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/ccklhD6J.s:419    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/ccklhD6J.s:436    .text.HAL_PWREx_GetVoltageRange:000000000000000c $d
     /tmp/ccklhD6J.s:441    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 $t
     /tmp/ccklhD6J.s:449    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/ccklhD6J.s:478    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000014 $d
     /tmp/ccklhD6J.s:483    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 $t
     /tmp/ccklhD6J.s:491    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/ccklhD6J.s:508    .text.HAL_PWREx_GetStopModeVoltageRange:000000000000000c $d
     /tmp/ccklhD6J.s:513    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 $t
     /tmp/ccklhD6J.s:521    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 HAL_PWREx_EnterSTOPMode
     /tmp/ccklhD6J.s:676    .text.HAL_PWREx_EnterSTOPMode:0000000000000080 $d
     /tmp/ccklhD6J.s:682    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 $t
     /tmp/ccklhD6J.s:690    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 HAL_PWREx_ClearPendingEvent
     /tmp/ccklhD6J.s:730    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccklhD6J.s:738    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 HAL_PWREx_EnterSTANDBYMode
     /tmp/ccklhD6J.s:843    .text.HAL_PWREx_EnterSTANDBYMode:000000000000006c $d
     /tmp/ccklhD6J.s:849    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 $t
     /tmp/ccklhD6J.s:857    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 HAL_PWREx_ConfigD3Domain
     /tmp/ccklhD6J.s:879    .text.HAL_PWREx_ConfigD3Domain:0000000000000010 $d
     /tmp/ccklhD6J.s:884    .text.HAL_PWREx_ClearDomainFlags:0000000000000000 $t
     /tmp/ccklhD6J.s:892    .text.HAL_PWREx_ClearDomainFlags:0000000000000000 HAL_PWREx_ClearDomainFlags
     /tmp/ccklhD6J.s:936    .text.HAL_PWREx_ClearDomainFlags:0000000000000034 $d
     /tmp/ccklhD6J.s:941    .text.HAL_PWREx_HoldCore:0000000000000000 $t
     /tmp/ccklhD6J.s:949    .text.HAL_PWREx_HoldCore:0000000000000000 HAL_PWREx_HoldCore
     /tmp/ccklhD6J.s:1006   .text.HAL_PWREx_HoldCore:0000000000000034 $d
     /tmp/ccklhD6J.s:1011   .text.HAL_PWREx_ReleaseCore:0000000000000000 $t
     /tmp/ccklhD6J.s:1019   .text.HAL_PWREx_ReleaseCore:0000000000000000 HAL_PWREx_ReleaseCore
     /tmp/ccklhD6J.s:1050   .text.HAL_PWREx_ReleaseCore:000000000000001c $d
     /tmp/ccklhD6J.s:1055   .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/ccklhD6J.s:1063   .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccklhD6J.s:1080   .text.HAL_PWREx_EnableFlashPowerDown:000000000000000c $d
     /tmp/ccklhD6J.s:1085   .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/ccklhD6J.s:1093   .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/ccklhD6J.s:1110   .text.HAL_PWREx_DisableFlashPowerDown:000000000000000c $d
     /tmp/ccklhD6J.s:1115   .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccklhD6J.s:1123   .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 HAL_PWREx_EnableWakeUpPin
     /tmp/ccklhD6J.s:1363   .text.HAL_PWREx_EnableWakeUpPin:0000000000000084 $d
     /tmp/ccklhD6J.s:1370   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccklhD6J.s:1378   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 HAL_PWREx_DisableWakeUpPin
     /tmp/ccklhD6J.s:1399   .text.HAL_PWREx_DisableWakeUpPin:000000000000000c $d
     /tmp/ccklhD6J.s:1404   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 $t
     /tmp/ccklhD6J.s:1412   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 HAL_PWREx_GetWakeupFlag
     /tmp/ccklhD6J.s:1433   .text.HAL_PWREx_GetWakeupFlag:0000000000000008 $d
     /tmp/ccklhD6J.s:1438   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 $t
     /tmp/ccklhD6J.s:1446   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 HAL_PWREx_ClearWakeupFlag
ARM GAS  /tmp/ccklhD6J.s 			page 108


     /tmp/ccklhD6J.s:1475   .text.HAL_PWREx_ClearWakeupFlag:0000000000000014 $d
     /tmp/ccklhD6J.s:1480   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1488   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 HAL_PWREx_WKUP1_Callback
     /tmp/ccklhD6J.s:1501   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1509   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 HAL_PWREx_WKUP2_Callback
     /tmp/ccklhD6J.s:1520   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1528   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 HAL_PWREx_WKUP3_Callback
     /tmp/ccklhD6J.s:1539   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1547   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 HAL_PWREx_WKUP4_Callback
     /tmp/ccklhD6J.s:1558   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1566   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 HAL_PWREx_WKUP5_Callback
     /tmp/ccklhD6J.s:1577   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 $t
     /tmp/ccklhD6J.s:1585   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 HAL_PWREx_WKUP6_Callback
     /tmp/ccklhD6J.s:1596   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 $t
     /tmp/ccklhD6J.s:1604   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
     /tmp/ccklhD6J.s:1710   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000078 $d
     /tmp/ccklhD6J.s:1715   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/ccklhD6J.s:1723   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/ccklhD6J.s:1789   .text.HAL_PWREx_EnableBkUpReg:0000000000000030 $d
     /tmp/ccklhD6J.s:1794   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/ccklhD6J.s:1802   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/ccklhD6J.s:1868   .text.HAL_PWREx_DisableBkUpReg:0000000000000034 $d
     /tmp/ccklhD6J.s:1873   .text.HAL_PWREx_EnableUSBReg:0000000000000000 $t
     /tmp/ccklhD6J.s:1881   .text.HAL_PWREx_EnableUSBReg:0000000000000000 HAL_PWREx_EnableUSBReg
     /tmp/ccklhD6J.s:1947   .text.HAL_PWREx_EnableUSBReg:0000000000000030 $d
     /tmp/ccklhD6J.s:1952   .text.HAL_PWREx_DisableUSBReg:0000000000000000 $t
     /tmp/ccklhD6J.s:1960   .text.HAL_PWREx_DisableUSBReg:0000000000000000 HAL_PWREx_DisableUSBReg
     /tmp/ccklhD6J.s:2026   .text.HAL_PWREx_DisableUSBReg:0000000000000034 $d
     /tmp/ccklhD6J.s:2031   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccklhD6J.s:2039   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 HAL_PWREx_EnableUSBVoltageDetector
     /tmp/ccklhD6J.s:2056   .text.HAL_PWREx_EnableUSBVoltageDetector:000000000000000c $d
     /tmp/ccklhD6J.s:2061   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 $t
     /tmp/ccklhD6J.s:2069   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 HAL_PWREx_DisableUSBVoltageDetector
     /tmp/ccklhD6J.s:2086   .text.HAL_PWREx_DisableUSBVoltageDetector:000000000000000c $d
     /tmp/ccklhD6J.s:2091   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/ccklhD6J.s:2099   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/ccklhD6J.s:2125   .text.HAL_PWREx_EnableBatteryCharging:0000000000000018 $d
     /tmp/ccklhD6J.s:2130   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/ccklhD6J.s:2138   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/ccklhD6J.s:2155   .text.HAL_PWREx_DisableBatteryCharging:000000000000000c $d
     /tmp/ccklhD6J.s:2160   .text.HAL_PWREx_EnableMonitoring:0000000000000000 $t
     /tmp/ccklhD6J.s:2168   .text.HAL_PWREx_EnableMonitoring:0000000000000000 HAL_PWREx_EnableMonitoring
     /tmp/ccklhD6J.s:2185   .text.HAL_PWREx_EnableMonitoring:000000000000000c $d
     /tmp/ccklhD6J.s:2190   .text.HAL_PWREx_DisableMonitoring:0000000000000000 $t
     /tmp/ccklhD6J.s:2198   .text.HAL_PWREx_DisableMonitoring:0000000000000000 HAL_PWREx_DisableMonitoring
     /tmp/ccklhD6J.s:2215   .text.HAL_PWREx_DisableMonitoring:000000000000000c $d
     /tmp/ccklhD6J.s:2220   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 $t
     /tmp/ccklhD6J.s:2228   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 HAL_PWREx_GetTemperatureLevel
     /tmp/ccklhD6J.s:2259   .text.HAL_PWREx_GetTemperatureLevel:0000000000000018 $d
     /tmp/ccklhD6J.s:2264   .text.HAL_PWREx_GetVBATLevel:0000000000000000 $t
     /tmp/ccklhD6J.s:2272   .text.HAL_PWREx_GetVBATLevel:0000000000000000 HAL_PWREx_GetVBATLevel
     /tmp/ccklhD6J.s:2303   .text.HAL_PWREx_GetVBATLevel:0000000000000018 $d
     /tmp/ccklhD6J.s:2308   .text.HAL_PWREx_ConfigAVD:0000000000000000 $t
     /tmp/ccklhD6J.s:2316   .text.HAL_PWREx_ConfigAVD:0000000000000000 HAL_PWREx_ConfigAVD
     /tmp/ccklhD6J.s:2380   .text.HAL_PWREx_ConfigAVD:0000000000000048 $d
     /tmp/ccklhD6J.s:2385   .text.HAL_PWREx_EnableAVD:0000000000000000 $t
     /tmp/ccklhD6J.s:2393   .text.HAL_PWREx_EnableAVD:0000000000000000 HAL_PWREx_EnableAVD
ARM GAS  /tmp/ccklhD6J.s 			page 109


     /tmp/ccklhD6J.s:2410   .text.HAL_PWREx_EnableAVD:000000000000000c $d
     /tmp/ccklhD6J.s:2415   .text.HAL_PWREx_DisableAVD:0000000000000000 $t
     /tmp/ccklhD6J.s:2423   .text.HAL_PWREx_DisableAVD:0000000000000000 HAL_PWREx_DisableAVD
     /tmp/ccklhD6J.s:2440   .text.HAL_PWREx_DisableAVD:000000000000000c $d
     /tmp/ccklhD6J.s:2445   .text.HAL_PWREx_AVDCallback:0000000000000000 $t
     /tmp/ccklhD6J.s:2453   .text.HAL_PWREx_AVDCallback:0000000000000000 HAL_PWREx_AVDCallback
     /tmp/ccklhD6J.s:2464   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 $t
     /tmp/ccklhD6J.s:2472   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 HAL_PWREx_PVD_AVD_IRQHandler
     /tmp/ccklhD6J.s:2586   .text.HAL_PWREx_PVD_AVD_IRQHandler:000000000000008c $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GetCurrentCPUID
HAL_PWR_PVDCallback
