ARM GAS  /tmp/cc1iTjg2.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_rtc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_RTC_Init,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_RTC_Init
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_RTC_Init:
  26              	.LFB331:
  27              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @file    stm32h7xx_hal_rtc.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Initialization/de-initialization
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Tampers configuration
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Backup Data Registers configuration
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @verbatim
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        to their reset values.
ARM GAS  /tmp/cc1iTjg2.s 			page 2


  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        A backup domain reset is generated when one of the following events occurs:
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        accesses.
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Call the function HAL_RCCEx_PeriphCLKConfig with RCC_PERIPHCLK_RTC for
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSEdiv32)
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Time and Date configuration ***
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===================================
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Alarm configuration ***
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===========================
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        function.
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Standby low power modes.
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        or the RTC wakeup events.
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        is LSE or LSI.
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Callback registration ***
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   =============================================
ARM GAS  /tmp/cc1iTjg2.s 			page 3


  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions. This is the recommended configuration
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in order to optimize memory/code consumption footprint/performances.
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and a pointer to the user callback function.
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   weak function.
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and the Callback ID.
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function allows to reset following callbacks:
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (not registered beforehand).
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions.
ARM GAS  /tmp/cc1iTjg2.s 			page 4


 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    @endverbatim
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @attention
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #include "stm32h7xx_hal.h"
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
ARM GAS  /tmp/cc1iTjg2.s 			page 5


 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC peripheral
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  28              		.loc 1 228 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
  44              		.loc 1 229 21
  45 0008 0123     		movs	r3, #1
  46 000a FB73     		strb	r3, [r7, #15]
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
  47              		.loc 1 232 5
  48 000c 7B68     		ldr	r3, [r7, #4]
  49 000e 002B     		cmp	r3, #0
  50 0010 67D0     		beq	.L2
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
ARM GAS  /tmp/cc1iTjg2.s 			page 6


 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPALRM_PU)
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPALRM_PU */
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspInitCallback == NULL)
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Init the low level hardware */
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback(hrtc);
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
ARM GAS  /tmp/cc1iTjg2.s 			page 7


 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
  51              		.loc 1 297 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 93F82130 		ldrb	r3, [r3, #33]
  54 0018 DBB2     		uxtb	r3, r3
  55              		.loc 1 297 7
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L3
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
  58              		.loc 1 300 18
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F82020 		strb	r2, [r3, #32]
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Initialize RTC MSP */
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspInit(hrtc);
  62              		.loc 1 303 7
  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_RTC_MspInit
  65              	.L3:
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
  66              		.loc 1 308 17
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 0222     		movs	r2, #2
  69 0030 83F82120 		strb	r2, [r3, #33]
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  70              		.loc 1 311 5
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 CA22     		movs	r2, #202
  74 003a 5A62     		str	r2, [r3, #36]
  75 003c 7B68     		ldr	r3, [r7, #4]
  76 003e 1B68     		ldr	r3, [r3]
  77 0040 5322     		movs	r2, #83
  78 0042 5A62     		str	r2, [r3, #36]
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    /* Enter Initialization mode */
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
  79              		.loc 1 314 14
  80 0044 7868     		ldr	r0, [r7, #4]
  81 0046 FFF7FEFF 		bl	RTC_EnterInitMode
  82 004a 0346     		mov	r3, r0
  83 004c FB73     		strb	r3, [r7, #15]
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
  84              		.loc 1 315 8
  85 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/cc1iTjg2.s 			page 8


  86 0050 002B     		cmp	r3, #0
  87 0052 3BD1     		bne	.L4
 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPOE)
 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* RTC_CR_TAMPOE */
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL and POL Bits */
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
  88              		.loc 1 322 11
  89 0054 7B68     		ldr	r3, [r7, #4]
  90 0056 1B68     		ldr	r3, [r3]
  91              		.loc 1 322 26
  92 0058 9968     		ldr	r1, [r3, #8]
  93              		.loc 1 322 11
  94 005a 7B68     		ldr	r3, [r7, #4]
  95 005c 1A68     		ldr	r2, [r3]
  96              		.loc 1 322 26
  97 005e 234B     		ldr	r3, .L6
  98 0060 0B40     		ands	r3, r3, r1
  99 0062 9360     		str	r3, [r2, #8]
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPOE */
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_CR register */
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity)
 100              		.loc 1 326 11
 101 0064 7B68     		ldr	r3, [r7, #4]
 102 0066 1B68     		ldr	r3, [r3]
 103              		.loc 1 326 26
 104 0068 9968     		ldr	r1, [r3, #8]
 105              		.loc 1 326 40
 106 006a 7B68     		ldr	r3, [r7, #4]
 107 006c 5A68     		ldr	r2, [r3, #4]
 108              		.loc 1 326 64
 109 006e 7B68     		ldr	r3, [r7, #4]
 110 0070 1B69     		ldr	r3, [r3, #16]
 111              		.loc 1 326 52
 112 0072 1A43     		orrs	r2, r2, r3
 113              		.loc 1 326 84
 114 0074 7B68     		ldr	r3, [r7, #4]
 115 0076 9B69     		ldr	r3, [r3, #24]
 116              		.loc 1 326 72
 117 0078 1A43     		orrs	r2, r2, r3
 118              		.loc 1 326 11
 119 007a 7B68     		ldr	r3, [r7, #4]
 120 007c 1B68     		ldr	r3, [r3]
 121              		.loc 1 326 26
 122 007e 0A43     		orrs	r2, r2, r1
 123 0080 9A60     		str	r2, [r3, #8]
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Configure the RTC PRER */
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.Synch
 124              		.loc 1 329 41
 125 0082 7B68     		ldr	r3, [r7, #4]
 126 0084 9B68     		ldr	r3, [r3, #8]
 127              		.loc 1 329 55
 128 0086 1904     		lsls	r1, r3, #16
ARM GAS  /tmp/cc1iTjg2.s 			page 9


 129              		.loc 1 329 107
 130 0088 7B68     		ldr	r3, [r7, #4]
 131 008a DA68     		ldr	r2, [r3, #12]
 132              		.loc 1 329 11
 133 008c 7B68     		ldr	r3, [r7, #4]
 134 008e 1B68     		ldr	r3, [r3]
 135              		.loc 1 329 81
 136 0090 0A43     		orrs	r2, r2, r1
 137              		.loc 1 329 28
 138 0092 1A61     		str	r2, [r3, #16]
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit Initialization mode */
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 139              		.loc 1 332 16
 140 0094 7868     		ldr	r0, [r7, #4]
 141 0096 FFF7FEFF 		bl	RTC_ExitInitMode
 142 009a 0346     		mov	r3, r0
 143 009c FB73     		strb	r3, [r7, #15]
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(status == HAL_OK)
 144              		.loc 1 334 9
 145 009e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 146 00a0 002B     		cmp	r3, #0
 147 00a2 13D1     		bne	.L4
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutR
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 148              		.loc 1 342 13
 149 00a4 7B68     		ldr	r3, [r7, #4]
 150 00a6 1B68     		ldr	r3, [r3]
 151              		.loc 1 342 28
 152 00a8 DA6C     		ldr	r2, [r3, #76]
 153              		.loc 1 342 13
 154 00aa 7B68     		ldr	r3, [r7, #4]
 155 00ac 1B68     		ldr	r3, [r3]
 156              		.loc 1 342 28
 157 00ae 22F00302 		bic	r2, r2, #3
 158 00b2 DA64     		str	r2, [r3, #76]
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 159              		.loc 1 343 13
 160 00b4 7B68     		ldr	r3, [r7, #4]
 161 00b6 1B68     		ldr	r3, [r3]
 162              		.loc 1 343 28
 163 00b8 D96C     		ldr	r1, [r3, #76]
 164              		.loc 1 343 42
 165 00ba 7B68     		ldr	r3, [r7, #4]
 166 00bc DA69     		ldr	r2, [r3, #28]
 167              		.loc 1 343 66
 168 00be 7B68     		ldr	r3, [r7, #4]
 169 00c0 5B69     		ldr	r3, [r3, #20]
 170              		.loc 1 343 54
 171 00c2 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cc1iTjg2.s 			page 10


 172              		.loc 1 343 13
 173 00c4 7B68     		ldr	r3, [r7, #4]
 174 00c6 1B68     		ldr	r3, [r3]
 175              		.loc 1 343 28
 176 00c8 0A43     		orrs	r2, r2, r1
 177 00ca DA64     		str	r2, [r3, #76]
 178              	.L4:
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 179              		.loc 1 348 5
 180 00cc 7B68     		ldr	r3, [r7, #4]
 181 00ce 1B68     		ldr	r3, [r3]
 182 00d0 FF22     		movs	r2, #255
 183 00d2 5A62     		str	r2, [r3, #36]
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 184              		.loc 1 349 8
 185 00d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 186 00d6 002B     		cmp	r3, #0
 187 00d8 03D1     		bne	.L2
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_READY;
 188              		.loc 1 352 19
 189 00da 7B68     		ldr	r3, [r7, #4]
 190 00dc 0122     		movs	r2, #1
 191 00de 83F82120 		strb	r2, [r3, #33]
 192              	.L2:
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 193              		.loc 1 357 10
 194 00e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 195              		.loc 1 358 1
 196 00e4 1846     		mov	r0, r3
 197 00e6 1037     		adds	r7, r7, #16
 198              	.LCFI3:
 199              		.cfi_def_cfa_offset 8
 200 00e8 BD46     		mov	sp, r7
 201              	.LCFI4:
 202              		.cfi_def_cfa_register 13
 203              		@ sp needed
 204 00ea 80BD     		pop	{r7, pc}
 205              	.L7:
 206              		.align	2
 207              	.L6:
 208 00ec BFFF8FFF 		.word	-7340097
 209              		.cfi_endproc
 210              	.LFE331:
 212              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 213              		.align	1
 214              		.global	HAL_RTC_DeInit
ARM GAS  /tmp/cc1iTjg2.s 			page 11


 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv5-d16
 220              	HAL_RTC_DeInit:
 221              	.LFB332:
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 222              		.loc 1 367 1
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 16
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0002 84B0     		sub	sp, sp, #16
 232              	.LCFI6:
 233              		.cfi_def_cfa_offset 24
 234 0004 00AF     		add	r7, sp, #0
 235              	.LCFI7:
 236              		.cfi_def_cfa_register 7
 237 0006 7860     		str	r0, [r7, #4]
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 238              		.loc 1 368 21
 239 0008 0123     		movs	r3, #1
 240 000a FB73     		strb	r3, [r7, #15]
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 241              		.loc 1 372 5
 242 000c 7B68     		ldr	r3, [r7, #4]
 243 000e 002B     		cmp	r3, #0
 244 0010 00F08A80 		beq	.L9
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 245              		.loc 1 378 17
 246 0014 7B68     		ldr	r3, [r7, #4]
 247 0016 0222     		movs	r2, #2
 248 0018 83F82120 		strb	r2, [r3, #33]
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 249              		.loc 1 381 5
ARM GAS  /tmp/cc1iTjg2.s 			page 12


 250 001c 7B68     		ldr	r3, [r7, #4]
 251 001e 1B68     		ldr	r3, [r3]
 252 0020 CA22     		movs	r2, #202
 253 0022 5A62     		str	r2, [r3, #36]
 254 0024 7B68     		ldr	r3, [r7, #4]
 255 0026 1B68     		ldr	r3, [r3]
 256 0028 5322     		movs	r2, #83
 257 002a 5A62     		str	r2, [r3, #36]
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enter Initialization mode */
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 258              		.loc 1 383 14
 259 002c 7868     		ldr	r0, [r7, #4]
 260 002e FFF7FEFF 		bl	RTC_EnterInitMode
 261 0032 0346     		mov	r3, r0
 262 0034 FB73     		strb	r3, [r7, #15]
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 263              		.loc 1 384 8
 264 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 265 0038 002B     		cmp	r3, #0
 266 003a 63D1     		bne	.L10
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TR, DR and CR registers */
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TR = 0x00000000U;
 267              		.loc 1 387 11
 268 003c 7B68     		ldr	r3, [r7, #4]
 269 003e 1B68     		ldr	r3, [r3]
 270              		.loc 1 387 26
 271 0040 0022     		movs	r2, #0
 272 0042 1A60     		str	r2, [r3]
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 273              		.loc 1 388 11
 274 0044 7B68     		ldr	r3, [r7, #4]
 275 0046 1B68     		ldr	r3, [r3]
 276              		.loc 1 388 26
 277 0048 42F20112 		movw	r2, #8449
 278 004c 5A60     		str	r2, [r3, #4]
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] */
 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= RTC_CR_WUCKSEL;
 279              		.loc 1 390 11
 280 004e 7B68     		ldr	r3, [r7, #4]
 281 0050 1B68     		ldr	r3, [r3]
 282              		.loc 1 390 26
 283 0052 9A68     		ldr	r2, [r3, #8]
 284              		.loc 1 390 11
 285 0054 7B68     		ldr	r3, [r7, #4]
 286 0056 1B68     		ldr	r3, [r3]
 287              		.loc 1 390 26
 288 0058 02F00702 		and	r2, r2, #7
 289 005c 9A60     		str	r2, [r3, #8]
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tickstart = HAL_GetTick();
 290              		.loc 1 392 19
 291 005e FFF7FEFF 		bl	HAL_GetTick
 292 0062 B860     		str	r0, [r7, #8]
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Wait till WUTWF flag is set and if Time out is reached exit */
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_WUTWF)
ARM GAS  /tmp/cc1iTjg2.s 			page 13


 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       while (((hrtc->Instance->ICSR) & RTC_ICSR_WUTWF) == 0U)
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_WUTWF */
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_WUTWF)
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         while (((hrtc->Instance->ISR)  & RTC_ISR_WUTWF)  == 0U)
 293              		.loc 1 399 15
 294 0064 0FE0     		b	.L11
 295              	.L12:
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 296              		.loc 1 402 15
 297 0066 FFF7FEFF 		bl	HAL_GetTick
 298 006a 0246     		mov	r2, r0
 299              		.loc 1 402 29
 300 006c BB68     		ldr	r3, [r7, #8]
 301 006e D31A     		subs	r3, r2, r3
 302              		.loc 1 402 13
 303 0070 B3F57A7F 		cmp	r3, #1000
 304 0074 07D9     		bls	.L11
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           {
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             /* Enable the write protection for RTC registers */
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 305              		.loc 1 405 13
 306 0076 7B68     		ldr	r3, [r7, #4]
 307 0078 1B68     		ldr	r3, [r3]
 308 007a FF22     		movs	r2, #255
 309 007c 5A62     		str	r2, [r3, #36]
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             /* Set RTC state */
 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             hrtc->State = HAL_RTC_STATE_TIMEOUT;
 310              		.loc 1 408 25
 311 007e 7B68     		ldr	r3, [r7, #4]
 312 0080 0322     		movs	r2, #3
 313 0082 83F82120 		strb	r2, [r3, #33]
 314              	.L11:
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 315              		.loc 1 399 22
 316 0086 7B68     		ldr	r3, [r7, #4]
 317 0088 1B68     		ldr	r3, [r3]
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 318              		.loc 1 399 32
 319 008a DB68     		ldr	r3, [r3, #12]
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 320              		.loc 1 399 40
 321 008c 03F00403 		and	r3, r3, #4
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 322              		.loc 1 399 15
 323 0090 002B     		cmp	r3, #0
 324 0092 E8D0     		beq	.L12
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           }
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit initialization mode */
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 325              		.loc 1 414 16
 326 0094 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/cc1iTjg2.s 			page 14


 327 0096 FFF7FEFF 		bl	RTC_ExitInitMode
 328 009a 0346     		mov	r3, r0
 329 009c FB73     		strb	r3, [r7, #15]
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if (status == HAL_OK)
 330              		.loc 1 415 10
 331 009e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 332 00a0 002B     		cmp	r3, #0
 333 00a2 2FD1     		bne	.L10
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset all RTC CR register bits */
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= 0x00000000U;
 334              		.loc 1 418 13
 335 00a4 7B68     		ldr	r3, [r7, #4]
 336 00a6 1B68     		ldr	r3, [r3]
 337              		.loc 1 418 28
 338 00a8 9B68     		ldr	r3, [r3, #8]
 339              		.loc 1 418 13
 340 00aa 7B68     		ldr	r3, [r7, #4]
 341 00ac 1B68     		ldr	r3, [r3]
 342              		.loc 1 418 28
 343 00ae 0022     		movs	r2, #0
 344 00b0 9A60     		str	r2, [r3, #8]
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset other RTC registers */
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->WUTR = RTC_WUTR_WUT;
 345              		.loc 1 421 13
 346 00b2 7B68     		ldr	r3, [r7, #4]
 347 00b4 1B68     		ldr	r3, [r3]
 348              		.loc 1 421 30
 349 00b6 4FF6FF72 		movw	r2, #65535
 350 00ba 5A61     		str	r2, [r3, #20]
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 351              		.loc 1 422 13
 352 00bc 7B68     		ldr	r3, [r7, #4]
 353 00be 1B68     		ldr	r3, [r3]
 354              		.loc 1 422 30
 355 00c0 1C4A     		ldr	r2, .L14
 356 00c2 1A61     		str	r2, [r3, #16]
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMAR = 0x00000000U;
 357              		.loc 1 423 13
 358 00c4 7B68     		ldr	r3, [r7, #4]
 359 00c6 1B68     		ldr	r3, [r3]
 360              		.loc 1 423 32
 361 00c8 0022     		movs	r2, #0
 362 00ca DA61     		str	r2, [r3, #28]
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBR = 0x00000000U;
 363              		.loc 1 424 13
 364 00cc 7B68     		ldr	r3, [r7, #4]
 365 00ce 1B68     		ldr	r3, [r3]
 366              		.loc 1 424 32
 367 00d0 0022     		movs	r2, #0
 368 00d2 1A62     		str	r2, [r3, #32]
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->SHIFTR = 0x00000000U;
 369              		.loc 1 425 13
 370 00d4 7B68     		ldr	r3, [r7, #4]
 371 00d6 1B68     		ldr	r3, [r3]
 372              		.loc 1 425 32
ARM GAS  /tmp/cc1iTjg2.s 			page 15


 373 00d8 0022     		movs	r2, #0
 374 00da DA62     		str	r2, [r3, #44]
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CALR = 0x00000000U;
 375              		.loc 1 426 13
 376 00dc 7B68     		ldr	r3, [r7, #4]
 377 00de 1B68     		ldr	r3, [r3]
 378              		.loc 1 426 30
 379 00e0 0022     		movs	r2, #0
 380 00e2 DA63     		str	r2, [r3, #60]
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMASSR = 0x00000000U;
 381              		.loc 1 427 13
 382 00e4 7B68     		ldr	r3, [r7, #4]
 383 00e6 1B68     		ldr	r3, [r3]
 384              		.loc 1 427 34
 385 00e8 0022     		movs	r2, #0
 386 00ea 5A64     		str	r2, [r3, #68]
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBSSR = 0x00000000U;
 387              		.loc 1 428 13
 388 00ec 7B68     		ldr	r3, [r7, #4]
 389 00ee 1B68     		ldr	r3, [r3]
 390              		.loc 1 428 34
 391 00f0 0022     		movs	r2, #0
 392 00f2 9A64     		str	r2, [r3, #72]
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_INIT)
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset Tamper configuration register */
 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->TAMPCR = 0x00000000U;
 393              		.loc 1 432 13
 394 00f4 7B68     		ldr	r3, [r7, #4]
 395 00f6 1B68     		ldr	r3, [r3]
 396              		.loc 1 432 32
 397 00f8 0022     		movs	r2, #0
 398 00fa 1A64     		str	r2, [r3, #64]
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset Option register */
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR = 0x00000000U;
 399              		.loc 1 435 13
 400 00fc 7B68     		ldr	r3, [r7, #4]
 401 00fe 1B68     		ldr	r3, [r3]
 402              		.loc 1 435 28
 403 0100 0022     		movs	r2, #0
 404 0102 DA64     		str	r2, [r3, #76]
 405              	.L10:
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INIT */
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(status == HAL_OK)
 406              		.loc 1 440 7
 407 0104 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 408 0106 002B     		cmp	r3, #0
 409 0108 0ED1     		bne	.L9
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_TAMP1E)
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TAMP registers */
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR1 = 0xFFFF0000U;
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR2 = 0x00000000U;
ARM GAS  /tmp/cc1iTjg2.s 			page 16


 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_TAMP1E */
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 410              		.loc 1 449 7
 411 010a 7B68     		ldr	r3, [r7, #4]
 412 010c 1B68     		ldr	r3, [r3]
 413 010e FF22     		movs	r2, #255
 414 0110 5A62     		str	r2, [r3, #36]
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* DeInit the low level hardware: CLOCK, NVIC.*/
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback(hrtc);
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* De-Initialize RTC MSP */
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspDeInit(hrtc);
 415              		.loc 1 461 7
 416 0112 7868     		ldr	r0, [r7, #4]
 417 0114 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_RESET;
 418              		.loc 1 464 19
 419 0118 7B68     		ldr	r3, [r7, #4]
 420 011a 0022     		movs	r2, #0
 421 011c 83F82120 		strb	r2, [r3, #33]
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Release Lock */
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 422              		.loc 1 467 7
 423 0120 7B68     		ldr	r3, [r7, #4]
 424 0122 0022     		movs	r2, #0
 425 0124 83F82020 		strb	r2, [r3, #32]
 426              	.L9:
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 427              		.loc 1 472 10
 428 0128 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 429              		.loc 1 473 1
 430 012a 1846     		mov	r0, r3
 431 012c 1037     		adds	r7, r7, #16
 432              	.LCFI8:
 433              		.cfi_def_cfa_offset 8
 434 012e BD46     		mov	sp, r7
 435              	.LCFI9:
 436              		.cfi_def_cfa_register 13
 437              		@ sp needed
 438 0130 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc1iTjg2.s 			page 17


 439              	.L15:
 440 0132 00BF     		.align	2
 441              	.L14:
 442 0134 FF007F00 		.word	8323327
 443              		.cfi_endproc
 444              	.LFE332:
 446              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 447              		.align	1
 448              		.weak	HAL_RTC_MspInit
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv5-d16
 454              	HAL_RTC_MspInit:
 455              	.LFB333:
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID
 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(pCallback == NULL)
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
ARM GAS  /tmp/cc1iTjg2.s 			page 18


 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = pCallback;
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  pCallback;
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  pCallback;
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  pCallback;
 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  pCallback;
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  pCallback;
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
ARM GAS  /tmp/cc1iTjg2.s 			page 19


 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  pCallback;
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  pCallback;
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
ARM GAS  /tmp/cc1iTjg2.s 			page 20


 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAE
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBE
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;     /* Legacy weak TimeSta
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
ARM GAS  /tmp/cc1iTjg2.s 			page 21


 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 22


 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 456              		.loc 1 787 1
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 80B4     		push	{r7}
 462              	.LCFI10:
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 83B0     		sub	sp, sp, #12
 466              	.LCFI11:
 467              		.cfi_def_cfa_offset 16
 468 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc1iTjg2.s 			page 23


 469              	.LCFI12:
 470              		.cfi_def_cfa_register 7
 471 0006 7860     		str	r0, [r7, #4]
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 472              		.loc 1 794 1
 473 0008 00BF     		nop
 474 000a 0C37     		adds	r7, r7, #12
 475              	.LCFI13:
 476              		.cfi_def_cfa_offset 4
 477 000c BD46     		mov	sp, r7
 478              	.LCFI14:
 479              		.cfi_def_cfa_register 13
 480              		@ sp needed
 481 000e 5DF8047B 		ldr	r7, [sp], #4
 482              	.LCFI15:
 483              		.cfi_restore 7
 484              		.cfi_def_cfa_offset 0
 485 0012 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE333:
 489              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 490              		.align	1
 491              		.weak	HAL_RTC_MspDeInit
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 495              		.fpu fpv5-d16
 497              	HAL_RTC_MspDeInit:
 498              	.LFB334:
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 499              		.loc 1 802 1
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 80B4     		push	{r7}
 505              	.LCFI16:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              	.LCFI17:
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              	.LCFI18:
ARM GAS  /tmp/cc1iTjg2.s 			page 24


 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 515              		.loc 1 809 1
 516 0008 00BF     		nop
 517 000a 0C37     		adds	r7, r7, #12
 518              	.LCFI19:
 519              		.cfi_def_cfa_offset 4
 520 000c BD46     		mov	sp, r7
 521              	.LCFI20:
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 000e 5DF8047B 		ldr	r7, [sp], #4
 525              	.LCFI21:
 526              		.cfi_restore 7
 527              		.cfi_def_cfa_offset 0
 528 0012 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE334:
 532              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 533              		.align	1
 534              		.global	HAL_RTC_SetTime
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv5-d16
 540              	HAL_RTC_SetTime:
 541              	.LFB335:
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current time.
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
ARM GAS  /tmp/cc1iTjg2.s 			page 25


 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 542              		.loc 1 840 1
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 24
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 90B5     		push	{r4, r7, lr}
 547              	.LCFI22:
 548              		.cfi_def_cfa_offset 12
 549              		.cfi_offset 4, -12
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 87B0     		sub	sp, sp, #28
 553              	.LCFI23:
 554              		.cfi_def_cfa_offset 40
 555 0004 00AF     		add	r7, sp, #0
 556              	.LCFI24:
 557              		.cfi_def_cfa_register 7
 558 0006 F860     		str	r0, [r7, #12]
 559 0008 B960     		str	r1, [r7, #8]
 560 000a 7A60     		str	r2, [r7, #4]
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef status;
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 561              		.loc 1 850 3
 562 000c FB68     		ldr	r3, [r7, #12]
 563 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 564 0012 012B     		cmp	r3, #1
 565 0014 01D1     		bne	.L19
 566              		.loc 1 850 3 is_stmt 0 discriminator 1
 567 0016 0223     		movs	r3, #2
 568 0018 89E0     		b	.L20
 569              	.L19:
 570              		.loc 1 850 3 discriminator 2
 571 001a FB68     		ldr	r3, [r7, #12]
 572 001c 0122     		movs	r2, #1
 573 001e 83F82020 		strb	r2, [r3, #32]
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 574              		.loc 1 852 15 is_stmt 1 discriminator 2
 575 0022 FB68     		ldr	r3, [r7, #12]
 576 0024 0222     		movs	r2, #2
 577 0026 83F82120 		strb	r2, [r3, #33]
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 26


 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 578              		.loc 1 855 3 discriminator 2
 579 002a FB68     		ldr	r3, [r7, #12]
 580 002c 1B68     		ldr	r3, [r3]
 581 002e CA22     		movs	r2, #202
 582 0030 5A62     		str	r2, [r3, #36]
 583 0032 FB68     		ldr	r3, [r7, #12]
 584 0034 1B68     		ldr	r3, [r3]
 585 0036 5322     		movs	r2, #83
 586 0038 5A62     		str	r2, [r3, #36]
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Enter Initialization mode */
 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 587              		.loc 1 857 12 discriminator 2
 588 003a F868     		ldr	r0, [r7, #12]
 589 003c FFF7FEFF 		bl	RTC_EnterInitMode
 590 0040 0346     		mov	r3, r0
 591 0042 FB74     		strb	r3, [r7, #19]
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 592              		.loc 1 858 6 discriminator 2
 593 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 594 0046 002B     		cmp	r3, #0
 595 0048 61D1     		bne	.L21
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Format == RTC_FORMAT_BIN)
 596              		.loc 1 860 7
 597 004a 7B68     		ldr	r3, [r7, #4]
 598 004c 002B     		cmp	r3, #0
 599 004e 26D1     		bne	.L22
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 600              		.loc 1 862 15
 601 0050 FB68     		ldr	r3, [r7, #12]
 602 0052 1B68     		ldr	r3, [r3]
 603              		.loc 1 862 25
 604 0054 9B68     		ldr	r3, [r3, #8]
 605              		.loc 1 862 30
 606 0056 03F04003 		and	r3, r3, #64
 607              		.loc 1 862 9
 608 005a 002B     		cmp	r3, #0
 609 005c 02D1     		bne	.L23
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sTime->Hours));
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 610              		.loc 1 869 27
 611 005e BB68     		ldr	r3, [r7, #8]
 612 0060 0022     		movs	r2, #0
 613 0062 DA70     		strb	r2, [r3, #3]
 614              	.L23:
 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sTime->Minutes));
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sTime->Seconds));
ARM GAS  /tmp/cc1iTjg2.s 			page 27


 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 615              		.loc 1 875 38
 616 0064 BB68     		ldr	r3, [r7, #8]
 617 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 618 0068 1846     		mov	r0, r3
 619 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 620 006e 0346     		mov	r3, r0
 621              		.loc 1 875 69
 622 0070 1C04     		lsls	r4, r3, #16
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 623              		.loc 1 876 38
 624 0072 BB68     		ldr	r3, [r7, #8]
 625 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 626 0076 1846     		mov	r0, r3
 627 0078 FFF7FEFF 		bl	RTC_ByteToBcd2
 628 007c 0346     		mov	r3, r0
 629              		.loc 1 876 69
 630 007e 1B02     		lsls	r3, r3, #8
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 631              		.loc 1 875 88
 632 0080 1C43     		orrs	r4, r4, r3
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 633              		.loc 1 877 38
 634 0082 BB68     		ldr	r3, [r7, #8]
 635 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 636 0086 1846     		mov	r0, r3
 637 0088 FFF7FEFF 		bl	RTC_ByteToBcd2
 638 008c 0346     		mov	r3, r0
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 639              		.loc 1 876 88
 640 008e 44EA0302 		orr	r2, r4, r3
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 641              		.loc 1 878 44
 642 0092 BB68     		ldr	r3, [r7, #8]
 643 0094 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 644              		.loc 1 878 58
 645 0096 9B05     		lsls	r3, r3, #22
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 646              		.loc 1 875 14
 647 0098 1343     		orrs	r3, r3, r2
 648 009a 7B61     		str	r3, [r7, #20]
 649 009c 18E0     		b	.L24
 650              	.L22:
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 651              		.loc 1 882 15
 652 009e FB68     		ldr	r3, [r7, #12]
 653 00a0 1B68     		ldr	r3, [r3]
 654              		.loc 1 882 25
 655 00a2 9B68     		ldr	r3, [r3, #8]
 656              		.loc 1 882 30
 657 00a4 03F04003 		and	r3, r3, #64
 658              		.loc 1 882 9
 659 00a8 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1iTjg2.s 			page 28


 660 00aa 02D1     		bne	.L25
 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 661              		.loc 1 889 27
 662 00ac BB68     		ldr	r3, [r7, #8]
 663 00ae 0022     		movs	r2, #0
 664 00b0 DA70     		strb	r2, [r3, #3]
 665              	.L25:
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 666              		.loc 1 894 34
 667 00b2 BB68     		ldr	r3, [r7, #8]
 668 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 669              		.loc 1 894 45
 670 00b6 1A04     		lsls	r2, r3, #16
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 671              		.loc 1 895 34
 672 00b8 BB68     		ldr	r3, [r7, #8]
 673 00ba 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 674              		.loc 1 895 45
 675 00bc 1B02     		lsls	r3, r3, #8
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 676              		.loc 1 894 64
 677 00be 1343     		orrs	r3, r3, r2
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 678              		.loc 1 896 34
 679 00c0 BA68     		ldr	r2, [r7, #8]
 680 00c2 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 681              		.loc 1 895 64
 682 00c4 1A43     		orrs	r2, r2, r3
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 683              		.loc 1 897 34
 684 00c6 BB68     		ldr	r3, [r7, #8]
 685 00c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 686              		.loc 1 897 48
 687 00ca 9B05     		lsls	r3, r3, #22
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 688              		.loc 1 894 14
 689 00cc 1343     		orrs	r3, r3, r2
 690 00ce 7B61     		str	r3, [r7, #20]
 691              	.L24:
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 692              		.loc 1 901 9
 693 00d0 FB68     		ldr	r3, [r7, #12]
 694 00d2 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc1iTjg2.s 			page 29


 695              		.loc 1 901 26
 696 00d4 7969     		ldr	r1, [r7, #20]
 697 00d6 184B     		ldr	r3, .L27
 698 00d8 0B40     		ands	r3, r3, r1
 699              		.loc 1 901 24
 700 00da 1360     		str	r3, [r2]
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 701              		.loc 1 904 9
 702 00dc FB68     		ldr	r3, [r7, #12]
 703 00de 1B68     		ldr	r3, [r3]
 704              		.loc 1 904 24
 705 00e0 9A68     		ldr	r2, [r3, #8]
 706              		.loc 1 904 9
 707 00e2 FB68     		ldr	r3, [r7, #12]
 708 00e4 1B68     		ldr	r3, [r3]
 709              		.loc 1 904 24
 710 00e6 22F48022 		bic	r2, r2, #262144
 711 00ea 9A60     		str	r2, [r3, #8]
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 712              		.loc 1 907 9
 713 00ec FB68     		ldr	r3, [r7, #12]
 714 00ee 1B68     		ldr	r3, [r3]
 715              		.loc 1 907 24
 716 00f0 9968     		ldr	r1, [r3, #8]
 717              		.loc 1 907 43
 718 00f2 BB68     		ldr	r3, [r7, #8]
 719 00f4 DA68     		ldr	r2, [r3, #12]
 720              		.loc 1 907 67
 721 00f6 BB68     		ldr	r3, [r7, #8]
 722 00f8 1B69     		ldr	r3, [r3, #16]
 723              		.loc 1 907 60
 724 00fa 1A43     		orrs	r2, r2, r3
 725              		.loc 1 907 9
 726 00fc FB68     		ldr	r3, [r7, #12]
 727 00fe 1B68     		ldr	r3, [r3]
 728              		.loc 1 907 24
 729 0100 0A43     		orrs	r2, r2, r1
 730 0102 9A60     		str	r2, [r3, #8]
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 731              		.loc 1 910 14
 732 0104 F868     		ldr	r0, [r7, #12]
 733 0106 FFF7FEFF 		bl	RTC_ExitInitMode
 734 010a 0346     		mov	r3, r0
 735 010c FB74     		strb	r3, [r7, #19]
 736              	.L21:
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 737              		.loc 1 914 3
 738 010e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc1iTjg2.s 			page 30


 739 0110 1B68     		ldr	r3, [r3]
 740 0112 FF22     		movs	r2, #255
 741 0114 5A62     		str	r2, [r3, #36]
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 742              		.loc 1 916 6
 743 0116 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 744 0118 002B     		cmp	r3, #0
 745 011a 03D1     		bne	.L26
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 746              		.loc 1 918 17
 747 011c FB68     		ldr	r3, [r7, #12]
 748 011e 0122     		movs	r2, #1
 749 0120 83F82120 		strb	r2, [r3, #33]
 750              	.L26:
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 751              		.loc 1 922 3
 752 0124 FB68     		ldr	r3, [r7, #12]
 753 0126 0022     		movs	r2, #0
 754 0128 83F82020 		strb	r2, [r3, #32]
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 755              		.loc 1 924 10
 756 012c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 757              	.L20:
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 758              		.loc 1 925 1
 759 012e 1846     		mov	r0, r3
 760 0130 1C37     		adds	r7, r7, #28
 761              	.LCFI25:
 762              		.cfi_def_cfa_offset 12
 763 0132 BD46     		mov	sp, r7
 764              	.LCFI26:
 765              		.cfi_def_cfa_register 13
 766              		@ sp needed
 767 0134 90BD     		pop	{r4, r7, pc}
 768              	.L28:
 769 0136 00BF     		.align	2
 770              	.L27:
 771 0138 7F7F7F00 		.word	8355711
 772              		.cfi_endproc
 773              	.LFE335:
 775              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 776              		.align	1
 777              		.global	HAL_RTC_GetTime
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv5-d16
 783              	HAL_RTC_GetTime:
 784              	.LFB336:
 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
ARM GAS  /tmp/cc1iTjg2.s 			page 31


 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current time.
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 785              		.loc 1 949 1
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 24
 788              		@ frame_needed = 1, uses_anonymous_args = 0
 789 0000 80B5     		push	{r7, lr}
 790              	.LCFI27:
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 7, -8
 793              		.cfi_offset 14, -4
 794 0002 86B0     		sub	sp, sp, #24
 795              	.LCFI28:
 796              		.cfi_def_cfa_offset 32
 797 0004 00AF     		add	r7, sp, #0
 798              	.LCFI29:
 799              		.cfi_def_cfa_register 7
 800 0006 F860     		str	r0, [r7, #12]
 801 0008 B960     		str	r1, [r7, #8]
 802 000a 7A60     		str	r2, [r7, #4]
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 803              		.loc 1 956 38
 804 000c FB68     		ldr	r3, [r7, #12]
 805 000e 1B68     		ldr	r3, [r3]
 806              		.loc 1 956 48
 807 0010 9A6A     		ldr	r2, [r3, #40]
 808              		.loc 1 956 21
 809 0012 BB68     		ldr	r3, [r7, #8]
 810 0014 5A60     		str	r2, [r3, #4]
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
ARM GAS  /tmp/cc1iTjg2.s 			page 32


 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 811              		.loc 1 959 42
 812 0016 FB68     		ldr	r3, [r7, #12]
 813 0018 1B68     		ldr	r3, [r3]
 814              		.loc 1 959 52
 815 001a 1B69     		ldr	r3, [r3, #16]
 816              		.loc 1 959 27
 817 001c C3F30E02 		ubfx	r2, r3, #0, #15
 818              		.loc 1 959 25
 819 0020 BB68     		ldr	r3, [r7, #8]
 820 0022 9A60     		str	r2, [r3, #8]
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the TR register */
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 821              		.loc 1 962 27
 822 0024 FB68     		ldr	r3, [r7, #12]
 823 0026 1B68     		ldr	r3, [r3]
 824              		.loc 1 962 37
 825 0028 1A68     		ldr	r2, [r3]
 826              		.loc 1 962 10
 827 002a 224B     		ldr	r3, .L32
 828 002c 1340     		ands	r3, r3, r2
 829 002e 7B61     		str	r3, [r7, #20]
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 830              		.loc 1 965 70
 831 0030 7B69     		ldr	r3, [r7, #20]
 832 0032 1B0C     		lsrs	r3, r3, #16
 833              		.loc 1 965 23
 834 0034 DBB2     		uxtb	r3, r3
 835 0036 03F03F03 		and	r3, r3, #63
 836 003a DAB2     		uxtb	r2, r3
 837              		.loc 1 965 21
 838 003c BB68     		ldr	r3, [r7, #8]
 839 003e 1A70     		strb	r2, [r3]
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 840              		.loc 1 966 70
 841 0040 7B69     		ldr	r3, [r7, #20]
 842 0042 1B0A     		lsrs	r3, r3, #8
 843              		.loc 1 966 23
 844 0044 DBB2     		uxtb	r3, r3
 845 0046 03F07F03 		and	r3, r3, #127
 846 004a DAB2     		uxtb	r2, r3
 847              		.loc 1 966 21
 848 004c BB68     		ldr	r3, [r7, #8]
 849 004e 5A70     		strb	r2, [r3, #1]
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 850              		.loc 1 967 23
 851 0050 7B69     		ldr	r3, [r7, #20]
 852 0052 DBB2     		uxtb	r3, r3
 853 0054 03F07F03 		and	r3, r3, #127
 854 0058 DAB2     		uxtb	r2, r3
 855              		.loc 1 967 21
 856 005a BB68     		ldr	r3, [r7, #8]
 857 005c 9A70     		strb	r2, [r3, #2]
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
ARM GAS  /tmp/cc1iTjg2.s 			page 33


 858              		.loc 1 968 70
 859 005e 7B69     		ldr	r3, [r7, #20]
 860 0060 9B0D     		lsrs	r3, r3, #22
 861              		.loc 1 968 23
 862 0062 DBB2     		uxtb	r3, r3
 863 0064 03F00103 		and	r3, r3, #1
 864 0068 DAB2     		uxtb	r2, r3
 865              		.loc 1 968 21
 866 006a BB68     		ldr	r3, [r7, #8]
 867 006c DA70     		strb	r2, [r3, #3]
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 868              		.loc 1 971 5
 869 006e 7B68     		ldr	r3, [r7, #4]
 870 0070 002B     		cmp	r3, #0
 871 0072 1AD1     		bne	.L30
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 872              		.loc 1 974 31
 873 0074 BB68     		ldr	r3, [r7, #8]
 874 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 875 0078 1846     		mov	r0, r3
 876 007a FFF7FEFF 		bl	RTC_Bcd2ToByte
 877 007e 0346     		mov	r3, r0
 878 0080 1A46     		mov	r2, r3
 879              		.loc 1 974 20
 880 0082 BB68     		ldr	r3, [r7, #8]
 881 0084 1A70     		strb	r2, [r3]
 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 882              		.loc 1 975 31
 883 0086 BB68     		ldr	r3, [r7, #8]
 884 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 885 008a 1846     		mov	r0, r3
 886 008c FFF7FEFF 		bl	RTC_Bcd2ToByte
 887 0090 0346     		mov	r3, r0
 888 0092 1A46     		mov	r2, r3
 889              		.loc 1 975 20
 890 0094 BB68     		ldr	r3, [r7, #8]
 891 0096 5A70     		strb	r2, [r3, #1]
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 892              		.loc 1 976 31
 893 0098 BB68     		ldr	r3, [r7, #8]
 894 009a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 895 009c 1846     		mov	r0, r3
 896 009e FFF7FEFF 		bl	RTC_Bcd2ToByte
 897 00a2 0346     		mov	r3, r0
 898 00a4 1A46     		mov	r2, r3
 899              		.loc 1 976 20
 900 00a6 BB68     		ldr	r3, [r7, #8]
 901 00a8 9A70     		strb	r2, [r3, #2]
 902              	.L30:
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 903              		.loc 1 979 10
ARM GAS  /tmp/cc1iTjg2.s 			page 34


 904 00aa 0023     		movs	r3, #0
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 905              		.loc 1 980 1
 906 00ac 1846     		mov	r0, r3
 907 00ae 1837     		adds	r7, r7, #24
 908              	.LCFI30:
 909              		.cfi_def_cfa_offset 8
 910 00b0 BD46     		mov	sp, r7
 911              	.LCFI31:
 912              		.cfi_def_cfa_register 13
 913              		@ sp needed
 914 00b2 80BD     		pop	{r7, pc}
 915              	.L33:
 916              		.align	2
 917              	.L32:
 918 00b4 7F7F7F00 		.word	8355711
 919              		.cfi_endproc
 920              	.LFE336:
 922              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 923              		.align	1
 924              		.global	HAL_RTC_SetDate
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu fpv5-d16
 930              	HAL_RTC_SetDate:
 931              	.LFB337:
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current date.
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 932              		.loc 1 993 1
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 24
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 90B5     		push	{r4, r7, lr}
 937              	.LCFI32:
 938              		.cfi_def_cfa_offset 12
 939              		.cfi_offset 4, -12
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 87B0     		sub	sp, sp, #28
 943              	.LCFI33:
 944              		.cfi_def_cfa_offset 40
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI34:
 947              		.cfi_def_cfa_register 7
 948 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/cc1iTjg2.s 			page 35


 949 0008 B960     		str	r1, [r7, #8]
 950 000a 7A60     		str	r2, [r7, #4]
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 951              		.loc 1 1001 3
 952 000c FB68     		ldr	r3, [r7, #12]
 953 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 954 0012 012B     		cmp	r3, #1
 955 0014 01D1     		bne	.L35
 956              		.loc 1 1001 3 is_stmt 0 discriminator 1
 957 0016 0223     		movs	r3, #2
 958 0018 73E0     		b	.L36
 959              	.L35:
 960              		.loc 1 1001 3 discriminator 2
 961 001a FB68     		ldr	r3, [r7, #12]
 962 001c 0122     		movs	r2, #1
 963 001e 83F82020 		strb	r2, [r3, #32]
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 964              		.loc 1 1003 15 is_stmt 1 discriminator 2
 965 0022 FB68     		ldr	r3, [r7, #12]
 966 0024 0222     		movs	r2, #2
 967 0026 83F82120 		strb	r2, [r3, #33]
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 968              		.loc 1 1005 5 discriminator 2
 969 002a 7B68     		ldr	r3, [r7, #4]
 970 002c 002B     		cmp	r3, #0
 971 002e 0ED1     		bne	.L37
 972              		.loc 1 1005 43 discriminator 1
 973 0030 BB68     		ldr	r3, [r7, #8]
 974 0032 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 975              		.loc 1 1005 51 discriminator 1
 976 0034 03F01003 		and	r3, r3, #16
 977              		.loc 1 1005 33 discriminator 1
 978 0038 002B     		cmp	r3, #0
 979 003a 08D0     		beq	.L37
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 980              		.loc 1 1007 36
 981 003c BB68     		ldr	r3, [r7, #8]
 982 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 983              		.loc 1 1007 44
 984 0040 23F01003 		bic	r3, r3, #16
 985 0044 DBB2     		uxtb	r3, r3
 986              		.loc 1 1007 20
 987 0046 0A33     		adds	r3, r3, #10
 988 0048 DAB2     		uxtb	r2, r3
 989              		.loc 1 1007 18
 990 004a BB68     		ldr	r3, [r7, #8]
 991 004c 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/cc1iTjg2.s 			page 36


 992              	.L37:
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 993              		.loc 1 1012 5
 994 004e 7B68     		ldr	r3, [r7, #4]
 995 0050 002B     		cmp	r3, #0
 996 0052 1CD1     		bne	.L38
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 997              		.loc 1 1018 30
 998 0054 BB68     		ldr	r3, [r7, #8]
 999 0056 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1000 0058 1846     		mov	r0, r3
 1001 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 1002 005e 0346     		mov	r3, r0
 1003              		.loc 1 1018 59
 1004 0060 1C04     		lsls	r4, r3, #16
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1005              		.loc 1 1019 30
 1006 0062 BB68     		ldr	r3, [r7, #8]
 1007 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1008 0066 1846     		mov	r0, r3
 1009 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1010 006c 0346     		mov	r3, r0
 1011              		.loc 1 1019 59
 1012 006e 1B02     		lsls	r3, r3, #8
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1013              		.loc 1 1018 77
 1014 0070 1C43     		orrs	r4, r4, r3
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 1015              		.loc 1 1020 30
 1016 0072 BB68     		ldr	r3, [r7, #8]
 1017 0074 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1018 0076 1846     		mov	r0, r3
 1019 0078 FFF7FEFF 		bl	RTC_ByteToBcd2
 1020 007c 0346     		mov	r3, r0
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1021              		.loc 1 1019 77
 1022 007e 44EA0302 		orr	r2, r4, r3
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 1023              		.loc 1 1021 35
 1024 0082 BB68     		ldr	r3, [r7, #8]
 1025 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1026              		.loc 1 1021 59
 1027 0086 5B03     		lsls	r3, r3, #13
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1028              		.loc 1 1018 16
 1029 0088 1343     		orrs	r3, r3, r2
 1030 008a 7B61     		str	r3, [r7, #20]
 1031 008c 0EE0     		b	.L39
ARM GAS  /tmp/cc1iTjg2.s 			page 37


 1032              	.L38:
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 1033              		.loc 1 1029 36
 1034 008e BB68     		ldr	r3, [r7, #8]
 1035 0090 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1036              		.loc 1 1029 47
 1037 0092 1A04     		lsls	r2, r3, #16
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1038              		.loc 1 1030 36
 1039 0094 BB68     		ldr	r3, [r7, #8]
 1040 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1041              		.loc 1 1030 47
 1042 0098 1B02     		lsls	r3, r3, #8
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1043              		.loc 1 1029 65
 1044 009a 1343     		orrs	r3, r3, r2
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 1045              		.loc 1 1031 36
 1046 009c BA68     		ldr	r2, [r7, #8]
 1047 009e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1048              		.loc 1 1030 65
 1049 00a0 1A43     		orrs	r2, r2, r3
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1050              		.loc 1 1032 36
 1051 00a2 BB68     		ldr	r3, [r7, #8]
 1052 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1053              		.loc 1 1032 47
 1054 00a6 5B03     		lsls	r3, r3, #13
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1055              		.loc 1 1029 16
 1056 00a8 1343     		orrs	r3, r3, r2
 1057 00aa 7B61     		str	r3, [r7, #20]
 1058              	.L39:
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1059              		.loc 1 1036 3
 1060 00ac FB68     		ldr	r3, [r7, #12]
 1061 00ae 1B68     		ldr	r3, [r3]
 1062 00b0 CA22     		movs	r2, #202
 1063 00b2 5A62     		str	r2, [r3, #36]
 1064 00b4 FB68     		ldr	r3, [r7, #12]
 1065 00b6 1B68     		ldr	r3, [r3]
 1066 00b8 5322     		movs	r2, #83
 1067 00ba 5A62     		str	r2, [r3, #36]
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enter Initialization mode */
ARM GAS  /tmp/cc1iTjg2.s 			page 38


1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 1068              		.loc 1 1040 12
 1069 00bc F868     		ldr	r0, [r7, #12]
 1070 00be FFF7FEFF 		bl	RTC_EnterInitMode
 1071 00c2 0346     		mov	r3, r0
 1072 00c4 FB74     		strb	r3, [r7, #19]
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 1073              		.loc 1 1041 6
 1074 00c6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1075 00c8 002B     		cmp	r3, #0
 1076 00ca 0AD1     		bne	.L40
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_DR register */
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1077              		.loc 1 1044 9
 1078 00cc FB68     		ldr	r3, [r7, #12]
 1079 00ce 1A68     		ldr	r2, [r3]
 1080              		.loc 1 1044 26
 1081 00d0 7969     		ldr	r1, [r7, #20]
 1082 00d2 0E4B     		ldr	r3, .L42
 1083 00d4 0B40     		ands	r3, r3, r1
 1084              		.loc 1 1044 24
 1085 00d6 5360     		str	r3, [r2, #4]
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 1086              		.loc 1 1048 14
 1087 00d8 F868     		ldr	r0, [r7, #12]
 1088 00da FFF7FEFF 		bl	RTC_ExitInitMode
 1089 00de 0346     		mov	r3, r0
 1090 00e0 FB74     		strb	r3, [r7, #19]
 1091              	.L40:
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1092              		.loc 1 1052 3
 1093 00e2 FB68     		ldr	r3, [r7, #12]
 1094 00e4 1B68     		ldr	r3, [r3]
 1095 00e6 FF22     		movs	r2, #255
 1096 00e8 5A62     		str	r2, [r3, #36]
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 1097              		.loc 1 1054 6
 1098 00ea FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1099 00ec 002B     		cmp	r3, #0
 1100 00ee 03D1     		bne	.L41
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 1101              		.loc 1 1056 17
 1102 00f0 FB68     		ldr	r3, [r7, #12]
 1103 00f2 0122     		movs	r2, #1
 1104 00f4 83F82120 		strb	r2, [r3, #33]
 1105              	.L41:
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 39


1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1106              		.loc 1 1060 3
 1107 00f8 FB68     		ldr	r3, [r7, #12]
 1108 00fa 0022     		movs	r2, #0
 1109 00fc 83F82020 		strb	r2, [r3, #32]
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 1110              		.loc 1 1062 10
 1111 0100 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1112              	.L36:
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1113              		.loc 1 1065 1
 1114 0102 1846     		mov	r0, r3
 1115 0104 1C37     		adds	r7, r7, #28
 1116              	.LCFI35:
 1117              		.cfi_def_cfa_offset 12
 1118 0106 BD46     		mov	sp, r7
 1119              	.LCFI36:
 1120              		.cfi_def_cfa_register 13
 1121              		@ sp needed
 1122 0108 90BD     		pop	{r4, r7, pc}
 1123              	.L43:
 1124 010a 00BF     		.align	2
 1125              	.L42:
 1126 010c 3FFFFF00 		.word	16777023
 1127              		.cfi_endproc
 1128              	.LFE337:
 1130              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1131              		.align	1
 1132              		.global	HAL_RTC_GetDate
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1136              		.fpu fpv5-d16
 1138              	HAL_RTC_GetDate:
 1139              	.LFB338:
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current date.
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1140              		.loc 1 1081 1
 1141              		.cfi_startproc
ARM GAS  /tmp/cc1iTjg2.s 			page 40


 1142              		@ args = 0, pretend = 0, frame = 24
 1143              		@ frame_needed = 1, uses_anonymous_args = 0
 1144 0000 80B5     		push	{r7, lr}
 1145              	.LCFI37:
 1146              		.cfi_def_cfa_offset 8
 1147              		.cfi_offset 7, -8
 1148              		.cfi_offset 14, -4
 1149 0002 86B0     		sub	sp, sp, #24
 1150              	.LCFI38:
 1151              		.cfi_def_cfa_offset 32
 1152 0004 00AF     		add	r7, sp, #0
 1153              	.LCFI39:
 1154              		.cfi_def_cfa_register 7
 1155 0006 F860     		str	r0, [r7, #12]
 1156 0008 B960     		str	r1, [r7, #8]
 1157 000a 7A60     		str	r2, [r7, #4]
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the DR register */
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 1158              		.loc 1 1088 31
 1159 000c FB68     		ldr	r3, [r7, #12]
 1160 000e 1B68     		ldr	r3, [r3]
 1161              		.loc 1 1088 41
 1162 0010 5A68     		ldr	r2, [r3, #4]
 1163              		.loc 1 1088 14
 1164 0012 214B     		ldr	r3, .L47
 1165 0014 1340     		ands	r3, r3, r2
 1166 0016 7B61     		str	r3, [r7, #20]
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 1167              		.loc 1 1091 69
 1168 0018 7B69     		ldr	r3, [r7, #20]
 1169 001a 1B0C     		lsrs	r3, r3, #16
 1170              		.loc 1 1091 20
 1171 001c DAB2     		uxtb	r2, r3
 1172              		.loc 1 1091 18
 1173 001e BB68     		ldr	r3, [r7, #8]
 1174 0020 DA70     		strb	r2, [r3, #3]
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 1175              		.loc 1 1092 69
 1176 0022 7B69     		ldr	r3, [r7, #20]
 1177 0024 1B0A     		lsrs	r3, r3, #8
 1178              		.loc 1 1092 20
 1179 0026 DBB2     		uxtb	r3, r3
 1180 0028 03F01F03 		and	r3, r3, #31
 1181 002c DAB2     		uxtb	r2, r3
 1182              		.loc 1 1092 18
 1183 002e BB68     		ldr	r3, [r7, #8]
 1184 0030 5A70     		strb	r2, [r3, #1]
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 1185              		.loc 1 1093 20
 1186 0032 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc1iTjg2.s 			page 41


 1187 0034 DBB2     		uxtb	r3, r3
 1188 0036 03F03F03 		and	r3, r3, #63
 1189 003a DAB2     		uxtb	r2, r3
 1190              		.loc 1 1093 18
 1191 003c BB68     		ldr	r3, [r7, #8]
 1192 003e 9A70     		strb	r2, [r3, #2]
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 1193              		.loc 1 1094 69
 1194 0040 7B69     		ldr	r3, [r7, #20]
 1195 0042 5B0B     		lsrs	r3, r3, #13
 1196              		.loc 1 1094 20
 1197 0044 DBB2     		uxtb	r3, r3
 1198 0046 03F00703 		and	r3, r3, #7
 1199 004a DAB2     		uxtb	r2, r3
 1200              		.loc 1 1094 18
 1201 004c BB68     		ldr	r3, [r7, #8]
 1202 004e 1A70     		strb	r2, [r3]
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1203              		.loc 1 1097 5
 1204 0050 7B68     		ldr	r3, [r7, #4]
 1205 0052 002B     		cmp	r3, #0
 1206 0054 1AD1     		bne	.L45
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1207              		.loc 1 1100 28
 1208 0056 BB68     		ldr	r3, [r7, #8]
 1209 0058 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1210 005a 1846     		mov	r0, r3
 1211 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1212 0060 0346     		mov	r3, r0
 1213 0062 1A46     		mov	r2, r3
 1214              		.loc 1 1100 17
 1215 0064 BB68     		ldr	r3, [r7, #8]
 1216 0066 DA70     		strb	r2, [r3, #3]
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1217              		.loc 1 1101 29
 1218 0068 BB68     		ldr	r3, [r7, #8]
 1219 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1220 006c 1846     		mov	r0, r3
 1221 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1222 0072 0346     		mov	r3, r0
 1223 0074 1A46     		mov	r2, r3
 1224              		.loc 1 1101 18
 1225 0076 BB68     		ldr	r3, [r7, #8]
 1226 0078 5A70     		strb	r2, [r3, #1]
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 1227              		.loc 1 1102 28
 1228 007a BB68     		ldr	r3, [r7, #8]
 1229 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1230 007e 1846     		mov	r0, r3
 1231 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1232 0084 0346     		mov	r3, r0
 1233 0086 1A46     		mov	r2, r3
 1234              		.loc 1 1102 17
ARM GAS  /tmp/cc1iTjg2.s 			page 42


 1235 0088 BB68     		ldr	r3, [r7, #8]
 1236 008a 9A70     		strb	r2, [r3, #2]
 1237              	.L45:
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 1238              		.loc 1 1104 10
 1239 008c 0023     		movs	r3, #0
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1240              		.loc 1 1105 1
 1241 008e 1846     		mov	r0, r3
 1242 0090 1837     		adds	r7, r7, #24
 1243              	.LCFI40:
 1244              		.cfi_def_cfa_offset 8
 1245 0092 BD46     		mov	sp, r7
 1246              	.LCFI41:
 1247              		.cfi_def_cfa_register 13
 1248              		@ sp needed
 1249 0094 80BD     		pop	{r7, pc}
 1250              	.L48:
 1251 0096 00BF     		.align	2
 1252              	.L47:
 1253 0098 3FFFFF00 		.word	16777023
 1254              		.cfi_endproc
 1255              	.LFE338:
 1257              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1258              		.align	1
 1259              		.global	HAL_RTC_SetAlarm
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1263              		.fpu fpv5-d16
 1265              	HAL_RTC_SetAlarm:
 1266              	.LFB339:
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cc1iTjg2.s 			page 43


1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1267              		.loc 1 1135 1
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 32
 1270              		@ frame_needed = 1, uses_anonymous_args = 0
 1271 0000 90B5     		push	{r4, r7, lr}
 1272              	.LCFI42:
 1273              		.cfi_def_cfa_offset 12
 1274              		.cfi_offset 4, -12
 1275              		.cfi_offset 7, -8
 1276              		.cfi_offset 14, -4
 1277 0002 89B0     		sub	sp, sp, #36
 1278              	.LCFI43:
 1279              		.cfi_def_cfa_offset 48
 1280 0004 00AF     		add	r7, sp, #0
 1281              	.LCFI44:
 1282              		.cfi_def_cfa_register 7
 1283 0006 F860     		str	r0, [r7, #12]
 1284 0008 B960     		str	r1, [r7, #8]
 1285 000a 7A60     		str	r2, [r7, #4]
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1286              		.loc 1 1149 3
 1287 000c FB68     		ldr	r3, [r7, #12]
 1288 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1289 0012 012B     		cmp	r3, #1
 1290 0014 01D1     		bne	.L50
 1291              		.loc 1 1149 3 is_stmt 0 discriminator 1
 1292 0016 0223     		movs	r3, #2
 1293 0018 1BE1     		b	.L51
 1294              	.L50:
 1295              		.loc 1 1149 3 discriminator 2
 1296 001a FB68     		ldr	r3, [r7, #12]
 1297 001c 0122     		movs	r2, #1
 1298 001e 83F82020 		strb	r2, [r3, #32]
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1299              		.loc 1 1151 15 is_stmt 1 discriminator 2
 1300 0022 FB68     		ldr	r3, [r7, #12]
 1301 0024 0222     		movs	r2, #2
ARM GAS  /tmp/cc1iTjg2.s 			page 44


 1302 0026 83F82120 		strb	r2, [r3, #33]
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1303              		.loc 1 1153 5 discriminator 2
 1304 002a 7B68     		ldr	r3, [r7, #4]
 1305 002c 002B     		cmp	r3, #0
 1306 002e 37D1     		bne	.L52
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1307              		.loc 1 1155 13
 1308 0030 FB68     		ldr	r3, [r7, #12]
 1309 0032 1B68     		ldr	r3, [r3]
 1310              		.loc 1 1155 23
 1311 0034 9B68     		ldr	r3, [r3, #8]
 1312              		.loc 1 1155 28
 1313 0036 03F04003 		and	r3, r3, #64
 1314              		.loc 1 1155 7
 1315 003a 002B     		cmp	r3, #0
 1316 003c 02D1     		bne	.L53
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1317              		.loc 1 1162 36
 1318 003e BB68     		ldr	r3, [r7, #8]
 1319 0040 0022     		movs	r2, #0
 1320 0042 DA70     		strb	r2, [r3, #3]
 1321              	.L53:
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 1322              		.loc 1 1177 26
 1323 0044 BB68     		ldr	r3, [r7, #8]
 1324 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1325 0048 1846     		mov	r0, r3
 1326 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1327 004e 0346     		mov	r3, r0
 1328              		.loc 1 1177 68
 1329 0050 1C04     		lsls	r4, r3, #16
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1330              		.loc 1 1178 26
 1331 0052 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cc1iTjg2.s 			page 45


 1332 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1333 0056 1846     		mov	r0, r3
 1334 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1335 005c 0346     		mov	r3, r0
 1336              		.loc 1 1178 68
 1337 005e 1B02     		lsls	r3, r3, #8
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1338              		.loc 1 1177 91
 1339 0060 1C43     		orrs	r4, r4, r3
1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1340              		.loc 1 1179 26
 1341 0062 BB68     		ldr	r3, [r7, #8]
 1342 0064 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1343 0066 1846     		mov	r0, r3
 1344 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1345 006c 0346     		mov	r3, r0
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1346              		.loc 1 1178 91
 1347 006e 44EA0302 		orr	r2, r4, r3
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1348              		.loc 1 1180 43
 1349 0072 BB68     		ldr	r3, [r7, #8]
 1350 0074 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1351              		.loc 1 1180 68
 1352 0076 9B05     		lsls	r3, r3, #22
1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1353              		.loc 1 1179 91
 1354 0078 42EA0304 		orr	r4, r2, r3
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1355              		.loc 1 1181 26
 1356 007c BB68     		ldr	r3, [r7, #8]
 1357 007e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1358 0082 1846     		mov	r0, r3
 1359 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1360 0088 0346     		mov	r3, r0
 1361              		.loc 1 1181 68
 1362 008a 1B06     		lsls	r3, r3, #24
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1363              		.loc 1 1180 91
 1364 008c 44EA0302 		orr	r2, r4, r3
1182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1365              		.loc 1 1182 32
 1366 0090 BB68     		ldr	r3, [r7, #8]
 1367 0092 DB69     		ldr	r3, [r3, #28]
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1368              		.loc 1 1181 91
 1369 0094 1A43     		orrs	r2, r2, r3
1183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1370              		.loc 1 1183 32
 1371 0096 BB68     		ldr	r3, [r7, #8]
 1372 0098 5B69     		ldr	r3, [r3, #20]
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1373              		.loc 1 1177 12
 1374 009a 1343     		orrs	r3, r3, r2
 1375 009c FB61     		str	r3, [r7, #28]
 1376 009e 23E0     		b	.L54
 1377              	.L52:
ARM GAS  /tmp/cc1iTjg2.s 			page 46


1184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1378              		.loc 1 1187 13
 1379 00a0 FB68     		ldr	r3, [r7, #12]
 1380 00a2 1B68     		ldr	r3, [r3]
 1381              		.loc 1 1187 23
 1382 00a4 9B68     		ldr	r3, [r3, #8]
 1383              		.loc 1 1187 28
 1384 00a6 03F04003 		and	r3, r3, #64
 1385              		.loc 1 1187 7
 1386 00aa 002B     		cmp	r3, #0
 1387 00ac 02D1     		bne	.L55
1188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1388              		.loc 1 1194 36
 1389 00ae BB68     		ldr	r3, [r7, #8]
 1390 00b0 0022     		movs	r2, #0
 1391 00b2 DA70     		strb	r2, [r3, #3]
 1392              	.L55:
1195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 1393              		.loc 1 1210 43
 1394 00b4 BB68     		ldr	r3, [r7, #8]
 1395 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1396              		.loc 1 1210 56
 1397 00b8 1A04     		lsls	r2, r3, #16
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1398              		.loc 1 1211 43
 1399 00ba BB68     		ldr	r3, [r7, #8]
 1400 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1401              		.loc 1 1211 56
 1402 00be 1B02     		lsls	r3, r3, #8
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1403              		.loc 1 1210 79
 1404 00c0 1343     		orrs	r3, r3, r2
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
ARM GAS  /tmp/cc1iTjg2.s 			page 47


 1405              		.loc 1 1212 43
 1406 00c2 BA68     		ldr	r2, [r7, #8]
 1407 00c4 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1408              		.loc 1 1211 79
 1409 00c6 1A43     		orrs	r2, r2, r3
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1410              		.loc 1 1213 43
 1411 00c8 BB68     		ldr	r3, [r7, #8]
 1412 00ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1413              		.loc 1 1213 56
 1414 00cc 9B05     		lsls	r3, r3, #22
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1415              		.loc 1 1212 79
 1416 00ce 1A43     		orrs	r2, r2, r3
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1417              		.loc 1 1214 32
 1418 00d0 BB68     		ldr	r3, [r7, #8]
 1419 00d2 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1420              		.loc 1 1214 56
 1421 00d6 1B06     		lsls	r3, r3, #24
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1422              		.loc 1 1213 79
 1423 00d8 1A43     		orrs	r2, r2, r3
1215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1424              		.loc 1 1215 32
 1425 00da BB68     		ldr	r3, [r7, #8]
 1426 00dc DB69     		ldr	r3, [r3, #28]
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1427              		.loc 1 1214 79
 1428 00de 1A43     		orrs	r2, r2, r3
1216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1429              		.loc 1 1216 32
 1430 00e0 BB68     		ldr	r3, [r7, #8]
 1431 00e2 5B69     		ldr	r3, [r3, #20]
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1432              		.loc 1 1210 12
 1433 00e4 1343     		orrs	r3, r3, r2
 1434 00e6 FB61     		str	r3, [r7, #28]
 1435              	.L54:
1217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1436              		.loc 1 1220 60
 1437 00e8 BB68     		ldr	r3, [r7, #8]
 1438 00ea 5A68     		ldr	r2, [r3, #4]
 1439              		.loc 1 1220 92
 1440 00ec BB68     		ldr	r3, [r7, #8]
 1441 00ee 9B69     		ldr	r3, [r3, #24]
 1442              		.loc 1 1220 19
 1443 00f0 1343     		orrs	r3, r3, r2
 1444 00f2 BB61     		str	r3, [r7, #24]
1221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1445              		.loc 1 1223 3
ARM GAS  /tmp/cc1iTjg2.s 			page 48


 1446 00f4 FB68     		ldr	r3, [r7, #12]
 1447 00f6 1B68     		ldr	r3, [r3]
 1448 00f8 CA22     		movs	r2, #202
 1449 00fa 5A62     		str	r2, [r3, #36]
 1450 00fc FB68     		ldr	r3, [r7, #12]
 1451 00fe 1B68     		ldr	r3, [r3]
 1452 0100 5322     		movs	r2, #83
 1453 0102 5A62     		str	r2, [r3, #36]
1224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1454              		.loc 1 1226 12
 1455 0104 BB68     		ldr	r3, [r7, #8]
 1456 0106 5B6A     		ldr	r3, [r3, #36]
 1457              		.loc 1 1226 5
 1458 0108 B3F5807F 		cmp	r3, #256
 1459 010c 4AD1     		bne	.L56
1227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1460              		.loc 1 1229 5
 1461 010e FB68     		ldr	r3, [r7, #12]
 1462 0110 1B68     		ldr	r3, [r3]
 1463 0112 9A68     		ldr	r2, [r3, #8]
 1464 0114 FB68     		ldr	r3, [r7, #12]
 1465 0116 1B68     		ldr	r3, [r3]
 1466 0118 22F48072 		bic	r2, r2, #256
 1467 011c 9A60     		str	r2, [r3, #8]
1230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1468              		.loc 1 1231 5
 1469 011e FB68     		ldr	r3, [r7, #12]
 1470 0120 1B68     		ldr	r3, [r3]
 1471 0122 DB68     		ldr	r3, [r3, #12]
 1472 0124 DAB2     		uxtb	r2, r3
 1473 0126 FB68     		ldr	r3, [r7, #12]
 1474 0128 1B68     		ldr	r3, [r3]
 1475 012a 62F4C072 		orn	r2, r2, #384
 1476 012e DA60     		str	r2, [r3, #12]
1232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1477              		.loc 1 1233 5
 1478 0130 FB68     		ldr	r3, [r7, #12]
 1479 0132 1B68     		ldr	r3, [r3]
 1480 0134 9A68     		ldr	r2, [r3, #8]
 1481 0136 FB68     		ldr	r3, [r7, #12]
 1482 0138 1B68     		ldr	r3, [r3]
 1483 013a 22F48052 		bic	r2, r2, #4096
 1484 013e 9A60     		str	r2, [r3, #8]
1234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1485              		.loc 1 1235 17
 1486 0140 FFF7FEFF 		bl	HAL_GetTick
 1487 0144 7861     		str	r0, [r7, #20]
1236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRAWF)
1238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
ARM GAS  /tmp/cc1iTjg2.s 			page 49


1239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRAWF */
1240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRAWF)
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 1488              		.loc 1 1241 10
 1489 0146 15E0     		b	.L57
 1490              	.L58:
1242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
1243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1491              		.loc 1 1244 11
 1492 0148 FFF7FEFF 		bl	HAL_GetTick
 1493 014c 0246     		mov	r2, r0
 1494              		.loc 1 1244 25
 1495 014e 7B69     		ldr	r3, [r7, #20]
 1496 0150 D31A     		subs	r3, r2, r3
 1497              		.loc 1 1244 9
 1498 0152 B3F57A7F 		cmp	r3, #1000
 1499 0156 0DD9     		bls	.L57
1245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1500              		.loc 1 1247 9
 1501 0158 FB68     		ldr	r3, [r7, #12]
 1502 015a 1B68     		ldr	r3, [r3]
 1503 015c FF22     		movs	r2, #255
 1504 015e 5A62     		str	r2, [r3, #36]
1248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1505              		.loc 1 1249 21
 1506 0160 FB68     		ldr	r3, [r7, #12]
 1507 0162 0322     		movs	r2, #3
 1508 0164 83F82120 		strb	r2, [r3, #33]
1250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1509              		.loc 1 1252 9
 1510 0168 FB68     		ldr	r3, [r7, #12]
 1511 016a 0022     		movs	r2, #0
 1512 016c 83F82020 		strb	r2, [r3, #32]
1253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1513              		.loc 1 1254 16
 1514 0170 0323     		movs	r3, #3
 1515 0172 6EE0     		b	.L51
 1516              	.L57:
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1517              		.loc 1 1241 11
 1518 0174 FB68     		ldr	r3, [r7, #12]
 1519 0176 1B68     		ldr	r3, [r3]
 1520 0178 DB68     		ldr	r3, [r3, #12]
 1521 017a 03F00103 		and	r3, r3, #1
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1522              		.loc 1 1241 10
 1523 017e 002B     		cmp	r3, #0
 1524 0180 E2D0     		beq	.L58
1255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
ARM GAS  /tmp/cc1iTjg2.s 			page 50


1257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1525              		.loc 1 1258 9
 1526 0182 FB68     		ldr	r3, [r7, #12]
 1527 0184 1B68     		ldr	r3, [r3]
 1528              		.loc 1 1258 28
 1529 0186 FA69     		ldr	r2, [r7, #28]
 1530 0188 DA61     		str	r2, [r3, #28]
1259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1531              		.loc 1 1260 9
 1532 018a FB68     		ldr	r3, [r7, #12]
 1533 018c 1B68     		ldr	r3, [r3]
 1534              		.loc 1 1260 30
 1535 018e BA69     		ldr	r2, [r7, #24]
 1536 0190 5A64     		str	r2, [r3, #68]
1261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1537              		.loc 1 1262 5
 1538 0192 FB68     		ldr	r3, [r7, #12]
 1539 0194 1B68     		ldr	r3, [r3]
 1540 0196 9A68     		ldr	r2, [r3, #8]
 1541 0198 FB68     		ldr	r3, [r7, #12]
 1542 019a 1B68     		ldr	r3, [r3]
 1543 019c 42F48072 		orr	r2, r2, #256
 1544 01a0 9A60     		str	r2, [r3, #8]
 1545 01a2 49E0     		b	.L59
 1546              	.L56:
1263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1547              		.loc 1 1267 5
 1548 01a4 FB68     		ldr	r3, [r7, #12]
 1549 01a6 1B68     		ldr	r3, [r3]
 1550 01a8 9A68     		ldr	r2, [r3, #8]
 1551 01aa FB68     		ldr	r3, [r7, #12]
 1552 01ac 1B68     		ldr	r3, [r3]
 1553 01ae 22F40072 		bic	r2, r2, #512
 1554 01b2 9A60     		str	r2, [r3, #8]
1268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1555              		.loc 1 1269 5
 1556 01b4 FB68     		ldr	r3, [r7, #12]
 1557 01b6 1B68     		ldr	r3, [r3]
 1558 01b8 DB68     		ldr	r3, [r3, #12]
 1559 01ba DAB2     		uxtb	r2, r3
 1560 01bc FB68     		ldr	r3, [r7, #12]
 1561 01be 1B68     		ldr	r3, [r3]
 1562 01c0 62F42072 		orn	r2, r2, #640
 1563 01c4 DA60     		str	r2, [r3, #12]
1270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1564              		.loc 1 1271 5
 1565 01c6 FB68     		ldr	r3, [r7, #12]
 1566 01c8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc1iTjg2.s 			page 51


 1567 01ca 9A68     		ldr	r2, [r3, #8]
 1568 01cc FB68     		ldr	r3, [r7, #12]
 1569 01ce 1B68     		ldr	r3, [r3]
 1570 01d0 22F40052 		bic	r2, r2, #8192
 1571 01d4 9A60     		str	r2, [r3, #8]
1272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1572              		.loc 1 1273 17
 1573 01d6 FFF7FEFF 		bl	HAL_GetTick
 1574 01da 7861     		str	r0, [r7, #20]
1274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRBWF)
1276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRBWF */
1278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRBWF)
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 1575              		.loc 1 1279 10
 1576 01dc 15E0     		b	.L60
 1577              	.L61:
1280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRBWF */
1281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1578              		.loc 1 1282 11
 1579 01de FFF7FEFF 		bl	HAL_GetTick
 1580 01e2 0246     		mov	r2, r0
 1581              		.loc 1 1282 25
 1582 01e4 7B69     		ldr	r3, [r7, #20]
 1583 01e6 D31A     		subs	r3, r2, r3
 1584              		.loc 1 1282 9
 1585 01e8 B3F57A7F 		cmp	r3, #1000
 1586 01ec 0DD9     		bls	.L60
1283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1587              		.loc 1 1285 9
 1588 01ee FB68     		ldr	r3, [r7, #12]
 1589 01f0 1B68     		ldr	r3, [r3]
 1590 01f2 FF22     		movs	r2, #255
 1591 01f4 5A62     		str	r2, [r3, #36]
1286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1592              		.loc 1 1287 21
 1593 01f6 FB68     		ldr	r3, [r7, #12]
 1594 01f8 0322     		movs	r2, #3
 1595 01fa 83F82120 		strb	r2, [r3, #33]
1288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1596              		.loc 1 1290 9
 1597 01fe FB68     		ldr	r3, [r7, #12]
 1598 0200 0022     		movs	r2, #0
 1599 0202 83F82020 		strb	r2, [r3, #32]
1291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1600              		.loc 1 1292 16
 1601 0206 0323     		movs	r3, #3
 1602 0208 23E0     		b	.L51
ARM GAS  /tmp/cc1iTjg2.s 			page 52


 1603              	.L60:
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRBWF */
 1604              		.loc 1 1279 11
 1605 020a FB68     		ldr	r3, [r7, #12]
 1606 020c 1B68     		ldr	r3, [r3]
 1607 020e DB68     		ldr	r3, [r3, #12]
 1608 0210 03F00203 		and	r3, r3, #2
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRBWF */
 1609              		.loc 1 1279 10
 1610 0214 002B     		cmp	r3, #0
 1611 0216 E2D0     		beq	.L61
1293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1612              		.loc 1 1296 9
 1613 0218 FB68     		ldr	r3, [r7, #12]
 1614 021a 1B68     		ldr	r3, [r3]
 1615              		.loc 1 1296 28
 1616 021c FA69     		ldr	r2, [r7, #28]
 1617 021e 1A62     		str	r2, [r3, #32]
1297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1618              		.loc 1 1298 9
 1619 0220 FB68     		ldr	r3, [r7, #12]
 1620 0222 1B68     		ldr	r3, [r3]
 1621              		.loc 1 1298 30
 1622 0224 BA69     		ldr	r2, [r7, #24]
 1623 0226 9A64     		str	r2, [r3, #72]
1299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 1624              		.loc 1 1300 5
 1625 0228 FB68     		ldr	r3, [r7, #12]
 1626 022a 1B68     		ldr	r3, [r3]
 1627 022c 9A68     		ldr	r2, [r3, #8]
 1628 022e FB68     		ldr	r3, [r7, #12]
 1629 0230 1B68     		ldr	r3, [r3]
 1630 0232 42F40072 		orr	r2, r2, #512
 1631 0236 9A60     		str	r2, [r3, #8]
 1632              	.L59:
1301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1633              		.loc 1 1304 3
 1634 0238 FB68     		ldr	r3, [r7, #12]
 1635 023a 1B68     		ldr	r3, [r3]
 1636 023c FF22     		movs	r2, #255
 1637 023e 5A62     		str	r2, [r3, #36]
1305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1638              		.loc 1 1307 15
 1639 0240 FB68     		ldr	r3, [r7, #12]
 1640 0242 0122     		movs	r2, #1
 1641 0244 83F82120 		strb	r2, [r3, #33]
1308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 53


1309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1642              		.loc 1 1310 3
 1643 0248 FB68     		ldr	r3, [r7, #12]
 1644 024a 0022     		movs	r2, #0
 1645 024c 83F82020 		strb	r2, [r3, #32]
1311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 1646              		.loc 1 1312 10
 1647 0250 0023     		movs	r3, #0
 1648              	.L51:
1313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1649              		.loc 1 1313 1
 1650 0252 1846     		mov	r0, r3
 1651 0254 2437     		adds	r7, r7, #36
 1652              	.LCFI45:
 1653              		.cfi_def_cfa_offset 12
 1654 0256 BD46     		mov	sp, r7
 1655              	.LCFI46:
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 0258 90BD     		pop	{r4, r7, pc}
 1659              		.cfi_endproc
 1660              	.LFE339:
 1662              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1663              		.align	1
 1664              		.global	HAL_RTC_SetAlarm_IT
 1665              		.syntax unified
 1666              		.thumb
 1667              		.thumb_func
 1668              		.fpu fpv5-d16
 1670              	HAL_RTC_SetAlarm_IT:
 1671              	.LFB340:
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1672              		.loc 1 1329 1
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 32
 1675              		@ frame_needed = 1, uses_anonymous_args = 0
 1676 0000 90B5     		push	{r4, r7, lr}
 1677              	.LCFI47:
 1678              		.cfi_def_cfa_offset 12
 1679              		.cfi_offset 4, -12
ARM GAS  /tmp/cc1iTjg2.s 			page 54


 1680              		.cfi_offset 7, -8
 1681              		.cfi_offset 14, -4
 1682 0002 89B0     		sub	sp, sp, #36
 1683              	.LCFI48:
 1684              		.cfi_def_cfa_offset 48
 1685 0004 00AF     		add	r7, sp, #0
 1686              	.LCFI49:
 1687              		.cfi_def_cfa_register 7
 1688 0006 F860     		str	r0, [r7, #12]
 1689 0008 B960     		str	r1, [r7, #8]
 1690 000a 7A60     		str	r2, [r7, #4]
1330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1691              		.loc 1 1343 3
 1692 000c FB68     		ldr	r3, [r7, #12]
 1693 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1694 0012 012B     		cmp	r3, #1
 1695 0014 01D1     		bne	.L63
 1696              		.loc 1 1343 3 is_stmt 0 discriminator 1
 1697 0016 0223     		movs	r3, #2
 1698 0018 23E1     		b	.L64
 1699              	.L63:
 1700              		.loc 1 1343 3 discriminator 2
 1701 001a FB68     		ldr	r3, [r7, #12]
 1702 001c 0122     		movs	r2, #1
 1703 001e 83F82020 		strb	r2, [r3, #32]
1344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1704              		.loc 1 1345 15 is_stmt 1 discriminator 2
 1705 0022 FB68     		ldr	r3, [r7, #12]
 1706 0024 0222     		movs	r2, #2
 1707 0026 83F82120 		strb	r2, [r3, #33]
1346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1708              		.loc 1 1347 5 discriminator 2
 1709 002a 7B68     		ldr	r3, [r7, #4]
 1710 002c 002B     		cmp	r3, #0
 1711 002e 37D1     		bne	.L65
1348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1712              		.loc 1 1349 13
 1713 0030 FB68     		ldr	r3, [r7, #12]
 1714 0032 1B68     		ldr	r3, [r3]
 1715              		.loc 1 1349 23
 1716 0034 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/cc1iTjg2.s 			page 55


 1717              		.loc 1 1349 28
 1718 0036 03F04003 		and	r3, r3, #64
 1719              		.loc 1 1349 7
 1720 003a 002B     		cmp	r3, #0
 1721 003c 02D1     		bne	.L66
1350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1722              		.loc 1 1356 36
 1723 003e BB68     		ldr	r3, [r7, #8]
 1724 0040 0022     		movs	r2, #0
 1725 0042 DA70     		strb	r2, [r3, #3]
 1726              	.L66:
1357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 1727              		.loc 1 1371 26
 1728 0044 BB68     		ldr	r3, [r7, #8]
 1729 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1730 0048 1846     		mov	r0, r3
 1731 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1732 004e 0346     		mov	r3, r0
 1733              		.loc 1 1371 68
 1734 0050 1C04     		lsls	r4, r3, #16
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1735              		.loc 1 1372 26
 1736 0052 BB68     		ldr	r3, [r7, #8]
 1737 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1738 0056 1846     		mov	r0, r3
 1739 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1740 005c 0346     		mov	r3, r0
 1741              		.loc 1 1372 68
 1742 005e 1B02     		lsls	r3, r3, #8
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1743              		.loc 1 1371 91
 1744 0060 1C43     		orrs	r4, r4, r3
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1745              		.loc 1 1373 26
 1746 0062 BB68     		ldr	r3, [r7, #8]
 1747 0064 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1748 0066 1846     		mov	r0, r3
ARM GAS  /tmp/cc1iTjg2.s 			page 56


 1749 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 1750 006c 0346     		mov	r3, r0
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1751              		.loc 1 1372 91
 1752 006e 44EA0302 		orr	r2, r4, r3
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1753              		.loc 1 1374 43
 1754 0072 BB68     		ldr	r3, [r7, #8]
 1755 0074 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1756              		.loc 1 1374 68
 1757 0076 9B05     		lsls	r3, r3, #22
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1758              		.loc 1 1373 91
 1759 0078 42EA0304 		orr	r4, r2, r3
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1760              		.loc 1 1375 26
 1761 007c BB68     		ldr	r3, [r7, #8]
 1762 007e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1763 0082 1846     		mov	r0, r3
 1764 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1765 0088 0346     		mov	r3, r0
 1766              		.loc 1 1375 68
 1767 008a 1B06     		lsls	r3, r3, #24
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1768              		.loc 1 1374 91
 1769 008c 44EA0302 		orr	r2, r4, r3
1376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1770              		.loc 1 1376 32
 1771 0090 BB68     		ldr	r3, [r7, #8]
 1772 0092 DB69     		ldr	r3, [r3, #28]
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1773              		.loc 1 1375 91
 1774 0094 1A43     		orrs	r2, r2, r3
1377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1775              		.loc 1 1377 32
 1776 0096 BB68     		ldr	r3, [r7, #8]
 1777 0098 5B69     		ldr	r3, [r3, #20]
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1778              		.loc 1 1371 12
 1779 009a 1343     		orrs	r3, r3, r2
 1780 009c FB61     		str	r3, [r7, #28]
 1781 009e 23E0     		b	.L67
 1782              	.L65:
1378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 1783              		.loc 1 1381 13
 1784 00a0 FB68     		ldr	r3, [r7, #12]
 1785 00a2 1B68     		ldr	r3, [r3]
 1786              		.loc 1 1381 23
 1787 00a4 9B68     		ldr	r3, [r3, #8]
 1788              		.loc 1 1381 28
 1789 00a6 03F04003 		and	r3, r3, #64
 1790              		.loc 1 1381 7
 1791 00aa 002B     		cmp	r3, #0
 1792 00ac 02D1     		bne	.L68
ARM GAS  /tmp/cc1iTjg2.s 			page 57


1382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1793              		.loc 1 1388 36
 1794 00ae BB68     		ldr	r3, [r7, #8]
 1795 00b0 0022     		movs	r2, #0
 1796 00b2 DA70     		strb	r2, [r3, #3]
 1797              	.L68:
1389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 1798              		.loc 1 1404 43
 1799 00b4 BB68     		ldr	r3, [r7, #8]
 1800 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1801              		.loc 1 1404 56
 1802 00b8 1A04     		lsls	r2, r3, #16
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1803              		.loc 1 1405 43
 1804 00ba BB68     		ldr	r3, [r7, #8]
 1805 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1806              		.loc 1 1405 56
 1807 00be 1B02     		lsls	r3, r3, #8
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1808              		.loc 1 1404 79
 1809 00c0 1343     		orrs	r3, r3, r2
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1810              		.loc 1 1406 43
 1811 00c2 BA68     		ldr	r2, [r7, #8]
 1812 00c4 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1813              		.loc 1 1405 79
 1814 00c6 1A43     		orrs	r2, r2, r3
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1815              		.loc 1 1407 43
 1816 00c8 BB68     		ldr	r3, [r7, #8]
 1817 00ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1818              		.loc 1 1407 56
 1819 00cc 9B05     		lsls	r3, r3, #22
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1820              		.loc 1 1406 79
ARM GAS  /tmp/cc1iTjg2.s 			page 58


 1821 00ce 1A43     		orrs	r2, r2, r3
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1822              		.loc 1 1408 32
 1823 00d0 BB68     		ldr	r3, [r7, #8]
 1824 00d2 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1825              		.loc 1 1408 56
 1826 00d6 1B06     		lsls	r3, r3, #24
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1827              		.loc 1 1407 79
 1828 00d8 1A43     		orrs	r2, r2, r3
1409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1829              		.loc 1 1409 32
 1830 00da BB68     		ldr	r3, [r7, #8]
 1831 00dc DB69     		ldr	r3, [r3, #28]
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1832              		.loc 1 1408 79
 1833 00de 1A43     		orrs	r2, r2, r3
1410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1834              		.loc 1 1410 32
 1835 00e0 BB68     		ldr	r3, [r7, #8]
 1836 00e2 5B69     		ldr	r3, [r3, #20]
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1837              		.loc 1 1404 12
 1838 00e4 1343     		orrs	r3, r3, r2
 1839 00e6 FB61     		str	r3, [r7, #28]
 1840              	.L67:
1411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1841              		.loc 1 1413 60
 1842 00e8 BB68     		ldr	r3, [r7, #8]
 1843 00ea 5A68     		ldr	r2, [r3, #4]
 1844              		.loc 1 1413 92
 1845 00ec BB68     		ldr	r3, [r7, #8]
 1846 00ee 9B69     		ldr	r3, [r3, #24]
 1847              		.loc 1 1413 19
 1848 00f0 1343     		orrs	r3, r3, r2
 1849 00f2 BB61     		str	r3, [r7, #24]
1414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1850              		.loc 1 1416 3
 1851 00f4 FB68     		ldr	r3, [r7, #12]
 1852 00f6 1B68     		ldr	r3, [r3]
 1853 00f8 CA22     		movs	r2, #202
 1854 00fa 5A62     		str	r2, [r3, #36]
 1855 00fc FB68     		ldr	r3, [r7, #12]
 1856 00fe 1B68     		ldr	r3, [r3]
 1857 0100 5322     		movs	r2, #83
 1858 0102 5A62     		str	r2, [r3, #36]
1417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1859              		.loc 1 1419 12
 1860 0104 BB68     		ldr	r3, [r7, #8]
 1861 0106 5B6A     		ldr	r3, [r3, #36]
 1862              		.loc 1 1419 5
ARM GAS  /tmp/cc1iTjg2.s 			page 59


 1863 0108 B3F5807F 		cmp	r3, #256
 1864 010c 4AD1     		bne	.L69
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1865              		.loc 1 1422 5
 1866 010e FB68     		ldr	r3, [r7, #12]
 1867 0110 1B68     		ldr	r3, [r3]
 1868 0112 9A68     		ldr	r2, [r3, #8]
 1869 0114 FB68     		ldr	r3, [r7, #12]
 1870 0116 1B68     		ldr	r3, [r3]
 1871 0118 22F48072 		bic	r2, r2, #256
 1872 011c 9A60     		str	r2, [r3, #8]
1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1873              		.loc 1 1425 5
 1874 011e FB68     		ldr	r3, [r7, #12]
 1875 0120 1B68     		ldr	r3, [r3]
 1876 0122 DB68     		ldr	r3, [r3, #12]
 1877 0124 DAB2     		uxtb	r2, r3
 1878 0126 FB68     		ldr	r3, [r7, #12]
 1879 0128 1B68     		ldr	r3, [r3]
 1880 012a 62F4C072 		orn	r2, r2, #384
 1881 012e DA60     		str	r2, [r3, #12]
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1882              		.loc 1 1427 17
 1883 0130 FFF7FEFF 		bl	HAL_GetTick
 1884 0134 7861     		str	r0, [r7, #20]
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRAWF)
1430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRAWF */
1432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRAWF)
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 1885              		.loc 1 1433 10
 1886 0136 15E0     		b	.L70
 1887              	.L71:
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
1435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1888              		.loc 1 1436 11
 1889 0138 FFF7FEFF 		bl	HAL_GetTick
 1890 013c 0246     		mov	r2, r0
 1891              		.loc 1 1436 25
 1892 013e 7B69     		ldr	r3, [r7, #20]
 1893 0140 D31A     		subs	r3, r2, r3
 1894              		.loc 1 1436 9
 1895 0142 B3F57A7F 		cmp	r3, #1000
 1896 0146 0DD9     		bls	.L70
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1897              		.loc 1 1439 9
 1898 0148 FB68     		ldr	r3, [r7, #12]
 1899 014a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc1iTjg2.s 			page 60


 1900 014c FF22     		movs	r2, #255
 1901 014e 5A62     		str	r2, [r3, #36]
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1902              		.loc 1 1441 21
 1903 0150 FB68     		ldr	r3, [r7, #12]
 1904 0152 0322     		movs	r2, #3
 1905 0154 83F82120 		strb	r2, [r3, #33]
1442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1906              		.loc 1 1444 9
 1907 0158 FB68     		ldr	r3, [r7, #12]
 1908 015a 0022     		movs	r2, #0
 1909 015c 83F82020 		strb	r2, [r3, #32]
1445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1910              		.loc 1 1446 16
 1911 0160 0323     		movs	r3, #3
 1912 0162 7EE0     		b	.L64
 1913              	.L70:
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1914              		.loc 1 1433 11
 1915 0164 FB68     		ldr	r3, [r7, #12]
 1916 0166 1B68     		ldr	r3, [r3]
 1917 0168 DB68     		ldr	r3, [r3, #12]
 1918 016a 03F00103 		and	r3, r3, #1
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1919              		.loc 1 1433 10
 1920 016e 002B     		cmp	r3, #0
 1921 0170 E2D0     		beq	.L71
1447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1922              		.loc 1 1450 9
 1923 0172 FB68     		ldr	r3, [r7, #12]
 1924 0174 1B68     		ldr	r3, [r3]
 1925              		.loc 1 1450 28
 1926 0176 FA69     		ldr	r2, [r7, #28]
 1927 0178 DA61     		str	r2, [r3, #28]
1451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1928              		.loc 1 1452 9
 1929 017a FB68     		ldr	r3, [r7, #12]
 1930 017c 1B68     		ldr	r3, [r3]
 1931              		.loc 1 1452 30
 1932 017e BA69     		ldr	r2, [r7, #24]
 1933 0180 5A64     		str	r2, [r3, #68]
1453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1934              		.loc 1 1454 5
 1935 0182 FB68     		ldr	r3, [r7, #12]
 1936 0184 1B68     		ldr	r3, [r3]
 1937 0186 9A68     		ldr	r2, [r3, #8]
 1938 0188 FB68     		ldr	r3, [r7, #12]
 1939 018a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc1iTjg2.s 			page 61


 1940 018c 42F48072 		orr	r2, r2, #256
 1941 0190 9A60     		str	r2, [r3, #8]
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 1942              		.loc 1 1456 5
 1943 0192 FB68     		ldr	r3, [r7, #12]
 1944 0194 1B68     		ldr	r3, [r3]
 1945 0196 9A68     		ldr	r2, [r3, #8]
 1946 0198 FB68     		ldr	r3, [r7, #12]
 1947 019a 1B68     		ldr	r3, [r3]
 1948 019c 42F48052 		orr	r2, r2, #4096
 1949 01a0 9A60     		str	r2, [r3, #8]
 1950 01a2 49E0     		b	.L72
 1951              	.L69:
1457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1952              		.loc 1 1461 5
 1953 01a4 FB68     		ldr	r3, [r7, #12]
 1954 01a6 1B68     		ldr	r3, [r3]
 1955 01a8 9A68     		ldr	r2, [r3, #8]
 1956 01aa FB68     		ldr	r3, [r7, #12]
 1957 01ac 1B68     		ldr	r3, [r3]
 1958 01ae 22F40072 		bic	r2, r2, #512
 1959 01b2 9A60     		str	r2, [r3, #8]
1462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1960              		.loc 1 1464 5
 1961 01b4 FB68     		ldr	r3, [r7, #12]
 1962 01b6 1B68     		ldr	r3, [r3]
 1963 01b8 DB68     		ldr	r3, [r3, #12]
 1964 01ba DAB2     		uxtb	r2, r3
 1965 01bc FB68     		ldr	r3, [r7, #12]
 1966 01be 1B68     		ldr	r3, [r3]
 1967 01c0 62F42072 		orn	r2, r2, #640
 1968 01c4 DA60     		str	r2, [r3, #12]
1465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1969              		.loc 1 1466 17
 1970 01c6 FFF7FEFF 		bl	HAL_GetTick
 1971 01ca 7861     		str	r0, [r7, #20]
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRBWF)
1469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRBWF */
1471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBWF)
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 1972              		.loc 1 1472 10
 1973 01cc 15E0     		b	.L73
 1974              	.L74:
1473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
1474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 1975              		.loc 1 1475 11
ARM GAS  /tmp/cc1iTjg2.s 			page 62


 1976 01ce FFF7FEFF 		bl	HAL_GetTick
 1977 01d2 0246     		mov	r2, r0
 1978              		.loc 1 1475 25
 1979 01d4 7B69     		ldr	r3, [r7, #20]
 1980 01d6 D31A     		subs	r3, r2, r3
 1981              		.loc 1 1475 9
 1982 01d8 B3F57A7F 		cmp	r3, #1000
 1983 01dc 0DD9     		bls	.L73
1476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1984              		.loc 1 1478 9
 1985 01de FB68     		ldr	r3, [r7, #12]
 1986 01e0 1B68     		ldr	r3, [r3]
 1987 01e2 FF22     		movs	r2, #255
 1988 01e4 5A62     		str	r2, [r3, #36]
1479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1989              		.loc 1 1480 21
 1990 01e6 FB68     		ldr	r3, [r7, #12]
 1991 01e8 0322     		movs	r2, #3
 1992 01ea 83F82120 		strb	r2, [r3, #33]
1481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1993              		.loc 1 1483 9
 1994 01ee FB68     		ldr	r3, [r7, #12]
 1995 01f0 0022     		movs	r2, #0
 1996 01f2 83F82020 		strb	r2, [r3, #32]
1484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1997              		.loc 1 1485 16
 1998 01f6 0323     		movs	r3, #3
 1999 01f8 33E0     		b	.L64
 2000              	.L73:
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
 2001              		.loc 1 1472 11
 2002 01fa FB68     		ldr	r3, [r7, #12]
 2003 01fc 1B68     		ldr	r3, [r3]
 2004 01fe DB68     		ldr	r3, [r3, #12]
 2005 0200 03F00203 		and	r3, r3, #2
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
 2006              		.loc 1 1472 10
 2007 0204 002B     		cmp	r3, #0
 2008 0206 E2D0     		beq	.L74
1486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2009              		.loc 1 1489 9
 2010 0208 FB68     		ldr	r3, [r7, #12]
 2011 020a 1B68     		ldr	r3, [r3]
 2012              		.loc 1 1489 28
 2013 020c FA69     		ldr	r2, [r7, #28]
 2014 020e 1A62     		str	r2, [r3, #32]
1490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
ARM GAS  /tmp/cc1iTjg2.s 			page 63


 2015              		.loc 1 1491 9
 2016 0210 FB68     		ldr	r3, [r7, #12]
 2017 0212 1B68     		ldr	r3, [r3]
 2018              		.loc 1 1491 30
 2019 0214 BA69     		ldr	r2, [r7, #24]
 2020 0216 9A64     		str	r2, [r3, #72]
1492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2021              		.loc 1 1493 5
 2022 0218 FB68     		ldr	r3, [r7, #12]
 2023 021a 1B68     		ldr	r3, [r3]
 2024 021c 9A68     		ldr	r2, [r3, #8]
 2025 021e FB68     		ldr	r3, [r7, #12]
 2026 0220 1B68     		ldr	r3, [r3]
 2027 0222 42F40072 		orr	r2, r2, #512
 2028 0226 9A60     		str	r2, [r3, #8]
1494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2029              		.loc 1 1495 5
 2030 0228 FB68     		ldr	r3, [r7, #12]
 2031 022a 1B68     		ldr	r3, [r3]
 2032 022c 9A68     		ldr	r2, [r3, #8]
 2033 022e FB68     		ldr	r3, [r7, #12]
 2034 0230 1B68     		ldr	r3, [r3]
 2035 0232 42F40052 		orr	r2, r2, #8192
 2036 0236 9A60     		str	r2, [r3, #8]
 2037              	.L72:
1496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if !defined(DUAL_CORE)
1499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
1502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 2038              		.loc 1 1503 3
 2039 0238 4FF0B043 		mov	r3, #1476395008
 2040 023c 1B68     		ldr	r3, [r3]
 2041 023e 4FF0B042 		mov	r2, #1476395008
 2042 0242 43F40033 		orr	r3, r3, #131072
 2043 0246 1360     		str	r3, [r2]
1504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2044              		.loc 1 1506 3
 2045 0248 FB68     		ldr	r3, [r7, #12]
 2046 024a 1B68     		ldr	r3, [r3]
 2047 024c FF22     		movs	r2, #255
 2048 024e 5A62     		str	r2, [r3, #36]
1507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2049              		.loc 1 1508 15
 2050 0250 FB68     		ldr	r3, [r7, #12]
 2051 0252 0122     		movs	r2, #1
 2052 0254 83F82120 		strb	r2, [r3, #33]
1509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
ARM GAS  /tmp/cc1iTjg2.s 			page 64


1511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2053              		.loc 1 1511 3
 2054 0258 FB68     		ldr	r3, [r7, #12]
 2055 025a 0022     		movs	r2, #0
 2056 025c 83F82020 		strb	r2, [r3, #32]
1512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2057              		.loc 1 1513 10
 2058 0260 0023     		movs	r3, #0
 2059              	.L64:
1514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2060              		.loc 1 1514 1
 2061 0262 1846     		mov	r0, r3
 2062 0264 2437     		adds	r7, r7, #36
 2063              	.LCFI50:
 2064              		.cfi_def_cfa_offset 12
 2065 0266 BD46     		mov	sp, r7
 2066              	.LCFI51:
 2067              		.cfi_def_cfa_register 13
 2068              		@ sp needed
 2069 0268 90BD     		pop	{r4, r7, pc}
 2070              		.cfi_endproc
 2071              	.LFE340:
 2073              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2074              		.align	1
 2075              		.global	HAL_RTC_DeactivateAlarm
 2076              		.syntax unified
 2077              		.thumb
 2078              		.thumb_func
 2079              		.fpu fpv5-d16
 2081              	HAL_RTC_DeactivateAlarm:
 2082              	.LFB341:
1515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
1518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2083              		.loc 1 1526 1
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 16
 2086              		@ frame_needed = 1, uses_anonymous_args = 0
 2087 0000 80B5     		push	{r7, lr}
 2088              	.LCFI52:
 2089              		.cfi_def_cfa_offset 8
 2090              		.cfi_offset 7, -8
 2091              		.cfi_offset 14, -4
 2092 0002 84B0     		sub	sp, sp, #16
 2093              	.LCFI53:
 2094              		.cfi_def_cfa_offset 24
 2095 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc1iTjg2.s 			page 65


 2096              	.LCFI54:
 2097              		.cfi_def_cfa_register 7
 2098 0006 7860     		str	r0, [r7, #4]
 2099 0008 3960     		str	r1, [r7]
1527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2100              		.loc 1 1533 3
 2101 000a 7B68     		ldr	r3, [r7, #4]
 2102 000c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2103 0010 012B     		cmp	r3, #1
 2104 0012 01D1     		bne	.L76
 2105              		.loc 1 1533 3 is_stmt 0 discriminator 1
 2106 0014 0223     		movs	r3, #2
 2107 0016 83E0     		b	.L77
 2108              	.L76:
 2109              		.loc 1 1533 3 discriminator 2
 2110 0018 7B68     		ldr	r3, [r7, #4]
 2111 001a 0122     		movs	r2, #1
 2112 001c 83F82020 		strb	r2, [r3, #32]
1534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2113              		.loc 1 1535 15 is_stmt 1 discriminator 2
 2114 0020 7B68     		ldr	r3, [r7, #4]
 2115 0022 0222     		movs	r2, #2
 2116 0024 83F82120 		strb	r2, [r3, #33]
1536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2117              		.loc 1 1538 3 discriminator 2
 2118 0028 7B68     		ldr	r3, [r7, #4]
 2119 002a 1B68     		ldr	r3, [r3]
 2120 002c CA22     		movs	r2, #202
 2121 002e 5A62     		str	r2, [r3, #36]
 2122 0030 7B68     		ldr	r3, [r7, #4]
 2123 0032 1B68     		ldr	r3, [r3]
 2124 0034 5322     		movs	r2, #83
 2125 0036 5A62     		str	r2, [r3, #36]
1539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2126              		.loc 1 1540 5 discriminator 2
 2127 0038 3B68     		ldr	r3, [r7]
 2128 003a B3F5807F 		cmp	r3, #256
 2129 003e 31D1     		bne	.L78
1541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2130              		.loc 1 1543 5
 2131 0040 7B68     		ldr	r3, [r7, #4]
 2132 0042 1B68     		ldr	r3, [r3]
 2133 0044 9A68     		ldr	r2, [r3, #8]
 2134 0046 7B68     		ldr	r3, [r7, #4]
 2135 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc1iTjg2.s 			page 66


 2136 004a 22F48072 		bic	r2, r2, #256
 2137 004e 9A60     		str	r2, [r3, #8]
1544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2138              		.loc 1 1546 5
 2139 0050 7B68     		ldr	r3, [r7, #4]
 2140 0052 1B68     		ldr	r3, [r3]
 2141 0054 9A68     		ldr	r2, [r3, #8]
 2142 0056 7B68     		ldr	r3, [r7, #4]
 2143 0058 1B68     		ldr	r3, [r3]
 2144 005a 22F48052 		bic	r2, r2, #4096
 2145 005e 9A60     		str	r2, [r3, #8]
1547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2146              		.loc 1 1548 17
 2147 0060 FFF7FEFF 		bl	HAL_GetTick
 2148 0064 F860     		str	r0, [r7, #12]
1549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRAWF)
1552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRAWF */
1554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRAWF)
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 2149              		.loc 1 1555 10
 2150 0066 15E0     		b	.L79
 2151              	.L80:
1556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAWF */
1557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 2152              		.loc 1 1558 11
 2153 0068 FFF7FEFF 		bl	HAL_GetTick
 2154 006c 0246     		mov	r2, r0
 2155              		.loc 1 1558 26
 2156 006e FB68     		ldr	r3, [r7, #12]
 2157 0070 D31A     		subs	r3, r2, r3
 2158              		.loc 1 1558 9
 2159 0072 B3F57A7F 		cmp	r3, #1000
 2160 0076 0DD9     		bls	.L79
1559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2161              		.loc 1 1561 9
 2162 0078 7B68     		ldr	r3, [r7, #4]
 2163 007a 1B68     		ldr	r3, [r3]
 2164 007c FF22     		movs	r2, #255
 2165 007e 5A62     		str	r2, [r3, #36]
1562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2166              		.loc 1 1563 21
 2167 0080 7B68     		ldr	r3, [r7, #4]
 2168 0082 0322     		movs	r2, #3
 2169 0084 83F82120 		strb	r2, [r3, #33]
1564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
ARM GAS  /tmp/cc1iTjg2.s 			page 67


 2170              		.loc 1 1566 9
 2171 0088 7B68     		ldr	r3, [r7, #4]
 2172 008a 0022     		movs	r2, #0
 2173 008c 83F82020 		strb	r2, [r3, #32]
1567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2174              		.loc 1 1568 16
 2175 0090 0323     		movs	r3, #3
 2176 0092 45E0     		b	.L77
 2177              	.L79:
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAWF */
 2178              		.loc 1 1555 11
 2179 0094 7B68     		ldr	r3, [r7, #4]
 2180 0096 1B68     		ldr	r3, [r3]
 2181 0098 DB68     		ldr	r3, [r3, #12]
 2182 009a 03F00103 		and	r3, r3, #1
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAWF */
 2183              		.loc 1 1555 10
 2184 009e 002B     		cmp	r3, #0
 2185 00a0 E2D0     		beq	.L80
 2186 00a2 30E0     		b	.L81
 2187              	.L78:
1569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmB */
1575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2188              		.loc 1 1575 5
 2189 00a4 7B68     		ldr	r3, [r7, #4]
 2190 00a6 1B68     		ldr	r3, [r3]
 2191 00a8 9A68     		ldr	r2, [r3, #8]
 2192 00aa 7B68     		ldr	r3, [r7, #4]
 2193 00ac 1B68     		ldr	r3, [r3]
 2194 00ae 22F40072 		bic	r2, r2, #512
 2195 00b2 9A60     		str	r2, [r3, #8]
1576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 2196              		.loc 1 1578 5
 2197 00b4 7B68     		ldr	r3, [r7, #4]
 2198 00b6 1B68     		ldr	r3, [r3]
 2199 00b8 9A68     		ldr	r2, [r3, #8]
 2200 00ba 7B68     		ldr	r3, [r7, #4]
 2201 00bc 1B68     		ldr	r3, [r3]
 2202 00be 22F40052 		bic	r2, r2, #8192
 2203 00c2 9A60     		str	r2, [r3, #8]
1579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2204              		.loc 1 1580 17
 2205 00c4 FFF7FEFF 		bl	HAL_GetTick
 2206 00c8 F860     		str	r0, [r7, #12]
1581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRBWF)
1584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
ARM GAS  /tmp/cc1iTjg2.s 			page 68


1585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRBWF */
1586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBWF)
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 2207              		.loc 1 1587 10
 2208 00ca 15E0     		b	.L82
 2209              	.L83:
1588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
1589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2210              		.loc 1 1590 11
 2211 00cc FFF7FEFF 		bl	HAL_GetTick
 2212 00d0 0246     		mov	r2, r0
 2213              		.loc 1 1590 25
 2214 00d2 FB68     		ldr	r3, [r7, #12]
 2215 00d4 D31A     		subs	r3, r2, r3
 2216              		.loc 1 1590 9
 2217 00d6 B3F57A7F 		cmp	r3, #1000
 2218 00da 0DD9     		bls	.L82
1591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2219              		.loc 1 1593 9
 2220 00dc 7B68     		ldr	r3, [r7, #4]
 2221 00de 1B68     		ldr	r3, [r3]
 2222 00e0 FF22     		movs	r2, #255
 2223 00e2 5A62     		str	r2, [r3, #36]
1594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2224              		.loc 1 1595 21
 2225 00e4 7B68     		ldr	r3, [r7, #4]
 2226 00e6 0322     		movs	r2, #3
 2227 00e8 83F82120 		strb	r2, [r3, #33]
1596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2228              		.loc 1 1598 9
 2229 00ec 7B68     		ldr	r3, [r7, #4]
 2230 00ee 0022     		movs	r2, #0
 2231 00f0 83F82020 		strb	r2, [r3, #32]
1599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2232              		.loc 1 1600 16
 2233 00f4 0323     		movs	r3, #3
 2234 00f6 13E0     		b	.L77
 2235              	.L82:
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
 2236              		.loc 1 1587 11
 2237 00f8 7B68     		ldr	r3, [r7, #4]
 2238 00fa 1B68     		ldr	r3, [r3]
 2239 00fc DB68     		ldr	r3, [r3, #12]
 2240 00fe 03F00203 		and	r3, r3, #2
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
 2241              		.loc 1 1587 10
 2242 0102 002B     		cmp	r3, #0
 2243 0104 E2D0     		beq	.L83
 2244              	.L81:
1601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
ARM GAS  /tmp/cc1iTjg2.s 			page 69


1602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2245              		.loc 1 1605 3
 2246 0106 7B68     		ldr	r3, [r7, #4]
 2247 0108 1B68     		ldr	r3, [r3]
 2248 010a FF22     		movs	r2, #255
 2249 010c 5A62     		str	r2, [r3, #36]
1606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2250              		.loc 1 1607 15
 2251 010e 7B68     		ldr	r3, [r7, #4]
 2252 0110 0122     		movs	r2, #1
 2253 0112 83F82120 		strb	r2, [r3, #33]
1608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 2254              		.loc 1 1610 3
 2255 0116 7B68     		ldr	r3, [r7, #4]
 2256 0118 0022     		movs	r2, #0
 2257 011a 83F82020 		strb	r2, [r3, #32]
1611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2258              		.loc 1 1612 10
 2259 011e 0023     		movs	r3, #0
 2260              	.L77:
1613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2261              		.loc 1 1613 1
 2262 0120 1846     		mov	r0, r3
 2263 0122 1037     		adds	r7, r7, #16
 2264              	.LCFI55:
 2265              		.cfi_def_cfa_offset 8
 2266 0124 BD46     		mov	sp, r7
 2267              	.LCFI56:
 2268              		.cfi_def_cfa_register 13
 2269              		@ sp needed
 2270 0126 80BD     		pop	{r7, pc}
 2271              		.cfi_endproc
 2272              	.LFE341:
 2274              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2275              		.align	1
 2276              		.global	HAL_RTC_GetAlarm
 2277              		.syntax unified
 2278              		.thumb
 2279              		.thumb_func
 2280              		.fpu fpv5-d16
 2282              	HAL_RTC_GetAlarm:
 2283              	.LFB342:
1614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
ARM GAS  /tmp/cc1iTjg2.s 			page 70


1622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2284              		.loc 1 1630 1
 2285              		.cfi_startproc
 2286              		@ args = 0, pretend = 0, frame = 24
 2287              		@ frame_needed = 1, uses_anonymous_args = 0
 2288 0000 80B5     		push	{r7, lr}
 2289              	.LCFI57:
 2290              		.cfi_def_cfa_offset 8
 2291              		.cfi_offset 7, -8
 2292              		.cfi_offset 14, -4
 2293 0002 86B0     		sub	sp, sp, #24
 2294              	.LCFI58:
 2295              		.cfi_def_cfa_offset 32
 2296 0004 00AF     		add	r7, sp, #0
 2297              	.LCFI59:
 2298              		.cfi_def_cfa_register 7
 2299 0006 F860     		str	r0, [r7, #12]
 2300 0008 B960     		str	r1, [r7, #8]
 2301 000a 7A60     		str	r2, [r7, #4]
 2302 000c 3B60     		str	r3, [r7]
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2303              		.loc 1 1638 5
 2304 000e 7B68     		ldr	r3, [r7, #4]
 2305 0010 B3F5807F 		cmp	r3, #256
 2306 0014 43D1     		bne	.L85
1639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2307              		.loc 1 1641 19
 2308 0016 BB68     		ldr	r3, [r7, #8]
 2309 0018 4FF48072 		mov	r2, #256
 2310 001c 5A62     		str	r2, [r3, #36]
1642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2311              		.loc 1 1643 29
 2312 001e FB68     		ldr	r3, [r7, #12]
 2313 0020 1B68     		ldr	r3, [r3]
 2314              		.loc 1 1643 12
 2315 0022 DB69     		ldr	r3, [r3, #28]
 2316 0024 7B61     		str	r3, [r7, #20]
1644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 2317              		.loc 1 1644 39
ARM GAS  /tmp/cc1iTjg2.s 			page 71


 2318 0026 FB68     		ldr	r3, [r7, #12]
 2319 0028 1B68     		ldr	r3, [r3]
 2320              		.loc 1 1644 49
 2321 002a 5B6C     		ldr	r3, [r3, #68]
 2322              		.loc 1 1644 21
 2323 002c C3F30E03 		ubfx	r3, r3, #0, #15
 2324 0030 3B61     		str	r3, [r7, #16]
1645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_AL
 2325              		.loc 1 1647 91
 2326 0032 7B69     		ldr	r3, [r7, #20]
 2327 0034 1B0C     		lsrs	r3, r3, #16
 2328              		.loc 1 1647 36
 2329 0036 DBB2     		uxtb	r3, r3
 2330 0038 03F03F03 		and	r3, r3, #63
 2331 003c DAB2     		uxtb	r2, r3
 2332              		.loc 1 1647 34
 2333 003e BB68     		ldr	r3, [r7, #8]
 2334 0040 1A70     		strb	r2, [r3]
1648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_AL
 2335              		.loc 1 1648 91
 2336 0042 7B69     		ldr	r3, [r7, #20]
 2337 0044 1B0A     		lsrs	r3, r3, #8
 2338              		.loc 1 1648 36
 2339 0046 DBB2     		uxtb	r3, r3
 2340 0048 03F07F03 		and	r3, r3, #127
 2341 004c DAB2     		uxtb	r2, r3
 2342              		.loc 1 1648 34
 2343 004e BB68     		ldr	r3, [r7, #8]
 2344 0050 5A70     		strb	r2, [r3, #1]
1649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU))  >> RTC_AL
 2345              		.loc 1 1649 36
 2346 0052 7B69     		ldr	r3, [r7, #20]
 2347 0054 DBB2     		uxtb	r3, r3
 2348 0056 03F07F03 		and	r3, r3, #127
 2349 005a DAB2     		uxtb	r2, r3
 2350              		.loc 1 1649 34
 2351 005c BB68     		ldr	r3, [r7, #8]
 2352 005e 9A70     		strb	r2, [r3, #2]
1650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMAR_PM)                    >> RTC_AL
 2353              		.loc 1 1650 91
 2354 0060 7B69     		ldr	r3, [r7, #20]
 2355 0062 9B0D     		lsrs	r3, r3, #22
 2356              		.loc 1 1650 36
 2357 0064 DBB2     		uxtb	r3, r3
 2358 0066 03F00103 		and	r3, r3, #1
 2359 006a DAB2     		uxtb	r2, r3
 2360              		.loc 1 1650 34
 2361 006c BB68     		ldr	r3, [r7, #8]
 2362 006e DA70     		strb	r2, [r3, #3]
1651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2363              		.loc 1 1651 34
 2364 0070 BB68     		ldr	r3, [r7, #8]
 2365 0072 3A69     		ldr	r2, [r7, #16]
 2366 0074 5A60     		str	r2, [r3, #4]
1652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_AL
ARM GAS  /tmp/cc1iTjg2.s 			page 72


 2367              		.loc 1 1652 91
 2368 0076 7B69     		ldr	r3, [r7, #20]
 2369 0078 1B0E     		lsrs	r3, r3, #24
 2370              		.loc 1 1652 36
 2371 007a DBB2     		uxtb	r3, r3
 2372 007c 03F03F03 		and	r3, r3, #63
 2373 0080 DAB2     		uxtb	r2, r3
 2374              		.loc 1 1652 34
 2375 0082 BB68     		ldr	r3, [r7, #8]
 2376 0084 83F82020 		strb	r2, [r3, #32]
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMAR_WDSEL);
 2377              		.loc 1 1653 36
 2378 0088 7B69     		ldr	r3, [r7, #20]
 2379 008a 03F08042 		and	r2, r3, #1073741824
 2380              		.loc 1 1653 34
 2381 008e BB68     		ldr	r3, [r7, #8]
 2382 0090 DA61     		str	r2, [r3, #28]
1654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2383              		.loc 1 1654 36
 2384 0092 7B69     		ldr	r3, [r7, #20]
 2385 0094 03F08032 		and	r2, r3, #-2139062144
 2386              		.loc 1 1654 34
 2387 0098 BB68     		ldr	r3, [r7, #8]
 2388 009a 5A61     		str	r2, [r3, #20]
 2389 009c 42E0     		b	.L86
 2390              	.L85:
1655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2391              		.loc 1 1658 19
 2392 009e BB68     		ldr	r3, [r7, #8]
 2393 00a0 4FF40072 		mov	r2, #512
 2394 00a4 5A62     		str	r2, [r3, #36]
1659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2395              		.loc 1 1660 29
 2396 00a6 FB68     		ldr	r3, [r7, #12]
 2397 00a8 1B68     		ldr	r3, [r3]
 2398              		.loc 1 1660 12
 2399 00aa 1B6A     		ldr	r3, [r3, #32]
 2400 00ac 7B61     		str	r3, [r7, #20]
1661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2401              		.loc 1 1661 39
 2402 00ae FB68     		ldr	r3, [r7, #12]
 2403 00b0 1B68     		ldr	r3, [r3]
 2404              		.loc 1 1661 49
 2405 00b2 9B6C     		ldr	r3, [r3, #72]
 2406              		.loc 1 1661 21
 2407 00b4 C3F30E03 		ubfx	r3, r3, #0, #15
 2408 00b8 3B61     		str	r3, [r7, #16]
1662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMBR_HT  | RTC_ALRMBR_HU))  >> RTC_AL
 2409              		.loc 1 1664 91
 2410 00ba 7B69     		ldr	r3, [r7, #20]
 2411 00bc 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/cc1iTjg2.s 			page 73


 2412              		.loc 1 1664 36
 2413 00be DBB2     		uxtb	r3, r3
 2414 00c0 03F03F03 		and	r3, r3, #63
 2415 00c4 DAB2     		uxtb	r2, r3
 2416              		.loc 1 1664 34
 2417 00c6 BB68     		ldr	r3, [r7, #8]
 2418 00c8 1A70     		strb	r2, [r3]
1665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_AL
 2419              		.loc 1 1665 91
 2420 00ca 7B69     		ldr	r3, [r7, #20]
 2421 00cc 1B0A     		lsrs	r3, r3, #8
 2422              		.loc 1 1665 36
 2423 00ce DBB2     		uxtb	r3, r3
 2424 00d0 03F07F03 		and	r3, r3, #127
 2425 00d4 DAB2     		uxtb	r2, r3
 2426              		.loc 1 1665 34
 2427 00d6 BB68     		ldr	r3, [r7, #8]
 2428 00d8 5A70     		strb	r2, [r3, #1]
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU))  >> RTC_AL
 2429              		.loc 1 1666 36
 2430 00da 7B69     		ldr	r3, [r7, #20]
 2431 00dc DBB2     		uxtb	r3, r3
 2432 00de 03F07F03 		and	r3, r3, #127
 2433 00e2 DAB2     		uxtb	r2, r3
 2434              		.loc 1 1666 34
 2435 00e4 BB68     		ldr	r3, [r7, #8]
 2436 00e6 9A70     		strb	r2, [r3, #2]
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMBR_PM)                    >> RTC_AL
 2437              		.loc 1 1667 91
 2438 00e8 7B69     		ldr	r3, [r7, #20]
 2439 00ea 9B0D     		lsrs	r3, r3, #22
 2440              		.loc 1 1667 36
 2441 00ec DBB2     		uxtb	r3, r3
 2442 00ee 03F00103 		and	r3, r3, #1
 2443 00f2 DAB2     		uxtb	r2, r3
 2444              		.loc 1 1667 34
 2445 00f4 BB68     		ldr	r3, [r7, #8]
 2446 00f6 DA70     		strb	r2, [r3, #3]
1668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2447              		.loc 1 1668 34
 2448 00f8 BB68     		ldr	r3, [r7, #8]
 2449 00fa 3A69     		ldr	r2, [r7, #16]
 2450 00fc 5A60     		str	r2, [r3, #4]
1669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_AL
 2451              		.loc 1 1669 91
 2452 00fe 7B69     		ldr	r3, [r7, #20]
 2453 0100 1B0E     		lsrs	r3, r3, #24
 2454              		.loc 1 1669 36
 2455 0102 DBB2     		uxtb	r3, r3
 2456 0104 03F03F03 		and	r3, r3, #63
 2457 0108 DAB2     		uxtb	r2, r3
 2458              		.loc 1 1669 34
 2459 010a BB68     		ldr	r3, [r7, #8]
 2460 010c 83F82020 		strb	r2, [r3, #32]
1670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMBR_WDSEL);
 2461              		.loc 1 1670 36
 2462 0110 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc1iTjg2.s 			page 74


 2463 0112 03F08042 		and	r2, r3, #1073741824
 2464              		.loc 1 1670 34
 2465 0116 BB68     		ldr	r3, [r7, #8]
 2466 0118 DA61     		str	r2, [r3, #28]
1671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2467              		.loc 1 1671 36
 2468 011a 7B69     		ldr	r3, [r7, #20]
 2469 011c 03F08032 		and	r2, r3, #-2139062144
 2470              		.loc 1 1671 34
 2471 0120 BB68     		ldr	r3, [r7, #8]
 2472 0122 5A61     		str	r2, [r3, #20]
 2473              	.L86:
1672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2474              		.loc 1 1674 5
 2475 0124 3B68     		ldr	r3, [r7]
 2476 0126 002B     		cmp	r3, #0
 2477 0128 25D1     		bne	.L87
1675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2478              		.loc 1 1676 31
 2479 012a BB68     		ldr	r3, [r7, #8]
 2480 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2481 012e 1846     		mov	r0, r3
 2482 0130 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2483 0134 0346     		mov	r3, r0
 2484 0136 1A46     		mov	r2, r3
 2485              		.loc 1 1676 29
 2486 0138 BB68     		ldr	r3, [r7, #8]
 2487 013a 1A70     		strb	r2, [r3]
1677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2488              		.loc 1 1677 33
 2489 013c BB68     		ldr	r3, [r7, #8]
 2490 013e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2491 0140 1846     		mov	r0, r3
 2492 0142 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2493 0146 0346     		mov	r3, r0
 2494 0148 1A46     		mov	r2, r3
 2495              		.loc 1 1677 31
 2496 014a BB68     		ldr	r3, [r7, #8]
 2497 014c 5A70     		strb	r2, [r3, #1]
1678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2498              		.loc 1 1678 33
 2499 014e BB68     		ldr	r3, [r7, #8]
 2500 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2501 0152 1846     		mov	r0, r3
 2502 0154 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2503 0158 0346     		mov	r3, r0
 2504 015a 1A46     		mov	r2, r3
 2505              		.loc 1 1678 31
 2506 015c BB68     		ldr	r3, [r7, #8]
 2507 015e 9A70     		strb	r2, [r3, #2]
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2508              		.loc 1 1679 32
 2509 0160 BB68     		ldr	r3, [r7, #8]
 2510 0162 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
ARM GAS  /tmp/cc1iTjg2.s 			page 75


 2511 0166 1846     		mov	r0, r3
 2512 0168 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2513 016c 0346     		mov	r3, r0
 2514 016e 1A46     		mov	r2, r3
 2515              		.loc 1 1679 30
 2516 0170 BB68     		ldr	r3, [r7, #8]
 2517 0172 83F82020 		strb	r2, [r3, #32]
 2518              	.L87:
1680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2519              		.loc 1 1682 10
 2520 0176 0023     		movs	r3, #0
1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2521              		.loc 1 1683 1
 2522 0178 1846     		mov	r0, r3
 2523 017a 1837     		adds	r7, r7, #24
 2524              	.LCFI60:
 2525              		.cfi_def_cfa_offset 8
 2526 017c BD46     		mov	sp, r7
 2527              	.LCFI61:
 2528              		.cfi_def_cfa_register 13
 2529              		@ sp needed
 2530 017e 80BD     		pop	{r7, pc}
 2531              		.cfi_endproc
 2532              	.LFE342:
 2534              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2535              		.align	1
 2536              		.global	HAL_RTC_AlarmIRQHandler
 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2540              		.fpu fpv5-d16
 2542              	HAL_RTC_AlarmIRQHandler:
 2543              	.LFB343:
1684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2544              		.loc 1 1691 1
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 8
 2547              		@ frame_needed = 1, uses_anonymous_args = 0
 2548 0000 80B5     		push	{r7, lr}
 2549              	.LCFI62:
 2550              		.cfi_def_cfa_offset 8
 2551              		.cfi_offset 7, -8
 2552              		.cfi_offset 14, -4
 2553 0002 82B0     		sub	sp, sp, #8
 2554              	.LCFI63:
 2555              		.cfi_def_cfa_offset 16
 2556 0004 00AF     		add	r7, sp, #0
 2557              	.LCFI64:
ARM GAS  /tmp/cc1iTjg2.s 			page 76


 2558              		.cfi_def_cfa_register 7
 2559 0006 7860     		str	r0, [r7, #4]
1692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(DUAL_CORE)
1694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_GetCurrentCPUID() == CM7_CPUID)
 2560              		.loc 1 1694 6
 2561 0008 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 2562 000c 0346     		mov	r3, r0
 2563              		.loc 1 1694 5
 2564 000e 032B     		cmp	r3, #3
 2565 0010 04D1     		bne	.L90
1695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2566              		.loc 1 1696 5
 2567 0012 224B     		ldr	r3, .L94
 2568 0014 4FF40032 		mov	r2, #131072
 2569 0018 9A60     		str	r2, [r3, #8]
 2570 001a 03E0     		b	.L91
 2571              	.L90:
1697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 2572              		.loc 1 1700 5
 2573 001c 204B     		ldr	r3, .L94+4
 2574 001e 4FF40032 		mov	r2, #131072
 2575 0022 9A60     		str	r2, [r3, #8]
 2576              	.L91:
1701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* SINGLE_CORE */
1703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* DUAL_CORE */
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_MISR_ALRAMF)
1707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get interrupt status */
1708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmp = hrtc->Instance->MISR;
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_MISR_ALRAMF) != 0u)
1711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmA interrupt pending bit */
1713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRAF;
1714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
1717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmAEventCallback(hrtc);
1718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTC_AlarmAEventCallback(hrtc);
1720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_MISR_ALRAMF */
1723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_MISR_ALRBMF)
1725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_MISR_ALRBMF) != 0u)
1726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmB interrupt pending bit */
1728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRBF;
1729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 77


1730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
1732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmBEventCallback(hrtc);
1733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTCEx_AlarmBEventCallback(hrtc);
1735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_MISR_ALRBMF */
1738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRAF)
1740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 2577              		.loc 1 1741 6
 2578 0024 7B68     		ldr	r3, [r7, #4]
 2579 0026 1B68     		ldr	r3, [r3]
 2580 0028 9B68     		ldr	r3, [r3, #8]
 2581 002a 03F48053 		and	r3, r3, #4096
 2582              		.loc 1 1741 5
 2583 002e 002B     		cmp	r3, #0
 2584 0030 12D0     		beq	.L92
1742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 2585              		.loc 1 1744 8
 2586 0032 7B68     		ldr	r3, [r7, #4]
 2587 0034 1B68     		ldr	r3, [r3]
 2588 0036 DB68     		ldr	r3, [r3, #12]
 2589 0038 03F48073 		and	r3, r3, #256
 2590              		.loc 1 1744 7
 2591 003c 002B     		cmp	r3, #0
 2592 003e 0BD0     		beq	.L92
1745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2593              		.loc 1 1747 7
 2594 0040 7B68     		ldr	r3, [r7, #4]
 2595 0042 1B68     		ldr	r3, [r3]
 2596 0044 DB68     		ldr	r3, [r3, #12]
 2597 0046 DAB2     		uxtb	r2, r3
 2598 0048 7B68     		ldr	r3, [r7, #4]
 2599 004a 1B68     		ldr	r3, [r3]
 2600 004c 62F4C072 		orn	r2, r2, #384
 2601 0050 DA60     		str	r2, [r3, #12]
1748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2602              		.loc 1 1752 7
 2603 0052 7868     		ldr	r0, [r7, #4]
 2604 0054 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 2605              	.L92:
1753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAF */
1757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 78


1758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBF)
1759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 2606              		.loc 1 1760 6
 2607 0058 7B68     		ldr	r3, [r7, #4]
 2608 005a 1B68     		ldr	r3, [r3]
 2609 005c 9B68     		ldr	r3, [r3, #8]
 2610 005e 03F40053 		and	r3, r3, #8192
 2611              		.loc 1 1760 5
 2612 0062 002B     		cmp	r3, #0
 2613 0064 12D0     		beq	.L93
1761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 2614              		.loc 1 1763 8
 2615 0066 7B68     		ldr	r3, [r7, #4]
 2616 0068 1B68     		ldr	r3, [r3]
 2617 006a DB68     		ldr	r3, [r3, #12]
 2618 006c 03F40073 		and	r3, r3, #512
 2619              		.loc 1 1763 7
 2620 0070 002B     		cmp	r3, #0
 2621 0072 0BD0     		beq	.L93
1764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 2622              		.loc 1 1766 7
 2623 0074 7B68     		ldr	r3, [r7, #4]
 2624 0076 1B68     		ldr	r3, [r3]
 2625 0078 DB68     		ldr	r3, [r3, #12]
 2626 007a DAB2     		uxtb	r2, r3
 2627 007c 7B68     		ldr	r3, [r7, #4]
 2628 007e 1B68     		ldr	r3, [r3]
 2629 0080 62F42072 		orn	r2, r2, #640
 2630 0084 DA60     		str	r2, [r3, #12]
1767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* AlarmB callback */
1769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2631              		.loc 1 1772 7
 2632 0086 7868     		ldr	r0, [r7, #4]
 2633 0088 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 2634              	.L93:
1773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBF */
1777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2635              		.loc 1 1779 15
 2636 008c 7B68     		ldr	r3, [r7, #4]
 2637 008e 0122     		movs	r2, #1
 2638 0090 83F82120 		strb	r2, [r3, #33]
1780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2639              		.loc 1 1780 1
ARM GAS  /tmp/cc1iTjg2.s 			page 79


 2640 0094 00BF     		nop
 2641 0096 0837     		adds	r7, r7, #8
 2642              	.LCFI65:
 2643              		.cfi_def_cfa_offset 8
 2644 0098 BD46     		mov	sp, r7
 2645              	.LCFI66:
 2646              		.cfi_def_cfa_register 13
 2647              		@ sp needed
 2648 009a 80BD     		pop	{r7, pc}
 2649              	.L95:
 2650              		.align	2
 2651              	.L94:
 2652 009c 80000058 		.word	1476395136
 2653 00a0 C0000058 		.word	1476395200
 2654              		.cfi_endproc
 2655              	.LFE343:
 2657              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2658              		.align	1
 2659              		.weak	HAL_RTC_AlarmAEventCallback
 2660              		.syntax unified
 2661              		.thumb
 2662              		.thumb_func
 2663              		.fpu fpv5-d16
 2665              	HAL_RTC_AlarmAEventCallback:
 2666              	.LFB344:
1781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2667              		.loc 1 1788 1
 2668              		.cfi_startproc
 2669              		@ args = 0, pretend = 0, frame = 8
 2670              		@ frame_needed = 1, uses_anonymous_args = 0
 2671              		@ link register save eliminated.
 2672 0000 80B4     		push	{r7}
 2673              	.LCFI67:
 2674              		.cfi_def_cfa_offset 4
 2675              		.cfi_offset 7, -4
 2676 0002 83B0     		sub	sp, sp, #12
 2677              	.LCFI68:
 2678              		.cfi_def_cfa_offset 16
 2679 0004 00AF     		add	r7, sp, #0
 2680              	.LCFI69:
 2681              		.cfi_def_cfa_register 7
 2682 0006 7860     		str	r0, [r7, #4]
1789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
1791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
1795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2683              		.loc 1 1795 1
ARM GAS  /tmp/cc1iTjg2.s 			page 80


 2684 0008 00BF     		nop
 2685 000a 0C37     		adds	r7, r7, #12
 2686              	.LCFI70:
 2687              		.cfi_def_cfa_offset 4
 2688 000c BD46     		mov	sp, r7
 2689              	.LCFI71:
 2690              		.cfi_def_cfa_register 13
 2691              		@ sp needed
 2692 000e 5DF8047B 		ldr	r7, [sp], #4
 2693              	.LCFI72:
 2694              		.cfi_restore 7
 2695              		.cfi_def_cfa_offset 0
 2696 0012 7047     		bx	lr
 2697              		.cfi_endproc
 2698              	.LFE344:
 2700              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2701              		.align	1
 2702              		.global	HAL_RTC_PollForAlarmAEvent
 2703              		.syntax unified
 2704              		.thumb
 2705              		.thumb_func
 2706              		.fpu fpv5-d16
 2708              	HAL_RTC_PollForAlarmAEvent:
 2709              	.LFB345:
1796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2710              		.loc 1 1804 1
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 16
 2713              		@ frame_needed = 1, uses_anonymous_args = 0
 2714 0000 80B5     		push	{r7, lr}
 2715              	.LCFI73:
 2716              		.cfi_def_cfa_offset 8
 2717              		.cfi_offset 7, -8
 2718              		.cfi_offset 14, -4
 2719 0002 84B0     		sub	sp, sp, #16
 2720              	.LCFI74:
 2721              		.cfi_def_cfa_offset 24
 2722 0004 00AF     		add	r7, sp, #0
 2723              	.LCFI75:
 2724              		.cfi_def_cfa_register 7
 2725 0006 7860     		str	r0, [r7, #4]
 2726 0008 3960     		str	r1, [r7]
1805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 2727              		.loc 1 1806 24
 2728 000a FFF7FEFF 		bl	HAL_GetTick
 2729 000e F860     		str	r0, [r7, #12]
1807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
ARM GAS  /tmp/cc1iTjg2.s 			page 81


 2730              		.loc 1 1808 9
 2731 0010 14E0     		b	.L98
 2732              	.L101:
1809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2733              		.loc 1 1810 7
 2734 0012 3B68     		ldr	r3, [r7]
 2735 0014 B3F1FF3F 		cmp	r3, #-1
 2736 0018 10D0     		beq	.L98
1811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2737              		.loc 1 1812 12
 2738 001a FFF7FEFF 		bl	HAL_GetTick
 2739 001e 0246     		mov	r2, r0
 2740              		.loc 1 1812 26
 2741 0020 FB68     		ldr	r3, [r7, #12]
 2742 0022 D31A     		subs	r3, r2, r3
 2743              		.loc 1 1812 9
 2744 0024 3A68     		ldr	r2, [r7]
 2745 0026 9A42     		cmp	r2, r3
 2746 0028 02D3     		bcc	.L99
 2747              		.loc 1 1812 50 discriminator 1
 2748 002a 3B68     		ldr	r3, [r7]
 2749 002c 002B     		cmp	r3, #0
 2750 002e 05D1     		bne	.L98
 2751              	.L99:
1813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2752              		.loc 1 1814 21
 2753 0030 7B68     		ldr	r3, [r7, #4]
 2754 0032 0322     		movs	r2, #3
 2755 0034 83F82120 		strb	r2, [r3, #33]
1815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2756              		.loc 1 1815 16
 2757 0038 0323     		movs	r3, #3
 2758 003a 14E0     		b	.L100
 2759              	.L98:
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2760              		.loc 1 1808 10
 2761 003c 7B68     		ldr	r3, [r7, #4]
 2762 003e 1B68     		ldr	r3, [r3]
 2763 0040 DB68     		ldr	r3, [r3, #12]
 2764 0042 03F48073 		and	r3, r3, #256
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2765              		.loc 1 1808 9
 2766 0046 002B     		cmp	r3, #0
 2767 0048 E3D0     		beq	.L101
1816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2768              		.loc 1 1821 3
 2769 004a 7B68     		ldr	r3, [r7, #4]
 2770 004c 1B68     		ldr	r3, [r3]
 2771 004e DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cc1iTjg2.s 			page 82


 2772 0050 DAB2     		uxtb	r2, r3
 2773 0052 7B68     		ldr	r3, [r7, #4]
 2774 0054 1B68     		ldr	r3, [r3]
 2775 0056 62F4C072 		orn	r2, r2, #384
 2776 005a DA60     		str	r2, [r3, #12]
1822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2777              		.loc 1 1824 15
 2778 005c 7B68     		ldr	r3, [r7, #4]
 2779 005e 0122     		movs	r2, #1
 2780 0060 83F82120 		strb	r2, [r3, #33]
1825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2781              		.loc 1 1826 10
 2782 0064 0023     		movs	r3, #0
 2783              	.L100:
1827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2784              		.loc 1 1827 1
 2785 0066 1846     		mov	r0, r3
 2786 0068 1037     		adds	r7, r7, #16
 2787              	.LCFI76:
 2788              		.cfi_def_cfa_offset 8
 2789 006a BD46     		mov	sp, r7
 2790              	.LCFI77:
 2791              		.cfi_def_cfa_register 13
 2792              		@ sp needed
 2793 006c 80BD     		pop	{r7, pc}
 2794              		.cfi_endproc
 2795              	.LFE345:
 2797              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2798              		.align	1
 2799              		.global	HAL_RTC_WaitForSynchro
 2800              		.syntax unified
 2801              		.thumb
 2802              		.thumb_func
 2803              		.fpu fpv5-d16
 2805              	HAL_RTC_WaitForSynchro:
 2806              	.LFB346:
1828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group4
1834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
ARM GAS  /tmp/cc1iTjg2.s 			page 83


1846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2807              		.loc 1 1863 1
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 16
 2810              		@ frame_needed = 1, uses_anonymous_args = 0
 2811 0000 80B5     		push	{r7, lr}
 2812              	.LCFI78:
 2813              		.cfi_def_cfa_offset 8
 2814              		.cfi_offset 7, -8
 2815              		.cfi_offset 14, -4
 2816 0002 84B0     		sub	sp, sp, #16
 2817              	.LCFI79:
 2818              		.cfi_def_cfa_offset 24
 2819 0004 00AF     		add	r7, sp, #0
 2820              	.LCFI80:
 2821              		.cfi_def_cfa_register 7
 2822 0006 7860     		str	r0, [r7, #4]
1864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear RSF flag */
1867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_RSF)
1868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
1869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_RSF */
1870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_RSF)
1871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2823              		.loc 1 1871 7
 2824 0008 7B68     		ldr	r3, [r7, #4]
 2825 000a 1B68     		ldr	r3, [r3]
 2826              		.loc 1 1871 23
 2827 000c DA68     		ldr	r2, [r3, #12]
 2828              		.loc 1 1871 7
 2829 000e 7B68     		ldr	r3, [r7, #4]
 2830 0010 1B68     		ldr	r3, [r3]
 2831              		.loc 1 1871 23
 2832 0012 22F0A002 		bic	r2, r2, #160
 2833 0016 DA60     		str	r2, [r3, #12]
1872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
1873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 2834              		.loc 1 1874 15
ARM GAS  /tmp/cc1iTjg2.s 			page 84


 2835 0018 FFF7FEFF 		bl	HAL_GetTick
 2836 001c F860     		str	r0, [r7, #12]
1875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_RSF)
1878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
1879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_RSF */
1880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_RSF)
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 2837              		.loc 1 1881 11
 2838 001e 09E0     		b	.L103
 2839              	.L105:
1882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
1883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 2840              		.loc 1 1884 11
 2841 0020 FFF7FEFF 		bl	HAL_GetTick
 2842 0024 0246     		mov	r2, r0
 2843              		.loc 1 1884 25
 2844 0026 FB68     		ldr	r3, [r7, #12]
 2845 0028 D31A     		subs	r3, r2, r3
 2846              		.loc 1 1884 9
 2847 002a B3F57A7F 		cmp	r3, #1000
 2848 002e 01D9     		bls	.L103
1885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2849              		.loc 1 1886 16
 2850 0030 0323     		movs	r3, #3
 2851 0032 07E0     		b	.L104
 2852              	.L103:
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
 2853              		.loc 1 1881 17
 2854 0034 7B68     		ldr	r3, [r7, #4]
 2855 0036 1B68     		ldr	r3, [r3]
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
 2856              		.loc 1 1881 27
 2857 0038 DB68     		ldr	r3, [r3, #12]
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
 2858              		.loc 1 1881 33
 2859 003a 03F02003 		and	r3, r3, #32
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
 2860              		.loc 1 1881 11
 2861 003e 002B     		cmp	r3, #0
 2862 0040 EED0     		beq	.L105
1887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 2863              		.loc 1 1890 10
 2864 0042 0023     		movs	r3, #0
 2865              	.L104:
1891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2866              		.loc 1 1891 1
 2867 0044 1846     		mov	r0, r3
 2868 0046 1037     		adds	r7, r7, #16
 2869              	.LCFI81:
 2870              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc1iTjg2.s 			page 85


 2871 0048 BD46     		mov	sp, r7
 2872              	.LCFI82:
 2873              		.cfi_def_cfa_register 13
 2874              		@ sp needed
 2875 004a 80BD     		pop	{r7, pc}
 2876              		.cfi_endproc
 2877              	.LFE346:
 2879              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2880              		.align	1
 2881              		.global	HAL_RTC_GetState
 2882              		.syntax unified
 2883              		.thumb
 2884              		.thumb_func
 2885              		.fpu fpv5-d16
 2887              	HAL_RTC_GetState:
 2888              	.LFB347:
1892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group5
1898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Get RTC state
1907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL state
1915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
1917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2889              		.loc 1 1917 1
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 8
 2892              		@ frame_needed = 1, uses_anonymous_args = 0
 2893              		@ link register save eliminated.
 2894 0000 80B4     		push	{r7}
 2895              	.LCFI83:
 2896              		.cfi_def_cfa_offset 4
 2897              		.cfi_offset 7, -4
 2898 0002 83B0     		sub	sp, sp, #12
 2899              	.LCFI84:
 2900              		.cfi_def_cfa_offset 16
 2901 0004 00AF     		add	r7, sp, #0
 2902              	.LCFI85:
 2903              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc1iTjg2.s 			page 86


 2904 0006 7860     		str	r0, [r7, #4]
1918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Return RTC handle state */
1919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return hrtc->State;
 2905              		.loc 1 1919 14
 2906 0008 7B68     		ldr	r3, [r7, #4]
 2907 000a 93F82130 		ldrb	r3, [r3, #33]
 2908 000e DBB2     		uxtb	r3, r3
1920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 2909              		.loc 1 1920 1
 2910 0010 1846     		mov	r0, r3
 2911 0012 0C37     		adds	r7, r7, #12
 2912              	.LCFI86:
 2913              		.cfi_def_cfa_offset 4
 2914 0014 BD46     		mov	sp, r7
 2915              	.LCFI87:
 2916              		.cfi_def_cfa_register 13
 2917              		@ sp needed
 2918 0016 5DF8047B 		ldr	r7, [sp], #4
 2919              	.LCFI88:
 2920              		.cfi_restore 7
 2921              		.cfi_def_cfa_offset 0
 2922 001a 7047     		bx	lr
 2923              		.cfi_endproc
 2924              	.LFE347:
 2926              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2927              		.align	1
 2928              		.global	RTC_EnterInitMode
 2929              		.syntax unified
 2930              		.thumb
 2931              		.thumb_func
 2932              		.fpu fpv5-d16
 2934              	RTC_EnterInitMode:
 2935              	.LFB348:
1921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
1931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 2936              		.loc 1 1941 1
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc1iTjg2.s 			page 87


 2939              		@ frame_needed = 1, uses_anonymous_args = 0
 2940 0000 80B5     		push	{r7, lr}
 2941              	.LCFI89:
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 84B0     		sub	sp, sp, #16
 2946              	.LCFI90:
 2947              		.cfi_def_cfa_offset 24
 2948 0004 00AF     		add	r7, sp, #0
 2949              	.LCFI91:
 2950              		.cfi_def_cfa_register 7
 2951 0006 7860     		str	r0, [r7, #4]
1942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 2952              		.loc 1 1943 21
 2953 0008 0023     		movs	r3, #0
 2954 000a FB73     		strb	r3, [r7, #15]
1944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_INITF)
1946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
1947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
1950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
1954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
1956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_TIMEOUT;
1958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_INITF */
1963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_INITF)
1964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 2955              		.loc 1 1964 11
 2956 000c 7B68     		ldr	r3, [r7, #4]
 2957 000e 1B68     		ldr	r3, [r3]
 2958              		.loc 1 1964 21
 2959 0010 DB68     		ldr	r3, [r3, #12]
 2960              		.loc 1 1964 27
 2961 0012 03F04003 		and	r3, r3, #64
 2962              		.loc 1 1964 5
 2963 0016 002B     		cmp	r3, #0
 2964 0018 1DD1     		bne	.L109
1965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2965              		.loc 1 1967 9
 2966 001a 7B68     		ldr	r3, [r7, #4]
 2967 001c 1B68     		ldr	r3, [r3]
 2968              		.loc 1 1967 25
 2969 001e 4FF0FF32 		mov	r2, #-1
ARM GAS  /tmp/cc1iTjg2.s 			page 88


 2970 0022 DA60     		str	r2, [r3, #12]
1968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2971              		.loc 1 1969 17
 2972 0024 FFF7FEFF 		bl	HAL_GetTick
 2973 0028 B860     		str	r0, [r7, #8]
1970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 2974              		.loc 1 1971 11
 2975 002a 0DE0     		b	.L110
 2976              	.L111:
1972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 2977              		.loc 1 1973 11
 2978 002c FFF7FEFF 		bl	HAL_GetTick
 2979 0030 0246     		mov	r2, r0
 2980              		.loc 1 1973 26
 2981 0032 BB68     		ldr	r3, [r7, #8]
 2982 0034 D31A     		subs	r3, r2, r3
 2983              		.loc 1 1973 9
 2984 0036 B3F57A7F 		cmp	r3, #1000
 2985 003a 05D9     		bls	.L110
1974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_TIMEOUT;
 2986              		.loc 1 1975 16
 2987 003c 0323     		movs	r3, #3
 2988 003e FB73     		strb	r3, [r7, #15]
1976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2989              		.loc 1 1976 21
 2990 0040 7B68     		ldr	r3, [r7, #4]
 2991 0042 0322     		movs	r2, #3
 2992 0044 83F82120 		strb	r2, [r3, #33]
 2993              	.L110:
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 2994              		.loc 1 1971 17
 2995 0048 7B68     		ldr	r3, [r7, #4]
 2996 004a 1B68     		ldr	r3, [r3]
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 2997              		.loc 1 1971 27
 2998 004c DB68     		ldr	r3, [r3, #12]
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 2999              		.loc 1 1971 33
 3000 004e 03F04003 		and	r3, r3, #64
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 3001              		.loc 1 1971 11
 3002 0052 002B     		cmp	r3, #0
 3003 0054 EAD0     		beq	.L111
 3004              	.L109:
1977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INITF */
1981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 3005              		.loc 1 1982 10
 3006 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
ARM GAS  /tmp/cc1iTjg2.s 			page 89


 3007              		.loc 1 1983 1
 3008 0058 1846     		mov	r0, r3
 3009 005a 1037     		adds	r7, r7, #16
 3010              	.LCFI92:
 3011              		.cfi_def_cfa_offset 8
 3012 005c BD46     		mov	sp, r7
 3013              	.LCFI93:
 3014              		.cfi_def_cfa_register 13
 3015              		@ sp needed
 3016 005e 80BD     		pop	{r7, pc}
 3017              		.cfi_endproc
 3018              	.LFE348:
 3020              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 3021              		.align	1
 3022              		.global	RTC_ExitInitMode
 3023              		.syntax unified
 3024              		.thumb
 3025              		.thumb_func
 3026              		.fpu fpv5-d16
 3028              	RTC_ExitInitMode:
 3029              	.LFB349:
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Exit the RTC Initialization mode.
1987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
1991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3030              		.loc 1 1991 1
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 16
 3033              		@ frame_needed = 1, uses_anonymous_args = 0
 3034 0000 80B5     		push	{r7, lr}
 3035              	.LCFI94:
 3036              		.cfi_def_cfa_offset 8
 3037              		.cfi_offset 7, -8
 3038              		.cfi_offset 14, -4
 3039 0002 84B0     		sub	sp, sp, #16
 3040              	.LCFI95:
 3041              		.cfi_def_cfa_offset 24
 3042 0004 00AF     		add	r7, sp, #0
 3043              	.LCFI96:
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
1992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 3046              		.loc 1 1992 21
 3047 0008 0023     		movs	r3, #0
 3048 000a FB73     		strb	r3, [r7, #15]
1993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_INITF)
1996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Exit Initialization mode */
1998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
1999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #elif defined(RTC_ISR_INITF)
ARM GAS  /tmp/cc1iTjg2.s 			page 90


2001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Exit Initialization mode */
2003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 3049              		.loc 1 2003 3
 3050 000c 1A4B     		ldr	r3, .L118
 3051 000e DB68     		ldr	r3, [r3, #12]
 3052 0010 194A     		ldr	r2, .L118
 3053 0012 23F04003 		bic	r3, r3, #64
 3054 0016 D360     		str	r3, [r2, #12]
2004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INITF */
2006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* If CR_BYPSHAD bit = 0, wait for synchro */
2007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 3055              		.loc 1 2007 7
 3056 0018 174B     		ldr	r3, .L118
 3057 001a 9B68     		ldr	r3, [r3, #8]
 3058 001c 03F02003 		and	r3, r3, #32
 3059              		.loc 1 2007 6
 3060 0020 002B     		cmp	r3, #0
 3061 0022 0CD1     		bne	.L114
2008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 3062              		.loc 1 2009 9
 3063 0024 7868     		ldr	r0, [r7, #4]
 3064 0026 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 3065 002a 0346     		mov	r3, r0
 3066              		.loc 1 2009 8
 3067 002c 002B     		cmp	r3, #0
 3068 002e 1ED0     		beq	.L115
2010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
2011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 3069              		.loc 1 2011 19
 3070 0030 7B68     		ldr	r3, [r7, #4]
 3071 0032 0322     		movs	r2, #3
 3072 0034 83F82120 		strb	r2, [r3, #33]
2012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
 3073              		.loc 1 2012 14
 3074 0038 0323     		movs	r3, #3
 3075 003a FB73     		strb	r3, [r7, #15]
 3076 003c 17E0     		b	.L115
 3077              	.L114:
2013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
2016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear BYPSHAD bit */
2018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 3078              		.loc 1 2018 5
 3079 003e 0E4B     		ldr	r3, .L118
 3080 0040 9B68     		ldr	r3, [r3, #8]
 3081 0042 0D4A     		ldr	r2, .L118
 3082 0044 23F02003 		bic	r3, r3, #32
 3083 0048 9360     		str	r3, [r2, #8]
2019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 3084              		.loc 1 2019 9
 3085 004a 7868     		ldr	r0, [r7, #4]
 3086 004c FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
ARM GAS  /tmp/cc1iTjg2.s 			page 91


 3087 0050 0346     		mov	r3, r0
 3088              		.loc 1 2019 8
 3089 0052 002B     		cmp	r3, #0
 3090 0054 05D0     		beq	.L116
2020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
2021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 3091              		.loc 1 2021 19
 3092 0056 7B68     		ldr	r3, [r7, #4]
 3093 0058 0322     		movs	r2, #3
 3094 005a 83F82120 		strb	r2, [r3, #33]
2022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
 3095              		.loc 1 2022 14
 3096 005e 0323     		movs	r3, #3
 3097 0060 FB73     		strb	r3, [r7, #15]
 3098              	.L116:
2023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Restore BYPSHAD bit */
2025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 3099              		.loc 1 2025 5
 3100 0062 054B     		ldr	r3, .L118
 3101 0064 9B68     		ldr	r3, [r3, #8]
 3102 0066 044A     		ldr	r2, .L118
 3103 0068 43F02003 		orr	r3, r3, #32
 3104 006c 9360     		str	r3, [r2, #8]
 3105              	.L115:
2026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 3106              		.loc 1 2028 10
 3107 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3108              		.loc 1 2029 1
 3109 0070 1846     		mov	r0, r3
 3110 0072 1037     		adds	r7, r7, #16
 3111              	.LCFI97:
 3112              		.cfi_def_cfa_offset 8
 3113 0074 BD46     		mov	sp, r7
 3114              	.LCFI98:
 3115              		.cfi_def_cfa_register 13
 3116              		@ sp needed
 3117 0076 80BD     		pop	{r7, pc}
 3118              	.L119:
 3119              		.align	2
 3120              	.L118:
 3121 0078 00400058 		.word	1476411392
 3122              		.cfi_endproc
 3123              	.LFE349:
 3125              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 3126              		.align	1
 3127              		.global	RTC_ByteToBcd2
 3128              		.syntax unified
 3129              		.thumb
 3130              		.thumb_func
 3131              		.fpu fpv5-d16
 3133              	RTC_ByteToBcd2:
 3134              	.LFB350:
2030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/cc1iTjg2.s 			page 92


2031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
2033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value Byte to be converted
2034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted byte
2035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
2037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3135              		.loc 1 2037 1
 3136              		.cfi_startproc
 3137              		@ args = 0, pretend = 0, frame = 16
 3138              		@ frame_needed = 1, uses_anonymous_args = 0
 3139              		@ link register save eliminated.
 3140 0000 80B4     		push	{r7}
 3141              	.LCFI99:
 3142              		.cfi_def_cfa_offset 4
 3143              		.cfi_offset 7, -4
 3144 0002 85B0     		sub	sp, sp, #20
 3145              	.LCFI100:
 3146              		.cfi_def_cfa_offset 24
 3147 0004 00AF     		add	r7, sp, #0
 3148              	.LCFI101:
 3149              		.cfi_def_cfa_register 7
 3150 0006 0346     		mov	r3, r0
 3151 0008 FB71     		strb	r3, [r7, #7]
2038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 3152              		.loc 1 2038 12
 3153 000a 0023     		movs	r3, #0
 3154 000c FB60     		str	r3, [r7, #12]
2039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t  bcdlow  = Value;
 3155              		.loc 1 2039 12
 3156 000e FB79     		ldrb	r3, [r7, #7]
 3157 0010 FB72     		strb	r3, [r7, #11]
2040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (bcdlow >= 10U)
 3158              		.loc 1 2041 9
 3159 0012 05E0     		b	.L121
 3160              	.L122:
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdhigh++;
 3161              		.loc 1 2043 12
 3162 0014 FB68     		ldr	r3, [r7, #12]
 3163 0016 0133     		adds	r3, r3, #1
 3164 0018 FB60     		str	r3, [r7, #12]
2044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdlow -= 10U;
 3165              		.loc 1 2044 12
 3166 001a FB7A     		ldrb	r3, [r7, #11]
 3167 001c 0A3B     		subs	r3, r3, #10
 3168 001e FB72     		strb	r3, [r7, #11]
 3169              	.L121:
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 3170              		.loc 1 2041 9
 3171 0020 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3172 0022 092B     		cmp	r3, #9
 3173 0024 F6D8     		bhi	.L122
2045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | bcdlow);
ARM GAS  /tmp/cc1iTjg2.s 			page 93


 3174              		.loc 1 2047 11
 3175 0026 FB68     		ldr	r3, [r7, #12]
 3176 0028 DBB2     		uxtb	r3, r3
 3177 002a 1B01     		lsls	r3, r3, #4
 3178 002c DAB2     		uxtb	r2, r3
 3179              		.loc 1 2047 36
 3180 002e FB7A     		ldrb	r3, [r7, #11]
 3181 0030 1343     		orrs	r3, r3, r2
 3182 0032 DBB2     		uxtb	r3, r3
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3183              		.loc 1 2048 1
 3184 0034 1846     		mov	r0, r3
 3185 0036 1437     		adds	r7, r7, #20
 3186              	.LCFI102:
 3187              		.cfi_def_cfa_offset 4
 3188 0038 BD46     		mov	sp, r7
 3189              	.LCFI103:
 3190              		.cfi_def_cfa_register 13
 3191              		@ sp needed
 3192 003a 5DF8047B 		ldr	r7, [sp], #4
 3193              	.LCFI104:
 3194              		.cfi_restore 7
 3195              		.cfi_def_cfa_offset 0
 3196 003e 7047     		bx	lr
 3197              		.cfi_endproc
 3198              	.LFE350:
 3200              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3201              		.align	1
 3202              		.global	RTC_Bcd2ToByte
 3203              		.syntax unified
 3204              		.thumb
 3205              		.thumb_func
 3206              		.fpu fpv5-d16
 3208              	RTC_Bcd2ToByte:
 3209              	.LFB351:
2049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted word
2054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
2056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 3210              		.loc 1 2056 1
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 16
 3213              		@ frame_needed = 1, uses_anonymous_args = 0
 3214              		@ link register save eliminated.
 3215 0000 80B4     		push	{r7}
 3216              	.LCFI105:
 3217              		.cfi_def_cfa_offset 4
 3218              		.cfi_offset 7, -4
 3219 0002 85B0     		sub	sp, sp, #20
 3220              	.LCFI106:
 3221              		.cfi_def_cfa_offset 24
 3222 0004 00AF     		add	r7, sp, #0
 3223              	.LCFI107:
ARM GAS  /tmp/cc1iTjg2.s 			page 94


 3224              		.cfi_def_cfa_register 7
 3225 0006 0346     		mov	r3, r0
 3226 0008 FB71     		strb	r3, [r7, #7]
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t tmp;
2058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmp = ((Value & 0xF0U) >> 4U) * 10U;
 3227              		.loc 1 2058 26
 3228 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3229 000c 1B09     		lsrs	r3, r3, #4
 3230 000e DBB2     		uxtb	r3, r3
 3231              		.loc 1 2058 7
 3232 0010 1A46     		mov	r2, r3
 3233 0012 9200     		lsls	r2, r2, #2
 3234 0014 1344     		add	r3, r3, r2
 3235 0016 5B00     		lsls	r3, r3, #1
 3236 0018 FB73     		strb	r3, [r7, #15]
2059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return (tmp + (Value & 0x0FU));
 3237              		.loc 1 2059 24
 3238 001a FB79     		ldrb	r3, [r7, #7]
 3239 001c 03F00F03 		and	r3, r3, #15
 3240 0020 DAB2     		uxtb	r2, r3
 3241              		.loc 1 2059 15
 3242 0022 FB7B     		ldrb	r3, [r7, #15]
 3243 0024 1344     		add	r3, r3, r2
 3244 0026 DBB2     		uxtb	r3, r3
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 3245              		.loc 1 2060 1
 3246 0028 1846     		mov	r0, r3
 3247 002a 1437     		adds	r7, r7, #20
 3248              	.LCFI108:
 3249              		.cfi_def_cfa_offset 4
 3250 002c BD46     		mov	sp, r7
 3251              	.LCFI109:
 3252              		.cfi_def_cfa_register 13
 3253              		@ sp needed
 3254 002e 5DF8047B 		ldr	r7, [sp], #4
 3255              	.LCFI110:
 3256              		.cfi_restore 7
 3257              		.cfi_def_cfa_offset 0
 3258 0032 7047     		bx	lr
 3259              		.cfi_endproc
 3260              	.LFE351:
 3262              		.text
 3263              	.Letext0:
 3264              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 3265              		.file 3 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 3266              		.file 4 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 3267              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 3268              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 3269              		.file 7 "/usr/include/newlib/sys/_types.h"
 3270              		.file 8 "/usr/include/newlib/sys/reent.h"
 3271              		.file 9 "/usr/include/newlib/sys/lock.h"
 3272              		.file 10 "/usr/include/newlib/math.h"
 3273              		.file 11 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 3274              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 3275              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
 3276              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 3277              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cc1iTjg2.s 			page 95


ARM GAS  /tmp/cc1iTjg2.s 			page 96


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_rtc.c
     /tmp/cc1iTjg2.s:17     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/cc1iTjg2.s:25     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/cc1iTjg2.s:454    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/cc1iTjg2.s:2934   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cc1iTjg2.s:3028   .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/cc1iTjg2.s:208    .text.HAL_RTC_Init:00000000000000ec $d
     /tmp/cc1iTjg2.s:213    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/cc1iTjg2.s:220    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/cc1iTjg2.s:497    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/cc1iTjg2.s:442    .text.HAL_RTC_DeInit:0000000000000134 $d
     /tmp/cc1iTjg2.s:447    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/cc1iTjg2.s:490    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/cc1iTjg2.s:533    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/cc1iTjg2.s:540    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/cc1iTjg2.s:3133   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cc1iTjg2.s:771    .text.HAL_RTC_SetTime:0000000000000138 $d
     /tmp/cc1iTjg2.s:776    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/cc1iTjg2.s:783    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/cc1iTjg2.s:3208   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cc1iTjg2.s:918    .text.HAL_RTC_GetTime:00000000000000b4 $d
     /tmp/cc1iTjg2.s:923    .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/cc1iTjg2.s:930    .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/cc1iTjg2.s:1126   .text.HAL_RTC_SetDate:000000000000010c $d
     /tmp/cc1iTjg2.s:1131   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/cc1iTjg2.s:1138   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/cc1iTjg2.s:1253   .text.HAL_RTC_GetDate:0000000000000098 $d
     /tmp/cc1iTjg2.s:1258   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/cc1iTjg2.s:1265   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/cc1iTjg2.s:1663   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/cc1iTjg2.s:1670   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/cc1iTjg2.s:2074   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/cc1iTjg2.s:2081   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/cc1iTjg2.s:2275   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/cc1iTjg2.s:2282   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/cc1iTjg2.s:2535   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/cc1iTjg2.s:2542   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/cc1iTjg2.s:2665   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/cc1iTjg2.s:2652   .text.HAL_RTC_AlarmIRQHandler:000000000000009c $d
     /tmp/cc1iTjg2.s:2658   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/cc1iTjg2.s:2701   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/cc1iTjg2.s:2708   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/cc1iTjg2.s:2798   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cc1iTjg2.s:2805   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/cc1iTjg2.s:2880   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/cc1iTjg2.s:2887   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/cc1iTjg2.s:2927   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cc1iTjg2.s:3021   .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/cc1iTjg2.s:3121   .text.RTC_ExitInitMode:0000000000000078 $d
     /tmp/cc1iTjg2.s:3126   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cc1iTjg2.s:3201   .text.RTC_Bcd2ToByte:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GetCurrentCPUID
HAL_RTCEx_AlarmBEventCallback
ARM GAS  /tmp/cc1iTjg2.s 			page 97


