ARM GAS  /tmp/ccJooFvg.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"heap_4.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.bss.ucHeap,"aw",%nobits
  17              		.align	2
  20              	ucHeap:
  21 0000 00000000 		.space	15360
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.section	.rodata.xHeapStructSize,"a"
  23              		.align	2
  26              	xHeapStructSize:
  27 0000 08000000 		.word	8
  28              		.section	.bss.xStart,"aw",%nobits
  29              		.align	2
  32              	xStart:
  33 0000 00000000 		.space	8
  33      00000000 
  34              		.section	.bss.pxEnd,"aw",%nobits
  35              		.align	2
  38              	pxEnd:
  39 0000 00000000 		.space	4
  40              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
  41              		.align	2
  44              	xFreeBytesRemaining:
  45 0000 00000000 		.space	4
  46              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
  47              		.align	2
  50              	xMinimumEverFreeBytesRemaining:
  51 0000 00000000 		.space	4
  52              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
  53              		.align	2
  56              	xNumberOfSuccessfulAllocations:
  57 0000 00000000 		.space	4
  58              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
  59              		.align	2
  62              	xNumberOfSuccessfulFrees:
  63 0000 00000000 		.space	4
  64              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
  65              		.align	2
  68              	xBlockAllocatedBit:
  69 0000 00000000 		.space	4
  70              		.section	.text.pvPortMalloc,"ax",%progbits
ARM GAS  /tmp/ccJooFvg.s 			page 2


  71              		.align	1
  72              		.global	pvPortMalloc
  73              		.arch armv7e-m
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv5-d16
  79              	pvPortMalloc:
  80              	.LFB4:
  81              		.file 1 "./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c"
   1:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
   2:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
   5:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  12:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  15:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  22:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  25:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  27:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  28:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
  29:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  30:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  31:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  32:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  33:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  34:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  35:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  36:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include <stdlib.h>
  37:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  38:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  39:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  40:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  41:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  42:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  43:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  44:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "task.h"
  45:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  46:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  47:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
ARM GAS  /tmp/ccJooFvg.s 			page 3


  48:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  49:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  50:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #endif
  51:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  52:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  53:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  54:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  55:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  56:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  57:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  58:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  59:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
  60:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
  61:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
  62:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  63:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #else
  64:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  65:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  66:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  67:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  68:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** of their memory address. */
  69:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
  70:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
  71:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  72:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  73:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** } BlockLink_t;
  74:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  75:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  76:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  77:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
  78:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
  79:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
  80:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
  81:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * adjacent to each other.
  82:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  83:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
  84:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  85:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
  86:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
  87:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
  88:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  89:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
  90:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  91:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  92:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  93:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
  94:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
  95:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
  96:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  97:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
  98:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
  99:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 100:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 101:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** number of free bytes remaining, but says nothing about fragmentation. */
 102:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 103:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 104:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xNumberOfSuccessfulAllocations = 0;
ARM GAS  /tmp/ccJooFvg.s 			page 4


 105:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xNumberOfSuccessfulFrees = 0;
 106:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 107:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 108:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 109:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 110:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** space. */
 111:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 112:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 113:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 115:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 116:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
  82              		.loc 1 116 1
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 40
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 8AB0     		sub	sp, sp, #40
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 48
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI2:
  96              		.cfi_def_cfa_register 7
  97 0006 7860     		str	r0, [r7, #4]
 117:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 118:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
  98              		.loc 1 118 7
  99 0008 0023     		movs	r3, #0
 100 000a FB61     		str	r3, [r7, #28]
 119:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 120:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 101              		.loc 1 120 2
 102 000c FFF7FEFF 		bl	vTaskSuspendAll
 121:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 122:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 123:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 124:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
 103              		.loc 1 124 13
 104 0010 5B4B     		ldr	r3, .L16
 105 0012 1B68     		ldr	r3, [r3]
 106              		.loc 1 124 5
 107 0014 002B     		cmp	r3, #0
 108 0016 01D1     		bne	.L2
 125:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 126:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			prvHeapInit();
 109              		.loc 1 126 4
 110 0018 FFF7FEFF 		bl	prvHeapInit
 111              	.L2:
 127:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 128:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 129:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 130:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 131:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
ARM GAS  /tmp/ccJooFvg.s 			page 5


 132:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 133:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 134:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 135:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 136:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 137:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 112              		.loc 1 137 21
 113 001c 594B     		ldr	r3, .L16+4
 114 001e 1A68     		ldr	r2, [r3]
 115 0020 7B68     		ldr	r3, [r7, #4]
 116 0022 1340     		ands	r3, r3, r2
 117              		.loc 1 137 5
 118 0024 002B     		cmp	r3, #0
 119 0026 40F09380 		bne	.L3
 138:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 139:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 140:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 141:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 120              		.loc 1 141 6
 121 002a 7B68     		ldr	r3, [r7, #4]
 122 002c 002B     		cmp	r3, #0
 123 002e 1DD0     		beq	.L4
 142:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 143:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 124              		.loc 1 143 17
 125 0030 0822     		movs	r2, #8
 126 0032 7B68     		ldr	r3, [r7, #4]
 127 0034 1344     		add	r3, r3, r2
 128 0036 7B60     		str	r3, [r7, #4]
 144:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 145:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 146:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				of bytes. */
 147:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 129              		.loc 1 147 23
 130 0038 7B68     		ldr	r3, [r7, #4]
 131 003a 03F00703 		and	r3, r3, #7
 132              		.loc 1 147 7
 133 003e 002B     		cmp	r3, #0
 134 0040 14D0     		beq	.L4
 148:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 149:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 150:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 135              		.loc 1 150 18
 136 0042 7B68     		ldr	r3, [r7, #4]
 137 0044 23F00703 		bic	r3, r3, #7
 138 0048 0833     		adds	r3, r3, #8
 139 004a 7B60     		str	r3, [r7, #4]
 151:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 140              		.loc 1 151 6
 141 004c 7B68     		ldr	r3, [r7, #4]
 142 004e 03F00703 		and	r3, r3, #7
 143 0052 002B     		cmp	r3, #0
 144 0054 0AD0     		beq	.L4
 145              	.LBB12:
 146              	.LBB13:
 147              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
ARM GAS  /tmp/ccJooFvg.s 			page 6


   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccJooFvg.s 			page 7


  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
ARM GAS  /tmp/ccJooFvg.s 			page 8


 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
ARM GAS  /tmp/ccJooFvg.s 			page 9


 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 148              		.loc 2 195 2
 149              		.syntax unified
 150              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 151 0056 4FF05003 			mov r3, #80												
 152 005a 83F31188 		msr basepri, r3											
 153 005e BFF36F8F 		isb														
 154 0062 BFF34F8F 		dsb														
 155              	
 156              	@ 0 "" 2
 157              		.thumb
 158              		.syntax unified
 159 0066 7B61     		str	r3, [r7, #20]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 160              		.loc 2 203 1
 161 0068 00BF     		nop
 162              	.L5:
 163              	.LBE13:
 164              	.LBE12:
 165              		.loc 1 151 6 discriminator 1
 166 006a FEE7     		b	.L5
 167              	.L4:
 152:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 153:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 154:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 155:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 156:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 157:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
ARM GAS  /tmp/ccJooFvg.s 			page 10


 158:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 159:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 160:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 161:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 162:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 163:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 168              		.loc 1 163 6
 169 006c 7B68     		ldr	r3, [r7, #4]
 170 006e 002B     		cmp	r3, #0
 171 0070 6ED0     		beq	.L3
 172              		.loc 1 163 45 discriminator 1
 173 0072 454B     		ldr	r3, .L16+8
 174 0074 1B68     		ldr	r3, [r3]
 175              		.loc 1 163 28 discriminator 1
 176 0076 7A68     		ldr	r2, [r7, #4]
 177 0078 9A42     		cmp	r2, r3
 178 007a 69D8     		bhi	.L3
 164:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 165:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 166:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 167:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 179              		.loc 1 167 21
 180 007c 434B     		ldr	r3, .L16+12
 181 007e 3B62     		str	r3, [r7, #32]
 168:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 182              		.loc 1 168 13
 183 0080 424B     		ldr	r3, .L16+12
 184 0082 1B68     		ldr	r3, [r3]
 185 0084 7B62     		str	r3, [r7, #36]
 169:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 186              		.loc 1 169 10
 187 0086 04E0     		b	.L6
 188              	.L8:
 170:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 171:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 189              		.loc 1 171 22
 190 0088 7B6A     		ldr	r3, [r7, #36]
 191 008a 3B62     		str	r3, [r7, #32]
 172:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 192              		.loc 1 172 14
 193 008c 7B6A     		ldr	r3, [r7, #36]
 194 008e 1B68     		ldr	r3, [r3]
 195 0090 7B62     		str	r3, [r7, #36]
 196              	.L6:
 169:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 197              		.loc 1 169 21
 198 0092 7B6A     		ldr	r3, [r7, #36]
 199 0094 5B68     		ldr	r3, [r3, #4]
 169:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 200              		.loc 1 169 10
 201 0096 7A68     		ldr	r2, [r7, #4]
 202 0098 9A42     		cmp	r2, r3
 203 009a 03D9     		bls	.L7
 169:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 204              		.loc 1 169 62 discriminator 1
 205 009c 7B6A     		ldr	r3, [r7, #36]
 206 009e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJooFvg.s 			page 11


 169:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 207              		.loc 1 169 50 discriminator 1
 208 00a0 002B     		cmp	r3, #0
 209 00a2 F1D1     		bne	.L8
 210              	.L7:
 173:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 174:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 175:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 176:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				was	not found. */
 177:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 211              		.loc 1 177 17
 212 00a4 364B     		ldr	r3, .L16
 213 00a6 1B68     		ldr	r3, [r3]
 214              		.loc 1 177 7
 215 00a8 7A6A     		ldr	r2, [r7, #36]
 216 00aa 9A42     		cmp	r2, r3
 217 00ac 50D0     		beq	.L3
 178:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 179:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 180:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 181:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 218              		.loc 1 181 61
 219 00ae 3B6A     		ldr	r3, [r7, #32]
 220 00b0 1B68     		ldr	r3, [r3]
 221              		.loc 1 181 17
 222 00b2 0822     		movs	r2, #8
 223              		.loc 1 181 15
 224 00b4 1344     		add	r3, r3, r2
 225 00b6 FB61     		str	r3, [r7, #28]
 182:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 183:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 184:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 185:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 226              		.loc 1 185 48
 227 00b8 7B6A     		ldr	r3, [r7, #36]
 228 00ba 1A68     		ldr	r2, [r3]
 229              		.loc 1 185 39
 230 00bc 3B6A     		ldr	r3, [r7, #32]
 231 00be 1A60     		str	r2, [r3]
 186:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 187:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 188:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					two. */
 189:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 232              		.loc 1 189 19
 233 00c0 7B6A     		ldr	r3, [r7, #36]
 234 00c2 5A68     		ldr	r2, [r3, #4]
 235              		.loc 1 189 32
 236 00c4 7B68     		ldr	r3, [r7, #4]
 237 00c6 D21A     		subs	r2, r2, r3
 238              		.loc 1 189 50
 239 00c8 0823     		movs	r3, #8
 240 00ca 5B00     		lsls	r3, r3, #1
 241              		.loc 1 189 8
 242 00cc 9A42     		cmp	r2, r3
 243 00ce 1FD9     		bls	.L9
 190:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 191:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
ARM GAS  /tmp/ccJooFvg.s 			page 12


 192:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 193:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 194:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						compiler. */
 195:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 244              		.loc 1 195 22
 245 00d0 7A6A     		ldr	r2, [r7, #36]
 246 00d2 7B68     		ldr	r3, [r7, #4]
 247 00d4 1344     		add	r3, r3, r2
 248 00d6 BB61     		str	r3, [r7, #24]
 196:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 249              		.loc 1 196 7
 250 00d8 BB69     		ldr	r3, [r7, #24]
 251 00da 03F00703 		and	r3, r3, #7
 252 00de 002B     		cmp	r3, #0
 253 00e0 0AD0     		beq	.L10
 254              	.LBB14:
 255              	.LBB15:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 256              		.loc 2 195 2
 257              		.syntax unified
 258              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 259 00e2 4FF05003 			mov r3, #80												
 260 00e6 83F31188 		msr basepri, r3											
 261 00ea BFF36F8F 		isb														
 262 00ee BFF34F8F 		dsb														
 263              	
 264              	@ 0 "" 2
 265              		.thumb
 266              		.syntax unified
 267 00f2 3B61     		str	r3, [r7, #16]
 268              		.loc 2 203 1
 269 00f4 00BF     		nop
 270              	.L11:
 271              	.LBE15:
 272              	.LBE14:
 273              		.loc 1 196 7 discriminator 3
 274 00f6 FEE7     		b	.L11
 275              	.L10:
 197:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 198:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 199:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						single block. */
 200:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 276              		.loc 1 200 43
 277 00f8 7B6A     		ldr	r3, [r7, #36]
 278 00fa 5A68     		ldr	r2, [r3, #4]
 279              		.loc 1 200 56
 280 00fc 7B68     		ldr	r3, [r7, #4]
 281 00fe D21A     		subs	r2, r2, r3
 282              		.loc 1 200 34
 283 0100 BB69     		ldr	r3, [r7, #24]
 284 0102 5A60     		str	r2, [r3, #4]
 201:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 285              		.loc 1 201 27
 286 0104 7B6A     		ldr	r3, [r7, #36]
 287 0106 7A68     		ldr	r2, [r7, #4]
 288 0108 5A60     		str	r2, [r3, #4]
 202:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
ARM GAS  /tmp/ccJooFvg.s 			page 13


 203:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 204:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( pxNewBlockLink );
 289              		.loc 1 204 7
 290 010a B869     		ldr	r0, [r7, #24]
 291 010c FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 292              	.L9:
 205:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 206:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 207:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 208:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 209:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 210:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 211:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 293              		.loc 1 211 26
 294 0110 1D4B     		ldr	r3, .L16+8
 295 0112 1A68     		ldr	r2, [r3]
 296              		.loc 1 211 36
 297 0114 7B6A     		ldr	r3, [r7, #36]
 298 0116 5B68     		ldr	r3, [r3, #4]
 299              		.loc 1 211 26
 300 0118 D31A     		subs	r3, r2, r3
 301 011a 1B4A     		ldr	r2, .L16+8
 302 011c 1360     		str	r3, [r2]
 212:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 213:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 303              		.loc 1 213 30
 304 011e 1A4B     		ldr	r3, .L16+8
 305 0120 1A68     		ldr	r2, [r3]
 306 0122 1B4B     		ldr	r3, .L16+16
 307 0124 1B68     		ldr	r3, [r3]
 308              		.loc 1 213 8
 309 0126 9A42     		cmp	r2, r3
 310 0128 03D2     		bcs	.L12
 214:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 215:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 311              		.loc 1 215 38
 312 012a 174B     		ldr	r3, .L16+8
 313 012c 1B68     		ldr	r3, [r3]
 314 012e 184A     		ldr	r2, .L16+16
 315 0130 1360     		str	r3, [r2]
 316              	.L12:
 216:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 217:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 218:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 219:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 220:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 221:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 222:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 223:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 224:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 317              		.loc 1 224 26
 318 0132 7B6A     		ldr	r3, [r7, #36]
 319 0134 5A68     		ldr	r2, [r3, #4]
 320 0136 134B     		ldr	r3, .L16+4
 321 0138 1B68     		ldr	r3, [r3]
 322 013a 1A43     		orrs	r2, r2, r3
 323 013c 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccJooFvg.s 			page 14


 324 013e 5A60     		str	r2, [r3, #4]
 225:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 325              		.loc 1 225 31
 326 0140 7B6A     		ldr	r3, [r7, #36]
 327 0142 0022     		movs	r2, #0
 328 0144 1A60     		str	r2, [r3]
 226:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xNumberOfSuccessfulAllocations++;
 329              		.loc 1 226 36
 330 0146 134B     		ldr	r3, .L16+20
 331 0148 1B68     		ldr	r3, [r3]
 332 014a 0133     		adds	r3, r3, #1
 333 014c 114A     		ldr	r2, .L16+20
 334 014e 1360     		str	r3, [r2]
 335              	.L3:
 227:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 228:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 229:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 230:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 231:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 232:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 233:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 234:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 235:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 236:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 237:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 238:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 239:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 240:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 241:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 242:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 243:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 244:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 245:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 336              		.loc 1 245 11
 337 0150 FFF7FEFF 		bl	xTaskResumeAll
 246:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 247:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 248:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 249:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 250:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 251:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 252:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 253:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 254:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 255:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 256:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 257:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 258:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 259:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#endif
 260:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 261:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 338              		.loc 1 261 2
 339 0154 FB69     		ldr	r3, [r7, #28]
 340 0156 03F00703 		and	r3, r3, #7
 341 015a 002B     		cmp	r3, #0
 342 015c 0AD0     		beq	.L13
 343              	.LBB16:
ARM GAS  /tmp/ccJooFvg.s 			page 15


 344              	.LBB17:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 345              		.loc 2 195 2
 346              		.syntax unified
 347              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 348 015e 4FF05003 			mov r3, #80												
 349 0162 83F31188 		msr basepri, r3											
 350 0166 BFF36F8F 		isb														
 351 016a BFF34F8F 		dsb														
 352              	
 353              	@ 0 "" 2
 354              		.thumb
 355              		.syntax unified
 356 016e FB60     		str	r3, [r7, #12]
 357              		.loc 2 203 1
 358 0170 00BF     		nop
 359              	.L14:
 360              	.LBE17:
 361              	.LBE16:
 362              		.loc 1 261 2 discriminator 5
 363 0172 FEE7     		b	.L14
 364              	.L13:
 262:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 365              		.loc 1 262 9
 366 0174 FB69     		ldr	r3, [r7, #28]
 263:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 367              		.loc 1 263 1
 368 0176 1846     		mov	r0, r3
 369 0178 2837     		adds	r7, r7, #40
 370              	.LCFI3:
 371              		.cfi_def_cfa_offset 8
 372 017a BD46     		mov	sp, r7
 373              	.LCFI4:
 374              		.cfi_def_cfa_register 13
 375              		@ sp needed
 376 017c 80BD     		pop	{r7, pc}
 377              	.L17:
 378 017e 00BF     		.align	2
 379              	.L16:
 380 0180 00000000 		.word	pxEnd
 381 0184 00000000 		.word	xBlockAllocatedBit
 382 0188 00000000 		.word	xFreeBytesRemaining
 383 018c 00000000 		.word	xStart
 384 0190 00000000 		.word	xMinimumEverFreeBytesRemaining
 385 0194 00000000 		.word	xNumberOfSuccessfulAllocations
 386              		.cfi_endproc
 387              	.LFE4:
 389              		.section	.text.vPortFree,"ax",%progbits
 390              		.align	1
 391              		.global	vPortFree
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu fpv5-d16
 397              	vPortFree:
 398              	.LFB5:
 264:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJooFvg.s 			page 16


 265:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 266:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 267:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 399              		.loc 1 267 1
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 24
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403 0000 80B5     		push	{r7, lr}
 404              	.LCFI5:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 86B0     		sub	sp, sp, #24
 409              	.LCFI6:
 410              		.cfi_def_cfa_offset 32
 411 0004 00AF     		add	r7, sp, #0
 412              	.LCFI7:
 413              		.cfi_def_cfa_register 7
 414 0006 7860     		str	r0, [r7, #4]
 268:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 415              		.loc 1 268 10
 416 0008 7B68     		ldr	r3, [r7, #4]
 417 000a 7B61     		str	r3, [r7, #20]
 269:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 270:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 271:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 418              		.loc 1 271 4
 419 000c 7B68     		ldr	r3, [r7, #4]
 420 000e 002B     		cmp	r3, #0
 421 0010 4DD0     		beq	.L24
 272:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 273:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 274:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		before it. */
 275:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 422              		.loc 1 275 7
 423 0012 0823     		movs	r3, #8
 424 0014 5B42     		rsbs	r3, r3, #0
 425 0016 7A69     		ldr	r2, [r7, #20]
 426 0018 1344     		add	r3, r3, r2
 427 001a 7B61     		str	r3, [r7, #20]
 276:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 277:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 278:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
 428              		.loc 1 278 10
 429 001c 7B69     		ldr	r3, [r7, #20]
 430 001e 3B61     		str	r3, [r7, #16]
 279:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 280:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 281:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 431              		.loc 1 281 3
 432 0020 3B69     		ldr	r3, [r7, #16]
 433 0022 5A68     		ldr	r2, [r3, #4]
 434 0024 244B     		ldr	r3, .L25
 435 0026 1B68     		ldr	r3, [r3]
 436 0028 1340     		ands	r3, r3, r2
 437 002a 002B     		cmp	r3, #0
 438 002c 0AD1     		bne	.L20
ARM GAS  /tmp/ccJooFvg.s 			page 17


 439              	.LBB18:
 440              	.LBB19:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 441              		.loc 2 195 2
 442              		.syntax unified
 443              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 444 002e 4FF05003 			mov r3, #80												
 445 0032 83F31188 		msr basepri, r3											
 446 0036 BFF36F8F 		isb														
 447 003a BFF34F8F 		dsb														
 448              	
 449              	@ 0 "" 2
 450              		.thumb
 451              		.syntax unified
 452 003e FB60     		str	r3, [r7, #12]
 453              		.loc 2 203 1
 454 0040 00BF     		nop
 455              	.L21:
 456              	.LBE19:
 457              	.LBE18:
 458              		.loc 1 281 3 discriminator 1
 459 0042 FEE7     		b	.L21
 460              	.L20:
 282:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 461              		.loc 1 282 3
 462 0044 3B69     		ldr	r3, [r7, #16]
 463 0046 1B68     		ldr	r3, [r3]
 464 0048 002B     		cmp	r3, #0
 465 004a 0AD0     		beq	.L22
 466              	.LBB20:
 467              	.LBB21:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 468              		.loc 2 195 2
 469              		.syntax unified
 470              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 471 004c 4FF05003 			mov r3, #80												
 472 0050 83F31188 		msr basepri, r3											
 473 0054 BFF36F8F 		isb														
 474 0058 BFF34F8F 		dsb														
 475              	
 476              	@ 0 "" 2
 477              		.thumb
 478              		.syntax unified
 479 005c BB60     		str	r3, [r7, #8]
 480              		.loc 2 203 1
 481 005e 00BF     		nop
 482              	.L23:
 483              	.LBE21:
 484              	.LBE20:
 485              		.loc 1 282 3 discriminator 2
 486 0060 FEE7     		b	.L23
 487              	.L22:
 283:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 284:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 488              		.loc 1 284 15
 489 0062 3B69     		ldr	r3, [r7, #16]
 490 0064 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccJooFvg.s 			page 18


 491              		.loc 1 284 28
 492 0066 144B     		ldr	r3, .L25
 493 0068 1B68     		ldr	r3, [r3]
 494 006a 1340     		ands	r3, r3, r2
 495              		.loc 1 284 5
 496 006c 002B     		cmp	r3, #0
 497 006e 1ED0     		beq	.L24
 285:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 286:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 498              		.loc 1 286 14
 499 0070 3B69     		ldr	r3, [r7, #16]
 500 0072 1B68     		ldr	r3, [r3]
 501              		.loc 1 286 6
 502 0074 002B     		cmp	r3, #0
 503 0076 1AD1     		bne	.L24
 287:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 288:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 289:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				allocated. */
 290:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 504              		.loc 1 290 24
 505 0078 3B69     		ldr	r3, [r7, #16]
 506 007a 5A68     		ldr	r2, [r3, #4]
 507              		.loc 1 290 27
 508 007c 0E4B     		ldr	r3, .L25
 509 007e 1B68     		ldr	r3, [r3]
 510 0080 DB43     		mvns	r3, r3
 511              		.loc 1 290 24
 512 0082 1A40     		ands	r2, r2, r3
 513 0084 3B69     		ldr	r3, [r7, #16]
 514 0086 5A60     		str	r2, [r3, #4]
 291:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 292:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 515              		.loc 1 292 5
 516 0088 FFF7FEFF 		bl	vTaskSuspendAll
 293:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 294:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 295:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 517              		.loc 1 295 35
 518 008c 3B69     		ldr	r3, [r7, #16]
 519 008e 5A68     		ldr	r2, [r3, #4]
 520              		.loc 1 295 26
 521 0090 0A4B     		ldr	r3, .L25+4
 522 0092 1B68     		ldr	r3, [r3]
 523 0094 1344     		add	r3, r3, r2
 524 0096 094A     		ldr	r2, .L25+4
 525 0098 1360     		str	r3, [r2]
 296:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 297:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 526              		.loc 1 297 6
 527 009a 3869     		ldr	r0, [r7, #16]
 528 009c FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 298:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xNumberOfSuccessfulFrees++;
 529              		.loc 1 298 30
 530 00a0 074B     		ldr	r3, .L25+8
 531 00a2 1B68     		ldr	r3, [r3]
 532 00a4 0133     		adds	r3, r3, #1
 533 00a6 064A     		ldr	r2, .L25+8
ARM GAS  /tmp/ccJooFvg.s 			page 19


 534 00a8 1360     		str	r3, [r2]
 299:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 300:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 535              		.loc 1 300 14
 536 00aa FFF7FEFF 		bl	xTaskResumeAll
 537              	.L24:
 301:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 302:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 303:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 304:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 305:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 306:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 307:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 308:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 309:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 310:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 311:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 312:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 538              		.loc 1 312 1
 539 00ae 00BF     		nop
 540 00b0 1837     		adds	r7, r7, #24
 541              	.LCFI8:
 542              		.cfi_def_cfa_offset 8
 543 00b2 BD46     		mov	sp, r7
 544              	.LCFI9:
 545              		.cfi_def_cfa_register 13
 546              		@ sp needed
 547 00b4 80BD     		pop	{r7, pc}
 548              	.L26:
 549 00b6 00BF     		.align	2
 550              	.L25:
 551 00b8 00000000 		.word	xBlockAllocatedBit
 552 00bc 00000000 		.word	xFreeBytesRemaining
 553 00c0 00000000 		.word	xNumberOfSuccessfulFrees
 554              		.cfi_endproc
 555              	.LFE5:
 557              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 558              		.align	1
 559              		.global	xPortGetFreeHeapSize
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv5-d16
 565              	xPortGetFreeHeapSize:
 566              	.LFB6:
 313:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 314:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 315:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 316:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 567              		.loc 1 316 1
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0000 80B4     		push	{r7}
 573              	.LCFI10:
 574              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccJooFvg.s 			page 20


 575              		.cfi_offset 7, -4
 576 0002 00AF     		add	r7, sp, #0
 577              	.LCFI11:
 578              		.cfi_def_cfa_register 7
 317:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 579              		.loc 1 317 9
 580 0004 034B     		ldr	r3, .L29
 581 0006 1B68     		ldr	r3, [r3]
 318:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 582              		.loc 1 318 1
 583 0008 1846     		mov	r0, r3
 584 000a BD46     		mov	sp, r7
 585              	.LCFI12:
 586              		.cfi_def_cfa_register 13
 587              		@ sp needed
 588 000c 5DF8047B 		ldr	r7, [sp], #4
 589              	.LCFI13:
 590              		.cfi_restore 7
 591              		.cfi_def_cfa_offset 0
 592 0010 7047     		bx	lr
 593              	.L30:
 594 0012 00BF     		.align	2
 595              	.L29:
 596 0014 00000000 		.word	xFreeBytesRemaining
 597              		.cfi_endproc
 598              	.LFE6:
 600              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 601              		.align	1
 602              		.global	xPortGetMinimumEverFreeHeapSize
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv5-d16
 608              	xPortGetMinimumEverFreeHeapSize:
 609              	.LFB7:
 319:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 320:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 321:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 322:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 610              		.loc 1 322 1
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615 0000 80B4     		push	{r7}
 616              	.LCFI14:
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 7, -4
 619 0002 00AF     		add	r7, sp, #0
 620              	.LCFI15:
 621              		.cfi_def_cfa_register 7
 323:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 622              		.loc 1 323 9
 623 0004 034B     		ldr	r3, .L33
 624 0006 1B68     		ldr	r3, [r3]
 324:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 625              		.loc 1 324 1
ARM GAS  /tmp/ccJooFvg.s 			page 21


 626 0008 1846     		mov	r0, r3
 627 000a BD46     		mov	sp, r7
 628              	.LCFI16:
 629              		.cfi_def_cfa_register 13
 630              		@ sp needed
 631 000c 5DF8047B 		ldr	r7, [sp], #4
 632              	.LCFI17:
 633              		.cfi_restore 7
 634              		.cfi_def_cfa_offset 0
 635 0010 7047     		bx	lr
 636              	.L34:
 637 0012 00BF     		.align	2
 638              	.L33:
 639 0014 00000000 		.word	xMinimumEverFreeBytesRemaining
 640              		.cfi_endproc
 641              	.LFE7:
 643              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 644              		.align	1
 645              		.global	vPortInitialiseBlocks
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv5-d16
 651              	vPortInitialiseBlocks:
 652              	.LFB8:
 325:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 326:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 327:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 328:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 653              		.loc 1 328 1
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0000 80B4     		push	{r7}
 659              	.LCFI18:
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 7, -4
 662 0002 00AF     		add	r7, sp, #0
 663              	.LCFI19:
 664              		.cfi_def_cfa_register 7
 329:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 330:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 665              		.loc 1 330 1
 666 0004 00BF     		nop
 667 0006 BD46     		mov	sp, r7
 668              	.LCFI20:
 669              		.cfi_def_cfa_register 13
 670              		@ sp needed
 671 0008 5DF8047B 		ldr	r7, [sp], #4
 672              	.LCFI21:
 673              		.cfi_restore 7
 674              		.cfi_def_cfa_offset 0
 675 000c 7047     		bx	lr
 676              		.cfi_endproc
 677              	.LFE8:
 679              		.section	.text.prvHeapInit,"ax",%progbits
ARM GAS  /tmp/ccJooFvg.s 			page 22


 680              		.align	1
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv5-d16
 686              	prvHeapInit:
 687              	.LFB9:
 331:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 332:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 333:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 334:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 688              		.loc 1 334 1
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 16
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693 0000 80B4     		push	{r7}
 694              	.LCFI22:
 695              		.cfi_def_cfa_offset 4
 696              		.cfi_offset 7, -4
 697 0002 85B0     		sub	sp, sp, #20
 698              	.LCFI23:
 699              		.cfi_def_cfa_offset 24
 700 0004 00AF     		add	r7, sp, #0
 701              	.LCFI24:
 702              		.cfi_def_cfa_register 7
 335:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
 336:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
 337:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t uxAddress;
 338:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 703              		.loc 1 338 8
 704 0006 4FF47053 		mov	r3, #15360
 705 000a BB60     		str	r3, [r7, #8]
 339:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 340:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 341:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress = ( size_t ) ucHeap;
 706              		.loc 1 341 12
 707 000c 274B     		ldr	r3, .L38
 708 000e FB60     		str	r3, [r7, #12]
 342:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 343:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 709              		.loc 1 343 18
 710 0010 FB68     		ldr	r3, [r7, #12]
 711 0012 03F00703 		and	r3, r3, #7
 712              		.loc 1 343 4
 713 0016 002B     		cmp	r3, #0
 714 0018 0CD0     		beq	.L37
 344:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 345:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 715              		.loc 1 345 13
 716 001a FB68     		ldr	r3, [r7, #12]
 717 001c 0733     		adds	r3, r3, #7
 718 001e FB60     		str	r3, [r7, #12]
 346:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 719              		.loc 1 346 13
 720 0020 FB68     		ldr	r3, [r7, #12]
 721 0022 23F00703 		bic	r3, r3, #7
ARM GAS  /tmp/ccJooFvg.s 			page 23


 722 0026 FB60     		str	r3, [r7, #12]
 347:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 723              		.loc 1 347 18
 724 0028 BA68     		ldr	r2, [r7, #8]
 725 002a FB68     		ldr	r3, [r7, #12]
 726 002c D31A     		subs	r3, r2, r3
 727              		.loc 1 347 33
 728 002e 1F4A     		ldr	r2, .L38
 729              		.loc 1 347 18
 730 0030 1344     		add	r3, r3, r2
 731 0032 BB60     		str	r3, [r7, #8]
 732              	.L37:
 348:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 349:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 350:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) uxAddress;
 733              		.loc 1 350 17
 734 0034 FB68     		ldr	r3, [r7, #12]
 735 0036 7B60     		str	r3, [r7, #4]
 351:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 352:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 353:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 354:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 736              		.loc 1 354 25
 737 0038 1D4A     		ldr	r2, .L38+4
 738 003a 7B68     		ldr	r3, [r7, #4]
 739 003c 1360     		str	r3, [r2]
 355:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
 740              		.loc 1 355 20
 741 003e 1C4B     		ldr	r3, .L38+4
 742 0040 0022     		movs	r2, #0
 743 0042 5A60     		str	r2, [r3, #4]
 356:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 357:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 358:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 359:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 744              		.loc 1 359 16
 745 0044 7B68     		ldr	r3, [r7, #4]
 746              		.loc 1 359 12
 747 0046 BA68     		ldr	r2, [r7, #8]
 748 0048 1344     		add	r3, r3, r2
 749 004a FB60     		str	r3, [r7, #12]
 360:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress -= xHeapStructSize;
 750              		.loc 1 360 12
 751 004c 0822     		movs	r2, #8
 752 004e FB68     		ldr	r3, [r7, #12]
 753 0050 9B1A     		subs	r3, r3, r2
 754 0052 FB60     		str	r3, [r7, #12]
 361:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 755              		.loc 1 361 12
 756 0054 FB68     		ldr	r3, [r7, #12]
 757 0056 23F00703 		bic	r3, r3, #7
 758 005a FB60     		str	r3, [r7, #12]
 362:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) uxAddress;
 759              		.loc 1 362 10
 760 005c FB68     		ldr	r3, [r7, #12]
 761              		.loc 1 362 8
 762 005e 154A     		ldr	r2, .L38+8
ARM GAS  /tmp/ccJooFvg.s 			page 24


 763 0060 1360     		str	r3, [r2]
 363:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
 764              		.loc 1 363 7
 765 0062 144B     		ldr	r3, .L38+8
 766 0064 1B68     		ldr	r3, [r3]
 767              		.loc 1 363 20
 768 0066 0022     		movs	r2, #0
 769 0068 5A60     		str	r2, [r3, #4]
 364:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
 770              		.loc 1 364 7
 771 006a 124B     		ldr	r3, .L38+8
 772 006c 1B68     		ldr	r3, [r3]
 773              		.loc 1 364 25
 774 006e 0022     		movs	r2, #0
 775 0070 1A60     		str	r2, [r3]
 365:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 366:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 367:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 368:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 776              		.loc 1 368 19
 777 0072 7B68     		ldr	r3, [r7, #4]
 778 0074 3B60     		str	r3, [r7]
 369:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 779              		.loc 1 369 45
 780 0076 3B68     		ldr	r3, [r7]
 781              		.loc 1 369 43
 782 0078 FA68     		ldr	r2, [r7, #12]
 783 007a D21A     		subs	r2, r2, r3
 784              		.loc 1 369 31
 785 007c 3B68     		ldr	r3, [r7]
 786 007e 5A60     		str	r2, [r3, #4]
 370:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 787              		.loc 1 370 36
 788 0080 0C4B     		ldr	r3, .L38+8
 789 0082 1A68     		ldr	r2, [r3]
 790 0084 3B68     		ldr	r3, [r7]
 791 0086 1A60     		str	r2, [r3]
 371:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 372:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 373:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 792              		.loc 1 373 51
 793 0088 3B68     		ldr	r3, [r7]
 794 008a 5B68     		ldr	r3, [r3, #4]
 795              		.loc 1 373 33
 796 008c 0A4A     		ldr	r2, .L38+12
 797 008e 1360     		str	r3, [r2]
 374:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 798              		.loc 1 374 40
 799 0090 3B68     		ldr	r3, [r7]
 800 0092 5B68     		ldr	r3, [r3, #4]
 801              		.loc 1 374 22
 802 0094 094A     		ldr	r2, .L38+16
 803 0096 1360     		str	r3, [r2]
 375:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 376:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 377:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 804              		.loc 1 377 21
ARM GAS  /tmp/ccJooFvg.s 			page 25


 805 0098 094B     		ldr	r3, .L38+20
 806 009a 4FF00042 		mov	r2, #-2147483648
 807 009e 1A60     		str	r2, [r3]
 378:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 808              		.loc 1 378 1
 809 00a0 00BF     		nop
 810 00a2 1437     		adds	r7, r7, #20
 811              	.LCFI25:
 812              		.cfi_def_cfa_offset 4
 813 00a4 BD46     		mov	sp, r7
 814              	.LCFI26:
 815              		.cfi_def_cfa_register 13
 816              		@ sp needed
 817 00a6 5DF8047B 		ldr	r7, [sp], #4
 818              	.LCFI27:
 819              		.cfi_restore 7
 820              		.cfi_def_cfa_offset 0
 821 00aa 7047     		bx	lr
 822              	.L39:
 823              		.align	2
 824              	.L38:
 825 00ac 00000000 		.word	ucHeap
 826 00b0 00000000 		.word	xStart
 827 00b4 00000000 		.word	pxEnd
 828 00b8 00000000 		.word	xMinimumEverFreeBytesRemaining
 829 00bc 00000000 		.word	xFreeBytesRemaining
 830 00c0 00000000 		.word	xBlockAllocatedBit
 831              		.cfi_endproc
 832              	.LFE9:
 834              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 835              		.align	1
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 839              		.fpu fpv5-d16
 841              	prvInsertBlockIntoFreeList:
 842              	.LFB10:
 379:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 380:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 381:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 382:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 843              		.loc 1 382 1
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 16
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848 0000 80B4     		push	{r7}
 849              	.LCFI28:
 850              		.cfi_def_cfa_offset 4
 851              		.cfi_offset 7, -4
 852 0002 85B0     		sub	sp, sp, #20
 853              	.LCFI29:
 854              		.cfi_def_cfa_offset 24
 855 0004 00AF     		add	r7, sp, #0
 856              	.LCFI30:
 857              		.cfi_def_cfa_register 7
 858 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccJooFvg.s 			page 26


 383:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 384:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc;
 385:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 386:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 387:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 388:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
 859              		.loc 1 388 18
 860 0008 284B     		ldr	r3, .L49
 861 000a FB60     		str	r3, [r7, #12]
 862              		.loc 1 388 2
 863 000c 02E0     		b	.L41
 864              	.L42:
 865              		.loc 1 388 87 discriminator 3
 866 000e FB68     		ldr	r3, [r7, #12]
 867 0010 1B68     		ldr	r3, [r3]
 868 0012 FB60     		str	r3, [r7, #12]
 869              	.L41:
 870              		.loc 1 388 39 discriminator 1
 871 0014 FB68     		ldr	r3, [r7, #12]
 872 0016 1B68     		ldr	r3, [r3]
 873              		.loc 1 388 2 discriminator 1
 874 0018 7A68     		ldr	r2, [r7, #4]
 875 001a 9A42     		cmp	r2, r3
 876 001c F7D8     		bhi	.L42
 389:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 390:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
 391:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 392:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 393:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 394:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 395:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 877              		.loc 1 395 6
 878 001e FB68     		ldr	r3, [r7, #12]
 879 0020 BB60     		str	r3, [r7, #8]
 396:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 880              		.loc 1 396 24
 881 0022 FB68     		ldr	r3, [r7, #12]
 882 0024 5B68     		ldr	r3, [r3, #4]
 883              		.loc 1 396 12
 884 0026 BA68     		ldr	r2, [r7, #8]
 885 0028 1344     		add	r3, r3, r2
 886              		.loc 1 396 4
 887 002a 7A68     		ldr	r2, [r7, #4]
 888 002c 9A42     		cmp	r2, r3
 889 002e 08D1     		bne	.L43
 397:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 398:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 890              		.loc 1 398 26
 891 0030 FB68     		ldr	r3, [r7, #12]
 892 0032 5A68     		ldr	r2, [r3, #4]
 893              		.loc 1 398 44
 894 0034 7B68     		ldr	r3, [r7, #4]
 895 0036 5B68     		ldr	r3, [r3, #4]
 896              		.loc 1 398 26
 897 0038 1A44     		add	r2, r2, r3
 898 003a FB68     		ldr	r3, [r7, #12]
 899 003c 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccJooFvg.s 			page 27


 399:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 900              		.loc 1 399 19
 901 003e FB68     		ldr	r3, [r7, #12]
 902 0040 7B60     		str	r3, [r7, #4]
 903              	.L43:
 400:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 401:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 402:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 403:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 404:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 405:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 406:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 407:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 408:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 904              		.loc 1 408 6
 905 0042 7B68     		ldr	r3, [r7, #4]
 906 0044 BB60     		str	r3, [r7, #8]
 409:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 907              		.loc 1 409 29
 908 0046 7B68     		ldr	r3, [r7, #4]
 909 0048 5B68     		ldr	r3, [r3, #4]
 910              		.loc 1 409 12
 911 004a BA68     		ldr	r2, [r7, #8]
 912 004c 1A44     		add	r2, r2, r3
 913              		.loc 1 409 71
 914 004e FB68     		ldr	r3, [r7, #12]
 915 0050 1B68     		ldr	r3, [r3]
 916              		.loc 1 409 4
 917 0052 9A42     		cmp	r2, r3
 918 0054 18D1     		bne	.L44
 410:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 411:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
 919              		.loc 1 411 17
 920 0056 FB68     		ldr	r3, [r7, #12]
 921 0058 1A68     		ldr	r2, [r3]
 922              		.loc 1 411 35
 923 005a 154B     		ldr	r3, .L49+4
 924 005c 1B68     		ldr	r3, [r3]
 925              		.loc 1 411 5
 926 005e 9A42     		cmp	r2, r3
 927 0060 0DD0     		beq	.L45
 412:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 413:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 414:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 928              		.loc 1 414 32
 929 0062 7B68     		ldr	r3, [r7, #4]
 930 0064 5A68     		ldr	r2, [r3, #4]
 931              		.loc 1 414 45
 932 0066 FB68     		ldr	r3, [r7, #12]
 933 0068 1B68     		ldr	r3, [r3]
 934              		.loc 1 414 62
 935 006a 5B68     		ldr	r3, [r3, #4]
 936              		.loc 1 414 32
 937 006c 1A44     		add	r2, r2, r3
 938 006e 7B68     		ldr	r3, [r7, #4]
 939 0070 5A60     		str	r2, [r3, #4]
 415:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
ARM GAS  /tmp/ccJooFvg.s 			page 28


 940              		.loc 1 415 49
 941 0072 FB68     		ldr	r3, [r7, #12]
 942 0074 1B68     		ldr	r3, [r3]
 943              		.loc 1 415 66
 944 0076 1A68     		ldr	r2, [r3]
 945              		.loc 1 415 37
 946 0078 7B68     		ldr	r3, [r7, #4]
 947 007a 1A60     		str	r2, [r3]
 948 007c 08E0     		b	.L46
 949              	.L45:
 416:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 417:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 418:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 419:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 950              		.loc 1 419 37
 951 007e 0C4B     		ldr	r3, .L49+4
 952 0080 1A68     		ldr	r2, [r3]
 953 0082 7B68     		ldr	r3, [r7, #4]
 954 0084 1A60     		str	r2, [r3]
 955 0086 03E0     		b	.L46
 956              	.L44:
 420:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 421:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 422:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 423:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 424:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 957              		.loc 1 424 48
 958 0088 FB68     		ldr	r3, [r7, #12]
 959 008a 1A68     		ldr	r2, [r3]
 960              		.loc 1 424 36
 961 008c 7B68     		ldr	r3, [r7, #4]
 962 008e 1A60     		str	r2, [r3]
 963              	.L46:
 425:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 426:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 427:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 428:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 429:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 430:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	to itself. */
 431:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 964              		.loc 1 431 4
 965 0090 FA68     		ldr	r2, [r7, #12]
 966 0092 7B68     		ldr	r3, [r7, #4]
 967 0094 9A42     		cmp	r2, r3
 968 0096 02D0     		beq	.L48
 432:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 433:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 969              		.loc 1 433 31
 970 0098 FB68     		ldr	r3, [r7, #12]
 971 009a 7A68     		ldr	r2, [r7, #4]
 972 009c 1A60     		str	r2, [r3]
 973              	.L48:
 434:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 435:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 436:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 437:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 438:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
ARM GAS  /tmp/ccJooFvg.s 			page 29


 439:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 974              		.loc 1 439 1
 975 009e 00BF     		nop
 976 00a0 1437     		adds	r7, r7, #20
 977              	.LCFI31:
 978              		.cfi_def_cfa_offset 4
 979 00a2 BD46     		mov	sp, r7
 980              	.LCFI32:
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 00a4 5DF8047B 		ldr	r7, [sp], #4
 984              	.LCFI33:
 985              		.cfi_restore 7
 986              		.cfi_def_cfa_offset 0
 987 00a8 7047     		bx	lr
 988              	.L50:
 989 00aa 00BF     		.align	2
 990              	.L49:
 991 00ac 00000000 		.word	xStart
 992 00b0 00000000 		.word	pxEnd
 993              		.cfi_endproc
 994              	.LFE10:
 996              		.section	.text.vPortGetHeapStats,"ax",%progbits
 997              		.align	1
 998              		.global	vPortGetHeapStats
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv5-d16
 1004              	vPortGetHeapStats:
 1005              	.LFB11:
 440:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 441:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 442:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t *pxHeapStats )
 443:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 1006              		.loc 1 443 1
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 24
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              	.LCFI34:
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 7, -8
 1014              		.cfi_offset 14, -4
 1015 0002 86B0     		sub	sp, sp, #24
 1016              	.LCFI35:
 1017              		.cfi_def_cfa_offset 32
 1018 0004 00AF     		add	r7, sp, #0
 1019              	.LCFI36:
 1020              		.cfi_def_cfa_register 7
 1021 0006 7860     		str	r0, [r7, #4]
 444:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock;
 445:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way
 1022              		.loc 1 445 8
 1023 0008 0023     		movs	r3, #0
 1024 000a 3B61     		str	r3, [r7, #16]
 1025              		.loc 1 445 21
ARM GAS  /tmp/ccJooFvg.s 			page 30


 1026 000c 0023     		movs	r3, #0
 1027 000e FB60     		str	r3, [r7, #12]
 1028              		.loc 1 445 35
 1029 0010 4FF0FF33 		mov	r3, #-1
 1030 0014 BB60     		str	r3, [r7, #8]
 446:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 447:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 1031              		.loc 1 447 2
 1032 0016 FFF7FEFF 		bl	vTaskSuspendAll
 448:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 449:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlock = xStart.pxNextFreeBlock;
 1033              		.loc 1 449 11
 1034 001a 224B     		ldr	r3, .L56
 1035 001c 1B68     		ldr	r3, [r3]
 1036 001e 7B61     		str	r3, [r7, #20]
 450:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 451:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* pxBlock will be NULL if the heap has not been initialised.  The heap
 452:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		is initialised automatically when the first allocation is made. */
 453:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxBlock != NULL )
 1037              		.loc 1 453 5
 1038 0020 7B69     		ldr	r3, [r7, #20]
 1039 0022 002B     		cmp	r3, #0
 1040 0024 1AD0     		beq	.L52
 1041              	.L55:
 454:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 455:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			do
 456:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 457:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Increment the number of blocks and record the largest block seen
 458:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				so far. */
 459:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				xBlocks++;
 1042              		.loc 1 459 12
 1043 0026 3B69     		ldr	r3, [r7, #16]
 1044 0028 0133     		adds	r3, r3, #1
 1045 002a 3B61     		str	r3, [r7, #16]
 460:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 461:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( pxBlock->xBlockSize > xMaxSize )
 1046              		.loc 1 461 16
 1047 002c 7B69     		ldr	r3, [r7, #20]
 1048 002e 5B68     		ldr	r3, [r3, #4]
 1049              		.loc 1 461 7
 1050 0030 FA68     		ldr	r2, [r7, #12]
 1051 0032 9A42     		cmp	r2, r3
 1052 0034 02D2     		bcs	.L53
 462:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 463:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xMaxSize = pxBlock->xBlockSize;
 1053              		.loc 1 463 15
 1054 0036 7B69     		ldr	r3, [r7, #20]
 1055 0038 5B68     		ldr	r3, [r3, #4]
 1056 003a FB60     		str	r3, [r7, #12]
 1057              	.L53:
 464:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 465:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 466:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( pxBlock->xBlockSize < xMinSize )
 1058              		.loc 1 466 16
 1059 003c 7B69     		ldr	r3, [r7, #20]
 1060 003e 5B68     		ldr	r3, [r3, #4]
 1061              		.loc 1 466 7
ARM GAS  /tmp/ccJooFvg.s 			page 31


 1062 0040 BA68     		ldr	r2, [r7, #8]
 1063 0042 9A42     		cmp	r2, r3
 1064 0044 02D9     		bls	.L54
 467:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 468:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xMinSize = pxBlock->xBlockSize;
 1065              		.loc 1 468 15
 1066 0046 7B69     		ldr	r3, [r7, #20]
 1067 0048 5B68     		ldr	r3, [r3, #4]
 1068 004a BB60     		str	r3, [r7, #8]
 1069              	.L54:
 469:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 470:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 471:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Move to the next block in the chain until the last block is
 472:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				reached. */
 473:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 1070              		.loc 1 473 13
 1071 004c 7B69     		ldr	r3, [r7, #20]
 1072 004e 1B68     		ldr	r3, [r3]
 1073 0050 7B61     		str	r3, [r7, #20]
 474:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			} while( pxBlock != pxEnd );
 1074              		.loc 1 474 21
 1075 0052 154B     		ldr	r3, .L56+4
 1076 0054 1B68     		ldr	r3, [r3]
 1077              		.loc 1 474 4
 1078 0056 7A69     		ldr	r2, [r7, #20]
 1079 0058 9A42     		cmp	r2, r3
 1080 005a E4D1     		bne	.L55
 1081              	.L52:
 475:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 476:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 477:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xTaskResumeAll();
 1082              		.loc 1 477 2
 1083 005c FFF7FEFF 		bl	xTaskResumeAll
 478:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 479:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 1084              		.loc 1 479 46
 1085 0060 7B68     		ldr	r3, [r7, #4]
 1086 0062 FA68     		ldr	r2, [r7, #12]
 1087 0064 5A60     		str	r2, [r3, #4]
 480:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 1088              		.loc 1 480 47
 1089 0066 7B68     		ldr	r3, [r7, #4]
 1090 0068 BA68     		ldr	r2, [r7, #8]
 1091 006a 9A60     		str	r2, [r3, #8]
 481:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 1092              		.loc 1 481 35
 1093 006c 7B68     		ldr	r3, [r7, #4]
 1094 006e 3A69     		ldr	r2, [r7, #16]
 1095 0070 DA60     		str	r2, [r3, #12]
 482:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 483:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	taskENTER_CRITICAL();
 1096              		.loc 1 483 2
 1097 0072 FFF7FEFF 		bl	vPortEnterCritical
 484:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 485:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 1098              		.loc 1 485 43
 1099 0076 0D4B     		ldr	r3, .L56+8
ARM GAS  /tmp/ccJooFvg.s 			page 32


 1100 0078 1A68     		ldr	r2, [r3]
 1101 007a 7B68     		ldr	r3, [r7, #4]
 1102 007c 1A60     		str	r2, [r3]
 486:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 1103              		.loc 1 486 47
 1104 007e 0C4B     		ldr	r3, .L56+12
 1105 0080 1A68     		ldr	r2, [r3]
 1106 0082 7B68     		ldr	r3, [r7, #4]
 1107 0084 5A61     		str	r2, [r3, #20]
 487:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 1108              		.loc 1 487 41
 1109 0086 0B4B     		ldr	r3, .L56+16
 1110 0088 1A68     		ldr	r2, [r3]
 1111 008a 7B68     		ldr	r3, [r7, #4]
 1112 008c 9A61     		str	r2, [r3, #24]
 488:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 1113              		.loc 1 488 47
 1114 008e 0A4B     		ldr	r3, .L56+20
 1115 0090 1A68     		ldr	r2, [r3]
 1116 0092 7B68     		ldr	r3, [r7, #4]
 1117 0094 1A61     		str	r2, [r3, #16]
 489:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 490:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	taskEXIT_CRITICAL();
 1118              		.loc 1 490 2
 1119 0096 FFF7FEFF 		bl	vPortExitCritical
 491:./Libraries/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 1120              		.loc 1 491 1
 1121 009a 00BF     		nop
 1122 009c 1837     		adds	r7, r7, #24
 1123              	.LCFI37:
 1124              		.cfi_def_cfa_offset 8
 1125 009e BD46     		mov	sp, r7
 1126              	.LCFI38:
 1127              		.cfi_def_cfa_register 13
 1128              		@ sp needed
 1129 00a0 80BD     		pop	{r7, pc}
 1130              	.L57:
 1131 00a2 00BF     		.align	2
 1132              	.L56:
 1133 00a4 00000000 		.word	xStart
 1134 00a8 00000000 		.word	pxEnd
 1135 00ac 00000000 		.word	xFreeBytesRemaining
 1136 00b0 00000000 		.word	xNumberOfSuccessfulAllocations
 1137 00b4 00000000 		.word	xNumberOfSuccessfulFrees
 1138 00b8 00000000 		.word	xMinimumEverFreeBytesRemaining
 1139              		.cfi_endproc
 1140              	.LFE11:
 1142              		.text
 1143              	.Letext0:
 1144              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1145              		.file 4 "/usr/include/newlib/sys/_types.h"
 1146              		.file 5 "/usr/include/newlib/sys/reent.h"
 1147              		.file 6 "/usr/include/newlib/sys/lock.h"
 1148              		.file 7 "/usr/include/newlib/stdlib.h"
 1149              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1150              		.file 9 "./User/code/Inc/FreeRTOSConfig.h"
 1151              		.file 10 "./Libraries/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccJooFvg.s 			page 33


ARM GAS  /tmp/ccJooFvg.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
     /tmp/ccJooFvg.s:17     .bss.ucHeap:0000000000000000 $d
     /tmp/ccJooFvg.s:20     .bss.ucHeap:0000000000000000 ucHeap
     /tmp/ccJooFvg.s:23     .rodata.xHeapStructSize:0000000000000000 $d
     /tmp/ccJooFvg.s:26     .rodata.xHeapStructSize:0000000000000000 xHeapStructSize
     /tmp/ccJooFvg.s:29     .bss.xStart:0000000000000000 $d
     /tmp/ccJooFvg.s:32     .bss.xStart:0000000000000000 xStart
     /tmp/ccJooFvg.s:35     .bss.pxEnd:0000000000000000 $d
     /tmp/ccJooFvg.s:38     .bss.pxEnd:0000000000000000 pxEnd
     /tmp/ccJooFvg.s:41     .bss.xFreeBytesRemaining:0000000000000000 $d
     /tmp/ccJooFvg.s:44     .bss.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
     /tmp/ccJooFvg.s:47     .bss.xMinimumEverFreeBytesRemaining:0000000000000000 $d
     /tmp/ccJooFvg.s:50     .bss.xMinimumEverFreeBytesRemaining:0000000000000000 xMinimumEverFreeBytesRemaining
     /tmp/ccJooFvg.s:53     .bss.xNumberOfSuccessfulAllocations:0000000000000000 $d
     /tmp/ccJooFvg.s:56     .bss.xNumberOfSuccessfulAllocations:0000000000000000 xNumberOfSuccessfulAllocations
     /tmp/ccJooFvg.s:59     .bss.xNumberOfSuccessfulFrees:0000000000000000 $d
     /tmp/ccJooFvg.s:62     .bss.xNumberOfSuccessfulFrees:0000000000000000 xNumberOfSuccessfulFrees
     /tmp/ccJooFvg.s:65     .bss.xBlockAllocatedBit:0000000000000000 $d
     /tmp/ccJooFvg.s:68     .bss.xBlockAllocatedBit:0000000000000000 xBlockAllocatedBit
     /tmp/ccJooFvg.s:71     .text.pvPortMalloc:0000000000000000 $t
     /tmp/ccJooFvg.s:79     .text.pvPortMalloc:0000000000000000 pvPortMalloc
     /tmp/ccJooFvg.s:686    .text.prvHeapInit:0000000000000000 prvHeapInit
     /tmp/ccJooFvg.s:841    .text.prvInsertBlockIntoFreeList:0000000000000000 prvInsertBlockIntoFreeList
     /tmp/ccJooFvg.s:380    .text.pvPortMalloc:0000000000000180 $d
     /tmp/ccJooFvg.s:390    .text.vPortFree:0000000000000000 $t
     /tmp/ccJooFvg.s:397    .text.vPortFree:0000000000000000 vPortFree
     /tmp/ccJooFvg.s:551    .text.vPortFree:00000000000000b8 $d
     /tmp/ccJooFvg.s:558    .text.xPortGetFreeHeapSize:0000000000000000 $t
     /tmp/ccJooFvg.s:565    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
     /tmp/ccJooFvg.s:596    .text.xPortGetFreeHeapSize:0000000000000014 $d
     /tmp/ccJooFvg.s:601    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
     /tmp/ccJooFvg.s:608    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
     /tmp/ccJooFvg.s:639    .text.xPortGetMinimumEverFreeHeapSize:0000000000000014 $d
     /tmp/ccJooFvg.s:644    .text.vPortInitialiseBlocks:0000000000000000 $t
     /tmp/ccJooFvg.s:651    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
     /tmp/ccJooFvg.s:680    .text.prvHeapInit:0000000000000000 $t
     /tmp/ccJooFvg.s:825    .text.prvHeapInit:00000000000000ac $d
     /tmp/ccJooFvg.s:835    .text.prvInsertBlockIntoFreeList:0000000000000000 $t
     /tmp/ccJooFvg.s:991    .text.prvInsertBlockIntoFreeList:00000000000000ac $d
     /tmp/ccJooFvg.s:997    .text.vPortGetHeapStats:0000000000000000 $t
     /tmp/ccJooFvg.s:1004   .text.vPortGetHeapStats:0000000000000000 vPortGetHeapStats
     /tmp/ccJooFvg.s:1133   .text.vPortGetHeapStats:00000000000000a4 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
