ARM GAS  /tmp/ccin8GIg.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"port.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.data.uxCriticalNesting,"aw"
  17              		.align	2
  20              	uxCriticalNesting:
  21 0000 AAAAAAAA 		.word	-1431655766
  22              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  25              	ucMaxSysCallPriority:
  26 0000 00       		.space	1
  27              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  28              		.align	2
  31              	ulMaxPRIGROUPValue:
  32 0000 00000000 		.space	4
  33              		.section	.rodata.pcInterruptPriorityRegisters,"a"
  34              		.align	2
  37              	pcInterruptPriorityRegisters:
  38 0000 F0E300E0 		.word	-536812560
  39              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  40              		.align	1
  41              		.global	pxPortInitialiseStack
  42              		.arch armv7e-m
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv5-d16
  48              	pxPortInitialiseStack:
  49              	.LFB4:
  50              		.file 1 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
ARM GAS  /tmp/ccin8GIg.s 			page 2


  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
ARM GAS  /tmp/ccin8GIg.s 			page 3


  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN				( 0xfffffffd )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
ARM GAS  /tmp/ccin8GIg.s 			page 4


 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
ARM GAS  /tmp/ccin8GIg.s 			page 5


 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  51              		.loc 1 188 1
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56 0000 80B4     		push	{r7}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 85B0     		sub	sp, sp, #20
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 24
  63 0004 00AF     		add	r7, sp, #0
  64              	.LCFI2:
  65              		.cfi_def_cfa_register 7
  66 0006 F860     		str	r0, [r7, #12]
  67 0008 B960     		str	r1, [r7, #8]
  68 000a 7A60     		str	r2, [r7, #4]
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  69              		.loc 1 194 14
  70 000c FB68     		ldr	r3, [r7, #12]
  71 000e 043B     		subs	r3, r3, #4
  72 0010 FB60     		str	r3, [r7, #12]
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  73              		.loc 1 196 16
  74 0012 FB68     		ldr	r3, [r7, #12]
  75 0014 4FF08072 		mov	r2, #16777216
  76 0018 1A60     		str	r2, [r3]
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  77              		.loc 1 197 14
  78 001a FB68     		ldr	r3, [r7, #12]
  79 001c 043B     		subs	r3, r3, #4
  80 001e FB60     		str	r3, [r7, #12]
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  81              		.loc 1 198 20
  82 0020 BB68     		ldr	r3, [r7, #8]
  83              		.loc 1 198 45
  84 0022 23F00102 		bic	r2, r3, #1
  85              		.loc 1 198 16
  86 0026 FB68     		ldr	r3, [r7, #12]
  87 0028 1A60     		str	r2, [r3]
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  88              		.loc 1 199 14
  89 002a FB68     		ldr	r3, [r7, #12]
  90 002c 043B     		subs	r3, r3, #4
  91 002e FB60     		str	r3, [r7, #12]
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  92              		.loc 1 200 18
  93 0030 0C4A     		ldr	r2, .L3
  94              		.loc 1 200 16
ARM GAS  /tmp/ccin8GIg.s 			page 6


  95 0032 FB68     		ldr	r3, [r7, #12]
  96 0034 1A60     		str	r2, [r3]
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  97              		.loc 1 203 15
  98 0036 FB68     		ldr	r3, [r7, #12]
  99 0038 143B     		subs	r3, r3, #20
 100 003a FB60     		str	r3, [r7, #12]
 204:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 101              		.loc 1 204 18
 102 003c 7A68     		ldr	r2, [r7, #4]
 103              		.loc 1 204 16
 104 003e FB68     		ldr	r3, [r7, #12]
 105 0040 1A60     		str	r2, [r3]
 205:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 206:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 207:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 208:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 106              		.loc 1 208 14
 107 0042 FB68     		ldr	r3, [r7, #12]
 108 0044 043B     		subs	r3, r3, #4
 109 0046 FB60     		str	r3, [r7, #12]
 209:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 110              		.loc 1 209 16
 111 0048 FB68     		ldr	r3, [r7, #12]
 112 004a 6FF00202 		mvn	r2, #2
 113 004e 1A60     		str	r2, [r3]
 210:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 114              		.loc 1 211 15
 115 0050 FB68     		ldr	r3, [r7, #12]
 116 0052 203B     		subs	r3, r3, #32
 117 0054 FB60     		str	r3, [r7, #12]
 212:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 213:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 118              		.loc 1 213 9
 119 0056 FB68     		ldr	r3, [r7, #12]
 214:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 120              		.loc 1 214 1
 121 0058 1846     		mov	r0, r3
 122 005a 1437     		adds	r7, r7, #20
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 4
 125 005c BD46     		mov	sp, r7
 126              	.LCFI4:
 127              		.cfi_def_cfa_register 13
 128              		@ sp needed
 129 005e 5DF8047B 		ldr	r7, [sp], #4
 130              	.LCFI5:
 131              		.cfi_restore 7
 132              		.cfi_def_cfa_offset 0
 133 0062 7047     		bx	lr
 134              	.L4:
 135              		.align	2
 136              	.L3:
 137 0064 00000000 		.word	prvTaskExitError
ARM GAS  /tmp/ccin8GIg.s 			page 7


 138              		.cfi_endproc
 139              	.LFE4:
 141              		.section	.text.prvTaskExitError,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv5-d16
 148              	prvTaskExitError:
 149              	.LFB5:
 215:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 216:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 217:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 218:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 150              		.loc 1 218 1
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 16
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 80B4     		push	{r7}
 156              	.LCFI6:
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 0002 85B0     		sub	sp, sp, #20
 160              	.LCFI7:
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI8:
 164              		.cfi_def_cfa_register 7
 219:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** volatile uint32_t ulDummy = 0;
 165              		.loc 1 219 19
 166 0006 0023     		movs	r3, #0
 167 0008 7B60     		str	r3, [r7, #4]
 220:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 222:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 224:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 226:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 227:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 168              		.loc 1 227 2
 169 000a 124B     		ldr	r3, .L9
 170 000c 1B68     		ldr	r3, [r3]
 171 000e B3F1FF3F 		cmp	r3, #-1
 172 0012 0AD0     		beq	.L6
 173              	.LBB31:
 174              	.LBB32:
 175              		.file 2 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
ARM GAS  /tmp/ccin8GIg.s 			page 8


   9:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccin8GIg.s 			page 9


  66:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
ARM GAS  /tmp/ccin8GIg.s 			page 10


 123:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
ARM GAS  /tmp/ccin8GIg.s 			page 11


 180:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 176              		.loc 2 195 2
 177              		.syntax unified
 178              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 179 0014 4FF05003 			mov r3, #80												
 180 0018 83F31188 		msr basepri, r3											
 181 001c BFF36F8F 		isb														
 182 0020 BFF34F8F 		dsb														
 183              	
 184              	@ 0 "" 2
 185              		.thumb
 186              		.syntax unified
 187 0024 FB60     		str	r3, [r7, #12]
 196:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188              		.loc 2 203 1
 189 0026 00BF     		nop
 190              	.L7:
 191              	.LBE32:
 192              	.LBE31:
 193              		.loc 1 227 2 discriminator 1
 194 0028 FEE7     		b	.L7
 195              	.L6:
 196              	.LBB33:
 197              	.LBB34:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 198              		.loc 2 195 2
 199              		.syntax unified
 200              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 201 002a 4FF05003 			mov r3, #80												
 202 002e 83F31188 		msr basepri, r3											
 203 0032 BFF36F8F 		isb														
 204 0036 BFF34F8F 		dsb														
 205              	
 206              	@ 0 "" 2
 207              		.thumb
ARM GAS  /tmp/ccin8GIg.s 			page 12


 208              		.syntax unified
 209 003a BB60     		str	r3, [r7, #8]
 210              		.loc 2 203 1
 211 003c 00BF     		nop
 212              	.LBE34:
 213              	.LBE33:
 228:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	while( ulDummy == 0 )
 214              		.loc 1 229 7
 215 003e 00BF     		nop
 216              	.L8:
 217              		.loc 1 229 17 discriminator 1
 218 0040 7B68     		ldr	r3, [r7, #4]
 219              		.loc 1 229 7 discriminator 1
 220 0042 002B     		cmp	r3, #0
 221 0044 FCD0     		beq	.L8
 230:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 231:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 232:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		started to remove a compiler warning about the function being defined
 233:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 234:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		about code appearing after this function is called - making ulDummy
 235:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile makes the compiler think the function could return and
 236:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 237:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		after it. */
 238:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 239:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 222              		.loc 1 239 1
 223 0046 00BF     		nop
 224 0048 00BF     		nop
 225 004a 1437     		adds	r7, r7, #20
 226              	.LCFI9:
 227              		.cfi_def_cfa_offset 4
 228 004c BD46     		mov	sp, r7
 229              	.LCFI10:
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 004e 5DF8047B 		ldr	r7, [sp], #4
 233              	.LCFI11:
 234              		.cfi_restore 7
 235              		.cfi_def_cfa_offset 0
 236 0052 7047     		bx	lr
 237              	.L10:
 238              		.align	2
 239              	.L9:
 240 0054 00000000 		.word	uxCriticalNesting
 241              		.cfi_endproc
 242              	.LFE5:
 244              		.section	.text.SVC_Handler,"ax",%progbits
 245              		.align	1
 246              		.global	SVC_Handler
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv5-d16
 252              	SVC_Handler:
 253              	.LFB6:
 240:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccin8GIg.s 			page 13


 241:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 242:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 243:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 254              		.loc 1 243 1
 255              		.cfi_startproc
 256              		@ Naked Function: prologue and epilogue provided by programmer.
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 244:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 259              		.loc 1 244 2
 260              		.syntax unified
 261              	@ 244 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 262 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 263 0002 1968     		ldr r1, [r3]					
 264 0004 0868     		ldr r0, [r1]					
 265 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 266 000a 80F30988 		msr psp, r0						
 267 000e BFF36F8F 		isb								
 268 0012 4FF00000 		mov r0, #0 						
 269 0016 80F31188 		msr	basepri, r0					
 270 001a 7047     		bx r14							
 271              										
 272 001c AFF30080 		.align 4						
 273 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 274              	
 275              	@ 0 "" 2
 245:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 246:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 247:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 248:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 249:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 250:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 251:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 252:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 253:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 254:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 255:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 4						\n"
 256:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 257:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 258:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 276              		.loc 1 258 1
 277              		.thumb
 278              		.syntax unified
 279 0024 00BF     		nop
 280              		.cfi_endproc
 281              	.LFE6:
 283 0026 00BF     		.section	.text.prvPortStartFirstTask,"ax",%progbits
 284              		.align	1
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv5-d16
 290              	prvPortStartFirstTask:
 291              	.LFB7:
 259:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 260:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 261:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
ARM GAS  /tmp/ccin8GIg.s 			page 14


 262:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 292              		.loc 1 262 1
 293              		.cfi_startproc
 294              		@ Naked Function: prologue and epilogue provided by programmer.
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 263:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task.  This also clears the bit that indicates the FPU is
 264:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	in use in case the FPU was used before the scheduler was started - which
 265:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	would otherwise result in the unnecessary leaving of space in the SVC stack
 266:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	for lazy saving of FPU registers. */
 267:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 297              		.loc 1 267 2
 298              		.syntax unified
 299              	@ 267 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 300 0000 0848     		 ldr r0, =0xE000ED08 	
 301 0002 0068     	 ldr r0, [r0] 			
 302 0004 0068     	 ldr r0, [r0] 			
 303 0006 80F30888 	 msr msp, r0			
 304 000a 4FF00000 	 mov r0, #0			
 305 000e 80F31488 	 msr control, r0		
 306 0012 62B6     	 cpsie i				
 307 0014 61B6     	 cpsie f				
 308 0016 BFF34F8F 	 dsb					
 309 001a BFF36F8F 	 isb					
 310 001e 00DF     	 svc 0					
 311 0020 00BF     	 nop					
 312              	
 313              	@ 0 "" 2
 268:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 269:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 270:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 271:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 272:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" mov r0, #0			\n" /* Clear the bit that indicates the FPU is in use, see comment above. */
 273:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr control, r0		\n"
 274:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 275:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 276:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 277:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 278:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 279:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 280:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 281:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 314              		.loc 1 281 1
 315              		.thumb
 316              		.syntax unified
 317 0022 00BF     		nop
 318              		.cfi_endproc
 319              	.LFE7:
 321              		.section	.text.xPortStartScheduler,"ax",%progbits
 322              		.align	1
 323              		.global	xPortStartScheduler
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu fpv5-d16
 329              	xPortStartScheduler:
 330              	.LFB8:
ARM GAS  /tmp/ccin8GIg.s 			page 15


 282:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 283:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 284:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 285:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 286:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 287:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 288:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 331              		.loc 1 288 1
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 24
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335 0000 80B5     		push	{r7, lr}
 336              	.LCFI12:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 7, -8
 339              		.cfi_offset 14, -4
 340 0002 86B0     		sub	sp, sp, #24
 341              	.LCFI13:
 342              		.cfi_def_cfa_offset 32
 343 0004 00AF     		add	r7, sp, #0
 344              	.LCFI14:
 345              		.cfi_def_cfa_register 7
 289:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 290:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 291:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 292:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 293:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 294:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 295:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 296:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 346              		.loc 1 296 2
 347 0006 464B     		ldr	r3, .L23
 348 0008 1B68     		ldr	r3, [r3]
 349 000a 464A     		ldr	r2, .L23+4
 350 000c 9342     		cmp	r3, r2
 351 000e 0AD1     		bne	.L14
 352              	.LBB35:
 353              	.LBB36:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 354              		.loc 2 195 2
 355              		.syntax unified
 356              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 357 0010 4FF05003 			mov r3, #80												
 358 0014 83F31188 		msr basepri, r3											
 359 0018 BFF36F8F 		isb														
 360 001c BFF34F8F 		dsb														
 361              	
 362              	@ 0 "" 2
 363              		.thumb
 364              		.syntax unified
 365 0020 3B61     		str	r3, [r7, #16]
 366              		.loc 2 203 1
 367 0022 00BF     		nop
 368              	.L15:
 369              	.LBE36:
 370              	.LBE35:
 371              		.loc 1 296 2 discriminator 2
ARM GAS  /tmp/ccin8GIg.s 			page 16


 372 0024 FEE7     		b	.L15
 373              	.L14:
 297:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 374              		.loc 1 297 2
 375 0026 3E4B     		ldr	r3, .L23
 376 0028 1B68     		ldr	r3, [r3]
 377 002a 3F4A     		ldr	r2, .L23+8
 378 002c 9342     		cmp	r3, r2
 379 002e 0AD1     		bne	.L16
 380              	.LBB37:
 381              	.LBB38:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 382              		.loc 2 195 2
 383              		.syntax unified
 384              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 385 0030 4FF05003 			mov r3, #80												
 386 0034 83F31188 		msr basepri, r3											
 387 0038 BFF36F8F 		isb														
 388 003c BFF34F8F 		dsb														
 389              	
 390              	@ 0 "" 2
 391              		.thumb
 392              		.syntax unified
 393 0040 FB60     		str	r3, [r7, #12]
 394              		.loc 2 203 1
 395 0042 00BF     		nop
 396              	.L17:
 397              	.LBE38:
 398              	.LBE37:
 399              		.loc 1 297 2 discriminator 3
 400 0044 FEE7     		b	.L17
 401              	.L16:
 402              	.LBB39:
 298:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 299:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 300:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 301:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 302:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 403              		.loc 1 302 28
 404 0046 394B     		ldr	r3, .L23+12
 405 0048 7B61     		str	r3, [r7, #20]
 303:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 304:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 305:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 306:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 307:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 308:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 309:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 310:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 311:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 406              		.loc 1 311 24
 407 004a 7B69     		ldr	r3, [r7, #20]
 408 004c 1B78     		ldrb	r3, [r3]
 409 004e DBB2     		uxtb	r3, r3
 410              		.loc 1 311 22
 411 0050 7B60     		str	r3, [r7, #4]
 312:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccin8GIg.s 			page 17


 313:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 314:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 315:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 412              		.loc 1 315 33
 413 0052 7B69     		ldr	r3, [r7, #20]
 414 0054 FF22     		movs	r2, #255
 415 0056 1A70     		strb	r2, [r3]
 316:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 317:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 318:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 416              		.loc 1 318 24
 417 0058 7B69     		ldr	r3, [r7, #20]
 418 005a 1B78     		ldrb	r3, [r3]
 419 005c DBB2     		uxtb	r3, r3
 420              		.loc 1 318 22
 421 005e FB70     		strb	r3, [r7, #3]
 319:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 320:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 321:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 422              		.loc 1 321 63
 423 0060 FB78     		ldrb	r3, [r7, #3]
 424 0062 DBB2     		uxtb	r3, r3
 425 0064 03F05003 		and	r3, r3, #80
 426 0068 DAB2     		uxtb	r2, r3
 427              		.loc 1 321 24
 428 006a 314B     		ldr	r3, .L23+16
 429 006c 1A70     		strb	r2, [r3]
 322:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 323:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 324:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 325:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 430              		.loc 1 325 22
 431 006e 314B     		ldr	r3, .L23+20
 432 0070 0722     		movs	r2, #7
 433 0072 1A60     		str	r2, [r3]
 326:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 434              		.loc 1 326 8
 435 0074 09E0     		b	.L18
 436              	.L19:
 327:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 328:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 437              		.loc 1 328 22
 438 0076 2F4B     		ldr	r3, .L23+20
 439 0078 1B68     		ldr	r3, [r3]
 440 007a 013B     		subs	r3, r3, #1
 441 007c 2D4A     		ldr	r2, .L23+20
 442 007e 1360     		str	r3, [r2]
 329:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 443              		.loc 1 329 23
 444 0080 FB78     		ldrb	r3, [r7, #3]
 445 0082 DBB2     		uxtb	r3, r3
 446 0084 5B00     		lsls	r3, r3, #1
 447 0086 DBB2     		uxtb	r3, r3
 448 0088 FB70     		strb	r3, [r7, #3]
 449              	.L18:
 326:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 450              		.loc 1 326 31
ARM GAS  /tmp/ccin8GIg.s 			page 18


 451 008a FB78     		ldrb	r3, [r7, #3]
 452 008c DBB2     		uxtb	r3, r3
 453 008e 03F08003 		and	r3, r3, #128
 326:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 454              		.loc 1 326 8
 455 0092 802B     		cmp	r3, #128
 456 0094 EFD0     		beq	.L19
 330:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 331:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 332:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#ifdef __NVIC_PRIO_BITS
 333:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 334:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Check the CMSIS configuration that defines the number of
 335:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 336:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from the hardware. */
 337:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 338:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 339:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 340:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 341:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#ifdef configPRIO_BITS
 342:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 343:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 344:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 345:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from the hardware. */
 346:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 457              		.loc 1 346 4
 458 0096 274B     		ldr	r3, .L23+20
 459 0098 1B68     		ldr	r3, [r3]
 460 009a C3F10703 		rsb	r3, r3, #7
 461 009e 042B     		cmp	r3, #4
 462 00a0 0AD0     		beq	.L20
 463              	.LBB40:
 464              	.LBB41:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 465              		.loc 2 195 2
 466              		.syntax unified
 467              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 468 00a2 4FF05003 			mov r3, #80												
 469 00a6 83F31188 		msr basepri, r3											
 470 00aa BFF36F8F 		isb														
 471 00ae BFF34F8F 		dsb														
 472              	
 473              	@ 0 "" 2
 474              		.thumb
 475              		.syntax unified
 476 00b2 BB60     		str	r3, [r7, #8]
 477              		.loc 2 203 1
 478 00b4 00BF     		nop
 479              	.L21:
 480              	.LBE41:
 481              	.LBE40:
 482              		.loc 1 346 4 discriminator 4
 483 00b6 FEE7     		b	.L21
 484              	.L20:
 347:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 348:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 349:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 350:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
ARM GAS  /tmp/ccin8GIg.s 			page 19


 351:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 352:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 485              		.loc 1 352 22
 486 00b8 1E4B     		ldr	r3, .L23+20
 487 00ba 1B68     		ldr	r3, [r3]
 488 00bc 1B02     		lsls	r3, r3, #8
 489 00be 1D4A     		ldr	r2, .L23+20
 490 00c0 1360     		str	r3, [r2]
 353:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 491              		.loc 1 353 22
 492 00c2 1C4B     		ldr	r3, .L23+20
 493 00c4 1B68     		ldr	r3, [r3]
 494 00c6 03F4E063 		and	r3, r3, #1792
 495 00ca 1A4A     		ldr	r2, .L23+20
 496 00cc 1360     		str	r3, [r2]
 354:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 355:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 356:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 357:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 497              		.loc 1 357 33
 498 00ce 7B68     		ldr	r3, [r7, #4]
 499 00d0 DAB2     		uxtb	r2, r3
 500 00d2 7B69     		ldr	r3, [r7, #20]
 501 00d4 1A70     		strb	r2, [r3]
 502              	.LBE39:
 358:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 359:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 360:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 361:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 362:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 503              		.loc 1 362 23
 504 00d6 184B     		ldr	r3, .L23+24
 505 00d8 1B68     		ldr	r3, [r3]
 506 00da 174A     		ldr	r2, .L23+24
 507 00dc 43F47003 		orr	r3, r3, #15728640
 508 00e0 1360     		str	r3, [r2]
 363:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 509              		.loc 1 363 23
 510 00e2 154B     		ldr	r3, .L23+24
 511 00e4 1B68     		ldr	r3, [r3]
 512 00e6 144A     		ldr	r2, .L23+24
 513 00e8 43F07043 		orr	r3, r3, #-268435456
 514 00ec 1360     		str	r3, [r2]
 364:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 365:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 366:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 367:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 515              		.loc 1 367 2
 516 00ee FFF7FEFF 		bl	vPortSetupTimerInterrupt
 368:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 369:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 370:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 517              		.loc 1 370 20
 518 00f2 124B     		ldr	r3, .L23+28
 519 00f4 0022     		movs	r2, #0
 520 00f6 1A60     		str	r2, [r3]
 371:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccin8GIg.s 			page 20


 372:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 373:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 521              		.loc 1 373 2
 522 00f8 FFF7FEFF 		bl	vPortEnableVFP
 374:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 375:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 376:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 523              		.loc 1 376 17
 524 00fc 104B     		ldr	r3, .L23+32
 525 00fe 1B68     		ldr	r3, [r3]
 526 0100 0F4A     		ldr	r2, .L23+32
 527 0102 43F04043 		orr	r3, r3, #-1073741824
 528 0106 1360     		str	r3, [r2]
 377:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 378:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 379:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 529              		.loc 1 379 2
 530 0108 FFF7FEFF 		bl	prvPortStartFirstTask
 380:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 381:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 382:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 383:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 384:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 385:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 386:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	symbol. */
 387:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vTaskSwitchContext();
 531              		.loc 1 387 2
 532 010c FFF7FEFF 		bl	vTaskSwitchContext
 388:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 533              		.loc 1 388 2
 534 0110 FFF7FEFF 		bl	prvTaskExitError
 389:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 390:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 391:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 535              		.loc 1 391 9
 536 0114 0023     		movs	r3, #0
 392:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 537              		.loc 1 392 1
 538 0116 1846     		mov	r0, r3
 539 0118 1837     		adds	r7, r7, #24
 540              	.LCFI15:
 541              		.cfi_def_cfa_offset 8
 542 011a BD46     		mov	sp, r7
 543              	.LCFI16:
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 011c 80BD     		pop	{r7, pc}
 547              	.L24:
 548 011e 00BF     		.align	2
 549              	.L23:
 550 0120 00ED00E0 		.word	-536810240
 551 0124 71C20F41 		.word	1091551857
 552 0128 70C20F41 		.word	1091551856
 553 012c 00E400E0 		.word	-536812544
 554 0130 00000000 		.word	ucMaxSysCallPriority
 555 0134 00000000 		.word	ulMaxPRIGROUPValue
 556 0138 20ED00E0 		.word	-536810208
ARM GAS  /tmp/ccin8GIg.s 			page 21


 557 013c 00000000 		.word	uxCriticalNesting
 558 0140 34EF00E0 		.word	-536809676
 559              		.cfi_endproc
 560              	.LFE8:
 562              		.section	.text.vPortEndScheduler,"ax",%progbits
 563              		.align	1
 564              		.global	vPortEndScheduler
 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 568              		.fpu fpv5-d16
 570              	vPortEndScheduler:
 571              	.LFB9:
 393:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 394:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 395:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 396:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 572              		.loc 1 396 1
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI17:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              	.LCFI18:
 583              		.cfi_def_cfa_offset 16
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI19:
 586              		.cfi_def_cfa_register 7
 397:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 399:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 587              		.loc 1 399 2
 588 0006 0B4B     		ldr	r3, .L29
 589 0008 1B68     		ldr	r3, [r3]
 590 000a B3F57A7F 		cmp	r3, #1000
 591 000e 0AD0     		beq	.L28
 592              	.LBB42:
 593              	.LBB43:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 594              		.loc 2 195 2
 595              		.syntax unified
 596              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 597 0010 4FF05003 			mov r3, #80												
 598 0014 83F31188 		msr basepri, r3											
 599 0018 BFF36F8F 		isb														
 600 001c BFF34F8F 		dsb														
 601              	
 602              	@ 0 "" 2
 603              		.thumb
 604              		.syntax unified
 605 0020 7B60     		str	r3, [r7, #4]
 606              		.loc 2 203 1
 607 0022 00BF     		nop
ARM GAS  /tmp/ccin8GIg.s 			page 22


 608              	.L27:
 609              	.LBE43:
 610              	.LBE42:
 611              		.loc 1 399 2 discriminator 1
 612 0024 FEE7     		b	.L27
 613              	.L28:
 400:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 614              		.loc 1 400 1
 615 0026 00BF     		nop
 616 0028 0C37     		adds	r7, r7, #12
 617              	.LCFI20:
 618              		.cfi_def_cfa_offset 4
 619 002a BD46     		mov	sp, r7
 620              	.LCFI21:
 621              		.cfi_def_cfa_register 13
 622              		@ sp needed
 623 002c 5DF8047B 		ldr	r7, [sp], #4
 624              	.LCFI22:
 625              		.cfi_restore 7
 626              		.cfi_def_cfa_offset 0
 627 0030 7047     		bx	lr
 628              	.L30:
 629 0032 00BF     		.align	2
 630              	.L29:
 631 0034 00000000 		.word	uxCriticalNesting
 632              		.cfi_endproc
 633              	.LFE9:
 635              		.section	.text.vPortEnterCritical,"ax",%progbits
 636              		.align	1
 637              		.global	vPortEnterCritical
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu fpv5-d16
 643              	vPortEnterCritical:
 644              	.LFB10:
 401:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 402:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 403:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 404:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 645              		.loc 1 404 1
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 8
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650 0000 80B4     		push	{r7}
 651              	.LCFI23:
 652              		.cfi_def_cfa_offset 4
 653              		.cfi_offset 7, -4
 654 0002 83B0     		sub	sp, sp, #12
 655              	.LCFI24:
 656              		.cfi_def_cfa_offset 16
 657 0004 00AF     		add	r7, sp, #0
 658              	.LCFI25:
 659              		.cfi_def_cfa_register 7
 660              	.LBB44:
 661              	.LBB45:
ARM GAS  /tmp/ccin8GIg.s 			page 23


 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 662              		.loc 2 195 2
 663              		.syntax unified
 664              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 665 0006 4FF05003 			mov r3, #80												
 666 000a 83F31188 		msr basepri, r3											
 667 000e BFF36F8F 		isb														
 668 0012 BFF34F8F 		dsb														
 669              	
 670              	@ 0 "" 2
 671              		.thumb
 672              		.syntax unified
 673 0016 7B60     		str	r3, [r7, #4]
 674              		.loc 2 203 1
 675 0018 00BF     		nop
 676              	.LBE45:
 677              	.LBE44:
 405:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 406:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 678              		.loc 1 406 19
 679 001a 0F4B     		ldr	r3, .L35
 680 001c 1B68     		ldr	r3, [r3]
 681 001e 0133     		adds	r3, r3, #1
 682 0020 0D4A     		ldr	r2, .L35
 683 0022 1360     		str	r3, [r2]
 407:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 408:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 411:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 413:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 684              		.loc 1 413 24
 685 0024 0C4B     		ldr	r3, .L35
 686 0026 1B68     		ldr	r3, [r3]
 687              		.loc 1 413 4
 688 0028 012B     		cmp	r3, #1
 689 002a 0FD1     		bne	.L34
 414:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 415:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 690              		.loc 1 415 3
 691 002c 0B4B     		ldr	r3, .L35+4
 692 002e 1B68     		ldr	r3, [r3]
 693 0030 DBB2     		uxtb	r3, r3
 694 0032 002B     		cmp	r3, #0
 695 0034 0AD0     		beq	.L34
 696              	.LBB46:
 697              	.LBB47:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 698              		.loc 2 195 2
 699              		.syntax unified
 700              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 701 0036 4FF05003 			mov r3, #80												
 702 003a 83F31188 		msr basepri, r3											
 703 003e BFF36F8F 		isb														
 704 0042 BFF34F8F 		dsb														
 705              	
ARM GAS  /tmp/ccin8GIg.s 			page 24


 706              	@ 0 "" 2
 707              		.thumb
 708              		.syntax unified
 709 0046 3B60     		str	r3, [r7]
 710              		.loc 2 203 1
 711 0048 00BF     		nop
 712              	.L33:
 713              	.LBE47:
 714              	.LBE46:
 715              		.loc 1 415 3 discriminator 1
 716 004a FEE7     		b	.L33
 717              	.L34:
 416:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 417:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 718              		.loc 1 417 1
 719 004c 00BF     		nop
 720 004e 0C37     		adds	r7, r7, #12
 721              	.LCFI26:
 722              		.cfi_def_cfa_offset 4
 723 0050 BD46     		mov	sp, r7
 724              	.LCFI27:
 725              		.cfi_def_cfa_register 13
 726              		@ sp needed
 727 0052 5DF8047B 		ldr	r7, [sp], #4
 728              	.LCFI28:
 729              		.cfi_restore 7
 730              		.cfi_def_cfa_offset 0
 731 0056 7047     		bx	lr
 732              	.L36:
 733              		.align	2
 734              	.L35:
 735 0058 00000000 		.word	uxCriticalNesting
 736 005c 04ED00E0 		.word	-536810236
 737              		.cfi_endproc
 738              	.LFE10:
 740              		.section	.text.vPortExitCritical,"ax",%progbits
 741              		.align	1
 742              		.global	vPortExitCritical
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu fpv5-d16
 748              	vPortExitCritical:
 749              	.LFB11:
 418:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 419:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 420:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 421:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 750              		.loc 1 421 1
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 8
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755 0000 80B4     		push	{r7}
 756              	.LCFI29:
 757              		.cfi_def_cfa_offset 4
 758              		.cfi_offset 7, -4
ARM GAS  /tmp/ccin8GIg.s 			page 25


 759 0002 83B0     		sub	sp, sp, #12
 760              	.LCFI30:
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              	.LCFI31:
 764              		.cfi_def_cfa_register 7
 422:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 765              		.loc 1 422 2
 766 0006 124B     		ldr	r3, .L42
 767 0008 1B68     		ldr	r3, [r3]
 768 000a 002B     		cmp	r3, #0
 769 000c 0AD1     		bne	.L38
 770              	.LBB48:
 771              	.LBB49:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 772              		.loc 2 195 2
 773              		.syntax unified
 774              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 775 000e 4FF05003 			mov r3, #80												
 776 0012 83F31188 		msr basepri, r3											
 777 0016 BFF36F8F 		isb														
 778 001a BFF34F8F 		dsb														
 779              	
 780              	@ 0 "" 2
 781              		.thumb
 782              		.syntax unified
 783 001e 7B60     		str	r3, [r7, #4]
 784              		.loc 2 203 1
 785 0020 00BF     		nop
 786              	.L39:
 787              	.LBE49:
 788              	.LBE48:
 789              		.loc 1 422 2 discriminator 1
 790 0022 FEE7     		b	.L39
 791              	.L38:
 423:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 792              		.loc 1 423 19
 793 0024 0A4B     		ldr	r3, .L42
 794 0026 1B68     		ldr	r3, [r3]
 795 0028 013B     		subs	r3, r3, #1
 796 002a 094A     		ldr	r2, .L42
 797 002c 1360     		str	r3, [r2]
 424:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 798              		.loc 1 424 24
 799 002e 084B     		ldr	r3, .L42
 800 0030 1B68     		ldr	r3, [r3]
 801              		.loc 1 424 4
 802 0032 002B     		cmp	r3, #0
 803 0034 05D1     		bne	.L41
 804 0036 0023     		movs	r3, #0
 805 0038 3B60     		str	r3, [r7]
 806              	.LBB50:
 807              	.LBB51:
 204:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
ARM GAS  /tmp/ccin8GIg.s 			page 26


 208:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 212:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 808              		.loc 2 229 2
 809 003a 3B68     		ldr	r3, [r7]
 810              		.syntax unified
 811              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 812 003c 83F31188 			msr basepri, r3	
 813              	@ 0 "" 2
 230:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 814              		.loc 2 233 1
 815              		.thumb
 816              		.syntax unified
 817 0040 00BF     		nop
 818              	.L41:
 819              	.LBE51:
 820              	.LBE50:
 425:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 426:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 427:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 428:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 821              		.loc 1 428 1
 822 0042 00BF     		nop
 823 0044 0C37     		adds	r7, r7, #12
 824              	.LCFI32:
 825              		.cfi_def_cfa_offset 4
 826 0046 BD46     		mov	sp, r7
 827              	.LCFI33:
 828              		.cfi_def_cfa_register 13
 829              		@ sp needed
 830 0048 5DF8047B 		ldr	r7, [sp], #4
 831              	.LCFI34:
 832              		.cfi_restore 7
 833              		.cfi_def_cfa_offset 0
 834 004c 7047     		bx	lr
ARM GAS  /tmp/ccin8GIg.s 			page 27


 835              	.L43:
 836 004e 00BF     		.align	2
 837              	.L42:
 838 0050 00000000 		.word	uxCriticalNesting
 839              		.cfi_endproc
 840              	.LFE11:
 842              		.section	.text.PendSV_Handler,"ax",%progbits
 843              		.align	1
 844              		.global	PendSV_Handler
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu fpv5-d16
 850              	PendSV_Handler:
 851              	.LFB12:
 429:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 430:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 431:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 432:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 852              		.loc 1 432 1
 853              		.cfi_startproc
 854              		@ Naked Function: prologue and epilogue provided by programmer.
 855              		@ args = 0, pretend = 0, frame = 0
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 433:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 434:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 435:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 857              		.loc 1 435 2
 858              		.syntax unified
 859              	@ 435 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 860 0000 EFF30980 			mrs r0, psp							
 861 0004 BFF36F8F 		isb									
 862              											
 863 0008 154B     		ldr	r3, pxCurrentTCBConst			
 864 000a 1A68     		ldr	r2, [r3]						
 865              											
 866 000c 1EF0100F 		tst r14, #0x10						
 867 0010 08BF     		it eq								
 868 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 869              											
 870 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 871 001a 1060     		str r0, [r2]						
 872              											
 873 001c 2DE90900 		stmdb sp!, {r0, r3}					
 874 0020 4FF05000 		mov r0, #80 							
 875 0024 80F31188 		msr basepri, r0						
 876 0028 BFF34F8F 		dsb									
 877 002c BFF36F8F 		isb									
 878 0030 FFF7FEFF 		bl vTaskSwitchContext				
 879 0034 4FF00000 		mov r0, #0							
 880 0038 80F31188 		msr basepri, r0						
 881 003c 09BC     		ldmia sp!, {r0, r3}					
 882              											
 883 003e 1968     		ldr r1, [r3]						
 884 0040 0868     		ldr r0, [r1]						
 885              											
 886 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
ARM GAS  /tmp/ccin8GIg.s 			page 28


 887              											
 888 0046 1EF0100F 		tst r14, #0x10						
 889 004a 08BF     		it eq								
 890 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 891              											
 892 0050 80F30988 		msr psp, r0							
 893 0054 BFF36F8F 		isb									
 894              											
 895              											
 896 0058 7047     		bx r14								
 897              											
 898 005a 00BFAFF3 		.align 4							
 898      0080
 899 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 900              	
 901              	@ 0 "" 2
 436:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 437:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 438:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 439:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 440:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 442:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 443:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 445:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 449:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 450:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r0, r3}					\n"
 451:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 452:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 453:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 454:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 455:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 456:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 457:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 458:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r0, r3}					\n"
 459:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 460:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 461:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 462:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 463:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 464:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 465:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 466:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 467:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 468:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 469:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 470:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 471:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 472:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 473:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 474:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 475:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 476:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
ARM GAS  /tmp/ccin8GIg.s 			page 29


 477:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 478:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 479:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 480:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 481:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 4							\n"
 482:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 483:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 484:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 485:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 902              		.loc 1 485 1
 903              		.thumb
 904              		.syntax unified
 905 0064 00BF     		nop
 906              		.cfi_endproc
 907              	.LFE12:
 909 0066 00BF     		.section	.text.xPortSysTickHandler,"ax",%progbits
 910              		.align	1
 911              		.global	xPortSysTickHandler
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 915              		.fpu fpv5-d16
 917              	xPortSysTickHandler:
 918              	.LFB13:
 486:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 487:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 488:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 489:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 919              		.loc 1 489 1
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 8
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              	.LCFI35:
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 82B0     		sub	sp, sp, #8
 929              	.LCFI36:
 930              		.cfi_def_cfa_offset 16
 931 0004 00AF     		add	r7, sp, #0
 932              	.LCFI37:
 933              		.cfi_def_cfa_register 7
 934              	.LBB52:
 935              	.LBB53:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 936              		.loc 2 195 2
 937              		.syntax unified
 938              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 939 0006 4FF05003 			mov r3, #80												
 940 000a 83F31188 		msr basepri, r3											
 941 000e BFF36F8F 		isb														
 942 0012 BFF34F8F 		dsb														
 943              	
 944              	@ 0 "" 2
 945              		.thumb
 946              		.syntax unified
ARM GAS  /tmp/ccin8GIg.s 			page 30


 947 0016 7B60     		str	r3, [r7, #4]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 948              		.loc 2 203 1
 949 0018 00BF     		nop
 950              	.LBE53:
 951              	.LBE52:
 490:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 491:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 492:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 493:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 494:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 495:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 496:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 497:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 952              		.loc 1 497 7
 953 001a FFF7FEFF 		bl	xTaskIncrementTick
 954 001e 0346     		mov	r3, r0
 955              		.loc 1 497 5
 956 0020 002B     		cmp	r3, #0
 957 0022 03D0     		beq	.L46
 498:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 499:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 500:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 501:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 958              		.loc 1 501 4
 959 0024 064B     		ldr	r3, .L47
 960              		.loc 1 501 26
 961 0026 4FF08052 		mov	r2, #268435456
 962 002a 1A60     		str	r2, [r3]
 963              	.L46:
 964 002c 0023     		movs	r3, #0
 965 002e 3B60     		str	r3, [r7]
 966              	.LBB54:
 967              	.LBB55:
 229:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 968              		.loc 2 229 2
 969 0030 3B68     		ldr	r3, [r7]
 970              		.syntax unified
 971              	@ 229 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 972 0032 83F31188 			msr basepri, r3	
 973              	@ 0 "" 2
 974              		.loc 2 233 1
 975              		.thumb
 976              		.syntax unified
 977 0036 00BF     		nop
 978              	.LBE55:
 979              	.LBE54:
 502:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 503:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 504:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portENABLE_INTERRUPTS();
 505:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 980              		.loc 1 505 1
 981 0038 00BF     		nop
 982 003a 0837     		adds	r7, r7, #8
 983              	.LCFI38:
 984              		.cfi_def_cfa_offset 8
 985 003c BD46     		mov	sp, r7
ARM GAS  /tmp/ccin8GIg.s 			page 31


 986              	.LCFI39:
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 003e 80BD     		pop	{r7, pc}
 990              	.L48:
 991              		.align	2
 992              	.L47:
 993 0040 04ED00E0 		.word	-536810236
 994              		.cfi_endproc
 995              	.LFE13:
 997              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 998              		.align	1
 999              		.weak	vPortSetupTimerInterrupt
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1003              		.fpu fpv5-d16
 1005              	vPortSetupTimerInterrupt:
 1006              	.LFB14:
 506:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 507:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 508:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 509:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 510:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 511:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 512:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 513:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 514:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 515:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 516:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 517:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 518:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 519:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 520:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 521:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 522:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 523:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 524:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 525:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 526:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 527:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 528:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 529:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 530:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 531:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 532:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 533:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 534:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 535:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 536:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 537:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 538:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 539:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "dsb" );
 540:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "isb" );
 541:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 542:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 543:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
ARM GAS  /tmp/ccin8GIg.s 			page 32


 544:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 545:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 546:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 547:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 548:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 549:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 550:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 551:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 552:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 553:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 554:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 555:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 556:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 557:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 558:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 559:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 560:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 561:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 562:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 563:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 564:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 565:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 566:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 567:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 568:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 569:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 570:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 571:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 572:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 573:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 574:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 575:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 576:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 577:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 578:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 579:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 580:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 581:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 582:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 583:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 584:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 585:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 586:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 587:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 588:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 589:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			out of sleep mode to execute immediately.  see comments above
 590:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__disable_interrupt() call above. */
 591:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 592:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
 593:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 594:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 595:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 596:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			and interrupts that execute while the clock is stopped will increase
 597:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 598:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time. */
 599:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 600:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
ARM GAS  /tmp/ccin8GIg.s 			page 33


 601:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 602:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 603:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Disable the SysTick clock without reading the
 604:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 605:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 606:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 607:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 608:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 609:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time*/
 610:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 611:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 612:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 613:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			been set back to the current reload value (the reload back being
 614:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 615:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 616:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			must have brought the system out of sleep mode). */
 617:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 618:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 619:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 620:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 621:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 622:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				reloaded with ulReloadValue.  Reset the
 623:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 624:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 625:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 626:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 627:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 628:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 629:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 630:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 631:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				{
 632:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 633:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				}
 634:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 635:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 636:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 637:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* As the pending tick will be processed as soon as this
 638:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				function exits, the tick value maintained by the tick is stepped
 639:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				forward by one less than the time spent waiting. */
 640:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 641:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 642:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			else
 643:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 644:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 645:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 646:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 647:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 648:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 649:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 650:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 651:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 652:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 653:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 654:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 655:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 656:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 657:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
ARM GAS  /tmp/ccin8GIg.s 			page 34


 658:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 659:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 660:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 661:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			value. */
 662:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 663:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 665:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 666:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 667:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Exit with interrupts enabled. */
 668:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 669:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 670:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 671:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 672:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 673:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 674:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 675:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 676:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 677:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 678:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 679:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 680:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 1007              		.loc 1 680 1
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 0000 80B4     		push	{r7}
 1013              	.LCFI40:
 1014              		.cfi_def_cfa_offset 4
 1015              		.cfi_offset 7, -4
 1016 0002 00AF     		add	r7, sp, #0
 1017              	.LCFI41:
 1018              		.cfi_def_cfa_register 7
 681:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 682:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 683:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 684:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 685:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 686:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 687:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 688:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 689:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 690:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Stop and clear the SysTick. */
 691:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 1019              		.loc 1 691 2
 1020 0004 0B4B     		ldr	r3, .L50
 1021              		.loc 1 691 28
 1022 0006 0022     		movs	r2, #0
 1023 0008 1A60     		str	r2, [r3]
 692:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 1024              		.loc 1 692 2
 1025 000a 0B4B     		ldr	r3, .L50+4
 1026              		.loc 1 692 37
 1027 000c 0022     		movs	r2, #0
 1028 000e 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccin8GIg.s 			page 35


 693:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 694:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 695:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 1029              		.loc 1 695 55
 1030 0010 0A4B     		ldr	r3, .L50+8
 1031 0012 1B68     		ldr	r3, [r3]
 1032 0014 0A4A     		ldr	r2, .L50+12
 1033 0016 A2FB0323 		umull	r2, r3, r2, r3
 1034 001a 9B09     		lsrs	r3, r3, #6
 1035              		.loc 1 695 2
 1036 001c 094A     		ldr	r2, .L50+16
 1037              		.loc 1 695 78
 1038 001e 013B     		subs	r3, r3, #1
 1039              		.loc 1 695 28
 1040 0020 1360     		str	r3, [r2]
 696:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 1041              		.loc 1 696 2
 1042 0022 044B     		ldr	r3, .L50
 1043              		.loc 1 696 28
 1044 0024 0722     		movs	r2, #7
 1045 0026 1A60     		str	r2, [r3]
 697:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 1046              		.loc 1 697 1
 1047 0028 00BF     		nop
 1048 002a BD46     		mov	sp, r7
 1049              	.LCFI42:
 1050              		.cfi_def_cfa_register 13
 1051              		@ sp needed
 1052 002c 5DF8047B 		ldr	r7, [sp], #4
 1053              	.LCFI43:
 1054              		.cfi_restore 7
 1055              		.cfi_def_cfa_offset 0
 1056 0030 7047     		bx	lr
 1057              	.L51:
 1058 0032 00BF     		.align	2
 1059              	.L50:
 1060 0034 10E000E0 		.word	-536813552
 1061 0038 18E000E0 		.word	-536813544
 1062 003c 00000000 		.word	SystemCoreClock
 1063 0040 D34D6210 		.word	274877907
 1064 0044 14E000E0 		.word	-536813548
 1065              		.cfi_endproc
 1066              	.LFE14:
 1068              		.section	.text.vPortEnableVFP,"ax",%progbits
 1069              		.align	1
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu fpv5-d16
 1075              	vPortEnableVFP:
 1076              	.LFB15:
 698:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 699:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 700:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 701:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 702:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 1077              		.loc 1 702 1
ARM GAS  /tmp/ccin8GIg.s 			page 36


 1078              		.cfi_startproc
 1079              		@ Naked Function: prologue and epilogue provided by programmer.
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 703:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 1082              		.loc 1 703 2
 1083              		.syntax unified
 1084              	@ 703 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 1085 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 1086 0004 0168     		ldr r1, [r0]				
 1087              									
 1088 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 1089 000a 0160     		str r1, [r0]				
 1090 000c 7047     		bx r14						
 1091              	@ 0 "" 2
 704:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 705:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 706:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 707:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 708:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 709:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 710:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 711:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 712:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 1092              		.loc 1 712 1
 1093              		.thumb
 1094              		.syntax unified
 1095 000e 00BF     		nop
 1096              		.cfi_endproc
 1097              	.LFE15:
 1099              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 1100              		.align	1
 1101              		.global	vPortValidateInterruptPriority
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv5-d16
 1107              	vPortValidateInterruptPriority:
 1108              	.LFB16:
 713:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 714:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 715:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 716:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 717:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 718:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 1109              		.loc 1 718 2
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 16
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113              		@ link register save eliminated.
 1114 0000 80B4     		push	{r7}
 1115              	.LCFI44:
 1116              		.cfi_def_cfa_offset 4
 1117              		.cfi_offset 7, -4
 1118 0002 85B0     		sub	sp, sp, #20
 1119              	.LCFI45:
 1120              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccin8GIg.s 			page 37


 1121 0004 00AF     		add	r7, sp, #0
 1122              	.LCFI46:
 1123              		.cfi_def_cfa_register 7
 719:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 720:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 721:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 722:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 723:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 1124              		.loc 1 723 3
 1125              		.syntax unified
 1126              	@ 723 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 1127 0006 EFF30583 		mrs r3, ipsr
 1128              	@ 0 "" 2
 1129              		.thumb
 1130              		.syntax unified
 1131 000a FB60     		str	r3, [r7, #12]
 724:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 725:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 726:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 1132              		.loc 1 726 5
 1133 000c FB68     		ldr	r3, [r7, #12]
 1134 000e 0F2B     		cmp	r3, #15
 1135 0010 14D9     		bls	.L54
 727:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 728:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 729:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 1136              		.loc 1 729 52
 1137 0012 174A     		ldr	r2, .L59
 1138 0014 FB68     		ldr	r3, [r7, #12]
 1139 0016 1344     		add	r3, r3, r2
 1140              		.loc 1 729 22
 1141 0018 1B78     		ldrb	r3, [r3]
 1142 001a FB72     		strb	r3, [r7, #11]
 730:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 731:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 732:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 733:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 734:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 735:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 736:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 737:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 738:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 739:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 740:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 741:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 742:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 743:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 744:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 745:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 746:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 747:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 748:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 749:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 750:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 751:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 752:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 753:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
ARM GAS  /tmp/ccin8GIg.s 			page 38


 754:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 1143              		.loc 1 754 4
 1144 001c 154B     		ldr	r3, .L59+4
 1145 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1146 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1147 0022 9A42     		cmp	r2, r3
 1148 0024 0AD2     		bcs	.L54
 1149              	.LBB56:
 1150              	.LBB57:
 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1151              		.loc 2 195 2
 1152              		.syntax unified
 1153              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1154 0026 4FF05003 			mov r3, #80												
 1155 002a 83F31188 		msr basepri, r3											
 1156 002e BFF36F8F 		isb														
 1157 0032 BFF34F8F 		dsb														
 1158              	
 1159              	@ 0 "" 2
 1160              		.thumb
 1161              		.syntax unified
 1162 0036 7B60     		str	r3, [r7, #4]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1163              		.loc 2 203 1
 1164 0038 00BF     		nop
 1165              	.L55:
 1166              	.LBE57:
 1167              	.LBE56:
 1168              		.loc 1 754 4 discriminator 1
 1169 003a FEE7     		b	.L55
 1170              	.L54:
 755:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 756:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 757:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 758:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 759:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 760:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 761:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 762:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 763:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 764:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 765:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 766:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 767:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 768:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 769:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredictable behaviour. */
 770:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1171              		.loc 1 770 3
 1172 003c 0E4B     		ldr	r3, .L59+8
 1173 003e 1B68     		ldr	r3, [r3]
 1174 0040 03F4E062 		and	r2, r3, #1792
 1175 0044 0D4B     		ldr	r3, .L59+12
 1176 0046 1B68     		ldr	r3, [r3]
 1177 0048 9A42     		cmp	r2, r3
 1178 004a 0AD9     		bls	.L58
 1179              	.LBB58:
 1180              	.LBB59:
ARM GAS  /tmp/ccin8GIg.s 			page 39


 195:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1181              		.loc 2 195 2
 1182              		.syntax unified
 1183              	@ 195 "./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1184 004c 4FF05003 			mov r3, #80												
 1185 0050 83F31188 		msr basepri, r3											
 1186 0054 BFF36F8F 		isb														
 1187 0058 BFF34F8F 		dsb														
 1188              	
 1189              	@ 0 "" 2
 1190              		.thumb
 1191              		.syntax unified
 1192 005c 3B60     		str	r3, [r7]
 203:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1193              		.loc 2 203 1
 1194 005e 00BF     		nop
 1195              	.L57:
 1196              	.LBE59:
 1197              	.LBE58:
 1198              		.loc 1 770 3 discriminator 2
 1199 0060 FEE7     		b	.L57
 1200              	.L58:
 771:./Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 1201              		.loc 1 771 2
 1202 0062 00BF     		nop
 1203 0064 1437     		adds	r7, r7, #20
 1204              	.LCFI47:
 1205              		.cfi_def_cfa_offset 4
 1206 0066 BD46     		mov	sp, r7
 1207              	.LCFI48:
 1208              		.cfi_def_cfa_register 13
 1209              		@ sp needed
 1210 0068 5DF8047B 		ldr	r7, [sp], #4
 1211              	.LCFI49:
 1212              		.cfi_restore 7
 1213              		.cfi_def_cfa_offset 0
 1214 006c 7047     		bx	lr
 1215              	.L60:
 1216 006e 00BF     		.align	2
 1217              	.L59:
 1218 0070 F0E300E0 		.word	-536812560
 1219 0074 00000000 		.word	ucMaxSysCallPriority
 1220 0078 0CED00E0 		.word	-536810228
 1221 007c 00000000 		.word	ulMaxPRIGROUPValue
 1222              		.cfi_endproc
 1223              	.LFE16:
 1225              		.text
 1226              	.Letext0:
 1227              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1228              		.file 4 "./Libraries/FreeRTOS/Source/include/projdefs.h"
 1229              		.file 5 "./User/code/Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccin8GIg.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccin8GIg.s:17     .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccin8GIg.s:20     .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccin8GIg.s:25     .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccin8GIg.s:26     .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccin8GIg.s:28     .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccin8GIg.s:31     .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccin8GIg.s:34     .rodata.pcInterruptPriorityRegisters:0000000000000000 $d
     /tmp/ccin8GIg.s:37     .rodata.pcInterruptPriorityRegisters:0000000000000000 pcInterruptPriorityRegisters
     /tmp/ccin8GIg.s:40     .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccin8GIg.s:48     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccin8GIg.s:137    .text.pxPortInitialiseStack:0000000000000064 $d
     /tmp/ccin8GIg.s:148    .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccin8GIg.s:142    .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccin8GIg.s:240    .text.prvTaskExitError:0000000000000054 $d
     /tmp/ccin8GIg.s:245    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccin8GIg.s:252    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccin8GIg.s:273    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccin8GIg.s:273    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccin8GIg.s:279    .text.SVC_Handler:0000000000000024 $t
     /tmp/ccin8GIg.s:284    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccin8GIg.s:290    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccin8GIg.s:322    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccin8GIg.s:329    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccin8GIg.s:1005   .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccin8GIg.s:1075   .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccin8GIg.s:550    .text.xPortStartScheduler:0000000000000120 $d
     /tmp/ccin8GIg.s:563    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccin8GIg.s:570    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccin8GIg.s:631    .text.vPortEndScheduler:0000000000000034 $d
     /tmp/ccin8GIg.s:636    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccin8GIg.s:643    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccin8GIg.s:735    .text.vPortEnterCritical:0000000000000058 $d
     /tmp/ccin8GIg.s:741    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccin8GIg.s:748    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccin8GIg.s:838    .text.vPortExitCritical:0000000000000050 $d
     /tmp/ccin8GIg.s:843    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccin8GIg.s:850    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccin8GIg.s:899    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccin8GIg.s:899    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccin8GIg.s:905    .text.PendSV_Handler:0000000000000064 $t
     /tmp/ccin8GIg.s:910    .text.xPortSysTickHandler:0000000000000000 $t
     /tmp/ccin8GIg.s:917    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
     /tmp/ccin8GIg.s:993    .text.xPortSysTickHandler:0000000000000040 $d
     /tmp/ccin8GIg.s:998    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccin8GIg.s:1060   .text.vPortSetupTimerInterrupt:0000000000000034 $d
     /tmp/ccin8GIg.s:1069   .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccin8GIg.s:1100   .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccin8GIg.s:1107   .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccin8GIg.s:1218   .text.vPortValidateInterruptPriority:0000000000000070 $d
     /tmp/ccin8GIg.s:2961   .text.vPortEnableVFP:0000000000000010 $d
     /tmp/ccin8GIg.s:2961   .text.prvPortStartFirstTask:0000000000000024 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
ARM GAS  /tmp/ccin8GIg.s 			page 41


xTaskIncrementTick
SystemCoreClock
