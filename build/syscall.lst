ARM GAS  /tmp/ccJtYAMV.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"syscall.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ff_cre_syncobj,"ax",%progbits
  17              		.align	1
  18              		.global	ff_cre_syncobj
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	ff_cre_syncobj:
  26              	.LFB335:
  27              		.file 1 "./Libraries/FatFs/option/syscall.c"
   1:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
   2:./Libraries/FatFs/option/syscall.c **** /* Sample code of OS dependent controls for FatFs                         */
   3:./Libraries/FatFs/option/syscall.c **** /* (C)ChaN, 2014                                                          */
   4:./Libraries/FatFs/option/syscall.c **** /*   Portions COPYRIGHT 2017 STMicroelectronics                           */
   5:./Libraries/FatFs/option/syscall.c **** /*   Portions Copyright (C) 2014, ChaN, all right reserved                */
   6:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
   7:./Libraries/FatFs/option/syscall.c **** 
   8:./Libraries/FatFs/option/syscall.c **** /**
   9:./Libraries/FatFs/option/syscall.c ****   ******************************************************************************
  10:./Libraries/FatFs/option/syscall.c ****   * @attention
  11:./Libraries/FatFs/option/syscall.c ****   *
  12:./Libraries/FatFs/option/syscall.c ****   * Copyright (c) 2017 STMicroelectronics. All rights reserved.
  13:./Libraries/FatFs/option/syscall.c ****   *
  14:./Libraries/FatFs/option/syscall.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  15:./Libraries/FatFs/option/syscall.c ****   * the "License"; You may not use this file except in compliance with the
  16:./Libraries/FatFs/option/syscall.c ****   * License. You may obtain a copy of the License at:
  17:./Libraries/FatFs/option/syscall.c ****   *                       opensource.org/licenses/BSD-3-Clause
  18:./Libraries/FatFs/option/syscall.c ****   *
  19:./Libraries/FatFs/option/syscall.c ****   ******************************************************************************
  20:./Libraries/FatFs/option/syscall.c **** **/
  21:./Libraries/FatFs/option/syscall.c **** 
  22:./Libraries/FatFs/option/syscall.c **** 
  23:./Libraries/FatFs/option/syscall.c **** 
  24:./Libraries/FatFs/option/syscall.c **** #include "../Inc/ff.h"
  25:./Libraries/FatFs/option/syscall.c **** 
  26:./Libraries/FatFs/option/syscall.c **** 
  27:./Libraries/FatFs/option/syscall.c **** #if _FS_REENTRANT
  28:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  29:./Libraries/FatFs/option/syscall.c **** /* Create a Synchronization Object                                        */
  30:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  31:./Libraries/FatFs/option/syscall.c **** /* This function is called in f_mount() function to create a new
ARM GAS  /tmp/ccJtYAMV.s 			page 2


  32:./Libraries/FatFs/option/syscall.c **** /  synchronization object, such as semaphore and mutex. When a 0 is returned,
  33:./Libraries/FatFs/option/syscall.c **** /  the f_mount() function fails with FR_INT_ERR.
  34:./Libraries/FatFs/option/syscall.c **** */
  35:./Libraries/FatFs/option/syscall.c **** 
  36:./Libraries/FatFs/option/syscall.c **** int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
  37:./Libraries/FatFs/option/syscall.c **** 	BYTE vol,			/* Corresponding volume (logical drive number) */
  38:./Libraries/FatFs/option/syscall.c **** 	_SYNC_t *sobj		/* Pointer to return the created sync object */
  39:./Libraries/FatFs/option/syscall.c **** )
  40:./Libraries/FatFs/option/syscall.c **** {
  28              		.loc 1 40 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 0346     		mov	r3, r0
  44 0008 3960     		str	r1, [r7]
  45 000a FB71     		strb	r3, [r7, #7]
  41:./Libraries/FatFs/option/syscall.c **** 
  42:./Libraries/FatFs/option/syscall.c ****     int ret;
  43:./Libraries/FatFs/option/syscall.c **** #if _USE_MUTEX
  44:./Libraries/FatFs/option/syscall.c **** 
  45:./Libraries/FatFs/option/syscall.c **** #if (osCMSIS < 0x20000U)
  46:./Libraries/FatFs/option/syscall.c ****     osMutexDef(MTX);
  47:./Libraries/FatFs/option/syscall.c ****     *sobj = osMutexCreate(osMutex(MTX));
  48:./Libraries/FatFs/option/syscall.c **** #else
  49:./Libraries/FatFs/option/syscall.c ****     *sobj = osMutexNew(NULL);
  50:./Libraries/FatFs/option/syscall.c **** #endif
  51:./Libraries/FatFs/option/syscall.c **** 
  52:./Libraries/FatFs/option/syscall.c **** #else
  53:./Libraries/FatFs/option/syscall.c **** 
  54:./Libraries/FatFs/option/syscall.c **** #if (osCMSIS < 0x20000U)
  55:./Libraries/FatFs/option/syscall.c ****     osSemaphoreDef(SEM);
  56:./Libraries/FatFs/option/syscall.c ****     *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
  57:./Libraries/FatFs/option/syscall.c **** #else
  58:./Libraries/FatFs/option/syscall.c ****     *sobj = osSemaphoreNew(1, 1, NULL);
  46              		.loc 1 58 13
  47 000c 0022     		movs	r2, #0
  48 000e 0121     		movs	r1, #1
  49 0010 0120     		movs	r0, #1
  50 0012 FFF7FEFF 		bl	osSemaphoreNew
  51 0016 0246     		mov	r2, r0
  52              		.loc 1 58 11
  53 0018 3B68     		ldr	r3, [r7]
  54 001a 1A60     		str	r2, [r3]
  59:./Libraries/FatFs/option/syscall.c **** #endif
  60:./Libraries/FatFs/option/syscall.c **** 
  61:./Libraries/FatFs/option/syscall.c **** #endif
ARM GAS  /tmp/ccJtYAMV.s 			page 3


  62:./Libraries/FatFs/option/syscall.c ****     ret = (*sobj != NULL);
  55              		.loc 1 62 12
  56 001c 3B68     		ldr	r3, [r7]
  57 001e 1B68     		ldr	r3, [r3]
  58              		.loc 1 62 18
  59 0020 002B     		cmp	r3, #0
  60 0022 14BF     		ite	ne
  61 0024 0123     		movne	r3, #1
  62 0026 0023     		moveq	r3, #0
  63 0028 DBB2     		uxtb	r3, r3
  64              		.loc 1 62 9
  65 002a FB60     		str	r3, [r7, #12]
  63:./Libraries/FatFs/option/syscall.c **** 
  64:./Libraries/FatFs/option/syscall.c ****     return ret;
  66              		.loc 1 64 12
  67 002c FB68     		ldr	r3, [r7, #12]
  65:./Libraries/FatFs/option/syscall.c **** }
  68              		.loc 1 65 1
  69 002e 1846     		mov	r0, r3
  70 0030 1037     		adds	r7, r7, #16
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 8
  73 0032 BD46     		mov	sp, r7
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 13
  76              		@ sp needed
  77 0034 80BD     		pop	{r7, pc}
  78              		.cfi_endproc
  79              	.LFE335:
  81              		.section	.text.ff_del_syncobj,"ax",%progbits
  82              		.align	1
  83              		.global	ff_del_syncobj
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv5-d16
  89              	ff_del_syncobj:
  90              	.LFB336:
  66:./Libraries/FatFs/option/syscall.c **** 
  67:./Libraries/FatFs/option/syscall.c **** 
  68:./Libraries/FatFs/option/syscall.c **** 
  69:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  70:./Libraries/FatFs/option/syscall.c **** /* Delete a Synchronization Object                                        */
  71:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  72:./Libraries/FatFs/option/syscall.c **** /* This function is called in f_mount() function to delete a synchronization
  73:./Libraries/FatFs/option/syscall.c **** /  object that created with ff_cre_syncobj() function. When a 0 is returned,
  74:./Libraries/FatFs/option/syscall.c **** /  the f_mount() function fails with FR_INT_ERR.
  75:./Libraries/FatFs/option/syscall.c **** */
  76:./Libraries/FatFs/option/syscall.c **** 
  77:./Libraries/FatFs/option/syscall.c **** int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
  78:./Libraries/FatFs/option/syscall.c **** 	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
  79:./Libraries/FatFs/option/syscall.c **** )
  80:./Libraries/FatFs/option/syscall.c **** {
  91              		.loc 1 80 1
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 8
  94              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccJtYAMV.s 			page 4


  95 0000 80B5     		push	{r7, lr}
  96              	.LCFI5:
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0002 82B0     		sub	sp, sp, #8
 101              	.LCFI6:
 102              		.cfi_def_cfa_offset 16
 103 0004 00AF     		add	r7, sp, #0
 104              	.LCFI7:
 105              		.cfi_def_cfa_register 7
 106 0006 7860     		str	r0, [r7, #4]
  81:./Libraries/FatFs/option/syscall.c **** #if _USE_MUTEX
  82:./Libraries/FatFs/option/syscall.c ****     osMutexDelete (sobj);
  83:./Libraries/FatFs/option/syscall.c **** #else
  84:./Libraries/FatFs/option/syscall.c ****     osSemaphoreDelete (sobj);
 107              		.loc 1 84 5
 108 0008 7868     		ldr	r0, [r7, #4]
 109 000a FFF7FEFF 		bl	osSemaphoreDelete
  85:./Libraries/FatFs/option/syscall.c **** #endif
  86:./Libraries/FatFs/option/syscall.c ****     return 1;
 110              		.loc 1 86 12
 111 000e 0123     		movs	r3, #1
  87:./Libraries/FatFs/option/syscall.c **** }
 112              		.loc 1 87 1
 113 0010 1846     		mov	r0, r3
 114 0012 0837     		adds	r7, r7, #8
 115              	.LCFI8:
 116              		.cfi_def_cfa_offset 8
 117 0014 BD46     		mov	sp, r7
 118              	.LCFI9:
 119              		.cfi_def_cfa_register 13
 120              		@ sp needed
 121 0016 80BD     		pop	{r7, pc}
 122              		.cfi_endproc
 123              	.LFE336:
 125              		.section	.text.ff_req_grant,"ax",%progbits
 126              		.align	1
 127              		.global	ff_req_grant
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv5-d16
 133              	ff_req_grant:
 134              	.LFB337:
  88:./Libraries/FatFs/option/syscall.c **** 
  89:./Libraries/FatFs/option/syscall.c **** 
  90:./Libraries/FatFs/option/syscall.c **** 
  91:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  92:./Libraries/FatFs/option/syscall.c **** /* Request Grant to Access the Volume                                     */
  93:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
  94:./Libraries/FatFs/option/syscall.c **** /* This function is called on entering file functions to lock the volume.
  95:./Libraries/FatFs/option/syscall.c **** /  When a 0 is returned, the file function fails with FR_TIMEOUT.
  96:./Libraries/FatFs/option/syscall.c **** */
  97:./Libraries/FatFs/option/syscall.c **** 
  98:./Libraries/FatFs/option/syscall.c **** int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
  99:./Libraries/FatFs/option/syscall.c **** 	_SYNC_t sobj	/* Sync object to wait */
ARM GAS  /tmp/ccJtYAMV.s 			page 5


 100:./Libraries/FatFs/option/syscall.c **** )
 101:./Libraries/FatFs/option/syscall.c **** {
 135              		.loc 1 101 1
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 16
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0000 80B5     		push	{r7, lr}
 140              	.LCFI10:
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 84B0     		sub	sp, sp, #16
 145              	.LCFI11:
 146              		.cfi_def_cfa_offset 24
 147 0004 00AF     		add	r7, sp, #0
 148              	.LCFI12:
 149              		.cfi_def_cfa_register 7
 150 0006 7860     		str	r0, [r7, #4]
 102:./Libraries/FatFs/option/syscall.c ****   int ret = 0;
 151              		.loc 1 102 7
 152 0008 0023     		movs	r3, #0
 153 000a FB60     		str	r3, [r7, #12]
 103:./Libraries/FatFs/option/syscall.c **** #if (osCMSIS < 0x20000U)
 104:./Libraries/FatFs/option/syscall.c **** 
 105:./Libraries/FatFs/option/syscall.c **** #if _USE_MUTEX
 106:./Libraries/FatFs/option/syscall.c ****   if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 107:./Libraries/FatFs/option/syscall.c **** #else
 108:./Libraries/FatFs/option/syscall.c ****   if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 109:./Libraries/FatFs/option/syscall.c **** #endif
 110:./Libraries/FatFs/option/syscall.c **** 
 111:./Libraries/FatFs/option/syscall.c **** #else
 112:./Libraries/FatFs/option/syscall.c **** 
 113:./Libraries/FatFs/option/syscall.c **** #if _USE_MUTEX
 114:./Libraries/FatFs/option/syscall.c ****    if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 115:./Libraries/FatFs/option/syscall.c **** #else
 116:./Libraries/FatFs/option/syscall.c ****    if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 154              		.loc 1 116 7
 155 000c 4FF47A71 		mov	r1, #1000
 156 0010 7868     		ldr	r0, [r7, #4]
 157 0012 FFF7FEFF 		bl	osSemaphoreAcquire
 158 0016 0346     		mov	r3, r0
 159              		.loc 1 116 6
 160 0018 002B     		cmp	r3, #0
 161 001a 01D1     		bne	.L6
 117:./Libraries/FatFs/option/syscall.c **** #endif
 118:./Libraries/FatFs/option/syscall.c **** 
 119:./Libraries/FatFs/option/syscall.c **** #endif
 120:./Libraries/FatFs/option/syscall.c ****   {
 121:./Libraries/FatFs/option/syscall.c ****     ret = 1;
 162              		.loc 1 121 9
 163 001c 0123     		movs	r3, #1
 164 001e FB60     		str	r3, [r7, #12]
 165              	.L6:
 122:./Libraries/FatFs/option/syscall.c ****   }
 123:./Libraries/FatFs/option/syscall.c **** 
 124:./Libraries/FatFs/option/syscall.c ****   return ret;
 166              		.loc 1 124 10
ARM GAS  /tmp/ccJtYAMV.s 			page 6


 167 0020 FB68     		ldr	r3, [r7, #12]
 125:./Libraries/FatFs/option/syscall.c **** }
 168              		.loc 1 125 1
 169 0022 1846     		mov	r0, r3
 170 0024 1037     		adds	r7, r7, #16
 171              	.LCFI13:
 172              		.cfi_def_cfa_offset 8
 173 0026 BD46     		mov	sp, r7
 174              	.LCFI14:
 175              		.cfi_def_cfa_register 13
 176              		@ sp needed
 177 0028 80BD     		pop	{r7, pc}
 178              		.cfi_endproc
 179              	.LFE337:
 181              		.section	.text.ff_rel_grant,"ax",%progbits
 182              		.align	1
 183              		.global	ff_rel_grant
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv5-d16
 189              	ff_rel_grant:
 190              	.LFB338:
 126:./Libraries/FatFs/option/syscall.c **** 
 127:./Libraries/FatFs/option/syscall.c **** 
 128:./Libraries/FatFs/option/syscall.c **** 
 129:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
 130:./Libraries/FatFs/option/syscall.c **** /* Release Grant to Access the Volume                                     */
 131:./Libraries/FatFs/option/syscall.c **** /*------------------------------------------------------------------------*/
 132:./Libraries/FatFs/option/syscall.c **** /* This function is called on leaving file functions to unlock the volume.
 133:./Libraries/FatFs/option/syscall.c **** */
 134:./Libraries/FatFs/option/syscall.c **** 
 135:./Libraries/FatFs/option/syscall.c **** void ff_rel_grant (
 136:./Libraries/FatFs/option/syscall.c **** 	_SYNC_t sobj	/* Sync object to be signaled */
 137:./Libraries/FatFs/option/syscall.c **** )
 138:./Libraries/FatFs/option/syscall.c **** {
 191              		.loc 1 138 1
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 8
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195 0000 80B5     		push	{r7, lr}
 196              	.LCFI15:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 82B0     		sub	sp, sp, #8
 201              	.LCFI16:
 202              		.cfi_def_cfa_offset 16
 203 0004 00AF     		add	r7, sp, #0
 204              	.LCFI17:
 205              		.cfi_def_cfa_register 7
 206 0006 7860     		str	r0, [r7, #4]
 139:./Libraries/FatFs/option/syscall.c **** #if _USE_MUTEX
 140:./Libraries/FatFs/option/syscall.c ****   osMutexRelease(sobj);
 141:./Libraries/FatFs/option/syscall.c **** #else
 142:./Libraries/FatFs/option/syscall.c ****   osSemaphoreRelease(sobj);
 207              		.loc 1 142 3
ARM GAS  /tmp/ccJtYAMV.s 			page 7


 208 0008 7868     		ldr	r0, [r7, #4]
 209 000a FFF7FEFF 		bl	osSemaphoreRelease
 143:./Libraries/FatFs/option/syscall.c **** #endif
 144:./Libraries/FatFs/option/syscall.c **** }
 210              		.loc 1 144 1
 211 000e 00BF     		nop
 212 0010 0837     		adds	r7, r7, #8
 213              	.LCFI18:
 214              		.cfi_def_cfa_offset 8
 215 0012 BD46     		mov	sp, r7
 216              	.LCFI19:
 217              		.cfi_def_cfa_register 13
 218              		@ sp needed
 219 0014 80BD     		pop	{r7, pc}
 220              		.cfi_endproc
 221              	.LFE338:
 223              		.text
 224              	.Letext0:
 225              		.file 2 "./Libraries/FatFs/option/../Inc/integer.h"
 226              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 227              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 228              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 229              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 230              		.file 7 "/usr/include/newlib/sys/_types.h"
 231              		.file 8 "/usr/include/newlib/sys/reent.h"
 232              		.file 9 "/usr/include/newlib/sys/lock.h"
 233              		.file 10 "/usr/include/newlib/math.h"
 234              		.file 11 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 235              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 236              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 237              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 238              		.file 15 "./Libraries/FreeRTOS/Source/CMSIS_RTOS/cmsis_os2.h"
ARM GAS  /tmp/ccJtYAMV.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall.c
     /tmp/ccJtYAMV.s:17     .text.ff_cre_syncobj:0000000000000000 $t
     /tmp/ccJtYAMV.s:25     .text.ff_cre_syncobj:0000000000000000 ff_cre_syncobj
     /tmp/ccJtYAMV.s:82     .text.ff_del_syncobj:0000000000000000 $t
     /tmp/ccJtYAMV.s:89     .text.ff_del_syncobj:0000000000000000 ff_del_syncobj
     /tmp/ccJtYAMV.s:126    .text.ff_req_grant:0000000000000000 $t
     /tmp/ccJtYAMV.s:133    .text.ff_req_grant:0000000000000000 ff_req_grant
     /tmp/ccJtYAMV.s:182    .text.ff_rel_grant:0000000000000000 $t
     /tmp/ccJtYAMV.s:189    .text.ff_rel_grant:0000000000000000 ff_rel_grant

UNDEFINED SYMBOLS
osSemaphoreNew
osSemaphoreDelete
osSemaphoreAcquire
osSemaphoreRelease
