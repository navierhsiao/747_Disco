ARM GAS  /tmp/cceCRWeb.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ff.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.bss.FatFs,"aw",%nobits
  17              		.align	2
  20              	FatFs:
  21 0000 00000000 		.space	4
  22              		.section	.bss.Fsid,"aw",%nobits
  23              		.align	1
  26              	Fsid:
  27 0000 0000     		.space	2
  28              		.section	.bss.Files,"aw",%nobits
  29              		.align	2
  32              	Files:
  33 0000 00000000 		.space	32
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.section	.rodata.ExCvt,"a"
  35              		.align	2
  38              	ExCvt:
  39 0000 43554541 		.ascii	"CUEAAAACEEEIIIAAE\222\222OOOUUYOUO\234O\236\237AIOU"
  39      41414143 
  39      45454549 
  39      49494141 
  39      4592924F 
  40 0024 A5A5A6A7 		.ascii	"\245\245\246\247\250\251\252\253\254\255\256\257\260"
  40      A8A9AAAB 
  40      ACADAEAF 
  40      B0
  41 0031 B1B2B3B4 		.ascii	"\261\262\263\264AAA\270\271\272\273\274\275\276\277"
  41      414141B8 
  41      B9BABBBC 
  41      BDBEBF
  42 0040 C0C1C2C3 		.ascii	"\300\301\302\303\304\305AA\310\311\312\313\314\315\316"
  42      C4C54141 
  42      C8C9CACB 
  42      CCCDCE
  43 004f CFD1D145 		.ascii	"\317\321\321EEEIIII\331\332\333\334\335I\337O\341OO"
  43      45454949 
  43      4949D9DA 
  43      DBDCDD49 
  43      DF4FE14F 
  44 0064 4F4FE6E8 		.ascii	"OO\346\350\350UUUYY\356\357\360\361\362\363\364\365"
ARM GAS  /tmp/cceCRWeb.s 			page 2


  44      E8555555 
  44      5959EEEF 
  44      F0F1F2F3 
  44      F4F5
  45 0076 F6F7F8F9 		.ascii	"\366\367\370\371\372\373\374\375\376\377"
  45      FAFBFCFD 
  45      FEFF
  46              		.section	.text.ld_word,"ax",%progbits
  47              		.align	1
  48              		.arch armv7e-m
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv5-d16
  54              	ld_word:
  55              	.LFB335:
  56              		.file 1 "./Libraries/FatFs/Src/ff.c"
   1:./Libraries/FatFs/Src/ff.c **** /*----------------------------------------------------------------------------/
   2:./Libraries/FatFs/Src/ff.c **** /  FatFs - Generic FAT file system module  R0.12c                             /
   3:./Libraries/FatFs/Src/ff.c **** /-----------------------------------------------------------------------------/
   4:./Libraries/FatFs/Src/ff.c **** /
   5:./Libraries/FatFs/Src/ff.c **** / Copyright (C) 2017, ChaN, all right reserved.
   6:./Libraries/FatFs/Src/ff.c **** /
   7:./Libraries/FatFs/Src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:./Libraries/FatFs/Src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:./Libraries/FatFs/Src/ff.c **** / that the following condition is met:
  10:./Libraries/FatFs/Src/ff.c **** /
  11:./Libraries/FatFs/Src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:./Libraries/FatFs/Src/ff.c **** /    this condition and the following disclaimer.
  13:./Libraries/FatFs/Src/ff.c **** /
  14:./Libraries/FatFs/Src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:./Libraries/FatFs/Src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:./Libraries/FatFs/Src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:./Libraries/FatFs/Src/ff.c **** / by use of this software.
  18:./Libraries/FatFs/Src/ff.c **** /----------------------------------------------------------------------------*/
  19:./Libraries/FatFs/Src/ff.c **** 
  20:./Libraries/FatFs/Src/ff.c **** 
  21:./Libraries/FatFs/Src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  22:./Libraries/FatFs/Src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:./Libraries/FatFs/Src/ff.c **** 
  24:./Libraries/FatFs/Src/ff.c **** 
  25:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------------------------------------------
  26:./Libraries/FatFs/Src/ff.c **** 
  27:./Libraries/FatFs/Src/ff.c ****    Module Private Definitions
  28:./Libraries/FatFs/Src/ff.c **** 
  29:./Libraries/FatFs/Src/ff.c **** ---------------------------------------------------------------------------*/
  30:./Libraries/FatFs/Src/ff.c **** 
  31:./Libraries/FatFs/Src/ff.c **** #if _FATFS != 68300	/* Revision ID */
  32:./Libraries/FatFs/Src/ff.c **** #error Wrong include file (ff.h).
  33:./Libraries/FatFs/Src/ff.c **** #endif
  34:./Libraries/FatFs/Src/ff.c **** 
  35:./Libraries/FatFs/Src/ff.c **** 
  36:./Libraries/FatFs/Src/ff.c **** /* DBCS code ranges and SBCS upper conversion tables */
  37:./Libraries/FatFs/Src/ff.c **** 
  38:./Libraries/FatFs/Src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  39:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  40:./Libraries/FatFs/Src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
ARM GAS  /tmp/cceCRWeb.s 			page 3


  41:./Libraries/FatFs/Src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  42:./Libraries/FatFs/Src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  43:./Libraries/FatFs/Src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  44:./Libraries/FatFs/Src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  45:./Libraries/FatFs/Src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  46:./Libraries/FatFs/Src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  47:./Libraries/FatFs/Src/ff.c **** 
  48:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  49:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0x81
  50:./Libraries/FatFs/Src/ff.c **** #define _DF1E	0xFE
  51:./Libraries/FatFs/Src/ff.c **** #define _DS1S	0x40
  52:./Libraries/FatFs/Src/ff.c **** #define _DS1E	0x7E
  53:./Libraries/FatFs/Src/ff.c **** #define _DS2S	0x80
  54:./Libraries/FatFs/Src/ff.c **** #define _DS2E	0xFE
  55:./Libraries/FatFs/Src/ff.c **** 
  56:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
  57:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0x81
  58:./Libraries/FatFs/Src/ff.c **** #define _DF1E	0xFE
  59:./Libraries/FatFs/Src/ff.c **** #define _DS1S	0x41
  60:./Libraries/FatFs/Src/ff.c **** #define _DS1E	0x5A
  61:./Libraries/FatFs/Src/ff.c **** #define _DS2S	0x61
  62:./Libraries/FatFs/Src/ff.c **** #define _DS2E	0x7A
  63:./Libraries/FatFs/Src/ff.c **** #define _DS3S	0x81
  64:./Libraries/FatFs/Src/ff.c **** #define _DS3E	0xFE
  65:./Libraries/FatFs/Src/ff.c **** 
  66:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  67:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0x81
  68:./Libraries/FatFs/Src/ff.c **** #define _DF1E	0xFE
  69:./Libraries/FatFs/Src/ff.c **** #define _DS1S	0x40
  70:./Libraries/FatFs/Src/ff.c **** #define _DS1E	0x7E
  71:./Libraries/FatFs/Src/ff.c **** #define _DS2S	0xA1
  72:./Libraries/FatFs/Src/ff.c **** #define _DS2E	0xFE
  73:./Libraries/FatFs/Src/ff.c **** 
  74:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. */
  75:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
  76:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  77:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  78:./Libraries/FatFs/Src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  79:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  80:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  81:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  82:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  83:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  84:./Libraries/FatFs/Src/ff.c **** 
  85:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic */
  86:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
  87:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  88:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  89:./Libraries/FatFs/Src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  90:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  91:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  92:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  93:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  94:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  95:./Libraries/FatFs/Src/ff.c **** 
  96:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 737	/* Greek */
  97:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
ARM GAS  /tmp/cceCRWeb.s 			page 4


  98:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  99:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 100:./Libraries/FatFs/Src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 101:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 102:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 103:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 104:./Libraries/FatFs/Src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 105:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 106:./Libraries/FatFs/Src/ff.c **** 
 107:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 771	/* KBL */
 108:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 109:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 110:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 111:./Libraries/FatFs/Src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 112:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 113:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 114:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 115:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 116:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 117:./Libraries/FatFs/Src/ff.c **** 
 118:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic */
 119:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 120:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 121:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 122:./Libraries/FatFs/Src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 123:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 124:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 125:./Libraries/FatFs/Src/ff.c **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 126:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 127:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 128:./Libraries/FatFs/Src/ff.c **** 
 129:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 850	/* Latin 1 */
 130:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 131:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 132:./Libraries/FatFs/Src/ff.c **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 133:./Libraries/FatFs/Src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 134:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 135:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 136:./Libraries/FatFs/Src/ff.c **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 137:./Libraries/FatFs/Src/ff.c **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 138:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 139:./Libraries/FatFs/Src/ff.c **** 
 140:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 */
 141:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 142:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 143:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 144:./Libraries/FatFs/Src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 145:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 146:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 147:./Libraries/FatFs/Src/ff.c **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 148:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 149:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 150:./Libraries/FatFs/Src/ff.c **** 
 151:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic */
 152:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 153:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 154:./Libraries/FatFs/Src/ff.c **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
ARM GAS  /tmp/cceCRWeb.s 			page 5


 155:./Libraries/FatFs/Src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 156:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 157:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 158:./Libraries/FatFs/Src/ff.c **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 159:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 160:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 161:./Libraries/FatFs/Src/ff.c **** 
 162:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish */
 163:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 164:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 165:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 166:./Libraries/FatFs/Src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 167:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 168:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 169:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 170:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 171:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 172:./Libraries/FatFs/Src/ff.c **** 
 173:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 860	/* Portuguese */
 174:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 175:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 176:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 177:./Libraries/FatFs/Src/ff.c **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 178:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 179:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 180:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 181:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 182:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 183:./Libraries/FatFs/Src/ff.c **** 
 184:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 861	/* Icelandic */
 185:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 186:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 187:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 188:./Libraries/FatFs/Src/ff.c **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 189:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 190:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 191:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 192:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 193:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 194:./Libraries/FatFs/Src/ff.c **** 
 195:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew */
 196:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 197:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 198:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 199:./Libraries/FatFs/Src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 200:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 201:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 202:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 203:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 204:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 205:./Libraries/FatFs/Src/ff.c **** 
 206:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 863	/* Canadian-French */
 207:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 208:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 209:./Libraries/FatFs/Src/ff.c **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 210:./Libraries/FatFs/Src/ff.c **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 211:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
ARM GAS  /tmp/cceCRWeb.s 			page 6


 212:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 213:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 214:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 215:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 216:./Libraries/FatFs/Src/ff.c **** 
 217:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 864	/* Arabic */
 218:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 219:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 220:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 221:./Libraries/FatFs/Src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 222:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 223:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 224:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 225:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 226:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 227:./Libraries/FatFs/Src/ff.c **** 
 228:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 865	/* Nordic */
 229:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 230:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 231:./Libraries/FatFs/Src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 232:./Libraries/FatFs/Src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 233:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 234:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 235:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 236:./Libraries/FatFs/Src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 237:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 238:./Libraries/FatFs/Src/ff.c **** 
 239:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 866	/* Russian */
 240:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 241:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 242:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 243:./Libraries/FatFs/Src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 244:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 245:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 246:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 247:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 248:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 249:./Libraries/FatFs/Src/ff.c **** 
 250:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 869	/* Greek 2 */
 251:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 252:./Libraries/FatFs/Src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 253:./Libraries/FatFs/Src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 254:./Libraries/FatFs/Src/ff.c **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 255:./Libraries/FatFs/Src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 256:./Libraries/FatFs/Src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 257:./Libraries/FatFs/Src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 258:./Libraries/FatFs/Src/ff.c **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 259:./Libraries/FatFs/Src/ff.c **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 260:./Libraries/FatFs/Src/ff.c **** 
 261:./Libraries/FatFs/Src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 262:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
 263:./Libraries/FatFs/Src/ff.c **** #error Cannot enable LFN without valid code page.
 264:./Libraries/FatFs/Src/ff.c **** #endif
 265:./Libraries/FatFs/Src/ff.c **** #define _DF1S	0
 266:./Libraries/FatFs/Src/ff.c **** 
 267:./Libraries/FatFs/Src/ff.c **** #else
 268:./Libraries/FatFs/Src/ff.c **** #error Unknown code page
ARM GAS  /tmp/cceCRWeb.s 			page 7


 269:./Libraries/FatFs/Src/ff.c **** 
 270:./Libraries/FatFs/Src/ff.c **** #endif
 271:./Libraries/FatFs/Src/ff.c **** 
 272:./Libraries/FatFs/Src/ff.c **** 
 273:./Libraries/FatFs/Src/ff.c **** /* Character code support macros */
 274:./Libraries/FatFs/Src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 275:./Libraries/FatFs/Src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 276:./Libraries/FatFs/Src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 277:./Libraries/FatFs/Src/ff.c **** 
 278:./Libraries/FatFs/Src/ff.c **** #if _DF1S != 0	/* Code page is DBCS */
 279:./Libraries/FatFs/Src/ff.c **** 
 280:./Libraries/FatFs/Src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 281:./Libraries/FatFs/Src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 282:./Libraries/FatFs/Src/ff.c **** #else			/* One 1st byte area */
 283:./Libraries/FatFs/Src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 284:./Libraries/FatFs/Src/ff.c **** #endif
 285:./Libraries/FatFs/Src/ff.c **** 
 286:./Libraries/FatFs/Src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 287:./Libraries/FatFs/Src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 288:./Libraries/FatFs/Src/ff.c **** #else			/* Two 2nd byte areas */
 289:./Libraries/FatFs/Src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 290:./Libraries/FatFs/Src/ff.c **** #endif
 291:./Libraries/FatFs/Src/ff.c **** 
 292:./Libraries/FatFs/Src/ff.c **** #else			/* Code page is SBCS */
 293:./Libraries/FatFs/Src/ff.c **** 
 294:./Libraries/FatFs/Src/ff.c **** #define IsDBCS1(c)	0
 295:./Libraries/FatFs/Src/ff.c **** #define IsDBCS2(c)	0
 296:./Libraries/FatFs/Src/ff.c **** 
 297:./Libraries/FatFs/Src/ff.c **** #endif /* _DF1S */
 298:./Libraries/FatFs/Src/ff.c **** 
 299:./Libraries/FatFs/Src/ff.c **** 
 300:./Libraries/FatFs/Src/ff.c **** /* Additional file attribute bits for internal use */
 301:./Libraries/FatFs/Src/ff.c **** #define	AM_VOL		0x08	/* Volume label */
 302:./Libraries/FatFs/Src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
 303:./Libraries/FatFs/Src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
 304:./Libraries/FatFs/Src/ff.c **** 
 305:./Libraries/FatFs/Src/ff.c **** 
 306:./Libraries/FatFs/Src/ff.c **** /* Additional file access control and file status flags for internal use */
 307:./Libraries/FatFs/Src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 308:./Libraries/FatFs/Src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
 309:./Libraries/FatFs/Src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 310:./Libraries/FatFs/Src/ff.c **** 
 311:./Libraries/FatFs/Src/ff.c **** 
 312:./Libraries/FatFs/Src/ff.c **** /* Name status flags in fn[] */
 313:./Libraries/FatFs/Src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
 314:./Libraries/FatFs/Src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 315:./Libraries/FatFs/Src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 316:./Libraries/FatFs/Src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 317:./Libraries/FatFs/Src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 318:./Libraries/FatFs/Src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 319:./Libraries/FatFs/Src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 320:./Libraries/FatFs/Src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
 321:./Libraries/FatFs/Src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
 322:./Libraries/FatFs/Src/ff.c **** 
 323:./Libraries/FatFs/Src/ff.c **** 
 324:./Libraries/FatFs/Src/ff.c **** /* Limits and boundaries */
 325:./Libraries/FatFs/Src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
ARM GAS  /tmp/cceCRWeb.s 			page 8


 326:./Libraries/FatFs/Src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
 327:./Libraries/FatFs/Src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but correct for real DOS/Windo
 328:./Libraries/FatFs/Src/ff.c **** #define	MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but correct for real DOS/Wind
 329:./Libraries/FatFs/Src/ff.c **** #define	MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
 330:./Libraries/FatFs/Src/ff.c **** #define	MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
 331:./Libraries/FatFs/Src/ff.c **** 
 332:./Libraries/FatFs/Src/ff.c **** 
 333:./Libraries/FatFs/Src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
 334:./Libraries/FatFs/Src/ff.c **** / because the C structure is not binary compatible between different platforms */
 335:./Libraries/FatFs/Src/ff.c **** 
 336:./Libraries/FatFs/Src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 337:./Libraries/FatFs/Src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
 338:./Libraries/FatFs/Src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 339:./Libraries/FatFs/Src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 340:./Libraries/FatFs/Src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 341:./Libraries/FatFs/Src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 342:./Libraries/FatFs/Src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 343:./Libraries/FatFs/Src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 344:./Libraries/FatFs/Src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 345:./Libraries/FatFs/Src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 346:./Libraries/FatFs/Src/ff.c **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 347:./Libraries/FatFs/Src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 348:./Libraries/FatFs/Src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 349:./Libraries/FatFs/Src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 350:./Libraries/FatFs/Src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 351:./Libraries/FatFs/Src/ff.c **** #define BS_NTres			37		/* Error flag (BYTE) */
 352:./Libraries/FatFs/Src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 353:./Libraries/FatFs/Src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 354:./Libraries/FatFs/Src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 355:./Libraries/FatFs/Src/ff.c **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 356:./Libraries/FatFs/Src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 357:./Libraries/FatFs/Src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 358:./Libraries/FatFs/Src/ff.c **** 
 359:./Libraries/FatFs/Src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 360:./Libraries/FatFs/Src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 361:./Libraries/FatFs/Src/ff.c **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 362:./Libraries/FatFs/Src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 363:./Libraries/FatFs/Src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 364:./Libraries/FatFs/Src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 365:./Libraries/FatFs/Src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 366:./Libraries/FatFs/Src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 367:./Libraries/FatFs/Src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 368:./Libraries/FatFs/Src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 369:./Libraries/FatFs/Src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 370:./Libraries/FatFs/Src/ff.c **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 371:./Libraries/FatFs/Src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 372:./Libraries/FatFs/Src/ff.c **** 
 373:./Libraries/FatFs/Src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 374:./Libraries/FatFs/Src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 375:./Libraries/FatFs/Src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 376:./Libraries/FatFs/Src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 377:./Libraries/FatFs/Src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 378:./Libraries/FatFs/Src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 379:./Libraries/FatFs/Src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 380:./Libraries/FatFs/Src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 381:./Libraries/FatFs/Src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 382:./Libraries/FatFs/Src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
ARM GAS  /tmp/cceCRWeb.s 			page 9


 383:./Libraries/FatFs/Src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 384:./Libraries/FatFs/Src/ff.c **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 385:./Libraries/FatFs/Src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 386:./Libraries/FatFs/Src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 387:./Libraries/FatFs/Src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 388:./Libraries/FatFs/Src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 389:./Libraries/FatFs/Src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 390:./Libraries/FatFs/Src/ff.c **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 391:./Libraries/FatFs/Src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 392:./Libraries/FatFs/Src/ff.c **** 
 393:./Libraries/FatFs/Src/ff.c **** #define	DIR_Name			0		/* Short file name (11-byte) */
 394:./Libraries/FatFs/Src/ff.c **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 395:./Libraries/FatFs/Src/ff.c **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 396:./Libraries/FatFs/Src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 397:./Libraries/FatFs/Src/ff.c **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 398:./Libraries/FatFs/Src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 399:./Libraries/FatFs/Src/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 400:./Libraries/FatFs/Src/ff.c **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 401:./Libraries/FatFs/Src/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 402:./Libraries/FatFs/Src/ff.c **** #define	DIR_FileSize		28		/* File size (DWORD) */
 403:./Libraries/FatFs/Src/ff.c **** #define	LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 404:./Libraries/FatFs/Src/ff.c **** #define	LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 405:./Libraries/FatFs/Src/ff.c **** #define	LDIR_Type			12		/* LFN: Entry type (BYTE) */
 406:./Libraries/FatFs/Src/ff.c **** #define	LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 407:./Libraries/FatFs/Src/ff.c **** #define	LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 408:./Libraries/FatFs/Src/ff.c **** #define	XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 409:./Libraries/FatFs/Src/ff.c **** #define	XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 410:./Libraries/FatFs/Src/ff.c **** #define	XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 411:./Libraries/FatFs/Src/ff.c **** #define	XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 412:./Libraries/FatFs/Src/ff.c **** #define	XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 413:./Libraries/FatFs/Src/ff.c **** #define	XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 414:./Libraries/FatFs/Src/ff.c **** #define	XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 415:./Libraries/FatFs/Src/ff.c **** #define	XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 416:./Libraries/FatFs/Src/ff.c **** #define	XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 417:./Libraries/FatFs/Src/ff.c **** #define	XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 418:./Libraries/FatFs/Src/ff.c **** #define	XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 419:./Libraries/FatFs/Src/ff.c **** #define	XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 420:./Libraries/FatFs/Src/ff.c **** #define	XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 421:./Libraries/FatFs/Src/ff.c **** #define	XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 422:./Libraries/FatFs/Src/ff.c **** #define	XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 423:./Libraries/FatFs/Src/ff.c **** #define	XDIR_GenFlags		33		/* exFAT: General secondary flags (WORD) */
 424:./Libraries/FatFs/Src/ff.c **** #define	XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 425:./Libraries/FatFs/Src/ff.c **** #define	XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 426:./Libraries/FatFs/Src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 427:./Libraries/FatFs/Src/ff.c **** #define	XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 428:./Libraries/FatFs/Src/ff.c **** #define	XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 429:./Libraries/FatFs/Src/ff.c **** 
 430:./Libraries/FatFs/Src/ff.c **** #define	SZDIRE				32		/* Size of a directory entry */
 431:./Libraries/FatFs/Src/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 432:./Libraries/FatFs/Src/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 433:./Libraries/FatFs/Src/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 434:./Libraries/FatFs/Src/ff.c **** 
 435:./Libraries/FatFs/Src/ff.c **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 436:./Libraries/FatFs/Src/ff.c **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 437:./Libraries/FatFs/Src/ff.c **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 438:./Libraries/FatFs/Src/ff.c **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 439:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 10


 440:./Libraries/FatFs/Src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 441:./Libraries/FatFs/Src/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 442:./Libraries/FatFs/Src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 443:./Libraries/FatFs/Src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 444:./Libraries/FatFs/Src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 445:./Libraries/FatFs/Src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 446:./Libraries/FatFs/Src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 447:./Libraries/FatFs/Src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 448:./Libraries/FatFs/Src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 449:./Libraries/FatFs/Src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 450:./Libraries/FatFs/Src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 451:./Libraries/FatFs/Src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 452:./Libraries/FatFs/Src/ff.c **** 
 453:./Libraries/FatFs/Src/ff.c **** 
 454:./Libraries/FatFs/Src/ff.c **** /* Post process after fatal error on file operation */
 455:./Libraries/FatFs/Src/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 456:./Libraries/FatFs/Src/ff.c **** 
 457:./Libraries/FatFs/Src/ff.c **** 
 458:./Libraries/FatFs/Src/ff.c **** /* Reentrancy related */
 459:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT
 460:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN == 1
 461:./Libraries/FatFs/Src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 462:./Libraries/FatFs/Src/ff.c **** #endif
 463:./Libraries/FatFs/Src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 464:./Libraries/FatFs/Src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 465:./Libraries/FatFs/Src/ff.c **** #else
 466:./Libraries/FatFs/Src/ff.c **** #define	ENTER_FF(fs)
 467:./Libraries/FatFs/Src/ff.c **** #define LEAVE_FF(fs, res)	return res
 468:./Libraries/FatFs/Src/ff.c **** #endif
 469:./Libraries/FatFs/Src/ff.c **** 
 470:./Libraries/FatFs/Src/ff.c **** 
 471:./Libraries/FatFs/Src/ff.c **** /* Definitions of volume - partition conversion */
 472:./Libraries/FatFs/Src/ff.c **** #if _MULTI_PARTITION
 473:./Libraries/FatFs/Src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 474:./Libraries/FatFs/Src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 475:./Libraries/FatFs/Src/ff.c **** #else
 476:./Libraries/FatFs/Src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 477:./Libraries/FatFs/Src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 478:./Libraries/FatFs/Src/ff.c **** #endif
 479:./Libraries/FatFs/Src/ff.c **** 
 480:./Libraries/FatFs/Src/ff.c **** 
 481:./Libraries/FatFs/Src/ff.c **** /* Definitions of sector size */
 482:./Libraries/FatFs/Src/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 483:./Libraries/FatFs/Src/ff.c **** #error Wrong sector size configuration
 484:./Libraries/FatFs/Src/ff.c **** #endif
 485:./Libraries/FatFs/Src/ff.c **** #if _MAX_SS == _MIN_SS
 486:./Libraries/FatFs/Src/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 487:./Libraries/FatFs/Src/ff.c **** #else
 488:./Libraries/FatFs/Src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 489:./Libraries/FatFs/Src/ff.c **** #endif
 490:./Libraries/FatFs/Src/ff.c **** 
 491:./Libraries/FatFs/Src/ff.c **** 
 492:./Libraries/FatFs/Src/ff.c **** /* Timestamp */
 493:./Libraries/FatFs/Src/ff.c **** #if _FS_NORTC == 1
 494:./Libraries/FatFs/Src/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 495:./Libraries/FatFs/Src/ff.c **** #error Invalid _FS_NORTC settings
 496:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 11


 497:./Libraries/FatFs/Src/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 498:./Libraries/FatFs/Src/ff.c **** #else
 499:./Libraries/FatFs/Src/ff.c **** #define GET_FATTIME()	get_fattime()
 500:./Libraries/FatFs/Src/ff.c **** #endif
 501:./Libraries/FatFs/Src/ff.c **** 
 502:./Libraries/FatFs/Src/ff.c **** 
 503:./Libraries/FatFs/Src/ff.c **** /* File lock controls */
 504:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
 505:./Libraries/FatFs/Src/ff.c **** #if _FS_READONLY
 506:./Libraries/FatFs/Src/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 507:./Libraries/FatFs/Src/ff.c **** #endif
 508:./Libraries/FatFs/Src/ff.c **** typedef struct {
 509:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 510:./Libraries/FatFs/Src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 511:./Libraries/FatFs/Src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 512:./Libraries/FatFs/Src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 513:./Libraries/FatFs/Src/ff.c **** } FILESEM;
 514:./Libraries/FatFs/Src/ff.c **** #endif
 515:./Libraries/FatFs/Src/ff.c **** 
 516:./Libraries/FatFs/Src/ff.c **** 
 517:./Libraries/FatFs/Src/ff.c **** 
 518:./Libraries/FatFs/Src/ff.c **** 
 519:./Libraries/FatFs/Src/ff.c **** 
 520:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------------------------------------------
 521:./Libraries/FatFs/Src/ff.c **** 
 522:./Libraries/FatFs/Src/ff.c ****    Module Private Work Area
 523:./Libraries/FatFs/Src/ff.c **** 
 524:./Libraries/FatFs/Src/ff.c **** ---------------------------------------------------------------------------*/
 525:./Libraries/FatFs/Src/ff.c **** 
 526:./Libraries/FatFs/Src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 527:./Libraries/FatFs/Src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 528:./Libraries/FatFs/Src/ff.c **** /  not compliance with C standard. */
 529:./Libraries/FatFs/Src/ff.c **** 
 530:./Libraries/FatFs/Src/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 10
 531:./Libraries/FatFs/Src/ff.c **** #error Wrong _VOLUMES setting
 532:./Libraries/FatFs/Src/ff.c **** #endif
 533:./Libraries/FatFs/Src/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 534:./Libraries/FatFs/Src/ff.c **** static WORD Fsid;				/* File system mount ID */
 535:./Libraries/FatFs/Src/ff.c **** 
 536:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 537:./Libraries/FatFs/Src/ff.c **** static BYTE CurrVol;			/* Current drive */
 538:./Libraries/FatFs/Src/ff.c **** #endif
 539:./Libraries/FatFs/Src/ff.c **** 
 540:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
 541:./Libraries/FatFs/Src/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 542:./Libraries/FatFs/Src/ff.c **** #endif
 543:./Libraries/FatFs/Src/ff.c **** 
 544:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN == 0		/* Non-LFN configuration */
 545:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF
 546:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)
 547:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()
 548:./Libraries/FatFs/Src/ff.c **** 
 549:./Libraries/FatFs/Src/ff.c **** #else					/* LFN configuration */
 550:./Libraries/FatFs/Src/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 551:./Libraries/FatFs/Src/ff.c **** #error Wrong _MAX_LFN value
 552:./Libraries/FatFs/Src/ff.c **** #endif
 553:./Libraries/FatFs/Src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)
ARM GAS  /tmp/cceCRWeb.s 			page 12


 554:./Libraries/FatFs/Src/ff.c **** 
 555:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
 556:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 557:./Libraries/FatFs/Src/ff.c **** static BYTE	DirBuf[MAXDIRB(_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 558:./Libraries/FatFs/Src/ff.c **** #endif
 559:./Libraries/FatFs/Src/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];	/* LFN enabled with static working buffer */
 560:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF
 561:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)
 562:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()
 563:./Libraries/FatFs/Src/ff.c **** 
 564:./Libraries/FatFs/Src/ff.c **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 565:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 566:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[MAXDIRB(_MAX_LFN)];
 567:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 568:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()
 569:./Libraries/FatFs/Src/ff.c **** #else
 570:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 571:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 572:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()
 573:./Libraries/FatFs/Src/ff.c **** #endif
 574:./Libraries/FatFs/Src/ff.c **** 
 575:./Libraries/FatFs/Src/ff.c **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 576:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 577:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 578:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + MAXDIRB(_MAX_LFN)); if (!lfn) LEAVE_FF
 579:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 580:./Libraries/FatFs/Src/ff.c **** #else
 581:./Libraries/FatFs/Src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 582:./Libraries/FatFs/Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 583:./Libraries/FatFs/Src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 584:./Libraries/FatFs/Src/ff.c **** #endif
 585:./Libraries/FatFs/Src/ff.c **** 
 586:./Libraries/FatFs/Src/ff.c **** #else
 587:./Libraries/FatFs/Src/ff.c **** #error Wrong _USE_LFN setting
 588:./Libraries/FatFs/Src/ff.c **** 
 589:./Libraries/FatFs/Src/ff.c **** #endif
 590:./Libraries/FatFs/Src/ff.c **** #endif	/* else _USE_LFN == 0 */
 591:./Libraries/FatFs/Src/ff.c **** 
 592:./Libraries/FatFs/Src/ff.c **** #ifdef _EXCVT
 593:./Libraries/FatFs/Src/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 594:./Libraries/FatFs/Src/ff.c **** #endif
 595:./Libraries/FatFs/Src/ff.c **** 
 596:./Libraries/FatFs/Src/ff.c **** 
 597:./Libraries/FatFs/Src/ff.c **** 
 598:./Libraries/FatFs/Src/ff.c **** 
 599:./Libraries/FatFs/Src/ff.c **** 
 600:./Libraries/FatFs/Src/ff.c **** 
 601:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------------------------------------------
 602:./Libraries/FatFs/Src/ff.c **** 
 603:./Libraries/FatFs/Src/ff.c ****    Module Private Functions
 604:./Libraries/FatFs/Src/ff.c **** 
 605:./Libraries/FatFs/Src/ff.c **** ---------------------------------------------------------------------------*/
 606:./Libraries/FatFs/Src/ff.c **** 
 607:./Libraries/FatFs/Src/ff.c **** 
 608:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 609:./Libraries/FatFs/Src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 610:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/cceCRWeb.s 			page 13


 611:./Libraries/FatFs/Src/ff.c **** 
 612:./Libraries/FatFs/Src/ff.c **** static
 613:./Libraries/FatFs/Src/ff.c **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 614:./Libraries/FatFs/Src/ff.c **** {
  57              		.loc 1 614 1
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 16
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62 0000 80B4     		push	{r7}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 4
  65              		.cfi_offset 7, -4
  66 0002 85B0     		sub	sp, sp, #20
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 24
  69 0004 00AF     		add	r7, sp, #0
  70              	.LCFI2:
  71              		.cfi_def_cfa_register 7
  72 0006 7860     		str	r0, [r7, #4]
 615:./Libraries/FatFs/Src/ff.c **** 	WORD rv;
 616:./Libraries/FatFs/Src/ff.c **** 
 617:./Libraries/FatFs/Src/ff.c **** 	rv = ptr[1];
  73              		.loc 1 617 10
  74 0008 7B68     		ldr	r3, [r7, #4]
  75 000a 0133     		adds	r3, r3, #1
  76 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  77              		.loc 1 617 5
  78 000e FB81     		strh	r3, [r7, #14]	@ movhi
 618:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[0];
  79              		.loc 1 618 10
  80 0010 FB89     		ldrh	r3, [r7, #14]
  81 0012 1B02     		lsls	r3, r3, #8
  82              		.loc 1 618 15
  83 0014 1AB2     		sxth	r2, r3
  84              		.loc 1 618 20
  85 0016 7B68     		ldr	r3, [r7, #4]
  86 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  87 001a 1BB2     		sxth	r3, r3
  88              		.loc 1 618 15
  89 001c 1343     		orrs	r3, r3, r2
  90 001e 1BB2     		sxth	r3, r3
  91              		.loc 1 618 5
  92 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 619:./Libraries/FatFs/Src/ff.c **** 	return rv;
  93              		.loc 1 619 9
  94 0022 FB89     		ldrh	r3, [r7, #14]
 620:./Libraries/FatFs/Src/ff.c **** }
  95              		.loc 1 620 1
  96 0024 1846     		mov	r0, r3
  97 0026 1437     		adds	r7, r7, #20
  98              	.LCFI3:
  99              		.cfi_def_cfa_offset 4
 100 0028 BD46     		mov	sp, r7
 101              	.LCFI4:
 102              		.cfi_def_cfa_register 13
 103              		@ sp needed
ARM GAS  /tmp/cceCRWeb.s 			page 14


 104 002a 5DF8047B 		ldr	r7, [sp], #4
 105              	.LCFI5:
 106              		.cfi_restore 7
 107              		.cfi_def_cfa_offset 0
 108 002e 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE335:
 112              		.section	.text.ld_dword,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu fpv5-d16
 119              	ld_dword:
 120              	.LFB336:
 621:./Libraries/FatFs/Src/ff.c **** 
 622:./Libraries/FatFs/Src/ff.c **** static
 623:./Libraries/FatFs/Src/ff.c **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 624:./Libraries/FatFs/Src/ff.c **** {
 121              		.loc 1 624 1
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 16
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 85B0     		sub	sp, sp, #20
 131              	.LCFI7:
 132              		.cfi_def_cfa_offset 24
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI8:
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 625:./Libraries/FatFs/Src/ff.c **** 	DWORD rv;
 626:./Libraries/FatFs/Src/ff.c **** 
 627:./Libraries/FatFs/Src/ff.c **** 	rv = ptr[3];
 137              		.loc 1 627 10
 138 0008 7B68     		ldr	r3, [r7, #4]
 139 000a 0333     		adds	r3, r3, #3
 140 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141              		.loc 1 627 5
 142 000e FB60     		str	r3, [r7, #12]
 628:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[2];
 143              		.loc 1 628 10
 144 0010 FB68     		ldr	r3, [r7, #12]
 145 0012 1B02     		lsls	r3, r3, #8
 146              		.loc 1 628 20
 147 0014 7A68     		ldr	r2, [r7, #4]
 148 0016 0232     		adds	r2, r2, #2
 149 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 150              		.loc 1 628 5
 151 001a 1343     		orrs	r3, r3, r2
 152 001c FB60     		str	r3, [r7, #12]
 629:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[1];
 153              		.loc 1 629 10
ARM GAS  /tmp/cceCRWeb.s 			page 15


 154 001e FB68     		ldr	r3, [r7, #12]
 155 0020 1B02     		lsls	r3, r3, #8
 156              		.loc 1 629 20
 157 0022 7A68     		ldr	r2, [r7, #4]
 158 0024 0132     		adds	r2, r2, #1
 159 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 160              		.loc 1 629 5
 161 0028 1343     		orrs	r3, r3, r2
 162 002a FB60     		str	r3, [r7, #12]
 630:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[0];
 163              		.loc 1 630 10
 164 002c FB68     		ldr	r3, [r7, #12]
 165 002e 1B02     		lsls	r3, r3, #8
 166              		.loc 1 630 20
 167 0030 7A68     		ldr	r2, [r7, #4]
 168 0032 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 169              		.loc 1 630 5
 170 0034 1343     		orrs	r3, r3, r2
 171 0036 FB60     		str	r3, [r7, #12]
 631:./Libraries/FatFs/Src/ff.c **** 	return rv;
 172              		.loc 1 631 9
 173 0038 FB68     		ldr	r3, [r7, #12]
 632:./Libraries/FatFs/Src/ff.c **** }
 174              		.loc 1 632 1
 175 003a 1846     		mov	r0, r3
 176 003c 1437     		adds	r7, r7, #20
 177              	.LCFI9:
 178              		.cfi_def_cfa_offset 4
 179 003e BD46     		mov	sp, r7
 180              	.LCFI10:
 181              		.cfi_def_cfa_register 13
 182              		@ sp needed
 183 0040 5DF8047B 		ldr	r7, [sp], #4
 184              	.LCFI11:
 185              		.cfi_restore 7
 186              		.cfi_def_cfa_offset 0
 187 0044 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE336:
 191              		.section	.text.st_word,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv5-d16
 198              	st_word:
 199              	.LFB337:
 633:./Libraries/FatFs/Src/ff.c **** 
 634:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 635:./Libraries/FatFs/Src/ff.c **** static
 636:./Libraries/FatFs/Src/ff.c **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 637:./Libraries/FatFs/Src/ff.c **** {
 638:./Libraries/FatFs/Src/ff.c **** 	QWORD rv;
 639:./Libraries/FatFs/Src/ff.c **** 
 640:./Libraries/FatFs/Src/ff.c **** 	rv = ptr[7];
 641:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[6];
 642:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[5];
ARM GAS  /tmp/cceCRWeb.s 			page 16


 643:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[4];
 644:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[3];
 645:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[2];
 646:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[1];
 647:./Libraries/FatFs/Src/ff.c **** 	rv = rv << 8 | ptr[0];
 648:./Libraries/FatFs/Src/ff.c **** 	return rv;
 649:./Libraries/FatFs/Src/ff.c **** }
 650:./Libraries/FatFs/Src/ff.c **** #endif
 651:./Libraries/FatFs/Src/ff.c **** 
 652:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
 653:./Libraries/FatFs/Src/ff.c **** static
 654:./Libraries/FatFs/Src/ff.c **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 655:./Libraries/FatFs/Src/ff.c **** {
 200              		.loc 1 655 1
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 8
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              	.LCFI12:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              	.LCFI13:
 211              		.cfi_def_cfa_offset 16
 212 0004 00AF     		add	r7, sp, #0
 213              	.LCFI14:
 214              		.cfi_def_cfa_register 7
 215 0006 7860     		str	r0, [r7, #4]
 216 0008 0B46     		mov	r3, r1
 217 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 656:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 218              		.loc 1 656 6
 219 000c 7B68     		ldr	r3, [r7, #4]
 220 000e 5A1C     		adds	r2, r3, #1
 221 0010 7A60     		str	r2, [r7, #4]
 222              		.loc 1 656 11
 223 0012 7A88     		ldrh	r2, [r7, #2]	@ movhi
 224 0014 D2B2     		uxtb	r2, r2
 225              		.loc 1 656 9
 226 0016 1A70     		strb	r2, [r3]
 227              		.loc 1 656 26
 228 0018 7B88     		ldrh	r3, [r7, #2]
 229 001a 1B0A     		lsrs	r3, r3, #8
 230 001c 7B80     		strh	r3, [r7, #2]	@ movhi
 657:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val;
 231              		.loc 1 657 6
 232 001e 7B68     		ldr	r3, [r7, #4]
 233 0020 5A1C     		adds	r2, r3, #1
 234 0022 7A60     		str	r2, [r7, #4]
 235              		.loc 1 657 11
 236 0024 7A88     		ldrh	r2, [r7, #2]	@ movhi
 237 0026 D2B2     		uxtb	r2, r2
 238              		.loc 1 657 9
 239 0028 1A70     		strb	r2, [r3]
 658:./Libraries/FatFs/Src/ff.c **** }
 240              		.loc 1 658 1
ARM GAS  /tmp/cceCRWeb.s 			page 17


 241 002a 00BF     		nop
 242 002c 0C37     		adds	r7, r7, #12
 243              	.LCFI15:
 244              		.cfi_def_cfa_offset 4
 245 002e BD46     		mov	sp, r7
 246              	.LCFI16:
 247              		.cfi_def_cfa_register 13
 248              		@ sp needed
 249 0030 5DF8047B 		ldr	r7, [sp], #4
 250              	.LCFI17:
 251              		.cfi_restore 7
 252              		.cfi_def_cfa_offset 0
 253 0034 7047     		bx	lr
 254              		.cfi_endproc
 255              	.LFE337:
 257              		.section	.text.st_dword,"ax",%progbits
 258              		.align	1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu fpv5-d16
 264              	st_dword:
 265              	.LFB338:
 659:./Libraries/FatFs/Src/ff.c **** 
 660:./Libraries/FatFs/Src/ff.c **** static
 661:./Libraries/FatFs/Src/ff.c **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 662:./Libraries/FatFs/Src/ff.c **** {
 266              		.loc 1 662 1
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 8
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 80B4     		push	{r7}
 272              	.LCFI18:
 273              		.cfi_def_cfa_offset 4
 274              		.cfi_offset 7, -4
 275 0002 83B0     		sub	sp, sp, #12
 276              	.LCFI19:
 277              		.cfi_def_cfa_offset 16
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI20:
 280              		.cfi_def_cfa_register 7
 281 0006 7860     		str	r0, [r7, #4]
 282 0008 3960     		str	r1, [r7]
 663:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 283              		.loc 1 663 6
 284 000a 7B68     		ldr	r3, [r7, #4]
 285 000c 5A1C     		adds	r2, r3, #1
 286 000e 7A60     		str	r2, [r7, #4]
 287              		.loc 1 663 11
 288 0010 3A68     		ldr	r2, [r7]
 289 0012 D2B2     		uxtb	r2, r2
 290              		.loc 1 663 9
 291 0014 1A70     		strb	r2, [r3]
 292              		.loc 1 663 26
 293 0016 3B68     		ldr	r3, [r7]
 294 0018 1B0A     		lsrs	r3, r3, #8
ARM GAS  /tmp/cceCRWeb.s 			page 18


 295 001a 3B60     		str	r3, [r7]
 664:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 296              		.loc 1 664 6
 297 001c 7B68     		ldr	r3, [r7, #4]
 298 001e 5A1C     		adds	r2, r3, #1
 299 0020 7A60     		str	r2, [r7, #4]
 300              		.loc 1 664 11
 301 0022 3A68     		ldr	r2, [r7]
 302 0024 D2B2     		uxtb	r2, r2
 303              		.loc 1 664 9
 304 0026 1A70     		strb	r2, [r3]
 305              		.loc 1 664 26
 306 0028 3B68     		ldr	r3, [r7]
 307 002a 1B0A     		lsrs	r3, r3, #8
 308 002c 3B60     		str	r3, [r7]
 665:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 309              		.loc 1 665 6
 310 002e 7B68     		ldr	r3, [r7, #4]
 311 0030 5A1C     		adds	r2, r3, #1
 312 0032 7A60     		str	r2, [r7, #4]
 313              		.loc 1 665 11
 314 0034 3A68     		ldr	r2, [r7]
 315 0036 D2B2     		uxtb	r2, r2
 316              		.loc 1 665 9
 317 0038 1A70     		strb	r2, [r3]
 318              		.loc 1 665 26
 319 003a 3B68     		ldr	r3, [r7]
 320 003c 1B0A     		lsrs	r3, r3, #8
 321 003e 3B60     		str	r3, [r7]
 666:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val;
 322              		.loc 1 666 6
 323 0040 7B68     		ldr	r3, [r7, #4]
 324 0042 5A1C     		adds	r2, r3, #1
 325 0044 7A60     		str	r2, [r7, #4]
 326              		.loc 1 666 11
 327 0046 3A68     		ldr	r2, [r7]
 328 0048 D2B2     		uxtb	r2, r2
 329              		.loc 1 666 9
 330 004a 1A70     		strb	r2, [r3]
 667:./Libraries/FatFs/Src/ff.c **** }
 331              		.loc 1 667 1
 332 004c 00BF     		nop
 333 004e 0C37     		adds	r7, r7, #12
 334              	.LCFI21:
 335              		.cfi_def_cfa_offset 4
 336 0050 BD46     		mov	sp, r7
 337              	.LCFI22:
 338              		.cfi_def_cfa_register 13
 339              		@ sp needed
 340 0052 5DF8047B 		ldr	r7, [sp], #4
 341              	.LCFI23:
 342              		.cfi_restore 7
 343              		.cfi_def_cfa_offset 0
 344 0056 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE338:
 348              		.section	.text.mem_cpy,"ax",%progbits
ARM GAS  /tmp/cceCRWeb.s 			page 19


 349              		.align	1
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv5-d16
 355              	mem_cpy:
 356              	.LFB339:
 668:./Libraries/FatFs/Src/ff.c **** 
 669:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 670:./Libraries/FatFs/Src/ff.c **** static
 671:./Libraries/FatFs/Src/ff.c **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 672:./Libraries/FatFs/Src/ff.c **** {
 673:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 677:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 678:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 679:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 680:./Libraries/FatFs/Src/ff.c **** 	*ptr++ = (BYTE)val;
 681:./Libraries/FatFs/Src/ff.c **** }
 682:./Libraries/FatFs/Src/ff.c **** #endif
 683:./Libraries/FatFs/Src/ff.c **** #endif	/* !_FS_READONLY */
 684:./Libraries/FatFs/Src/ff.c **** 
 685:./Libraries/FatFs/Src/ff.c **** 
 686:./Libraries/FatFs/Src/ff.c **** 
 687:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 688:./Libraries/FatFs/Src/ff.c **** /* String functions                                                      */
 689:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 690:./Libraries/FatFs/Src/ff.c **** 
 691:./Libraries/FatFs/Src/ff.c **** /* Copy memory to memory */
 692:./Libraries/FatFs/Src/ff.c **** static
 693:./Libraries/FatFs/Src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 357              		.loc 1 693 53
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 24
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362 0000 80B4     		push	{r7}
 363              	.LCFI24:
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 0002 87B0     		sub	sp, sp, #28
 367              	.LCFI25:
 368              		.cfi_def_cfa_offset 32
 369 0004 00AF     		add	r7, sp, #0
 370              	.LCFI26:
 371              		.cfi_def_cfa_register 7
 372 0006 F860     		str	r0, [r7, #12]
 373 0008 B960     		str	r1, [r7, #8]
 374 000a 7A60     		str	r2, [r7, #4]
 694:./Libraries/FatFs/Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 375              		.loc 1 694 8
 376 000c FB68     		ldr	r3, [r7, #12]
 377 000e 7B61     		str	r3, [r7, #20]
 695:./Libraries/FatFs/Src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 378              		.loc 1 695 14
ARM GAS  /tmp/cceCRWeb.s 			page 20


 379 0010 BB68     		ldr	r3, [r7, #8]
 380 0012 3B61     		str	r3, [r7, #16]
 696:./Libraries/FatFs/Src/ff.c **** 
 697:./Libraries/FatFs/Src/ff.c **** 	if (cnt) {
 381              		.loc 1 697 5
 382 0014 7B68     		ldr	r3, [r7, #4]
 383 0016 002B     		cmp	r3, #0
 384 0018 0DD0     		beq	.L10
 385              	.L9:
 698:./Libraries/FatFs/Src/ff.c **** 		do {
 699:./Libraries/FatFs/Src/ff.c **** 			*d++ = *s++;
 386              		.loc 1 699 13 discriminator 1
 387 001a 3A69     		ldr	r2, [r7, #16]
 388 001c 531C     		adds	r3, r2, #1
 389 001e 3B61     		str	r3, [r7, #16]
 390              		.loc 1 699 6 discriminator 1
 391 0020 7B69     		ldr	r3, [r7, #20]
 392 0022 591C     		adds	r1, r3, #1
 393 0024 7961     		str	r1, [r7, #20]
 394              		.loc 1 699 11 discriminator 1
 395 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 396              		.loc 1 699 9 discriminator 1
 397 0028 1A70     		strb	r2, [r3]
 700:./Libraries/FatFs/Src/ff.c **** 		} while (--cnt);
 398              		.loc 1 700 3 discriminator 1
 399 002a 7B68     		ldr	r3, [r7, #4]
 400 002c 013B     		subs	r3, r3, #1
 401 002e 7B60     		str	r3, [r7, #4]
 402 0030 7B68     		ldr	r3, [r7, #4]
 403 0032 002B     		cmp	r3, #0
 404 0034 F1D1     		bne	.L9
 405              	.L10:
 701:./Libraries/FatFs/Src/ff.c **** 	}
 702:./Libraries/FatFs/Src/ff.c **** }
 406              		.loc 1 702 1
 407 0036 00BF     		nop
 408 0038 1C37     		adds	r7, r7, #28
 409              	.LCFI27:
 410              		.cfi_def_cfa_offset 4
 411 003a BD46     		mov	sp, r7
 412              	.LCFI28:
 413              		.cfi_def_cfa_register 13
 414              		@ sp needed
 415 003c 5DF8047B 		ldr	r7, [sp], #4
 416              	.LCFI29:
 417              		.cfi_restore 7
 418              		.cfi_def_cfa_offset 0
 419 0040 7047     		bx	lr
 420              		.cfi_endproc
 421              	.LFE339:
 423              		.section	.text.mem_set,"ax",%progbits
 424              		.align	1
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu fpv5-d16
 430              	mem_set:
ARM GAS  /tmp/cceCRWeb.s 			page 21


 431              	.LFB340:
 703:./Libraries/FatFs/Src/ff.c **** 
 704:./Libraries/FatFs/Src/ff.c **** /* Fill memory block */
 705:./Libraries/FatFs/Src/ff.c **** static
 706:./Libraries/FatFs/Src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 432              		.loc 1 706 45
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 24
 435              		@ frame_needed = 1, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437 0000 80B4     		push	{r7}
 438              	.LCFI30:
 439              		.cfi_def_cfa_offset 4
 440              		.cfi_offset 7, -4
 441 0002 87B0     		sub	sp, sp, #28
 442              	.LCFI31:
 443              		.cfi_def_cfa_offset 32
 444 0004 00AF     		add	r7, sp, #0
 445              	.LCFI32:
 446              		.cfi_def_cfa_register 7
 447 0006 F860     		str	r0, [r7, #12]
 448 0008 B960     		str	r1, [r7, #8]
 449 000a 7A60     		str	r2, [r7, #4]
 707:./Libraries/FatFs/Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 450              		.loc 1 707 8
 451 000c FB68     		ldr	r3, [r7, #12]
 452 000e 7B61     		str	r3, [r7, #20]
 453              	.L12:
 708:./Libraries/FatFs/Src/ff.c **** 
 709:./Libraries/FatFs/Src/ff.c **** 	do {
 710:./Libraries/FatFs/Src/ff.c **** 		*d++ = (BYTE)val;
 454              		.loc 1 710 5 discriminator 1
 455 0010 7B69     		ldr	r3, [r7, #20]
 456 0012 5A1C     		adds	r2, r3, #1
 457 0014 7A61     		str	r2, [r7, #20]
 458              		.loc 1 710 10 discriminator 1
 459 0016 BA68     		ldr	r2, [r7, #8]
 460 0018 D2B2     		uxtb	r2, r2
 461              		.loc 1 710 8 discriminator 1
 462 001a 1A70     		strb	r2, [r3]
 711:./Libraries/FatFs/Src/ff.c **** 	} while (--cnt);
 463              		.loc 1 711 2 discriminator 1
 464 001c 7B68     		ldr	r3, [r7, #4]
 465 001e 013B     		subs	r3, r3, #1
 466 0020 7B60     		str	r3, [r7, #4]
 467 0022 7B68     		ldr	r3, [r7, #4]
 468 0024 002B     		cmp	r3, #0
 469 0026 F3D1     		bne	.L12
 712:./Libraries/FatFs/Src/ff.c **** }
 470              		.loc 1 712 1
 471 0028 00BF     		nop
 472 002a 00BF     		nop
 473 002c 1C37     		adds	r7, r7, #28
 474              	.LCFI33:
 475              		.cfi_def_cfa_offset 4
 476 002e BD46     		mov	sp, r7
 477              	.LCFI34:
ARM GAS  /tmp/cceCRWeb.s 			page 22


 478              		.cfi_def_cfa_register 13
 479              		@ sp needed
 480 0030 5DF8047B 		ldr	r7, [sp], #4
 481              	.LCFI35:
 482              		.cfi_restore 7
 483              		.cfi_def_cfa_offset 0
 484 0034 7047     		bx	lr
 485              		.cfi_endproc
 486              	.LFE340:
 488              		.section	.text.mem_cmp,"ax",%progbits
 489              		.align	1
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv5-d16
 495              	mem_cmp:
 496              	.LFB341:
 713:./Libraries/FatFs/Src/ff.c **** 
 714:./Libraries/FatFs/Src/ff.c **** /* Compare memory block */
 715:./Libraries/FatFs/Src/ff.c **** static
 716:./Libraries/FatFs/Src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 497              		.loc 1 716 58
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 32
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 502 0000 80B4     		push	{r7}
 503              	.LCFI36:
 504              		.cfi_def_cfa_offset 4
 505              		.cfi_offset 7, -4
 506 0002 89B0     		sub	sp, sp, #36
 507              	.LCFI37:
 508              		.cfi_def_cfa_offset 40
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI38:
 511              		.cfi_def_cfa_register 7
 512 0006 F860     		str	r0, [r7, #12]
 513 0008 B960     		str	r1, [r7, #8]
 514 000a 7A60     		str	r2, [r7, #4]
 717:./Libraries/FatFs/Src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 515              		.loc 1 717 14
 516 000c FB68     		ldr	r3, [r7, #12]
 517 000e FB61     		str	r3, [r7, #28]
 518              		.loc 1 717 38
 519 0010 BB68     		ldr	r3, [r7, #8]
 520 0012 BB61     		str	r3, [r7, #24]
 718:./Libraries/FatFs/Src/ff.c **** 	int r = 0;
 521              		.loc 1 718 6
 522 0014 0023     		movs	r3, #0
 523 0016 7B61     		str	r3, [r7, #20]
 524              	.L15:
 719:./Libraries/FatFs/Src/ff.c **** 
 720:./Libraries/FatFs/Src/ff.c **** 	do {
 721:./Libraries/FatFs/Src/ff.c **** 		r = *d++ - *s++;
 525              		.loc 1 721 9 discriminator 2
 526 0018 FB69     		ldr	r3, [r7, #28]
 527 001a 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/cceCRWeb.s 			page 23


 528 001c FA61     		str	r2, [r7, #28]
 529              		.loc 1 721 7 discriminator 2
 530 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 531 0020 1946     		mov	r1, r3
 532              		.loc 1 721 16 discriminator 2
 533 0022 BB69     		ldr	r3, [r7, #24]
 534 0024 5A1C     		adds	r2, r3, #1
 535 0026 BA61     		str	r2, [r7, #24]
 536              		.loc 1 721 14 discriminator 2
 537 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 538              		.loc 1 721 5 discriminator 2
 539 002a CB1A     		subs	r3, r1, r3
 540 002c 7B61     		str	r3, [r7, #20]
 722:./Libraries/FatFs/Src/ff.c **** 	} while (--cnt && r == 0);
 541              		.loc 1 722 2 discriminator 2
 542 002e 7B68     		ldr	r3, [r7, #4]
 543 0030 013B     		subs	r3, r3, #1
 544 0032 7B60     		str	r3, [r7, #4]
 545 0034 7B68     		ldr	r3, [r7, #4]
 546 0036 002B     		cmp	r3, #0
 547 0038 02D0     		beq	.L14
 548              		.loc 1 722 17 discriminator 1
 549 003a 7B69     		ldr	r3, [r7, #20]
 550 003c 002B     		cmp	r3, #0
 551 003e EBD0     		beq	.L15
 552              	.L14:
 723:./Libraries/FatFs/Src/ff.c **** 
 724:./Libraries/FatFs/Src/ff.c **** 	return r;
 553              		.loc 1 724 9
 554 0040 7B69     		ldr	r3, [r7, #20]
 725:./Libraries/FatFs/Src/ff.c **** }
 555              		.loc 1 725 1
 556 0042 1846     		mov	r0, r3
 557 0044 2437     		adds	r7, r7, #36
 558              	.LCFI39:
 559              		.cfi_def_cfa_offset 4
 560 0046 BD46     		mov	sp, r7
 561              	.LCFI40:
 562              		.cfi_def_cfa_register 13
 563              		@ sp needed
 564 0048 5DF8047B 		ldr	r7, [sp], #4
 565              	.LCFI41:
 566              		.cfi_restore 7
 567              		.cfi_def_cfa_offset 0
 568 004c 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE341:
 572              		.section	.text.chk_chr,"ax",%progbits
 573              		.align	1
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv5-d16
 579              	chk_chr:
 580              	.LFB342:
 726:./Libraries/FatFs/Src/ff.c **** 
 727:./Libraries/FatFs/Src/ff.c **** /* Check if chr is contained in the string */
ARM GAS  /tmp/cceCRWeb.s 			page 24


 728:./Libraries/FatFs/Src/ff.c **** static
 729:./Libraries/FatFs/Src/ff.c **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 581              		.loc 1 729 40
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 8
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 0000 80B4     		push	{r7}
 587              	.LCFI42:
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 7, -4
 590 0002 83B0     		sub	sp, sp, #12
 591              	.LCFI43:
 592              		.cfi_def_cfa_offset 16
 593 0004 00AF     		add	r7, sp, #0
 594              	.LCFI44:
 595              		.cfi_def_cfa_register 7
 596 0006 7860     		str	r0, [r7, #4]
 597 0008 3960     		str	r1, [r7]
 730:./Libraries/FatFs/Src/ff.c **** 	while (*str && *str != chr) str++;
 598              		.loc 1 730 8
 599 000a 02E0     		b	.L18
 600              	.L20:
 601              		.loc 1 730 33 discriminator 3
 602 000c 7B68     		ldr	r3, [r7, #4]
 603 000e 0133     		adds	r3, r3, #1
 604 0010 7B60     		str	r3, [r7, #4]
 605              	.L18:
 606              		.loc 1 730 9 discriminator 1
 607 0012 7B68     		ldr	r3, [r7, #4]
 608 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 609              		.loc 1 730 8 discriminator 1
 610 0016 002B     		cmp	r3, #0
 611 0018 05D0     		beq	.L19
 612              		.loc 1 730 17 discriminator 2
 613 001a 7B68     		ldr	r3, [r7, #4]
 614 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 615 001e 1A46     		mov	r2, r3
 616              		.loc 1 730 14 discriminator 2
 617 0020 3B68     		ldr	r3, [r7]
 618 0022 9342     		cmp	r3, r2
 619 0024 F2D1     		bne	.L20
 620              	.L19:
 731:./Libraries/FatFs/Src/ff.c **** 	return *str;
 621              		.loc 1 731 9
 622 0026 7B68     		ldr	r3, [r7, #4]
 623 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 732:./Libraries/FatFs/Src/ff.c **** }
 624              		.loc 1 732 1
 625 002a 1846     		mov	r0, r3
 626 002c 0C37     		adds	r7, r7, #12
 627              	.LCFI45:
 628              		.cfi_def_cfa_offset 4
 629 002e BD46     		mov	sp, r7
 630              	.LCFI46:
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
ARM GAS  /tmp/cceCRWeb.s 			page 25


 633 0030 5DF8047B 		ldr	r7, [sp], #4
 634              	.LCFI47:
 635              		.cfi_restore 7
 636              		.cfi_def_cfa_offset 0
 637 0034 7047     		bx	lr
 638              		.cfi_endproc
 639              	.LFE342:
 641              		.section	.text.lock_fs,"ax",%progbits
 642              		.align	1
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv5-d16
 648              	lock_fs:
 649              	.LFB343:
 733:./Libraries/FatFs/Src/ff.c **** 
 734:./Libraries/FatFs/Src/ff.c **** 
 735:./Libraries/FatFs/Src/ff.c **** 
 736:./Libraries/FatFs/Src/ff.c **** 
 737:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT
 738:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 739:./Libraries/FatFs/Src/ff.c **** /* Request/Release grant to access the volume                            */
 740:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 741:./Libraries/FatFs/Src/ff.c **** static
 742:./Libraries/FatFs/Src/ff.c **** int lock_fs (
 743:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs		/* File system object */
 744:./Libraries/FatFs/Src/ff.c **** )
 745:./Libraries/FatFs/Src/ff.c **** {
 650              		.loc 1 745 1
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 8
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654 0000 80B5     		push	{r7, lr}
 655              	.LCFI48:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 82B0     		sub	sp, sp, #8
 660              	.LCFI49:
 661              		.cfi_def_cfa_offset 16
 662 0004 00AF     		add	r7, sp, #0
 663              	.LCFI50:
 664              		.cfi_def_cfa_register 7
 665 0006 7860     		str	r0, [r7, #4]
 746:./Libraries/FatFs/Src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 666              		.loc 1 746 44
 667 0008 7B68     		ldr	r3, [r7, #4]
 668 000a 002B     		cmp	r3, #0
 669 000c 09D0     		beq	.L23
 670              		.loc 1 746 16 discriminator 1
 671 000e 7B68     		ldr	r3, [r7, #4]
 672 0010 DB68     		ldr	r3, [r3, #12]
 673 0012 1846     		mov	r0, r3
 674 0014 FFF7FEFF 		bl	ff_req_grant
 675 0018 0346     		mov	r3, r0
 676              		.loc 1 746 44 discriminator 1
 677 001a 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 26


 678 001c 01D0     		beq	.L23
 679              		.loc 1 746 44 is_stmt 0 discriminator 3
 680 001e 0123     		movs	r3, #1
 681 0020 00E0     		b	.L25
 682              	.L23:
 683              		.loc 1 746 44 discriminator 4
 684 0022 0023     		movs	r3, #0
 685              	.L25:
 747:./Libraries/FatFs/Src/ff.c **** }
 686              		.loc 1 747 1 is_stmt 1 discriminator 7
 687 0024 1846     		mov	r0, r3
 688 0026 0837     		adds	r7, r7, #8
 689              	.LCFI51:
 690              		.cfi_def_cfa_offset 8
 691 0028 BD46     		mov	sp, r7
 692              	.LCFI52:
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 002a 80BD     		pop	{r7, pc}
 696              		.cfi_endproc
 697              	.LFE343:
 699              		.section	.text.unlock_fs,"ax",%progbits
 700              		.align	1
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv5-d16
 706              	unlock_fs:
 707              	.LFB344:
 748:./Libraries/FatFs/Src/ff.c **** 
 749:./Libraries/FatFs/Src/ff.c **** 
 750:./Libraries/FatFs/Src/ff.c **** static
 751:./Libraries/FatFs/Src/ff.c **** void unlock_fs (
 752:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,		/* File system object */
 753:./Libraries/FatFs/Src/ff.c **** 	FRESULT res		/* Result code to be returned */
 754:./Libraries/FatFs/Src/ff.c **** )
 755:./Libraries/FatFs/Src/ff.c **** {
 708              		.loc 1 755 1
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 8
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712 0000 80B5     		push	{r7, lr}
 713              	.LCFI53:
 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
 717 0002 82B0     		sub	sp, sp, #8
 718              	.LCFI54:
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              	.LCFI55:
 722              		.cfi_def_cfa_register 7
 723 0006 7860     		str	r0, [r7, #4]
 724 0008 0B46     		mov	r3, r1
 725 000a FB70     		strb	r3, [r7, #3]
 756:./Libraries/FatFs/Src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 726              		.loc 1 756 5
ARM GAS  /tmp/cceCRWeb.s 			page 27


 727 000c 7B68     		ldr	r3, [r7, #4]
 728 000e 002B     		cmp	r3, #0
 729 0010 0DD0     		beq	.L28
 730              		.loc 1 756 9 discriminator 1
 731 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 732 0014 0C2B     		cmp	r3, #12
 733 0016 0AD0     		beq	.L28
 734              		.loc 1 756 34 discriminator 2
 735 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 736 001a 0B2B     		cmp	r3, #11
 737 001c 07D0     		beq	.L28
 738              		.loc 1 756 61 discriminator 3
 739 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 740 0020 0F2B     		cmp	r3, #15
 741 0022 04D0     		beq	.L28
 757:./Libraries/FatFs/Src/ff.c **** 		ff_rel_grant(fs->sobj);
 742              		.loc 1 757 3
 743 0024 7B68     		ldr	r3, [r7, #4]
 744 0026 DB68     		ldr	r3, [r3, #12]
 745 0028 1846     		mov	r0, r3
 746 002a FFF7FEFF 		bl	ff_rel_grant
 747              	.L28:
 758:./Libraries/FatFs/Src/ff.c **** 	}
 759:./Libraries/FatFs/Src/ff.c **** }
 748              		.loc 1 759 1
 749 002e 00BF     		nop
 750 0030 0837     		adds	r7, r7, #8
 751              	.LCFI56:
 752              		.cfi_def_cfa_offset 8
 753 0032 BD46     		mov	sp, r7
 754              	.LCFI57:
 755              		.cfi_def_cfa_register 13
 756              		@ sp needed
 757 0034 80BD     		pop	{r7, pc}
 758              		.cfi_endproc
 759              	.LFE344:
 761              		.section	.text.chk_lock,"ax",%progbits
 762              		.align	1
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
 766              		.fpu fpv5-d16
 768              	chk_lock:
 769              	.LFB345:
 760:./Libraries/FatFs/Src/ff.c **** 
 761:./Libraries/FatFs/Src/ff.c **** #endif
 762:./Libraries/FatFs/Src/ff.c **** 
 763:./Libraries/FatFs/Src/ff.c **** 
 764:./Libraries/FatFs/Src/ff.c **** 
 765:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
 766:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 767:./Libraries/FatFs/Src/ff.c **** /* File lock control functions                                           */
 768:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 769:./Libraries/FatFs/Src/ff.c **** 
 770:./Libraries/FatFs/Src/ff.c **** static
 771:./Libraries/FatFs/Src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 772:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
ARM GAS  /tmp/cceCRWeb.s 			page 28


 773:./Libraries/FatFs/Src/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 774:./Libraries/FatFs/Src/ff.c **** )
 775:./Libraries/FatFs/Src/ff.c **** {
 770              		.loc 1 775 1
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 16
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775 0000 80B4     		push	{r7}
 776              	.LCFI58:
 777              		.cfi_def_cfa_offset 4
 778              		.cfi_offset 7, -4
 779 0002 85B0     		sub	sp, sp, #20
 780              	.LCFI59:
 781              		.cfi_def_cfa_offset 24
 782 0004 00AF     		add	r7, sp, #0
 783              	.LCFI60:
 784              		.cfi_def_cfa_register 7
 785 0006 7860     		str	r0, [r7, #4]
 786 0008 3960     		str	r1, [r7]
 776:./Libraries/FatFs/Src/ff.c **** 	UINT i, be;
 777:./Libraries/FatFs/Src/ff.c **** 
 778:./Libraries/FatFs/Src/ff.c **** 	/* Search file semaphore table */
 779:./Libraries/FatFs/Src/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 787              		.loc 1 779 14
 788 000a 0023     		movs	r3, #0
 789 000c BB60     		str	r3, [r7, #8]
 790              		.loc 1 779 9
 791 000e BB68     		ldr	r3, [r7, #8]
 792 0010 FB60     		str	r3, [r7, #12]
 793              		.loc 1 779 2
 794 0012 29E0     		b	.L30
 795              	.L34:
 780:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 796              		.loc 1 780 15
 797 0014 274A     		ldr	r2, .L43
 798 0016 FB68     		ldr	r3, [r7, #12]
 799 0018 1B01     		lsls	r3, r3, #4
 800 001a 1344     		add	r3, r3, r2
 801 001c 1B68     		ldr	r3, [r3]
 802              		.loc 1 780 6
 803 001e 002B     		cmp	r3, #0
 804 0020 1DD0     		beq	.L31
 781:./Libraries/FatFs/Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 805              		.loc 1 781 16
 806 0022 244A     		ldr	r2, .L43
 807 0024 FB68     		ldr	r3, [r7, #12]
 808 0026 1B01     		lsls	r3, r3, #4
 809 0028 1344     		add	r3, r3, r2
 810 002a 1A68     		ldr	r2, [r3]
 811              		.loc 1 781 30
 812 002c 7B68     		ldr	r3, [r7, #4]
 813 002e 1B68     		ldr	r3, [r3]
 814              		.loc 1 781 7
 815 0030 9A42     		cmp	r2, r3
 816 0032 16D1     		bne	.L32
 782:./Libraries/FatFs/Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
ARM GAS  /tmp/cceCRWeb.s 			page 29


 817              		.loc 1 782 13 discriminator 1
 818 0034 1F4A     		ldr	r2, .L43
 819 0036 FB68     		ldr	r3, [r7, #12]
 820 0038 1B01     		lsls	r3, r3, #4
 821 003a 1344     		add	r3, r3, r2
 822 003c 0433     		adds	r3, r3, #4
 823 003e 1A68     		ldr	r2, [r3]
 824              		.loc 1 782 28 discriminator 1
 825 0040 7B68     		ldr	r3, [r7, #4]
 826 0042 9B68     		ldr	r3, [r3, #8]
 781:./Libraries/FatFs/Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 827              		.loc 1 781 34 discriminator 1
 828 0044 9A42     		cmp	r2, r3
 829 0046 0CD1     		bne	.L32
 783:./Libraries/FatFs/Src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 830              		.loc 1 783 13
 831 0048 1A4A     		ldr	r2, .L43
 832 004a FB68     		ldr	r3, [r7, #12]
 833 004c 1B01     		lsls	r3, r3, #4
 834 004e 1344     		add	r3, r3, r2
 835 0050 0833     		adds	r3, r3, #8
 836 0052 1A68     		ldr	r2, [r3]
 837              		.loc 1 783 23
 838 0054 7B68     		ldr	r3, [r7, #4]
 839 0056 5B69     		ldr	r3, [r3, #20]
 782:./Libraries/FatFs/Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 840              		.loc 1 782 36
 841 0058 9A42     		cmp	r2, r3
 842 005a 02D1     		bne	.L32
 843              		.loc 1 783 5
 844 005c 07E0     		b	.L33
 845              	.L31:
 784:./Libraries/FatFs/Src/ff.c **** 		} else {			/* Blank entry */
 785:./Libraries/FatFs/Src/ff.c **** 			be = 1;
 846              		.loc 1 785 7
 847 005e 0123     		movs	r3, #1
 848 0060 BB60     		str	r3, [r7, #8]
 849              	.L32:
 779:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 850              		.loc 1 779 34 discriminator 2
 851 0062 FB68     		ldr	r3, [r7, #12]
 852 0064 0133     		adds	r3, r3, #1
 853 0066 FB60     		str	r3, [r7, #12]
 854              	.L30:
 779:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 855              		.loc 1 779 2 discriminator 1
 856 0068 FB68     		ldr	r3, [r7, #12]
 857 006a 012B     		cmp	r3, #1
 858 006c D2D9     		bls	.L34
 859              	.L33:
 786:./Libraries/FatFs/Src/ff.c **** 		}
 787:./Libraries/FatFs/Src/ff.c **** 	}
 788:./Libraries/FatFs/Src/ff.c **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 860              		.loc 1 788 5
 861 006e FB68     		ldr	r3, [r7, #12]
 862 0070 022B     		cmp	r3, #2
 863 0072 09D1     		bne	.L35
ARM GAS  /tmp/cceCRWeb.s 			page 30


 789:./Libraries/FatFs/Src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 864              		.loc 1 789 35
 865 0074 BB68     		ldr	r3, [r7, #8]
 866 0076 002B     		cmp	r3, #0
 867 0078 02D1     		bne	.L36
 868              		.loc 1 789 14 discriminator 2
 869 007a 3B68     		ldr	r3, [r7]
 870 007c 022B     		cmp	r3, #2
 871 007e 01D1     		bne	.L37
 872              	.L36:
 873              		.loc 1 789 35 discriminator 3
 874 0080 0023     		movs	r3, #0
 875 0082 10E0     		b	.L39
 876              	.L37:
 877              		.loc 1 789 35 is_stmt 0 discriminator 4
 878 0084 1223     		movs	r3, #18
 879 0086 0EE0     		b	.L39
 880              	.L35:
 790:./Libraries/FatFs/Src/ff.c **** 	}
 791:./Libraries/FatFs/Src/ff.c **** 
 792:./Libraries/FatFs/Src/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 793:./Libraries/FatFs/Src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 881              		.loc 1 793 52 is_stmt 1
 882 0088 3B68     		ldr	r3, [r7]
 883 008a 002B     		cmp	r3, #0
 884 008c 08D1     		bne	.L40
 885              		.loc 1 793 25 discriminator 2
 886 008e 094A     		ldr	r2, .L43
 887 0090 FB68     		ldr	r3, [r7, #12]
 888 0092 1B01     		lsls	r3, r3, #4
 889 0094 1344     		add	r3, r3, r2
 890 0096 0C33     		adds	r3, r3, #12
 891 0098 1B88     		ldrh	r3, [r3]
 892              		.loc 1 793 14 discriminator 2
 893 009a B3F5807F 		cmp	r3, #256
 894 009e 01D1     		bne	.L41
 895              	.L40:
 896              		.loc 1 793 52 discriminator 3
 897 00a0 1023     		movs	r3, #16
 898 00a2 00E0     		b	.L39
 899              	.L41:
 900              		.loc 1 793 52 is_stmt 0 discriminator 4
 901 00a4 0023     		movs	r3, #0
 902              	.L39:
 794:./Libraries/FatFs/Src/ff.c **** }
 903              		.loc 1 794 1 is_stmt 1
 904 00a6 1846     		mov	r0, r3
 905 00a8 1437     		adds	r7, r7, #20
 906              	.LCFI61:
 907              		.cfi_def_cfa_offset 4
 908 00aa BD46     		mov	sp, r7
 909              	.LCFI62:
 910              		.cfi_def_cfa_register 13
 911              		@ sp needed
 912 00ac 5DF8047B 		ldr	r7, [sp], #4
 913              	.LCFI63:
 914              		.cfi_restore 7
ARM GAS  /tmp/cceCRWeb.s 			page 31


 915              		.cfi_def_cfa_offset 0
 916 00b0 7047     		bx	lr
 917              	.L44:
 918 00b2 00BF     		.align	2
 919              	.L43:
 920 00b4 00000000 		.word	Files
 921              		.cfi_endproc
 922              	.LFE345:
 924              		.section	.text.enq_lock,"ax",%progbits
 925              		.align	1
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu fpv5-d16
 931              	enq_lock:
 932              	.LFB346:
 795:./Libraries/FatFs/Src/ff.c **** 
 796:./Libraries/FatFs/Src/ff.c **** 
 797:./Libraries/FatFs/Src/ff.c **** static
 798:./Libraries/FatFs/Src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 799:./Libraries/FatFs/Src/ff.c **** {
 933              		.loc 1 799 1
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938 0000 80B4     		push	{r7}
 939              	.LCFI64:
 940              		.cfi_def_cfa_offset 4
 941              		.cfi_offset 7, -4
 942 0002 83B0     		sub	sp, sp, #12
 943              	.LCFI65:
 944              		.cfi_def_cfa_offset 16
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI66:
 947              		.cfi_def_cfa_register 7
 800:./Libraries/FatFs/Src/ff.c **** 	UINT i;
 801:./Libraries/FatFs/Src/ff.c **** 
 802:./Libraries/FatFs/Src/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 948              		.loc 1 802 9
 949 0006 0023     		movs	r3, #0
 950 0008 7B60     		str	r3, [r7, #4]
 951              		.loc 1 802 2
 952 000a 02E0     		b	.L46
 953              	.L48:
 954              		.loc 1 802 44 discriminator 4
 955 000c 7B68     		ldr	r3, [r7, #4]
 956 000e 0133     		adds	r3, r3, #1
 957 0010 7B60     		str	r3, [r7, #4]
 958              	.L46:
 959              		.loc 1 802 2 discriminator 1
 960 0012 7B68     		ldr	r3, [r7, #4]
 961 0014 012B     		cmp	r3, #1
 962 0016 06D8     		bhi	.L47
 963              		.loc 1 802 38 discriminator 3
 964 0018 094A     		ldr	r2, .L50
 965 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 32


 966 001c 1B01     		lsls	r3, r3, #4
 967 001e 1344     		add	r3, r3, r2
 968 0020 1B68     		ldr	r3, [r3]
 969              		.loc 1 802 27 discriminator 3
 970 0022 002B     		cmp	r3, #0
 971 0024 F2D1     		bne	.L48
 972              	.L47:
 803:./Libraries/FatFs/Src/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 973              		.loc 1 803 29
 974 0026 7B68     		ldr	r3, [r7, #4]
 975 0028 022B     		cmp	r3, #2
 976 002a 14BF     		ite	ne
 977 002c 0123     		movne	r3, #1
 978 002e 0023     		moveq	r3, #0
 979 0030 DBB2     		uxtb	r3, r3
 804:./Libraries/FatFs/Src/ff.c **** }
 980              		.loc 1 804 1
 981 0032 1846     		mov	r0, r3
 982 0034 0C37     		adds	r7, r7, #12
 983              	.LCFI67:
 984              		.cfi_def_cfa_offset 4
 985 0036 BD46     		mov	sp, r7
 986              	.LCFI68:
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0038 5DF8047B 		ldr	r7, [sp], #4
 990              	.LCFI69:
 991              		.cfi_restore 7
 992              		.cfi_def_cfa_offset 0
 993 003c 7047     		bx	lr
 994              	.L51:
 995 003e 00BF     		.align	2
 996              	.L50:
 997 0040 00000000 		.word	Files
 998              		.cfi_endproc
 999              	.LFE346:
 1001              		.section	.text.inc_lock,"ax",%progbits
 1002              		.align	1
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv5-d16
 1008              	inc_lock:
 1009              	.LFB347:
 805:./Libraries/FatFs/Src/ff.c **** 
 806:./Libraries/FatFs/Src/ff.c **** 
 807:./Libraries/FatFs/Src/ff.c **** static
 808:./Libraries/FatFs/Src/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 809:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 810:./Libraries/FatFs/Src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 811:./Libraries/FatFs/Src/ff.c **** )
 812:./Libraries/FatFs/Src/ff.c **** {
 1010              		.loc 1 812 1
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 16
 1013              		@ frame_needed = 1, uses_anonymous_args = 0
 1014              		@ link register save eliminated.
ARM GAS  /tmp/cceCRWeb.s 			page 33


 1015 0000 80B4     		push	{r7}
 1016              	.LCFI70:
 1017              		.cfi_def_cfa_offset 4
 1018              		.cfi_offset 7, -4
 1019 0002 85B0     		sub	sp, sp, #20
 1020              	.LCFI71:
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              	.LCFI72:
 1024              		.cfi_def_cfa_register 7
 1025 0006 7860     		str	r0, [r7, #4]
 1026 0008 3960     		str	r1, [r7]
 813:./Libraries/FatFs/Src/ff.c **** 	UINT i;
 814:./Libraries/FatFs/Src/ff.c **** 
 815:./Libraries/FatFs/Src/ff.c **** 
 816:./Libraries/FatFs/Src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 1027              		.loc 1 816 9
 1028 000a 0023     		movs	r3, #0
 1029 000c FB60     		str	r3, [r7, #12]
 1030              		.loc 1 816 2
 1031 000e 1FE0     		b	.L53
 1032              	.L56:
 817:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1033              		.loc 1 817 15
 1034 0010 414A     		ldr	r2, .L67
 1035 0012 FB68     		ldr	r3, [r7, #12]
 1036 0014 1B01     		lsls	r3, r3, #4
 1037 0016 1344     		add	r3, r3, r2
 1038 0018 1A68     		ldr	r2, [r3]
 1039              		.loc 1 817 29
 1040 001a 7B68     		ldr	r3, [r7, #4]
 1041 001c 1B68     		ldr	r3, [r3]
 1042              		.loc 1 817 6
 1043 001e 9A42     		cmp	r2, r3
 1044 0020 13D1     		bne	.L54
 818:./Libraries/FatFs/Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1045              		.loc 1 818 12 discriminator 1
 1046 0022 3D4A     		ldr	r2, .L67
 1047 0024 FB68     		ldr	r3, [r7, #12]
 1048 0026 1B01     		lsls	r3, r3, #4
 1049 0028 1344     		add	r3, r3, r2
 1050 002a 0433     		adds	r3, r3, #4
 1051 002c 1A68     		ldr	r2, [r3]
 1052              		.loc 1 818 27 discriminator 1
 1053 002e 7B68     		ldr	r3, [r7, #4]
 1054 0030 9B68     		ldr	r3, [r3, #8]
 817:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1055              		.loc 1 817 33 discriminator 1
 1056 0032 9A42     		cmp	r2, r3
 1057 0034 09D1     		bne	.L54
 819:./Libraries/FatFs/Src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 1058              		.loc 1 819 12
 1059 0036 384A     		ldr	r2, .L67
 1060 0038 FB68     		ldr	r3, [r7, #12]
 1061 003a 1B01     		lsls	r3, r3, #4
 1062 003c 1344     		add	r3, r3, r2
 1063 003e 0833     		adds	r3, r3, #8
ARM GAS  /tmp/cceCRWeb.s 			page 34


 1064 0040 1A68     		ldr	r2, [r3]
 1065              		.loc 1 819 22
 1066 0042 7B68     		ldr	r3, [r7, #4]
 1067 0044 5B69     		ldr	r3, [r3, #20]
 818:./Libraries/FatFs/Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1068              		.loc 1 818 35
 1069 0046 9A42     		cmp	r2, r3
 1070 0048 06D0     		beq	.L66
 1071              	.L54:
 816:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1072              		.loc 1 816 29 discriminator 2
 1073 004a FB68     		ldr	r3, [r7, #12]
 1074 004c 0133     		adds	r3, r3, #1
 1075 004e FB60     		str	r3, [r7, #12]
 1076              	.L53:
 816:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1077              		.loc 1 816 2 discriminator 1
 1078 0050 FB68     		ldr	r3, [r7, #12]
 1079 0052 012B     		cmp	r3, #1
 1080 0054 DCD9     		bls	.L56
 1081 0056 00E0     		b	.L55
 1082              	.L66:
 1083              		.loc 1 819 4
 1084 0058 00BF     		nop
 1085              	.L55:
 820:./Libraries/FatFs/Src/ff.c **** 	}
 821:./Libraries/FatFs/Src/ff.c **** 
 822:./Libraries/FatFs/Src/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 1086              		.loc 1 822 5
 1087 005a FB68     		ldr	r3, [r7, #12]
 1088 005c 022B     		cmp	r3, #2
 1089 005e 32D1     		bne	.L57
 823:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 1090              		.loc 1 823 10
 1091 0060 0023     		movs	r3, #0
 1092 0062 FB60     		str	r3, [r7, #12]
 1093              		.loc 1 823 3
 1094 0064 02E0     		b	.L58
 1095              	.L60:
 1096              		.loc 1 823 45 discriminator 4
 1097 0066 FB68     		ldr	r3, [r7, #12]
 1098 0068 0133     		adds	r3, r3, #1
 1099 006a FB60     		str	r3, [r7, #12]
 1100              	.L58:
 1101              		.loc 1 823 3 discriminator 1
 1102 006c FB68     		ldr	r3, [r7, #12]
 1103 006e 012B     		cmp	r3, #1
 1104 0070 06D8     		bhi	.L59
 1105              		.loc 1 823 39 discriminator 3
 1106 0072 294A     		ldr	r2, .L67
 1107 0074 FB68     		ldr	r3, [r7, #12]
 1108 0076 1B01     		lsls	r3, r3, #4
 1109 0078 1344     		add	r3, r3, r2
 1110 007a 1B68     		ldr	r3, [r3]
 1111              		.loc 1 823 28 discriminator 3
 1112 007c 002B     		cmp	r3, #0
 1113 007e F2D1     		bne	.L60
ARM GAS  /tmp/cceCRWeb.s 			page 35


 1114              	.L59:
 824:./Libraries/FatFs/Src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 1115              		.loc 1 824 6
 1116 0080 FB68     		ldr	r3, [r7, #12]
 1117 0082 022B     		cmp	r3, #2
 1118 0084 01D1     		bne	.L61
 1119              		.loc 1 824 29 discriminator 1
 1120 0086 0023     		movs	r3, #0
 1121 0088 40E0     		b	.L62
 1122              	.L61:
 825:./Libraries/FatFs/Src/ff.c **** 		Files[i].fs = dp->obj.fs;
 1123              		.loc 1 825 24
 1124 008a 7B68     		ldr	r3, [r7, #4]
 1125 008c 1A68     		ldr	r2, [r3]
 1126              		.loc 1 825 15
 1127 008e 2249     		ldr	r1, .L67
 1128 0090 FB68     		ldr	r3, [r7, #12]
 1129 0092 1B01     		lsls	r3, r3, #4
 1130 0094 0B44     		add	r3, r3, r1
 1131 0096 1A60     		str	r2, [r3]
 826:./Libraries/FatFs/Src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 1132              		.loc 1 826 25
 1133 0098 7B68     		ldr	r3, [r7, #4]
 1134 009a 9A68     		ldr	r2, [r3, #8]
 1135              		.loc 1 826 16
 1136 009c 1E49     		ldr	r1, .L67
 1137 009e FB68     		ldr	r3, [r7, #12]
 1138 00a0 1B01     		lsls	r3, r3, #4
 1139 00a2 0B44     		add	r3, r3, r1
 1140 00a4 0433     		adds	r3, r3, #4
 1141 00a6 1A60     		str	r2, [r3]
 827:./Libraries/FatFs/Src/ff.c **** 		Files[i].ofs = dp->dptr;
 1142              		.loc 1 827 20
 1143 00a8 7B68     		ldr	r3, [r7, #4]
 1144 00aa 5A69     		ldr	r2, [r3, #20]
 1145              		.loc 1 827 16
 1146 00ac 1A49     		ldr	r1, .L67
 1147 00ae FB68     		ldr	r3, [r7, #12]
 1148 00b0 1B01     		lsls	r3, r3, #4
 1149 00b2 0B44     		add	r3, r3, r1
 1150 00b4 0833     		adds	r3, r3, #8
 1151 00b6 1A60     		str	r2, [r3]
 828:./Libraries/FatFs/Src/ff.c **** 		Files[i].ctr = 0;
 1152              		.loc 1 828 16
 1153 00b8 174A     		ldr	r2, .L67
 1154 00ba FB68     		ldr	r3, [r7, #12]
 1155 00bc 1B01     		lsls	r3, r3, #4
 1156 00be 1344     		add	r3, r3, r2
 1157 00c0 0C33     		adds	r3, r3, #12
 1158 00c2 0022     		movs	r2, #0
 1159 00c4 1A80     		strh	r2, [r3]	@ movhi
 1160              	.L57:
 829:./Libraries/FatFs/Src/ff.c **** 	}
 830:./Libraries/FatFs/Src/ff.c **** 
 831:./Libraries/FatFs/Src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 1161              		.loc 1 831 5
 1162 00c6 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cceCRWeb.s 			page 36


 1163 00c8 002B     		cmp	r3, #0
 1164 00ca 09D0     		beq	.L63
 1165              		.loc 1 831 21 discriminator 1
 1166 00cc 124A     		ldr	r2, .L67
 1167 00ce FB68     		ldr	r3, [r7, #12]
 1168 00d0 1B01     		lsls	r3, r3, #4
 1169 00d2 1344     		add	r3, r3, r2
 1170 00d4 0C33     		adds	r3, r3, #12
 1171 00d6 1B88     		ldrh	r3, [r3]
 1172              		.loc 1 831 10 discriminator 1
 1173 00d8 002B     		cmp	r3, #0
 1174 00da 01D0     		beq	.L63
 1175              		.loc 1 831 34 discriminator 2
 1176 00dc 0023     		movs	r3, #0
 1177 00de 15E0     		b	.L62
 1178              	.L63:
 832:./Libraries/FatFs/Src/ff.c **** 
 833:./Libraries/FatFs/Src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 1179              		.loc 1 833 15
 1180 00e0 3B68     		ldr	r3, [r7]
 1181 00e2 002B     		cmp	r3, #0
 1182 00e4 08D1     		bne	.L64
 1183              		.loc 1 833 39 discriminator 1
 1184 00e6 0C4A     		ldr	r2, .L67
 1185 00e8 FB68     		ldr	r3, [r7, #12]
 1186 00ea 1B01     		lsls	r3, r3, #4
 1187 00ec 1344     		add	r3, r3, r2
 1188 00ee 0C33     		adds	r3, r3, #12
 1189 00f0 1B88     		ldrh	r3, [r3]
 1190              		.loc 1 833 15 discriminator 1
 1191 00f2 0133     		adds	r3, r3, #1
 1192 00f4 9AB2     		uxth	r2, r3
 1193 00f6 01E0     		b	.L65
 1194              	.L64:
 1195              		.loc 1 833 15 is_stmt 0 discriminator 2
 1196 00f8 4FF48072 		mov	r2, #256
 1197              	.L65:
 1198              		.loc 1 833 15 discriminator 4
 1199 00fc 0649     		ldr	r1, .L67
 1200 00fe FB68     		ldr	r3, [r7, #12]
 1201 0100 1B01     		lsls	r3, r3, #4
 1202 0102 0B44     		add	r3, r3, r1
 1203 0104 0C33     		adds	r3, r3, #12
 1204 0106 1A80     		strh	r2, [r3]	@ movhi
 834:./Libraries/FatFs/Src/ff.c **** 
 835:./Libraries/FatFs/Src/ff.c **** 	return i + 1;
 1205              		.loc 1 835 11 is_stmt 1 discriminator 4
 1206 0108 FB68     		ldr	r3, [r7, #12]
 1207 010a 0133     		adds	r3, r3, #1
 1208              	.L62:
 836:./Libraries/FatFs/Src/ff.c **** }
 1209              		.loc 1 836 1
 1210 010c 1846     		mov	r0, r3
 1211 010e 1437     		adds	r7, r7, #20
 1212              	.LCFI73:
 1213              		.cfi_def_cfa_offset 4
 1214 0110 BD46     		mov	sp, r7
ARM GAS  /tmp/cceCRWeb.s 			page 37


 1215              	.LCFI74:
 1216              		.cfi_def_cfa_register 13
 1217              		@ sp needed
 1218 0112 5DF8047B 		ldr	r7, [sp], #4
 1219              	.LCFI75:
 1220              		.cfi_restore 7
 1221              		.cfi_def_cfa_offset 0
 1222 0116 7047     		bx	lr
 1223              	.L68:
 1224              		.align	2
 1225              	.L67:
 1226 0118 00000000 		.word	Files
 1227              		.cfi_endproc
 1228              	.LFE347:
 1230              		.section	.text.dec_lock,"ax",%progbits
 1231              		.align	1
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1235              		.fpu fpv5-d16
 1237              	dec_lock:
 1238              	.LFB348:
 837:./Libraries/FatFs/Src/ff.c **** 
 838:./Libraries/FatFs/Src/ff.c **** 
 839:./Libraries/FatFs/Src/ff.c **** static
 840:./Libraries/FatFs/Src/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 841:./Libraries/FatFs/Src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 842:./Libraries/FatFs/Src/ff.c **** )
 843:./Libraries/FatFs/Src/ff.c **** {
 1239              		.loc 1 843 1
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 16
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 80B4     		push	{r7}
 1245              	.LCFI76:
 1246              		.cfi_def_cfa_offset 4
 1247              		.cfi_offset 7, -4
 1248 0002 85B0     		sub	sp, sp, #20
 1249              	.LCFI77:
 1250              		.cfi_def_cfa_offset 24
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI78:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 844:./Libraries/FatFs/Src/ff.c **** 	WORD n;
 845:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
 846:./Libraries/FatFs/Src/ff.c **** 
 847:./Libraries/FatFs/Src/ff.c **** 
 848:./Libraries/FatFs/Src/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 1255              		.loc 1 848 5
 1256 0008 7B68     		ldr	r3, [r7, #4]
 1257 000a 013B     		subs	r3, r3, #1
 1258 000c 7B60     		str	r3, [r7, #4]
 1259 000e 7B68     		ldr	r3, [r7, #4]
 1260 0010 012B     		cmp	r3, #1
 1261 0012 25D8     		bhi	.L70
ARM GAS  /tmp/cceCRWeb.s 			page 38


 849:./Libraries/FatFs/Src/ff.c **** 		n = Files[i].ctr;
 1262              		.loc 1 849 5
 1263 0014 174A     		ldr	r2, .L76
 1264 0016 7B68     		ldr	r3, [r7, #4]
 1265 0018 1B01     		lsls	r3, r3, #4
 1266 001a 1344     		add	r3, r3, r2
 1267 001c 0C33     		adds	r3, r3, #12
 1268 001e 1B88     		ldrh	r3, [r3]	@ movhi
 1269 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 850:./Libraries/FatFs/Src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 1270              		.loc 1 850 6
 1271 0022 FB89     		ldrh	r3, [r7, #14]
 1272 0024 B3F5807F 		cmp	r3, #256
 1273 0028 01D1     		bne	.L71
 1274              		.loc 1 850 21 discriminator 1
 1275 002a 0023     		movs	r3, #0
 1276 002c FB81     		strh	r3, [r7, #14]	@ movhi
 1277              	.L71:
 851:./Libraries/FatFs/Src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 1278              		.loc 1 851 6
 1279 002e FB89     		ldrh	r3, [r7, #14]
 1280 0030 002B     		cmp	r3, #0
 1281 0032 02D0     		beq	.L72
 1282              		.loc 1 851 15 discriminator 1
 1283 0034 FB89     		ldrh	r3, [r7, #14]
 1284 0036 013B     		subs	r3, r3, #1
 1285 0038 FB81     		strh	r3, [r7, #14]	@ movhi
 1286              	.L72:
 852:./Libraries/FatFs/Src/ff.c **** 		Files[i].ctr = n;
 1287              		.loc 1 852 16
 1288 003a 0E4A     		ldr	r2, .L76
 1289 003c 7B68     		ldr	r3, [r7, #4]
 1290 003e 1B01     		lsls	r3, r3, #4
 1291 0040 1344     		add	r3, r3, r2
 1292 0042 0C33     		adds	r3, r3, #12
 1293 0044 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1294 0046 1A80     		strh	r2, [r3]	@ movhi
 853:./Libraries/FatFs/Src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 1295              		.loc 1 853 6
 1296 0048 FB89     		ldrh	r3, [r7, #14]
 1297 004a 002B     		cmp	r3, #0
 1298 004c 05D1     		bne	.L73
 1299              		.loc 1 853 27 discriminator 1
 1300 004e 094A     		ldr	r2, .L76
 1301 0050 7B68     		ldr	r3, [r7, #4]
 1302 0052 1B01     		lsls	r3, r3, #4
 1303 0054 1344     		add	r3, r3, r2
 1304 0056 0022     		movs	r2, #0
 1305 0058 1A60     		str	r2, [r3]
 1306              	.L73:
 854:./Libraries/FatFs/Src/ff.c **** 		res = FR_OK;
 1307              		.loc 1 854 7
 1308 005a 0023     		movs	r3, #0
 1309 005c 7B73     		strb	r3, [r7, #13]
 1310 005e 01E0     		b	.L74
 1311              	.L70:
 855:./Libraries/FatFs/Src/ff.c **** 	} else {
ARM GAS  /tmp/cceCRWeb.s 			page 39


 856:./Libraries/FatFs/Src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 1312              		.loc 1 856 7
 1313 0060 0223     		movs	r3, #2
 1314 0062 7B73     		strb	r3, [r7, #13]
 1315              	.L74:
 857:./Libraries/FatFs/Src/ff.c **** 	}
 858:./Libraries/FatFs/Src/ff.c **** 	return res;
 1316              		.loc 1 858 9
 1317 0064 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 859:./Libraries/FatFs/Src/ff.c **** }
 1318              		.loc 1 859 1
 1319 0066 1846     		mov	r0, r3
 1320 0068 1437     		adds	r7, r7, #20
 1321              	.LCFI79:
 1322              		.cfi_def_cfa_offset 4
 1323 006a BD46     		mov	sp, r7
 1324              	.LCFI80:
 1325              		.cfi_def_cfa_register 13
 1326              		@ sp needed
 1327 006c 5DF8047B 		ldr	r7, [sp], #4
 1328              	.LCFI81:
 1329              		.cfi_restore 7
 1330              		.cfi_def_cfa_offset 0
 1331 0070 7047     		bx	lr
 1332              	.L77:
 1333 0072 00BF     		.align	2
 1334              	.L76:
 1335 0074 00000000 		.word	Files
 1336              		.cfi_endproc
 1337              	.LFE348:
 1339              		.section	.text.clear_lock,"ax",%progbits
 1340              		.align	1
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv5-d16
 1346              	clear_lock:
 1347              	.LFB349:
 860:./Libraries/FatFs/Src/ff.c **** 
 861:./Libraries/FatFs/Src/ff.c **** 
 862:./Libraries/FatFs/Src/ff.c **** static
 863:./Libraries/FatFs/Src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 864:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs
 865:./Libraries/FatFs/Src/ff.c **** )
 866:./Libraries/FatFs/Src/ff.c **** {
 1348              		.loc 1 866 1
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 16
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
 1352              		@ link register save eliminated.
 1353 0000 80B4     		push	{r7}
 1354              	.LCFI82:
 1355              		.cfi_def_cfa_offset 4
 1356              		.cfi_offset 7, -4
 1357 0002 85B0     		sub	sp, sp, #20
 1358              	.LCFI83:
 1359              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cceCRWeb.s 			page 40


 1360 0004 00AF     		add	r7, sp, #0
 1361              	.LCFI84:
 1362              		.cfi_def_cfa_register 7
 1363 0006 7860     		str	r0, [r7, #4]
 867:./Libraries/FatFs/Src/ff.c **** 	UINT i;
 868:./Libraries/FatFs/Src/ff.c **** 
 869:./Libraries/FatFs/Src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 1364              		.loc 1 869 9
 1365 0008 0023     		movs	r3, #0
 1366 000a FB60     		str	r3, [r7, #12]
 1367              		.loc 1 869 2
 1368 000c 10E0     		b	.L79
 1369              	.L81:
 870:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1370              		.loc 1 870 15
 1371 000e 0D4A     		ldr	r2, .L82
 1372 0010 FB68     		ldr	r3, [r7, #12]
 1373 0012 1B01     		lsls	r3, r3, #4
 1374 0014 1344     		add	r3, r3, r2
 1375 0016 1B68     		ldr	r3, [r3]
 1376              		.loc 1 870 6
 1377 0018 7A68     		ldr	r2, [r7, #4]
 1378 001a 9A42     		cmp	r2, r3
 1379 001c 05D1     		bne	.L80
 1380              		.loc 1 870 38 discriminator 1
 1381 001e 094A     		ldr	r2, .L82
 1382 0020 FB68     		ldr	r3, [r7, #12]
 1383 0022 1B01     		lsls	r3, r3, #4
 1384 0024 1344     		add	r3, r3, r2
 1385 0026 0022     		movs	r2, #0
 1386 0028 1A60     		str	r2, [r3]
 1387              	.L80:
 869:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1388              		.loc 1 869 29 discriminator 2
 1389 002a FB68     		ldr	r3, [r7, #12]
 1390 002c 0133     		adds	r3, r3, #1
 1391 002e FB60     		str	r3, [r7, #12]
 1392              	.L79:
 869:./Libraries/FatFs/Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1393              		.loc 1 869 2 discriminator 1
 1394 0030 FB68     		ldr	r3, [r7, #12]
 1395 0032 012B     		cmp	r3, #1
 1396 0034 EBD9     		bls	.L81
 871:./Libraries/FatFs/Src/ff.c **** 	}
 872:./Libraries/FatFs/Src/ff.c **** }
 1397              		.loc 1 872 1
 1398 0036 00BF     		nop
 1399 0038 00BF     		nop
 1400 003a 1437     		adds	r7, r7, #20
 1401              	.LCFI85:
 1402              		.cfi_def_cfa_offset 4
 1403 003c BD46     		mov	sp, r7
 1404              	.LCFI86:
 1405              		.cfi_def_cfa_register 13
 1406              		@ sp needed
 1407 003e 5DF8047B 		ldr	r7, [sp], #4
 1408              	.LCFI87:
ARM GAS  /tmp/cceCRWeb.s 			page 41


 1409              		.cfi_restore 7
 1410              		.cfi_def_cfa_offset 0
 1411 0042 7047     		bx	lr
 1412              	.L83:
 1413              		.align	2
 1414              	.L82:
 1415 0044 00000000 		.word	Files
 1416              		.cfi_endproc
 1417              	.LFE349:
 1419              		.section	.text.sync_window,"ax",%progbits
 1420              		.align	1
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu fpv5-d16
 1426              	sync_window:
 1427              	.LFB350:
 873:./Libraries/FatFs/Src/ff.c **** 
 874:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_LOCK != 0 */
 875:./Libraries/FatFs/Src/ff.c **** 
 876:./Libraries/FatFs/Src/ff.c **** 
 877:./Libraries/FatFs/Src/ff.c **** 
 878:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 879:./Libraries/FatFs/Src/ff.c **** /* Move/Flush disk access window in the file system object               */
 880:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 881:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
 882:./Libraries/FatFs/Src/ff.c **** static
 883:./Libraries/FatFs/Src/ff.c **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 884:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs			/* File system object */
 885:./Libraries/FatFs/Src/ff.c **** )
 886:./Libraries/FatFs/Src/ff.c **** {
 1428              		.loc 1 886 1
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 24
 1431              		@ frame_needed = 1, uses_anonymous_args = 0
 1432 0000 80B5     		push	{r7, lr}
 1433              	.LCFI88:
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437 0002 86B0     		sub	sp, sp, #24
 1438              	.LCFI89:
 1439              		.cfi_def_cfa_offset 32
 1440 0004 00AF     		add	r7, sp, #0
 1441              	.LCFI90:
 1442              		.cfi_def_cfa_register 7
 1443 0006 7860     		str	r0, [r7, #4]
 887:./Libraries/FatFs/Src/ff.c **** 	DWORD wsect;
 888:./Libraries/FatFs/Src/ff.c **** 	UINT nf;
 889:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_OK;
 1444              		.loc 1 889 10
 1445 0008 0023     		movs	r3, #0
 1446 000a FB73     		strb	r3, [r7, #15]
 890:./Libraries/FatFs/Src/ff.c **** 
 891:./Libraries/FatFs/Src/ff.c **** 
 892:./Libraries/FatFs/Src/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 1447              		.loc 1 892 8
ARM GAS  /tmp/cceCRWeb.s 			page 42


 1448 000c 7B68     		ldr	r3, [r7, #4]
 1449 000e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1450              		.loc 1 892 5
 1451 0010 002B     		cmp	r3, #0
 1452 0012 34D0     		beq	.L85
 893:./Libraries/FatFs/Src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1453              		.loc 1 893 9
 1454 0014 7B68     		ldr	r3, [r7, #4]
 1455 0016 1B6B     		ldr	r3, [r3, #48]
 1456 0018 7B61     		str	r3, [r7, #20]
 894:./Libraries/FatFs/Src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1457              		.loc 1 894 7
 1458 001a 7B68     		ldr	r3, [r7, #4]
 1459 001c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1460              		.loc 1 894 29
 1461 001e 7B68     		ldr	r3, [r7, #4]
 1462 0020 03F13401 		add	r1, r3, #52
 1463              		.loc 1 894 7
 1464 0024 0123     		movs	r3, #1
 1465 0026 7A69     		ldr	r2, [r7, #20]
 1466 0028 FFF7FEFF 		bl	disk_write
 1467 002c 0346     		mov	r3, r0
 1468              		.loc 1 894 6
 1469 002e 002B     		cmp	r3, #0
 1470 0030 02D0     		beq	.L86
 895:./Libraries/FatFs/Src/ff.c **** 			res = FR_DISK_ERR;
 1471              		.loc 1 895 8
 1472 0032 0123     		movs	r3, #1
 1473 0034 FB73     		strb	r3, [r7, #15]
 1474 0036 22E0     		b	.L85
 1475              	.L86:
 896:./Libraries/FatFs/Src/ff.c **** 		} else {
 897:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 0;
 1476              		.loc 1 897 14
 1477 0038 7B68     		ldr	r3, [r7, #4]
 1478 003a 0022     		movs	r2, #0
 1479 003c DA70     		strb	r2, [r3, #3]
 898:./Libraries/FatFs/Src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1480              		.loc 1 898 18
 1481 003e 7B68     		ldr	r3, [r7, #4]
 1482 0040 5B6A     		ldr	r3, [r3, #36]
 1483              		.loc 1 898 14
 1484 0042 7A69     		ldr	r2, [r7, #20]
 1485 0044 D21A     		subs	r2, r2, r3
 1486              		.loc 1 898 32
 1487 0046 7B68     		ldr	r3, [r7, #4]
 1488 0048 DB69     		ldr	r3, [r3, #28]
 1489              		.loc 1 898 7
 1490 004a 9A42     		cmp	r2, r3
 1491 004c 17D2     		bcs	.L85
 899:./Libraries/FatFs/Src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1492              		.loc 1 899 17
 1493 004e 7B68     		ldr	r3, [r7, #4]
 1494 0050 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1495              		.loc 1 899 13
 1496 0052 3B61     		str	r3, [r7, #16]
 1497              		.loc 1 899 5
ARM GAS  /tmp/cceCRWeb.s 			page 43


 1498 0054 10E0     		b	.L87
 1499              	.L88:
 900:./Libraries/FatFs/Src/ff.c **** 					wsect += fs->fsize;
 1500              		.loc 1 900 17 discriminator 3
 1501 0056 7B68     		ldr	r3, [r7, #4]
 1502 0058 DB69     		ldr	r3, [r3, #28]
 1503              		.loc 1 900 12 discriminator 3
 1504 005a 7A69     		ldr	r2, [r7, #20]
 1505 005c 1344     		add	r3, r3, r2
 1506 005e 7B61     		str	r3, [r7, #20]
 901:./Libraries/FatFs/Src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1507              		.loc 1 901 6 discriminator 3
 1508 0060 7B68     		ldr	r3, [r7, #4]
 1509 0062 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1510              		.loc 1 901 28 discriminator 3
 1511 0064 7B68     		ldr	r3, [r7, #4]
 1512 0066 03F13401 		add	r1, r3, #52
 1513              		.loc 1 901 6 discriminator 3
 1514 006a 0123     		movs	r3, #1
 1515 006c 7A69     		ldr	r2, [r7, #20]
 1516 006e FFF7FEFF 		bl	disk_write
 899:./Libraries/FatFs/Src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1517              		.loc 1 899 38 discriminator 3
 1518 0072 3B69     		ldr	r3, [r7, #16]
 1519 0074 013B     		subs	r3, r3, #1
 1520 0076 3B61     		str	r3, [r7, #16]
 1521              	.L87:
 899:./Libraries/FatFs/Src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1522              		.loc 1 899 5 discriminator 1
 1523 0078 3B69     		ldr	r3, [r7, #16]
 1524 007a 012B     		cmp	r3, #1
 1525 007c EBD8     		bhi	.L88
 1526              	.L85:
 902:./Libraries/FatFs/Src/ff.c **** 				}
 903:./Libraries/FatFs/Src/ff.c **** 			}
 904:./Libraries/FatFs/Src/ff.c **** 		}
 905:./Libraries/FatFs/Src/ff.c **** 	}
 906:./Libraries/FatFs/Src/ff.c **** 	return res;
 1527              		.loc 1 906 9
 1528 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 907:./Libraries/FatFs/Src/ff.c **** }
 1529              		.loc 1 907 1
 1530 0080 1846     		mov	r0, r3
 1531 0082 1837     		adds	r7, r7, #24
 1532              	.LCFI91:
 1533              		.cfi_def_cfa_offset 8
 1534 0084 BD46     		mov	sp, r7
 1535              	.LCFI92:
 1536              		.cfi_def_cfa_register 13
 1537              		@ sp needed
 1538 0086 80BD     		pop	{r7, pc}
 1539              		.cfi_endproc
 1540              	.LFE350:
 1542              		.section	.text.move_window,"ax",%progbits
 1543              		.align	1
 1544              		.syntax unified
 1545              		.thumb
ARM GAS  /tmp/cceCRWeb.s 			page 44


 1546              		.thumb_func
 1547              		.fpu fpv5-d16
 1549              	move_window:
 1550              	.LFB351:
 908:./Libraries/FatFs/Src/ff.c **** #endif
 909:./Libraries/FatFs/Src/ff.c **** 
 910:./Libraries/FatFs/Src/ff.c **** 
 911:./Libraries/FatFs/Src/ff.c **** static
 912:./Libraries/FatFs/Src/ff.c **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 913:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,			/* File system object */
 914:./Libraries/FatFs/Src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 915:./Libraries/FatFs/Src/ff.c **** )
 916:./Libraries/FatFs/Src/ff.c **** {
 1551              		.loc 1 916 1
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 16
 1554              		@ frame_needed = 1, uses_anonymous_args = 0
 1555 0000 80B5     		push	{r7, lr}
 1556              	.LCFI93:
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 7, -8
 1559              		.cfi_offset 14, -4
 1560 0002 84B0     		sub	sp, sp, #16
 1561              	.LCFI94:
 1562              		.cfi_def_cfa_offset 24
 1563 0004 00AF     		add	r7, sp, #0
 1564              	.LCFI95:
 1565              		.cfi_def_cfa_register 7
 1566 0006 7860     		str	r0, [r7, #4]
 1567 0008 3960     		str	r1, [r7]
 917:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_OK;
 1568              		.loc 1 917 10
 1569 000a 0023     		movs	r3, #0
 1570 000c FB73     		strb	r3, [r7, #15]
 918:./Libraries/FatFs/Src/ff.c **** 
 919:./Libraries/FatFs/Src/ff.c **** 
 920:./Libraries/FatFs/Src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 1571              		.loc 1 920 18
 1572 000e 7B68     		ldr	r3, [r7, #4]
 1573 0010 1B6B     		ldr	r3, [r3, #48]
 1574              		.loc 1 920 5
 1575 0012 3A68     		ldr	r2, [r7]
 1576 0014 9A42     		cmp	r2, r3
 1577 0016 1BD0     		beq	.L91
 921:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
 922:./Libraries/FatFs/Src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 1578              		.loc 1 922 9
 1579 0018 7868     		ldr	r0, [r7, #4]
 1580 001a FFF7FEFF 		bl	sync_window
 1581 001e 0346     		mov	r3, r0
 1582 0020 FB73     		strb	r3, [r7, #15]
 923:./Libraries/FatFs/Src/ff.c **** #endif
 924:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 1583              		.loc 1 924 6
 1584 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1585 0024 002B     		cmp	r3, #0
 1586 0026 13D1     		bne	.L91
ARM GAS  /tmp/cceCRWeb.s 			page 45


 925:./Libraries/FatFs/Src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 1587              		.loc 1 925 8
 1588 0028 7B68     		ldr	r3, [r7, #4]
 1589 002a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1590              		.loc 1 925 29
 1591 002c 7B68     		ldr	r3, [r7, #4]
 1592 002e 03F13401 		add	r1, r3, #52
 1593              		.loc 1 925 8
 1594 0032 0123     		movs	r3, #1
 1595 0034 3A68     		ldr	r2, [r7]
 1596 0036 FFF7FEFF 		bl	disk_read
 1597 003a 0346     		mov	r3, r0
 1598              		.loc 1 925 7
 1599 003c 002B     		cmp	r3, #0
 1600 003e 04D0     		beq	.L92
 926:./Libraries/FatFs/Src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1601              		.loc 1 926 12
 1602 0040 4FF0FF33 		mov	r3, #-1
 1603 0044 3B60     		str	r3, [r7]
 927:./Libraries/FatFs/Src/ff.c **** 				res = FR_DISK_ERR;
 1604              		.loc 1 927 9
 1605 0046 0123     		movs	r3, #1
 1606 0048 FB73     		strb	r3, [r7, #15]
 1607              	.L92:
 928:./Libraries/FatFs/Src/ff.c **** 			}
 929:./Libraries/FatFs/Src/ff.c **** 			fs->winsect = sector;
 1608              		.loc 1 929 16
 1609 004a 7B68     		ldr	r3, [r7, #4]
 1610 004c 3A68     		ldr	r2, [r7]
 1611 004e 1A63     		str	r2, [r3, #48]
 1612              	.L91:
 930:./Libraries/FatFs/Src/ff.c **** 		}
 931:./Libraries/FatFs/Src/ff.c **** 	}
 932:./Libraries/FatFs/Src/ff.c **** 	return res;
 1613              		.loc 1 932 9
 1614 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 933:./Libraries/FatFs/Src/ff.c **** }
 1615              		.loc 1 933 1
 1616 0052 1846     		mov	r0, r3
 1617 0054 1037     		adds	r7, r7, #16
 1618              	.LCFI96:
 1619              		.cfi_def_cfa_offset 8
 1620 0056 BD46     		mov	sp, r7
 1621              	.LCFI97:
 1622              		.cfi_def_cfa_register 13
 1623              		@ sp needed
 1624 0058 80BD     		pop	{r7, pc}
 1625              		.cfi_endproc
 1626              	.LFE351:
 1628              		.section	.text.sync_fs,"ax",%progbits
 1629              		.align	1
 1630              		.syntax unified
 1631              		.thumb
 1632              		.thumb_func
 1633              		.fpu fpv5-d16
 1635              	sync_fs:
 1636              	.LFB352:
ARM GAS  /tmp/cceCRWeb.s 			page 46


 934:./Libraries/FatFs/Src/ff.c **** 
 935:./Libraries/FatFs/Src/ff.c **** 
 936:./Libraries/FatFs/Src/ff.c **** 
 937:./Libraries/FatFs/Src/ff.c **** 
 938:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
 939:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 940:./Libraries/FatFs/Src/ff.c **** /* Synchronize file system and strage device                             */
 941:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 942:./Libraries/FatFs/Src/ff.c **** 
 943:./Libraries/FatFs/Src/ff.c **** static
 944:./Libraries/FatFs/Src/ff.c **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 945:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs		/* File system object */
 946:./Libraries/FatFs/Src/ff.c **** )
 947:./Libraries/FatFs/Src/ff.c **** {
 1637              		.loc 1 947 1
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 16
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641 0000 80B5     		push	{r7, lr}
 1642              	.LCFI98:
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
 1646 0002 84B0     		sub	sp, sp, #16
 1647              	.LCFI99:
 1648              		.cfi_def_cfa_offset 24
 1649 0004 00AF     		add	r7, sp, #0
 1650              	.LCFI100:
 1651              		.cfi_def_cfa_register 7
 1652 0006 7860     		str	r0, [r7, #4]
 948:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
 949:./Libraries/FatFs/Src/ff.c **** 
 950:./Libraries/FatFs/Src/ff.c **** 
 951:./Libraries/FatFs/Src/ff.c **** 	res = sync_window(fs);
 1653              		.loc 1 951 8
 1654 0008 7868     		ldr	r0, [r7, #4]
 1655 000a FFF7FEFF 		bl	sync_window
 1656 000e 0346     		mov	r3, r0
 1657 0010 FB73     		strb	r3, [r7, #15]
 952:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 1658              		.loc 1 952 5
 1659 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1660 0014 002B     		cmp	r3, #0
 1661 0016 58D1     		bne	.L95
 953:./Libraries/FatFs/Src/ff.c **** 		/* Update FSInfo sector if needed */
 954:./Libraries/FatFs/Src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 1662              		.loc 1 954 9
 1663 0018 7B68     		ldr	r3, [r7, #4]
 1664 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1665              		.loc 1 954 6
 1666 001c 032B     		cmp	r3, #3
 1667 001e 48D1     		bne	.L96
 1668              		.loc 1 954 36 discriminator 1
 1669 0020 7B68     		ldr	r3, [r7, #4]
 1670 0022 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1671              		.loc 1 954 31 discriminator 1
 1672 0024 012B     		cmp	r3, #1
ARM GAS  /tmp/cceCRWeb.s 			page 47


 1673 0026 44D1     		bne	.L96
 955:./Libraries/FatFs/Src/ff.c **** 			/* Create FSInfo structure */
 956:./Libraries/FatFs/Src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 1674              		.loc 1 956 14
 1675 0028 7B68     		ldr	r3, [r7, #4]
 1676 002a 3433     		adds	r3, r3, #52
 1677              		.loc 1 956 4
 1678 002c 4FF40072 		mov	r2, #512
 1679 0030 0021     		movs	r1, #0
 1680 0032 1846     		mov	r0, r3
 1681 0034 FFF7FEFF 		bl	mem_set
 957:./Libraries/FatFs/Src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 1682              		.loc 1 957 12
 1683 0038 7B68     		ldr	r3, [r7, #4]
 1684 003a 3433     		adds	r3, r3, #52
 1685              		.loc 1 957 4
 1686 003c 03F5FF73 		add	r3, r3, #510
 1687 0040 4AF65521 		movw	r1, #43605
 1688 0044 1846     		mov	r0, r3
 1689 0046 FFF7FEFF 		bl	st_word
 958:./Libraries/FatFs/Src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 1690              		.loc 1 958 13
 1691 004a 7B68     		ldr	r3, [r7, #4]
 1692 004c 3433     		adds	r3, r3, #52
 1693              		.loc 1 958 4
 1694 004e 2149     		ldr	r1, .L98
 1695 0050 1846     		mov	r0, r3
 1696 0052 FFF7FEFF 		bl	st_dword
 959:./Libraries/FatFs/Src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 1697              		.loc 1 959 13
 1698 0056 7B68     		ldr	r3, [r7, #4]
 1699 0058 3433     		adds	r3, r3, #52
 1700              		.loc 1 959 4
 1701 005a 03F5F273 		add	r3, r3, #484
 1702 005e 1E49     		ldr	r1, .L98+4
 1703 0060 1846     		mov	r0, r3
 1704 0062 FFF7FEFF 		bl	st_dword
 960:./Libraries/FatFs/Src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 1705              		.loc 1 960 13
 1706 0066 7B68     		ldr	r3, [r7, #4]
 1707 0068 3433     		adds	r3, r3, #52
 1708              		.loc 1 960 4
 1709 006a 03F5F472 		add	r2, r3, #488
 1710 006e 7B68     		ldr	r3, [r7, #4]
 1711 0070 5B69     		ldr	r3, [r3, #20]
 1712 0072 1946     		mov	r1, r3
 1713 0074 1046     		mov	r0, r2
 1714 0076 FFF7FEFF 		bl	st_dword
 961:./Libraries/FatFs/Src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 1715              		.loc 1 961 13
 1716 007a 7B68     		ldr	r3, [r7, #4]
 1717 007c 3433     		adds	r3, r3, #52
 1718              		.loc 1 961 4
 1719 007e 03F5F672 		add	r2, r3, #492
 1720 0082 7B68     		ldr	r3, [r7, #4]
 1721 0084 1B69     		ldr	r3, [r3, #16]
 1722 0086 1946     		mov	r1, r3
ARM GAS  /tmp/cceCRWeb.s 			page 48


 1723 0088 1046     		mov	r0, r2
 1724 008a FFF7FEFF 		bl	st_dword
 962:./Libraries/FatFs/Src/ff.c **** 			/* Write it into the FSInfo sector */
 963:./Libraries/FatFs/Src/ff.c **** 			fs->winsect = fs->volbase + 1;
 1725              		.loc 1 963 20
 1726 008e 7B68     		ldr	r3, [r7, #4]
 1727 0090 1B6A     		ldr	r3, [r3, #32]
 1728              		.loc 1 963 30
 1729 0092 5A1C     		adds	r2, r3, #1
 1730              		.loc 1 963 16
 1731 0094 7B68     		ldr	r3, [r7, #4]
 1732 0096 1A63     		str	r2, [r3, #48]
 964:./Libraries/FatFs/Src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 1733              		.loc 1 964 4
 1734 0098 7B68     		ldr	r3, [r7, #4]
 1735 009a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1736              		.loc 1 964 26
 1737 009c 7B68     		ldr	r3, [r7, #4]
 1738 009e 03F13401 		add	r1, r3, #52
 1739              		.loc 1 964 4
 1740 00a2 7B68     		ldr	r3, [r7, #4]
 1741 00a4 1A6B     		ldr	r2, [r3, #48]
 1742 00a6 0123     		movs	r3, #1
 1743 00a8 FFF7FEFF 		bl	disk_write
 965:./Libraries/FatFs/Src/ff.c **** 			fs->fsi_flag = 0;
 1744              		.loc 1 965 17
 1745 00ac 7B68     		ldr	r3, [r7, #4]
 1746 00ae 0022     		movs	r2, #0
 1747 00b0 1A71     		strb	r2, [r3, #4]
 1748              	.L96:
 966:./Libraries/FatFs/Src/ff.c **** 		}
 967:./Libraries/FatFs/Src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 968:./Libraries/FatFs/Src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 1749              		.loc 1 968 7
 1750 00b2 7B68     		ldr	r3, [r7, #4]
 1751 00b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1752 00b6 0022     		movs	r2, #0
 1753 00b8 0021     		movs	r1, #0
 1754 00ba 1846     		mov	r0, r3
 1755 00bc FFF7FEFF 		bl	disk_ioctl
 1756 00c0 0346     		mov	r3, r0
 1757              		.loc 1 968 6
 1758 00c2 002B     		cmp	r3, #0
 1759 00c4 01D0     		beq	.L95
 1760              		.loc 1 968 56 discriminator 1
 1761 00c6 0123     		movs	r3, #1
 1762 00c8 FB73     		strb	r3, [r7, #15]
 1763              	.L95:
 969:./Libraries/FatFs/Src/ff.c **** 	}
 970:./Libraries/FatFs/Src/ff.c **** 
 971:./Libraries/FatFs/Src/ff.c **** 	return res;
 1764              		.loc 1 971 9
 1765 00ca FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 972:./Libraries/FatFs/Src/ff.c **** }
 1766              		.loc 1 972 1
 1767 00cc 1846     		mov	r0, r3
 1768 00ce 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cceCRWeb.s 			page 49


 1769              	.LCFI101:
 1770              		.cfi_def_cfa_offset 8
 1771 00d0 BD46     		mov	sp, r7
 1772              	.LCFI102:
 1773              		.cfi_def_cfa_register 13
 1774              		@ sp needed
 1775 00d2 80BD     		pop	{r7, pc}
 1776              	.L99:
 1777              		.align	2
 1778              	.L98:
 1779 00d4 52526141 		.word	1096897106
 1780 00d8 72724161 		.word	1631679090
 1781              		.cfi_endproc
 1782              	.LFE352:
 1784              		.section	.text.clust2sect,"ax",%progbits
 1785              		.align	1
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu fpv5-d16
 1791              	clust2sect:
 1792              	.LFB353:
 973:./Libraries/FatFs/Src/ff.c **** 
 974:./Libraries/FatFs/Src/ff.c **** #endif
 975:./Libraries/FatFs/Src/ff.c **** 
 976:./Libraries/FatFs/Src/ff.c **** 
 977:./Libraries/FatFs/Src/ff.c **** 
 978:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 979:./Libraries/FatFs/Src/ff.c **** /* Get sector# from cluster#                                             */
 980:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 981:./Libraries/FatFs/Src/ff.c **** 
 982:./Libraries/FatFs/Src/ff.c **** static
 983:./Libraries/FatFs/Src/ff.c **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 984:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,		/* File system object */
 985:./Libraries/FatFs/Src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 986:./Libraries/FatFs/Src/ff.c **** )
 987:./Libraries/FatFs/Src/ff.c **** {
 1793              		.loc 1 987 1
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 8
 1796              		@ frame_needed = 1, uses_anonymous_args = 0
 1797              		@ link register save eliminated.
 1798 0000 80B4     		push	{r7}
 1799              	.LCFI103:
 1800              		.cfi_def_cfa_offset 4
 1801              		.cfi_offset 7, -4
 1802 0002 83B0     		sub	sp, sp, #12
 1803              	.LCFI104:
 1804              		.cfi_def_cfa_offset 16
 1805 0004 00AF     		add	r7, sp, #0
 1806              	.LCFI105:
 1807              		.cfi_def_cfa_register 7
 1808 0006 7860     		str	r0, [r7, #4]
 1809 0008 3960     		str	r1, [r7]
 988:./Libraries/FatFs/Src/ff.c **** 	clst -= 2;
 1810              		.loc 1 988 7
 1811 000a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cceCRWeb.s 			page 50


 1812 000c 023B     		subs	r3, r3, #2
 1813 000e 3B60     		str	r3, [r7]
 989:./Libraries/FatFs/Src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 1814              		.loc 1 989 16
 1815 0010 7B68     		ldr	r3, [r7, #4]
 1816 0012 9B69     		ldr	r3, [r3, #24]
 1817              		.loc 1 989 27
 1818 0014 023B     		subs	r3, r3, #2
 1819              		.loc 1 989 5
 1820 0016 3A68     		ldr	r2, [r7]
 1821 0018 9A42     		cmp	r2, r3
 1822 001a 01D3     		bcc	.L101
 1823              		.loc 1 989 39 discriminator 1
 1824 001c 0023     		movs	r3, #0
 1825 001e 08E0     		b	.L102
 1826              	.L101:
 990:./Libraries/FatFs/Src/ff.c **** 	return clst * fs->csize + fs->database;
 1827              		.loc 1 990 18
 1828 0020 7B68     		ldr	r3, [r7, #4]
 1829 0022 5B89     		ldrh	r3, [r3, #10]
 1830 0024 1A46     		mov	r2, r3
 1831              		.loc 1 990 14
 1832 0026 3B68     		ldr	r3, [r7]
 1833 0028 03FB02F2 		mul	r2, r3, r2
 1834              		.loc 1 990 30
 1835 002c 7B68     		ldr	r3, [r7, #4]
 1836 002e DB6A     		ldr	r3, [r3, #44]
 1837              		.loc 1 990 26
 1838 0030 1344     		add	r3, r3, r2
 1839              	.L102:
 991:./Libraries/FatFs/Src/ff.c **** }
 1840              		.loc 1 991 1
 1841 0032 1846     		mov	r0, r3
 1842 0034 0C37     		adds	r7, r7, #12
 1843              	.LCFI106:
 1844              		.cfi_def_cfa_offset 4
 1845 0036 BD46     		mov	sp, r7
 1846              	.LCFI107:
 1847              		.cfi_def_cfa_register 13
 1848              		@ sp needed
 1849 0038 5DF8047B 		ldr	r7, [sp], #4
 1850              	.LCFI108:
 1851              		.cfi_restore 7
 1852              		.cfi_def_cfa_offset 0
 1853 003c 7047     		bx	lr
 1854              		.cfi_endproc
 1855              	.LFE353:
 1857              		.section	.text.get_fat,"ax",%progbits
 1858              		.align	1
 1859              		.syntax unified
 1860              		.thumb
 1861              		.thumb_func
 1862              		.fpu fpv5-d16
 1864              	get_fat:
 1865              	.LFB354:
 992:./Libraries/FatFs/Src/ff.c **** 
 993:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 51


 994:./Libraries/FatFs/Src/ff.c **** 
 995:./Libraries/FatFs/Src/ff.c **** 
 996:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 997:./Libraries/FatFs/Src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 998:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
 999:./Libraries/FatFs/Src/ff.c **** 
1000:./Libraries/FatFs/Src/ff.c **** static
1001:./Libraries/FatFs/Src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1002:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj,	/* Corresponding object */
1003:./Libraries/FatFs/Src/ff.c **** 	DWORD clst	/* Cluster number to get the value */
1004:./Libraries/FatFs/Src/ff.c **** )
1005:./Libraries/FatFs/Src/ff.c **** {
 1866              		.loc 1 1005 1
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 24
 1869              		@ frame_needed = 1, uses_anonymous_args = 0
 1870 0000 80B5     		push	{r7, lr}
 1871              	.LCFI109:
 1872              		.cfi_def_cfa_offset 8
 1873              		.cfi_offset 7, -8
 1874              		.cfi_offset 14, -4
 1875 0002 86B0     		sub	sp, sp, #24
 1876              	.LCFI110:
 1877              		.cfi_def_cfa_offset 32
 1878 0004 00AF     		add	r7, sp, #0
 1879              	.LCFI111:
 1880              		.cfi_def_cfa_register 7
 1881 0006 7860     		str	r0, [r7, #4]
 1882 0008 3960     		str	r1, [r7]
1006:./Libraries/FatFs/Src/ff.c **** 	UINT wc, bc;
1007:./Libraries/FatFs/Src/ff.c **** 	DWORD val;
1008:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = obj->fs;
 1883              		.loc 1 1008 9
 1884 000a 7B68     		ldr	r3, [r7, #4]
 1885 000c 1B68     		ldr	r3, [r3]
 1886 000e 3B61     		str	r3, [r7, #16]
1009:./Libraries/FatFs/Src/ff.c **** 
1010:./Libraries/FatFs/Src/ff.c **** 
1011:./Libraries/FatFs/Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 1887              		.loc 1 1011 5
 1888 0010 3B68     		ldr	r3, [r7]
 1889 0012 012B     		cmp	r3, #1
 1890 0014 04D9     		bls	.L104
 1891              		.loc 1 1011 28 discriminator 1
 1892 0016 3B69     		ldr	r3, [r7, #16]
 1893 0018 9B69     		ldr	r3, [r3, #24]
 1894              		.loc 1 1011 15 discriminator 1
 1895 001a 3A68     		ldr	r2, [r7]
 1896 001c 9A42     		cmp	r2, r3
 1897 001e 02D3     		bcc	.L105
 1898              	.L104:
1012:./Libraries/FatFs/Src/ff.c **** 		val = 1;	/* Internal error */
 1899              		.loc 1 1012 7
 1900 0020 0123     		movs	r3, #1
 1901 0022 7B61     		str	r3, [r7, #20]
 1902 0024 8FE0     		b	.L106
 1903              	.L105:
ARM GAS  /tmp/cceCRWeb.s 			page 52


1013:./Libraries/FatFs/Src/ff.c **** 
1014:./Libraries/FatFs/Src/ff.c **** 	} else {
1015:./Libraries/FatFs/Src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 1904              		.loc 1 1015 7
 1905 0026 4FF0FF33 		mov	r3, #-1
 1906 002a 7B61     		str	r3, [r7, #20]
1016:./Libraries/FatFs/Src/ff.c **** 
1017:./Libraries/FatFs/Src/ff.c **** 		switch (fs->fs_type) {
 1907              		.loc 1 1017 13
 1908 002c 3B69     		ldr	r3, [r7, #16]
 1909 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1910              		.loc 1 1017 3
 1911 0030 032B     		cmp	r3, #3
 1912 0032 62D0     		beq	.L107
 1913 0034 032B     		cmp	r3, #3
 1914 0036 7CDC     		bgt	.L108
 1915 0038 012B     		cmp	r3, #1
 1916 003a 02D0     		beq	.L109
 1917 003c 022B     		cmp	r3, #2
 1918 003e 42D0     		beq	.L110
 1919 0040 77E0     		b	.L108
 1920              	.L109:
1018:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT12 :
1019:./Libraries/FatFs/Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1921              		.loc 1 1019 7
 1922 0042 3B68     		ldr	r3, [r7]
 1923 0044 FB60     		str	r3, [r7, #12]
 1924              		.loc 1 1019 30
 1925 0046 FB68     		ldr	r3, [r7, #12]
 1926 0048 5B08     		lsrs	r3, r3, #1
 1927              		.loc 1 1019 24
 1928 004a FA68     		ldr	r2, [r7, #12]
 1929 004c 1344     		add	r3, r3, r2
 1930 004e FB60     		str	r3, [r7, #12]
1020:./Libraries/FatFs/Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1931              		.loc 1 1020 26
 1932 0050 3B69     		ldr	r3, [r7, #16]
 1933 0052 5A6A     		ldr	r2, [r3, #36]
 1934              		.loc 1 1020 42
 1935 0054 FB68     		ldr	r3, [r7, #12]
 1936 0056 5B0A     		lsrs	r3, r3, #9
 1937              		.loc 1 1020 8
 1938 0058 1344     		add	r3, r3, r2
 1939 005a 1946     		mov	r1, r3
 1940 005c 3869     		ldr	r0, [r7, #16]
 1941 005e FFF7FEFF 		bl	move_window
 1942 0062 0346     		mov	r3, r0
 1943              		.loc 1 1020 7
 1944 0064 002B     		cmp	r3, #0
 1945 0066 67D1     		bne	.L118
1021:./Libraries/FatFs/Src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 1946              		.loc 1 1021 19
 1947 0068 FB68     		ldr	r3, [r7, #12]
 1948 006a 5A1C     		adds	r2, r3, #1
 1949 006c FA60     		str	r2, [r7, #12]
 1950              		.loc 1 1021 22
 1951 006e C3F30803 		ubfx	r3, r3, #0, #9
ARM GAS  /tmp/cceCRWeb.s 			page 53


 1952              		.loc 1 1021 16
 1953 0072 3A69     		ldr	r2, [r7, #16]
 1954 0074 1344     		add	r3, r3, r2
 1955 0076 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1956              		.loc 1 1021 7
 1957 007a BB60     		str	r3, [r7, #8]
1022:./Libraries/FatFs/Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1958              		.loc 1 1022 26
 1959 007c 3B69     		ldr	r3, [r7, #16]
 1960 007e 5A6A     		ldr	r2, [r3, #36]
 1961              		.loc 1 1022 42
 1962 0080 FB68     		ldr	r3, [r7, #12]
 1963 0082 5B0A     		lsrs	r3, r3, #9
 1964              		.loc 1 1022 8
 1965 0084 1344     		add	r3, r3, r2
 1966 0086 1946     		mov	r1, r3
 1967 0088 3869     		ldr	r0, [r7, #16]
 1968 008a FFF7FEFF 		bl	move_window
 1969 008e 0346     		mov	r3, r0
 1970              		.loc 1 1022 7
 1971 0090 002B     		cmp	r3, #0
 1972 0092 53D1     		bne	.L119
1023:./Libraries/FatFs/Src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 1973              		.loc 1 1023 21
 1974 0094 FB68     		ldr	r3, [r7, #12]
 1975 0096 C3F30803 		ubfx	r3, r3, #0, #9
 1976              		.loc 1 1023 17
 1977 009a 3A69     		ldr	r2, [r7, #16]
 1978 009c 1344     		add	r3, r3, r2
 1979 009e 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1980              		.loc 1 1023 31
 1981 00a2 1B02     		lsls	r3, r3, #8
 1982 00a4 1A46     		mov	r2, r3
 1983              		.loc 1 1023 7
 1984 00a6 BB68     		ldr	r3, [r7, #8]
 1985 00a8 1343     		orrs	r3, r3, r2
 1986 00aa BB60     		str	r3, [r7, #8]
1024:./Libraries/FatFs/Src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1987              		.loc 1 1024 16
 1988 00ac 3B68     		ldr	r3, [r7]
 1989 00ae 03F00103 		and	r3, r3, #1
 1990              		.loc 1 1024 33
 1991 00b2 002B     		cmp	r3, #0
 1992 00b4 02D0     		beq	.L113
 1993              		.loc 1 1024 33 is_stmt 0 discriminator 1
 1994 00b6 BB68     		ldr	r3, [r7, #8]
 1995 00b8 1B09     		lsrs	r3, r3, #4
 1996 00ba 02E0     		b	.L114
 1997              	.L113:
 1998              		.loc 1 1024 33 discriminator 2
 1999 00bc BB68     		ldr	r3, [r7, #8]
 2000 00be C3F30B03 		ubfx	r3, r3, #0, #12
 2001              	.L114:
 2002              		.loc 1 1024 8 is_stmt 1 discriminator 4
 2003 00c2 7B61     		str	r3, [r7, #20]
1025:./Libraries/FatFs/Src/ff.c **** 			break;
 2004              		.loc 1 1025 4 discriminator 4
ARM GAS  /tmp/cceCRWeb.s 			page 54


 2005 00c4 3FE0     		b	.L106
 2006              	.L110:
1026:./Libraries/FatFs/Src/ff.c **** 
1027:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT16 :
1028:./Libraries/FatFs/Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 2007              		.loc 1 1028 26
 2008 00c6 3B69     		ldr	r3, [r7, #16]
 2009 00c8 5A6A     		ldr	r2, [r3, #36]
 2010              		.loc 1 1028 44
 2011 00ca 3B68     		ldr	r3, [r7]
 2012 00cc 1B0A     		lsrs	r3, r3, #8
 2013              		.loc 1 1028 8
 2014 00ce 1344     		add	r3, r3, r2
 2015 00d0 1946     		mov	r1, r3
 2016 00d2 3869     		ldr	r0, [r7, #16]
 2017 00d4 FFF7FEFF 		bl	move_window
 2018 00d8 0346     		mov	r3, r0
 2019              		.loc 1 1028 7
 2020 00da 002B     		cmp	r3, #0
 2021 00dc 30D1     		bne	.L120
1029:./Libraries/FatFs/Src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2022              		.loc 1 1029 18
 2023 00de 3B69     		ldr	r3, [r7, #16]
 2024 00e0 03F13402 		add	r2, r3, #52
 2025              		.loc 1 1029 33
 2026 00e4 3B68     		ldr	r3, [r7]
 2027 00e6 5B00     		lsls	r3, r3, #1
 2028              		.loc 1 1029 37
 2029 00e8 03F4FF73 		and	r3, r3, #510
 2030              		.loc 1 1029 10
 2031 00ec 1344     		add	r3, r3, r2
 2032 00ee 1846     		mov	r0, r3
 2033 00f0 FFF7FEFF 		bl	ld_word
 2034 00f4 0346     		mov	r3, r0
 2035              		.loc 1 1029 8
 2036 00f6 7B61     		str	r3, [r7, #20]
1030:./Libraries/FatFs/Src/ff.c **** 			break;
 2037              		.loc 1 1030 4
 2038 00f8 25E0     		b	.L106
 2039              	.L107:
1031:./Libraries/FatFs/Src/ff.c **** 
1032:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT32 :
1033:./Libraries/FatFs/Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 2040              		.loc 1 1033 26
 2041 00fa 3B69     		ldr	r3, [r7, #16]
 2042 00fc 5A6A     		ldr	r2, [r3, #36]
 2043              		.loc 1 1033 44
 2044 00fe 3B68     		ldr	r3, [r7]
 2045 0100 DB09     		lsrs	r3, r3, #7
 2046              		.loc 1 1033 8
 2047 0102 1344     		add	r3, r3, r2
 2048 0104 1946     		mov	r1, r3
 2049 0106 3869     		ldr	r0, [r7, #16]
 2050 0108 FFF7FEFF 		bl	move_window
 2051 010c 0346     		mov	r3, r0
 2052              		.loc 1 1033 7
 2053 010e 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 55


 2054 0110 18D1     		bne	.L121
1034:./Libraries/FatFs/Src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2055              		.loc 1 1034 19
 2056 0112 3B69     		ldr	r3, [r7, #16]
 2057 0114 03F13402 		add	r2, r3, #52
 2058              		.loc 1 1034 34
 2059 0118 3B68     		ldr	r3, [r7]
 2060 011a 9B00     		lsls	r3, r3, #2
 2061              		.loc 1 1034 38
 2062 011c 03F4FE73 		and	r3, r3, #508
 2063              		.loc 1 1034 10
 2064 0120 1344     		add	r3, r3, r2
 2065 0122 1846     		mov	r0, r3
 2066 0124 FFF7FEFF 		bl	ld_dword
 2067 0128 0346     		mov	r3, r0
 2068              		.loc 1 1034 8
 2069 012a 23F07043 		bic	r3, r3, #-268435456
 2070 012e 7B61     		str	r3, [r7, #20]
1035:./Libraries/FatFs/Src/ff.c **** 			break;
 2071              		.loc 1 1035 4
 2072 0130 09E0     		b	.L106
 2073              	.L108:
1036:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1037:./Libraries/FatFs/Src/ff.c **** 		case FS_EXFAT :
1038:./Libraries/FatFs/Src/ff.c **** 			if (obj->objsize) {
1039:./Libraries/FatFs/Src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1040:./Libraries/FatFs/Src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1041:./Libraries/FatFs/Src/ff.c **** 
1042:./Libraries/FatFs/Src/ff.c **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1043:./Libraries/FatFs/Src/ff.c **** 					if (cofs <= clen) {
1044:./Libraries/FatFs/Src/ff.c **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1045:./Libraries/FatFs/Src/ff.c **** 						break;
1046:./Libraries/FatFs/Src/ff.c **** 					}
1047:./Libraries/FatFs/Src/ff.c **** 				}
1048:./Libraries/FatFs/Src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1049:./Libraries/FatFs/Src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1050:./Libraries/FatFs/Src/ff.c **** 					break;
1051:./Libraries/FatFs/Src/ff.c **** 				}
1052:./Libraries/FatFs/Src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1053:./Libraries/FatFs/Src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1054:./Libraries/FatFs/Src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1055:./Libraries/FatFs/Src/ff.c **** 					} else {
1056:./Libraries/FatFs/Src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1057:./Libraries/FatFs/Src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1058:./Libraries/FatFs/Src/ff.c **** 					}
1059:./Libraries/FatFs/Src/ff.c **** 					break;
1060:./Libraries/FatFs/Src/ff.c **** 				}
1061:./Libraries/FatFs/Src/ff.c **** 			}
1062:./Libraries/FatFs/Src/ff.c **** 			/* go to default */
1063:./Libraries/FatFs/Src/ff.c **** #endif
1064:./Libraries/FatFs/Src/ff.c **** 		default:
1065:./Libraries/FatFs/Src/ff.c **** 			val = 1;	/* Internal error */
 2074              		.loc 1 1065 8
 2075 0132 0123     		movs	r3, #1
 2076 0134 7B61     		str	r3, [r7, #20]
 2077 0136 06E0     		b	.L106
 2078              	.L118:
ARM GAS  /tmp/cceCRWeb.s 			page 56


1020:./Libraries/FatFs/Src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 2079              		.loc 1 1020 4
 2080 0138 00BF     		nop
 2081 013a 04E0     		b	.L106
 2082              	.L119:
1022:./Libraries/FatFs/Src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 2083              		.loc 1 1022 4
 2084 013c 00BF     		nop
 2085 013e 02E0     		b	.L106
 2086              	.L120:
1028:./Libraries/FatFs/Src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2087              		.loc 1 1028 4
 2088 0140 00BF     		nop
 2089 0142 00E0     		b	.L106
 2090              	.L121:
1033:./Libraries/FatFs/Src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2091              		.loc 1 1033 4
 2092 0144 00BF     		nop
 2093              	.L106:
1066:./Libraries/FatFs/Src/ff.c **** 		}
1067:./Libraries/FatFs/Src/ff.c **** 	}
1068:./Libraries/FatFs/Src/ff.c **** 
1069:./Libraries/FatFs/Src/ff.c **** 	return val;
 2094              		.loc 1 1069 9
 2095 0146 7B69     		ldr	r3, [r7, #20]
1070:./Libraries/FatFs/Src/ff.c **** }
 2096              		.loc 1 1070 1
 2097 0148 1846     		mov	r0, r3
 2098 014a 1837     		adds	r7, r7, #24
 2099              	.LCFI112:
 2100              		.cfi_def_cfa_offset 8
 2101 014c BD46     		mov	sp, r7
 2102              	.LCFI113:
 2103              		.cfi_def_cfa_register 13
 2104              		@ sp needed
 2105 014e 80BD     		pop	{r7, pc}
 2106              		.cfi_endproc
 2107              	.LFE354:
 2109              		.section	.text.put_fat,"ax",%progbits
 2110              		.align	1
 2111              		.syntax unified
 2112              		.thumb
 2113              		.thumb_func
 2114              		.fpu fpv5-d16
 2116              	put_fat:
 2117              	.LFB355:
1071:./Libraries/FatFs/Src/ff.c **** 
1072:./Libraries/FatFs/Src/ff.c **** 
1073:./Libraries/FatFs/Src/ff.c **** 
1074:./Libraries/FatFs/Src/ff.c **** 
1075:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1076:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1077:./Libraries/FatFs/Src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1078:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1079:./Libraries/FatFs/Src/ff.c **** 
1080:./Libraries/FatFs/Src/ff.c **** static
1081:./Libraries/FatFs/Src/ff.c **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
ARM GAS  /tmp/cceCRWeb.s 			page 57


1082:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,		/* Corresponding file system object */
1083:./Libraries/FatFs/Src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1084:./Libraries/FatFs/Src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1085:./Libraries/FatFs/Src/ff.c **** )
1086:./Libraries/FatFs/Src/ff.c **** {
 2118              		.loc 1 1086 1
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 32
 2121              		@ frame_needed = 1, uses_anonymous_args = 0
 2122 0000 90B5     		push	{r4, r7, lr}
 2123              	.LCFI114:
 2124              		.cfi_def_cfa_offset 12
 2125              		.cfi_offset 4, -12
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 89B0     		sub	sp, sp, #36
 2129              	.LCFI115:
 2130              		.cfi_def_cfa_offset 48
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI116:
 2133              		.cfi_def_cfa_register 7
 2134 0006 F860     		str	r0, [r7, #12]
 2135 0008 B960     		str	r1, [r7, #8]
 2136 000a 7A60     		str	r2, [r7, #4]
1087:./Libraries/FatFs/Src/ff.c **** 	UINT bc;
1088:./Libraries/FatFs/Src/ff.c **** 	BYTE *p;
1089:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_INT_ERR;
 2137              		.loc 1 1089 10
 2138 000c 0223     		movs	r3, #2
 2139 000e FB77     		strb	r3, [r7, #31]
1090:./Libraries/FatFs/Src/ff.c **** 
1091:./Libraries/FatFs/Src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 2140              		.loc 1 1091 5
 2141 0010 BB68     		ldr	r3, [r7, #8]
 2142 0012 012B     		cmp	r3, #1
 2143 0014 40F2D280 		bls	.L136
 2144              		.loc 1 1091 28 discriminator 1
 2145 0018 FB68     		ldr	r3, [r7, #12]
 2146 001a 9B69     		ldr	r3, [r3, #24]
 2147              		.loc 1 1091 16 discriminator 1
 2148 001c BA68     		ldr	r2, [r7, #8]
 2149 001e 9A42     		cmp	r2, r3
 2150 0020 80F0CC80 		bcs	.L136
1092:./Libraries/FatFs/Src/ff.c **** 		switch (fs->fs_type) {
 2151              		.loc 1 1092 13
 2152 0024 FB68     		ldr	r3, [r7, #12]
 2153 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2154              		.loc 1 1092 3
 2155 0028 032B     		cmp	r3, #3
 2156 002a 00F09680 		beq	.L124
 2157 002e 032B     		cmp	r3, #3
 2158 0030 00F3CD80 		bgt	.L123
 2159 0034 012B     		cmp	r3, #1
 2160 0036 02D0     		beq	.L125
 2161 0038 022B     		cmp	r3, #2
 2162 003a 6ED0     		beq	.L126
 2163 003c C7E0     		b	.L123
ARM GAS  /tmp/cceCRWeb.s 			page 58


 2164              	.L125:
1093:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
1094:./Libraries/FatFs/Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 2165              		.loc 1 1094 7
 2166 003e BB68     		ldr	r3, [r7, #8]
 2167 0040 BB61     		str	r3, [r7, #24]
 2168              		.loc 1 1094 30
 2169 0042 BB69     		ldr	r3, [r7, #24]
 2170 0044 5B08     		lsrs	r3, r3, #1
 2171              		.loc 1 1094 24
 2172 0046 BA69     		ldr	r2, [r7, #24]
 2173 0048 1344     		add	r3, r3, r2
 2174 004a BB61     		str	r3, [r7, #24]
1095:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2175              		.loc 1 1095 28
 2176 004c FB68     		ldr	r3, [r7, #12]
 2177 004e 5A6A     		ldr	r2, [r3, #36]
 2178              		.loc 1 1095 44
 2179 0050 BB69     		ldr	r3, [r7, #24]
 2180 0052 5B0A     		lsrs	r3, r3, #9
 2181              		.loc 1 1095 10
 2182 0054 1344     		add	r3, r3, r2
 2183 0056 1946     		mov	r1, r3
 2184 0058 F868     		ldr	r0, [r7, #12]
 2185 005a FFF7FEFF 		bl	move_window
 2186 005e 0346     		mov	r3, r0
 2187 0060 FB77     		strb	r3, [r7, #31]
1096:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 2188              		.loc 1 1096 7
 2189 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2190 0064 002B     		cmp	r3, #0
 2191 0066 40F0AB80 		bne	.L137
1097:./Libraries/FatFs/Src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2192              		.loc 1 1097 8
 2193 006a FB68     		ldr	r3, [r7, #12]
 2194 006c 03F13402 		add	r2, r3, #52
 2195              		.loc 1 1097 23
 2196 0070 BB69     		ldr	r3, [r7, #24]
 2197 0072 591C     		adds	r1, r3, #1
 2198 0074 B961     		str	r1, [r7, #24]
 2199 0076 C3F30803 		ubfx	r3, r3, #0, #9
 2200              		.loc 1 1097 6
 2201 007a 1344     		add	r3, r3, r2
 2202 007c 7B61     		str	r3, [r7, #20]
1098:./Libraries/FatFs/Src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2203              		.loc 1 1098 15
 2204 007e BB68     		ldr	r3, [r7, #8]
 2205 0080 03F00103 		and	r3, r3, #1
 2206              		.loc 1 1098 7
 2207 0084 002B     		cmp	r3, #0
 2208 0086 0DD0     		beq	.L128
 2209              		.loc 1 1098 24 discriminator 1
 2210 0088 7B69     		ldr	r3, [r7, #20]
 2211 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2212 008c 5BB2     		sxtb	r3, r3
 2213              		.loc 1 1098 27 discriminator 1
 2214 008e 03F00F03 		and	r3, r3, #15
ARM GAS  /tmp/cceCRWeb.s 			page 59


 2215 0092 5AB2     		sxtb	r2, r3
 2216              		.loc 1 1098 38 discriminator 1
 2217 0094 7B68     		ldr	r3, [r7, #4]
 2218 0096 DBB2     		uxtb	r3, r3
 2219              		.loc 1 1098 48 discriminator 1
 2220 0098 1B01     		lsls	r3, r3, #4
 2221              		.loc 1 1098 35 discriminator 1
 2222 009a 5BB2     		sxtb	r3, r3
 2223 009c 1343     		orrs	r3, r3, r2
 2224 009e 5BB2     		sxtb	r3, r3
 2225              		.loc 1 1098 7 discriminator 1
 2226 00a0 DBB2     		uxtb	r3, r3
 2227 00a2 01E0     		b	.L129
 2228              	.L128:
 2229              		.loc 1 1098 7 is_stmt 0 discriminator 2
 2230 00a4 7B68     		ldr	r3, [r7, #4]
 2231 00a6 DBB2     		uxtb	r3, r3
 2232              	.L129:
 2233              		.loc 1 1098 7 discriminator 4
 2234 00a8 7A69     		ldr	r2, [r7, #20]
 2235 00aa 1370     		strb	r3, [r2]
1099:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
 2236              		.loc 1 1099 14 is_stmt 1 discriminator 4
 2237 00ac FB68     		ldr	r3, [r7, #12]
 2238 00ae 0122     		movs	r2, #1
 2239 00b0 DA70     		strb	r2, [r3, #3]
1100:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2240              		.loc 1 1100 28 discriminator 4
 2241 00b2 FB68     		ldr	r3, [r7, #12]
 2242 00b4 5A6A     		ldr	r2, [r3, #36]
 2243              		.loc 1 1100 44 discriminator 4
 2244 00b6 BB69     		ldr	r3, [r7, #24]
 2245 00b8 5B0A     		lsrs	r3, r3, #9
 2246              		.loc 1 1100 10 discriminator 4
 2247 00ba 1344     		add	r3, r3, r2
 2248 00bc 1946     		mov	r1, r3
 2249 00be F868     		ldr	r0, [r7, #12]
 2250 00c0 FFF7FEFF 		bl	move_window
 2251 00c4 0346     		mov	r3, r0
 2252 00c6 FB77     		strb	r3, [r7, #31]
1101:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 2253              		.loc 1 1101 7 discriminator 4
 2254 00c8 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2255 00ca 002B     		cmp	r3, #0
 2256 00cc 7AD1     		bne	.L138
1102:./Libraries/FatFs/Src/ff.c **** 			p = fs->win + bc % SS(fs);
 2257              		.loc 1 1102 8
 2258 00ce FB68     		ldr	r3, [r7, #12]
 2259 00d0 03F13402 		add	r2, r3, #52
 2260              		.loc 1 1102 21
 2261 00d4 BB69     		ldr	r3, [r7, #24]
 2262 00d6 C3F30803 		ubfx	r3, r3, #0, #9
 2263              		.loc 1 1102 6
 2264 00da 1344     		add	r3, r3, r2
 2265 00dc 7B61     		str	r3, [r7, #20]
1103:./Libraries/FatFs/Src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2266              		.loc 1 1103 15
ARM GAS  /tmp/cceCRWeb.s 			page 60


 2267 00de BB68     		ldr	r3, [r7, #8]
 2268 00e0 03F00103 		and	r3, r3, #1
 2269              		.loc 1 1103 7
 2270 00e4 002B     		cmp	r3, #0
 2271 00e6 03D0     		beq	.L131
 2272              		.loc 1 1103 33 discriminator 1
 2273 00e8 7B68     		ldr	r3, [r7, #4]
 2274 00ea 1B09     		lsrs	r3, r3, #4
 2275              		.loc 1 1103 7 discriminator 1
 2276 00ec DBB2     		uxtb	r3, r3
 2277 00ee 0EE0     		b	.L132
 2278              	.L131:
 2279              		.loc 1 1103 43 discriminator 2
 2280 00f0 7B69     		ldr	r3, [r7, #20]
 2281 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2282 00f4 5BB2     		sxtb	r3, r3
 2283              		.loc 1 1103 46 discriminator 2
 2284 00f6 23F00F03 		bic	r3, r3, #15
 2285 00fa 5AB2     		sxtb	r2, r3
 2286              		.loc 1 1103 68 discriminator 2
 2287 00fc 7B68     		ldr	r3, [r7, #4]
 2288 00fe 1B0A     		lsrs	r3, r3, #8
 2289              		.loc 1 1103 57 discriminator 2
 2290 0100 5BB2     		sxtb	r3, r3
 2291              		.loc 1 1103 74 discriminator 2
 2292 0102 03F00F03 		and	r3, r3, #15
 2293 0106 5BB2     		sxtb	r3, r3
 2294              		.loc 1 1103 54 discriminator 2
 2295 0108 1343     		orrs	r3, r3, r2
 2296 010a 5BB2     		sxtb	r3, r3
 2297              		.loc 1 1103 7 discriminator 2
 2298 010c DBB2     		uxtb	r3, r3
 2299              	.L132:
 2300              		.loc 1 1103 7 is_stmt 0 discriminator 4
 2301 010e 7A69     		ldr	r2, [r7, #20]
 2302 0110 1370     		strb	r3, [r2]
1104:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
 2303              		.loc 1 1104 14 is_stmt 1 discriminator 4
 2304 0112 FB68     		ldr	r3, [r7, #12]
 2305 0114 0122     		movs	r2, #1
 2306 0116 DA70     		strb	r2, [r3, #3]
1105:./Libraries/FatFs/Src/ff.c **** 			break;
 2307              		.loc 1 1105 4 discriminator 4
 2308 0118 59E0     		b	.L123
 2309              	.L126:
1106:./Libraries/FatFs/Src/ff.c **** 
1107:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT16 :	/* WORD aligned items */
1108:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2310              		.loc 1 1108 28
 2311 011a FB68     		ldr	r3, [r7, #12]
 2312 011c 5A6A     		ldr	r2, [r3, #36]
 2313              		.loc 1 1108 46
 2314 011e BB68     		ldr	r3, [r7, #8]
 2315 0120 1B0A     		lsrs	r3, r3, #8
 2316              		.loc 1 1108 10
 2317 0122 1344     		add	r3, r3, r2
 2318 0124 1946     		mov	r1, r3
ARM GAS  /tmp/cceCRWeb.s 			page 61


 2319 0126 F868     		ldr	r0, [r7, #12]
 2320 0128 FFF7FEFF 		bl	move_window
 2321 012c 0346     		mov	r3, r0
 2322 012e FB77     		strb	r3, [r7, #31]
1109:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 2323              		.loc 1 1109 7
 2324 0130 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2325 0132 002B     		cmp	r3, #0
 2326 0134 48D1     		bne	.L139
1110:./Libraries/FatFs/Src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 2327              		.loc 1 1110 12
 2328 0136 FB68     		ldr	r3, [r7, #12]
 2329 0138 03F13402 		add	r2, r3, #52
 2330              		.loc 1 1110 27
 2331 013c BB68     		ldr	r3, [r7, #8]
 2332 013e 5B00     		lsls	r3, r3, #1
 2333              		.loc 1 1110 31
 2334 0140 03F4FF73 		and	r3, r3, #510
 2335              		.loc 1 1110 4
 2336 0144 1344     		add	r3, r3, r2
 2337 0146 7A68     		ldr	r2, [r7, #4]
 2338 0148 92B2     		uxth	r2, r2
 2339 014a 1146     		mov	r1, r2
 2340 014c 1846     		mov	r0, r3
 2341 014e FFF7FEFF 		bl	st_word
1111:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
 2342              		.loc 1 1111 14
 2343 0152 FB68     		ldr	r3, [r7, #12]
 2344 0154 0122     		movs	r2, #1
 2345 0156 DA70     		strb	r2, [r3, #3]
1112:./Libraries/FatFs/Src/ff.c **** 			break;
 2346              		.loc 1 1112 4
 2347 0158 39E0     		b	.L123
 2348              	.L124:
1113:./Libraries/FatFs/Src/ff.c **** 
1114:./Libraries/FatFs/Src/ff.c **** 		case FS_FAT32 :	/* DWORD aligned items */
1115:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1116:./Libraries/FatFs/Src/ff.c **** 		case FS_EXFAT :
1117:./Libraries/FatFs/Src/ff.c **** #endif
1118:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2349              		.loc 1 1118 28
 2350 015a FB68     		ldr	r3, [r7, #12]
 2351 015c 5A6A     		ldr	r2, [r3, #36]
 2352              		.loc 1 1118 46
 2353 015e BB68     		ldr	r3, [r7, #8]
 2354 0160 DB09     		lsrs	r3, r3, #7
 2355              		.loc 1 1118 10
 2356 0162 1344     		add	r3, r3, r2
 2357 0164 1946     		mov	r1, r3
 2358 0166 F868     		ldr	r0, [r7, #12]
 2359 0168 FFF7FEFF 		bl	move_window
 2360 016c 0346     		mov	r3, r0
 2361 016e FB77     		strb	r3, [r7, #31]
1119:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 2362              		.loc 1 1119 7
 2363 0170 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2364 0172 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 62


 2365 0174 2AD1     		bne	.L140
1120:./Libraries/FatFs/Src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1121:./Libraries/FatFs/Src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 2366              		.loc 1 1121 16
 2367 0176 7B68     		ldr	r3, [r7, #4]
 2368 0178 23F07044 		bic	r4, r3, #-268435456
 2369              		.loc 1 1121 42
 2370 017c FB68     		ldr	r3, [r7, #12]
 2371 017e 03F13402 		add	r2, r3, #52
 2372              		.loc 1 1121 57
 2373 0182 BB68     		ldr	r3, [r7, #8]
 2374 0184 9B00     		lsls	r3, r3, #2
 2375              		.loc 1 1121 61
 2376 0186 03F4FE73 		and	r3, r3, #508
 2377              		.loc 1 1121 33
 2378 018a 1344     		add	r3, r3, r2
 2379 018c 1846     		mov	r0, r3
 2380 018e FFF7FEFF 		bl	ld_dword
 2381 0192 0346     		mov	r3, r0
 2382              		.loc 1 1121 71
 2383 0194 03F07043 		and	r3, r3, #-268435456
 2384              		.loc 1 1121 9
 2385 0198 2343     		orrs	r3, r3, r4
 2386 019a 7B60     		str	r3, [r7, #4]
1122:./Libraries/FatFs/Src/ff.c **** 			}
1123:./Libraries/FatFs/Src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
 2387              		.loc 1 1123 13
 2388 019c FB68     		ldr	r3, [r7, #12]
 2389 019e 03F13402 		add	r2, r3, #52
 2390              		.loc 1 1123 28
 2391 01a2 BB68     		ldr	r3, [r7, #8]
 2392 01a4 9B00     		lsls	r3, r3, #2
 2393              		.loc 1 1123 32
 2394 01a6 03F4FE73 		and	r3, r3, #508
 2395              		.loc 1 1123 4
 2396 01aa 1344     		add	r3, r3, r2
 2397 01ac 7968     		ldr	r1, [r7, #4]
 2398 01ae 1846     		mov	r0, r3
 2399 01b0 FFF7FEFF 		bl	st_dword
1124:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
 2400              		.loc 1 1124 14
 2401 01b4 FB68     		ldr	r3, [r7, #12]
 2402 01b6 0122     		movs	r2, #1
 2403 01b8 DA70     		strb	r2, [r3, #3]
1125:./Libraries/FatFs/Src/ff.c **** 			break;
 2404              		.loc 1 1125 4
 2405 01ba 08E0     		b	.L123
 2406              	.L136:
1126:./Libraries/FatFs/Src/ff.c **** 		}
1127:./Libraries/FatFs/Src/ff.c **** 	}
 2407              		.loc 1 1127 2
 2408 01bc 00BF     		nop
 2409 01be 06E0     		b	.L123
 2410              	.L137:
1096:./Libraries/FatFs/Src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2411              		.loc 1 1096 4
 2412 01c0 00BF     		nop
ARM GAS  /tmp/cceCRWeb.s 			page 63


 2413 01c2 04E0     		b	.L123
 2414              	.L138:
1101:./Libraries/FatFs/Src/ff.c **** 			p = fs->win + bc % SS(fs);
 2415              		.loc 1 1101 4
 2416 01c4 00BF     		nop
 2417 01c6 02E0     		b	.L123
 2418              	.L139:
1109:./Libraries/FatFs/Src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 2419              		.loc 1 1109 4
 2420 01c8 00BF     		nop
 2421 01ca 00E0     		b	.L123
 2422              	.L140:
1119:./Libraries/FatFs/Src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2423              		.loc 1 1119 4
 2424 01cc 00BF     		nop
 2425              	.L123:
1128:./Libraries/FatFs/Src/ff.c **** 	return res;
 2426              		.loc 1 1128 9
 2427 01ce FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1129:./Libraries/FatFs/Src/ff.c **** }
 2428              		.loc 1 1129 1
 2429 01d0 1846     		mov	r0, r3
 2430 01d2 2437     		adds	r7, r7, #36
 2431              	.LCFI117:
 2432              		.cfi_def_cfa_offset 12
 2433 01d4 BD46     		mov	sp, r7
 2434              	.LCFI118:
 2435              		.cfi_def_cfa_register 13
 2436              		@ sp needed
 2437 01d6 90BD     		pop	{r4, r7, pc}
 2438              		.cfi_endproc
 2439              	.LFE355:
 2441              		.section	.text.remove_chain,"ax",%progbits
 2442              		.align	1
 2443              		.syntax unified
 2444              		.thumb
 2445              		.thumb_func
 2446              		.fpu fpv5-d16
 2448              	remove_chain:
 2449              	.LFB356:
1130:./Libraries/FatFs/Src/ff.c **** 
1131:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
1132:./Libraries/FatFs/Src/ff.c **** 
1133:./Libraries/FatFs/Src/ff.c **** 
1134:./Libraries/FatFs/Src/ff.c **** 
1135:./Libraries/FatFs/Src/ff.c **** 
1136:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
1137:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1138:./Libraries/FatFs/Src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1139:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1140:./Libraries/FatFs/Src/ff.c **** 
1141:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------*/
1142:./Libraries/FatFs/Src/ff.c **** /* Find a contiguous free cluster block */
1143:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------*/
1144:./Libraries/FatFs/Src/ff.c **** 
1145:./Libraries/FatFs/Src/ff.c **** static
1146:./Libraries/FatFs/Src/ff.c **** DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
ARM GAS  /tmp/cceCRWeb.s 			page 64


1147:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,	/* File system object */
1148:./Libraries/FatFs/Src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1149:./Libraries/FatFs/Src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1150:./Libraries/FatFs/Src/ff.c **** )
1151:./Libraries/FatFs/Src/ff.c **** {
1152:./Libraries/FatFs/Src/ff.c **** 	BYTE bm, bv;
1153:./Libraries/FatFs/Src/ff.c **** 	UINT i;
1154:./Libraries/FatFs/Src/ff.c **** 	DWORD val, scl, ctr;
1155:./Libraries/FatFs/Src/ff.c **** 
1156:./Libraries/FatFs/Src/ff.c **** 
1157:./Libraries/FatFs/Src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1158:./Libraries/FatFs/Src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1159:./Libraries/FatFs/Src/ff.c **** 	scl = val = clst; ctr = 0;
1160:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
1161:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1162:./Libraries/FatFs/Src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1163:./Libraries/FatFs/Src/ff.c **** 		do {
1164:./Libraries/FatFs/Src/ff.c **** 			do {
1165:./Libraries/FatFs/Src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1166:./Libraries/FatFs/Src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1167:./Libraries/FatFs/Src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1168:./Libraries/FatFs/Src/ff.c **** 				}
1169:./Libraries/FatFs/Src/ff.c **** 				if (!bv) {	/* Is it a free cluster? */
1170:./Libraries/FatFs/Src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1171:./Libraries/FatFs/Src/ff.c **** 				} else {
1172:./Libraries/FatFs/Src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1173:./Libraries/FatFs/Src/ff.c **** 				}
1174:./Libraries/FatFs/Src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1175:./Libraries/FatFs/Src/ff.c **** 			} while (bm);
1176:./Libraries/FatFs/Src/ff.c **** 			bm = 1;
1177:./Libraries/FatFs/Src/ff.c **** 		} while (++i < SS(fs));
1178:./Libraries/FatFs/Src/ff.c **** 	}
1179:./Libraries/FatFs/Src/ff.c **** }
1180:./Libraries/FatFs/Src/ff.c **** 
1181:./Libraries/FatFs/Src/ff.c **** 
1182:./Libraries/FatFs/Src/ff.c **** /*----------------------------------------*/
1183:./Libraries/FatFs/Src/ff.c **** /* Set/Clear a block of allocation bitmap */
1184:./Libraries/FatFs/Src/ff.c **** /*----------------------------------------*/
1185:./Libraries/FatFs/Src/ff.c **** 
1186:./Libraries/FatFs/Src/ff.c **** static
1187:./Libraries/FatFs/Src/ff.c **** FRESULT change_bitmap (
1188:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,	/* File system object */
1189:./Libraries/FatFs/Src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1190:./Libraries/FatFs/Src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1191:./Libraries/FatFs/Src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1192:./Libraries/FatFs/Src/ff.c **** )
1193:./Libraries/FatFs/Src/ff.c **** {
1194:./Libraries/FatFs/Src/ff.c **** 	BYTE bm;
1195:./Libraries/FatFs/Src/ff.c **** 	UINT i;
1196:./Libraries/FatFs/Src/ff.c **** 	DWORD sect;
1197:./Libraries/FatFs/Src/ff.c **** 
1198:./Libraries/FatFs/Src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1199:./Libraries/FatFs/Src/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1200:./Libraries/FatFs/Src/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1201:./Libraries/FatFs/Src/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1202:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
1203:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
ARM GAS  /tmp/cceCRWeb.s 			page 65


1204:./Libraries/FatFs/Src/ff.c **** 		do {
1205:./Libraries/FatFs/Src/ff.c **** 			do {
1206:./Libraries/FatFs/Src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1207:./Libraries/FatFs/Src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1208:./Libraries/FatFs/Src/ff.c **** 				fs->wflag = 1;
1209:./Libraries/FatFs/Src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1210:./Libraries/FatFs/Src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1211:./Libraries/FatFs/Src/ff.c **** 			bm = 1;
1212:./Libraries/FatFs/Src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1213:./Libraries/FatFs/Src/ff.c **** 		i = 0;
1214:./Libraries/FatFs/Src/ff.c **** 	}
1215:./Libraries/FatFs/Src/ff.c **** }
1216:./Libraries/FatFs/Src/ff.c **** 
1217:./Libraries/FatFs/Src/ff.c **** 
1218:./Libraries/FatFs/Src/ff.c **** /*---------------------------------------------*/
1219:./Libraries/FatFs/Src/ff.c **** /* Fill the first fragment of the FAT chain    */
1220:./Libraries/FatFs/Src/ff.c **** /*---------------------------------------------*/
1221:./Libraries/FatFs/Src/ff.c **** 
1222:./Libraries/FatFs/Src/ff.c **** static
1223:./Libraries/FatFs/Src/ff.c **** FRESULT fill_first_frag (
1224:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj	/* Pointer to the corresponding object */
1225:./Libraries/FatFs/Src/ff.c **** )
1226:./Libraries/FatFs/Src/ff.c **** {
1227:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
1228:./Libraries/FatFs/Src/ff.c **** 	DWORD cl, n;
1229:./Libraries/FatFs/Src/ff.c **** 
1230:./Libraries/FatFs/Src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1231:./Libraries/FatFs/Src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1232:./Libraries/FatFs/Src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1233:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
1234:./Libraries/FatFs/Src/ff.c **** 		}
1235:./Libraries/FatFs/Src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1236:./Libraries/FatFs/Src/ff.c **** 	}
1237:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
1238:./Libraries/FatFs/Src/ff.c **** }
1239:./Libraries/FatFs/Src/ff.c **** 
1240:./Libraries/FatFs/Src/ff.c **** 
1241:./Libraries/FatFs/Src/ff.c **** /*---------------------------------------------*/
1242:./Libraries/FatFs/Src/ff.c **** /* Fill the last fragment of the FAT chain     */
1243:./Libraries/FatFs/Src/ff.c **** /*---------------------------------------------*/
1244:./Libraries/FatFs/Src/ff.c **** 
1245:./Libraries/FatFs/Src/ff.c **** static
1246:./Libraries/FatFs/Src/ff.c **** FRESULT fill_last_frag (
1247:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj,	/* Pointer to the corresponding object */
1248:./Libraries/FatFs/Src/ff.c **** 	DWORD lcl,	/* Last cluster of the fragment */
1249:./Libraries/FatFs/Src/ff.c **** 	DWORD term	/* Value to set the last FAT entry */
1250:./Libraries/FatFs/Src/ff.c **** )
1251:./Libraries/FatFs/Src/ff.c **** {
1252:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
1253:./Libraries/FatFs/Src/ff.c **** 
1254:./Libraries/FatFs/Src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
1255:./Libraries/FatFs/Src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1256:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
1257:./Libraries/FatFs/Src/ff.c **** 		obj->n_frag--;
1258:./Libraries/FatFs/Src/ff.c **** 	}
1259:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
1260:./Libraries/FatFs/Src/ff.c **** }
ARM GAS  /tmp/cceCRWeb.s 			page 66


1261:./Libraries/FatFs/Src/ff.c **** 
1262:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1263:./Libraries/FatFs/Src/ff.c **** 
1264:./Libraries/FatFs/Src/ff.c **** 
1265:./Libraries/FatFs/Src/ff.c **** 
1266:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1267:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1268:./Libraries/FatFs/Src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1269:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1270:./Libraries/FatFs/Src/ff.c **** static
1271:./Libraries/FatFs/Src/ff.c **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1272:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1273:./Libraries/FatFs/Src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1274:./Libraries/FatFs/Src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1275:./Libraries/FatFs/Src/ff.c **** )
1276:./Libraries/FatFs/Src/ff.c **** {
 2450              		.loc 1 1276 1
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 32
 2453              		@ frame_needed = 1, uses_anonymous_args = 0
 2454 0000 80B5     		push	{r7, lr}
 2455              	.LCFI119:
 2456              		.cfi_def_cfa_offset 8
 2457              		.cfi_offset 7, -8
 2458              		.cfi_offset 14, -4
 2459 0002 88B0     		sub	sp, sp, #32
 2460              	.LCFI120:
 2461              		.cfi_def_cfa_offset 40
 2462 0004 00AF     		add	r7, sp, #0
 2463              	.LCFI121:
 2464              		.cfi_def_cfa_register 7
 2465 0006 F860     		str	r0, [r7, #12]
 2466 0008 B960     		str	r1, [r7, #8]
 2467 000a 7A60     		str	r2, [r7, #4]
1277:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_OK;
 2468              		.loc 1 1277 10
 2469 000c 0023     		movs	r3, #0
 2470 000e FB77     		strb	r3, [r7, #31]
1278:./Libraries/FatFs/Src/ff.c **** 	DWORD nxt;
1279:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = obj->fs;
 2471              		.loc 1 1279 9
 2472 0010 FB68     		ldr	r3, [r7, #12]
 2473 0012 1B68     		ldr	r3, [r3]
 2474 0014 BB61     		str	r3, [r7, #24]
1280:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1281:./Libraries/FatFs/Src/ff.c **** 	DWORD scl = clst, ecl = clst;
1282:./Libraries/FatFs/Src/ff.c **** #endif
1283:./Libraries/FatFs/Src/ff.c **** #if _USE_TRIM
1284:./Libraries/FatFs/Src/ff.c **** 	DWORD rt[2];
1285:./Libraries/FatFs/Src/ff.c **** #endif
1286:./Libraries/FatFs/Src/ff.c **** 
1287:./Libraries/FatFs/Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 2475              		.loc 1 1287 5
 2476 0016 BB68     		ldr	r3, [r7, #8]
 2477 0018 012B     		cmp	r3, #1
 2478 001a 04D9     		bls	.L142
 2479              		.loc 1 1287 28 discriminator 2
ARM GAS  /tmp/cceCRWeb.s 			page 67


 2480 001c BB69     		ldr	r3, [r7, #24]
 2481 001e 9B69     		ldr	r3, [r3, #24]
 2482              		.loc 1 1287 15 discriminator 2
 2483 0020 BA68     		ldr	r2, [r7, #8]
 2484 0022 9A42     		cmp	r2, r3
 2485 0024 01D3     		bcc	.L143
 2486              	.L142:
 2487              		.loc 1 1287 47 discriminator 3
 2488 0026 0223     		movs	r3, #2
 2489 0028 4BE0     		b	.L144
 2490              	.L143:
1288:./Libraries/FatFs/Src/ff.c **** 
1289:./Libraries/FatFs/Src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1290:./Libraries/FatFs/Src/ff.c **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 2491              		.loc 1 1290 5
 2492 002a 7B68     		ldr	r3, [r7, #4]
 2493 002c 002B     		cmp	r3, #0
 2494 002e 0CD0     		beq	.L152
1291:./Libraries/FatFs/Src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2495              		.loc 1 1291 9
 2496 0030 4FF0FF32 		mov	r2, #-1
 2497 0034 7968     		ldr	r1, [r7, #4]
 2498 0036 B869     		ldr	r0, [r7, #24]
 2499 0038 FFF7FEFF 		bl	put_fat
 2500 003c 0346     		mov	r3, r0
 2501 003e FB77     		strb	r3, [r7, #31]
1292:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
 2502              		.loc 1 1292 6
 2503 0040 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2504 0042 002B     		cmp	r3, #0
 2505 0044 01D0     		beq	.L152
 2506              		.loc 1 1292 28 discriminator 1
 2507 0046 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2508 0048 3BE0     		b	.L144
 2509              	.L152:
1293:./Libraries/FatFs/Src/ff.c **** 	}
1294:./Libraries/FatFs/Src/ff.c **** 
1295:./Libraries/FatFs/Src/ff.c **** 	/* Remove the chain */
1296:./Libraries/FatFs/Src/ff.c **** 	do {
1297:./Libraries/FatFs/Src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 2510              		.loc 1 1297 9
 2511 004a B968     		ldr	r1, [r7, #8]
 2512 004c F868     		ldr	r0, [r7, #12]
 2513 004e FFF7FEFF 		bl	get_fat
 2514 0052 7861     		str	r0, [r7, #20]
1298:./Libraries/FatFs/Src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 2515              		.loc 1 1298 6
 2516 0054 7B69     		ldr	r3, [r7, #20]
 2517 0056 002B     		cmp	r3, #0
 2518 0058 31D0     		beq	.L153
1299:./Libraries/FatFs/Src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2519              		.loc 1 1299 6
 2520 005a 7B69     		ldr	r3, [r7, #20]
 2521 005c 012B     		cmp	r3, #1
 2522 005e 01D1     		bne	.L148
 2523              		.loc 1 1299 24 discriminator 1
 2524 0060 0223     		movs	r3, #2
ARM GAS  /tmp/cceCRWeb.s 			page 68


 2525 0062 2EE0     		b	.L144
 2526              	.L148:
1300:./Libraries/FatFs/Src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2527              		.loc 1 1300 6
 2528 0064 7B69     		ldr	r3, [r7, #20]
 2529 0066 B3F1FF3F 		cmp	r3, #-1
 2530 006a 01D1     		bne	.L149
 2531              		.loc 1 1300 33 discriminator 1
 2532 006c 0123     		movs	r3, #1
 2533 006e 28E0     		b	.L144
 2534              	.L149:
1301:./Libraries/FatFs/Src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1302:./Libraries/FatFs/Src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 2535              		.loc 1 1302 10
 2536 0070 0022     		movs	r2, #0
 2537 0072 B968     		ldr	r1, [r7, #8]
 2538 0074 B869     		ldr	r0, [r7, #24]
 2539 0076 FFF7FEFF 		bl	put_fat
 2540 007a 0346     		mov	r3, r0
 2541 007c FB77     		strb	r3, [r7, #31]
1303:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
 2542              		.loc 1 1303 7
 2543 007e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2544 0080 002B     		cmp	r3, #0
 2545 0082 01D0     		beq	.L150
 2546              		.loc 1 1303 29 discriminator 1
 2547 0084 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2548 0086 1CE0     		b	.L144
 2549              	.L150:
1304:./Libraries/FatFs/Src/ff.c **** 		}
1305:./Libraries/FatFs/Src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 2550              		.loc 1 1305 9
 2551 0088 BB69     		ldr	r3, [r7, #24]
 2552 008a 5A69     		ldr	r2, [r3, #20]
 2553              		.loc 1 1305 25
 2554 008c BB69     		ldr	r3, [r7, #24]
 2555 008e 9B69     		ldr	r3, [r3, #24]
 2556              		.loc 1 1305 36
 2557 0090 023B     		subs	r3, r3, #2
 2558              		.loc 1 1305 6
 2559 0092 9A42     		cmp	r2, r3
 2560 0094 0BD2     		bcs	.L151
1306:./Libraries/FatFs/Src/ff.c **** 			fs->free_clst++;
 2561              		.loc 1 1306 6
 2562 0096 BB69     		ldr	r3, [r7, #24]
 2563 0098 5B69     		ldr	r3, [r3, #20]
 2564              		.loc 1 1306 17
 2565 009a 5A1C     		adds	r2, r3, #1
 2566 009c BB69     		ldr	r3, [r7, #24]
 2567 009e 5A61     		str	r2, [r3, #20]
1307:./Libraries/FatFs/Src/ff.c **** 			fs->fsi_flag |= 1;
 2568              		.loc 1 1307 17
 2569 00a0 BB69     		ldr	r3, [r7, #24]
 2570 00a2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2571 00a4 43F00103 		orr	r3, r3, #1
 2572 00a8 DAB2     		uxtb	r2, r3
 2573 00aa BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cceCRWeb.s 			page 69


 2574 00ac 1A71     		strb	r2, [r3, #4]
 2575              	.L151:
1308:./Libraries/FatFs/Src/ff.c **** 		}
1309:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1310:./Libraries/FatFs/Src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1311:./Libraries/FatFs/Src/ff.c **** 			ecl = nxt;
1312:./Libraries/FatFs/Src/ff.c **** 		} else {				/* End of contiguous cluster block */
1313:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1314:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1315:./Libraries/FatFs/Src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1316:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) return res;
1317:./Libraries/FatFs/Src/ff.c **** 			}
1318:./Libraries/FatFs/Src/ff.c **** #endif
1319:./Libraries/FatFs/Src/ff.c **** #if _USE_TRIM
1320:./Libraries/FatFs/Src/ff.c **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1321:./Libraries/FatFs/Src/ff.c **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1322:./Libraries/FatFs/Src/ff.c **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1323:./Libraries/FatFs/Src/ff.c **** #endif
1324:./Libraries/FatFs/Src/ff.c **** 			scl = ecl = nxt;
1325:./Libraries/FatFs/Src/ff.c **** 		}
1326:./Libraries/FatFs/Src/ff.c **** #endif
1327:./Libraries/FatFs/Src/ff.c **** 		clst = nxt;					/* Next cluster */
 2576              		.loc 1 1327 8
 2577 00ae 7B69     		ldr	r3, [r7, #20]
 2578 00b0 BB60     		str	r3, [r7, #8]
1328:./Libraries/FatFs/Src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2579              		.loc 1 1328 20
 2580 00b2 BB69     		ldr	r3, [r7, #24]
 2581 00b4 9B69     		ldr	r3, [r3, #24]
 2582              		.loc 1 1328 2
 2583 00b6 BA68     		ldr	r2, [r7, #8]
 2584 00b8 9A42     		cmp	r2, r3
 2585 00ba C6D3     		bcc	.L152
 2586 00bc 00E0     		b	.L147
 2587              	.L153:
1298:./Libraries/FatFs/Src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2588              		.loc 1 1298 3
 2589 00be 00BF     		nop
 2590              	.L147:
1329:./Libraries/FatFs/Src/ff.c **** 
1330:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1331:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1332:./Libraries/FatFs/Src/ff.c **** 		if (pclst == 0) {	/* Does the object have no chain? */
1333:./Libraries/FatFs/Src/ff.c **** 			obj->stat = 0;		/* Change the object status 'initial' */
1334:./Libraries/FatFs/Src/ff.c **** 		} else {
1335:./Libraries/FatFs/Src/ff.c **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1336:./Libraries/FatFs/Src/ff.c **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1337:./Libraries/FatFs/Src/ff.c **** 			}
1338:./Libraries/FatFs/Src/ff.c **** 		}
1339:./Libraries/FatFs/Src/ff.c **** 	}
1340:./Libraries/FatFs/Src/ff.c **** #endif
1341:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 2591              		.loc 1 1341 9
 2592 00c0 0023     		movs	r3, #0
 2593              	.L144:
1342:./Libraries/FatFs/Src/ff.c **** }
 2594              		.loc 1 1342 1
ARM GAS  /tmp/cceCRWeb.s 			page 70


 2595 00c2 1846     		mov	r0, r3
 2596 00c4 2037     		adds	r7, r7, #32
 2597              	.LCFI122:
 2598              		.cfi_def_cfa_offset 8
 2599 00c6 BD46     		mov	sp, r7
 2600              	.LCFI123:
 2601              		.cfi_def_cfa_register 13
 2602              		@ sp needed
 2603 00c8 80BD     		pop	{r7, pc}
 2604              		.cfi_endproc
 2605              	.LFE356:
 2607              		.section	.text.create_chain,"ax",%progbits
 2608              		.align	1
 2609              		.syntax unified
 2610              		.thumb
 2611              		.thumb_func
 2612              		.fpu fpv5-d16
 2614              	create_chain:
 2615              	.LFB357:
1343:./Libraries/FatFs/Src/ff.c **** 
1344:./Libraries/FatFs/Src/ff.c **** 
1345:./Libraries/FatFs/Src/ff.c **** 
1346:./Libraries/FatFs/Src/ff.c **** 
1347:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1348:./Libraries/FatFs/Src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1349:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1350:./Libraries/FatFs/Src/ff.c **** static
1351:./Libraries/FatFs/Src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1352:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1353:./Libraries/FatFs/Src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1354:./Libraries/FatFs/Src/ff.c **** )
1355:./Libraries/FatFs/Src/ff.c **** {
 2616              		.loc 1 1355 1
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 32
 2619              		@ frame_needed = 1, uses_anonymous_args = 0
 2620 0000 80B5     		push	{r7, lr}
 2621              	.LCFI124:
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 7, -8
 2624              		.cfi_offset 14, -4
 2625 0002 88B0     		sub	sp, sp, #32
 2626              	.LCFI125:
 2627              		.cfi_def_cfa_offset 40
 2628 0004 00AF     		add	r7, sp, #0
 2629              	.LCFI126:
 2630              		.cfi_def_cfa_register 7
 2631 0006 7860     		str	r0, [r7, #4]
 2632 0008 3960     		str	r1, [r7]
1356:./Libraries/FatFs/Src/ff.c **** 	DWORD cs, ncl, scl;
1357:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
1358:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = obj->fs;
 2633              		.loc 1 1358 9
 2634 000a 7B68     		ldr	r3, [r7, #4]
 2635 000c 1B68     		ldr	r3, [r3]
 2636 000e 3B61     		str	r3, [r7, #16]
1359:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 71


1360:./Libraries/FatFs/Src/ff.c **** 
1361:./Libraries/FatFs/Src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
 2637              		.loc 1 1361 5
 2638 0010 3B68     		ldr	r3, [r7]
 2639 0012 002B     		cmp	r3, #0
 2640 0014 0DD1     		bne	.L155
1362:./Libraries/FatFs/Src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
 2641              		.loc 1 1362 7
 2642 0016 3B69     		ldr	r3, [r7, #16]
 2643 0018 1B69     		ldr	r3, [r3, #16]
 2644 001a BB61     		str	r3, [r7, #24]
1363:./Libraries/FatFs/Src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2645              		.loc 1 1363 6
 2646 001c BB69     		ldr	r3, [r7, #24]
 2647 001e 002B     		cmp	r3, #0
 2648 0020 04D0     		beq	.L156
 2649              		.loc 1 1363 28 discriminator 2
 2650 0022 3B69     		ldr	r3, [r7, #16]
 2651 0024 9B69     		ldr	r3, [r3, #24]
 2652              		.loc 1 1363 16 discriminator 2
 2653 0026 BA69     		ldr	r2, [r7, #24]
 2654 0028 9A42     		cmp	r2, r3
 2655 002a 1BD3     		bcc	.L157
 2656              	.L156:
 2657              		.loc 1 1363 44 discriminator 3
 2658 002c 0123     		movs	r3, #1
 2659 002e BB61     		str	r3, [r7, #24]
 2660 0030 18E0     		b	.L157
 2661              	.L155:
1364:./Libraries/FatFs/Src/ff.c **** 	}
1365:./Libraries/FatFs/Src/ff.c **** 	else {				/* Stretch current chain */
1366:./Libraries/FatFs/Src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
 2662              		.loc 1 1366 8
 2663 0032 3968     		ldr	r1, [r7]
 2664 0034 7868     		ldr	r0, [r7, #4]
 2665 0036 FFF7FEFF 		bl	get_fat
 2666 003a F860     		str	r0, [r7, #12]
1367:./Libraries/FatFs/Src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
 2667              		.loc 1 1367 6
 2668 003c FB68     		ldr	r3, [r7, #12]
 2669 003e 012B     		cmp	r3, #1
 2670 0040 01D8     		bhi	.L158
 2671              		.loc 1 1367 22 discriminator 1
 2672 0042 0123     		movs	r3, #1
 2673 0044 70E0     		b	.L159
 2674              	.L158:
1368:./Libraries/FatFs/Src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2675              		.loc 1 1368 6
 2676 0046 FB68     		ldr	r3, [r7, #12]
 2677 0048 B3F1FF3F 		cmp	r3, #-1
 2678 004c 01D1     		bne	.L160
 2679              		.loc 1 1368 32 discriminator 1
 2680 004e FB68     		ldr	r3, [r7, #12]
 2681 0050 6AE0     		b	.L159
 2682              	.L160:
1369:./Libraries/FatFs/Src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2683              		.loc 1 1369 14
ARM GAS  /tmp/cceCRWeb.s 			page 72


 2684 0052 3B69     		ldr	r3, [r7, #16]
 2685 0054 9B69     		ldr	r3, [r3, #24]
 2686              		.loc 1 1369 6
 2687 0056 FA68     		ldr	r2, [r7, #12]
 2688 0058 9A42     		cmp	r2, r3
 2689 005a 01D2     		bcs	.L161
 2690              		.loc 1 1369 33 discriminator 1
 2691 005c FB68     		ldr	r3, [r7, #12]
 2692 005e 63E0     		b	.L159
 2693              	.L161:
1370:./Libraries/FatFs/Src/ff.c **** 		scl = clst;
 2694              		.loc 1 1370 7
 2695 0060 3B68     		ldr	r3, [r7]
 2696 0062 BB61     		str	r3, [r7, #24]
 2697              	.L157:
1371:./Libraries/FatFs/Src/ff.c **** 	}
1372:./Libraries/FatFs/Src/ff.c **** 
1373:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1374:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1375:./Libraries/FatFs/Src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1376:./Libraries/FatFs/Src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1377:./Libraries/FatFs/Src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1378:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1379:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1380:./Libraries/FatFs/Src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1381:./Libraries/FatFs/Src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1382:./Libraries/FatFs/Src/ff.c **** 		} else {									/* It is a stretched chain */
1383:./Libraries/FatFs/Src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1384:./Libraries/FatFs/Src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1385:./Libraries/FatFs/Src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1386:./Libraries/FatFs/Src/ff.c **** 			}
1387:./Libraries/FatFs/Src/ff.c **** 		}
1388:./Libraries/FatFs/Src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1389:./Libraries/FatFs/Src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1390:./Libraries/FatFs/Src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1391:./Libraries/FatFs/Src/ff.c **** 			} else {				/* New fragment */
1392:./Libraries/FatFs/Src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1393:./Libraries/FatFs/Src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1394:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1395:./Libraries/FatFs/Src/ff.c **** 			}
1396:./Libraries/FatFs/Src/ff.c **** 		}
1397:./Libraries/FatFs/Src/ff.c **** 	} else
1398:./Libraries/FatFs/Src/ff.c **** #endif
1399:./Libraries/FatFs/Src/ff.c **** 	{	/* On the FAT12/16/32 volume */
1400:./Libraries/FatFs/Src/ff.c **** 		ncl = scl;	/* Start cluster */
 2698              		.loc 1 1400 7
 2699 0064 BB69     		ldr	r3, [r7, #24]
 2700 0066 FB61     		str	r3, [r7, #28]
 2701              	.L168:
1401:./Libraries/FatFs/Src/ff.c **** 		for (;;) {
1402:./Libraries/FatFs/Src/ff.c **** 			ncl++;							/* Next cluster */
 2702              		.loc 1 1402 7
 2703 0068 FB69     		ldr	r3, [r7, #28]
 2704 006a 0133     		adds	r3, r3, #1
 2705 006c FB61     		str	r3, [r7, #28]
1403:./Libraries/FatFs/Src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2706              		.loc 1 1403 17
ARM GAS  /tmp/cceCRWeb.s 			page 73


 2707 006e 3B69     		ldr	r3, [r7, #16]
 2708 0070 9B69     		ldr	r3, [r3, #24]
 2709              		.loc 1 1403 7
 2710 0072 FA69     		ldr	r2, [r7, #28]
 2711 0074 9A42     		cmp	r2, r3
 2712 0076 07D3     		bcc	.L162
1404:./Libraries/FatFs/Src/ff.c **** 				ncl = 2;
 2713              		.loc 1 1404 9
 2714 0078 0223     		movs	r3, #2
 2715 007a FB61     		str	r3, [r7, #28]
1405:./Libraries/FatFs/Src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
 2716              		.loc 1 1405 8
 2717 007c FA69     		ldr	r2, [r7, #28]
 2718 007e BB69     		ldr	r3, [r7, #24]
 2719 0080 9A42     		cmp	r2, r3
 2720 0082 01D9     		bls	.L162
 2721              		.loc 1 1405 27 discriminator 1
 2722 0084 0023     		movs	r3, #0
 2723 0086 4FE0     		b	.L159
 2724              	.L162:
1406:./Libraries/FatFs/Src/ff.c **** 			}
1407:./Libraries/FatFs/Src/ff.c **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
 2725              		.loc 1 1407 9
 2726 0088 F969     		ldr	r1, [r7, #28]
 2727 008a 7868     		ldr	r0, [r7, #4]
 2728 008c FFF7FEFF 		bl	get_fat
 2729 0090 F860     		str	r0, [r7, #12]
1408:./Libraries/FatFs/Src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
 2730              		.loc 1 1408 7
 2731 0092 FB68     		ldr	r3, [r7, #12]
 2732 0094 002B     		cmp	r3, #0
 2733 0096 0ED0     		beq	.L176
1409:./Libraries/FatFs/Src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 2734              		.loc 1 1409 7
 2735 0098 FB68     		ldr	r3, [r7, #12]
 2736 009a 012B     		cmp	r3, #1
 2737 009c 03D0     		beq	.L165
 2738              		.loc 1 1409 16 discriminator 2
 2739 009e FB68     		ldr	r3, [r7, #12]
 2740 00a0 B3F1FF3F 		cmp	r3, #-1
 2741 00a4 01D1     		bne	.L166
 2742              	.L165:
 2743              		.loc 1 1409 44 discriminator 3
 2744 00a6 FB68     		ldr	r3, [r7, #12]
 2745 00a8 3EE0     		b	.L159
 2746              	.L166:
1410:./Libraries/FatFs/Src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
 2747              		.loc 1 1410 7
 2748 00aa FA69     		ldr	r2, [r7, #28]
 2749 00ac BB69     		ldr	r3, [r7, #24]
 2750 00ae 9A42     		cmp	r2, r3
 2751 00b0 DAD1     		bne	.L168
 2752              		.loc 1 1410 27 discriminator 1
 2753 00b2 0023     		movs	r3, #0
 2754 00b4 38E0     		b	.L159
 2755              	.L176:
1408:./Libraries/FatFs/Src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
ARM GAS  /tmp/cceCRWeb.s 			page 74


 2756              		.loc 1 1408 4
 2757 00b6 00BF     		nop
1411:./Libraries/FatFs/Src/ff.c **** 		}
1412:./Libraries/FatFs/Src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 2758              		.loc 1 1412 9
 2759 00b8 4FF0FF32 		mov	r2, #-1
 2760 00bc F969     		ldr	r1, [r7, #28]
 2761 00be 3869     		ldr	r0, [r7, #16]
 2762 00c0 FFF7FEFF 		bl	put_fat
 2763 00c4 0346     		mov	r3, r0
 2764 00c6 FB75     		strb	r3, [r7, #23]
1413:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK && clst != 0) {
 2765              		.loc 1 1413 6
 2766 00c8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2767 00ca 002B     		cmp	r3, #0
 2768 00cc 09D1     		bne	.L169
 2769              		.loc 1 1413 20 discriminator 1
 2770 00ce 3B68     		ldr	r3, [r7]
 2771 00d0 002B     		cmp	r3, #0
 2772 00d2 06D0     		beq	.L169
1414:./Libraries/FatFs/Src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 2773              		.loc 1 1414 10
 2774 00d4 FA69     		ldr	r2, [r7, #28]
 2775 00d6 3968     		ldr	r1, [r7]
 2776 00d8 3869     		ldr	r0, [r7, #16]
 2777 00da FFF7FEFF 		bl	put_fat
 2778 00de 0346     		mov	r3, r0
 2779 00e0 FB75     		strb	r3, [r7, #23]
 2780              	.L169:
1415:./Libraries/FatFs/Src/ff.c **** 		}
1416:./Libraries/FatFs/Src/ff.c **** 	}
1417:./Libraries/FatFs/Src/ff.c **** 
1418:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 2781              		.loc 1 1418 5
 2782 00e2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2783 00e4 002B     		cmp	r3, #0
 2784 00e6 16D1     		bne	.L170
1419:./Libraries/FatFs/Src/ff.c **** 		fs->last_clst = ncl;
 2785              		.loc 1 1419 17
 2786 00e8 3B69     		ldr	r3, [r7, #16]
 2787 00ea FA69     		ldr	r2, [r7, #28]
 2788 00ec 1A61     		str	r2, [r3, #16]
1420:./Libraries/FatFs/Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2789              		.loc 1 1420 9
 2790 00ee 3B69     		ldr	r3, [r7, #16]
 2791 00f0 5A69     		ldr	r2, [r3, #20]
 2792              		.loc 1 1420 26
 2793 00f2 3B69     		ldr	r3, [r7, #16]
 2794 00f4 9B69     		ldr	r3, [r3, #24]
 2795              		.loc 1 1420 37
 2796 00f6 023B     		subs	r3, r3, #2
 2797              		.loc 1 1420 6
 2798 00f8 9A42     		cmp	r2, r3
 2799 00fa 04D8     		bhi	.L171
 2800              		.loc 1 1420 44 discriminator 1
 2801 00fc 3B69     		ldr	r3, [r7, #16]
 2802 00fe 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 75


 2803              		.loc 1 1420 55 discriminator 1
 2804 0100 5A1E     		subs	r2, r3, #1
 2805 0102 3B69     		ldr	r3, [r7, #16]
 2806 0104 5A61     		str	r2, [r3, #20]
 2807              	.L171:
1421:./Libraries/FatFs/Src/ff.c **** 		fs->fsi_flag |= 1;
 2808              		.loc 1 1421 16
 2809 0106 3B69     		ldr	r3, [r7, #16]
 2810 0108 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2811 010a 43F00103 		orr	r3, r3, #1
 2812 010e DAB2     		uxtb	r2, r3
 2813 0110 3B69     		ldr	r3, [r7, #16]
 2814 0112 1A71     		strb	r2, [r3, #4]
 2815 0114 07E0     		b	.L172
 2816              	.L170:
1422:./Libraries/FatFs/Src/ff.c **** 	} else {
1423:./Libraries/FatFs/Src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 2817              		.loc 1 1423 43
 2818 0116 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2819 0118 012B     		cmp	r3, #1
 2820 011a 02D1     		bne	.L173
 2821              		.loc 1 1423 43 is_stmt 0 discriminator 1
 2822 011c 4FF0FF33 		mov	r3, #-1
 2823 0120 00E0     		b	.L174
 2824              	.L173:
 2825              		.loc 1 1423 43 discriminator 2
 2826 0122 0123     		movs	r3, #1
 2827              	.L174:
 2828              		.loc 1 1423 7 is_stmt 1 discriminator 4
 2829 0124 FB61     		str	r3, [r7, #28]
 2830              	.L172:
1424:./Libraries/FatFs/Src/ff.c **** 	}
1425:./Libraries/FatFs/Src/ff.c **** 
1426:./Libraries/FatFs/Src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
 2831              		.loc 1 1426 9
 2832 0126 FB69     		ldr	r3, [r7, #28]
 2833              	.L159:
1427:./Libraries/FatFs/Src/ff.c **** }
 2834              		.loc 1 1427 1
 2835 0128 1846     		mov	r0, r3
 2836 012a 2037     		adds	r7, r7, #32
 2837              	.LCFI127:
 2838              		.cfi_def_cfa_offset 8
 2839 012c BD46     		mov	sp, r7
 2840              	.LCFI128:
 2841              		.cfi_def_cfa_register 13
 2842              		@ sp needed
 2843 012e 80BD     		pop	{r7, pc}
 2844              		.cfi_endproc
 2845              	.LFE357:
 2847              		.section	.text.clmt_clust,"ax",%progbits
 2848              		.align	1
 2849              		.syntax unified
 2850              		.thumb
 2851              		.thumb_func
 2852              		.fpu fpv5-d16
 2854              	clmt_clust:
ARM GAS  /tmp/cceCRWeb.s 			page 76


 2855              	.LFB358:
1428:./Libraries/FatFs/Src/ff.c **** 
1429:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
1430:./Libraries/FatFs/Src/ff.c **** 
1431:./Libraries/FatFs/Src/ff.c **** 
1432:./Libraries/FatFs/Src/ff.c **** 
1433:./Libraries/FatFs/Src/ff.c **** 
1434:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
1435:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1436:./Libraries/FatFs/Src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1437:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1438:./Libraries/FatFs/Src/ff.c **** 
1439:./Libraries/FatFs/Src/ff.c **** static
1440:./Libraries/FatFs/Src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1441:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1442:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1443:./Libraries/FatFs/Src/ff.c **** )
1444:./Libraries/FatFs/Src/ff.c **** {
 2856              		.loc 1 1444 1
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 24
 2859              		@ frame_needed = 1, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
 2861 0000 80B4     		push	{r7}
 2862              	.LCFI129:
 2863              		.cfi_def_cfa_offset 4
 2864              		.cfi_offset 7, -4
 2865 0002 87B0     		sub	sp, sp, #28
 2866              	.LCFI130:
 2867              		.cfi_def_cfa_offset 32
 2868 0004 00AF     		add	r7, sp, #0
 2869              	.LCFI131:
 2870              		.cfi_def_cfa_register 7
 2871 0006 7860     		str	r0, [r7, #4]
 2872 0008 3960     		str	r1, [r7]
1445:./Libraries/FatFs/Src/ff.c **** 	DWORD cl, ncl, *tbl;
1446:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = fp->obj.fs;
 2873              		.loc 1 1446 9
 2874 000a 7B68     		ldr	r3, [r7, #4]
 2875 000c 1B68     		ldr	r3, [r3]
 2876 000e FB60     		str	r3, [r7, #12]
1447:./Libraries/FatFs/Src/ff.c **** 
1448:./Libraries/FatFs/Src/ff.c **** 
1449:./Libraries/FatFs/Src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 2877              		.loc 1 1449 10
 2878 0010 7B68     		ldr	r3, [r7, #4]
 2879 0012 DB6A     		ldr	r3, [r3, #44]
 2880              		.loc 1 1449 6
 2881 0014 0433     		adds	r3, r3, #4
 2882 0016 3B61     		str	r3, [r7, #16]
1450:./Libraries/FatFs/Src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 2883              		.loc 1 1450 19
 2884 0018 3B68     		ldr	r3, [r7]
 2885 001a 5B0A     		lsrs	r3, r3, #9
 2886              		.loc 1 1450 32
 2887 001c FA68     		ldr	r2, [r7, #12]
 2888 001e 5289     		ldrh	r2, [r2, #10]
ARM GAS  /tmp/cceCRWeb.s 			page 77


 2889              		.loc 1 1450 5
 2890 0020 B3FBF2F3 		udiv	r3, r3, r2
 2891 0024 7B61     		str	r3, [r7, #20]
 2892              	.L182:
1451:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
1452:./Libraries/FatFs/Src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 2893              		.loc 1 1452 13
 2894 0026 3B69     		ldr	r3, [r7, #16]
 2895 0028 1A1D     		adds	r2, r3, #4
 2896 002a 3A61     		str	r2, [r7, #16]
 2897              		.loc 1 1452 7
 2898 002c 1B68     		ldr	r3, [r3]
 2899 002e BB60     		str	r3, [r7, #8]
1453:./Libraries/FatFs/Src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 2900              		.loc 1 1453 6
 2901 0030 BB68     		ldr	r3, [r7, #8]
 2902 0032 002B     		cmp	r3, #0
 2903 0034 01D1     		bne	.L178
 2904              		.loc 1 1453 24 discriminator 1
 2905 0036 0023     		movs	r3, #0
 2906 0038 10E0     		b	.L179
 2907              	.L178:
1454:./Libraries/FatFs/Src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 2908              		.loc 1 1454 6
 2909 003a 7A69     		ldr	r2, [r7, #20]
 2910 003c BB68     		ldr	r3, [r7, #8]
 2911 003e 9A42     		cmp	r2, r3
 2912 0040 07D3     		bcc	.L184
1455:./Libraries/FatFs/Src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 2913              		.loc 1 1455 6
 2914 0042 7A69     		ldr	r2, [r7, #20]
 2915 0044 BB68     		ldr	r3, [r7, #8]
 2916 0046 D31A     		subs	r3, r2, r3
 2917 0048 7B61     		str	r3, [r7, #20]
 2918              		.loc 1 1455 17
 2919 004a 3B69     		ldr	r3, [r7, #16]
 2920 004c 0433     		adds	r3, r3, #4
 2921 004e 3B61     		str	r3, [r7, #16]
1452:./Libraries/FatFs/Src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 2922              		.loc 1 1452 7
 2923 0050 E9E7     		b	.L182
 2924              	.L184:
1454:./Libraries/FatFs/Src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 2925              		.loc 1 1454 3
 2926 0052 00BF     		nop
1456:./Libraries/FatFs/Src/ff.c **** 	}
1457:./Libraries/FatFs/Src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 2927              		.loc 1 1457 14
 2928 0054 3B69     		ldr	r3, [r7, #16]
 2929 0056 1A68     		ldr	r2, [r3]
 2930              		.loc 1 1457 12
 2931 0058 7B69     		ldr	r3, [r7, #20]
 2932 005a 1344     		add	r3, r3, r2
 2933              	.L179:
1458:./Libraries/FatFs/Src/ff.c **** }
 2934              		.loc 1 1458 1
 2935 005c 1846     		mov	r0, r3
ARM GAS  /tmp/cceCRWeb.s 			page 78


 2936 005e 1C37     		adds	r7, r7, #28
 2937              	.LCFI132:
 2938              		.cfi_def_cfa_offset 4
 2939 0060 BD46     		mov	sp, r7
 2940              	.LCFI133:
 2941              		.cfi_def_cfa_register 13
 2942              		@ sp needed
 2943 0062 5DF8047B 		ldr	r7, [sp], #4
 2944              	.LCFI134:
 2945              		.cfi_restore 7
 2946              		.cfi_def_cfa_offset 0
 2947 0066 7047     		bx	lr
 2948              		.cfi_endproc
 2949              	.LFE358:
 2951              		.section	.text.dir_sdi,"ax",%progbits
 2952              		.align	1
 2953              		.syntax unified
 2954              		.thumb
 2955              		.thumb_func
 2956              		.fpu fpv5-d16
 2958              	dir_sdi:
 2959              	.LFB359:
1459:./Libraries/FatFs/Src/ff.c **** 
1460:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_FASTSEEK */
1461:./Libraries/FatFs/Src/ff.c **** 
1462:./Libraries/FatFs/Src/ff.c **** 
1463:./Libraries/FatFs/Src/ff.c **** 
1464:./Libraries/FatFs/Src/ff.c **** 
1465:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1466:./Libraries/FatFs/Src/ff.c **** /* Directory handling - Set directory index                              */
1467:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1468:./Libraries/FatFs/Src/ff.c **** 
1469:./Libraries/FatFs/Src/ff.c **** static
1470:./Libraries/FatFs/Src/ff.c **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1471:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1472:./Libraries/FatFs/Src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1473:./Libraries/FatFs/Src/ff.c **** )
1474:./Libraries/FatFs/Src/ff.c **** {
 2960              		.loc 1 1474 1
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 24
 2963              		@ frame_needed = 1, uses_anonymous_args = 0
 2964 0000 80B5     		push	{r7, lr}
 2965              	.LCFI135:
 2966              		.cfi_def_cfa_offset 8
 2967              		.cfi_offset 7, -8
 2968              		.cfi_offset 14, -4
 2969 0002 86B0     		sub	sp, sp, #24
 2970              	.LCFI136:
 2971              		.cfi_def_cfa_offset 32
 2972 0004 00AF     		add	r7, sp, #0
 2973              	.LCFI137:
 2974              		.cfi_def_cfa_register 7
 2975 0006 7860     		str	r0, [r7, #4]
 2976 0008 3960     		str	r1, [r7]
1475:./Libraries/FatFs/Src/ff.c **** 	DWORD csz, clst;
1476:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
ARM GAS  /tmp/cceCRWeb.s 			page 79


 2977              		.loc 1 1476 9
 2978 000a 7B68     		ldr	r3, [r7, #4]
 2979 000c 1B68     		ldr	r3, [r3]
 2980 000e 3B61     		str	r3, [r7, #16]
1477:./Libraries/FatFs/Src/ff.c **** 
1478:./Libraries/FatFs/Src/ff.c **** 
1479:./Libraries/FatFs/Src/ff.c **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
 2981              		.loc 1 1479 5
 2982 0010 3B68     		ldr	r3, [r7]
 2983 0012 B3F5001F 		cmp	r3, #2097152
 2984 0016 04D2     		bcs	.L186
 2985              		.loc 1 1479 91 discriminator 1
 2986 0018 3B68     		ldr	r3, [r7]
 2987 001a 03F01F03 		and	r3, r3, #31
 2988              		.loc 1 1479 84 discriminator 1
 2989 001e 002B     		cmp	r3, #0
 2990 0020 01D0     		beq	.L187
 2991              	.L186:
1480:./Libraries/FatFs/Src/ff.c **** 		return FR_INT_ERR;
 2992              		.loc 1 1480 10
 2993 0022 0223     		movs	r3, #2
 2994 0024 63E0     		b	.L188
 2995              	.L187:
1481:./Libraries/FatFs/Src/ff.c **** 	}
1482:./Libraries/FatFs/Src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
 2996              		.loc 1 1482 11
 2997 0026 7B68     		ldr	r3, [r7, #4]
 2998 0028 3A68     		ldr	r2, [r7]
 2999 002a 5A61     		str	r2, [r3, #20]
1483:./Libraries/FatFs/Src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 3000              		.loc 1 1483 7
 3001 002c 7B68     		ldr	r3, [r7, #4]
 3002 002e 9B68     		ldr	r3, [r3, #8]
 3003 0030 7B61     		str	r3, [r7, #20]
1484:./Libraries/FatFs/Src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 3004              		.loc 1 1484 5
 3005 0032 7B69     		ldr	r3, [r7, #20]
 3006 0034 002B     		cmp	r3, #0
 3007 0036 06D1     		bne	.L189
 3008              		.loc 1 1484 21 discriminator 1
 3009 0038 3B69     		ldr	r3, [r7, #16]
 3010 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3011              		.loc 1 1484 16 discriminator 1
 3012 003c 022B     		cmp	r3, #2
 3013 003e 02D9     		bls	.L189
1485:./Libraries/FatFs/Src/ff.c **** 		clst = fs->dirbase;
 3014              		.loc 1 1485 8
 3015 0040 3B69     		ldr	r3, [r7, #16]
 3016 0042 9B6A     		ldr	r3, [r3, #40]
 3017 0044 7B61     		str	r3, [r7, #20]
 3018              	.L189:
1486:./Libraries/FatFs/Src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1487:./Libraries/FatFs/Src/ff.c **** 	}
1488:./Libraries/FatFs/Src/ff.c **** 
1489:./Libraries/FatFs/Src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 3019              		.loc 1 1489 5
 3020 0046 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 80


 3021 0048 002B     		cmp	r3, #0
 3022 004a 0CD1     		bne	.L190
1490:./Libraries/FatFs/Src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 3023              		.loc 1 1490 11
 3024 004c 3B68     		ldr	r3, [r7]
 3025 004e 5B09     		lsrs	r3, r3, #5
 3026              		.loc 1 1490 25
 3027 0050 3A69     		ldr	r2, [r7, #16]
 3028 0052 1289     		ldrh	r2, [r2, #8]
 3029              		.loc 1 1490 6
 3030 0054 9342     		cmp	r3, r2
 3031 0056 01D3     		bcc	.L191
 3032              		.loc 1 1490 45 discriminator 1
 3033 0058 0223     		movs	r3, #2
 3034 005a 48E0     		b	.L188
 3035              	.L191:
1491:./Libraries/FatFs/Src/ff.c **** 		dp->sect = fs->dirbase;
 3036              		.loc 1 1491 16
 3037 005c 3B69     		ldr	r3, [r7, #16]
 3038 005e 9A6A     		ldr	r2, [r3, #40]
 3039              		.loc 1 1491 12
 3040 0060 7B68     		ldr	r3, [r7, #4]
 3041 0062 DA61     		str	r2, [r3, #28]
 3042 0064 29E0     		b	.L192
 3043              	.L190:
1492:./Libraries/FatFs/Src/ff.c **** 
1493:./Libraries/FatFs/Src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1494:./Libraries/FatFs/Src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 3044              		.loc 1 1494 18
 3045 0066 3B69     		ldr	r3, [r7, #16]
 3046 0068 5B89     		ldrh	r3, [r3, #10]
 3047              		.loc 1 1494 7
 3048 006a 5B02     		lsls	r3, r3, #9
 3049 006c FB60     		str	r3, [r7, #12]
1495:./Libraries/FatFs/Src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 3050              		.loc 1 1495 9
 3051 006e 19E0     		b	.L193
 3052              	.L197:
1496:./Libraries/FatFs/Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3053              		.loc 1 1496 11
 3054 0070 7B68     		ldr	r3, [r7, #4]
 3055 0072 7969     		ldr	r1, [r7, #20]
 3056 0074 1846     		mov	r0, r3
 3057 0076 FFF7FEFF 		bl	get_fat
 3058 007a 7861     		str	r0, [r7, #20]
1497:./Libraries/FatFs/Src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3059              		.loc 1 1497 7
 3060 007c 7B69     		ldr	r3, [r7, #20]
 3061 007e B3F1FF3F 		cmp	r3, #-1
 3062 0082 01D1     		bne	.L194
 3063              		.loc 1 1497 35 discriminator 1
 3064 0084 0123     		movs	r3, #1
 3065 0086 32E0     		b	.L188
 3066              	.L194:
1498:./Libraries/FatFs/Src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 3067              		.loc 1 1498 7
 3068 0088 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 81


 3069 008a 012B     		cmp	r3, #1
 3070 008c 04D9     		bls	.L195
 3071              		.loc 1 1498 30 discriminator 2
 3072 008e 3B69     		ldr	r3, [r7, #16]
 3073 0090 9B69     		ldr	r3, [r3, #24]
 3074              		.loc 1 1498 17 discriminator 2
 3075 0092 7A69     		ldr	r2, [r7, #20]
 3076 0094 9A42     		cmp	r2, r3
 3077 0096 01D3     		bcc	.L196
 3078              	.L195:
 3079              		.loc 1 1498 49 discriminator 3
 3080 0098 0223     		movs	r3, #2
 3081 009a 28E0     		b	.L188
 3082              	.L196:
1499:./Libraries/FatFs/Src/ff.c **** 			ofs -= csz;
 3083              		.loc 1 1499 8
 3084 009c 3A68     		ldr	r2, [r7]
 3085 009e FB68     		ldr	r3, [r7, #12]
 3086 00a0 D31A     		subs	r3, r2, r3
 3087 00a2 3B60     		str	r3, [r7]
 3088              	.L193:
1495:./Libraries/FatFs/Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3089              		.loc 1 1495 9
 3090 00a4 3A68     		ldr	r2, [r7]
 3091 00a6 FB68     		ldr	r3, [r7, #12]
 3092 00a8 9A42     		cmp	r2, r3
 3093 00aa E1D2     		bcs	.L197
1500:./Libraries/FatFs/Src/ff.c **** 		}
1501:./Libraries/FatFs/Src/ff.c **** 		dp->sect = clust2sect(fs, clst);
 3094              		.loc 1 1501 14
 3095 00ac 7969     		ldr	r1, [r7, #20]
 3096 00ae 3869     		ldr	r0, [r7, #16]
 3097 00b0 FFF7FEFF 		bl	clust2sect
 3098 00b4 0246     		mov	r2, r0
 3099              		.loc 1 1501 12
 3100 00b6 7B68     		ldr	r3, [r7, #4]
 3101 00b8 DA61     		str	r2, [r3, #28]
 3102              	.L192:
1502:./Libraries/FatFs/Src/ff.c **** 	}
1503:./Libraries/FatFs/Src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
 3103              		.loc 1 1503 12
 3104 00ba 7B68     		ldr	r3, [r7, #4]
 3105 00bc 7A69     		ldr	r2, [r7, #20]
 3106 00be 9A61     		str	r2, [r3, #24]
1504:./Libraries/FatFs/Src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
 3107              		.loc 1 1504 9
 3108 00c0 7B68     		ldr	r3, [r7, #4]
 3109 00c2 DB69     		ldr	r3, [r3, #28]
 3110              		.loc 1 1504 5
 3111 00c4 002B     		cmp	r3, #0
 3112 00c6 01D1     		bne	.L198
 3113              		.loc 1 1504 24 discriminator 1
 3114 00c8 0223     		movs	r3, #2
 3115 00ca 10E0     		b	.L188
 3116              	.L198:
1505:./Libraries/FatFs/Src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 3117              		.loc 1 1505 11
ARM GAS  /tmp/cceCRWeb.s 			page 82


 3118 00cc 7B68     		ldr	r3, [r7, #4]
 3119 00ce DA69     		ldr	r2, [r3, #28]
 3120              		.loc 1 1505 18
 3121 00d0 3B68     		ldr	r3, [r7]
 3122 00d2 5B0A     		lsrs	r3, r3, #9
 3123              		.loc 1 1505 11
 3124 00d4 1A44     		add	r2, r2, r3
 3125 00d6 7B68     		ldr	r3, [r7, #4]
 3126 00d8 DA61     		str	r2, [r3, #28]
1506:./Libraries/FatFs/Src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 3127              		.loc 1 1506 12
 3128 00da 3B69     		ldr	r3, [r7, #16]
 3129 00dc 03F13402 		add	r2, r3, #52
 3130              		.loc 1 1506 27
 3131 00e0 3B68     		ldr	r3, [r7]
 3132 00e2 C3F30803 		ubfx	r3, r3, #0, #9
 3133              		.loc 1 1506 20
 3134 00e6 1A44     		add	r2, r2, r3
 3135              		.loc 1 1506 10
 3136 00e8 7B68     		ldr	r3, [r7, #4]
 3137 00ea 1A62     		str	r2, [r3, #32]
1507:./Libraries/FatFs/Src/ff.c **** 
1508:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 3138              		.loc 1 1508 9
 3139 00ec 0023     		movs	r3, #0
 3140              	.L188:
1509:./Libraries/FatFs/Src/ff.c **** }
 3141              		.loc 1 1509 1
 3142 00ee 1846     		mov	r0, r3
 3143 00f0 1837     		adds	r7, r7, #24
 3144              	.LCFI138:
 3145              		.cfi_def_cfa_offset 8
 3146 00f2 BD46     		mov	sp, r7
 3147              	.LCFI139:
 3148              		.cfi_def_cfa_register 13
 3149              		@ sp needed
 3150 00f4 80BD     		pop	{r7, pc}
 3151              		.cfi_endproc
 3152              	.LFE359:
 3154              		.section	.text.dir_next,"ax",%progbits
 3155              		.align	1
 3156              		.syntax unified
 3157              		.thumb
 3158              		.thumb_func
 3159              		.fpu fpv5-d16
 3161              	dir_next:
 3162              	.LFB360:
1510:./Libraries/FatFs/Src/ff.c **** 
1511:./Libraries/FatFs/Src/ff.c **** 
1512:./Libraries/FatFs/Src/ff.c **** 
1513:./Libraries/FatFs/Src/ff.c **** 
1514:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1515:./Libraries/FatFs/Src/ff.c **** /* Directory handling - Move directory table index next                  */
1516:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1517:./Libraries/FatFs/Src/ff.c **** 
1518:./Libraries/FatFs/Src/ff.c **** static
1519:./Libraries/FatFs/Src/ff.c **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
ARM GAS  /tmp/cceCRWeb.s 			page 83


1520:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1521:./Libraries/FatFs/Src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1522:./Libraries/FatFs/Src/ff.c **** )
1523:./Libraries/FatFs/Src/ff.c **** {
 3163              		.loc 1 1523 1
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 24
 3166              		@ frame_needed = 1, uses_anonymous_args = 0
 3167 0000 80B5     		push	{r7, lr}
 3168              	.LCFI140:
 3169              		.cfi_def_cfa_offset 8
 3170              		.cfi_offset 7, -8
 3171              		.cfi_offset 14, -4
 3172 0002 86B0     		sub	sp, sp, #24
 3173              	.LCFI141:
 3174              		.cfi_def_cfa_offset 32
 3175 0004 00AF     		add	r7, sp, #0
 3176              	.LCFI142:
 3177              		.cfi_def_cfa_register 7
 3178 0006 7860     		str	r0, [r7, #4]
 3179 0008 3960     		str	r1, [r7]
1524:./Libraries/FatFs/Src/ff.c **** 	DWORD ofs, clst;
1525:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3180              		.loc 1 1525 9
 3181 000a 7B68     		ldr	r3, [r7, #4]
 3182 000c 1B68     		ldr	r3, [r3]
 3183 000e FB60     		str	r3, [r7, #12]
1526:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1527:./Libraries/FatFs/Src/ff.c **** 	UINT n;
1528:./Libraries/FatFs/Src/ff.c **** #endif
1529:./Libraries/FatFs/Src/ff.c **** 
1530:./Libraries/FatFs/Src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
 3184              		.loc 1 1530 10
 3185 0010 7B68     		ldr	r3, [r7, #4]
 3186 0012 5B69     		ldr	r3, [r3, #20]
 3187              		.loc 1 1530 6
 3188 0014 2033     		adds	r3, r3, #32
 3189 0016 BB60     		str	r3, [r7, #8]
1531:./Libraries/FatFs/Src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 3190              		.loc 1 1531 9
 3191 0018 7B68     		ldr	r3, [r7, #4]
 3192 001a DB69     		ldr	r3, [r3, #28]
 3193              		.loc 1 1531 5
 3194 001c 002B     		cmp	r3, #0
 3195 001e 03D0     		beq	.L200
 3196              		.loc 1 1531 16 discriminator 2
 3197 0020 BB68     		ldr	r3, [r7, #8]
 3198 0022 B3F5001F 		cmp	r3, #2097152
 3199 0026 01D3     		bcc	.L201
 3200              	.L200:
 3201              		.loc 1 1531 105 discriminator 3
 3202 0028 0423     		movs	r3, #4
 3203 002a AAE0     		b	.L202
 3204              	.L201:
1532:./Libraries/FatFs/Src/ff.c **** 
1533:./Libraries/FatFs/Src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 3205              		.loc 1 1533 10
ARM GAS  /tmp/cceCRWeb.s 			page 84


 3206 002c BB68     		ldr	r3, [r7, #8]
 3207 002e C3F30803 		ubfx	r3, r3, #0, #9
 3208              		.loc 1 1533 5
 3209 0032 002B     		cmp	r3, #0
 3210 0034 40F09880 		bne	.L203
1534:./Libraries/FatFs/Src/ff.c **** 		dp->sect++;				/* Next sector */
 3211              		.loc 1 1534 5
 3212 0038 7B68     		ldr	r3, [r7, #4]
 3213 003a DB69     		ldr	r3, [r3, #28]
 3214              		.loc 1 1534 11
 3215 003c 5A1C     		adds	r2, r3, #1
 3216 003e 7B68     		ldr	r3, [r7, #4]
 3217 0040 DA61     		str	r2, [r3, #28]
1535:./Libraries/FatFs/Src/ff.c **** 
1536:./Libraries/FatFs/Src/ff.c **** 		if (!dp->clust) {		/* Static table */
 3218              		.loc 1 1536 10
 3219 0042 7B68     		ldr	r3, [r7, #4]
 3220 0044 9B69     		ldr	r3, [r3, #24]
 3221              		.loc 1 1536 6
 3222 0046 002B     		cmp	r3, #0
 3223 0048 0BD1     		bne	.L204
1537:./Libraries/FatFs/Src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3224              		.loc 1 1537 12
 3225 004a BB68     		ldr	r3, [r7, #8]
 3226 004c 5B09     		lsrs	r3, r3, #5
 3227              		.loc 1 1537 26
 3228 004e FA68     		ldr	r2, [r7, #12]
 3229 0050 1289     		ldrh	r2, [r2, #8]
 3230              		.loc 1 1537 7
 3231 0052 9342     		cmp	r3, r2
 3232 0054 C0F08880 		bcc	.L203
1538:./Libraries/FatFs/Src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3233              		.loc 1 1538 14
 3234 0058 7B68     		ldr	r3, [r7, #4]
 3235 005a 0022     		movs	r2, #0
 3236 005c DA61     		str	r2, [r3, #28]
 3237              		.loc 1 1538 26
 3238 005e 0423     		movs	r3, #4
 3239 0060 8FE0     		b	.L202
 3240              	.L204:
1539:./Libraries/FatFs/Src/ff.c **** 			}
1540:./Libraries/FatFs/Src/ff.c **** 		}
1541:./Libraries/FatFs/Src/ff.c **** 		else {					/* Dynamic table */
1542:./Libraries/FatFs/Src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 3241              		.loc 1 1542 13
 3242 0062 BB68     		ldr	r3, [r7, #8]
 3243 0064 5B0A     		lsrs	r3, r3, #9
 3244              		.loc 1 1542 27
 3245 0066 FA68     		ldr	r2, [r7, #12]
 3246 0068 5289     		ldrh	r2, [r2, #10]
 3247              		.loc 1 1542 35
 3248 006a 013A     		subs	r2, r2, #1
 3249              		.loc 1 1542 22
 3250 006c 1340     		ands	r3, r3, r2
 3251              		.loc 1 1542 7
 3252 006e 002B     		cmp	r3, #0
 3253 0070 7AD1     		bne	.L203
ARM GAS  /tmp/cceCRWeb.s 			page 85


1543:./Libraries/FatFs/Src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 3254              		.loc 1 1543 12
 3255 0072 7A68     		ldr	r2, [r7, #4]
 3256 0074 7B68     		ldr	r3, [r7, #4]
 3257 0076 9B69     		ldr	r3, [r3, #24]
 3258 0078 1946     		mov	r1, r3
 3259 007a 1046     		mov	r0, r2
 3260 007c FFF7FEFF 		bl	get_fat
 3261 0080 7861     		str	r0, [r7, #20]
1544:./Libraries/FatFs/Src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 3262              		.loc 1 1544 8
 3263 0082 7B69     		ldr	r3, [r7, #20]
 3264 0084 012B     		cmp	r3, #1
 3265 0086 01D8     		bhi	.L205
 3266              		.loc 1 1544 27 discriminator 1
 3267 0088 0223     		movs	r3, #2
 3268 008a 7AE0     		b	.L202
 3269              	.L205:
1545:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3270              		.loc 1 1545 8
 3271 008c 7B69     		ldr	r3, [r7, #20]
 3272 008e B3F1FF3F 		cmp	r3, #-1
 3273 0092 01D1     		bne	.L206
 3274              		.loc 1 1545 36 discriminator 1
 3275 0094 0123     		movs	r3, #1
 3276 0096 74E0     		b	.L202
 3277              	.L206:
1546:./Libraries/FatFs/Src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3278              		.loc 1 1546 19
 3279 0098 FB68     		ldr	r3, [r7, #12]
 3280 009a 9B69     		ldr	r3, [r3, #24]
 3281              		.loc 1 1546 8
 3282 009c 7A69     		ldr	r2, [r7, #20]
 3283 009e 9A42     		cmp	r2, r3
 3284 00a0 58D3     		bcc	.L207
1547:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1548:./Libraries/FatFs/Src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
 3285              		.loc 1 1548 9
 3286 00a2 3B68     		ldr	r3, [r7]
 3287 00a4 002B     		cmp	r3, #0
 3288 00a6 04D1     		bne	.L208
1549:./Libraries/FatFs/Src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3289              		.loc 1 1549 16
 3290 00a8 7B68     		ldr	r3, [r7, #4]
 3291 00aa 0022     		movs	r2, #0
 3292 00ac DA61     		str	r2, [r3, #28]
 3293              		.loc 1 1549 28
 3294 00ae 0423     		movs	r3, #4
 3295 00b0 67E0     		b	.L202
 3296              	.L208:
1550:./Libraries/FatFs/Src/ff.c **** 					}
1551:./Libraries/FatFs/Src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 3297              		.loc 1 1551 13
 3298 00b2 7A68     		ldr	r2, [r7, #4]
 3299 00b4 7B68     		ldr	r3, [r7, #4]
 3300 00b6 9B69     		ldr	r3, [r3, #24]
 3301 00b8 1946     		mov	r1, r3
ARM GAS  /tmp/cceCRWeb.s 			page 86


 3302 00ba 1046     		mov	r0, r2
 3303 00bc FFF7FEFF 		bl	create_chain
 3304 00c0 7861     		str	r0, [r7, #20]
1552:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3305              		.loc 1 1552 9
 3306 00c2 7B69     		ldr	r3, [r7, #20]
 3307 00c4 002B     		cmp	r3, #0
 3308 00c6 01D1     		bne	.L209
 3309              		.loc 1 1552 28 discriminator 1
 3310 00c8 0723     		movs	r3, #7
 3311 00ca 5AE0     		b	.L202
 3312              	.L209:
1553:./Libraries/FatFs/Src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3313              		.loc 1 1553 9
 3314 00cc 7B69     		ldr	r3, [r7, #20]
 3315 00ce 012B     		cmp	r3, #1
 3316 00d0 01D1     		bne	.L210
 3317              		.loc 1 1553 28 discriminator 1
 3318 00d2 0223     		movs	r3, #2
 3319 00d4 55E0     		b	.L202
 3320              	.L210:
1554:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3321              		.loc 1 1554 9
 3322 00d6 7B69     		ldr	r3, [r7, #20]
 3323 00d8 B3F1FF3F 		cmp	r3, #-1
 3324 00dc 01D1     		bne	.L211
 3325              		.loc 1 1554 37 discriminator 1
 3326 00de 0123     		movs	r3, #1
 3327 00e0 4FE0     		b	.L202
 3328              	.L211:
1555:./Libraries/FatFs/Src/ff.c **** 					/* Clean-up the stretched table */
1556:./Libraries/FatFs/Src/ff.c **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1557:./Libraries/FatFs/Src/ff.c **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 3329              		.loc 1 1557 10
 3330 00e2 F868     		ldr	r0, [r7, #12]
 3331 00e4 FFF7FEFF 		bl	sync_window
 3332 00e8 0346     		mov	r3, r0
 3333              		.loc 1 1557 9
 3334 00ea 002B     		cmp	r3, #0
 3335 00ec 01D0     		beq	.L212
 3336              		.loc 1 1557 43 discriminator 1
 3337 00ee 0123     		movs	r3, #1
 3338 00f0 47E0     		b	.L202
 3339              	.L212:
1558:./Libraries/FatFs/Src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 3340              		.loc 1 1558 16
 3341 00f2 FB68     		ldr	r3, [r7, #12]
 3342 00f4 3433     		adds	r3, r3, #52
 3343              		.loc 1 1558 6
 3344 00f6 4FF40072 		mov	r2, #512
 3345 00fa 0021     		movs	r1, #0
 3346 00fc 1846     		mov	r0, r3
 3347 00fe FFF7FEFF 		bl	mem_set
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3348              		.loc 1 1559 13
 3349 0102 0023     		movs	r3, #0
 3350 0104 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/cceCRWeb.s 			page 87


 3351              		.loc 1 1559 32
 3352 0106 7969     		ldr	r1, [r7, #20]
 3353 0108 F868     		ldr	r0, [r7, #12]
 3354 010a FFF7FEFF 		bl	clust2sect
 3355 010e 0246     		mov	r2, r0
 3356              		.loc 1 1559 30
 3357 0110 FB68     		ldr	r3, [r7, #12]
 3358 0112 1A63     		str	r2, [r3, #48]
 3359              		.loc 1 1559 6
 3360 0114 12E0     		b	.L213
 3361              	.L215:
1560:./Libraries/FatFs/Src/ff.c **** 						fs->wflag = 1;
 3362              		.loc 1 1560 17
 3363 0116 FB68     		ldr	r3, [r7, #12]
 3364 0118 0122     		movs	r2, #1
 3365 011a DA70     		strb	r2, [r3, #3]
1561:./Libraries/FatFs/Src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 3366              		.loc 1 1561 11
 3367 011c F868     		ldr	r0, [r7, #12]
 3368 011e FFF7FEFF 		bl	sync_window
 3369 0122 0346     		mov	r3, r0
 3370              		.loc 1 1561 10
 3371 0124 002B     		cmp	r3, #0
 3372 0126 01D0     		beq	.L214
 3373              		.loc 1 1561 44 discriminator 1
 3374 0128 0123     		movs	r3, #1
 3375 012a 2AE0     		b	.L202
 3376              	.L214:
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3377              		.loc 1 1559 70 discriminator 2
 3378 012c 3B69     		ldr	r3, [r7, #16]
 3379 012e 0133     		adds	r3, r3, #1
 3380 0130 3B61     		str	r3, [r7, #16]
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3381              		.loc 1 1559 76 discriminator 2
 3382 0132 FB68     		ldr	r3, [r7, #12]
 3383 0134 1B6B     		ldr	r3, [r3, #48]
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3384              		.loc 1 1559 85 discriminator 2
 3385 0136 5A1C     		adds	r2, r3, #1
 3386 0138 FB68     		ldr	r3, [r7, #12]
 3387 013a 1A63     		str	r2, [r3, #48]
 3388              	.L213:
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3389              		.loc 1 1559 60 discriminator 1
 3390 013c FB68     		ldr	r3, [r7, #12]
 3391 013e 5B89     		ldrh	r3, [r3, #10]
 3392 0140 1A46     		mov	r2, r3
1559:./Libraries/FatFs/Src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3393              		.loc 1 1559 6 discriminator 1
 3394 0142 3B69     		ldr	r3, [r7, #16]
 3395 0144 9342     		cmp	r3, r2
 3396 0146 E6D3     		bcc	.L215
1562:./Libraries/FatFs/Src/ff.c **** 					}
1563:./Libraries/FatFs/Src/ff.c **** 					fs->winsect -= n;							/* Restore window offset */
 3397              		.loc 1 1563 18
 3398 0148 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cceCRWeb.s 			page 88


 3399 014a 1A6B     		ldr	r2, [r3, #48]
 3400 014c 3B69     		ldr	r3, [r7, #16]
 3401 014e D21A     		subs	r2, r2, r3
 3402 0150 FB68     		ldr	r3, [r7, #12]
 3403 0152 1A63     		str	r2, [r3, #48]
 3404              	.L207:
1564:./Libraries/FatFs/Src/ff.c **** #else
1565:./Libraries/FatFs/Src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1566:./Libraries/FatFs/Src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1567:./Libraries/FatFs/Src/ff.c **** #endif
1568:./Libraries/FatFs/Src/ff.c **** 				}
1569:./Libraries/FatFs/Src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
 3405              		.loc 1 1569 15
 3406 0154 7B68     		ldr	r3, [r7, #4]
 3407 0156 7A69     		ldr	r2, [r7, #20]
 3408 0158 9A61     		str	r2, [r3, #24]
1570:./Libraries/FatFs/Src/ff.c **** 				dp->sect = clust2sect(fs, clst);
 3409              		.loc 1 1570 16
 3410 015a 7969     		ldr	r1, [r7, #20]
 3411 015c F868     		ldr	r0, [r7, #12]
 3412 015e FFF7FEFF 		bl	clust2sect
 3413 0162 0246     		mov	r2, r0
 3414              		.loc 1 1570 14
 3415 0164 7B68     		ldr	r3, [r7, #4]
 3416 0166 DA61     		str	r2, [r3, #28]
 3417              	.L203:
1571:./Libraries/FatFs/Src/ff.c **** 			}
1572:./Libraries/FatFs/Src/ff.c **** 		}
1573:./Libraries/FatFs/Src/ff.c **** 	}
1574:./Libraries/FatFs/Src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
 3418              		.loc 1 1574 11
 3419 0168 7B68     		ldr	r3, [r7, #4]
 3420 016a BA68     		ldr	r2, [r7, #8]
 3421 016c 5A61     		str	r2, [r3, #20]
1575:./Libraries/FatFs/Src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3422              		.loc 1 1575 12
 3423 016e FB68     		ldr	r3, [r7, #12]
 3424 0170 03F13402 		add	r2, r3, #52
 3425              		.loc 1 1575 26
 3426 0174 BB68     		ldr	r3, [r7, #8]
 3427 0176 C3F30803 		ubfx	r3, r3, #0, #9
 3428              		.loc 1 1575 20
 3429 017a 1A44     		add	r2, r2, r3
 3430              		.loc 1 1575 10
 3431 017c 7B68     		ldr	r3, [r7, #4]
 3432 017e 1A62     		str	r2, [r3, #32]
1576:./Libraries/FatFs/Src/ff.c **** 
1577:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 3433              		.loc 1 1577 9
 3434 0180 0023     		movs	r3, #0
 3435              	.L202:
1578:./Libraries/FatFs/Src/ff.c **** }
 3436              		.loc 1 1578 1
 3437 0182 1846     		mov	r0, r3
 3438 0184 1837     		adds	r7, r7, #24
 3439              	.LCFI143:
 3440              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceCRWeb.s 			page 89


 3441 0186 BD46     		mov	sp, r7
 3442              	.LCFI144:
 3443              		.cfi_def_cfa_register 13
 3444              		@ sp needed
 3445 0188 80BD     		pop	{r7, pc}
 3446              		.cfi_endproc
 3447              	.LFE360:
 3449              		.section	.text.dir_alloc,"ax",%progbits
 3450              		.align	1
 3451              		.syntax unified
 3452              		.thumb
 3453              		.thumb_func
 3454              		.fpu fpv5-d16
 3456              	dir_alloc:
 3457              	.LFB361:
1579:./Libraries/FatFs/Src/ff.c **** 
1580:./Libraries/FatFs/Src/ff.c **** 
1581:./Libraries/FatFs/Src/ff.c **** 
1582:./Libraries/FatFs/Src/ff.c **** 
1583:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1584:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1585:./Libraries/FatFs/Src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1586:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1587:./Libraries/FatFs/Src/ff.c **** 
1588:./Libraries/FatFs/Src/ff.c **** static
1589:./Libraries/FatFs/Src/ff.c **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1590:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:./Libraries/FatFs/Src/ff.c **** 	UINT nent		/* Number of contiguous entries to allocate */
1592:./Libraries/FatFs/Src/ff.c **** )
1593:./Libraries/FatFs/Src/ff.c **** {
 3458              		.loc 1 1593 1
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 24
 3461              		@ frame_needed = 1, uses_anonymous_args = 0
 3462 0000 80B5     		push	{r7, lr}
 3463              	.LCFI145:
 3464              		.cfi_def_cfa_offset 8
 3465              		.cfi_offset 7, -8
 3466              		.cfi_offset 14, -4
 3467 0002 86B0     		sub	sp, sp, #24
 3468              	.LCFI146:
 3469              		.cfi_def_cfa_offset 32
 3470 0004 00AF     		add	r7, sp, #0
 3471              	.LCFI147:
 3472              		.cfi_def_cfa_register 7
 3473 0006 7860     		str	r0, [r7, #4]
 3474 0008 3960     		str	r1, [r7]
1594:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
1595:./Libraries/FatFs/Src/ff.c **** 	UINT n;
1596:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3475              		.loc 1 1596 9
 3476 000a 7B68     		ldr	r3, [r7, #4]
 3477 000c 1B68     		ldr	r3, [r3]
 3478 000e FB60     		str	r3, [r7, #12]
1597:./Libraries/FatFs/Src/ff.c **** 
1598:./Libraries/FatFs/Src/ff.c **** 
1599:./Libraries/FatFs/Src/ff.c **** 	res = dir_sdi(dp, 0);
ARM GAS  /tmp/cceCRWeb.s 			page 90


 3479              		.loc 1 1599 8
 3480 0010 0021     		movs	r1, #0
 3481 0012 7868     		ldr	r0, [r7, #4]
 3482 0014 FFF7FEFF 		bl	dir_sdi
 3483 0018 0346     		mov	r3, r0
 3484 001a FB75     		strb	r3, [r7, #23]
1600:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 3485              		.loc 1 1600 5
 3486 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3487 001e 002B     		cmp	r3, #0
 3488 0020 2BD1     		bne	.L217
1601:./Libraries/FatFs/Src/ff.c **** 		n = 0;
 3489              		.loc 1 1601 5
 3490 0022 0023     		movs	r3, #0
 3491 0024 3B61     		str	r3, [r7, #16]
 3492              	.L223:
1602:./Libraries/FatFs/Src/ff.c **** 		do {
1603:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, dp->sect);
 3493              		.loc 1 1603 10
 3494 0026 7B68     		ldr	r3, [r7, #4]
 3495 0028 DB69     		ldr	r3, [r3, #28]
 3496 002a 1946     		mov	r1, r3
 3497 002c F868     		ldr	r0, [r7, #12]
 3498 002e FFF7FEFF 		bl	move_window
 3499 0032 0346     		mov	r3, r0
 3500 0034 FB75     		strb	r3, [r7, #23]
1604:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 3501              		.loc 1 1604 7
 3502 0036 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3503 0038 002B     		cmp	r3, #0
 3504 003a 1DD1     		bne	.L226
1605:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1606:./Libraries/FatFs/Src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1607:./Libraries/FatFs/Src/ff.c **** #else
1608:./Libraries/FatFs/Src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 3505              		.loc 1 1608 10
 3506 003c 7B68     		ldr	r3, [r7, #4]
 3507 003e 1B6A     		ldr	r3, [r3, #32]
 3508              		.loc 1 1608 15
 3509 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3510              		.loc 1 1608 7
 3511 0042 E52B     		cmp	r3, #229
 3512 0044 04D0     		beq	.L219
 3513              		.loc 1 1608 39 discriminator 1
 3514 0046 7B68     		ldr	r3, [r7, #4]
 3515 0048 1B6A     		ldr	r3, [r3, #32]
 3516              		.loc 1 1608 44 discriminator 1
 3517 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3518              		.loc 1 1608 34 discriminator 1
 3519 004c 002B     		cmp	r3, #0
 3520 004e 07D1     		bne	.L220
 3521              	.L219:
1609:./Libraries/FatFs/Src/ff.c **** #endif
1610:./Libraries/FatFs/Src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 3522              		.loc 1 1610 8
 3523 0050 3B69     		ldr	r3, [r7, #16]
 3524 0052 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cceCRWeb.s 			page 91


 3525 0054 3B61     		str	r3, [r7, #16]
 3526 0056 3A69     		ldr	r2, [r7, #16]
 3527 0058 3B68     		ldr	r3, [r7]
 3528 005a 9A42     		cmp	r2, r3
 3529 005c 02D1     		bne	.L222
 3530              		.loc 1 1610 5
 3531 005e 0CE0     		b	.L217
 3532              	.L220:
1611:./Libraries/FatFs/Src/ff.c **** 			} else {
1612:./Libraries/FatFs/Src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 3533              		.loc 1 1612 7
 3534 0060 0023     		movs	r3, #0
 3535 0062 3B61     		str	r3, [r7, #16]
 3536              	.L222:
1613:./Libraries/FatFs/Src/ff.c **** 			}
1614:./Libraries/FatFs/Src/ff.c **** 			res = dir_next(dp, 1);
 3537              		.loc 1 1614 10
 3538 0064 0121     		movs	r1, #1
 3539 0066 7868     		ldr	r0, [r7, #4]
 3540 0068 FFF7FEFF 		bl	dir_next
 3541 006c 0346     		mov	r3, r0
 3542 006e FB75     		strb	r3, [r7, #23]
1615:./Libraries/FatFs/Src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3543              		.loc 1 1615 3
 3544 0070 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3545 0072 002B     		cmp	r3, #0
 3546 0074 D7D0     		beq	.L223
 3547 0076 00E0     		b	.L217
 3548              	.L226:
1604:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
 3549              		.loc 1 1604 4
 3550 0078 00BF     		nop
 3551              	.L217:
1616:./Libraries/FatFs/Src/ff.c **** 	}
1617:./Libraries/FatFs/Src/ff.c **** 
1618:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 3552              		.loc 1 1618 5
 3553 007a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3554 007c 042B     		cmp	r3, #4
 3555 007e 01D1     		bne	.L224
 3556              		.loc 1 1618 29 discriminator 1
 3557 0080 0723     		movs	r3, #7
 3558 0082 FB75     		strb	r3, [r7, #23]
 3559              	.L224:
1619:./Libraries/FatFs/Src/ff.c **** 	return res;
 3560              		.loc 1 1619 9
 3561 0084 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1620:./Libraries/FatFs/Src/ff.c **** }
 3562              		.loc 1 1620 1
 3563 0086 1846     		mov	r0, r3
 3564 0088 1837     		adds	r7, r7, #24
 3565              	.LCFI148:
 3566              		.cfi_def_cfa_offset 8
 3567 008a BD46     		mov	sp, r7
 3568              	.LCFI149:
 3569              		.cfi_def_cfa_register 13
 3570              		@ sp needed
ARM GAS  /tmp/cceCRWeb.s 			page 92


 3571 008c 80BD     		pop	{r7, pc}
 3572              		.cfi_endproc
 3573              	.LFE361:
 3575              		.section	.text.ld_clust,"ax",%progbits
 3576              		.align	1
 3577              		.syntax unified
 3578              		.thumb
 3579              		.thumb_func
 3580              		.fpu fpv5-d16
 3582              	ld_clust:
 3583              	.LFB362:
1621:./Libraries/FatFs/Src/ff.c **** 
1622:./Libraries/FatFs/Src/ff.c **** #endif	/* !_FS_READONLY */
1623:./Libraries/FatFs/Src/ff.c **** 
1624:./Libraries/FatFs/Src/ff.c **** 
1625:./Libraries/FatFs/Src/ff.c **** 
1626:./Libraries/FatFs/Src/ff.c **** 
1627:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1628:./Libraries/FatFs/Src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1629:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1630:./Libraries/FatFs/Src/ff.c **** 
1631:./Libraries/FatFs/Src/ff.c **** static
1632:./Libraries/FatFs/Src/ff.c **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1633:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,		/* Pointer to the fs object */
1634:./Libraries/FatFs/Src/ff.c **** 	const BYTE* dir	/* Pointer to the key entry */
1635:./Libraries/FatFs/Src/ff.c **** )
1636:./Libraries/FatFs/Src/ff.c **** {
 3584              		.loc 1 1636 1
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 16
 3587              		@ frame_needed = 1, uses_anonymous_args = 0
 3588 0000 80B5     		push	{r7, lr}
 3589              	.LCFI150:
 3590              		.cfi_def_cfa_offset 8
 3591              		.cfi_offset 7, -8
 3592              		.cfi_offset 14, -4
 3593 0002 84B0     		sub	sp, sp, #16
 3594              	.LCFI151:
 3595              		.cfi_def_cfa_offset 24
 3596 0004 00AF     		add	r7, sp, #0
 3597              	.LCFI152:
 3598              		.cfi_def_cfa_register 7
 3599 0006 7860     		str	r0, [r7, #4]
 3600 0008 3960     		str	r1, [r7]
1637:./Libraries/FatFs/Src/ff.c **** 	DWORD cl;
1638:./Libraries/FatFs/Src/ff.c **** 
1639:./Libraries/FatFs/Src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 3601              		.loc 1 1639 7
 3602 000a 3B68     		ldr	r3, [r7]
 3603 000c 1A33     		adds	r3, r3, #26
 3604 000e 1846     		mov	r0, r3
 3605 0010 FFF7FEFF 		bl	ld_word
 3606 0014 0346     		mov	r3, r0
 3607              		.loc 1 1639 5
 3608 0016 FB60     		str	r3, [r7, #12]
1640:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3609              		.loc 1 1640 8
ARM GAS  /tmp/cceCRWeb.s 			page 93


 3610 0018 7B68     		ldr	r3, [r7, #4]
 3611 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3612              		.loc 1 1640 5
 3613 001c 032B     		cmp	r3, #3
 3614 001e 09D1     		bne	.L228
1641:./Libraries/FatFs/Src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 3615              		.loc 1 1641 16
 3616 0020 3B68     		ldr	r3, [r7]
 3617 0022 1433     		adds	r3, r3, #20
 3618 0024 1846     		mov	r0, r3
 3619 0026 FFF7FEFF 		bl	ld_word
 3620 002a 0346     		mov	r3, r0
 3621              		.loc 1 1641 45
 3622 002c 1B04     		lsls	r3, r3, #16
 3623              		.loc 1 1641 6
 3624 002e FA68     		ldr	r2, [r7, #12]
 3625 0030 1343     		orrs	r3, r3, r2
 3626 0032 FB60     		str	r3, [r7, #12]
 3627              	.L228:
1642:./Libraries/FatFs/Src/ff.c **** 	}
1643:./Libraries/FatFs/Src/ff.c **** 
1644:./Libraries/FatFs/Src/ff.c **** 	return cl;
 3628              		.loc 1 1644 9
 3629 0034 FB68     		ldr	r3, [r7, #12]
1645:./Libraries/FatFs/Src/ff.c **** }
 3630              		.loc 1 1645 1
 3631 0036 1846     		mov	r0, r3
 3632 0038 1037     		adds	r7, r7, #16
 3633              	.LCFI153:
 3634              		.cfi_def_cfa_offset 8
 3635 003a BD46     		mov	sp, r7
 3636              	.LCFI154:
 3637              		.cfi_def_cfa_register 13
 3638              		@ sp needed
 3639 003c 80BD     		pop	{r7, pc}
 3640              		.cfi_endproc
 3641              	.LFE362:
 3643              		.section	.text.st_clust,"ax",%progbits
 3644              		.align	1
 3645              		.syntax unified
 3646              		.thumb
 3647              		.thumb_func
 3648              		.fpu fpv5-d16
 3650              	st_clust:
 3651              	.LFB363:
1646:./Libraries/FatFs/Src/ff.c **** 
1647:./Libraries/FatFs/Src/ff.c **** 
1648:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1649:./Libraries/FatFs/Src/ff.c **** static
1650:./Libraries/FatFs/Src/ff.c **** void st_clust (
1651:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1652:./Libraries/FatFs/Src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1653:./Libraries/FatFs/Src/ff.c **** 	DWORD cl	/* Value to be set */
1654:./Libraries/FatFs/Src/ff.c **** )
1655:./Libraries/FatFs/Src/ff.c **** {
 3652              		.loc 1 1655 1
 3653              		.cfi_startproc
ARM GAS  /tmp/cceCRWeb.s 			page 94


 3654              		@ args = 0, pretend = 0, frame = 16
 3655              		@ frame_needed = 1, uses_anonymous_args = 0
 3656 0000 80B5     		push	{r7, lr}
 3657              	.LCFI155:
 3658              		.cfi_def_cfa_offset 8
 3659              		.cfi_offset 7, -8
 3660              		.cfi_offset 14, -4
 3661 0002 84B0     		sub	sp, sp, #16
 3662              	.LCFI156:
 3663              		.cfi_def_cfa_offset 24
 3664 0004 00AF     		add	r7, sp, #0
 3665              	.LCFI157:
 3666              		.cfi_def_cfa_register 7
 3667 0006 F860     		str	r0, [r7, #12]
 3668 0008 B960     		str	r1, [r7, #8]
 3669 000a 7A60     		str	r2, [r7, #4]
1656:./Libraries/FatFs/Src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 3670              		.loc 1 1656 2
 3671 000c BB68     		ldr	r3, [r7, #8]
 3672 000e 1A33     		adds	r3, r3, #26
 3673 0010 7A68     		ldr	r2, [r7, #4]
 3674 0012 92B2     		uxth	r2, r2
 3675 0014 1146     		mov	r1, r2
 3676 0016 1846     		mov	r0, r3
 3677 0018 FFF7FEFF 		bl	st_word
1657:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3678              		.loc 1 1657 8
 3679 001c FB68     		ldr	r3, [r7, #12]
 3680 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3681              		.loc 1 1657 5
 3682 0020 032B     		cmp	r3, #3
 3683 0022 09D1     		bne	.L232
1658:./Libraries/FatFs/Src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 3684              		.loc 1 1658 3
 3685 0024 BB68     		ldr	r3, [r7, #8]
 3686 0026 03F11402 		add	r2, r3, #20
 3687              		.loc 1 1658 42
 3688 002a 7B68     		ldr	r3, [r7, #4]
 3689 002c 1B0C     		lsrs	r3, r3, #16
 3690              		.loc 1 1658 3
 3691 002e 9BB2     		uxth	r3, r3
 3692 0030 1946     		mov	r1, r3
 3693 0032 1046     		mov	r0, r2
 3694 0034 FFF7FEFF 		bl	st_word
 3695              	.L232:
1659:./Libraries/FatFs/Src/ff.c **** 	}
1660:./Libraries/FatFs/Src/ff.c **** }
 3696              		.loc 1 1660 1
 3697 0038 00BF     		nop
 3698 003a 1037     		adds	r7, r7, #16
 3699              	.LCFI158:
 3700              		.cfi_def_cfa_offset 8
 3701 003c BD46     		mov	sp, r7
 3702              	.LCFI159:
 3703              		.cfi_def_cfa_register 13
 3704              		@ sp needed
 3705 003e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cceCRWeb.s 			page 95


 3706              		.cfi_endproc
 3707              	.LFE363:
 3709              		.section	.text.dir_read,"ax",%progbits
 3710              		.align	1
 3711              		.syntax unified
 3712              		.thumb
 3713              		.thumb_func
 3714              		.fpu fpv5-d16
 3716              	dir_read:
 3717              	.LFB364:
1661:./Libraries/FatFs/Src/ff.c **** #endif
1662:./Libraries/FatFs/Src/ff.c **** 
1663:./Libraries/FatFs/Src/ff.c **** 
1664:./Libraries/FatFs/Src/ff.c **** 
1665:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
1666:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------------------------------*/
1667:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: LFN handling                                                  */
1668:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------------------------------*/
1669:./Libraries/FatFs/Src/ff.c **** static
1670:./Libraries/FatFs/Src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1671:./Libraries/FatFs/Src/ff.c **** 
1672:./Libraries/FatFs/Src/ff.c **** 
1673:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------------------------*/
1674:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1675:./Libraries/FatFs/Src/ff.c **** /*--------------------------------------------------------*/
1676:./Libraries/FatFs/Src/ff.c **** static
1677:./Libraries/FatFs/Src/ff.c **** int cmp_lfn (				/* 1:matched, 0:not matched */
1678:./Libraries/FatFs/Src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1679:./Libraries/FatFs/Src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1680:./Libraries/FatFs/Src/ff.c **** )
1681:./Libraries/FatFs/Src/ff.c **** {
1682:./Libraries/FatFs/Src/ff.c **** 	UINT i, s;
1683:./Libraries/FatFs/Src/ff.c **** 	WCHAR wc, uc;
1684:./Libraries/FatFs/Src/ff.c **** 
1685:./Libraries/FatFs/Src/ff.c **** 
1686:./Libraries/FatFs/Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1687:./Libraries/FatFs/Src/ff.c **** 
1688:./Libraries/FatFs/Src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1689:./Libraries/FatFs/Src/ff.c **** 
1690:./Libraries/FatFs/Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1691:./Libraries/FatFs/Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1692:./Libraries/FatFs/Src/ff.c **** 		if (wc) {
1693:./Libraries/FatFs/Src/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1694:./Libraries/FatFs/Src/ff.c **** 				return 0;					/* Not matched */
1695:./Libraries/FatFs/Src/ff.c **** 			}
1696:./Libraries/FatFs/Src/ff.c **** 			wc = uc;
1697:./Libraries/FatFs/Src/ff.c **** 		} else {
1698:./Libraries/FatFs/Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1699:./Libraries/FatFs/Src/ff.c **** 		}
1700:./Libraries/FatFs/Src/ff.c **** 	}
1701:./Libraries/FatFs/Src/ff.c **** 
1702:./Libraries/FatFs/Src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1703:./Libraries/FatFs/Src/ff.c **** 
1704:./Libraries/FatFs/Src/ff.c **** 	return 1;		/* The part of LFN matched */
1705:./Libraries/FatFs/Src/ff.c **** }
1706:./Libraries/FatFs/Src/ff.c **** 
1707:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 96


1708:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1709:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------*/
1710:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1711:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------*/
1712:./Libraries/FatFs/Src/ff.c **** static
1713:./Libraries/FatFs/Src/ff.c **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1714:./Libraries/FatFs/Src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1715:./Libraries/FatFs/Src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1716:./Libraries/FatFs/Src/ff.c **** )
1717:./Libraries/FatFs/Src/ff.c **** {
1718:./Libraries/FatFs/Src/ff.c **** 	UINT i, s;
1719:./Libraries/FatFs/Src/ff.c **** 	WCHAR wc, uc;
1720:./Libraries/FatFs/Src/ff.c **** 
1721:./Libraries/FatFs/Src/ff.c **** 
1722:./Libraries/FatFs/Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1723:./Libraries/FatFs/Src/ff.c **** 
1724:./Libraries/FatFs/Src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1725:./Libraries/FatFs/Src/ff.c **** 
1726:./Libraries/FatFs/Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1727:./Libraries/FatFs/Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1728:./Libraries/FatFs/Src/ff.c **** 		if (wc) {
1729:./Libraries/FatFs/Src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1730:./Libraries/FatFs/Src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1731:./Libraries/FatFs/Src/ff.c **** 		} else {
1732:./Libraries/FatFs/Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1733:./Libraries/FatFs/Src/ff.c **** 		}
1734:./Libraries/FatFs/Src/ff.c **** 	}
1735:./Libraries/FatFs/Src/ff.c **** 
1736:./Libraries/FatFs/Src/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1737:./Libraries/FatFs/Src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1738:./Libraries/FatFs/Src/ff.c **** 		lfnbuf[i] = 0;
1739:./Libraries/FatFs/Src/ff.c **** 	}
1740:./Libraries/FatFs/Src/ff.c **** 
1741:./Libraries/FatFs/Src/ff.c **** 	return 1;		/* The part of LFN is valid */
1742:./Libraries/FatFs/Src/ff.c **** }
1743:./Libraries/FatFs/Src/ff.c **** #endif
1744:./Libraries/FatFs/Src/ff.c **** 
1745:./Libraries/FatFs/Src/ff.c **** 
1746:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
1747:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------*/
1748:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1749:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------*/
1750:./Libraries/FatFs/Src/ff.c **** static
1751:./Libraries/FatFs/Src/ff.c **** void put_lfn (
1752:./Libraries/FatFs/Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1753:./Libraries/FatFs/Src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1754:./Libraries/FatFs/Src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1755:./Libraries/FatFs/Src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1756:./Libraries/FatFs/Src/ff.c **** )
1757:./Libraries/FatFs/Src/ff.c **** {
1758:./Libraries/FatFs/Src/ff.c **** 	UINT i, s;
1759:./Libraries/FatFs/Src/ff.c **** 	WCHAR wc;
1760:./Libraries/FatFs/Src/ff.c **** 
1761:./Libraries/FatFs/Src/ff.c **** 
1762:./Libraries/FatFs/Src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1763:./Libraries/FatFs/Src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1764:./Libraries/FatFs/Src/ff.c **** 	dir[LDIR_Type] = 0;
ARM GAS  /tmp/cceCRWeb.s 			page 97


1765:./Libraries/FatFs/Src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1766:./Libraries/FatFs/Src/ff.c **** 
1767:./Libraries/FatFs/Src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1768:./Libraries/FatFs/Src/ff.c **** 	s = wc = 0;
1769:./Libraries/FatFs/Src/ff.c **** 	do {
1770:./Libraries/FatFs/Src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1771:./Libraries/FatFs/Src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1772:./Libraries/FatFs/Src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1773:./Libraries/FatFs/Src/ff.c **** 	} while (++s < 13);
1774:./Libraries/FatFs/Src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1775:./Libraries/FatFs/Src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1776:./Libraries/FatFs/Src/ff.c **** }
1777:./Libraries/FatFs/Src/ff.c **** 
1778:./Libraries/FatFs/Src/ff.c **** #endif	/* !_FS_READONLY */
1779:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_LFN != 0 */
1780:./Libraries/FatFs/Src/ff.c **** 
1781:./Libraries/FatFs/Src/ff.c **** 
1782:./Libraries/FatFs/Src/ff.c **** 
1783:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0 && !_FS_READONLY
1784:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1785:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1786:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1787:./Libraries/FatFs/Src/ff.c **** 
1788:./Libraries/FatFs/Src/ff.c **** static
1789:./Libraries/FatFs/Src/ff.c **** void gen_numname (
1790:./Libraries/FatFs/Src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1791:./Libraries/FatFs/Src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1792:./Libraries/FatFs/Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1793:./Libraries/FatFs/Src/ff.c **** 	UINT seq			/* Sequence number */
1794:./Libraries/FatFs/Src/ff.c **** )
1795:./Libraries/FatFs/Src/ff.c **** {
1796:./Libraries/FatFs/Src/ff.c **** 	BYTE ns[8], c;
1797:./Libraries/FatFs/Src/ff.c **** 	UINT i, j;
1798:./Libraries/FatFs/Src/ff.c **** 	WCHAR wc;
1799:./Libraries/FatFs/Src/ff.c **** 	DWORD sr;
1800:./Libraries/FatFs/Src/ff.c **** 
1801:./Libraries/FatFs/Src/ff.c **** 
1802:./Libraries/FatFs/Src/ff.c **** 	mem_cpy(dst, src, 11);
1803:./Libraries/FatFs/Src/ff.c **** 
1804:./Libraries/FatFs/Src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1805:./Libraries/FatFs/Src/ff.c **** 		sr = seq;
1806:./Libraries/FatFs/Src/ff.c **** 		while (*lfn) {	/* Create a CRC */
1807:./Libraries/FatFs/Src/ff.c **** 			wc = *lfn++;
1808:./Libraries/FatFs/Src/ff.c **** 			for (i = 0; i < 16; i++) {
1809:./Libraries/FatFs/Src/ff.c **** 				sr = (sr << 1) + (wc & 1);
1810:./Libraries/FatFs/Src/ff.c **** 				wc >>= 1;
1811:./Libraries/FatFs/Src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1812:./Libraries/FatFs/Src/ff.c **** 			}
1813:./Libraries/FatFs/Src/ff.c **** 		}
1814:./Libraries/FatFs/Src/ff.c **** 		seq = (UINT)sr;
1815:./Libraries/FatFs/Src/ff.c **** 	}
1816:./Libraries/FatFs/Src/ff.c **** 
1817:./Libraries/FatFs/Src/ff.c **** 	/* itoa (hexdecimal) */
1818:./Libraries/FatFs/Src/ff.c **** 	i = 7;
1819:./Libraries/FatFs/Src/ff.c **** 	do {
1820:./Libraries/FatFs/Src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
1821:./Libraries/FatFs/Src/ff.c **** 		if (c > '9') c += 7;
ARM GAS  /tmp/cceCRWeb.s 			page 98


1822:./Libraries/FatFs/Src/ff.c **** 		ns[i--] = c;
1823:./Libraries/FatFs/Src/ff.c **** 		seq /= 16;
1824:./Libraries/FatFs/Src/ff.c **** 	} while (seq);
1825:./Libraries/FatFs/Src/ff.c **** 	ns[i] = '~';
1826:./Libraries/FatFs/Src/ff.c **** 
1827:./Libraries/FatFs/Src/ff.c **** 	/* Append the number */
1828:./Libraries/FatFs/Src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1829:./Libraries/FatFs/Src/ff.c **** 		if (IsDBCS1(dst[j])) {
1830:./Libraries/FatFs/Src/ff.c **** 			if (j == i - 1) break;
1831:./Libraries/FatFs/Src/ff.c **** 			j++;
1832:./Libraries/FatFs/Src/ff.c **** 		}
1833:./Libraries/FatFs/Src/ff.c **** 	}
1834:./Libraries/FatFs/Src/ff.c **** 	do {
1835:./Libraries/FatFs/Src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1836:./Libraries/FatFs/Src/ff.c **** 	} while (j < 8);
1837:./Libraries/FatFs/Src/ff.c **** }
1838:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1839:./Libraries/FatFs/Src/ff.c **** 
1840:./Libraries/FatFs/Src/ff.c **** 
1841:./Libraries/FatFs/Src/ff.c **** 
1842:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
1843:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1844:./Libraries/FatFs/Src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1845:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1846:./Libraries/FatFs/Src/ff.c **** 
1847:./Libraries/FatFs/Src/ff.c **** static
1848:./Libraries/FatFs/Src/ff.c **** BYTE sum_sfn (
1849:./Libraries/FatFs/Src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1850:./Libraries/FatFs/Src/ff.c **** )
1851:./Libraries/FatFs/Src/ff.c **** {
1852:./Libraries/FatFs/Src/ff.c **** 	BYTE sum = 0;
1853:./Libraries/FatFs/Src/ff.c **** 	UINT n = 11;
1854:./Libraries/FatFs/Src/ff.c **** 
1855:./Libraries/FatFs/Src/ff.c **** 	do {
1856:./Libraries/FatFs/Src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
1857:./Libraries/FatFs/Src/ff.c **** 	} while (--n);
1858:./Libraries/FatFs/Src/ff.c **** 	return sum;
1859:./Libraries/FatFs/Src/ff.c **** }
1860:./Libraries/FatFs/Src/ff.c **** 
1861:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_LFN != 0 */
1862:./Libraries/FatFs/Src/ff.c **** 
1863:./Libraries/FatFs/Src/ff.c **** 
1864:./Libraries/FatFs/Src/ff.c **** 
1865:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
1866:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1867:./Libraries/FatFs/Src/ff.c **** /* exFAT: Checksum                                                       */
1868:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
1869:./Libraries/FatFs/Src/ff.c **** 
1870:./Libraries/FatFs/Src/ff.c **** static
1871:./Libraries/FatFs/Src/ff.c **** WORD xdir_sum (			/* Get checksum of the directoly block */
1872:./Libraries/FatFs/Src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
1873:./Libraries/FatFs/Src/ff.c **** )
1874:./Libraries/FatFs/Src/ff.c **** {
1875:./Libraries/FatFs/Src/ff.c **** 	UINT i, szblk;
1876:./Libraries/FatFs/Src/ff.c **** 	WORD sum;
1877:./Libraries/FatFs/Src/ff.c **** 
1878:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 99


1879:./Libraries/FatFs/Src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1880:./Libraries/FatFs/Src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
1881:./Libraries/FatFs/Src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1882:./Libraries/FatFs/Src/ff.c **** 			i++;
1883:./Libraries/FatFs/Src/ff.c **** 		} else {
1884:./Libraries/FatFs/Src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1885:./Libraries/FatFs/Src/ff.c **** 		}
1886:./Libraries/FatFs/Src/ff.c **** 	}
1887:./Libraries/FatFs/Src/ff.c **** 	return sum;
1888:./Libraries/FatFs/Src/ff.c **** }
1889:./Libraries/FatFs/Src/ff.c **** 
1890:./Libraries/FatFs/Src/ff.c **** 
1891:./Libraries/FatFs/Src/ff.c **** 
1892:./Libraries/FatFs/Src/ff.c **** static
1893:./Libraries/FatFs/Src/ff.c **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1894:./Libraries/FatFs/Src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
1895:./Libraries/FatFs/Src/ff.c **** )
1896:./Libraries/FatFs/Src/ff.c **** {
1897:./Libraries/FatFs/Src/ff.c **** 	WCHAR chr;
1898:./Libraries/FatFs/Src/ff.c **** 	WORD sum = 0;
1899:./Libraries/FatFs/Src/ff.c **** 
1900:./Libraries/FatFs/Src/ff.c **** 
1901:./Libraries/FatFs/Src/ff.c **** 	while ((chr = *name++) != 0) {
1902:./Libraries/FatFs/Src/ff.c **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1903:./Libraries/FatFs/Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1904:./Libraries/FatFs/Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1905:./Libraries/FatFs/Src/ff.c **** 	}
1906:./Libraries/FatFs/Src/ff.c **** 	return sum;
1907:./Libraries/FatFs/Src/ff.c **** }
1908:./Libraries/FatFs/Src/ff.c **** 
1909:./Libraries/FatFs/Src/ff.c **** 
1910:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY && _USE_MKFS
1911:./Libraries/FatFs/Src/ff.c **** static
1912:./Libraries/FatFs/Src/ff.c **** DWORD xsum32 (
1913:./Libraries/FatFs/Src/ff.c **** 	BYTE  dat,	/* Data to be sumed */
1914:./Libraries/FatFs/Src/ff.c **** 	DWORD sum	/* Previous value */
1915:./Libraries/FatFs/Src/ff.c **** )
1916:./Libraries/FatFs/Src/ff.c **** {
1917:./Libraries/FatFs/Src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1918:./Libraries/FatFs/Src/ff.c **** 	return sum;
1919:./Libraries/FatFs/Src/ff.c **** }
1920:./Libraries/FatFs/Src/ff.c **** #endif
1921:./Libraries/FatFs/Src/ff.c **** 
1922:./Libraries/FatFs/Src/ff.c **** 
1923:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1924:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------------*/
1925:./Libraries/FatFs/Src/ff.c **** /* exFAT: Get object information from a directory block */
1926:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------------*/
1927:./Libraries/FatFs/Src/ff.c **** 
1928:./Libraries/FatFs/Src/ff.c **** static
1929:./Libraries/FatFs/Src/ff.c **** void get_xdir_info (
1930:./Libraries/FatFs/Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1931:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1932:./Libraries/FatFs/Src/ff.c **** )
1933:./Libraries/FatFs/Src/ff.c **** {
1934:./Libraries/FatFs/Src/ff.c **** 	UINT di, si;
1935:./Libraries/FatFs/Src/ff.c **** 	WCHAR w;
ARM GAS  /tmp/cceCRWeb.s 			page 100


1936:./Libraries/FatFs/Src/ff.c **** #if !_LFN_UNICODE
1937:./Libraries/FatFs/Src/ff.c **** 	UINT nc;
1938:./Libraries/FatFs/Src/ff.c **** #endif
1939:./Libraries/FatFs/Src/ff.c **** 
1940:./Libraries/FatFs/Src/ff.c **** 	/* Get file name */
1941:./Libraries/FatFs/Src/ff.c **** 	di = 0;
1942:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
1943:./Libraries/FatFs/Src/ff.c **** 	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
1944:./Libraries/FatFs/Src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1945:./Libraries/FatFs/Src/ff.c **** 		w = ld_word(dirb + si);					/* Get a character */
1946:./Libraries/FatFs/Src/ff.c **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
1947:./Libraries/FatFs/Src/ff.c **** 		fno->fname[di] = w;						/* Store it */
1948:./Libraries/FatFs/Src/ff.c **** 	}
1949:./Libraries/FatFs/Src/ff.c **** #else
1950:./Libraries/FatFs/Src/ff.c **** 	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1951:./Libraries/FatFs/Src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1952:./Libraries/FatFs/Src/ff.c **** 		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
1953:./Libraries/FatFs/Src/ff.c **** 		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
1954:./Libraries/FatFs/Src/ff.c **** 			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
1955:./Libraries/FatFs/Src/ff.c **** 		}
1956:./Libraries/FatFs/Src/ff.c **** 		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessi
1957:./Libraries/FatFs/Src/ff.c **** 		fno->fname[di++] = (char)w;
1958:./Libraries/FatFs/Src/ff.c **** 	}
1959:./Libraries/FatFs/Src/ff.c **** #endif
1960:./Libraries/FatFs/Src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
1961:./Libraries/FatFs/Src/ff.c **** 	fno->fname[di] = 0;						/* Terminate file name */
1962:./Libraries/FatFs/Src/ff.c **** 
1963:./Libraries/FatFs/Src/ff.c **** 	fno->altname[0] = 0;							/* No SFN */
1964:./Libraries/FatFs/Src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1965:./Libraries/FatFs/Src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1966:./Libraries/FatFs/Src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1967:./Libraries/FatFs/Src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1968:./Libraries/FatFs/Src/ff.c **** }
1969:./Libraries/FatFs/Src/ff.c **** 
1970:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1971:./Libraries/FatFs/Src/ff.c **** 
1972:./Libraries/FatFs/Src/ff.c **** 
1973:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------*/
1974:./Libraries/FatFs/Src/ff.c **** /* exFAT: Get a directry entry block */
1975:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------*/
1976:./Libraries/FatFs/Src/ff.c **** 
1977:./Libraries/FatFs/Src/ff.c **** static
1978:./Libraries/FatFs/Src/ff.c **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1979:./Libraries/FatFs/Src/ff.c **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
1980:./Libraries/FatFs/Src/ff.c **** )
1981:./Libraries/FatFs/Src/ff.c **** {
1982:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
1983:./Libraries/FatFs/Src/ff.c **** 	UINT i, sz_ent;
1984:./Libraries/FatFs/Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1985:./Libraries/FatFs/Src/ff.c **** 
1986:./Libraries/FatFs/Src/ff.c **** 
1987:./Libraries/FatFs/Src/ff.c **** 	/* Load 85 entry */
1988:./Libraries/FatFs/Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1989:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) return res;
1990:./Libraries/FatFs/Src/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1991:./Libraries/FatFs/Src/ff.c **** 	mem_cpy(dirb + 0, dp->dir, SZDIRE);
1992:./Libraries/FatFs/Src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
ARM GAS  /tmp/cceCRWeb.s 			page 101


1993:./Libraries/FatFs/Src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1994:./Libraries/FatFs/Src/ff.c **** 
1995:./Libraries/FatFs/Src/ff.c **** 	/* Load C0 entry */
1996:./Libraries/FatFs/Src/ff.c **** 	res = dir_next(dp, 0);
1997:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) return res;
1998:./Libraries/FatFs/Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1999:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) return res;
2000:./Libraries/FatFs/Src/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
2001:./Libraries/FatFs/Src/ff.c **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
2002:./Libraries/FatFs/Src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2003:./Libraries/FatFs/Src/ff.c **** 
2004:./Libraries/FatFs/Src/ff.c **** 	/* Load C1 entries */
2005:./Libraries/FatFs/Src/ff.c **** 	i = SZDIRE * 2;	/* C1 offset */
2006:./Libraries/FatFs/Src/ff.c **** 	do {
2007:./Libraries/FatFs/Src/ff.c **** 		res = dir_next(dp, 0);
2008:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
2009:./Libraries/FatFs/Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2010:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
2011:./Libraries/FatFs/Src/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
2012:./Libraries/FatFs/Src/ff.c **** 		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2013:./Libraries/FatFs/Src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2014:./Libraries/FatFs/Src/ff.c **** 
2015:./Libraries/FatFs/Src/ff.c **** 	/* Sanity check (do it when accessible object name) */
2016:./Libraries/FatFs/Src/ff.c **** 	if (i <= MAXDIRB(_MAX_LFN)) {
2017:./Libraries/FatFs/Src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2018:./Libraries/FatFs/Src/ff.c **** 	}
2019:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
2020:./Libraries/FatFs/Src/ff.c **** }
2021:./Libraries/FatFs/Src/ff.c **** 
2022:./Libraries/FatFs/Src/ff.c **** 
2023:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY || _FS_RPATH != 0
2024:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------*/
2025:./Libraries/FatFs/Src/ff.c **** /* exFAT: Load the object's directory entry block */
2026:./Libraries/FatFs/Src/ff.c **** /*------------------------------------------------*/
2027:./Libraries/FatFs/Src/ff.c **** static
2028:./Libraries/FatFs/Src/ff.c **** FRESULT load_obj_dir (
2029:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2030:./Libraries/FatFs/Src/ff.c **** 	const _FDID* obj	/* Object with its containing directory information */
2031:./Libraries/FatFs/Src/ff.c **** )
2032:./Libraries/FatFs/Src/ff.c **** {
2033:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2034:./Libraries/FatFs/Src/ff.c **** 
2035:./Libraries/FatFs/Src/ff.c **** 	/* Open object containing directory */
2036:./Libraries/FatFs/Src/ff.c **** 	dp->obj.fs = obj->fs;
2037:./Libraries/FatFs/Src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2038:./Libraries/FatFs/Src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2039:./Libraries/FatFs/Src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2040:./Libraries/FatFs/Src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2041:./Libraries/FatFs/Src/ff.c **** 
2042:./Libraries/FatFs/Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2043:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
2044:./Libraries/FatFs/Src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2045:./Libraries/FatFs/Src/ff.c **** 	}
2046:./Libraries/FatFs/Src/ff.c **** 	return res;
2047:./Libraries/FatFs/Src/ff.c **** }
2048:./Libraries/FatFs/Src/ff.c **** #endif
2049:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 102


2050:./Libraries/FatFs/Src/ff.c **** 
2051:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
2052:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------*/
2053:./Libraries/FatFs/Src/ff.c **** /* exFAT: Store the directory block to the media */
2054:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------*/
2055:./Libraries/FatFs/Src/ff.c **** static
2056:./Libraries/FatFs/Src/ff.c **** FRESULT store_xdir (
2057:./Libraries/FatFs/Src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2058:./Libraries/FatFs/Src/ff.c **** )
2059:./Libraries/FatFs/Src/ff.c **** {
2060:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2061:./Libraries/FatFs/Src/ff.c **** 	UINT nent;
2062:./Libraries/FatFs/Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2063:./Libraries/FatFs/Src/ff.c **** 
2064:./Libraries/FatFs/Src/ff.c **** 	/* Create set sum */
2065:./Libraries/FatFs/Src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2066:./Libraries/FatFs/Src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2067:./Libraries/FatFs/Src/ff.c **** 
2068:./Libraries/FatFs/Src/ff.c **** 	/* Store the set of directory to the volume */
2069:./Libraries/FatFs/Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2070:./Libraries/FatFs/Src/ff.c **** 	while (res == FR_OK) {
2071:./Libraries/FatFs/Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2072:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) break;
2073:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2074:./Libraries/FatFs/Src/ff.c **** 		dp->obj.fs->wflag = 1;
2075:./Libraries/FatFs/Src/ff.c **** 		if (--nent == 0) break;
2076:./Libraries/FatFs/Src/ff.c **** 		dirb += SZDIRE;
2077:./Libraries/FatFs/Src/ff.c **** 		res = dir_next(dp, 0);
2078:./Libraries/FatFs/Src/ff.c **** 	}
2079:./Libraries/FatFs/Src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2080:./Libraries/FatFs/Src/ff.c **** }
2081:./Libraries/FatFs/Src/ff.c **** 
2082:./Libraries/FatFs/Src/ff.c **** 
2083:./Libraries/FatFs/Src/ff.c **** 
2084:./Libraries/FatFs/Src/ff.c **** /*-------------------------------------------*/
2085:./Libraries/FatFs/Src/ff.c **** /* exFAT: Create a new directory enrty block */
2086:./Libraries/FatFs/Src/ff.c **** /*-------------------------------------------*/
2087:./Libraries/FatFs/Src/ff.c **** 
2088:./Libraries/FatFs/Src/ff.c **** static
2089:./Libraries/FatFs/Src/ff.c **** void create_xdir (
2090:./Libraries/FatFs/Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2091:./Libraries/FatFs/Src/ff.c **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2092:./Libraries/FatFs/Src/ff.c **** )
2093:./Libraries/FatFs/Src/ff.c **** {
2094:./Libraries/FatFs/Src/ff.c **** 	UINT i;
2095:./Libraries/FatFs/Src/ff.c **** 	BYTE nb, nc;
2096:./Libraries/FatFs/Src/ff.c **** 	WCHAR chr;
2097:./Libraries/FatFs/Src/ff.c **** 
2098:./Libraries/FatFs/Src/ff.c **** 
2099:./Libraries/FatFs/Src/ff.c **** 	/* Create 85+C0 entry */
2100:./Libraries/FatFs/Src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2101:./Libraries/FatFs/Src/ff.c **** 	dirb[XDIR_Type] = 0x85;
2102:./Libraries/FatFs/Src/ff.c **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2103:./Libraries/FatFs/Src/ff.c **** 
2104:./Libraries/FatFs/Src/ff.c **** 	/* Create C1 entries */
2105:./Libraries/FatFs/Src/ff.c **** 	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
2106:./Libraries/FatFs/Src/ff.c **** 	do {
ARM GAS  /tmp/cceCRWeb.s 			page 103


2107:./Libraries/FatFs/Src/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2108:./Libraries/FatFs/Src/ff.c **** 		do {	/* Fill name field */
2109:./Libraries/FatFs/Src/ff.c **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2110:./Libraries/FatFs/Src/ff.c **** 			st_word(dirb + i, chr); 		/* Store it */
2111:./Libraries/FatFs/Src/ff.c **** 		} while ((i += 2) % SZDIRE != 0);
2112:./Libraries/FatFs/Src/ff.c **** 		nb++;
2113:./Libraries/FatFs/Src/ff.c **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2114:./Libraries/FatFs/Src/ff.c **** 
2115:./Libraries/FatFs/Src/ff.c **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2116:./Libraries/FatFs/Src/ff.c **** 	dirb[XDIR_NumSec] = nb;		/* Set block length */
2117:./Libraries/FatFs/Src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2118:./Libraries/FatFs/Src/ff.c **** }
2119:./Libraries/FatFs/Src/ff.c **** 
2120:./Libraries/FatFs/Src/ff.c **** #endif	/* !_FS_READONLY */
2121:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_EXFAT */
2122:./Libraries/FatFs/Src/ff.c **** 
2123:./Libraries/FatFs/Src/ff.c **** 
2124:./Libraries/FatFs/Src/ff.c **** 
2125:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2126:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2127:./Libraries/FatFs/Src/ff.c **** /* Read an object from the directory                                     */
2128:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2129:./Libraries/FatFs/Src/ff.c **** 
2130:./Libraries/FatFs/Src/ff.c **** static
2131:./Libraries/FatFs/Src/ff.c **** FRESULT dir_read (
2132:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2133:./Libraries/FatFs/Src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2134:./Libraries/FatFs/Src/ff.c **** )
2135:./Libraries/FatFs/Src/ff.c **** {
 3718              		.loc 1 2135 1
 3719              		.cfi_startproc
 3720              		@ args = 0, pretend = 0, frame = 24
 3721              		@ frame_needed = 1, uses_anonymous_args = 0
 3722 0000 80B5     		push	{r7, lr}
 3723              	.LCFI160:
 3724              		.cfi_def_cfa_offset 8
 3725              		.cfi_offset 7, -8
 3726              		.cfi_offset 14, -4
 3727 0002 86B0     		sub	sp, sp, #24
 3728              	.LCFI161:
 3729              		.cfi_def_cfa_offset 32
 3730 0004 00AF     		add	r7, sp, #0
 3731              	.LCFI162:
 3732              		.cfi_def_cfa_register 7
 3733 0006 7860     		str	r0, [r7, #4]
 3734 0008 3960     		str	r1, [r7]
2136:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3735              		.loc 1 2136 10
 3736 000a 0423     		movs	r3, #4
 3737 000c FB75     		strb	r3, [r7, #23]
2137:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3738              		.loc 1 2137 9
 3739 000e 7B68     		ldr	r3, [r7, #4]
 3740 0010 1B68     		ldr	r3, [r3]
 3741 0012 3B61     		str	r3, [r7, #16]
2138:./Libraries/FatFs/Src/ff.c **** 	BYTE a, c;
2139:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
ARM GAS  /tmp/cceCRWeb.s 			page 104


2140:./Libraries/FatFs/Src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2141:./Libraries/FatFs/Src/ff.c **** #endif
2142:./Libraries/FatFs/Src/ff.c **** 
2143:./Libraries/FatFs/Src/ff.c **** 	while (dp->sect) {
 3742              		.loc 1 2143 8
 3743 0014 3CE0     		b	.L234
 3744              	.L239:
2144:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, dp->sect);
 3745              		.loc 1 2144 9
 3746 0016 7B68     		ldr	r3, [r7, #4]
 3747 0018 DB69     		ldr	r3, [r3, #28]
 3748 001a 1946     		mov	r1, r3
 3749 001c 3869     		ldr	r0, [r7, #16]
 3750 001e FFF7FEFF 		bl	move_window
 3751 0022 0346     		mov	r3, r0
 3752 0024 FB75     		strb	r3, [r7, #23]
2145:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) break;
 3753              		.loc 1 2145 6
 3754 0026 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3755 0028 002B     		cmp	r3, #0
 3756 002a 36D1     		bne	.L242
2146:./Libraries/FatFs/Src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3757              		.loc 1 2146 9
 3758 002c 7B68     		ldr	r3, [r7, #4]
 3759 002e 1B6A     		ldr	r3, [r3, #32]
 3760              		.loc 1 2146 5
 3761 0030 1B78     		ldrb	r3, [r3]
 3762 0032 FB73     		strb	r3, [r7, #15]
2147:./Libraries/FatFs/Src/ff.c **** 		if (c == 0) {
 3763              		.loc 1 2147 6
 3764 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3765 0036 002B     		cmp	r3, #0
 3766 0038 02D1     		bne	.L237
2148:./Libraries/FatFs/Src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3767              		.loc 1 2148 8
 3768 003a 0423     		movs	r3, #4
 3769 003c FB75     		strb	r3, [r7, #23]
 3770              		.loc 1 2148 4
 3771 003e 31E0     		b	.L236
 3772              	.L237:
2149:./Libraries/FatFs/Src/ff.c **** 		}
2150:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2151:./Libraries/FatFs/Src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2152:./Libraries/FatFs/Src/ff.c **** 			if (_USE_LABEL && vol) {
2153:./Libraries/FatFs/Src/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2154:./Libraries/FatFs/Src/ff.c **** 			} else {
2155:./Libraries/FatFs/Src/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2156:./Libraries/FatFs/Src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2157:./Libraries/FatFs/Src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2158:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK) {
2159:./Libraries/FatFs/Src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2160:./Libraries/FatFs/Src/ff.c **** 					}
2161:./Libraries/FatFs/Src/ff.c **** 					break;
2162:./Libraries/FatFs/Src/ff.c **** 				}
2163:./Libraries/FatFs/Src/ff.c **** 			}
2164:./Libraries/FatFs/Src/ff.c **** 		} else
2165:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 105


2166:./Libraries/FatFs/Src/ff.c **** 		{	/* On the FAT12/16/32 volume */
2167:./Libraries/FatFs/Src/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 3773              		.loc 1 2167 25
 3774 0040 7B68     		ldr	r3, [r7, #4]
 3775 0042 1B6A     		ldr	r3, [r3, #32]
 3776              		.loc 1 2167 30
 3777 0044 0B33     		adds	r3, r3, #11
 3778 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3779              		.loc 1 2167 21
 3780 0048 03F03F03 		and	r3, r3, #63
 3781 004c BB73     		strb	r3, [r7, #14]
 3782              		.loc 1 2167 17
 3783 004e 7B68     		ldr	r3, [r7, #4]
 3784 0050 BA7B     		ldrb	r2, [r7, #14]
 3785 0052 9A71     		strb	r2, [r3, #6]
2168:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2169:./Libraries/FatFs/Src/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2170:./Libraries/FatFs/Src/ff.c **** 				ord = 0xFF;
2171:./Libraries/FatFs/Src/ff.c **** 			} else {
2172:./Libraries/FatFs/Src/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2173:./Libraries/FatFs/Src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2174:./Libraries/FatFs/Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2175:./Libraries/FatFs/Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
2176:./Libraries/FatFs/Src/ff.c **** 						dp->blk_ofs = dp->dptr;
2177:./Libraries/FatFs/Src/ff.c **** 					}
2178:./Libraries/FatFs/Src/ff.c **** 					/* Check LFN validity and capture it */
2179:./Libraries/FatFs/Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2180:./Libraries/FatFs/Src/ff.c **** 				} else {					/* An SFN entry is found */
2181:./Libraries/FatFs/Src/ff.c **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2182:./Libraries/FatFs/Src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2183:./Libraries/FatFs/Src/ff.c **** 					}
2184:./Libraries/FatFs/Src/ff.c **** 					break;
2185:./Libraries/FatFs/Src/ff.c **** 				}
2186:./Libraries/FatFs/Src/ff.c **** 			}
2187:./Libraries/FatFs/Src/ff.c **** #else		/* Non LFN configuration */
2188:./Libraries/FatFs/Src/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
 3786              		.loc 1 2188 7
 3787 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3788 0056 E52B     		cmp	r3, #229
 3789 0058 11D0     		beq	.L238
 3790              		.loc 1 2188 18 discriminator 1
 3791 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3792 005c 2E2B     		cmp	r3, #46
 3793 005e 0ED0     		beq	.L238
 3794              		.loc 1 2188 30 discriminator 2
 3795 0060 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3796 0062 0F2B     		cmp	r3, #15
 3797 0064 0BD0     		beq	.L238
 3798              		.loc 1 2188 57 discriminator 3
 3799 0066 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3800 0068 23F02003 		bic	r3, r3, #32
 3801              		.loc 1 2188 48 discriminator 3
 3802 006c 082B     		cmp	r3, #8
 3803 006e 0CBF     		ite	eq
 3804 0070 0123     		moveq	r3, #1
 3805 0072 0023     		movne	r3, #0
 3806 0074 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cceCRWeb.s 			page 106


 3807 0076 1A46     		mov	r2, r3
 3808              		.loc 1 2188 45 discriminator 3
 3809 0078 3B68     		ldr	r3, [r7]
 3810 007a 9342     		cmp	r3, r2
 3811 007c 0FD0     		beq	.L243
 3812              	.L238:
2189:./Libraries/FatFs/Src/ff.c **** 				break;
2190:./Libraries/FatFs/Src/ff.c **** 			}
2191:./Libraries/FatFs/Src/ff.c **** #endif
2192:./Libraries/FatFs/Src/ff.c **** 		}
2193:./Libraries/FatFs/Src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 3813              		.loc 1 2193 9
 3814 007e 0021     		movs	r1, #0
 3815 0080 7868     		ldr	r0, [r7, #4]
 3816 0082 FFF7FEFF 		bl	dir_next
 3817 0086 0346     		mov	r3, r0
 3818 0088 FB75     		strb	r3, [r7, #23]
2194:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) break;
 3819              		.loc 1 2194 6
 3820 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3821 008c 002B     		cmp	r3, #0
 3822 008e 08D1     		bne	.L244
 3823              	.L234:
2143:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, dp->sect);
 3824              		.loc 1 2143 11
 3825 0090 7B68     		ldr	r3, [r7, #4]
 3826 0092 DB69     		ldr	r3, [r3, #28]
2143:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, dp->sect);
 3827              		.loc 1 2143 8
 3828 0094 002B     		cmp	r3, #0
 3829 0096 BED1     		bne	.L239
 3830 0098 04E0     		b	.L236
 3831              	.L242:
2145:./Libraries/FatFs/Src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3832              		.loc 1 2145 3
 3833 009a 00BF     		nop
 3834 009c 02E0     		b	.L236
 3835              	.L243:
2189:./Libraries/FatFs/Src/ff.c **** 			}
 3836              		.loc 1 2189 5
 3837 009e 00BF     		nop
 3838 00a0 00E0     		b	.L236
 3839              	.L244:
 3840              		.loc 1 2194 3
 3841 00a2 00BF     		nop
 3842              	.L236:
2195:./Libraries/FatFs/Src/ff.c **** 	}
2196:./Libraries/FatFs/Src/ff.c **** 
2197:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 3843              		.loc 1 2197 5
 3844 00a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3845 00a6 002B     		cmp	r3, #0
 3846 00a8 02D0     		beq	.L240
 3847              		.loc 1 2197 29 discriminator 1
 3848 00aa 7B68     		ldr	r3, [r7, #4]
 3849 00ac 0022     		movs	r2, #0
 3850 00ae DA61     		str	r2, [r3, #28]
ARM GAS  /tmp/cceCRWeb.s 			page 107


 3851              	.L240:
2198:./Libraries/FatFs/Src/ff.c **** 	return res;
 3852              		.loc 1 2198 9
 3853 00b0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2199:./Libraries/FatFs/Src/ff.c **** }
 3854              		.loc 1 2199 1
 3855 00b2 1846     		mov	r0, r3
 3856 00b4 1837     		adds	r7, r7, #24
 3857              	.LCFI163:
 3858              		.cfi_def_cfa_offset 8
 3859 00b6 BD46     		mov	sp, r7
 3860              	.LCFI164:
 3861              		.cfi_def_cfa_register 13
 3862              		@ sp needed
 3863 00b8 80BD     		pop	{r7, pc}
 3864              		.cfi_endproc
 3865              	.LFE364:
 3867              		.section	.text.dir_find,"ax",%progbits
 3868              		.align	1
 3869              		.syntax unified
 3870              		.thumb
 3871              		.thumb_func
 3872              		.fpu fpv5-d16
 3874              	dir_find:
 3875              	.LFB365:
2200:./Libraries/FatFs/Src/ff.c **** 
2201:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2202:./Libraries/FatFs/Src/ff.c **** 
2203:./Libraries/FatFs/Src/ff.c **** 
2204:./Libraries/FatFs/Src/ff.c **** 
2205:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2206:./Libraries/FatFs/Src/ff.c **** /* Directory handling - Find an object in the directory                  */
2207:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2208:./Libraries/FatFs/Src/ff.c **** 
2209:./Libraries/FatFs/Src/ff.c **** static
2210:./Libraries/FatFs/Src/ff.c **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2211:./Libraries/FatFs/Src/ff.c **** 	DIR* dp			/* Pointer to the directory object with the file name */
2212:./Libraries/FatFs/Src/ff.c **** )
2213:./Libraries/FatFs/Src/ff.c **** {
 3876              		.loc 1 2213 1
 3877              		.cfi_startproc
 3878              		@ args = 0, pretend = 0, frame = 24
 3879              		@ frame_needed = 1, uses_anonymous_args = 0
 3880 0000 80B5     		push	{r7, lr}
 3881              	.LCFI165:
 3882              		.cfi_def_cfa_offset 8
 3883              		.cfi_offset 7, -8
 3884              		.cfi_offset 14, -4
 3885 0002 86B0     		sub	sp, sp, #24
 3886              	.LCFI166:
 3887              		.cfi_def_cfa_offset 32
 3888 0004 00AF     		add	r7, sp, #0
 3889              	.LCFI167:
 3890              		.cfi_def_cfa_register 7
 3891 0006 7860     		str	r0, [r7, #4]
2214:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2215:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
ARM GAS  /tmp/cceCRWeb.s 			page 108


 3892              		.loc 1 2215 9
 3893 0008 7B68     		ldr	r3, [r7, #4]
 3894 000a 1B68     		ldr	r3, [r3]
 3895 000c 3B61     		str	r3, [r7, #16]
2216:./Libraries/FatFs/Src/ff.c **** 	BYTE c;
2217:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
2218:./Libraries/FatFs/Src/ff.c **** 	BYTE a, ord, sum;
2219:./Libraries/FatFs/Src/ff.c **** #endif
2220:./Libraries/FatFs/Src/ff.c **** 
2221:./Libraries/FatFs/Src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 3896              		.loc 1 2221 8
 3897 000e 0021     		movs	r1, #0
 3898 0010 7868     		ldr	r0, [r7, #4]
 3899 0012 FFF7FEFF 		bl	dir_sdi
 3900 0016 0346     		mov	r3, r0
 3901 0018 FB75     		strb	r3, [r7, #23]
2222:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) return res;
 3902              		.loc 1 2222 5
 3903 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3904 001c 002B     		cmp	r3, #0
 3905 001e 01D0     		beq	.L246
 3906              		.loc 1 2222 27 discriminator 1
 3907 0020 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3908 0022 3EE0     		b	.L247
 3909              	.L246:
2223:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2224:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2225:./Libraries/FatFs/Src/ff.c **** 		BYTE nc;
2226:./Libraries/FatFs/Src/ff.c **** 		UINT di, ni;
2227:./Libraries/FatFs/Src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2228:./Libraries/FatFs/Src/ff.c **** 
2229:./Libraries/FatFs/Src/ff.c **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2230:./Libraries/FatFs/Src/ff.c **** #if _MAX_LFN < 255
2231:./Libraries/FatFs/Src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object n
2232:./Libraries/FatFs/Src/ff.c **** #endif
2233:./Libraries/FatFs/Src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2234:./Libraries/FatFs/Src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2235:./Libraries/FatFs/Src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2236:./Libraries/FatFs/Src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2237:./Libraries/FatFs/Src/ff.c **** 			}
2238:./Libraries/FatFs/Src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2239:./Libraries/FatFs/Src/ff.c **** 		}
2240:./Libraries/FatFs/Src/ff.c **** 		return res;
2241:./Libraries/FatFs/Src/ff.c **** 	}
2242:./Libraries/FatFs/Src/ff.c **** #endif
2243:./Libraries/FatFs/Src/ff.c **** 	/* On the FAT12/16/32 volume */
2244:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
2245:./Libraries/FatFs/Src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2246:./Libraries/FatFs/Src/ff.c **** #endif
2247:./Libraries/FatFs/Src/ff.c **** 	do {
2248:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, dp->sect);
 3910              		.loc 1 2248 9
 3911 0024 7B68     		ldr	r3, [r7, #4]
 3912 0026 DB69     		ldr	r3, [r3, #28]
 3913 0028 1946     		mov	r1, r3
 3914 002a 3869     		ldr	r0, [r7, #16]
 3915 002c FFF7FEFF 		bl	move_window
ARM GAS  /tmp/cceCRWeb.s 			page 109


 3916 0030 0346     		mov	r3, r0
 3917 0032 FB75     		strb	r3, [r7, #23]
2249:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) break;
 3918              		.loc 1 2249 6
 3919 0034 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3920 0036 002B     		cmp	r3, #0
 3921 0038 2FD1     		bne	.L252
2250:./Libraries/FatFs/Src/ff.c **** 		c = dp->dir[DIR_Name];
 3922              		.loc 1 2250 9
 3923 003a 7B68     		ldr	r3, [r7, #4]
 3924 003c 1B6A     		ldr	r3, [r3, #32]
 3925              		.loc 1 2250 5
 3926 003e 1B78     		ldrb	r3, [r3]
 3927 0040 FB73     		strb	r3, [r7, #15]
2251:./Libraries/FatFs/Src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3928              		.loc 1 2251 6
 3929 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3930 0044 002B     		cmp	r3, #0
 3931 0046 02D1     		bne	.L250
 3932              		.loc 1 2251 21 discriminator 1
 3933 0048 0423     		movs	r3, #4
 3934 004a FB75     		strb	r3, [r7, #23]
 3935              		.loc 1 2251 3 discriminator 1
 3936 004c 28E0     		b	.L249
 3937              	.L250:
2252:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2253:./Libraries/FatFs/Src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2254:./Libraries/FatFs/Src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2255:./Libraries/FatFs/Src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2256:./Libraries/FatFs/Src/ff.c **** 		} else {
2257:./Libraries/FatFs/Src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2258:./Libraries/FatFs/Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2259:./Libraries/FatFs/Src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2260:./Libraries/FatFs/Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2261:./Libraries/FatFs/Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2262:./Libraries/FatFs/Src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2263:./Libraries/FatFs/Src/ff.c **** 					}
2264:./Libraries/FatFs/Src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2265:./Libraries/FatFs/Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2266:./Libraries/FatFs/Src/ff.c **** 				}
2267:./Libraries/FatFs/Src/ff.c **** 			} else {					/* An SFN entry is found */
2268:./Libraries/FatFs/Src/ff.c **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2269:./Libraries/FatFs/Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2270:./Libraries/FatFs/Src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2271:./Libraries/FatFs/Src/ff.c **** 			}
2272:./Libraries/FatFs/Src/ff.c **** 		}
2273:./Libraries/FatFs/Src/ff.c **** #else		/* Non LFN configuration */
2274:./Libraries/FatFs/Src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 3938              		.loc 1 2274 20
 3939 004e 7B68     		ldr	r3, [r7, #4]
 3940 0050 1B6A     		ldr	r3, [r3, #32]
 3941              		.loc 1 2274 25
 3942 0052 0B33     		adds	r3, r3, #11
 3943 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3944              		.loc 1 2274 36
 3945 0056 03F03F03 		and	r3, r3, #63
 3946 005a DAB2     		uxtb	r2, r3
ARM GAS  /tmp/cceCRWeb.s 			page 110


 3947              		.loc 1 2274 16
 3948 005c 7B68     		ldr	r3, [r7, #4]
 3949 005e 9A71     		strb	r2, [r3, #6]
2275:./Libraries/FatFs/Src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3950              		.loc 1 2275 11
 3951 0060 7B68     		ldr	r3, [r7, #4]
 3952 0062 1B6A     		ldr	r3, [r3, #32]
 3953              		.loc 1 2275 16
 3954 0064 0B33     		adds	r3, r3, #11
 3955 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3956              		.loc 1 2275 27
 3957 0068 03F00803 		and	r3, r3, #8
 3958              		.loc 1 2275 6
 3959 006c 002B     		cmp	r3, #0
 3960 006e 0AD1     		bne	.L251
 3961              		.loc 1 2275 51 discriminator 1
 3962 0070 7B68     		ldr	r3, [r7, #4]
 3963 0072 186A     		ldr	r0, [r3, #32]
 3964              		.loc 1 2275 60 discriminator 1
 3965 0074 7B68     		ldr	r3, [r7, #4]
 3966 0076 2433     		adds	r3, r3, #36
 3967              		.loc 1 2275 41 discriminator 1
 3968 0078 0B22     		movs	r2, #11
 3969 007a 1946     		mov	r1, r3
 3970 007c FFF7FEFF 		bl	mem_cmp
 3971 0080 0346     		mov	r3, r0
 3972              		.loc 1 2275 37 discriminator 1
 3973 0082 002B     		cmp	r3, #0
 3974 0084 0BD0     		beq	.L253
 3975              	.L251:
2276:./Libraries/FatFs/Src/ff.c **** #endif
2277:./Libraries/FatFs/Src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
 3976              		.loc 1 2277 9
 3977 0086 0021     		movs	r1, #0
 3978 0088 7868     		ldr	r0, [r7, #4]
 3979 008a FFF7FEFF 		bl	dir_next
 3980 008e 0346     		mov	r3, r0
 3981 0090 FB75     		strb	r3, [r7, #23]
2278:./Libraries/FatFs/Src/ff.c **** 	} while (res == FR_OK);
 3982              		.loc 1 2278 2
 3983 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3984 0094 002B     		cmp	r3, #0
 3985 0096 C5D0     		beq	.L246
 3986 0098 02E0     		b	.L249
 3987              	.L252:
2249:./Libraries/FatFs/Src/ff.c **** 		c = dp->dir[DIR_Name];
 3988              		.loc 1 2249 3
 3989 009a 00BF     		nop
 3990 009c 00E0     		b	.L249
 3991              	.L253:
2275:./Libraries/FatFs/Src/ff.c **** #endif
 3992              		.loc 1 2275 3
 3993 009e 00BF     		nop
 3994              	.L249:
2279:./Libraries/FatFs/Src/ff.c **** 
2280:./Libraries/FatFs/Src/ff.c **** 	return res;
 3995              		.loc 1 2280 9
ARM GAS  /tmp/cceCRWeb.s 			page 111


 3996 00a0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3997              	.L247:
2281:./Libraries/FatFs/Src/ff.c **** }
 3998              		.loc 1 2281 1
 3999 00a2 1846     		mov	r0, r3
 4000 00a4 1837     		adds	r7, r7, #24
 4001              	.LCFI168:
 4002              		.cfi_def_cfa_offset 8
 4003 00a6 BD46     		mov	sp, r7
 4004              	.LCFI169:
 4005              		.cfi_def_cfa_register 13
 4006              		@ sp needed
 4007 00a8 80BD     		pop	{r7, pc}
 4008              		.cfi_endproc
 4009              	.LFE365:
 4011              		.section	.text.dir_register,"ax",%progbits
 4012              		.align	1
 4013              		.syntax unified
 4014              		.thumb
 4015              		.thumb_func
 4016              		.fpu fpv5-d16
 4018              	dir_register:
 4019              	.LFB366:
2282:./Libraries/FatFs/Src/ff.c **** 
2283:./Libraries/FatFs/Src/ff.c **** 
2284:./Libraries/FatFs/Src/ff.c **** 
2285:./Libraries/FatFs/Src/ff.c **** 
2286:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
2287:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2288:./Libraries/FatFs/Src/ff.c **** /* Register an object to the directory                                   */
2289:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2290:./Libraries/FatFs/Src/ff.c **** 
2291:./Libraries/FatFs/Src/ff.c **** static
2292:./Libraries/FatFs/Src/ff.c **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2293:./Libraries/FatFs/Src/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
2294:./Libraries/FatFs/Src/ff.c **** )
2295:./Libraries/FatFs/Src/ff.c **** {
 4020              		.loc 1 2295 1
 4021              		.cfi_startproc
 4022              		@ args = 0, pretend = 0, frame = 16
 4023              		@ frame_needed = 1, uses_anonymous_args = 0
 4024 0000 80B5     		push	{r7, lr}
 4025              	.LCFI170:
 4026              		.cfi_def_cfa_offset 8
 4027              		.cfi_offset 7, -8
 4028              		.cfi_offset 14, -4
 4029 0002 84B0     		sub	sp, sp, #16
 4030              	.LCFI171:
 4031              		.cfi_def_cfa_offset 24
 4032 0004 00AF     		add	r7, sp, #0
 4033              	.LCFI172:
 4034              		.cfi_def_cfa_register 7
 4035 0006 7860     		str	r0, [r7, #4]
2296:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2297:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4036              		.loc 1 2297 9
 4037 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 112


 4038 000a 1B68     		ldr	r3, [r3]
 4039 000c BB60     		str	r3, [r7, #8]
2298:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2299:./Libraries/FatFs/Src/ff.c **** 	UINT n, nlen, nent;
2300:./Libraries/FatFs/Src/ff.c **** 	BYTE sn[12], sum;
2301:./Libraries/FatFs/Src/ff.c **** 
2302:./Libraries/FatFs/Src/ff.c **** 
2303:./Libraries/FatFs/Src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2304:./Libraries/FatFs/Src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2305:./Libraries/FatFs/Src/ff.c **** 
2306:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2307:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2308:./Libraries/FatFs/Src/ff.c **** 		DIR dj;
2309:./Libraries/FatFs/Src/ff.c **** 
2310:./Libraries/FatFs/Src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2311:./Libraries/FatFs/Src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2312:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
2313:./Libraries/FatFs/Src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2314:./Libraries/FatFs/Src/ff.c **** 
2315:./Libraries/FatFs/Src/ff.c **** 		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
2316:./Libraries/FatFs/Src/ff.c **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
2317:./Libraries/FatFs/Src/ff.c **** 			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
2318:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
2319:./Libraries/FatFs/Src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if neede
2320:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
2321:./Libraries/FatFs/Src/ff.c **** 			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
2322:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
2323:./Libraries/FatFs/Src/ff.c **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2324:./Libraries/FatFs/Src/ff.c **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2325:./Libraries/FatFs/Src/ff.c **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2326:./Libraries/FatFs/Src/ff.c **** 			res = store_xdir(&dj);							/* Store the object status */
2327:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) return res;
2328:./Libraries/FatFs/Src/ff.c **** 		}
2329:./Libraries/FatFs/Src/ff.c **** 
2330:./Libraries/FatFs/Src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2331:./Libraries/FatFs/Src/ff.c **** 		return FR_OK;
2332:./Libraries/FatFs/Src/ff.c **** 	}
2333:./Libraries/FatFs/Src/ff.c **** #endif
2334:./Libraries/FatFs/Src/ff.c **** 	/* On the FAT12/16/32 volume */
2335:./Libraries/FatFs/Src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2336:./Libraries/FatFs/Src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2337:./Libraries/FatFs/Src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2338:./Libraries/FatFs/Src/ff.c **** 		for (n = 1; n < 100; n++) {
2339:./Libraries/FatFs/Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2340:./Libraries/FatFs/Src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2341:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
2342:./Libraries/FatFs/Src/ff.c **** 		}
2343:./Libraries/FatFs/Src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2344:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2345:./Libraries/FatFs/Src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2346:./Libraries/FatFs/Src/ff.c **** 	}
2347:./Libraries/FatFs/Src/ff.c **** 
2348:./Libraries/FatFs/Src/ff.c **** 	/* Create an SFN with/without LFNs. */
2349:./Libraries/FatFs/Src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2350:./Libraries/FatFs/Src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2351:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2352:./Libraries/FatFs/Src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
ARM GAS  /tmp/cceCRWeb.s 			page 113


2353:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
2354:./Libraries/FatFs/Src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2355:./Libraries/FatFs/Src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2356:./Libraries/FatFs/Src/ff.c **** 				res = move_window(fs, dp->sect);
2357:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) break;
2358:./Libraries/FatFs/Src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2359:./Libraries/FatFs/Src/ff.c **** 				fs->wflag = 1;
2360:./Libraries/FatFs/Src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2361:./Libraries/FatFs/Src/ff.c **** 			} while (res == FR_OK && --nent);
2362:./Libraries/FatFs/Src/ff.c **** 		}
2363:./Libraries/FatFs/Src/ff.c **** 	}
2364:./Libraries/FatFs/Src/ff.c **** 
2365:./Libraries/FatFs/Src/ff.c **** #else	/* Non LFN configuration */
2366:./Libraries/FatFs/Src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 4040              		.loc 1 2366 8
 4041 000e 0121     		movs	r1, #1
 4042 0010 7868     		ldr	r0, [r7, #4]
 4043 0012 FFF7FEFF 		bl	dir_alloc
 4044 0016 0346     		mov	r3, r0
 4045 0018 FB73     		strb	r3, [r7, #15]
2367:./Libraries/FatFs/Src/ff.c **** 
2368:./Libraries/FatFs/Src/ff.c **** #endif
2369:./Libraries/FatFs/Src/ff.c **** 
2370:./Libraries/FatFs/Src/ff.c **** 	/* Set SFN entry */
2371:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 4046              		.loc 1 2371 5
 4047 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4048 001c 002B     		cmp	r3, #0
 4049 001e 1CD1     		bne	.L255
2372:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, dp->sect);
 4050              		.loc 1 2372 9
 4051 0020 7B68     		ldr	r3, [r7, #4]
 4052 0022 DB69     		ldr	r3, [r3, #28]
 4053 0024 1946     		mov	r1, r3
 4054 0026 B868     		ldr	r0, [r7, #8]
 4055 0028 FFF7FEFF 		bl	move_window
 4056 002c 0346     		mov	r3, r0
 4057 002e FB73     		strb	r3, [r7, #15]
2373:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 4058              		.loc 1 2373 6
 4059 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4060 0032 002B     		cmp	r3, #0
 4061 0034 11D1     		bne	.L255
2374:./Libraries/FatFs/Src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 4062              		.loc 1 2374 14
 4063 0036 7B68     		ldr	r3, [r7, #4]
 4064 0038 1B6A     		ldr	r3, [r3, #32]
 4065              		.loc 1 2374 4
 4066 003a 2022     		movs	r2, #32
 4067 003c 0021     		movs	r1, #0
 4068 003e 1846     		mov	r0, r3
 4069 0040 FFF7FEFF 		bl	mem_set
2375:./Libraries/FatFs/Src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 4070              		.loc 1 2375 20
 4071 0044 7B68     		ldr	r3, [r7, #4]
 4072 0046 186A     		ldr	r0, [r3, #32]
 4073              		.loc 1 2375 34
ARM GAS  /tmp/cceCRWeb.s 			page 114


 4074 0048 7B68     		ldr	r3, [r7, #4]
 4075 004a 2433     		adds	r3, r3, #36
 4076              		.loc 1 2375 4
 4077 004c 0B22     		movs	r2, #11
 4078 004e 1946     		mov	r1, r3
 4079 0050 FFF7FEFF 		bl	mem_cpy
2376:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
2377:./Libraries/FatFs/Src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2378:./Libraries/FatFs/Src/ff.c **** #endif
2379:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
 4080              		.loc 1 2379 14
 4081 0054 BB68     		ldr	r3, [r7, #8]
 4082 0056 0122     		movs	r2, #1
 4083 0058 DA70     		strb	r2, [r3, #3]
 4084              	.L255:
2380:./Libraries/FatFs/Src/ff.c **** 		}
2381:./Libraries/FatFs/Src/ff.c **** 	}
2382:./Libraries/FatFs/Src/ff.c **** 
2383:./Libraries/FatFs/Src/ff.c **** 	return res;
 4085              		.loc 1 2383 9
 4086 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2384:./Libraries/FatFs/Src/ff.c **** }
 4087              		.loc 1 2384 1
 4088 005c 1846     		mov	r0, r3
 4089 005e 1037     		adds	r7, r7, #16
 4090              	.LCFI173:
 4091              		.cfi_def_cfa_offset 8
 4092 0060 BD46     		mov	sp, r7
 4093              	.LCFI174:
 4094              		.cfi_def_cfa_register 13
 4095              		@ sp needed
 4096 0062 80BD     		pop	{r7, pc}
 4097              		.cfi_endproc
 4098              	.LFE366:
 4100              		.section	.text.dir_remove,"ax",%progbits
 4101              		.align	1
 4102              		.syntax unified
 4103              		.thumb
 4104              		.thumb_func
 4105              		.fpu fpv5-d16
 4107              	dir_remove:
 4108              	.LFB367:
2385:./Libraries/FatFs/Src/ff.c **** 
2386:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
2387:./Libraries/FatFs/Src/ff.c **** 
2388:./Libraries/FatFs/Src/ff.c **** 
2389:./Libraries/FatFs/Src/ff.c **** 
2390:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2391:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2392:./Libraries/FatFs/Src/ff.c **** /* Remove an object from the directory                                   */
2393:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2394:./Libraries/FatFs/Src/ff.c **** 
2395:./Libraries/FatFs/Src/ff.c **** static
2396:./Libraries/FatFs/Src/ff.c **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2397:./Libraries/FatFs/Src/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2398:./Libraries/FatFs/Src/ff.c **** )
2399:./Libraries/FatFs/Src/ff.c **** {
ARM GAS  /tmp/cceCRWeb.s 			page 115


 4109              		.loc 1 2399 1
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 16
 4112              		@ frame_needed = 1, uses_anonymous_args = 0
 4113 0000 80B5     		push	{r7, lr}
 4114              	.LCFI175:
 4115              		.cfi_def_cfa_offset 8
 4116              		.cfi_offset 7, -8
 4117              		.cfi_offset 14, -4
 4118 0002 84B0     		sub	sp, sp, #16
 4119              	.LCFI176:
 4120              		.cfi_def_cfa_offset 24
 4121 0004 00AF     		add	r7, sp, #0
 4122              	.LCFI177:
 4123              		.cfi_def_cfa_register 7
 4124 0006 7860     		str	r0, [r7, #4]
2400:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2401:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4125              		.loc 1 2401 9
 4126 0008 7B68     		ldr	r3, [r7, #4]
 4127 000a 1B68     		ldr	r3, [r3]
 4128 000c FB60     		str	r3, [r7, #12]
2402:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2403:./Libraries/FatFs/Src/ff.c **** 	DWORD last = dp->dptr;
2404:./Libraries/FatFs/Src/ff.c **** 
2405:./Libraries/FatFs/Src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2406:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
2407:./Libraries/FatFs/Src/ff.c **** 		do {
2408:./Libraries/FatFs/Src/ff.c **** 			res = move_window(fs, dp->sect);
2409:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
2410:./Libraries/FatFs/Src/ff.c **** 			/* Mark an entry 'deleted' */
2411:./Libraries/FatFs/Src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2412:./Libraries/FatFs/Src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;
2413:./Libraries/FatFs/Src/ff.c **** 			} else {									/* On the FAT12/16/32 volume */
2414:./Libraries/FatFs/Src/ff.c **** 				dp->dir[DIR_Name] = DDEM;
2415:./Libraries/FatFs/Src/ff.c **** 			}
2416:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
2417:./Libraries/FatFs/Src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2418:./Libraries/FatFs/Src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2419:./Libraries/FatFs/Src/ff.c **** 		} while (res == FR_OK);
2420:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2421:./Libraries/FatFs/Src/ff.c **** 	}
2422:./Libraries/FatFs/Src/ff.c **** #else			/* Non LFN configuration */
2423:./Libraries/FatFs/Src/ff.c **** 
2424:./Libraries/FatFs/Src/ff.c **** 	res = move_window(fs, dp->sect);
 4129              		.loc 1 2424 8
 4130 000e 7B68     		ldr	r3, [r7, #4]
 4131 0010 DB69     		ldr	r3, [r3, #28]
 4132 0012 1946     		mov	r1, r3
 4133 0014 F868     		ldr	r0, [r7, #12]
 4134 0016 FFF7FEFF 		bl	move_window
 4135 001a 0346     		mov	r3, r0
 4136 001c FB72     		strb	r3, [r7, #11]
2425:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 4137              		.loc 1 2425 5
 4138 001e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4139 0020 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 116


 4140 0022 06D1     		bne	.L258
2426:./Libraries/FatFs/Src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
 4141              		.loc 1 2426 5
 4142 0024 7B68     		ldr	r3, [r7, #4]
 4143 0026 1B6A     		ldr	r3, [r3, #32]
 4144              		.loc 1 2426 21
 4145 0028 E522     		movs	r2, #229
 4146 002a 1A70     		strb	r2, [r3]
2427:./Libraries/FatFs/Src/ff.c **** 		fs->wflag = 1;
 4147              		.loc 1 2427 13
 4148 002c FB68     		ldr	r3, [r7, #12]
 4149 002e 0122     		movs	r2, #1
 4150 0030 DA70     		strb	r2, [r3, #3]
 4151              	.L258:
2428:./Libraries/FatFs/Src/ff.c **** 	}
2429:./Libraries/FatFs/Src/ff.c **** #endif
2430:./Libraries/FatFs/Src/ff.c **** 
2431:./Libraries/FatFs/Src/ff.c **** 	return res;
 4152              		.loc 1 2431 9
 4153 0032 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
2432:./Libraries/FatFs/Src/ff.c **** }
 4154              		.loc 1 2432 1
 4155 0034 1846     		mov	r0, r3
 4156 0036 1037     		adds	r7, r7, #16
 4157              	.LCFI178:
 4158              		.cfi_def_cfa_offset 8
 4159 0038 BD46     		mov	sp, r7
 4160              	.LCFI179:
 4161              		.cfi_def_cfa_register 13
 4162              		@ sp needed
 4163 003a 80BD     		pop	{r7, pc}
 4164              		.cfi_endproc
 4165              	.LFE367:
 4167              		.section	.text.get_fileinfo,"ax",%progbits
 4168              		.align	1
 4169              		.syntax unified
 4170              		.thumb
 4171              		.thumb_func
 4172              		.fpu fpv5-d16
 4174              	get_fileinfo:
 4175              	.LFB368:
2433:./Libraries/FatFs/Src/ff.c **** 
2434:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2435:./Libraries/FatFs/Src/ff.c **** 
2436:./Libraries/FatFs/Src/ff.c **** 
2437:./Libraries/FatFs/Src/ff.c **** 
2438:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2439:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2440:./Libraries/FatFs/Src/ff.c **** /* Get file information from directory entry                             */
2441:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2442:./Libraries/FatFs/Src/ff.c **** 
2443:./Libraries/FatFs/Src/ff.c **** static
2444:./Libraries/FatFs/Src/ff.c **** void get_fileinfo (		/* No return code */
2445:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2446:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2447:./Libraries/FatFs/Src/ff.c **** )
2448:./Libraries/FatFs/Src/ff.c **** {
ARM GAS  /tmp/cceCRWeb.s 			page 117


 4176              		.loc 1 2448 1
 4177              		.cfi_startproc
 4178              		@ args = 0, pretend = 0, frame = 24
 4179              		@ frame_needed = 1, uses_anonymous_args = 0
 4180 0000 80B5     		push	{r7, lr}
 4181              	.LCFI180:
 4182              		.cfi_def_cfa_offset 8
 4183              		.cfi_offset 7, -8
 4184              		.cfi_offset 14, -4
 4185 0002 86B0     		sub	sp, sp, #24
 4186              	.LCFI181:
 4187              		.cfi_def_cfa_offset 32
 4188 0004 00AF     		add	r7, sp, #0
 4189              	.LCFI182:
 4190              		.cfi_def_cfa_register 7
 4191 0006 7860     		str	r0, [r7, #4]
 4192 0008 3960     		str	r1, [r7]
2449:./Libraries/FatFs/Src/ff.c **** 	UINT i, j;
2450:./Libraries/FatFs/Src/ff.c **** 	TCHAR c;
2451:./Libraries/FatFs/Src/ff.c **** 	DWORD tm;
2452:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
2453:./Libraries/FatFs/Src/ff.c **** 	WCHAR w, lfv;
2454:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = dp->obj.fs;
2455:./Libraries/FatFs/Src/ff.c **** #endif
2456:./Libraries/FatFs/Src/ff.c **** 
2457:./Libraries/FatFs/Src/ff.c **** 
2458:./Libraries/FatFs/Src/ff.c **** 	fno->fname[0] = 0;		/* Invaidate file info */
 4193              		.loc 1 2458 16
 4194 000a 3B68     		ldr	r3, [r7]
 4195 000c 0022     		movs	r2, #0
 4196 000e 5A72     		strb	r2, [r3, #9]
2459:./Libraries/FatFs/Src/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 4197              		.loc 1 2459 9
 4198 0010 7B68     		ldr	r3, [r7, #4]
 4199 0012 DB69     		ldr	r3, [r3, #28]
 4200              		.loc 1 2459 5
 4201 0014 002B     		cmp	r3, #0
 4202 0016 4ED0     		beq	.L268
2460:./Libraries/FatFs/Src/ff.c **** 
2461:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2462:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2463:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2464:./Libraries/FatFs/Src/ff.c **** 		get_xdir_info(fs->dirbuf, fno);
2465:./Libraries/FatFs/Src/ff.c **** 		return;
2466:./Libraries/FatFs/Src/ff.c **** 	} else
2467:./Libraries/FatFs/Src/ff.c **** #endif
2468:./Libraries/FatFs/Src/ff.c **** 	{	/* On the FAT12/16/32 volume */
2469:./Libraries/FatFs/Src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2470:./Libraries/FatFs/Src/ff.c **** 			i = j = 0;
2471:./Libraries/FatFs/Src/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2472:./Libraries/FatFs/Src/ff.c **** #if !_LFN_UNICODE
2473:./Libraries/FatFs/Src/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2474:./Libraries/FatFs/Src/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2475:./Libraries/FatFs/Src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2476:./Libraries/FatFs/Src/ff.c **** 					fno->fname[i++] = (char)(w >> 8);
2477:./Libraries/FatFs/Src/ff.c **** 				}
2478:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 118


2479:./Libraries/FatFs/Src/ff.c **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2480:./Libraries/FatFs/Src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
2481:./Libraries/FatFs/Src/ff.c **** 			}
2482:./Libraries/FatFs/Src/ff.c **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2483:./Libraries/FatFs/Src/ff.c **** 		}
2484:./Libraries/FatFs/Src/ff.c **** 	}
2485:./Libraries/FatFs/Src/ff.c **** 
2486:./Libraries/FatFs/Src/ff.c **** 	i = j = 0;
2487:./Libraries/FatFs/Src/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2488:./Libraries/FatFs/Src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2489:./Libraries/FatFs/Src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2490:./Libraries/FatFs/Src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2491:./Libraries/FatFs/Src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2492:./Libraries/FatFs/Src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
2493:./Libraries/FatFs/Src/ff.c **** 			if (!lfv) fno->fname[j] = '.';
2494:./Libraries/FatFs/Src/ff.c **** 			fno->altname[j++] = '.';
2495:./Libraries/FatFs/Src/ff.c **** 		}
2496:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
2497:./Libraries/FatFs/Src/ff.c **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2498:./Libraries/FatFs/Src/ff.c **** 			c = c << 8 | dp->dir[i++];
2499:./Libraries/FatFs/Src/ff.c **** 		}
2500:./Libraries/FatFs/Src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2501:./Libraries/FatFs/Src/ff.c **** 		if (!c) c = '?';
2502:./Libraries/FatFs/Src/ff.c **** #endif
2503:./Libraries/FatFs/Src/ff.c **** 		fno->altname[j] = c;
2504:./Libraries/FatFs/Src/ff.c **** 		if (!lfv) {
2505:./Libraries/FatFs/Src/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2506:./Libraries/FatFs/Src/ff.c **** 				c += 0x20;			/* To lower */
2507:./Libraries/FatFs/Src/ff.c **** 			}
2508:./Libraries/FatFs/Src/ff.c **** 			fno->fname[j] = c;
2509:./Libraries/FatFs/Src/ff.c **** 		}
2510:./Libraries/FatFs/Src/ff.c **** 		j++;
2511:./Libraries/FatFs/Src/ff.c **** 	}
2512:./Libraries/FatFs/Src/ff.c **** 	if (!lfv) {
2513:./Libraries/FatFs/Src/ff.c **** 		fno->fname[j] = 0;
2514:./Libraries/FatFs/Src/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2515:./Libraries/FatFs/Src/ff.c **** 	}
2516:./Libraries/FatFs/Src/ff.c **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2517:./Libraries/FatFs/Src/ff.c **** 
2518:./Libraries/FatFs/Src/ff.c **** #else	/* Non-LFN configuration */
2519:./Libraries/FatFs/Src/ff.c **** 	i = j = 0;
 4203              		.loc 1 2519 8
 4204 0018 0023     		movs	r3, #0
 4205 001a 3B61     		str	r3, [r7, #16]
 4206              		.loc 1 2519 4
 4207 001c 3B69     		ldr	r3, [r7, #16]
 4208 001e 7B61     		str	r3, [r7, #20]
2520:./Libraries/FatFs/Src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
 4209              		.loc 1 2520 8
 4210 0020 21E0     		b	.L263
 4211              	.L267:
2521:./Libraries/FatFs/Src/ff.c **** 		c = (TCHAR)dp->dir[i++];
 4212              		.loc 1 2521 16
 4213 0022 7B68     		ldr	r3, [r7, #4]
 4214 0024 1A6A     		ldr	r2, [r3, #32]
 4215              		.loc 1 2521 23
 4216 0026 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 119


 4217 0028 591C     		adds	r1, r3, #1
 4218 002a 7961     		str	r1, [r7, #20]
 4219              		.loc 1 2521 21
 4220 002c 1344     		add	r3, r3, r2
 4221              		.loc 1 2521 5
 4222 002e 1B78     		ldrb	r3, [r3]
 4223 0030 FB73     		strb	r3, [r7, #15]
2522:./Libraries/FatFs/Src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
 4224              		.loc 1 2522 6
 4225 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4226 0034 202B     		cmp	r3, #32
 4227 0036 00D1     		bne	.L264
 4228              		.loc 1 2522 3 discriminator 1
 4229 0038 15E0     		b	.L263
 4230              	.L264:
2523:./Libraries/FatFs/Src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 4231              		.loc 1 2523 6
 4232 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4233 003c 052B     		cmp	r3, #5
 4234 003e 01D1     		bne	.L265
 4235              		.loc 1 2523 21 discriminator 1
 4236 0040 E523     		movs	r3, #229
 4237 0042 FB73     		strb	r3, [r7, #15]
 4238              	.L265:
2524:./Libraries/FatFs/Src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 4239              		.loc 1 2524 6
 4240 0044 7B69     		ldr	r3, [r7, #20]
 4241 0046 092B     		cmp	r3, #9
 4242 0048 06D1     		bne	.L266
 4243              		.loc 1 2524 27 discriminator 1
 4244 004a 3B69     		ldr	r3, [r7, #16]
 4245 004c 5A1C     		adds	r2, r3, #1
 4246 004e 3A61     		str	r2, [r7, #16]
 4247              		.loc 1 2524 31 discriminator 1
 4248 0050 3A68     		ldr	r2, [r7]
 4249 0052 1344     		add	r3, r3, r2
 4250 0054 2E22     		movs	r2, #46
 4251 0056 5A72     		strb	r2, [r3, #9]
 4252              	.L266:
2525:./Libraries/FatFs/Src/ff.c **** 		fno->fname[j++] = c;
 4253              		.loc 1 2525 15
 4254 0058 3B69     		ldr	r3, [r7, #16]
 4255 005a 5A1C     		adds	r2, r3, #1
 4256 005c 3A61     		str	r2, [r7, #16]
 4257              		.loc 1 2525 19
 4258 005e 3A68     		ldr	r2, [r7]
 4259 0060 1344     		add	r3, r3, r2
 4260 0062 FA7B     		ldrb	r2, [r7, #15]
 4261 0064 5A72     		strb	r2, [r3, #9]
 4262              	.L263:
2520:./Libraries/FatFs/Src/ff.c **** 		c = (TCHAR)dp->dir[i++];
 4263              		.loc 1 2520 8
 4264 0066 7B69     		ldr	r3, [r7, #20]
 4265 0068 0A2B     		cmp	r3, #10
 4266 006a DAD9     		bls	.L267
2526:./Libraries/FatFs/Src/ff.c **** 	}
2527:./Libraries/FatFs/Src/ff.c **** 	fno->fname[j] = 0;
ARM GAS  /tmp/cceCRWeb.s 			page 120


 4267              		.loc 1 2527 16
 4268 006c 3A68     		ldr	r2, [r7]
 4269 006e 3B69     		ldr	r3, [r7, #16]
 4270 0070 1344     		add	r3, r3, r2
 4271 0072 0933     		adds	r3, r3, #9
 4272 0074 0022     		movs	r2, #0
 4273 0076 1A70     		strb	r2, [r3]
2528:./Libraries/FatFs/Src/ff.c **** #endif
2529:./Libraries/FatFs/Src/ff.c **** 
2530:./Libraries/FatFs/Src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 4274              		.loc 1 2530 19
 4275 0078 7B68     		ldr	r3, [r7, #4]
 4276 007a 1B6A     		ldr	r3, [r3, #32]
 4277              		.loc 1 2530 15
 4278 007c DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 4279 007e 3B68     		ldr	r3, [r7]
 4280 0080 1A72     		strb	r2, [r3, #8]
2531:./Libraries/FatFs/Src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 4281              		.loc 1 2531 26
 4282 0082 7B68     		ldr	r3, [r7, #4]
 4283 0084 1B6A     		ldr	r3, [r3, #32]
 4284              		.loc 1 2531 32
 4285 0086 1C33     		adds	r3, r3, #28
 4286              		.loc 1 2531 15
 4287 0088 1846     		mov	r0, r3
 4288 008a FFF7FEFF 		bl	ld_dword
 4289 008e 0246     		mov	r2, r0
 4290              		.loc 1 2531 13
 4291 0090 3B68     		ldr	r3, [r7]
 4292 0092 1A60     		str	r2, [r3]
2532:./Libraries/FatFs/Src/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 4293              		.loc 1 2532 18
 4294 0094 7B68     		ldr	r3, [r7, #4]
 4295 0096 1B6A     		ldr	r3, [r3, #32]
 4296              		.loc 1 2532 24
 4297 0098 1633     		adds	r3, r3, #22
 4298              		.loc 1 2532 7
 4299 009a 1846     		mov	r0, r3
 4300 009c FFF7FEFF 		bl	ld_dword
 4301 00a0 B860     		str	r0, [r7, #8]
2533:./Libraries/FatFs/Src/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 4302              		.loc 1 2533 15
 4303 00a2 BB68     		ldr	r3, [r7, #8]
 4304 00a4 9AB2     		uxth	r2, r3
 4305              		.loc 1 2533 13
 4306 00a6 3B68     		ldr	r3, [r7]
 4307 00a8 DA80     		strh	r2, [r3, #6]	@ movhi
 4308              		.loc 1 2533 48
 4309 00aa BB68     		ldr	r3, [r7, #8]
 4310 00ac 1B0C     		lsrs	r3, r3, #16
 4311              		.loc 1 2533 38
 4312 00ae 9AB2     		uxth	r2, r3
 4313              		.loc 1 2533 36
 4314 00b0 3B68     		ldr	r3, [r7]
 4315 00b2 9A80     		strh	r2, [r3, #4]	@ movhi
 4316 00b4 00E0     		b	.L260
 4317              	.L268:
ARM GAS  /tmp/cceCRWeb.s 			page 121


2459:./Libraries/FatFs/Src/ff.c **** 
 4318              		.loc 1 2459 17
 4319 00b6 00BF     		nop
 4320              	.L260:
2534:./Libraries/FatFs/Src/ff.c **** }
 4321              		.loc 1 2534 1
 4322 00b8 1837     		adds	r7, r7, #24
 4323              	.LCFI183:
 4324              		.cfi_def_cfa_offset 8
 4325 00ba BD46     		mov	sp, r7
 4326              	.LCFI184:
 4327              		.cfi_def_cfa_register 13
 4328              		@ sp needed
 4329 00bc 80BD     		pop	{r7, pc}
 4330              		.cfi_endproc
 4331              	.LFE368:
 4333              		.section	.rodata
 4334              		.align	2
 4335              	.LC0:
 4336 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 4336      3A3B3C3D 
 4336      3E3F5B5D 
 4336      7C7F00
 4337              		.section	.text.create_name,"ax",%progbits
 4338              		.align	1
 4339              		.syntax unified
 4340              		.thumb
 4341              		.thumb_func
 4342              		.fpu fpv5-d16
 4344              	create_name:
 4345              	.LFB369:
2535:./Libraries/FatFs/Src/ff.c **** 
2536:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2537:./Libraries/FatFs/Src/ff.c **** 
2538:./Libraries/FatFs/Src/ff.c **** 
2539:./Libraries/FatFs/Src/ff.c **** 
2540:./Libraries/FatFs/Src/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
2541:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2542:./Libraries/FatFs/Src/ff.c **** /* Pattern matching                                                      */
2543:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2544:./Libraries/FatFs/Src/ff.c **** 
2545:./Libraries/FatFs/Src/ff.c **** static
2546:./Libraries/FatFs/Src/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2547:./Libraries/FatFs/Src/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
2548:./Libraries/FatFs/Src/ff.c **** )
2549:./Libraries/FatFs/Src/ff.c **** {
2550:./Libraries/FatFs/Src/ff.c **** #if !_LFN_UNICODE
2551:./Libraries/FatFs/Src/ff.c **** 	WCHAR chr;
2552:./Libraries/FatFs/Src/ff.c **** 
2553:./Libraries/FatFs/Src/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2554:./Libraries/FatFs/Src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2555:./Libraries/FatFs/Src/ff.c **** #ifdef _EXCVT
2556:./Libraries/FatFs/Src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2557:./Libraries/FatFs/Src/ff.c **** #else
2558:./Libraries/FatFs/Src/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2559:./Libraries/FatFs/Src/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2560:./Libraries/FatFs/Src/ff.c **** 	}
ARM GAS  /tmp/cceCRWeb.s 			page 122


2561:./Libraries/FatFs/Src/ff.c **** #endif
2562:./Libraries/FatFs/Src/ff.c **** 	return chr;
2563:./Libraries/FatFs/Src/ff.c **** #else
2564:./Libraries/FatFs/Src/ff.c **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2565:./Libraries/FatFs/Src/ff.c **** #endif
2566:./Libraries/FatFs/Src/ff.c **** }
2567:./Libraries/FatFs/Src/ff.c **** 
2568:./Libraries/FatFs/Src/ff.c **** 
2569:./Libraries/FatFs/Src/ff.c **** static
2570:./Libraries/FatFs/Src/ff.c **** int pattern_matching (	/* 0:not matched, 1:matched */
2571:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2572:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2573:./Libraries/FatFs/Src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2574:./Libraries/FatFs/Src/ff.c **** 	int inf				/* Infinite search (* specified) */
2575:./Libraries/FatFs/Src/ff.c **** )
2576:./Libraries/FatFs/Src/ff.c **** {
2577:./Libraries/FatFs/Src/ff.c **** 	const TCHAR *pp, *np;
2578:./Libraries/FatFs/Src/ff.c **** 	WCHAR pc, nc;
2579:./Libraries/FatFs/Src/ff.c **** 	int nm, nx;
2580:./Libraries/FatFs/Src/ff.c **** 
2581:./Libraries/FatFs/Src/ff.c **** 
2582:./Libraries/FatFs/Src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2583:./Libraries/FatFs/Src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2584:./Libraries/FatFs/Src/ff.c **** 	}
2585:./Libraries/FatFs/Src/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2586:./Libraries/FatFs/Src/ff.c **** 
2587:./Libraries/FatFs/Src/ff.c **** 	do {
2588:./Libraries/FatFs/Src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2589:./Libraries/FatFs/Src/ff.c **** 		for (;;) {
2590:./Libraries/FatFs/Src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2591:./Libraries/FatFs/Src/ff.c **** 				nm = nx = 0;
2592:./Libraries/FatFs/Src/ff.c **** 				do {				/* Analyze the wildcard chars */
2593:./Libraries/FatFs/Src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2594:./Libraries/FatFs/Src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2595:./Libraries/FatFs/Src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2596:./Libraries/FatFs/Src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2597:./Libraries/FatFs/Src/ff.c **** 			}
2598:./Libraries/FatFs/Src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2599:./Libraries/FatFs/Src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2600:./Libraries/FatFs/Src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2601:./Libraries/FatFs/Src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2602:./Libraries/FatFs/Src/ff.c **** 		}
2603:./Libraries/FatFs/Src/ff.c **** 		get_achar(&nam);			/* nam++ */
2604:./Libraries/FatFs/Src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2605:./Libraries/FatFs/Src/ff.c **** 
2606:./Libraries/FatFs/Src/ff.c **** 	return 0;
2607:./Libraries/FatFs/Src/ff.c **** }
2608:./Libraries/FatFs/Src/ff.c **** 
2609:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2610:./Libraries/FatFs/Src/ff.c **** 
2611:./Libraries/FatFs/Src/ff.c **** 
2612:./Libraries/FatFs/Src/ff.c **** 
2613:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2614:./Libraries/FatFs/Src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2615:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2616:./Libraries/FatFs/Src/ff.c **** 
2617:./Libraries/FatFs/Src/ff.c **** static
ARM GAS  /tmp/cceCRWeb.s 			page 123


2618:./Libraries/FatFs/Src/ff.c **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2619:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2620:./Libraries/FatFs/Src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2621:./Libraries/FatFs/Src/ff.c **** )
2622:./Libraries/FatFs/Src/ff.c **** {
 4346              		.loc 1 2622 1
 4347              		.cfi_startproc
 4348              		@ args = 0, pretend = 0, frame = 32
 4349              		@ frame_needed = 1, uses_anonymous_args = 0
 4350 0000 80B5     		push	{r7, lr}
 4351              	.LCFI185:
 4352              		.cfi_def_cfa_offset 8
 4353              		.cfi_offset 7, -8
 4354              		.cfi_offset 14, -4
 4355 0002 88B0     		sub	sp, sp, #32
 4356              	.LCFI186:
 4357              		.cfi_def_cfa_offset 40
 4358 0004 00AF     		add	r7, sp, #0
 4359              	.LCFI187:
 4360              		.cfi_def_cfa_register 7
 4361 0006 7860     		str	r0, [r7, #4]
 4362 0008 3960     		str	r1, [r7]
2623:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2624:./Libraries/FatFs/Src/ff.c **** 	BYTE b, cf;
2625:./Libraries/FatFs/Src/ff.c **** 	WCHAR w, *lfn;
2626:./Libraries/FatFs/Src/ff.c **** 	UINT i, ni, si, di;
2627:./Libraries/FatFs/Src/ff.c **** 	const TCHAR *p;
2628:./Libraries/FatFs/Src/ff.c **** 
2629:./Libraries/FatFs/Src/ff.c **** 	/* Create LFN in Unicode */
2630:./Libraries/FatFs/Src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2631:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
2632:./Libraries/FatFs/Src/ff.c **** 		w = p[si++];					/* Get a character */
2633:./Libraries/FatFs/Src/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
2634:./Libraries/FatFs/Src/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2635:./Libraries/FatFs/Src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2636:./Libraries/FatFs/Src/ff.c **** 			break;
2637:./Libraries/FatFs/Src/ff.c **** 		}
2638:./Libraries/FatFs/Src/ff.c **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2639:./Libraries/FatFs/Src/ff.c **** #if !_LFN_UNICODE
2640:./Libraries/FatFs/Src/ff.c **** 		w &= 0xFF;
2641:./Libraries/FatFs/Src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2642:./Libraries/FatFs/Src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
2643:./Libraries/FatFs/Src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
2644:./Libraries/FatFs/Src/ff.c **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2645:./Libraries/FatFs/Src/ff.c **** 		}
2646:./Libraries/FatFs/Src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2647:./Libraries/FatFs/Src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2648:./Libraries/FatFs/Src/ff.c **** #endif
2649:./Libraries/FatFs/Src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2650:./Libraries/FatFs/Src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
2651:./Libraries/FatFs/Src/ff.c **** 	}
2652:./Libraries/FatFs/Src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2653:./Libraries/FatFs/Src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2654:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
2655:./Libraries/FatFs/Src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2656:./Libraries/FatFs/Src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2657:./Libraries/FatFs/Src/ff.c **** 		lfn[di] = 0;
ARM GAS  /tmp/cceCRWeb.s 			page 124


2658:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2659:./Libraries/FatFs/Src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2660:./Libraries/FatFs/Src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2661:./Libraries/FatFs/Src/ff.c **** 		return FR_OK;
2662:./Libraries/FatFs/Src/ff.c **** 	}
2663:./Libraries/FatFs/Src/ff.c **** #endif
2664:./Libraries/FatFs/Src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2665:./Libraries/FatFs/Src/ff.c **** 		w = lfn[di - 1];
2666:./Libraries/FatFs/Src/ff.c **** 		if (w != ' ' && w != '.') break;
2667:./Libraries/FatFs/Src/ff.c **** 		di--;
2668:./Libraries/FatFs/Src/ff.c **** 	}
2669:./Libraries/FatFs/Src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
2670:./Libraries/FatFs/Src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2671:./Libraries/FatFs/Src/ff.c **** 
2672:./Libraries/FatFs/Src/ff.c **** 	/* Create SFN in directory form */
2673:./Libraries/FatFs/Src/ff.c **** 	mem_set(dp->fn, ' ', 11);
2674:./Libraries/FatFs/Src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2675:./Libraries/FatFs/Src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
2676:./Libraries/FatFs/Src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2677:./Libraries/FatFs/Src/ff.c **** 
2678:./Libraries/FatFs/Src/ff.c **** 	i = b = 0; ni = 8;
2679:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
2680:./Libraries/FatFs/Src/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
2681:./Libraries/FatFs/Src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
2682:./Libraries/FatFs/Src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2683:./Libraries/FatFs/Src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
2684:./Libraries/FatFs/Src/ff.c **** 		}
2685:./Libraries/FatFs/Src/ff.c **** 
2686:./Libraries/FatFs/Src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2687:./Libraries/FatFs/Src/ff.c **** 			if (ni == 11) {				/* Long extension */
2688:./Libraries/FatFs/Src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
2689:./Libraries/FatFs/Src/ff.c **** 			}
2690:./Libraries/FatFs/Src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2691:./Libraries/FatFs/Src/ff.c **** 			if (si > di) break;			/* No extension */
2692:./Libraries/FatFs/Src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
2693:./Libraries/FatFs/Src/ff.c **** 			b <<= 2; continue;
2694:./Libraries/FatFs/Src/ff.c **** 		}
2695:./Libraries/FatFs/Src/ff.c **** 
2696:./Libraries/FatFs/Src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
2697:./Libraries/FatFs/Src/ff.c **** #ifdef _EXCVT
2698:./Libraries/FatFs/Src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2699:./Libraries/FatFs/Src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2700:./Libraries/FatFs/Src/ff.c **** #else
2701:./Libraries/FatFs/Src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2702:./Libraries/FatFs/Src/ff.c **** #endif
2703:./Libraries/FatFs/Src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2704:./Libraries/FatFs/Src/ff.c **** 		}
2705:./Libraries/FatFs/Src/ff.c **** 
2706:./Libraries/FatFs/Src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2707:./Libraries/FatFs/Src/ff.c **** 			if (i >= ni - 1) {
2708:./Libraries/FatFs/Src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2709:./Libraries/FatFs/Src/ff.c **** 			}
2710:./Libraries/FatFs/Src/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2711:./Libraries/FatFs/Src/ff.c **** 		} else {						/* SBC */
2712:./Libraries/FatFs/Src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2713:./Libraries/FatFs/Src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2714:./Libraries/FatFs/Src/ff.c **** 			} else {
ARM GAS  /tmp/cceCRWeb.s 			page 125


2715:./Libraries/FatFs/Src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2716:./Libraries/FatFs/Src/ff.c **** 					b |= 2;
2717:./Libraries/FatFs/Src/ff.c **** 				} else {
2718:./Libraries/FatFs/Src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2719:./Libraries/FatFs/Src/ff.c **** 						b |= 1; w -= 0x20;
2720:./Libraries/FatFs/Src/ff.c **** 					}
2721:./Libraries/FatFs/Src/ff.c **** 				}
2722:./Libraries/FatFs/Src/ff.c **** 			}
2723:./Libraries/FatFs/Src/ff.c **** 		}
2724:./Libraries/FatFs/Src/ff.c **** 		dp->fn[i++] = (BYTE)w;
2725:./Libraries/FatFs/Src/ff.c **** 	}
2726:./Libraries/FatFs/Src/ff.c **** 
2727:./Libraries/FatFs/Src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2728:./Libraries/FatFs/Src/ff.c **** 
2729:./Libraries/FatFs/Src/ff.c **** 	if (ni == 8) b <<= 2;
2730:./Libraries/FatFs/Src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
2731:./Libraries/FatFs/Src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2732:./Libraries/FatFs/Src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2733:./Libraries/FatFs/Src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2734:./Libraries/FatFs/Src/ff.c **** 	}
2735:./Libraries/FatFs/Src/ff.c **** 
2736:./Libraries/FatFs/Src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2737:./Libraries/FatFs/Src/ff.c **** 
2738:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
2739:./Libraries/FatFs/Src/ff.c **** 
2740:./Libraries/FatFs/Src/ff.c **** 
2741:./Libraries/FatFs/Src/ff.c **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2742:./Libraries/FatFs/Src/ff.c **** 	BYTE c, d, *sfn;
2743:./Libraries/FatFs/Src/ff.c **** 	UINT ni, si, i;
2744:./Libraries/FatFs/Src/ff.c **** 	const char *p;
2745:./Libraries/FatFs/Src/ff.c **** 
2746:./Libraries/FatFs/Src/ff.c **** 	/* Create file name in directory form */
2747:./Libraries/FatFs/Src/ff.c **** 	p = *path; sfn = dp->fn;
 4363              		.loc 1 2747 4
 4364 000a 3B68     		ldr	r3, [r7]
 4365 000c 1B68     		ldr	r3, [r3]
 4366 000e FB60     		str	r3, [r7, #12]
 4367              		.loc 1 2747 17
 4368 0010 7B68     		ldr	r3, [r7, #4]
 4369 0012 2433     		adds	r3, r3, #36
 4370 0014 BB60     		str	r3, [r7, #8]
2748:./Libraries/FatFs/Src/ff.c **** 	mem_set(sfn, ' ', 11);
 4371              		.loc 1 2748 2
 4372 0016 0B22     		movs	r2, #11
 4373 0018 2021     		movs	r1, #32
 4374 001a B868     		ldr	r0, [r7, #8]
 4375 001c FFF7FEFF 		bl	mem_set
2749:./Libraries/FatFs/Src/ff.c **** 	si = i = 0; ni = 8;
 4376              		.loc 1 2749 9
 4377 0020 0023     		movs	r3, #0
 4378 0022 3B61     		str	r3, [r7, #16]
 4379              		.loc 1 2749 5
 4380 0024 3B69     		ldr	r3, [r7, #16]
 4381 0026 FB61     		str	r3, [r7, #28]
 4382              		.loc 1 2749 17
 4383 0028 0823     		movs	r3, #8
 4384 002a 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 126


 4385              	.L285:
2750:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
2751:./Libraries/FatFs/Src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2752:./Libraries/FatFs/Src/ff.c **** 		for (;;) {
2753:./Libraries/FatFs/Src/ff.c **** 			c = (BYTE)p[si++];
2754:./Libraries/FatFs/Src/ff.c **** 			if (c != '.' || si >= 3) break;
2755:./Libraries/FatFs/Src/ff.c **** 			sfn[i++] = c;
2756:./Libraries/FatFs/Src/ff.c **** 		}
2757:./Libraries/FatFs/Src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2758:./Libraries/FatFs/Src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2759:./Libraries/FatFs/Src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2760:./Libraries/FatFs/Src/ff.c **** 		return FR_OK;
2761:./Libraries/FatFs/Src/ff.c **** 	}
2762:./Libraries/FatFs/Src/ff.c **** #endif
2763:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
2764:./Libraries/FatFs/Src/ff.c **** 		c = (BYTE)p[si++];
 4386              		.loc 1 2764 17
 4387 002c FB69     		ldr	r3, [r7, #28]
 4388 002e 5A1C     		adds	r2, r3, #1
 4389 0030 FA61     		str	r2, [r7, #28]
 4390              		.loc 1 2764 14
 4391 0032 FA68     		ldr	r2, [r7, #12]
 4392 0034 1344     		add	r3, r3, r2
 4393              		.loc 1 2764 5
 4394 0036 1B78     		ldrb	r3, [r3]
 4395 0038 FB76     		strb	r3, [r7, #27]
2765:./Libraries/FatFs/Src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 4396              		.loc 1 2765 6
 4397 003a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4398 003c 202B     		cmp	r3, #32
 4399 003e 4ED9     		bls	.L290
2766:./Libraries/FatFs/Src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 4400              		.loc 1 2766 6
 4401 0040 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4402 0042 2F2B     		cmp	r3, #47
 4403 0044 06D0     		beq	.L274
 4404              		.loc 1 2766 16 discriminator 1
 4405 0046 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4406 0048 5C2B     		cmp	r3, #92
 4407 004a 10D1     		bne	.L273
2767:./Libraries/FatFs/Src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 4408              		.loc 1 2767 10
 4409 004c 02E0     		b	.L274
 4410              	.L275:
 4411              		.loc 1 2767 44 discriminator 4
 4412 004e FB69     		ldr	r3, [r7, #28]
 4413 0050 0133     		adds	r3, r3, #1
 4414 0052 FB61     		str	r3, [r7, #28]
 4415              	.L274:
 4416              		.loc 1 2767 12 discriminator 1
 4417 0054 FA68     		ldr	r2, [r7, #12]
 4418 0056 FB69     		ldr	r3, [r7, #28]
 4419 0058 1344     		add	r3, r3, r2
 4420 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4421              		.loc 1 2767 10 discriminator 1
 4422 005c 2F2B     		cmp	r3, #47
 4423 005e F6D0     		beq	.L275
ARM GAS  /tmp/cceCRWeb.s 			page 127


 4424              		.loc 1 2767 28 discriminator 3
 4425 0060 FA68     		ldr	r2, [r7, #12]
 4426 0062 FB69     		ldr	r3, [r7, #28]
 4427 0064 1344     		add	r3, r3, r2
 4428 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4429              		.loc 1 2767 24 discriminator 3
 4430 0068 5C2B     		cmp	r3, #92
 4431 006a F0D0     		beq	.L275
2768:./Libraries/FatFs/Src/ff.c **** 			break;
 4432              		.loc 1 2768 4
 4433 006c 38E0     		b	.L271
 4434              	.L273:
2769:./Libraries/FatFs/Src/ff.c **** 		}
2770:./Libraries/FatFs/Src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
 4435              		.loc 1 2770 6
 4436 006e FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4437 0070 2E2B     		cmp	r3, #46
 4438 0072 03D0     		beq	.L276
 4439              		.loc 1 2770 16 discriminator 1
 4440 0074 3A69     		ldr	r2, [r7, #16]
 4441 0076 7B69     		ldr	r3, [r7, #20]
 4442 0078 9A42     		cmp	r2, r3
 4443 007a 0CD3     		bcc	.L277
 4444              	.L276:
2771:./Libraries/FatFs/Src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 4445              		.loc 1 2771 7
 4446 007c 7B69     		ldr	r3, [r7, #20]
 4447 007e 0B2B     		cmp	r3, #11
 4448 0080 02D0     		beq	.L278
 4449              		.loc 1 2771 17 discriminator 2
 4450 0082 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4451 0084 2E2B     		cmp	r3, #46
 4452 0086 01D0     		beq	.L279
 4453              	.L278:
 4454              		.loc 1 2771 37 discriminator 3
 4455 0088 0623     		movs	r3, #6
 4456 008a 44E0     		b	.L280
 4457              	.L279:
2772:./Libraries/FatFs/Src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
 4458              		.loc 1 2772 6
 4459 008c 0823     		movs	r3, #8
 4460 008e 3B61     		str	r3, [r7, #16]
 4461              		.loc 1 2772 14
 4462 0090 0B23     		movs	r3, #11
 4463 0092 7B61     		str	r3, [r7, #20]
2773:./Libraries/FatFs/Src/ff.c **** 			continue;
 4464              		.loc 1 2773 4
 4465 0094 22E0     		b	.L281
 4466              	.L277:
2774:./Libraries/FatFs/Src/ff.c **** 		}
2775:./Libraries/FatFs/Src/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
 4467              		.loc 1 2775 9
 4468 0096 97F91B30 		ldrsb	r3, [r7, #27]
 4469              		.loc 1 2775 6
 4470 009a 002B     		cmp	r3, #0
 4471 009c 04DA     		bge	.L282
2776:./Libraries/FatFs/Src/ff.c **** #ifdef _EXCVT
ARM GAS  /tmp/cceCRWeb.s 			page 128


2777:./Libraries/FatFs/Src/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 4472              		.loc 1 2777 16
 4473 009e FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4474 00a0 803B     		subs	r3, r3, #128
 4475              		.loc 1 2777 6
 4476 00a2 1F4A     		ldr	r2, .L291
 4477 00a4 D35C     		ldrb	r3, [r2, r3]
 4478 00a6 FB76     		strb	r3, [r7, #27]
 4479              	.L282:
2778:./Libraries/FatFs/Src/ff.c **** #else
2779:./Libraries/FatFs/Src/ff.c **** #if !_DF1S
2780:./Libraries/FatFs/Src/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2781:./Libraries/FatFs/Src/ff.c **** #endif
2782:./Libraries/FatFs/Src/ff.c **** #endif
2783:./Libraries/FatFs/Src/ff.c **** 		}
2784:./Libraries/FatFs/Src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
2785:./Libraries/FatFs/Src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2786:./Libraries/FatFs/Src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2787:./Libraries/FatFs/Src/ff.c **** 			sfn[i++] = c;
2788:./Libraries/FatFs/Src/ff.c **** 			sfn[i++] = d;
2789:./Libraries/FatFs/Src/ff.c **** 		} else {						/* SBC */
2790:./Libraries/FatFs/Src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 4480              		.loc 1 2790 8
 4481 00a8 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4482 00aa 1946     		mov	r1, r3
 4483 00ac 1D48     		ldr	r0, .L291+4
 4484 00ae FFF7FEFF 		bl	chk_chr
 4485 00b2 0346     		mov	r3, r0
 4486              		.loc 1 2790 7
 4487 00b4 002B     		cmp	r3, #0
 4488 00b6 01D0     		beq	.L283
 4489              		.loc 1 2790 50 discriminator 1
 4490 00b8 0623     		movs	r3, #6
 4491 00ba 2CE0     		b	.L280
 4492              	.L283:
2791:./Libraries/FatFs/Src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 4493              		.loc 1 2791 7
 4494 00bc FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4495 00be 602B     		cmp	r3, #96
 4496 00c0 05D9     		bls	.L284
 4497              		.loc 1 2791 8 discriminator 1
 4498 00c2 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4499 00c4 7A2B     		cmp	r3, #122
 4500 00c6 02D8     		bhi	.L284
 4501              		.loc 1 2791 22 discriminator 2
 4502 00c8 FB7E     		ldrb	r3, [r7, #27]
 4503 00ca 203B     		subs	r3, r3, #32
 4504 00cc FB76     		strb	r3, [r7, #27]
 4505              	.L284:
2792:./Libraries/FatFs/Src/ff.c **** 			sfn[i++] = c;
 4506              		.loc 1 2792 9
 4507 00ce 3B69     		ldr	r3, [r7, #16]
 4508 00d0 5A1C     		adds	r2, r3, #1
 4509 00d2 3A61     		str	r2, [r7, #16]
 4510              		.loc 1 2792 7
 4511 00d4 BA68     		ldr	r2, [r7, #8]
 4512 00d6 1344     		add	r3, r3, r2
ARM GAS  /tmp/cceCRWeb.s 			page 129


 4513              		.loc 1 2792 13
 4514 00d8 FA7E     		ldrb	r2, [r7, #27]
 4515 00da 1A70     		strb	r2, [r3]
 4516              	.L281:
2764:./Libraries/FatFs/Src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 4517              		.loc 1 2764 5
 4518 00dc A6E7     		b	.L285
 4519              	.L290:
2765:./Libraries/FatFs/Src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 4520              		.loc 1 2765 3
 4521 00de 00BF     		nop
 4522              	.L271:
2793:./Libraries/FatFs/Src/ff.c **** 		}
2794:./Libraries/FatFs/Src/ff.c **** 	}
2795:./Libraries/FatFs/Src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 4523              		.loc 1 2795 12
 4524 00e0 FA68     		ldr	r2, [r7, #12]
 4525 00e2 FB69     		ldr	r3, [r7, #28]
 4526 00e4 1A44     		add	r2, r2, r3
 4527              		.loc 1 2795 8
 4528 00e6 3B68     		ldr	r3, [r7]
 4529 00e8 1A60     		str	r2, [r3]
2796:./Libraries/FatFs/Src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 4530              		.loc 1 2796 5
 4531 00ea 3B69     		ldr	r3, [r7, #16]
 4532 00ec 002B     		cmp	r3, #0
 4533 00ee 01D1     		bne	.L286
 4534              		.loc 1 2796 21 discriminator 1
 4535 00f0 0623     		movs	r3, #6
 4536 00f2 10E0     		b	.L280
 4537              	.L286:
2797:./Libraries/FatFs/Src/ff.c **** 
2798:./Libraries/FatFs/Src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 4538              		.loc 1 2798 9
 4539 00f4 BB68     		ldr	r3, [r7, #8]
 4540 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4541              		.loc 1 2798 5
 4542 00f8 E52B     		cmp	r3, #229
 4543 00fa 02D1     		bne	.L287
 4544              		.loc 1 2798 29 discriminator 1
 4545 00fc BB68     		ldr	r3, [r7, #8]
 4546 00fe 0522     		movs	r2, #5
 4547 0100 1A70     		strb	r2, [r3]
 4548              	.L287:
2799:./Libraries/FatFs/Src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 4549              		.loc 1 2799 14
 4550 0102 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 4551 0104 202B     		cmp	r3, #32
 4552 0106 01D8     		bhi	.L288
 4553              		.loc 1 2799 14 is_stmt 0 discriminator 1
 4554 0108 0422     		movs	r2, #4
 4555 010a 00E0     		b	.L289
 4556              	.L288:
 4557              		.loc 1 2799 14 discriminator 2
 4558 010c 0022     		movs	r2, #0
 4559              	.L289:
 4560              		.loc 1 2799 5 is_stmt 1 discriminator 4
ARM GAS  /tmp/cceCRWeb.s 			page 130


 4561 010e BB68     		ldr	r3, [r7, #8]
 4562 0110 0B33     		adds	r3, r3, #11
 4563              		.loc 1 2799 14 discriminator 4
 4564 0112 1A70     		strb	r2, [r3]
2800:./Libraries/FatFs/Src/ff.c **** 
2801:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 4565              		.loc 1 2801 9 discriminator 4
 4566 0114 0023     		movs	r3, #0
 4567              	.L280:
2802:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_LFN != 0 */
2803:./Libraries/FatFs/Src/ff.c **** }
 4568              		.loc 1 2803 1
 4569 0116 1846     		mov	r0, r3
 4570 0118 2037     		adds	r7, r7, #32
 4571              	.LCFI188:
 4572              		.cfi_def_cfa_offset 8
 4573 011a BD46     		mov	sp, r7
 4574              	.LCFI189:
 4575              		.cfi_def_cfa_register 13
 4576              		@ sp needed
 4577 011c 80BD     		pop	{r7, pc}
 4578              	.L292:
 4579 011e 00BF     		.align	2
 4580              	.L291:
 4581 0120 00000000 		.word	ExCvt
 4582 0124 00000000 		.word	.LC0
 4583              		.cfi_endproc
 4584              	.LFE369:
 4586              		.section	.text.follow_path,"ax",%progbits
 4587              		.align	1
 4588              		.syntax unified
 4589              		.thumb
 4590              		.thumb_func
 4591              		.fpu fpv5-d16
 4593              	follow_path:
 4594              	.LFB370:
2804:./Libraries/FatFs/Src/ff.c **** 
2805:./Libraries/FatFs/Src/ff.c **** 
2806:./Libraries/FatFs/Src/ff.c **** 
2807:./Libraries/FatFs/Src/ff.c **** 
2808:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2809:./Libraries/FatFs/Src/ff.c **** /* Follow a file path                                                    */
2810:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2811:./Libraries/FatFs/Src/ff.c **** 
2812:./Libraries/FatFs/Src/ff.c **** static
2813:./Libraries/FatFs/Src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2814:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2815:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2816:./Libraries/FatFs/Src/ff.c **** )
2817:./Libraries/FatFs/Src/ff.c **** {
 4595              		.loc 1 2817 1
 4596              		.cfi_startproc
 4597              		@ args = 0, pretend = 0, frame = 24
 4598              		@ frame_needed = 1, uses_anonymous_args = 0
 4599 0000 80B5     		push	{r7, lr}
 4600              	.LCFI190:
 4601              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceCRWeb.s 			page 131


 4602              		.cfi_offset 7, -8
 4603              		.cfi_offset 14, -4
 4604 0002 86B0     		sub	sp, sp, #24
 4605              	.LCFI191:
 4606              		.cfi_def_cfa_offset 32
 4607 0004 00AF     		add	r7, sp, #0
 4608              	.LCFI192:
 4609              		.cfi_def_cfa_register 7
 4610 0006 7860     		str	r0, [r7, #4]
 4611 0008 3960     		str	r1, [r7]
2818:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
2819:./Libraries/FatFs/Src/ff.c **** 	BYTE ns;
2820:./Libraries/FatFs/Src/ff.c **** 	_FDID *obj = &dp->obj;
 4612              		.loc 1 2820 9
 4613 000a 7B68     		ldr	r3, [r7, #4]
 4614 000c 3B61     		str	r3, [r7, #16]
2821:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs = obj->fs;
 4615              		.loc 1 2821 9
 4616 000e 3B69     		ldr	r3, [r7, #16]
 4617 0010 1B68     		ldr	r3, [r3]
 4618 0012 FB60     		str	r3, [r7, #12]
2822:./Libraries/FatFs/Src/ff.c **** 
2823:./Libraries/FatFs/Src/ff.c **** 
2824:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
2825:./Libraries/FatFs/Src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2826:./Libraries/FatFs/Src/ff.c **** 		obj->sclust = fs->cdir;				/* Start from current directory */
2827:./Libraries/FatFs/Src/ff.c **** 	} else
2828:./Libraries/FatFs/Src/ff.c **** #endif
2829:./Libraries/FatFs/Src/ff.c **** 	{										/* With heading separator */
2830:./Libraries/FatFs/Src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 4619              		.loc 1 2830 9
 4620 0014 02E0     		b	.L294
 4621              	.L295:
 4622              		.loc 1 2830 45 discriminator 4
 4623 0016 3B68     		ldr	r3, [r7]
 4624 0018 0133     		adds	r3, r3, #1
 4625 001a 3B60     		str	r3, [r7]
 4626              	.L294:
 4627              		.loc 1 2830 10 discriminator 1
 4628 001c 3B68     		ldr	r3, [r7]
 4629 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4630              		.loc 1 2830 9 discriminator 1
 4631 0020 2F2B     		cmp	r3, #47
 4632 0022 F8D0     		beq	.L295
 4633              		.loc 1 2830 26 discriminator 3
 4634 0024 3B68     		ldr	r3, [r7]
 4635 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4636              		.loc 1 2830 23 discriminator 3
 4637 0028 5C2B     		cmp	r3, #92
 4638 002a F4D0     		beq	.L295
2831:./Libraries/FatFs/Src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 4639              		.loc 1 2831 15
 4640 002c 3B69     		ldr	r3, [r7, #16]
 4641 002e 0022     		movs	r2, #0
 4642 0030 9A60     		str	r2, [r3, #8]
2832:./Libraries/FatFs/Src/ff.c **** 	}
2833:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/cceCRWeb.s 			page 132


2834:./Libraries/FatFs/Src/ff.c **** 	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
2835:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
2836:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2837:./Libraries/FatFs/Src/ff.c **** 		DIR dj;
2838:./Libraries/FatFs/Src/ff.c **** 
2839:./Libraries/FatFs/Src/ff.c **** 		obj->c_scl = fs->cdc_scl;
2840:./Libraries/FatFs/Src/ff.c **** 		obj->c_size = fs->cdc_size;
2841:./Libraries/FatFs/Src/ff.c **** 		obj->c_ofs = fs->cdc_ofs;
2842:./Libraries/FatFs/Src/ff.c **** 		res = load_obj_dir(&dj, obj);
2843:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) return res;
2844:./Libraries/FatFs/Src/ff.c **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2845:./Libraries/FatFs/Src/ff.c **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2846:./Libraries/FatFs/Src/ff.c **** 	}
2847:./Libraries/FatFs/Src/ff.c **** #endif
2848:./Libraries/FatFs/Src/ff.c **** #endif
2849:./Libraries/FatFs/Src/ff.c **** 
2850:./Libraries/FatFs/Src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 4643              		.loc 1 2850 12
 4644 0032 3B68     		ldr	r3, [r7]
 4645 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4646              		.loc 1 2850 5
 4647 0036 1F2B     		cmp	r3, #31
 4648 0038 0AD8     		bhi	.L296
2851:./Libraries/FatFs/Src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 4649              		.loc 1 2851 18
 4650 003a 7B68     		ldr	r3, [r7, #4]
 4651 003c 8022     		movs	r2, #128
 4652 003e 83F82F20 		strb	r2, [r3, #47]
2852:./Libraries/FatFs/Src/ff.c **** 		res = dir_sdi(dp, 0);
 4653              		.loc 1 2852 9
 4654 0042 0021     		movs	r1, #0
 4655 0044 7868     		ldr	r0, [r7, #4]
 4656 0046 FFF7FEFF 		bl	dir_sdi
 4657 004a 0346     		mov	r3, r0
 4658 004c FB75     		strb	r3, [r7, #23]
 4659 004e 43E0     		b	.L297
 4660              	.L296:
2853:./Libraries/FatFs/Src/ff.c **** 
2854:./Libraries/FatFs/Src/ff.c **** 	} else {								/* Follow path */
2855:./Libraries/FatFs/Src/ff.c **** 		for (;;) {
2856:./Libraries/FatFs/Src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4661              		.loc 1 2856 10
 4662 0050 3B46     		mov	r3, r7
 4663 0052 1946     		mov	r1, r3
 4664 0054 7868     		ldr	r0, [r7, #4]
 4665 0056 FFF7FEFF 		bl	create_name
 4666 005a 0346     		mov	r3, r0
 4667 005c FB75     		strb	r3, [r7, #23]
2857:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 4668              		.loc 1 2857 7
 4669 005e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4670 0060 002B     		cmp	r3, #0
 4671 0062 34D1     		bne	.L304
2858:./Libraries/FatFs/Src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 4672              		.loc 1 2858 10
 4673 0064 7868     		ldr	r0, [r7, #4]
 4674 0066 FFF7FEFF 		bl	dir_find
ARM GAS  /tmp/cceCRWeb.s 			page 133


 4675 006a 0346     		mov	r3, r0
 4676 006c FB75     		strb	r3, [r7, #23]
2859:./Libraries/FatFs/Src/ff.c **** 			ns = dp->fn[NSFLAG];
 4677              		.loc 1 2859 7
 4678 006e 7B68     		ldr	r3, [r7, #4]
 4679 0070 93F82F30 		ldrb	r3, [r3, #47]
 4680 0074 FB72     		strb	r3, [r7, #11]
2860:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4681              		.loc 1 2860 7
 4682 0076 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4683 0078 002B     		cmp	r3, #0
 4684 007a 0AD0     		beq	.L299
2861:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4685              		.loc 1 2861 8
 4686 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4687 007e 042B     		cmp	r3, #4
 4688 0080 27D1     		bne	.L305
2862:./Libraries/FatFs/Src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2863:./Libraries/FatFs/Src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2864:./Libraries/FatFs/Src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
2865:./Libraries/FatFs/Src/ff.c **** 						res = FR_OK;
2866:./Libraries/FatFs/Src/ff.c **** 					} else {							/* Could not find the object */
2867:./Libraries/FatFs/Src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 4689              		.loc 1 2867 16
 4690 0082 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4691 0084 03F00403 		and	r3, r3, #4
 4692              		.loc 1 2867 10
 4693 0088 002B     		cmp	r3, #0
 4694 008a 22D1     		bne	.L305
 4695              		.loc 1 2867 32 discriminator 1
 4696 008c 0523     		movs	r3, #5
 4697 008e FB75     		strb	r3, [r7, #23]
2868:./Libraries/FatFs/Src/ff.c **** 					}
2869:./Libraries/FatFs/Src/ff.c **** 				}
2870:./Libraries/FatFs/Src/ff.c **** 				break;
 4698              		.loc 1 2870 5 discriminator 1
 4699 0090 1FE0     		b	.L305
 4700              	.L299:
2871:./Libraries/FatFs/Src/ff.c **** 			}
2872:./Libraries/FatFs/Src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 4701              		.loc 1 2872 11
 4702 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4703 0094 03F00403 		and	r3, r3, #4
 4704              		.loc 1 2872 7
 4705 0098 002B     		cmp	r3, #0
 4706 009a 1CD1     		bne	.L306
2873:./Libraries/FatFs/Src/ff.c **** 			/* Get into the sub-directory */
2874:./Libraries/FatFs/Src/ff.c **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 4707              		.loc 1 2874 13
 4708 009c 3B69     		ldr	r3, [r7, #16]
 4709 009e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 4710              		.loc 1 2874 20
 4711 00a0 03F01003 		and	r3, r3, #16
 4712              		.loc 1 2874 7
 4713 00a4 002B     		cmp	r3, #0
 4714 00a6 02D1     		bne	.L302
2875:./Libraries/FatFs/Src/ff.c **** 				res = FR_NO_PATH; break;
ARM GAS  /tmp/cceCRWeb.s 			page 134


 4715              		.loc 1 2875 9
 4716 00a8 0523     		movs	r3, #5
 4717 00aa FB75     		strb	r3, [r7, #23]
 4718              		.loc 1 2875 5
 4719 00ac 14E0     		b	.L297
 4720              	.L302:
2876:./Libraries/FatFs/Src/ff.c **** 			}
2877:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2878:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
2879:./Libraries/FatFs/Src/ff.c **** 				obj->c_scl = obj->sclust;
2880:./Libraries/FatFs/Src/ff.c **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2881:./Libraries/FatFs/Src/ff.c **** 				obj->c_ofs = dp->blk_ofs;
2882:./Libraries/FatFs/Src/ff.c **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2883:./Libraries/FatFs/Src/ff.c **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2884:./Libraries/FatFs/Src/ff.c **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2885:./Libraries/FatFs/Src/ff.c **** 			} else
2886:./Libraries/FatFs/Src/ff.c **** #endif
2887:./Libraries/FatFs/Src/ff.c **** 			{
2888:./Libraries/FatFs/Src/ff.c **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 4721              		.loc 1 2888 32
 4722 00ae FB68     		ldr	r3, [r7, #12]
 4723 00b0 03F13402 		add	r2, r3, #52
 4724              		.loc 1 2888 44
 4725 00b4 7B68     		ldr	r3, [r7, #4]
 4726 00b6 5B69     		ldr	r3, [r3, #20]
 4727              		.loc 1 2888 51
 4728 00b8 C3F30803 		ubfx	r3, r3, #0, #9
 4729              		.loc 1 2888 19
 4730 00bc 1344     		add	r3, r3, r2
 4731 00be 1946     		mov	r1, r3
 4732 00c0 F868     		ldr	r0, [r7, #12]
 4733 00c2 FFF7FEFF 		bl	ld_clust
 4734 00c6 0246     		mov	r2, r0
 4735              		.loc 1 2888 17
 4736 00c8 3B69     		ldr	r3, [r7, #16]
 4737 00ca 9A60     		str	r2, [r3, #8]
2856:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) break;
 4738              		.loc 1 2856 8
 4739 00cc C0E7     		b	.L296
 4740              	.L304:
2857:./Libraries/FatFs/Src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 4741              		.loc 1 2857 4
 4742 00ce 00BF     		nop
 4743 00d0 02E0     		b	.L297
 4744              	.L305:
2870:./Libraries/FatFs/Src/ff.c **** 			}
 4745              		.loc 1 2870 5
 4746 00d2 00BF     		nop
 4747 00d4 00E0     		b	.L297
 4748              	.L306:
2872:./Libraries/FatFs/Src/ff.c **** 			/* Get into the sub-directory */
 4749              		.loc 1 2872 4
 4750 00d6 00BF     		nop
 4751              	.L297:
2889:./Libraries/FatFs/Src/ff.c **** 			}
2890:./Libraries/FatFs/Src/ff.c **** 		}
2891:./Libraries/FatFs/Src/ff.c **** 	}
ARM GAS  /tmp/cceCRWeb.s 			page 135


2892:./Libraries/FatFs/Src/ff.c **** 
2893:./Libraries/FatFs/Src/ff.c **** 	return res;
 4752              		.loc 1 2893 9
 4753 00d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2894:./Libraries/FatFs/Src/ff.c **** }
 4754              		.loc 1 2894 1
 4755 00da 1846     		mov	r0, r3
 4756 00dc 1837     		adds	r7, r7, #24
 4757              	.LCFI193:
 4758              		.cfi_def_cfa_offset 8
 4759 00de BD46     		mov	sp, r7
 4760              	.LCFI194:
 4761              		.cfi_def_cfa_register 13
 4762              		@ sp needed
 4763 00e0 80BD     		pop	{r7, pc}
 4764              		.cfi_endproc
 4765              	.LFE370:
 4767              		.section	.text.get_ldnumber,"ax",%progbits
 4768              		.align	1
 4769              		.syntax unified
 4770              		.thumb
 4771              		.thumb_func
 4772              		.fpu fpv5-d16
 4774              	get_ldnumber:
 4775              	.LFB371:
2895:./Libraries/FatFs/Src/ff.c **** 
2896:./Libraries/FatFs/Src/ff.c **** 
2897:./Libraries/FatFs/Src/ff.c **** 
2898:./Libraries/FatFs/Src/ff.c **** 
2899:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2900:./Libraries/FatFs/Src/ff.c **** /* Get logical drive number from path name                               */
2901:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2902:./Libraries/FatFs/Src/ff.c **** 
2903:./Libraries/FatFs/Src/ff.c **** static
2904:./Libraries/FatFs/Src/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2905:./Libraries/FatFs/Src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2906:./Libraries/FatFs/Src/ff.c **** )
2907:./Libraries/FatFs/Src/ff.c **** {
 4776              		.loc 1 2907 1
 4777              		.cfi_startproc
 4778              		@ args = 0, pretend = 0, frame = 24
 4779              		@ frame_needed = 1, uses_anonymous_args = 0
 4780              		@ link register save eliminated.
 4781 0000 80B4     		push	{r7}
 4782              	.LCFI195:
 4783              		.cfi_def_cfa_offset 4
 4784              		.cfi_offset 7, -4
 4785 0002 87B0     		sub	sp, sp, #28
 4786              	.LCFI196:
 4787              		.cfi_def_cfa_offset 32
 4788 0004 00AF     		add	r7, sp, #0
 4789              	.LCFI197:
 4790              		.cfi_def_cfa_register 7
 4791 0006 7860     		str	r0, [r7, #4]
2908:./Libraries/FatFs/Src/ff.c **** 	const TCHAR *tp, *tt;
2909:./Libraries/FatFs/Src/ff.c **** 	UINT i;
2910:./Libraries/FatFs/Src/ff.c **** 	int vol = -1;
ARM GAS  /tmp/cceCRWeb.s 			page 136


 4792              		.loc 1 2910 6
 4793 0008 4FF0FF33 		mov	r3, #-1
 4794 000c 3B61     		str	r3, [r7, #16]
2911:./Libraries/FatFs/Src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2912:./Libraries/FatFs/Src/ff.c **** 	static const char* const volid[] = {_VOLUME_STRS};
2913:./Libraries/FatFs/Src/ff.c **** 	const char *sp;
2914:./Libraries/FatFs/Src/ff.c **** 	char c;
2915:./Libraries/FatFs/Src/ff.c **** 	TCHAR tc;
2916:./Libraries/FatFs/Src/ff.c **** #endif
2917:./Libraries/FatFs/Src/ff.c **** 
2918:./Libraries/FatFs/Src/ff.c **** 
2919:./Libraries/FatFs/Src/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 4795              		.loc 1 2919 6
 4796 000e 7B68     		ldr	r3, [r7, #4]
 4797 0010 1B68     		ldr	r3, [r3]
 4798              		.loc 1 2919 5
 4799 0012 002B     		cmp	r3, #0
 4800 0014 31D0     		beq	.L308
2920:./Libraries/FatFs/Src/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 4801              		.loc 1 2920 11
 4802 0016 7B68     		ldr	r3, [r7, #4]
 4803 0018 1B68     		ldr	r3, [r3]
 4804 001a 7B61     		str	r3, [r7, #20]
 4805              		.loc 1 2920 3
 4806 001c 02E0     		b	.L309
 4807              	.L311:
 4808              		.loc 1 2920 73 discriminator 4
 4809 001e 7B69     		ldr	r3, [r7, #20]
 4810 0020 0133     		adds	r3, r3, #1
 4811 0022 7B61     		str	r3, [r7, #20]
 4812              	.L309:
 4813              		.loc 1 2920 26 discriminator 1
 4814 0024 7B69     		ldr	r3, [r7, #20]
 4815 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4816              		.loc 1 2920 3 discriminator 1
 4817 0028 202B     		cmp	r3, #32
 4818 002a 03D9     		bls	.L310
 4819              		.loc 1 2920 59 discriminator 3
 4820 002c 7B69     		ldr	r3, [r7, #20]
 4821 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4822              		.loc 1 2920 56 discriminator 3
 4823 0030 3A2B     		cmp	r3, #58
 4824 0032 F4D1     		bne	.L311
 4825              	.L310:
2921:./Libraries/FatFs/Src/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 4826              		.loc 1 2921 7
 4827 0034 7B69     		ldr	r3, [r7, #20]
 4828 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4829              		.loc 1 2921 6
 4830 0038 3A2B     		cmp	r3, #58
 4831 003a 1CD1     		bne	.L312
2922:./Libraries/FatFs/Src/ff.c **** 			tp = *path;
 4832              		.loc 1 2922 7
 4833 003c 7B68     		ldr	r3, [r7, #4]
 4834 003e 1B68     		ldr	r3, [r3]
 4835 0040 FB60     		str	r3, [r7, #12]
2923:./Libraries/FatFs/Src/ff.c **** 			i = *tp++ - '0';
ARM GAS  /tmp/cceCRWeb.s 			page 137


 4836              		.loc 1 2923 11
 4837 0042 FB68     		ldr	r3, [r7, #12]
 4838 0044 5A1C     		adds	r2, r3, #1
 4839 0046 FA60     		str	r2, [r7, #12]
 4840              		.loc 1 2923 8
 4841 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4842              		.loc 1 2923 14
 4843 004a 303B     		subs	r3, r3, #48
 4844              		.loc 1 2923 6
 4845 004c BB60     		str	r3, [r7, #8]
2924:./Libraries/FatFs/Src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 4846              		.loc 1 2924 7
 4847 004e BB68     		ldr	r3, [r7, #8]
 4848 0050 092B     		cmp	r3, #9
 4849 0052 0ED8     		bhi	.L313
 4850              		.loc 1 2924 15 discriminator 1
 4851 0054 FA68     		ldr	r2, [r7, #12]
 4852 0056 7B69     		ldr	r3, [r7, #20]
 4853 0058 9A42     		cmp	r2, r3
 4854 005a 0AD1     		bne	.L313
2925:./Libraries/FatFs/Src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 4855              		.loc 1 2925 8
 4856 005c BB68     		ldr	r3, [r7, #8]
 4857 005e 002B     		cmp	r3, #0
 4858 0060 07D1     		bne	.L313
2926:./Libraries/FatFs/Src/ff.c **** 					vol = (int)i;
 4859              		.loc 1 2926 10
 4860 0062 BB68     		ldr	r3, [r7, #8]
 4861 0064 3B61     		str	r3, [r7, #16]
2927:./Libraries/FatFs/Src/ff.c **** 					*path = ++tt;
 4862              		.loc 1 2927 12
 4863 0066 7B69     		ldr	r3, [r7, #20]
 4864 0068 0133     		adds	r3, r3, #1
 4865 006a 7B61     		str	r3, [r7, #20]
 4866 006c 7B68     		ldr	r3, [r7, #4]
 4867 006e 7A69     		ldr	r2, [r7, #20]
 4868 0070 1A60     		str	r2, [r3]
 4869              	.L313:
2928:./Libraries/FatFs/Src/ff.c **** 				}
2929:./Libraries/FatFs/Src/ff.c **** 			}
2930:./Libraries/FatFs/Src/ff.c **** #if _STR_VOLUME_ID
2931:./Libraries/FatFs/Src/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2932:./Libraries/FatFs/Src/ff.c **** 				i = 0; tt++;
2933:./Libraries/FatFs/Src/ff.c **** 				do {
2934:./Libraries/FatFs/Src/ff.c **** 					sp = volid[i]; tp = *path;
2935:./Libraries/FatFs/Src/ff.c **** 					do {	/* Compare a string drive id with path name */
2936:./Libraries/FatFs/Src/ff.c **** 						c = *sp++; tc = *tp++;
2937:./Libraries/FatFs/Src/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2938:./Libraries/FatFs/Src/ff.c **** 					} while (c && (TCHAR)c == tc);
2939:./Libraries/FatFs/Src/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2940:./Libraries/FatFs/Src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2941:./Libraries/FatFs/Src/ff.c **** 					vol = (int)i;
2942:./Libraries/FatFs/Src/ff.c **** 					*path = tt;
2943:./Libraries/FatFs/Src/ff.c **** 				}
2944:./Libraries/FatFs/Src/ff.c **** 			}
2945:./Libraries/FatFs/Src/ff.c **** #endif
2946:./Libraries/FatFs/Src/ff.c **** 			return vol;
ARM GAS  /tmp/cceCRWeb.s 			page 138


 4870              		.loc 1 2946 11
 4871 0072 3B69     		ldr	r3, [r7, #16]
 4872 0074 02E0     		b	.L314
 4873              	.L312:
2947:./Libraries/FatFs/Src/ff.c **** 		}
2948:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2949:./Libraries/FatFs/Src/ff.c **** 		vol = CurrVol;	/* Current drive */
2950:./Libraries/FatFs/Src/ff.c **** #else
2951:./Libraries/FatFs/Src/ff.c **** 		vol = 0;		/* Drive 0 */
 4874              		.loc 1 2951 7
 4875 0076 0023     		movs	r3, #0
 4876 0078 3B61     		str	r3, [r7, #16]
 4877              	.L308:
2952:./Libraries/FatFs/Src/ff.c **** #endif
2953:./Libraries/FatFs/Src/ff.c **** 	}
2954:./Libraries/FatFs/Src/ff.c **** 	return vol;
 4878              		.loc 1 2954 9
 4879 007a 3B69     		ldr	r3, [r7, #16]
 4880              	.L314:
2955:./Libraries/FatFs/Src/ff.c **** }
 4881              		.loc 1 2955 1
 4882 007c 1846     		mov	r0, r3
 4883 007e 1C37     		adds	r7, r7, #28
 4884              	.LCFI198:
 4885              		.cfi_def_cfa_offset 4
 4886 0080 BD46     		mov	sp, r7
 4887              	.LCFI199:
 4888              		.cfi_def_cfa_register 13
 4889              		@ sp needed
 4890 0082 5DF8047B 		ldr	r7, [sp], #4
 4891              	.LCFI200:
 4892              		.cfi_restore 7
 4893              		.cfi_def_cfa_offset 0
 4894 0086 7047     		bx	lr
 4895              		.cfi_endproc
 4896              	.LFE371:
 4898              		.section	.text.check_fs,"ax",%progbits
 4899              		.align	1
 4900              		.syntax unified
 4901              		.thumb
 4902              		.thumb_func
 4903              		.fpu fpv5-d16
 4905              	check_fs:
 4906              	.LFB372:
2956:./Libraries/FatFs/Src/ff.c **** 
2957:./Libraries/FatFs/Src/ff.c **** 
2958:./Libraries/FatFs/Src/ff.c **** 
2959:./Libraries/FatFs/Src/ff.c **** 
2960:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2961:./Libraries/FatFs/Src/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2962:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2963:./Libraries/FatFs/Src/ff.c **** 
2964:./Libraries/FatFs/Src/ff.c **** static
2965:./Libraries/FatFs/Src/ff.c **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2966:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,	/* File system object */
2967:./Libraries/FatFs/Src/ff.c **** 	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
2968:./Libraries/FatFs/Src/ff.c **** )
ARM GAS  /tmp/cceCRWeb.s 			page 139


2969:./Libraries/FatFs/Src/ff.c **** {
 4907              		.loc 1 2969 1
 4908              		.cfi_startproc
 4909              		@ args = 0, pretend = 0, frame = 8
 4910              		@ frame_needed = 1, uses_anonymous_args = 0
 4911 0000 80B5     		push	{r7, lr}
 4912              	.LCFI201:
 4913              		.cfi_def_cfa_offset 8
 4914              		.cfi_offset 7, -8
 4915              		.cfi_offset 14, -4
 4916 0002 82B0     		sub	sp, sp, #8
 4917              	.LCFI202:
 4918              		.cfi_def_cfa_offset 16
 4919 0004 00AF     		add	r7, sp, #0
 4920              	.LCFI203:
 4921              		.cfi_def_cfa_register 7
 4922 0006 7860     		str	r0, [r7, #4]
 4923 0008 3960     		str	r1, [r7]
2970:./Libraries/FatFs/Src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 4924              		.loc 1 2970 12
 4925 000a 7B68     		ldr	r3, [r7, #4]
 4926 000c 0022     		movs	r2, #0
 4927 000e DA70     		strb	r2, [r3, #3]
 4928              		.loc 1 2970 29
 4929 0010 7B68     		ldr	r3, [r7, #4]
 4930 0012 4FF0FF32 		mov	r2, #-1
 4931 0016 1A63     		str	r2, [r3, #48]
2971:./Libraries/FatFs/Src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 4932              		.loc 1 2971 6
 4933 0018 3968     		ldr	r1, [r7]
 4934 001a 7868     		ldr	r0, [r7, #4]
 4935 001c FFF7FEFF 		bl	move_window
 4936 0020 0346     		mov	r3, r0
 4937              		.loc 1 2971 5
 4938 0022 002B     		cmp	r3, #0
 4939 0024 01D0     		beq	.L316
 4940              		.loc 1 2971 45 discriminator 1
 4941 0026 0423     		movs	r3, #4
 4942 0028 38E0     		b	.L317
 4943              	.L316:
2972:./Libraries/FatFs/Src/ff.c **** 
2973:./Libraries/FatFs/Src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
 4944              		.loc 1 2973 14
 4945 002a 7B68     		ldr	r3, [r7, #4]
 4946 002c 3433     		adds	r3, r3, #52
 4947              		.loc 1 2973 6
 4948 002e 03F5FF73 		add	r3, r3, #510
 4949 0032 1846     		mov	r0, r3
 4950 0034 FFF7FEFF 		bl	ld_word
 4951 0038 0346     		mov	r3, r0
 4952 003a 1A46     		mov	r2, r3
 4953              		.loc 1 2973 5
 4954 003c 4AF65523 		movw	r3, #43605
 4955 0040 9A42     		cmp	r2, r3
 4956 0042 01D0     		beq	.L318
 4957              		.loc 1 2973 51 discriminator 1
 4958 0044 0323     		movs	r3, #3
ARM GAS  /tmp/cceCRWeb.s 			page 140


 4959 0046 29E0     		b	.L317
 4960              	.L318:
2974:./Libraries/FatFs/Src/ff.c **** 
2975:./Libraries/FatFs/Src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
 4961              		.loc 1 2975 13
 4962 0048 7B68     		ldr	r3, [r7, #4]
 4963 004a 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 4964              		.loc 1 2975 5
 4965 004e E92B     		cmp	r3, #233
 4966 0050 09D0     		beq	.L319
 4967              		.loc 1 2975 45 discriminator 1
 4968 0052 7B68     		ldr	r3, [r7, #4]
 4969 0054 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 4970              		.loc 1 2975 34 discriminator 1
 4971 0058 EB2B     		cmp	r3, #235
 4972 005a 1ED1     		bne	.L320
 4973              		.loc 1 2975 76 discriminator 2
 4974 005c 7B68     		ldr	r3, [r7, #4]
 4975 005e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 4976              		.loc 1 2975 66 discriminator 2
 4977 0062 902B     		cmp	r3, #144
 4978 0064 19D1     		bne	.L320
 4979              	.L319:
2976:./Libraries/FatFs/Src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 4980              		.loc 1 2976 17
 4981 0066 7B68     		ldr	r3, [r7, #4]
 4982 0068 3433     		adds	r3, r3, #52
 4983              		.loc 1 2976 8
 4984 006a 3633     		adds	r3, r3, #54
 4985 006c 1846     		mov	r0, r3
 4986 006e FFF7FEFF 		bl	ld_dword
 4987 0072 0346     		mov	r3, r0
 4988              		.loc 1 2976 42
 4989 0074 23F07F43 		bic	r3, r3, #-16777216
 4990              		.loc 1 2976 6
 4991 0078 0A4A     		ldr	r2, .L322
 4992 007a 9342     		cmp	r3, r2
 4993 007c 01D1     		bne	.L321
 4994              		.loc 1 2976 74 discriminator 1
 4995 007e 0023     		movs	r3, #0
 4996 0080 0CE0     		b	.L317
 4997              	.L321:
2977:./Libraries/FatFs/Src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 4998              		.loc 1 2977 16
 4999 0082 7B68     		ldr	r3, [r7, #4]
 5000 0084 3433     		adds	r3, r3, #52
 5001              		.loc 1 2977 7
 5002 0086 5233     		adds	r3, r3, #82
 5003 0088 1846     		mov	r0, r3
 5004 008a FFF7FEFF 		bl	ld_dword
 5005 008e 0346     		mov	r3, r0
 5006              		.loc 1 2977 6
 5007 0090 054A     		ldr	r2, .L322+4
 5008 0092 9342     		cmp	r3, r2
 5009 0094 01D1     		bne	.L320
 5010              		.loc 1 2977 65 discriminator 1
 5011 0096 0023     		movs	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 141


 5012 0098 00E0     		b	.L317
 5013              	.L320:
2978:./Libraries/FatFs/Src/ff.c **** 	}
2979:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
2980:./Libraries/FatFs/Src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2981:./Libraries/FatFs/Src/ff.c **** #endif
2982:./Libraries/FatFs/Src/ff.c **** 	return 2;
 5014              		.loc 1 2982 9
 5015 009a 0223     		movs	r3, #2
 5016              	.L317:
2983:./Libraries/FatFs/Src/ff.c **** }
 5017              		.loc 1 2983 1
 5018 009c 1846     		mov	r0, r3
 5019 009e 0837     		adds	r7, r7, #8
 5020              	.LCFI204:
 5021              		.cfi_def_cfa_offset 8
 5022 00a0 BD46     		mov	sp, r7
 5023              	.LCFI205:
 5024              		.cfi_def_cfa_register 13
 5025              		@ sp needed
 5026 00a2 80BD     		pop	{r7, pc}
 5027              	.L323:
 5028              		.align	2
 5029              	.L322:
 5030 00a4 46415400 		.word	5521734
 5031 00a8 46415433 		.word	861159750
 5032              		.cfi_endproc
 5033              	.LFE372:
 5035              		.section	.text.find_volume,"ax",%progbits
 5036              		.align	1
 5037              		.syntax unified
 5038              		.thumb
 5039              		.thumb_func
 5040              		.fpu fpv5-d16
 5042              	find_volume:
 5043              	.LFB373:
2984:./Libraries/FatFs/Src/ff.c **** 
2985:./Libraries/FatFs/Src/ff.c **** 
2986:./Libraries/FatFs/Src/ff.c **** 
2987:./Libraries/FatFs/Src/ff.c **** 
2988:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2989:./Libraries/FatFs/Src/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2990:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
2991:./Libraries/FatFs/Src/ff.c **** 
2992:./Libraries/FatFs/Src/ff.c **** static
2993:./Libraries/FatFs/Src/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2994:./Libraries/FatFs/Src/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2995:./Libraries/FatFs/Src/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2996:./Libraries/FatFs/Src/ff.c **** 	BYTE mode			/* !=0: Check write protection for write access */
2997:./Libraries/FatFs/Src/ff.c **** )
2998:./Libraries/FatFs/Src/ff.c **** {
 5044              		.loc 1 2998 1
 5045              		.cfi_startproc
 5046              		@ args = 0, pretend = 0, frame = 88
 5047              		@ frame_needed = 1, uses_anonymous_args = 0
 5048 0000 80B5     		push	{r7, lr}
 5049              	.LCFI206:
ARM GAS  /tmp/cceCRWeb.s 			page 142


 5050              		.cfi_def_cfa_offset 8
 5051              		.cfi_offset 7, -8
 5052              		.cfi_offset 14, -4
 5053 0002 96B0     		sub	sp, sp, #88
 5054              	.LCFI207:
 5055              		.cfi_def_cfa_offset 96
 5056 0004 00AF     		add	r7, sp, #0
 5057              	.LCFI208:
 5058              		.cfi_def_cfa_register 7
 5059 0006 F860     		str	r0, [r7, #12]
 5060 0008 B960     		str	r1, [r7, #8]
 5061 000a 1346     		mov	r3, r2
 5062 000c FB71     		strb	r3, [r7, #7]
2999:./Libraries/FatFs/Src/ff.c **** 	BYTE fmt, *pt;
3000:./Libraries/FatFs/Src/ff.c **** 	int vol;
3001:./Libraries/FatFs/Src/ff.c **** 	DSTATUS stat;
3002:./Libraries/FatFs/Src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3003:./Libraries/FatFs/Src/ff.c **** 	WORD nrsv;
3004:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3005:./Libraries/FatFs/Src/ff.c **** 	UINT i;
3006:./Libraries/FatFs/Src/ff.c **** 
3007:./Libraries/FatFs/Src/ff.c **** 
3008:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive number */
3009:./Libraries/FatFs/Src/ff.c **** 	*rfs = 0;
 5063              		.loc 1 3009 7
 5064 000e BB68     		ldr	r3, [r7, #8]
 5065 0010 0022     		movs	r2, #0
 5066 0012 1A60     		str	r2, [r3]
3010:./Libraries/FatFs/Src/ff.c **** 	vol = get_ldnumber(path);
 5067              		.loc 1 3010 8
 5068 0014 F868     		ldr	r0, [r7, #12]
 5069 0016 FFF7FEFF 		bl	get_ldnumber
 5070 001a F863     		str	r0, [r7, #60]
3011:./Libraries/FatFs/Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5071              		.loc 1 3011 5
 5072 001c FB6B     		ldr	r3, [r7, #60]
 5073 001e 002B     		cmp	r3, #0
 5074 0020 01DA     		bge	.L325
 5075              		.loc 1 3011 22 discriminator 1
 5076 0022 0B23     		movs	r3, #11
 5077 0024 36E2     		b	.L365
 5078              	.L325:
3012:./Libraries/FatFs/Src/ff.c **** 
3013:./Libraries/FatFs/Src/ff.c **** 	/* Check if the file system object is valid or not */
3014:./Libraries/FatFs/Src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
 5079              		.loc 1 3014 5
 5080 0026 AC4A     		ldr	r2, .L366
 5081 0028 FB6B     		ldr	r3, [r7, #60]
 5082 002a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5083 002e BB63     		str	r3, [r7, #56]
3015:./Libraries/FatFs/Src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 5084              		.loc 1 3015 5
 5085 0030 BB6B     		ldr	r3, [r7, #56]
 5086 0032 002B     		cmp	r3, #0
 5087 0034 01D1     		bne	.L327
 5088              		.loc 1 3015 18 discriminator 1
 5089 0036 0C23     		movs	r3, #12
ARM GAS  /tmp/cceCRWeb.s 			page 143


 5090 0038 2CE2     		b	.L365
 5091              	.L327:
3016:./Libraries/FatFs/Src/ff.c **** 
3017:./Libraries/FatFs/Src/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
 5092              		.loc 1 3017 2
 5093 003a B86B     		ldr	r0, [r7, #56]
 5094 003c FFF7FEFF 		bl	lock_fs
 5095 0040 0346     		mov	r3, r0
 5096 0042 002B     		cmp	r3, #0
 5097 0044 01D1     		bne	.L328
 5098              		.loc 1 3017 2 is_stmt 0 discriminator 1
 5099 0046 0F23     		movs	r3, #15
 5100 0048 24E2     		b	.L365
 5101              	.L328:
3018:./Libraries/FatFs/Src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 5102              		.loc 1 3018 7 is_stmt 1
 5103 004a BB68     		ldr	r3, [r7, #8]
 5104 004c BA6B     		ldr	r2, [r7, #56]
 5105 004e 1A60     		str	r2, [r3]
3019:./Libraries/FatFs/Src/ff.c **** 
3020:./Libraries/FatFs/Src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 5106              		.loc 1 3020 7
 5107 0050 FB79     		ldrb	r3, [r7, #7]
 5108 0052 23F00103 		bic	r3, r3, #1
 5109 0056 FB71     		strb	r3, [r7, #7]
3021:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 5110              		.loc 1 3021 8
 5111 0058 BB6B     		ldr	r3, [r7, #56]
 5112 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5113              		.loc 1 3021 5
 5114 005c 002B     		cmp	r3, #0
 5115 005e 1AD0     		beq	.L329
3022:./Libraries/FatFs/Src/ff.c **** 		stat = disk_status(fs->drv);
 5116              		.loc 1 3022 10
 5117 0060 BB6B     		ldr	r3, [r7, #56]
 5118 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5119 0064 1846     		mov	r0, r3
 5120 0066 FFF7FEFF 		bl	disk_status
 5121 006a 0346     		mov	r3, r0
 5122 006c 87F83730 		strb	r3, [r7, #55]
3023:./Libraries/FatFs/Src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 5123              		.loc 1 3023 14
 5124 0070 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 5125 0074 03F00103 		and	r3, r3, #1
 5126              		.loc 1 3023 6
 5127 0078 002B     		cmp	r3, #0
 5128 007a 0CD1     		bne	.L329
3024:./Libraries/FatFs/Src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 5129              		.loc 1 3024 7
 5130 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5131 007e 002B     		cmp	r3, #0
 5132 0080 07D0     		beq	.L330
 5133              		.loc 1 3024 39 discriminator 1
 5134 0082 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 5135 0086 03F00403 		and	r3, r3, #4
 5136              		.loc 1 3024 30 discriminator 1
 5137 008a 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 144


 5138 008c 01D0     		beq	.L330
3025:./Libraries/FatFs/Src/ff.c **** 				return FR_WRITE_PROTECTED;
 5139              		.loc 1 3025 12
 5140 008e 0A23     		movs	r3, #10
 5141 0090 00E2     		b	.L365
 5142              	.L330:
3026:./Libraries/FatFs/Src/ff.c **** 			}
3027:./Libraries/FatFs/Src/ff.c **** 			return FR_OK;				/* The file system object is valid */
 5143              		.loc 1 3027 11
 5144 0092 0023     		movs	r3, #0
 5145 0094 FEE1     		b	.L365
 5146              	.L329:
3028:./Libraries/FatFs/Src/ff.c **** 		}
3029:./Libraries/FatFs/Src/ff.c **** 	}
3030:./Libraries/FatFs/Src/ff.c **** 
3031:./Libraries/FatFs/Src/ff.c **** 	/* The file system object is not valid. */
3032:./Libraries/FatFs/Src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
3033:./Libraries/FatFs/Src/ff.c **** 
3034:./Libraries/FatFs/Src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 5147              		.loc 1 3034 14
 5148 0096 BB6B     		ldr	r3, [r7, #56]
 5149 0098 0022     		movs	r2, #0
 5150 009a 1A70     		strb	r2, [r3]
3035:./Libraries/FatFs/Src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 5151              		.loc 1 3035 12
 5152 009c FB6B     		ldr	r3, [r7, #60]
 5153 009e DAB2     		uxtb	r2, r3
 5154              		.loc 1 3035 10
 5155 00a0 BB6B     		ldr	r3, [r7, #56]
 5156 00a2 5A70     		strb	r2, [r3, #1]
3036:./Libraries/FatFs/Src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 5157              		.loc 1 3036 9
 5158 00a4 BB6B     		ldr	r3, [r7, #56]
 5159 00a6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5160 00a8 1846     		mov	r0, r3
 5161 00aa FFF7FEFF 		bl	disk_initialize
 5162 00ae 0346     		mov	r3, r0
 5163 00b0 87F83730 		strb	r3, [r7, #55]
3037:./Libraries/FatFs/Src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 5164              		.loc 1 3037 11
 5165 00b4 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 5166 00b8 03F00103 		and	r3, r3, #1
 5167              		.loc 1 3037 5
 5168 00bc 002B     		cmp	r3, #0
 5169 00be 01D0     		beq	.L331
3038:./Libraries/FatFs/Src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 5170              		.loc 1 3038 10
 5171 00c0 0323     		movs	r3, #3
 5172 00c2 E7E1     		b	.L365
 5173              	.L331:
3039:./Libraries/FatFs/Src/ff.c **** 	}
3040:./Libraries/FatFs/Src/ff.c **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 5174              		.loc 1 3040 5
 5175 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5176 00c6 002B     		cmp	r3, #0
 5177 00c8 07D0     		beq	.L332
 5178              		.loc 1 3040 37 discriminator 1
ARM GAS  /tmp/cceCRWeb.s 			page 145


 5179 00ca 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 5180 00ce 03F00403 		and	r3, r3, #4
 5181              		.loc 1 3040 28 discriminator 1
 5182 00d2 002B     		cmp	r3, #0
 5183 00d4 01D0     		beq	.L332
3041:./Libraries/FatFs/Src/ff.c **** 		return FR_WRITE_PROTECTED;
 5184              		.loc 1 3041 10
 5185 00d6 0A23     		movs	r3, #10
 5186 00d8 DCE1     		b	.L365
 5187              	.L332:
3042:./Libraries/FatFs/Src/ff.c **** 	}
3043:./Libraries/FatFs/Src/ff.c **** #if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
3044:./Libraries/FatFs/Src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3045:./Libraries/FatFs/Src/ff.c **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3046:./Libraries/FatFs/Src/ff.c **** #endif
3047:./Libraries/FatFs/Src/ff.c **** 
3048:./Libraries/FatFs/Src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
3049:./Libraries/FatFs/Src/ff.c **** 	bsect = 0;
 5188              		.loc 1 3049 8
 5189 00da 0023     		movs	r3, #0
 5190 00dc 3B65     		str	r3, [r7, #80]
3050:./Libraries/FatFs/Src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 5191              		.loc 1 3050 8
 5192 00de 396D     		ldr	r1, [r7, #80]
 5193 00e0 B86B     		ldr	r0, [r7, #56]
 5194 00e2 FFF7FEFF 		bl	check_fs
 5195 00e6 0346     		mov	r3, r0
 5196 00e8 87F85730 		strb	r3, [r7, #87]
3051:./Libraries/FatFs/Src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 5197              		.loc 1 3051 5
 5198 00ec 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5199 00f0 022B     		cmp	r3, #2
 5200 00f2 4BD1     		bne	.L333
3052:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5201              		.loc 1 3052 10
 5202 00f4 0023     		movs	r3, #0
 5203 00f6 3B64     		str	r3, [r7, #64]
 5204              		.loc 1 3052 3
 5205 00f8 1FE0     		b	.L334
 5206              	.L337:
3053:./Libraries/FatFs/Src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 5207              		.loc 1 3053 9
 5208 00fa BB6B     		ldr	r3, [r7, #56]
 5209 00fc 03F13402 		add	r2, r3, #52
 5210              		.loc 1 3053 34
 5211 0100 3B6C     		ldr	r3, [r7, #64]
 5212 0102 1B01     		lsls	r3, r3, #4
 5213              		.loc 1 3053 30
 5214 0104 03F5DF73 		add	r3, r3, #446
 5215              		.loc 1 3053 7
 5216 0108 1344     		add	r3, r3, r2
 5217 010a 3B63     		str	r3, [r7, #48]
3054:./Libraries/FatFs/Src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 5218              		.loc 1 3054 14
 5219 010c 3B6B     		ldr	r3, [r7, #48]
 5220 010e 0433     		adds	r3, r3, #4
 5221 0110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 146


 5222              		.loc 1 3054 54
 5223 0112 002B     		cmp	r3, #0
 5224 0114 06D0     		beq	.L335
 5225              		.loc 1 3054 41 discriminator 1
 5226 0116 3B6B     		ldr	r3, [r7, #48]
 5227 0118 0833     		adds	r3, r3, #8
 5228              		.loc 1 3054 29 discriminator 1
 5229 011a 1846     		mov	r0, r3
 5230 011c FFF7FEFF 		bl	ld_dword
 5231 0120 0246     		mov	r2, r0
 5232 0122 00E0     		b	.L336
 5233              	.L335:
 5234              		.loc 1 3054 54 discriminator 2
 5235 0124 0022     		movs	r2, #0
 5236              	.L336:
 5237              		.loc 1 3054 10 discriminator 4
 5238 0126 3B6C     		ldr	r3, [r7, #64]
 5239 0128 9B00     		lsls	r3, r3, #2
 5240 012a 07F15801 		add	r1, r7, #88
 5241 012e 0B44     		add	r3, r3, r1
 5242 0130 43F8442C 		str	r2, [r3, #-68]
3052:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5243              		.loc 1 3052 23 discriminator 4
 5244 0134 3B6C     		ldr	r3, [r7, #64]
 5245 0136 0133     		adds	r3, r3, #1
 5246 0138 3B64     		str	r3, [r7, #64]
 5247              	.L334:
3052:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 5248              		.loc 1 3052 3 discriminator 2
 5249 013a 3B6C     		ldr	r3, [r7, #64]
 5250 013c 032B     		cmp	r3, #3
 5251 013e DCD9     		bls	.L337
3055:./Libraries/FatFs/Src/ff.c **** 		}
3056:./Libraries/FatFs/Src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 5252              		.loc 1 3056 5
 5253 0140 0023     		movs	r3, #0
 5254 0142 3B64     		str	r3, [r7, #64]
3057:./Libraries/FatFs/Src/ff.c **** 		if (i) i--;
 5255              		.loc 1 3057 6
 5256 0144 3B6C     		ldr	r3, [r7, #64]
 5257 0146 002B     		cmp	r3, #0
 5258 0148 02D0     		beq	.L341
 5259              		.loc 1 3057 11 discriminator 1
 5260 014a 3B6C     		ldr	r3, [r7, #64]
 5261 014c 013B     		subs	r3, r3, #1
 5262 014e 3B64     		str	r3, [r7, #64]
 5263              	.L341:
3058:./Libraries/FatFs/Src/ff.c **** 		do {							/* Find an FAT volume */
3059:./Libraries/FatFs/Src/ff.c **** 			bsect = br[i];
 5264              		.loc 1 3059 10
 5265 0150 3B6C     		ldr	r3, [r7, #64]
 5266 0152 9B00     		lsls	r3, r3, #2
 5267 0154 07F15802 		add	r2, r7, #88
 5268 0158 1344     		add	r3, r3, r2
 5269 015a 53F8443C 		ldr	r3, [r3, #-68]
 5270 015e 3B65     		str	r3, [r7, #80]
3060:./Libraries/FatFs/Src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
ARM GAS  /tmp/cceCRWeb.s 			page 147


 5271              		.loc 1 3060 8
 5272 0160 3B6D     		ldr	r3, [r7, #80]
 5273 0162 002B     		cmp	r3, #0
 5274 0164 05D0     		beq	.L339
 5275              		.loc 1 3060 18 discriminator 1
 5276 0166 396D     		ldr	r1, [r7, #80]
 5277 0168 B86B     		ldr	r0, [r7, #56]
 5278 016a FFF7FEFF 		bl	check_fs
 5279 016e 0346     		mov	r3, r0
 5280 0170 00E0     		b	.L340
 5281              	.L339:
 5282              		.loc 1 3060 8 discriminator 2
 5283 0172 0323     		movs	r3, #3
 5284              	.L340:
 5285              		.loc 1 3060 8 is_stmt 0 discriminator 4
 5286 0174 87F85730 		strb	r3, [r7, #87]
3061:./Libraries/FatFs/Src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 5287              		.loc 1 3061 3 is_stmt 1 discriminator 4
 5288 0178 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5289 017c 012B     		cmp	r3, #1
 5290 017e 05D9     		bls	.L333
 5291              		.loc 1 3061 40 discriminator 1
 5292 0180 3B6C     		ldr	r3, [r7, #64]
 5293 0182 0133     		adds	r3, r3, #1
 5294 0184 3B64     		str	r3, [r7, #64]
 5295 0186 3B6C     		ldr	r3, [r7, #64]
 5296 0188 032B     		cmp	r3, #3
 5297 018a E1D9     		bls	.L341
 5298              	.L333:
3062:./Libraries/FatFs/Src/ff.c **** 	}
3063:./Libraries/FatFs/Src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 5299              		.loc 1 3063 5
 5300 018c 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5301 0190 042B     		cmp	r3, #4
 5302 0192 01D1     		bne	.L342
 5303              		.loc 1 3063 23 discriminator 1
 5304 0194 0123     		movs	r3, #1
 5305 0196 7DE1     		b	.L365
 5306              	.L342:
3064:./Libraries/FatFs/Src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 5307              		.loc 1 3064 5
 5308 0198 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5309 019c 012B     		cmp	r3, #1
 5310 019e 01D9     		bls	.L343
 5311              		.loc 1 3064 23 discriminator 1
 5312 01a0 0D23     		movs	r3, #13
 5313 01a2 77E1     		b	.L365
 5314              	.L343:
3065:./Libraries/FatFs/Src/ff.c **** 
3066:./Libraries/FatFs/Src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the file system object */
3067:./Libraries/FatFs/Src/ff.c **** 
3068:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3069:./Libraries/FatFs/Src/ff.c **** 	if (fmt == 1) {
3070:./Libraries/FatFs/Src/ff.c **** 		QWORD maxlba;
3071:./Libraries/FatFs/Src/ff.c **** 
3072:./Libraries/FatFs/Src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3073:./Libraries/FatFs/Src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
ARM GAS  /tmp/cceCRWeb.s 			page 148


3074:./Libraries/FatFs/Src/ff.c **** 
3075:./Libraries/FatFs/Src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3076:./Libraries/FatFs/Src/ff.c **** 
3077:./Libraries/FatFs/Src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3078:./Libraries/FatFs/Src/ff.c **** 			return FR_NO_FILESYSTEM;
3079:./Libraries/FatFs/Src/ff.c **** 		}
3080:./Libraries/FatFs/Src/ff.c **** 
3081:./Libraries/FatFs/Src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3082:./Libraries/FatFs/Src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3083:./Libraries/FatFs/Src/ff.c **** 
3084:./Libraries/FatFs/Src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3085:./Libraries/FatFs/Src/ff.c **** 
3086:./Libraries/FatFs/Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3087:./Libraries/FatFs/Src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3088:./Libraries/FatFs/Src/ff.c **** 
3089:./Libraries/FatFs/Src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3090:./Libraries/FatFs/Src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3091:./Libraries/FatFs/Src/ff.c **** 
3092:./Libraries/FatFs/Src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3093:./Libraries/FatFs/Src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3094:./Libraries/FatFs/Src/ff.c **** 		fs->n_fatent = nclst + 2;
3095:./Libraries/FatFs/Src/ff.c **** 
3096:./Libraries/FatFs/Src/ff.c **** 		/* Boundaries and Limits */
3097:./Libraries/FatFs/Src/ff.c **** 		fs->volbase = bsect;
3098:./Libraries/FatFs/Src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3099:./Libraries/FatFs/Src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3100:./Libraries/FatFs/Src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3101:./Libraries/FatFs/Src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3102:./Libraries/FatFs/Src/ff.c **** 
3103:./Libraries/FatFs/Src/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3104:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3105:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3106:./Libraries/FatFs/Src/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3107:./Libraries/FatFs/Src/ff.c **** 		}
3108:./Libraries/FatFs/Src/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3109:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3110:./Libraries/FatFs/Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3111:./Libraries/FatFs/Src/ff.c **** #endif
3112:./Libraries/FatFs/Src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3113:./Libraries/FatFs/Src/ff.c **** 	} else
3114:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_EXFAT */
3115:./Libraries/FatFs/Src/ff.c **** 	{
3116:./Libraries/FatFs/Src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
 5315              		.loc 1 3116 15
 5316 01a4 BB6B     		ldr	r3, [r7, #56]
 5317 01a6 3433     		adds	r3, r3, #52
 5318              		.loc 1 3116 7
 5319 01a8 0B33     		adds	r3, r3, #11
 5320 01aa 1846     		mov	r0, r3
 5321 01ac FFF7FEFF 		bl	ld_word
 5322 01b0 0346     		mov	r3, r0
 5323              		.loc 1 3116 6
 5324 01b2 B3F5007F 		cmp	r3, #512
 5325 01b6 01D0     		beq	.L344
 5326              		.loc 1 3116 59 discriminator 1
 5327 01b8 0D23     		movs	r3, #13
 5328 01ba 6BE1     		b	.L365
ARM GAS  /tmp/cceCRWeb.s 			page 149


 5329              	.L344:
3117:./Libraries/FatFs/Src/ff.c **** 
3118:./Libraries/FatFs/Src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 5330              		.loc 1 3118 20
 5331 01bc BB6B     		ldr	r3, [r7, #56]
 5332 01be 3433     		adds	r3, r3, #52
 5333              		.loc 1 3118 12
 5334 01c0 1633     		adds	r3, r3, #22
 5335 01c2 1846     		mov	r0, r3
 5336 01c4 FFF7FEFF 		bl	ld_word
 5337 01c8 0346     		mov	r3, r0
 5338              		.loc 1 3118 10
 5339 01ca FB64     		str	r3, [r7, #76]
3119:./Libraries/FatFs/Src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 5340              		.loc 1 3119 6
 5341 01cc FB6C     		ldr	r3, [r7, #76]
 5342 01ce 002B     		cmp	r3, #0
 5343 01d0 06D1     		bne	.L345
 5344              		.loc 1 3119 38 discriminator 1
 5345 01d2 BB6B     		ldr	r3, [r7, #56]
 5346 01d4 3433     		adds	r3, r3, #52
 5347              		.loc 1 3119 29 discriminator 1
 5348 01d6 2433     		adds	r3, r3, #36
 5349 01d8 1846     		mov	r0, r3
 5350 01da FFF7FEFF 		bl	ld_dword
 5351 01de F864     		str	r0, [r7, #76]
 5352              	.L345:
3120:./Libraries/FatFs/Src/ff.c **** 		fs->fsize = fasize;
 5353              		.loc 1 3120 13
 5354 01e0 BB6B     		ldr	r3, [r7, #56]
 5355 01e2 FA6C     		ldr	r2, [r7, #76]
 5356 01e4 DA61     		str	r2, [r3, #28]
3121:./Libraries/FatFs/Src/ff.c **** 
3122:./Libraries/FatFs/Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 5357              		.loc 1 3122 23
 5358 01e6 BB6B     		ldr	r3, [r7, #56]
 5359 01e8 93F84420 		ldrb	r2, [r3, #68]	@ zero_extendqisi2
 5360              		.loc 1 3122 14
 5361 01ec BB6B     		ldr	r3, [r7, #56]
 5362 01ee 9A70     		strb	r2, [r3, #2]
3123:./Libraries/FatFs/Src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 5363              		.loc 1 3123 9
 5364 01f0 BB6B     		ldr	r3, [r7, #56]
 5365 01f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5366              		.loc 1 3123 6
 5367 01f4 012B     		cmp	r3, #1
 5368 01f6 05D0     		beq	.L346
 5369              		.loc 1 3123 28 discriminator 1
 5370 01f8 BB6B     		ldr	r3, [r7, #56]
 5371 01fa 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5372              		.loc 1 3123 23 discriminator 1
 5373 01fc 022B     		cmp	r3, #2
 5374 01fe 01D0     		beq	.L346
 5375              		.loc 1 3123 50 discriminator 2
 5376 0200 0D23     		movs	r3, #13
 5377 0202 47E1     		b	.L365
 5378              	.L346:
ARM GAS  /tmp/cceCRWeb.s 			page 150


3124:./Libraries/FatFs/Src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 5379              		.loc 1 3124 15
 5380 0204 BB6B     		ldr	r3, [r7, #56]
 5381 0206 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5382 0208 1A46     		mov	r2, r3
 5383              		.loc 1 3124 10
 5384 020a FB6C     		ldr	r3, [r7, #76]
 5385 020c 02FB03F3 		mul	r3, r2, r3
 5386 0210 FB64     		str	r3, [r7, #76]
3125:./Libraries/FatFs/Src/ff.c **** 
3126:./Libraries/FatFs/Src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 5387              		.loc 1 3126 22
 5388 0212 BB6B     		ldr	r3, [r7, #56]
 5389 0214 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 5390 0218 9AB2     		uxth	r2, r3
 5391              		.loc 1 3126 13
 5392 021a BB6B     		ldr	r3, [r7, #56]
 5393 021c 5A81     		strh	r2, [r3, #10]	@ movhi
3127:./Libraries/FatFs/Src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 5394              		.loc 1 3127 9
 5395 021e BB6B     		ldr	r3, [r7, #56]
 5396 0220 5B89     		ldrh	r3, [r3, #10]
 5397              		.loc 1 3127 6
 5398 0222 002B     		cmp	r3, #0
 5399 0224 08D0     		beq	.L347
 5400              		.loc 1 3127 28 discriminator 2
 5401 0226 BB6B     		ldr	r3, [r7, #56]
 5402 0228 5B89     		ldrh	r3, [r3, #10]
 5403 022a 1A46     		mov	r2, r3
 5404              		.loc 1 3127 41 discriminator 2
 5405 022c BB6B     		ldr	r3, [r7, #56]
 5406 022e 5B89     		ldrh	r3, [r3, #10]
 5407              		.loc 1 3127 49 discriminator 2
 5408 0230 013B     		subs	r3, r3, #1
 5409              		.loc 1 3127 36 discriminator 2
 5410 0232 1340     		ands	r3, r3, r2
 5411              		.loc 1 3127 22 discriminator 2
 5412 0234 002B     		cmp	r3, #0
 5413 0236 01D0     		beq	.L348
 5414              	.L347:
 5415              		.loc 1 3127 63 discriminator 3
 5416 0238 0D23     		movs	r3, #13
 5417 023a 2BE1     		b	.L365
 5418              	.L348:
3128:./Libraries/FatFs/Src/ff.c **** 
3129:./Libraries/FatFs/Src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 5419              		.loc 1 3129 27
 5420 023c BB6B     		ldr	r3, [r7, #56]
 5421 023e 3433     		adds	r3, r3, #52
 5422              		.loc 1 3129 19
 5423 0240 1133     		adds	r3, r3, #17
 5424 0242 1846     		mov	r0, r3
 5425 0244 FFF7FEFF 		bl	ld_word
 5426 0248 0346     		mov	r3, r0
 5427 024a 1A46     		mov	r2, r3
 5428              		.loc 1 3129 17
 5429 024c BB6B     		ldr	r3, [r7, #56]
ARM GAS  /tmp/cceCRWeb.s 			page 151


 5430 024e 1A81     		strh	r2, [r3, #8]	@ movhi
3130:./Libraries/FatFs/Src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 5431              		.loc 1 3130 9
 5432 0250 BB6B     		ldr	r3, [r7, #56]
 5433 0252 1B89     		ldrh	r3, [r3, #8]
 5434              		.loc 1 3130 7
 5435 0254 03F00F03 		and	r3, r3, #15
 5436 0258 9BB2     		uxth	r3, r3
 5437              		.loc 1 3130 6
 5438 025a 002B     		cmp	r3, #0
 5439 025c 01D0     		beq	.L349
 5440              		.loc 1 3130 49 discriminator 1
 5441 025e 0D23     		movs	r3, #13
 5442 0260 18E1     		b	.L365
 5443              	.L349:
3131:./Libraries/FatFs/Src/ff.c **** 
3132:./Libraries/FatFs/Src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 5444              		.loc 1 3132 19
 5445 0262 BB6B     		ldr	r3, [r7, #56]
 5446 0264 3433     		adds	r3, r3, #52
 5447              		.loc 1 3132 11
 5448 0266 1333     		adds	r3, r3, #19
 5449 0268 1846     		mov	r0, r3
 5450 026a FFF7FEFF 		bl	ld_word
 5451 026e 0346     		mov	r3, r0
 5452              		.loc 1 3132 9
 5453 0270 BB64     		str	r3, [r7, #72]
3133:./Libraries/FatFs/Src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 5454              		.loc 1 3133 6
 5455 0272 BB6C     		ldr	r3, [r7, #72]
 5456 0274 002B     		cmp	r3, #0
 5457 0276 06D1     		bne	.L350
 5458              		.loc 1 3133 36 discriminator 1
 5459 0278 BB6B     		ldr	r3, [r7, #56]
 5460 027a 3433     		adds	r3, r3, #52
 5461              		.loc 1 3133 27 discriminator 1
 5462 027c 2033     		adds	r3, r3, #32
 5463 027e 1846     		mov	r0, r3
 5464 0280 FFF7FEFF 		bl	ld_dword
 5465 0284 B864     		str	r0, [r7, #72]
 5466              	.L350:
3134:./Libraries/FatFs/Src/ff.c **** 
3135:./Libraries/FatFs/Src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 5467              		.loc 1 3135 18
 5468 0286 BB6B     		ldr	r3, [r7, #56]
 5469 0288 3433     		adds	r3, r3, #52
 5470              		.loc 1 3135 10
 5471 028a 0E33     		adds	r3, r3, #14
 5472 028c 1846     		mov	r0, r3
 5473 028e FFF7FEFF 		bl	ld_word
 5474 0292 0346     		mov	r3, r0
 5475 0294 FB85     		strh	r3, [r7, #46]	@ movhi
3136:./Libraries/FatFs/Src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 5476              		.loc 1 3136 6
 5477 0296 FB8D     		ldrh	r3, [r7, #46]
 5478 0298 002B     		cmp	r3, #0
 5479 029a 01D1     		bne	.L351
ARM GAS  /tmp/cceCRWeb.s 			page 152


 5480              		.loc 1 3136 25 discriminator 1
 5481 029c 0D23     		movs	r3, #13
 5482 029e F9E0     		b	.L365
 5483              	.L351:
3137:./Libraries/FatFs/Src/ff.c **** 
3138:./Libraries/FatFs/Src/ff.c **** 		/* Determine the FAT sub type */
3139:./Libraries/FatFs/Src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 5484              		.loc 1 3139 17
 5485 02a0 FA8D     		ldrh	r2, [r7, #46]
 5486 02a2 FB6C     		ldr	r3, [r7, #76]
 5487 02a4 1344     		add	r3, r3, r2
 5488              		.loc 1 3139 30
 5489 02a6 BA6B     		ldr	r2, [r7, #56]
 5490 02a8 1289     		ldrh	r2, [r2, #8]
 5491              		.loc 1 3139 42
 5492 02aa 1209     		lsrs	r2, r2, #4
 5493 02ac 92B2     		uxth	r2, r2
 5494              		.loc 1 3139 10
 5495 02ae 1344     		add	r3, r3, r2
 5496 02b0 BB62     		str	r3, [r7, #40]
3140:./Libraries/FatFs/Src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 5497              		.loc 1 3140 6
 5498 02b2 BA6C     		ldr	r2, [r7, #72]
 5499 02b4 BB6A     		ldr	r3, [r7, #40]
 5500 02b6 9A42     		cmp	r2, r3
 5501 02b8 01D2     		bcs	.L352
 5502              		.loc 1 3140 30 discriminator 1
 5503 02ba 0D23     		movs	r3, #13
 5504 02bc EAE0     		b	.L365
 5505              	.L352:
3141:./Libraries/FatFs/Src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 5506              		.loc 1 3141 18
 5507 02be BA6C     		ldr	r2, [r7, #72]
 5508 02c0 BB6A     		ldr	r3, [r7, #40]
 5509 02c2 D31A     		subs	r3, r2, r3
 5510              		.loc 1 3141 32
 5511 02c4 BA6B     		ldr	r2, [r7, #56]
 5512 02c6 5289     		ldrh	r2, [r2, #10]
 5513              		.loc 1 3141 9
 5514 02c8 B3FBF2F3 		udiv	r3, r3, r2
 5515 02cc 7B62     		str	r3, [r7, #36]
3142:./Libraries/FatFs/Src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 5516              		.loc 1 3142 6
 5517 02ce 7B6A     		ldr	r3, [r7, #36]
 5518 02d0 002B     		cmp	r3, #0
 5519 02d2 03D1     		bne	.L353
 5520              		.loc 1 3142 26 discriminator 1
 5521 02d4 0D23     		movs	r3, #13
 5522 02d6 DDE0     		b	.L365
 5523              	.L367:
 5524              		.align	2
 5525              	.L366:
 5526 02d8 00000000 		.word	FatFs
 5527              	.L353:
3143:./Libraries/FatFs/Src/ff.c **** 		fmt = FS_FAT32;
 5528              		.loc 1 3143 7
 5529 02dc 0323     		movs	r3, #3
ARM GAS  /tmp/cceCRWeb.s 			page 153


 5530 02de 87F85730 		strb	r3, [r7, #87]
3144:./Libraries/FatFs/Src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 5531              		.loc 1 3144 6
 5532 02e2 7B6A     		ldr	r3, [r7, #36]
 5533 02e4 4FF6F572 		movw	r2, #65525
 5534 02e8 9342     		cmp	r3, r2
 5535 02ea 02D8     		bhi	.L354
 5536              		.loc 1 3144 31 discriminator 1
 5537 02ec 0223     		movs	r3, #2
 5538 02ee 87F85730 		strb	r3, [r7, #87]
 5539              	.L354:
3145:./Libraries/FatFs/Src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 5540              		.loc 1 3145 6
 5541 02f2 7B6A     		ldr	r3, [r7, #36]
 5542 02f4 40F6F572 		movw	r2, #4085
 5543 02f8 9342     		cmp	r3, r2
 5544 02fa 02D8     		bhi	.L355
 5545              		.loc 1 3145 31 discriminator 1
 5546 02fc 0123     		movs	r3, #1
 5547 02fe 87F85730 		strb	r3, [r7, #87]
 5548              	.L355:
3146:./Libraries/FatFs/Src/ff.c **** 
3147:./Libraries/FatFs/Src/ff.c **** 		/* Boundaries and Limits */
3148:./Libraries/FatFs/Src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 5549              		.loc 1 3148 24
 5550 0302 7B6A     		ldr	r3, [r7, #36]
 5551 0304 9A1C     		adds	r2, r3, #2
 5552              		.loc 1 3148 16
 5553 0306 BB6B     		ldr	r3, [r7, #56]
 5554 0308 9A61     		str	r2, [r3, #24]
3149:./Libraries/FatFs/Src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 5555              		.loc 1 3149 15
 5556 030a BB6B     		ldr	r3, [r7, #56]
 5557 030c 3A6D     		ldr	r2, [r7, #80]
 5558 030e 1A62     		str	r2, [r3, #32]
3150:./Libraries/FatFs/Src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 5559              		.loc 1 3150 23
 5560 0310 FA8D     		ldrh	r2, [r7, #46]
 5561 0312 3B6D     		ldr	r3, [r7, #80]
 5562 0314 1A44     		add	r2, r2, r3
 5563              		.loc 1 3150 15
 5564 0316 BB6B     		ldr	r3, [r7, #56]
 5565 0318 5A62     		str	r2, [r3, #36]
3151:./Libraries/FatFs/Src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 5566              		.loc 1 3151 24
 5567 031a 3A6D     		ldr	r2, [r7, #80]
 5568 031c BB6A     		ldr	r3, [r7, #40]
 5569 031e 1A44     		add	r2, r2, r3
 5570              		.loc 1 3151 16
 5571 0320 BB6B     		ldr	r3, [r7, #56]
 5572 0322 DA62     		str	r2, [r3, #44]
3152:./Libraries/FatFs/Src/ff.c **** 		if (fmt == FS_FAT32) {
 5573              		.loc 1 3152 6
 5574 0324 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5575 0328 032B     		cmp	r3, #3
 5576 032a 1ED1     		bne	.L356
3153:./Libraries/FatFs/Src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
ARM GAS  /tmp/cceCRWeb.s 			page 154


 5577              		.loc 1 3153 16
 5578 032c BB6B     		ldr	r3, [r7, #56]
 5579 032e 3433     		adds	r3, r3, #52
 5580              		.loc 1 3153 8
 5581 0330 2A33     		adds	r3, r3, #42
 5582 0332 1846     		mov	r0, r3
 5583 0334 FFF7FEFF 		bl	ld_word
 5584 0338 0346     		mov	r3, r0
 5585              		.loc 1 3153 7
 5586 033a 002B     		cmp	r3, #0
 5587 033c 01D0     		beq	.L357
 5588              		.loc 1 3153 52 discriminator 1
 5589 033e 0D23     		movs	r3, #13
 5590 0340 A8E0     		b	.L365
 5591              	.L357:
3154:./Libraries/FatFs/Src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 5592              		.loc 1 3154 10
 5593 0342 BB6B     		ldr	r3, [r7, #56]
 5594 0344 1B89     		ldrh	r3, [r3, #8]
 5595              		.loc 1 3154 7
 5596 0346 002B     		cmp	r3, #0
 5597 0348 01D0     		beq	.L358
 5598              		.loc 1 3154 30 discriminator 1
 5599 034a 0D23     		movs	r3, #13
 5600 034c A2E0     		b	.L365
 5601              	.L358:
3155:./Libraries/FatFs/Src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 5602              		.loc 1 3155 27
 5603 034e BB6B     		ldr	r3, [r7, #56]
 5604 0350 3433     		adds	r3, r3, #52
 5605              		.loc 1 3155 18
 5606 0352 2C33     		adds	r3, r3, #44
 5607 0354 1846     		mov	r0, r3
 5608 0356 FFF7FEFF 		bl	ld_dword
 5609 035a 0246     		mov	r2, r0
 5610              		.loc 1 3155 16
 5611 035c BB6B     		ldr	r3, [r7, #56]
 5612 035e 9A62     		str	r2, [r3, #40]
3156:./Libraries/FatFs/Src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 5613              		.loc 1 3156 15
 5614 0360 BB6B     		ldr	r3, [r7, #56]
 5615 0362 9B69     		ldr	r3, [r3, #24]
 5616              		.loc 1 3156 11
 5617 0364 9B00     		lsls	r3, r3, #2
 5618 0366 7B64     		str	r3, [r7, #68]
 5619 0368 1FE0     		b	.L359
 5620              	.L356:
3157:./Libraries/FatFs/Src/ff.c **** 		} else {
3158:./Libraries/FatFs/Src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 5621              		.loc 1 3158 10
 5622 036a BB6B     		ldr	r3, [r7, #56]
 5623 036c 1B89     		ldrh	r3, [r3, #8]
 5624              		.loc 1 3158 7
 5625 036e 002B     		cmp	r3, #0
 5626 0370 01D1     		bne	.L360
 5627              		.loc 1 3158 35 discriminator 1
 5628 0372 0D23     		movs	r3, #13
ARM GAS  /tmp/cceCRWeb.s 			page 155


 5629 0374 8EE0     		b	.L365
 5630              	.L360:
3159:./Libraries/FatFs/Src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 5631              		.loc 1 3159 20
 5632 0376 BB6B     		ldr	r3, [r7, #56]
 5633 0378 5A6A     		ldr	r2, [r3, #36]
 5634              		.loc 1 3159 30
 5635 037a FB6C     		ldr	r3, [r7, #76]
 5636 037c 1A44     		add	r2, r2, r3
 5637              		.loc 1 3159 16
 5638 037e BB6B     		ldr	r3, [r7, #56]
 5639 0380 9A62     		str	r2, [r3, #40]
3160:./Libraries/FatFs/Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3161:./Libraries/FatFs/Src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 5640              		.loc 1 3161 22
 5641 0382 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5642 0386 022B     		cmp	r3, #2
 5643 0388 03D1     		bne	.L361
 5644              		.loc 1 3161 7 discriminator 1
 5645 038a BB6B     		ldr	r3, [r7, #56]
 5646 038c 9B69     		ldr	r3, [r3, #24]
 5647              		.loc 1 3161 22 discriminator 1
 5648 038e 5B00     		lsls	r3, r3, #1
 5649 0390 0AE0     		b	.L362
 5650              	.L361:
 5651              		.loc 1 3161 26 discriminator 2
 5652 0392 BB6B     		ldr	r3, [r7, #56]
 5653 0394 9A69     		ldr	r2, [r3, #24]
 5654              		.loc 1 3161 37 discriminator 2
 5655 0396 1346     		mov	r3, r2
 5656 0398 5B00     		lsls	r3, r3, #1
 5657 039a 1344     		add	r3, r3, r2
 5658              		.loc 1 3161 41 discriminator 2
 5659 039c 5A08     		lsrs	r2, r3, #1
 5660              		.loc 1 3161 50 discriminator 2
 5661 039e BB6B     		ldr	r3, [r7, #56]
 5662 03a0 9B69     		ldr	r3, [r3, #24]
 5663              		.loc 1 3161 61 discriminator 2
 5664 03a2 03F00103 		and	r3, r3, #1
 5665              		.loc 1 3161 22 discriminator 2
 5666 03a6 1344     		add	r3, r3, r2
 5667              	.L362:
3160:./Libraries/FatFs/Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 5668              		.loc 1 3160 11
 5669 03a8 7B64     		str	r3, [r7, #68]
 5670              	.L359:
3162:./Libraries/FatFs/Src/ff.c **** 		}
3163:./Libraries/FatFs/Src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
 5671              		.loc 1 3163 9
 5672 03aa BB6B     		ldr	r3, [r7, #56]
 5673 03ac DA69     		ldr	r2, [r3, #28]
 5674              		.loc 1 3163 27
 5675 03ae 7B6C     		ldr	r3, [r7, #68]
 5676 03b0 03F2FF13 		addw	r3, r3, #511
 5677              		.loc 1 3163 43
 5678 03b4 5B0A     		lsrs	r3, r3, #9
 5679              		.loc 1 3163 6
ARM GAS  /tmp/cceCRWeb.s 			page 156


 5680 03b6 9A42     		cmp	r2, r3
 5681 03b8 01D2     		bcs	.L363
 5682              		.loc 1 3163 60 discriminator 1
 5683 03ba 0D23     		movs	r3, #13
 5684 03bc 6AE0     		b	.L365
 5685              	.L363:
3164:./Libraries/FatFs/Src/ff.c **** 
3165:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3166:./Libraries/FatFs/Src/ff.c **** 		/* Get FSINFO if available */
3167:./Libraries/FatFs/Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 5686              		.loc 1 3167 33
 5687 03be BB6B     		ldr	r3, [r7, #56]
 5688 03c0 4FF0FF32 		mov	r2, #-1
 5689 03c4 5A61     		str	r2, [r3, #20]
 5690              		.loc 1 3167 21
 5691 03c6 BB6B     		ldr	r3, [r7, #56]
 5692 03c8 5A69     		ldr	r2, [r3, #20]
 5693              		.loc 1 3167 17
 5694 03ca BB6B     		ldr	r3, [r7, #56]
 5695 03cc 1A61     		str	r2, [r3, #16]
3168:./Libraries/FatFs/Src/ff.c **** 		fs->fsi_flag = 0x80;
 5696              		.loc 1 3168 16
 5697 03ce BB6B     		ldr	r3, [r7, #56]
 5698 03d0 8022     		movs	r2, #128
 5699 03d2 1A71     		strb	r2, [r3, #4]
3169:./Libraries/FatFs/Src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
3170:./Libraries/FatFs/Src/ff.c **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 5700              		.loc 1 3170 6
 5701 03d4 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 5702 03d8 032B     		cmp	r3, #3
 5703 03da 49D1     		bne	.L364
3171:./Libraries/FatFs/Src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 5704              		.loc 1 3171 15
 5705 03dc BB6B     		ldr	r3, [r7, #56]
 5706 03de 3433     		adds	r3, r3, #52
 5707              		.loc 1 3171 7
 5708 03e0 3033     		adds	r3, r3, #48
 5709 03e2 1846     		mov	r0, r3
 5710 03e4 FFF7FEFF 		bl	ld_word
 5711 03e8 0346     		mov	r3, r0
 5712              		.loc 1 3171 4
 5713 03ea 012B     		cmp	r3, #1
 5714 03ec 40D1     		bne	.L364
3172:./Libraries/FatFs/Src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 5715              		.loc 1 3172 7
 5716 03ee 3B6D     		ldr	r3, [r7, #80]
 5717 03f0 0133     		adds	r3, r3, #1
 5718 03f2 1946     		mov	r1, r3
 5719 03f4 B86B     		ldr	r0, [r7, #56]
 5720 03f6 FFF7FEFF 		bl	move_window
 5721 03fa 0346     		mov	r3, r0
 5722              		.loc 1 3172 4
 5723 03fc 002B     		cmp	r3, #0
 5724 03fe 37D1     		bne	.L364
3173:./Libraries/FatFs/Src/ff.c **** 		{
3174:./Libraries/FatFs/Src/ff.c **** 			fs->fsi_flag = 0;
 5725              		.loc 1 3174 17
ARM GAS  /tmp/cceCRWeb.s 			page 157


 5726 0400 BB6B     		ldr	r3, [r7, #56]
 5727 0402 0022     		movs	r2, #0
 5728 0404 1A71     		strb	r2, [r3, #4]
3175:./Libraries/FatFs/Src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 5729              		.loc 1 3175 16
 5730 0406 BB6B     		ldr	r3, [r7, #56]
 5731 0408 3433     		adds	r3, r3, #52
 5732              		.loc 1 3175 8
 5733 040a 03F5FF73 		add	r3, r3, #510
 5734 040e 1846     		mov	r0, r3
 5735 0410 FFF7FEFF 		bl	ld_word
 5736 0414 0346     		mov	r3, r0
 5737 0416 1A46     		mov	r2, r3
 5738              		.loc 1 3175 7
 5739 0418 4AF65523 		movw	r3, #43605
 5740 041c 9A42     		cmp	r2, r3
 5741 041e 27D1     		bne	.L364
3176:./Libraries/FatFs/Src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 5742              		.loc 1 3176 17
 5743 0420 BB6B     		ldr	r3, [r7, #56]
 5744 0422 3433     		adds	r3, r3, #52
 5745              		.loc 1 3176 8
 5746 0424 1846     		mov	r0, r3
 5747 0426 FFF7FEFF 		bl	ld_dword
 5748 042a 0346     		mov	r3, r0
 5749              		.loc 1 3176 5
 5750 042c 1B4A     		ldr	r2, .L368
 5751 042e 9342     		cmp	r3, r2
 5752 0430 1ED1     		bne	.L364
3177:./Libraries/FatFs/Src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 5753              		.loc 1 3177 17
 5754 0432 BB6B     		ldr	r3, [r7, #56]
 5755 0434 3433     		adds	r3, r3, #52
 5756              		.loc 1 3177 8
 5757 0436 03F5F273 		add	r3, r3, #484
 5758 043a 1846     		mov	r0, r3
 5759 043c FFF7FEFF 		bl	ld_dword
 5760 0440 0346     		mov	r3, r0
 5761              		.loc 1 3177 5
 5762 0442 174A     		ldr	r2, .L368+4
 5763 0444 9342     		cmp	r3, r2
 5764 0446 13D1     		bne	.L364
3178:./Libraries/FatFs/Src/ff.c **** 			{
3179:./Libraries/FatFs/Src/ff.c **** #if (_FS_NOFSINFO & 1) == 0
3180:./Libraries/FatFs/Src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 5765              		.loc 1 3180 30
 5766 0448 BB6B     		ldr	r3, [r7, #56]
 5767 044a 3433     		adds	r3, r3, #52
 5768              		.loc 1 3180 21
 5769 044c 03F5F473 		add	r3, r3, #488
 5770 0450 1846     		mov	r0, r3
 5771 0452 FFF7FEFF 		bl	ld_dword
 5772 0456 0246     		mov	r2, r0
 5773              		.loc 1 3180 19
 5774 0458 BB6B     		ldr	r3, [r7, #56]
 5775 045a 5A61     		str	r2, [r3, #20]
3181:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 158


3182:./Libraries/FatFs/Src/ff.c **** #if (_FS_NOFSINFO & 2) == 0
3183:./Libraries/FatFs/Src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 5776              		.loc 1 3183 30
 5777 045c BB6B     		ldr	r3, [r7, #56]
 5778 045e 3433     		adds	r3, r3, #52
 5779              		.loc 1 3183 21
 5780 0460 03F5F673 		add	r3, r3, #492
 5781 0464 1846     		mov	r0, r3
 5782 0466 FFF7FEFF 		bl	ld_dword
 5783 046a 0246     		mov	r2, r0
 5784              		.loc 1 3183 19
 5785 046c BB6B     		ldr	r3, [r7, #56]
 5786 046e 1A61     		str	r2, [r3, #16]
 5787              	.L364:
3184:./Libraries/FatFs/Src/ff.c **** #endif
3185:./Libraries/FatFs/Src/ff.c **** 			}
3186:./Libraries/FatFs/Src/ff.c **** 		}
3187:./Libraries/FatFs/Src/ff.c **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3188:./Libraries/FatFs/Src/ff.c **** #endif	/* !_FS_READONLY */
3189:./Libraries/FatFs/Src/ff.c **** 	}
3190:./Libraries/FatFs/Src/ff.c **** 
3191:./Libraries/FatFs/Src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 5788              		.loc 1 3191 14
 5789 0470 BB6B     		ldr	r3, [r7, #56]
 5790 0472 97F85720 		ldrb	r2, [r7, #87]
 5791 0476 1A70     		strb	r2, [r3]
3192:./Libraries/FatFs/Src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 5792              		.loc 1 3192 11
 5793 0478 0A4B     		ldr	r3, .L368+8
 5794 047a 1B88     		ldrh	r3, [r3]
 5795 047c 0133     		adds	r3, r3, #1
 5796 047e 9AB2     		uxth	r2, r3
 5797              		.loc 1 3192 9
 5798 0480 084B     		ldr	r3, .L368+8
 5799 0482 1A80     		strh	r2, [r3]	@ movhi
 5800 0484 074B     		ldr	r3, .L368+8
 5801 0486 1A88     		ldrh	r2, [r3]
 5802 0488 BB6B     		ldr	r3, [r7, #56]
 5803 048a DA80     		strh	r2, [r3, #6]	@ movhi
3193:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN == 1
3194:./Libraries/FatFs/Src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3195:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3196:./Libraries/FatFs/Src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3197:./Libraries/FatFs/Src/ff.c **** #endif
3198:./Libraries/FatFs/Src/ff.c **** #endif
3199:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
3200:./Libraries/FatFs/Src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
3201:./Libraries/FatFs/Src/ff.c **** #endif
3202:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0			/* Clear file lock semaphores */
3203:./Libraries/FatFs/Src/ff.c **** 	clear_lock(fs);
 5804              		.loc 1 3203 2
 5805 048c B86B     		ldr	r0, [r7, #56]
 5806 048e FFF7FEFF 		bl	clear_lock
3204:./Libraries/FatFs/Src/ff.c **** #endif
3205:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 5807              		.loc 1 3205 9
 5808 0492 0023     		movs	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 159


 5809              	.L365:
3206:./Libraries/FatFs/Src/ff.c **** }
 5810              		.loc 1 3206 1 discriminator 1
 5811 0494 1846     		mov	r0, r3
 5812 0496 5837     		adds	r7, r7, #88
 5813              	.LCFI209:
 5814              		.cfi_def_cfa_offset 8
 5815 0498 BD46     		mov	sp, r7
 5816              	.LCFI210:
 5817              		.cfi_def_cfa_register 13
 5818              		@ sp needed
 5819 049a 80BD     		pop	{r7, pc}
 5820              	.L369:
 5821              		.align	2
 5822              	.L368:
 5823 049c 52526141 		.word	1096897106
 5824 04a0 72724161 		.word	1631679090
 5825 04a4 00000000 		.word	Fsid
 5826              		.cfi_endproc
 5827              	.LFE373:
 5829              		.section	.text.validate,"ax",%progbits
 5830              		.align	1
 5831              		.syntax unified
 5832              		.thumb
 5833              		.thumb_func
 5834              		.fpu fpv5-d16
 5836              	validate:
 5837              	.LFB374:
3207:./Libraries/FatFs/Src/ff.c **** 
3208:./Libraries/FatFs/Src/ff.c **** 
3209:./Libraries/FatFs/Src/ff.c **** 
3210:./Libraries/FatFs/Src/ff.c **** 
3211:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3212:./Libraries/FatFs/Src/ff.c **** /* Check if the file/directory object is valid or not                    */
3213:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3214:./Libraries/FatFs/Src/ff.c **** 
3215:./Libraries/FatFs/Src/ff.c **** static
3216:./Libraries/FatFs/Src/ff.c **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3217:./Libraries/FatFs/Src/ff.c **** 	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
3218:./Libraries/FatFs/Src/ff.c **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3219:./Libraries/FatFs/Src/ff.c **** )
3220:./Libraries/FatFs/Src/ff.c **** {
 5838              		.loc 1 3220 1
 5839              		.cfi_startproc
 5840              		@ args = 0, pretend = 0, frame = 16
 5841              		@ frame_needed = 1, uses_anonymous_args = 0
 5842 0000 80B5     		push	{r7, lr}
 5843              	.LCFI211:
 5844              		.cfi_def_cfa_offset 8
 5845              		.cfi_offset 7, -8
 5846              		.cfi_offset 14, -4
 5847 0002 84B0     		sub	sp, sp, #16
 5848              	.LCFI212:
 5849              		.cfi_def_cfa_offset 24
 5850 0004 00AF     		add	r7, sp, #0
 5851              	.LCFI213:
 5852              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cceCRWeb.s 			page 160


 5853 0006 7860     		str	r0, [r7, #4]
 5854 0008 3960     		str	r1, [r7]
3221:./Libraries/FatFs/Src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 5855              		.loc 1 3221 10
 5856 000a 0923     		movs	r3, #9
 5857 000c FB73     		strb	r3, [r7, #15]
3222:./Libraries/FatFs/Src/ff.c **** 
3223:./Libraries/FatFs/Src/ff.c **** 
3224:./Libraries/FatFs/Src/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 5858              		.loc 1 3224 5
 5859 000e 7B68     		ldr	r3, [r7, #4]
 5860 0010 002B     		cmp	r3, #0
 5861 0012 2ED0     		beq	.L371
 5862              		.loc 1 3224 16 discriminator 1
 5863 0014 7B68     		ldr	r3, [r7, #4]
 5864 0016 1B68     		ldr	r3, [r3]
 5865              		.loc 1 3224 10 discriminator 1
 5866 0018 002B     		cmp	r3, #0
 5867 001a 2AD0     		beq	.L371
 5868              		.loc 1 3224 27 discriminator 2
 5869 001c 7B68     		ldr	r3, [r7, #4]
 5870 001e 1B68     		ldr	r3, [r3]
 5871              		.loc 1 3224 31 discriminator 2
 5872 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5873              		.loc 1 3224 21 discriminator 2
 5874 0022 002B     		cmp	r3, #0
 5875 0024 25D0     		beq	.L371
 5876              		.loc 1 3224 47 discriminator 3
 5877 0026 7B68     		ldr	r3, [r7, #4]
 5878 0028 9A88     		ldrh	r2, [r3, #4]
 5879              		.loc 1 3224 58 discriminator 3
 5880 002a 7B68     		ldr	r3, [r7, #4]
 5881 002c 1B68     		ldr	r3, [r3]
 5882              		.loc 1 3224 62 discriminator 3
 5883 002e DB88     		ldrh	r3, [r3, #6]
 5884              		.loc 1 3224 41 discriminator 3
 5885 0030 9A42     		cmp	r2, r3
 5886 0032 1ED1     		bne	.L371
3225:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT
3226:./Libraries/FatFs/Src/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 5887              		.loc 1 3226 7
 5888 0034 7B68     		ldr	r3, [r7, #4]
 5889 0036 1B68     		ldr	r3, [r3]
 5890 0038 1846     		mov	r0, r3
 5891 003a FFF7FEFF 		bl	lock_fs
 5892 003e 0346     		mov	r3, r0
 5893              		.loc 1 3226 6
 5894 0040 002B     		cmp	r3, #0
 5895 0042 14D0     		beq	.L372
3227:./Libraries/FatFs/Src/ff.c **** 			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
 5896              		.loc 1 3227 25
 5897 0044 7B68     		ldr	r3, [r7, #4]
 5898 0046 1B68     		ldr	r3, [r3]
 5899              		.loc 1 3227 10
 5900 0048 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5901 004a 1846     		mov	r0, r3
 5902 004c FFF7FEFF 		bl	disk_status
ARM GAS  /tmp/cceCRWeb.s 			page 161


 5903 0050 0346     		mov	r3, r0
 5904              		.loc 1 3227 36
 5905 0052 03F00103 		and	r3, r3, #1
 5906              		.loc 1 3227 7
 5907 0056 002B     		cmp	r3, #0
 5908 0058 02D1     		bne	.L373
3228:./Libraries/FatFs/Src/ff.c **** 				res = FR_OK;
 5909              		.loc 1 3228 9
 5910 005a 0023     		movs	r3, #0
 5911 005c FB73     		strb	r3, [r7, #15]
 5912 005e 08E0     		b	.L371
 5913              	.L373:
3229:./Libraries/FatFs/Src/ff.c **** 			} else {
3230:./Libraries/FatFs/Src/ff.c **** 				unlock_fs(obj->fs, FR_OK);
 5914              		.loc 1 3230 5
 5915 0060 7B68     		ldr	r3, [r7, #4]
 5916 0062 1B68     		ldr	r3, [r3]
 5917 0064 0021     		movs	r1, #0
 5918 0066 1846     		mov	r0, r3
 5919 0068 FFF7FEFF 		bl	unlock_fs
 5920 006c 01E0     		b	.L371
 5921              	.L372:
3231:./Libraries/FatFs/Src/ff.c **** 			}
3232:./Libraries/FatFs/Src/ff.c **** 		} else {
3233:./Libraries/FatFs/Src/ff.c **** 			res = FR_TIMEOUT;
 5922              		.loc 1 3233 8
 5923 006e 0F23     		movs	r3, #15
 5924 0070 FB73     		strb	r3, [r7, #15]
 5925              	.L371:
3234:./Libraries/FatFs/Src/ff.c **** 		}
3235:./Libraries/FatFs/Src/ff.c **** #else
3236:./Libraries/FatFs/Src/ff.c **** 		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized
3237:./Libraries/FatFs/Src/ff.c **** 			res = FR_OK;
3238:./Libraries/FatFs/Src/ff.c **** 		}
3239:./Libraries/FatFs/Src/ff.c **** #endif
3240:./Libraries/FatFs/Src/ff.c **** 	}
3241:./Libraries/FatFs/Src/ff.c **** 	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 5926              		.loc 1 3241 33
 5927 0072 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5928 0074 002B     		cmp	r3, #0
 5929 0076 02D1     		bne	.L374
 5930              		.loc 1 3241 33 is_stmt 0 discriminator 1
 5931 0078 7B68     		ldr	r3, [r7, #4]
 5932 007a 1B68     		ldr	r3, [r3]
 5933 007c 00E0     		b	.L375
 5934              	.L374:
 5935              		.loc 1 3241 33 discriminator 2
 5936 007e 0023     		movs	r3, #0
 5937              	.L375:
 5938              		.loc 1 3241 6 is_stmt 1 discriminator 4
 5939 0080 3A68     		ldr	r2, [r7]
 5940 0082 1360     		str	r3, [r2]
3242:./Libraries/FatFs/Src/ff.c **** 	return res;
 5941              		.loc 1 3242 9 discriminator 4
 5942 0084 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3243:./Libraries/FatFs/Src/ff.c **** }
 5943              		.loc 1 3243 1 discriminator 4
ARM GAS  /tmp/cceCRWeb.s 			page 162


 5944 0086 1846     		mov	r0, r3
 5945 0088 1037     		adds	r7, r7, #16
 5946              	.LCFI214:
 5947              		.cfi_def_cfa_offset 8
 5948 008a BD46     		mov	sp, r7
 5949              	.LCFI215:
 5950              		.cfi_def_cfa_register 13
 5951              		@ sp needed
 5952 008c 80BD     		pop	{r7, pc}
 5953              		.cfi_endproc
 5954              	.LFE374:
 5956              		.section	.text.f_mount,"ax",%progbits
 5957              		.align	1
 5958              		.global	f_mount
 5959              		.syntax unified
 5960              		.thumb
 5961              		.thumb_func
 5962              		.fpu fpv5-d16
 5964              	f_mount:
 5965              	.LFB375:
3244:./Libraries/FatFs/Src/ff.c **** 
3245:./Libraries/FatFs/Src/ff.c **** 
3246:./Libraries/FatFs/Src/ff.c **** 
3247:./Libraries/FatFs/Src/ff.c **** 
3248:./Libraries/FatFs/Src/ff.c **** /*---------------------------------------------------------------------------
3249:./Libraries/FatFs/Src/ff.c **** 
3250:./Libraries/FatFs/Src/ff.c ****    Public Functions (FatFs API)
3251:./Libraries/FatFs/Src/ff.c **** 
3252:./Libraries/FatFs/Src/ff.c **** ----------------------------------------------------------------------------*/
3253:./Libraries/FatFs/Src/ff.c **** 
3254:./Libraries/FatFs/Src/ff.c **** 
3255:./Libraries/FatFs/Src/ff.c **** 
3256:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3257:./Libraries/FatFs/Src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3258:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3259:./Libraries/FatFs/Src/ff.c **** 
3260:./Libraries/FatFs/Src/ff.c **** FRESULT f_mount (
3261:./Libraries/FatFs/Src/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3262:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3263:./Libraries/FatFs/Src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3264:./Libraries/FatFs/Src/ff.c **** )
3265:./Libraries/FatFs/Src/ff.c **** {
 5966              		.loc 1 3265 1
 5967              		.cfi_startproc
 5968              		@ args = 0, pretend = 0, frame = 32
 5969              		@ frame_needed = 1, uses_anonymous_args = 0
 5970 0000 80B5     		push	{r7, lr}
 5971              	.LCFI216:
 5972              		.cfi_def_cfa_offset 8
 5973              		.cfi_offset 7, -8
 5974              		.cfi_offset 14, -4
 5975 0002 88B0     		sub	sp, sp, #32
 5976              	.LCFI217:
 5977              		.cfi_def_cfa_offset 40
 5978 0004 00AF     		add	r7, sp, #0
 5979              	.LCFI218:
 5980              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cceCRWeb.s 			page 163


 5981 0006 F860     		str	r0, [r7, #12]
 5982 0008 B960     		str	r1, [r7, #8]
 5983 000a 1346     		mov	r3, r2
 5984 000c FB71     		strb	r3, [r7, #7]
3266:./Libraries/FatFs/Src/ff.c **** 	FATFS *cfs;
3267:./Libraries/FatFs/Src/ff.c **** 	int vol;
3268:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3269:./Libraries/FatFs/Src/ff.c **** 	const TCHAR *rp = path;
 5985              		.loc 1 3269 15
 5986 000e BB68     		ldr	r3, [r7, #8]
 5987 0010 3B61     		str	r3, [r7, #16]
3270:./Libraries/FatFs/Src/ff.c **** 
3271:./Libraries/FatFs/Src/ff.c **** 
3272:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive number */
3273:./Libraries/FatFs/Src/ff.c **** 	vol = get_ldnumber(&rp);
 5988              		.loc 1 3273 8
 5989 0012 07F11003 		add	r3, r7, #16
 5990 0016 1846     		mov	r0, r3
 5991 0018 FFF7FEFF 		bl	get_ldnumber
 5992 001c F861     		str	r0, [r7, #28]
3274:./Libraries/FatFs/Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5993              		.loc 1 3274 5
 5994 001e FB69     		ldr	r3, [r7, #28]
 5995 0020 002B     		cmp	r3, #0
 5996 0022 01DA     		bge	.L378
 5997              		.loc 1 3274 22 discriminator 1
 5998 0024 0B23     		movs	r3, #11
 5999 0026 48E0     		b	.L385
 6000              	.L378:
3275:./Libraries/FatFs/Src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 6001              		.loc 1 3275 6
 6002 0028 264A     		ldr	r2, .L386
 6003 002a FB69     		ldr	r3, [r7, #28]
 6004 002c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6005 0030 BB61     		str	r3, [r7, #24]
3276:./Libraries/FatFs/Src/ff.c **** 
3277:./Libraries/FatFs/Src/ff.c **** 	if (cfs) {
 6006              		.loc 1 3277 5
 6007 0032 BB69     		ldr	r3, [r7, #24]
 6008 0034 002B     		cmp	r3, #0
 6009 0036 0FD0     		beq	.L380
3278:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
3279:./Libraries/FatFs/Src/ff.c **** 		clear_lock(cfs);
 6010              		.loc 1 3279 3
 6011 0038 B869     		ldr	r0, [r7, #24]
 6012 003a FFF7FEFF 		bl	clear_lock
3280:./Libraries/FatFs/Src/ff.c **** #endif
3281:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3282:./Libraries/FatFs/Src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 6013              		.loc 1 3282 8
 6014 003e BB69     		ldr	r3, [r7, #24]
 6015 0040 DB68     		ldr	r3, [r3, #12]
 6016 0042 1846     		mov	r0, r3
 6017 0044 FFF7FEFF 		bl	ff_del_syncobj
 6018 0048 0346     		mov	r3, r0
 6019              		.loc 1 3282 6
 6020 004a 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 164


 6021 004c 01D1     		bne	.L381
 6022              		.loc 1 3282 42 discriminator 1
 6023 004e 0223     		movs	r3, #2
 6024 0050 33E0     		b	.L385
 6025              	.L381:
3283:./Libraries/FatFs/Src/ff.c **** #endif
3284:./Libraries/FatFs/Src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 6026              		.loc 1 3284 16
 6027 0052 BB69     		ldr	r3, [r7, #24]
 6028 0054 0022     		movs	r2, #0
 6029 0056 1A70     		strb	r2, [r3]
 6030              	.L380:
3285:./Libraries/FatFs/Src/ff.c **** 	}
3286:./Libraries/FatFs/Src/ff.c **** 
3287:./Libraries/FatFs/Src/ff.c **** 	if (fs) {
 6031              		.loc 1 3287 6
 6032 0058 FB68     		ldr	r3, [r7, #12]
 6033              		.loc 1 3287 5
 6034 005a 002B     		cmp	r3, #0
 6035 005c 0FD0     		beq	.L382
3288:./Libraries/FatFs/Src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 6036              		.loc 1 3288 5
 6037 005e FB68     		ldr	r3, [r7, #12]
 6038              		.loc 1 3288 15
 6039 0060 0022     		movs	r2, #0
 6040 0062 1A70     		strb	r2, [r3]
3289:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3290:./Libraries/FatFs/Src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 6041              		.loc 1 3290 8
 6042 0064 FB69     		ldr	r3, [r7, #28]
 6043 0066 DAB2     		uxtb	r2, r3
 6044              		.loc 1 3290 37
 6045 0068 FB68     		ldr	r3, [r7, #12]
 6046              		.loc 1 3290 8
 6047 006a 0C33     		adds	r3, r3, #12
 6048 006c 1946     		mov	r1, r3
 6049 006e 1046     		mov	r0, r2
 6050 0070 FFF7FEFF 		bl	ff_cre_syncobj
 6051 0074 0346     		mov	r3, r0
 6052              		.loc 1 3290 6
 6053 0076 002B     		cmp	r3, #0
 6054 0078 01D1     		bne	.L382
 6055              		.loc 1 3290 53 discriminator 1
 6056 007a 0223     		movs	r3, #2
 6057 007c 1DE0     		b	.L385
 6058              	.L382:
3291:./Libraries/FatFs/Src/ff.c **** #endif
3292:./Libraries/FatFs/Src/ff.c **** 	}
3293:./Libraries/FatFs/Src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 6059              		.loc 1 3293 13
 6060 007e FA68     		ldr	r2, [r7, #12]
 6061 0080 1049     		ldr	r1, .L386
 6062 0082 FB69     		ldr	r3, [r7, #28]
 6063 0084 41F82320 		str	r2, [r1, r3, lsl #2]
3294:./Libraries/FatFs/Src/ff.c **** 
3295:./Libraries/FatFs/Src/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 6064              		.loc 1 3295 6
ARM GAS  /tmp/cceCRWeb.s 			page 165


 6065 0088 FB68     		ldr	r3, [r7, #12]
 6066              		.loc 1 3295 5
 6067 008a 002B     		cmp	r3, #0
 6068 008c 02D0     		beq	.L383
 6069              		.loc 1 3295 10 discriminator 2
 6070 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6071 0090 012B     		cmp	r3, #1
 6072 0092 01D0     		beq	.L384
 6073              	.L383:
 6074              		.loc 1 3295 30 discriminator 3
 6075 0094 0023     		movs	r3, #0
 6076 0096 10E0     		b	.L385
 6077              	.L384:
3296:./Libraries/FatFs/Src/ff.c **** 
3297:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 6078              		.loc 1 3297 8
 6079 0098 07F10C01 		add	r1, r7, #12
 6080 009c 07F10803 		add	r3, r7, #8
 6081 00a0 0022     		movs	r2, #0
 6082 00a2 1846     		mov	r0, r3
 6083 00a4 FFF7FEFF 		bl	find_volume
 6084 00a8 0346     		mov	r3, r0
 6085 00aa FB75     		strb	r3, [r7, #23]
3298:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 6086              		.loc 1 3298 2
 6087 00ac FB68     		ldr	r3, [r7, #12]
 6088 00ae FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 6089 00b0 1146     		mov	r1, r2
 6090 00b2 1846     		mov	r0, r3
 6091 00b4 FFF7FEFF 		bl	unlock_fs
 6092 00b8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6093              	.L385:
3299:./Libraries/FatFs/Src/ff.c **** }
 6094              		.loc 1 3299 1 discriminator 1
 6095 00ba 1846     		mov	r0, r3
 6096 00bc 2037     		adds	r7, r7, #32
 6097              	.LCFI219:
 6098              		.cfi_def_cfa_offset 8
 6099 00be BD46     		mov	sp, r7
 6100              	.LCFI220:
 6101              		.cfi_def_cfa_register 13
 6102              		@ sp needed
 6103 00c0 80BD     		pop	{r7, pc}
 6104              	.L387:
 6105 00c2 00BF     		.align	2
 6106              	.L386:
 6107 00c4 00000000 		.word	FatFs
 6108              		.cfi_endproc
 6109              	.LFE375:
 6111              		.section	.text.f_open,"ax",%progbits
 6112              		.align	1
 6113              		.global	f_open
 6114              		.syntax unified
 6115              		.thumb
 6116              		.thumb_func
 6117              		.fpu fpv5-d16
 6119              	f_open:
ARM GAS  /tmp/cceCRWeb.s 			page 166


 6120              	.LFB376:
3300:./Libraries/FatFs/Src/ff.c **** 
3301:./Libraries/FatFs/Src/ff.c **** 
3302:./Libraries/FatFs/Src/ff.c **** 
3303:./Libraries/FatFs/Src/ff.c **** 
3304:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3305:./Libraries/FatFs/Src/ff.c **** /* Open or Create a File                                                 */
3306:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3307:./Libraries/FatFs/Src/ff.c **** 
3308:./Libraries/FatFs/Src/ff.c **** FRESULT f_open (
3309:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3310:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3311:./Libraries/FatFs/Src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3312:./Libraries/FatFs/Src/ff.c **** )
3313:./Libraries/FatFs/Src/ff.c **** {
 6121              		.loc 1 3313 1
 6122              		.cfi_startproc
 6123              		@ args = 0, pretend = 0, frame = 96
 6124              		@ frame_needed = 1, uses_anonymous_args = 0
 6125 0000 80B5     		push	{r7, lr}
 6126              	.LCFI221:
 6127              		.cfi_def_cfa_offset 8
 6128              		.cfi_offset 7, -8
 6129              		.cfi_offset 14, -4
 6130 0002 98B0     		sub	sp, sp, #96
 6131              	.LCFI222:
 6132              		.cfi_def_cfa_offset 104
 6133 0004 00AF     		add	r7, sp, #0
 6134              	.LCFI223:
 6135              		.cfi_def_cfa_register 7
 6136 0006 F860     		str	r0, [r7, #12]
 6137 0008 B960     		str	r1, [r7, #8]
 6138 000a 1346     		mov	r3, r2
 6139 000c FB71     		strb	r3, [r7, #7]
3314:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3315:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
3316:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3317:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3318:./Libraries/FatFs/Src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3319:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t ofs;
3320:./Libraries/FatFs/Src/ff.c **** #endif
3321:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
3322:./Libraries/FatFs/Src/ff.c **** 
3323:./Libraries/FatFs/Src/ff.c **** 
3324:./Libraries/FatFs/Src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 6140              		.loc 1 3324 5
 6141 000e FB68     		ldr	r3, [r7, #12]
 6142 0010 002B     		cmp	r3, #0
 6143 0012 01D1     		bne	.L389
 6144              		.loc 1 3324 18 discriminator 1
 6145 0014 0923     		movs	r3, #9
 6146 0016 B4E1     		b	.L412
 6147              	.L389:
3325:./Libraries/FatFs/Src/ff.c **** 
3326:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
3327:./Libraries/FatFs/Src/ff.c **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
 6148              		.loc 1 3327 7
ARM GAS  /tmp/cceCRWeb.s 			page 167


 6149 0018 FB79     		ldrb	r3, [r7, #7]
 6150 001a 03F03F03 		and	r3, r3, #63
 6151 001e FB71     		strb	r3, [r7, #7]
3328:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, mode);
 6152              		.loc 1 3328 8
 6153 0020 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6154 0022 07F11001 		add	r1, r7, #16
 6155 0026 07F10803 		add	r3, r7, #8
 6156 002a 1846     		mov	r0, r3
 6157 002c FFF7FEFF 		bl	find_volume
 6158 0030 0346     		mov	r3, r0
 6159 0032 87F85F30 		strb	r3, [r7, #95]
3329:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 6160              		.loc 1 3329 5
 6161 0036 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6162 003a 002B     		cmp	r3, #0
 6163 003c 40F09181 		bne	.L391
3330:./Libraries/FatFs/Src/ff.c **** 		dj.obj.fs = fs;
 6164              		.loc 1 3330 13
 6165 0040 3B69     		ldr	r3, [r7, #16]
 6166 0042 7B61     		str	r3, [r7, #20]
3331:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
3332:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6167              		.loc 1 3332 9
 6168 0044 BA68     		ldr	r2, [r7, #8]
 6169 0046 07F11403 		add	r3, r7, #20
 6170 004a 1146     		mov	r1, r2
 6171 004c 1846     		mov	r0, r3
 6172 004e FFF7FEFF 		bl	follow_path
 6173 0052 0346     		mov	r3, r0
 6174 0054 87F85F30 		strb	r3, [r7, #95]
3333:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
3334:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 6175              		.loc 1 3334 6
 6176 0058 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6177 005c 002B     		cmp	r3, #0
 6178 005e 1AD1     		bne	.L392
3335:./Libraries/FatFs/Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 6179              		.loc 1 3335 13
 6180 0060 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 6181              		.loc 1 3335 8
 6182 0064 5BB2     		sxtb	r3, r3
 6183              		.loc 1 3335 7
 6184 0066 002B     		cmp	r3, #0
 6185 0068 03DA     		bge	.L393
3336:./Libraries/FatFs/Src/ff.c **** 				res = FR_INVALID_NAME;
 6186              		.loc 1 3336 9
 6187 006a 0623     		movs	r3, #6
 6188 006c 87F85F30 		strb	r3, [r7, #95]
 6189 0070 11E0     		b	.L392
 6190              	.L393:
3337:./Libraries/FatFs/Src/ff.c **** 			}
3338:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
3339:./Libraries/FatFs/Src/ff.c **** 			else {
3340:./Libraries/FatFs/Src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 6191              		.loc 1 3340 31
 6192 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 168


 6193 0074 23F00103 		bic	r3, r3, #1
 6194              		.loc 1 3340 11
 6195 0078 002B     		cmp	r3, #0
 6196 007a 14BF     		ite	ne
 6197 007c 0123     		movne	r3, #1
 6198 007e 0023     		moveq	r3, #0
 6199 0080 DBB2     		uxtb	r3, r3
 6200 0082 1A46     		mov	r2, r3
 6201 0084 07F11403 		add	r3, r7, #20
 6202 0088 1146     		mov	r1, r2
 6203 008a 1846     		mov	r0, r3
 6204 008c FFF7FEFF 		bl	chk_lock
 6205 0090 0346     		mov	r3, r0
 6206 0092 87F85F30 		strb	r3, [r7, #95]
 6207              	.L392:
3341:./Libraries/FatFs/Src/ff.c **** 			}
3342:./Libraries/FatFs/Src/ff.c **** #endif
3343:./Libraries/FatFs/Src/ff.c **** 		}
3344:./Libraries/FatFs/Src/ff.c **** 		/* Create or Open a file */
3345:./Libraries/FatFs/Src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 6208              		.loc 1 3345 12
 6209 0096 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6210 0098 03F01C03 		and	r3, r3, #28
 6211              		.loc 1 3345 6
 6212 009c 002B     		cmp	r3, #0
 6213 009e 7FD0     		beq	.L394
3346:./Libraries/FatFs/Src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 6214              		.loc 1 3346 7
 6215 00a0 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6216 00a4 002B     		cmp	r3, #0
 6217 00a6 17D0     		beq	.L395
3347:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 6218              		.loc 1 3347 8
 6219 00a8 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6220 00ac 042B     		cmp	r3, #4
 6221 00ae 0ED1     		bne	.L396
3348:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
3349:./Libraries/FatFs/Src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 6222              		.loc 1 3349 12
 6223 00b0 FFF7FEFF 		bl	enq_lock
 6224 00b4 0346     		mov	r3, r0
 6225              		.loc 1 3349 43
 6226 00b6 002B     		cmp	r3, #0
 6227 00b8 06D0     		beq	.L397
 6228              		.loc 1 3349 25 discriminator 1
 6229 00ba 07F11403 		add	r3, r7, #20
 6230 00be 1846     		mov	r0, r3
 6231 00c0 FFF7FEFF 		bl	dir_register
 6232 00c4 0346     		mov	r3, r0
 6233 00c6 00E0     		b	.L398
 6234              	.L397:
 6235              		.loc 1 3349 43 discriminator 2
 6236 00c8 1223     		movs	r3, #18
 6237              	.L398:
 6238              		.loc 1 3349 10 discriminator 4
 6239 00ca 87F85F30 		strb	r3, [r7, #95]
 6240              	.L396:
ARM GAS  /tmp/cceCRWeb.s 			page 169


3350:./Libraries/FatFs/Src/ff.c **** #else
3351:./Libraries/FatFs/Src/ff.c **** 					res = dir_register(&dj);
3352:./Libraries/FatFs/Src/ff.c **** #endif
3353:./Libraries/FatFs/Src/ff.c **** 				}
3354:./Libraries/FatFs/Src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 6241              		.loc 1 3354 10
 6242 00ce FB79     		ldrb	r3, [r7, #7]
 6243 00d0 43F00803 		orr	r3, r3, #8
 6244 00d4 FB71     		strb	r3, [r7, #7]
 6245 00d6 10E0     		b	.L399
 6246              	.L395:
3355:./Libraries/FatFs/Src/ff.c **** 			}
3356:./Libraries/FatFs/Src/ff.c **** 			else {								/* Any object is already existing */
3357:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 6247              		.loc 1 3357 15
 6248 00d8 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 6249              		.loc 1 3357 21
 6250 00da 03F01103 		and	r3, r3, #17
 6251              		.loc 1 3357 8
 6252 00de 002B     		cmp	r3, #0
 6253 00e0 03D0     		beq	.L400
3358:./Libraries/FatFs/Src/ff.c **** 					res = FR_DENIED;
 6254              		.loc 1 3358 10
 6255 00e2 0723     		movs	r3, #7
 6256 00e4 87F85F30 		strb	r3, [r7, #95]
 6257 00e8 07E0     		b	.L399
 6258              	.L400:
3359:./Libraries/FatFs/Src/ff.c **** 				} else {
3360:./Libraries/FatFs/Src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 6259              		.loc 1 3360 15
 6260 00ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6261 00ec 03F00403 		and	r3, r3, #4
 6262              		.loc 1 3360 9
 6263 00f0 002B     		cmp	r3, #0
 6264 00f2 02D0     		beq	.L399
 6265              		.loc 1 3360 36 discriminator 1
 6266 00f4 0823     		movs	r3, #8
 6267 00f6 87F85F30 		strb	r3, [r7, #95]
 6268              	.L399:
3361:./Libraries/FatFs/Src/ff.c **** 				}
3362:./Libraries/FatFs/Src/ff.c **** 			}
3363:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 6269              		.loc 1 3363 7
 6270 00fa 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6271 00fe 002B     		cmp	r3, #0
 6272 0100 68D1     		bne	.L401
 6273              		.loc 1 3363 30 discriminator 1
 6274 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6275 0104 03F00803 		and	r3, r3, #8
 6276              		.loc 1 3363 21 discriminator 1
 6277 0108 002B     		cmp	r3, #0
 6278 010a 63D0     		beq	.L401
3364:./Libraries/FatFs/Src/ff.c **** 				dw = GET_FATTIME();
 6279              		.loc 1 3364 10
 6280 010c FFF7FEFF 		bl	get_fattime
 6281 0110 3865     		str	r0, [r7, #80]
3365:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/cceCRWeb.s 			page 170


3366:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3367:./Libraries/FatFs/Src/ff.c **** 					/* Get current allocation info */
3368:./Libraries/FatFs/Src/ff.c **** 					fp->obj.fs = fs;
3369:./Libraries/FatFs/Src/ff.c **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3370:./Libraries/FatFs/Src/ff.c **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3371:./Libraries/FatFs/Src/ff.c **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3372:./Libraries/FatFs/Src/ff.c **** 					fp->obj.n_frag = 0;
3373:./Libraries/FatFs/Src/ff.c **** 					/* Initialize directory entry block */
3374:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3375:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3376:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3377:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3378:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3379:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3380:./Libraries/FatFs/Src/ff.c **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3381:./Libraries/FatFs/Src/ff.c **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3382:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3383:./Libraries/FatFs/Src/ff.c **** 					res = store_xdir(&dj);
3384:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3385:./Libraries/FatFs/Src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3386:./Libraries/FatFs/Src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3387:./Libraries/FatFs/Src/ff.c **** 					}
3388:./Libraries/FatFs/Src/ff.c **** 				} else
3389:./Libraries/FatFs/Src/ff.c **** #endif
3390:./Libraries/FatFs/Src/ff.c **** 				{
3391:./Libraries/FatFs/Src/ff.c **** 					/* Clean directory info */
3392:./Libraries/FatFs/Src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 6282              		.loc 1 3392 17
 6283 0112 7B6B     		ldr	r3, [r7, #52]
 6284              		.loc 1 3392 6
 6285 0114 0E33     		adds	r3, r3, #14
 6286 0116 396D     		ldr	r1, [r7, #80]
 6287 0118 1846     		mov	r0, r3
 6288 011a FFF7FEFF 		bl	st_dword
3393:./Libraries/FatFs/Src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 6289              		.loc 1 3393 17
 6290 011e 7B6B     		ldr	r3, [r7, #52]
 6291              		.loc 1 3393 6
 6292 0120 1633     		adds	r3, r3, #22
 6293 0122 396D     		ldr	r1, [r7, #80]
 6294 0124 1846     		mov	r0, r3
 6295 0126 FFF7FEFF 		bl	st_dword
3394:./Libraries/FatFs/Src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6296              		.loc 1 3394 8
 6297 012a 7B6B     		ldr	r3, [r7, #52]
 6298              		.loc 1 3394 12
 6299 012c 0B33     		adds	r3, r3, #11
 6300              		.loc 1 3394 23
 6301 012e 2022     		movs	r2, #32
 6302 0130 1A70     		strb	r2, [r3]
3395:./Libraries/FatFs/Src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 6303              		.loc 1 3395 11
 6304 0132 3B69     		ldr	r3, [r7, #16]
 6305              		.loc 1 3395 26
 6306 0134 7A6B     		ldr	r2, [r7, #52]
 6307              		.loc 1 3395 11
 6308 0136 1146     		mov	r1, r2
ARM GAS  /tmp/cceCRWeb.s 			page 171


 6309 0138 1846     		mov	r0, r3
 6310 013a FFF7FEFF 		bl	ld_clust
 6311 013e F864     		str	r0, [r7, #76]
3396:./Libraries/FatFs/Src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 6312              		.loc 1 3396 6
 6313 0140 3B69     		ldr	r3, [r7, #16]
 6314 0142 796B     		ldr	r1, [r7, #52]
 6315 0144 0022     		movs	r2, #0
 6316 0146 1846     		mov	r0, r3
 6317 0148 FFF7FEFF 		bl	st_clust
3397:./Libraries/FatFs/Src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 6318              		.loc 1 3397 17
 6319 014c 7B6B     		ldr	r3, [r7, #52]
 6320              		.loc 1 3397 6
 6321 014e 1C33     		adds	r3, r3, #28
 6322 0150 0021     		movs	r1, #0
 6323 0152 1846     		mov	r0, r3
 6324 0154 FFF7FEFF 		bl	st_dword
3398:./Libraries/FatFs/Src/ff.c **** 					fs->wflag = 1;
 6325              		.loc 1 3398 8
 6326 0158 3B69     		ldr	r3, [r7, #16]
 6327              		.loc 1 3398 16
 6328 015a 0122     		movs	r2, #1
 6329 015c DA70     		strb	r2, [r3, #3]
3399:./Libraries/FatFs/Src/ff.c **** 
3400:./Libraries/FatFs/Src/ff.c **** 					if (cl) {							/* Remove the cluster chain if exist */
 6330              		.loc 1 3400 9
 6331 015e FB6C     		ldr	r3, [r7, #76]
 6332 0160 002B     		cmp	r3, #0
 6333 0162 37D0     		beq	.L401
3401:./Libraries/FatFs/Src/ff.c **** 						dw = fs->winsect;
 6334              		.loc 1 3401 14
 6335 0164 3B69     		ldr	r3, [r7, #16]
 6336              		.loc 1 3401 10
 6337 0166 1B6B     		ldr	r3, [r3, #48]
 6338 0168 3B65     		str	r3, [r7, #80]
3402:./Libraries/FatFs/Src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 6339              		.loc 1 3402 13
 6340 016a 07F11403 		add	r3, r7, #20
 6341 016e 0022     		movs	r2, #0
 6342 0170 F96C     		ldr	r1, [r7, #76]
 6343 0172 1846     		mov	r0, r3
 6344 0174 FFF7FEFF 		bl	remove_chain
 6345 0178 0346     		mov	r3, r0
 6346 017a 87F85F30 		strb	r3, [r7, #95]
3403:./Libraries/FatFs/Src/ff.c **** 						if (res == FR_OK) {
 6347              		.loc 1 3403 10
 6348 017e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6349 0182 002B     		cmp	r3, #0
 6350 0184 26D1     		bne	.L401
3404:./Libraries/FatFs/Src/ff.c **** 							res = move_window(fs, dw);
 6351              		.loc 1 3404 14
 6352 0186 3B69     		ldr	r3, [r7, #16]
 6353 0188 396D     		ldr	r1, [r7, #80]
 6354 018a 1846     		mov	r0, r3
 6355 018c FFF7FEFF 		bl	move_window
 6356 0190 0346     		mov	r3, r0
ARM GAS  /tmp/cceCRWeb.s 			page 172


 6357 0192 87F85F30 		strb	r3, [r7, #95]
3405:./Libraries/FatFs/Src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6358              		.loc 1 3405 10
 6359 0196 3B69     		ldr	r3, [r7, #16]
 6360              		.loc 1 3405 27
 6361 0198 FA6C     		ldr	r2, [r7, #76]
 6362 019a 013A     		subs	r2, r2, #1
 6363              		.loc 1 3405 22
 6364 019c 1A61     		str	r2, [r3, #16]
 6365 019e 19E0     		b	.L401
 6366              	.L394:
3406:./Libraries/FatFs/Src/ff.c **** 						}
3407:./Libraries/FatFs/Src/ff.c **** 					}
3408:./Libraries/FatFs/Src/ff.c **** 				}
3409:./Libraries/FatFs/Src/ff.c **** 			}
3410:./Libraries/FatFs/Src/ff.c **** 		}
3411:./Libraries/FatFs/Src/ff.c **** 		else {	/* Open an existing file */
3412:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {					/* Following succeeded */
 6367              		.loc 1 3412 7
 6368 01a0 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6369 01a4 002B     		cmp	r3, #0
 6370 01a6 15D1     		bne	.L401
3413:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 6371              		.loc 1 3413 15
 6372 01a8 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 6373              		.loc 1 3413 21
 6374 01aa 03F01003 		and	r3, r3, #16
 6375              		.loc 1 3413 8
 6376 01ae 002B     		cmp	r3, #0
 6377 01b0 03D0     		beq	.L402
3414:./Libraries/FatFs/Src/ff.c **** 					res = FR_NO_FILE;
 6378              		.loc 1 3414 10
 6379 01b2 0423     		movs	r3, #4
 6380 01b4 87F85F30 		strb	r3, [r7, #95]
 6381 01b8 0CE0     		b	.L401
 6382              	.L402:
3415:./Libraries/FatFs/Src/ff.c **** 				} else {
3416:./Libraries/FatFs/Src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 6383              		.loc 1 3416 16
 6384 01ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6385 01bc 03F00203 		and	r3, r3, #2
 6386              		.loc 1 3416 9
 6387 01c0 002B     		cmp	r3, #0
 6388 01c2 07D0     		beq	.L401
 6389              		.loc 1 3416 38 discriminator 1
 6390 01c4 BB7E     		ldrb	r3, [r7, #26]	@ zero_extendqisi2
 6391              		.loc 1 3416 44 discriminator 1
 6392 01c6 03F00103 		and	r3, r3, #1
 6393              		.loc 1 3416 28 discriminator 1
 6394 01ca 002B     		cmp	r3, #0
 6395 01cc 02D0     		beq	.L401
3417:./Libraries/FatFs/Src/ff.c **** 						res = FR_DENIED;
 6396              		.loc 1 3417 11
 6397 01ce 0723     		movs	r3, #7
 6398 01d0 87F85F30 		strb	r3, [r7, #95]
 6399              	.L401:
3418:./Libraries/FatFs/Src/ff.c **** 					}
ARM GAS  /tmp/cceCRWeb.s 			page 173


3419:./Libraries/FatFs/Src/ff.c **** 				}
3420:./Libraries/FatFs/Src/ff.c **** 			}
3421:./Libraries/FatFs/Src/ff.c **** 		}
3422:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 6400              		.loc 1 3422 6
 6401 01d4 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6402 01d8 002B     		cmp	r3, #0
 6403 01da 28D1     		bne	.L403
3423:./Libraries/FatFs/Src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 6404              		.loc 1 3423 13
 6405 01dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6406 01de 03F00803 		and	r3, r3, #8
 6407              		.loc 1 3423 7
 6408 01e2 002B     		cmp	r3, #0
 6409 01e4 03D0     		beq	.L404
3424:./Libraries/FatFs/Src/ff.c **** 				mode |= FA_MODIFIED;
 6410              		.loc 1 3424 10
 6411 01e6 FB79     		ldrb	r3, [r7, #7]
 6412 01e8 43F04003 		orr	r3, r3, #64
 6413 01ec FB71     		strb	r3, [r7, #7]
 6414              	.L404:
3425:./Libraries/FatFs/Src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6415              		.loc 1 3425 21
 6416 01ee 3B69     		ldr	r3, [r7, #16]
 6417 01f0 1A6B     		ldr	r2, [r3, #48]
 6418              		.loc 1 3425 17
 6419 01f2 FB68     		ldr	r3, [r7, #12]
 6420 01f4 5A62     		str	r2, [r3, #36]
3426:./Libraries/FatFs/Src/ff.c **** 			fp->dir_ptr = dj.dir;
 6421              		.loc 1 3426 20
 6422 01f6 7A6B     		ldr	r2, [r7, #52]
 6423              		.loc 1 3426 16
 6424 01f8 FB68     		ldr	r3, [r7, #12]
 6425 01fa 9A62     		str	r2, [r3, #40]
3427:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
3428:./Libraries/FatFs/Src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 6426              		.loc 1 3428 41
 6427 01fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6428 01fe 23F00103 		bic	r3, r3, #1
 6429              		.loc 1 3428 21
 6430 0202 002B     		cmp	r3, #0
 6431 0204 14BF     		ite	ne
 6432 0206 0123     		movne	r3, #1
 6433 0208 0023     		moveq	r3, #0
 6434 020a DBB2     		uxtb	r3, r3
 6435 020c 1A46     		mov	r2, r3
 6436 020e 07F11403 		add	r3, r7, #20
 6437 0212 1146     		mov	r1, r2
 6438 0214 1846     		mov	r0, r3
 6439 0216 FFF7FEFF 		bl	inc_lock
 6440 021a 0246     		mov	r2, r0
 6441              		.loc 1 3428 19
 6442 021c FB68     		ldr	r3, [r7, #12]
 6443 021e 1A61     		str	r2, [r3, #16]
3429:./Libraries/FatFs/Src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
 6444              		.loc 1 3429 16
 6445 0220 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cceCRWeb.s 			page 174


 6446 0222 1B69     		ldr	r3, [r3, #16]
 6447              		.loc 1 3429 7
 6448 0224 002B     		cmp	r3, #0
 6449 0226 02D1     		bne	.L403
 6450              		.loc 1 3429 29 discriminator 1
 6451 0228 0223     		movs	r3, #2
 6452 022a 87F85F30 		strb	r3, [r7, #95]
 6453              	.L403:
3430:./Libraries/FatFs/Src/ff.c **** #endif
3431:./Libraries/FatFs/Src/ff.c **** 		}
3432:./Libraries/FatFs/Src/ff.c **** #else		/* R/O configuration */
3433:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
3434:./Libraries/FatFs/Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3435:./Libraries/FatFs/Src/ff.c **** 				res = FR_INVALID_NAME;
3436:./Libraries/FatFs/Src/ff.c **** 			} else {
3437:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3438:./Libraries/FatFs/Src/ff.c **** 					res = FR_NO_FILE;
3439:./Libraries/FatFs/Src/ff.c **** 				}
3440:./Libraries/FatFs/Src/ff.c **** 			}
3441:./Libraries/FatFs/Src/ff.c **** 		}
3442:./Libraries/FatFs/Src/ff.c **** #endif
3443:./Libraries/FatFs/Src/ff.c **** 
3444:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 6454              		.loc 1 3444 6
 6455 022e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6456 0232 002B     		cmp	r3, #0
 6457 0234 40F09580 		bne	.L391
3445:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3446:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3447:./Libraries/FatFs/Src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3448:./Libraries/FatFs/Src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3449:./Libraries/FatFs/Src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3450:./Libraries/FatFs/Src/ff.c **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
3451:./Libraries/FatFs/Src/ff.c **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3452:./Libraries/FatFs/Src/ff.c **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3453:./Libraries/FatFs/Src/ff.c **** 			} else
3454:./Libraries/FatFs/Src/ff.c **** #endif
3455:./Libraries/FatFs/Src/ff.c **** 			{
3456:./Libraries/FatFs/Src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 6458              		.loc 1 3456 22
 6459 0238 3B69     		ldr	r3, [r7, #16]
 6460              		.loc 1 3456 37
 6461 023a 7A6B     		ldr	r2, [r7, #52]
 6462              		.loc 1 3456 22
 6463 023c 1146     		mov	r1, r2
 6464 023e 1846     		mov	r0, r3
 6465 0240 FFF7FEFF 		bl	ld_clust
 6466 0244 0246     		mov	r2, r0
 6467              		.loc 1 3456 20
 6468 0246 FB68     		ldr	r3, [r7, #12]
 6469 0248 9A60     		str	r2, [r3, #8]
3457:./Libraries/FatFs/Src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 6470              		.loc 1 3457 34
 6471 024a 7B6B     		ldr	r3, [r7, #52]
 6472              		.loc 1 3457 39
 6473 024c 1C33     		adds	r3, r3, #28
 6474              		.loc 1 3457 23
ARM GAS  /tmp/cceCRWeb.s 			page 175


 6475 024e 1846     		mov	r0, r3
 6476 0250 FFF7FEFF 		bl	ld_dword
 6477 0254 0246     		mov	r2, r0
 6478              		.loc 1 3457 21
 6479 0256 FB68     		ldr	r3, [r7, #12]
 6480 0258 DA60     		str	r2, [r3, #12]
3458:./Libraries/FatFs/Src/ff.c **** 			}
3459:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
3460:./Libraries/FatFs/Src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
 6481              		.loc 1 3460 14
 6482 025a FB68     		ldr	r3, [r7, #12]
 6483 025c 0022     		movs	r2, #0
 6484 025e DA62     		str	r2, [r3, #44]
3461:./Libraries/FatFs/Src/ff.c **** #endif
3462:./Libraries/FatFs/Src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
 6485              		.loc 1 3462 15
 6486 0260 3A69     		ldr	r2, [r7, #16]
 6487 0262 FB68     		ldr	r3, [r7, #12]
 6488 0264 1A60     		str	r2, [r3]
3463:./Libraries/FatFs/Src/ff.c **** 			fp->obj.id = fs->id;
 6489              		.loc 1 3463 19
 6490 0266 3B69     		ldr	r3, [r7, #16]
 6491 0268 DA88     		ldrh	r2, [r3, #6]
 6492              		.loc 1 3463 15
 6493 026a FB68     		ldr	r3, [r7, #12]
 6494 026c 9A80     		strh	r2, [r3, #4]	@ movhi
3464:./Libraries/FatFs/Src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 6495              		.loc 1 3464 13
 6496 026e FB68     		ldr	r3, [r7, #12]
 6497 0270 FA79     		ldrb	r2, [r7, #7]
 6498 0272 1A75     		strb	r2, [r3, #20]
3465:./Libraries/FatFs/Src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 6499              		.loc 1 3465 12
 6500 0274 FB68     		ldr	r3, [r7, #12]
 6501 0276 0022     		movs	r2, #0
 6502 0278 5A75     		strb	r2, [r3, #21]
3466:./Libraries/FatFs/Src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 6503              		.loc 1 3466 13
 6504 027a FB68     		ldr	r3, [r7, #12]
 6505 027c 0022     		movs	r2, #0
 6506 027e 1A62     		str	r2, [r3, #32]
3467:./Libraries/FatFs/Src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 6507              		.loc 1 3467 13
 6508 0280 FB68     		ldr	r3, [r7, #12]
 6509 0282 0022     		movs	r2, #0
 6510 0284 9A61     		str	r2, [r3, #24]
3468:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3469:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
3470:./Libraries/FatFs/Src/ff.c **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 6511              		.loc 1 3470 14
 6512 0286 FB68     		ldr	r3, [r7, #12]
 6513 0288 3033     		adds	r3, r3, #48
 6514              		.loc 1 3470 4
 6515 028a 4FF40072 		mov	r2, #512
 6516 028e 0021     		movs	r1, #0
 6517 0290 1846     		mov	r0, r3
 6518 0292 FFF7FEFF 		bl	mem_set
ARM GAS  /tmp/cceCRWeb.s 			page 176


3471:./Libraries/FatFs/Src/ff.c **** #endif
3472:./Libraries/FatFs/Src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 6519              		.loc 1 3472 14
 6520 0296 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6521 0298 03F02003 		and	r3, r3, #32
 6522              		.loc 1 3472 7
 6523 029c 002B     		cmp	r3, #0
 6524 029e 60D0     		beq	.L391
 6525              		.loc 1 3472 38 discriminator 1
 6526 02a0 FB68     		ldr	r3, [r7, #12]
 6527 02a2 DB68     		ldr	r3, [r3, #12]
 6528              		.loc 1 3472 28 discriminator 1
 6529 02a4 002B     		cmp	r3, #0
 6530 02a6 5CD0     		beq	.L391
3473:./Libraries/FatFs/Src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 6531              		.loc 1 3473 23
 6532 02a8 FB68     		ldr	r3, [r7, #12]
 6533 02aa DA68     		ldr	r2, [r3, #12]
 6534              		.loc 1 3473 14
 6535 02ac FB68     		ldr	r3, [r7, #12]
 6536 02ae 9A61     		str	r2, [r3, #24]
3474:./Libraries/FatFs/Src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 6537              		.loc 1 3474 20
 6538 02b0 3B69     		ldr	r3, [r7, #16]
 6539 02b2 5B89     		ldrh	r3, [r3, #10]
 6540              		.loc 1 3474 9
 6541 02b4 5B02     		lsls	r3, r3, #9
 6542 02b6 BB64     		str	r3, [r7, #72]
3475:./Libraries/FatFs/Src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 6543              		.loc 1 3475 10
 6544 02b8 FB68     		ldr	r3, [r7, #12]
 6545 02ba 9B68     		ldr	r3, [r3, #8]
 6546 02bc BB65     		str	r3, [r7, #88]
3476:./Libraries/FatFs/Src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 6547              		.loc 1 3476 14
 6548 02be FB68     		ldr	r3, [r7, #12]
 6549 02c0 DB68     		ldr	r3, [r3, #12]
 6550 02c2 7B65     		str	r3, [r7, #84]
 6551              		.loc 1 3476 5
 6552 02c4 16E0     		b	.L405
 6553              	.L409:
3477:./Libraries/FatFs/Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6554              		.loc 1 3477 13
 6555 02c6 FB68     		ldr	r3, [r7, #12]
 6556 02c8 B96D     		ldr	r1, [r7, #88]
 6557 02ca 1846     		mov	r0, r3
 6558 02cc FFF7FEFF 		bl	get_fat
 6559 02d0 B865     		str	r0, [r7, #88]
3478:./Libraries/FatFs/Src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 6560              		.loc 1 3478 9
 6561 02d2 BB6D     		ldr	r3, [r7, #88]
 6562 02d4 012B     		cmp	r3, #1
 6563 02d6 02D8     		bhi	.L406
 6564              		.loc 1 3478 25 discriminator 1
 6565 02d8 0223     		movs	r3, #2
 6566 02da 87F85F30 		strb	r3, [r7, #95]
 6567              	.L406:
ARM GAS  /tmp/cceCRWeb.s 			page 177


3479:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 6568              		.loc 1 3479 9
 6569 02de BB6D     		ldr	r3, [r7, #88]
 6570 02e0 B3F1FF3F 		cmp	r3, #-1
 6571 02e4 02D1     		bne	.L407
 6572              		.loc 1 3479 34 discriminator 1
 6573 02e6 0123     		movs	r3, #1
 6574 02e8 87F85F30 		strb	r3, [r7, #95]
 6575              	.L407:
3476:./Libraries/FatFs/Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6576              		.loc 1 3476 64 discriminator 2
 6577 02ec 7A6D     		ldr	r2, [r7, #84]
 6578 02ee BB6C     		ldr	r3, [r7, #72]
 6579 02f0 D31A     		subs	r3, r2, r3
 6580 02f2 7B65     		str	r3, [r7, #84]
 6581              	.L405:
3476:./Libraries/FatFs/Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6582              		.loc 1 3476 5 discriminator 1
 6583 02f4 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6584 02f8 002B     		cmp	r3, #0
 6585 02fa 03D1     		bne	.L408
3476:./Libraries/FatFs/Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6586              		.loc 1 3476 46 discriminator 3
 6587 02fc 7A6D     		ldr	r2, [r7, #84]
 6588 02fe BB6C     		ldr	r3, [r7, #72]
 6589 0300 9A42     		cmp	r2, r3
 6590 0302 E0D8     		bhi	.L409
 6591              	.L408:
3480:./Libraries/FatFs/Src/ff.c **** 				}
3481:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clst;
 6592              		.loc 1 3481 15
 6593 0304 FB68     		ldr	r3, [r7, #12]
 6594 0306 BA6D     		ldr	r2, [r7, #88]
 6595 0308 DA61     		str	r2, [r3, #28]
3482:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 6596              		.loc 1 3482 8
 6597 030a 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6598 030e 002B     		cmp	r3, #0
 6599 0310 27D1     		bne	.L391
 6600              		.loc 1 3482 29 discriminator 1
 6601 0312 7B6D     		ldr	r3, [r7, #84]
 6602 0314 C3F30803 		ubfx	r3, r3, #0, #9
 6603              		.loc 1 3482 22 discriminator 1
 6604 0318 002B     		cmp	r3, #0
 6605 031a 22D0     		beq	.L391
3483:./Libraries/FatFs/Src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 6606              		.loc 1 3483 16
 6607 031c 3B69     		ldr	r3, [r7, #16]
 6608 031e B96D     		ldr	r1, [r7, #88]
 6609 0320 1846     		mov	r0, r3
 6610 0322 FFF7FEFF 		bl	clust2sect
 6611 0326 7864     		str	r0, [r7, #68]
 6612              		.loc 1 3483 9
 6613 0328 7B6C     		ldr	r3, [r7, #68]
 6614 032a 002B     		cmp	r3, #0
 6615 032c 03D1     		bne	.L410
3484:./Libraries/FatFs/Src/ff.c **** 						res = FR_INT_ERR;
ARM GAS  /tmp/cceCRWeb.s 			page 178


 6616              		.loc 1 3484 11
 6617 032e 0223     		movs	r3, #2
 6618 0330 87F85F30 		strb	r3, [r7, #95]
 6619 0334 15E0     		b	.L391
 6620              	.L410:
3485:./Libraries/FatFs/Src/ff.c **** 					} else {
3486:./Libraries/FatFs/Src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 6621              		.loc 1 3486 23
 6622 0336 7B6D     		ldr	r3, [r7, #84]
 6623 0338 5A0A     		lsrs	r2, r3, #9
 6624              		.loc 1 3486 21
 6625 033a 7B6C     		ldr	r3, [r7, #68]
 6626 033c 1A44     		add	r2, r2, r3
 6627              		.loc 1 3486 16
 6628 033e FB68     		ldr	r3, [r7, #12]
 6629 0340 1A62     		str	r2, [r3, #32]
3487:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
3488:./Libraries/FatFs/Src/ff.c **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 6630              		.loc 1 3488 23
 6631 0342 3B69     		ldr	r3, [r7, #16]
 6632              		.loc 1 3488 11
 6633 0344 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 6634              		.loc 1 3488 32
 6635 0346 FB68     		ldr	r3, [r7, #12]
 6636 0348 03F13001 		add	r1, r3, #48
 6637              		.loc 1 3488 11
 6638 034c FB68     		ldr	r3, [r7, #12]
 6639 034e 1A6A     		ldr	r2, [r3, #32]
 6640 0350 0123     		movs	r3, #1
 6641 0352 FFF7FEFF 		bl	disk_read
 6642 0356 0346     		mov	r3, r0
 6643              		.loc 1 3488 10
 6644 0358 002B     		cmp	r3, #0
 6645 035a 02D0     		beq	.L391
 6646              		.loc 1 3488 67 discriminator 1
 6647 035c 0123     		movs	r3, #1
 6648 035e 87F85F30 		strb	r3, [r7, #95]
 6649              	.L391:
3489:./Libraries/FatFs/Src/ff.c **** #endif
3490:./Libraries/FatFs/Src/ff.c **** 					}
3491:./Libraries/FatFs/Src/ff.c **** 				}
3492:./Libraries/FatFs/Src/ff.c **** 			}
3493:./Libraries/FatFs/Src/ff.c **** #endif
3494:./Libraries/FatFs/Src/ff.c **** 		}
3495:./Libraries/FatFs/Src/ff.c **** 
3496:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
3497:./Libraries/FatFs/Src/ff.c **** 	}
3498:./Libraries/FatFs/Src/ff.c **** 
3499:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 6650              		.loc 1 3499 5
 6651 0362 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6652 0366 002B     		cmp	r3, #0
 6653 0368 02D0     		beq	.L411
 6654              		.loc 1 3499 31 discriminator 1
 6655 036a FB68     		ldr	r3, [r7, #12]
 6656 036c 0022     		movs	r2, #0
 6657 036e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cceCRWeb.s 			page 179


 6658              	.L411:
3500:./Libraries/FatFs/Src/ff.c **** 
3501:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 6659              		.loc 1 3501 2
 6660 0370 3B69     		ldr	r3, [r7, #16]
 6661 0372 97F85F20 		ldrb	r2, [r7, #95]	@ zero_extendqisi2
 6662 0376 1146     		mov	r1, r2
 6663 0378 1846     		mov	r0, r3
 6664 037a FFF7FEFF 		bl	unlock_fs
 6665 037e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 6666              	.L412:
3502:./Libraries/FatFs/Src/ff.c **** }
 6667              		.loc 1 3502 1 discriminator 1
 6668 0382 1846     		mov	r0, r3
 6669 0384 6037     		adds	r7, r7, #96
 6670              	.LCFI224:
 6671              		.cfi_def_cfa_offset 8
 6672 0386 BD46     		mov	sp, r7
 6673              	.LCFI225:
 6674              		.cfi_def_cfa_register 13
 6675              		@ sp needed
 6676 0388 80BD     		pop	{r7, pc}
 6677              		.cfi_endproc
 6678              	.LFE376:
 6680              		.section	.text.f_read,"ax",%progbits
 6681              		.align	1
 6682              		.global	f_read
 6683              		.syntax unified
 6684              		.thumb
 6685              		.thumb_func
 6686              		.fpu fpv5-d16
 6688              	f_read:
 6689              	.LFB377:
3503:./Libraries/FatFs/Src/ff.c **** 
3504:./Libraries/FatFs/Src/ff.c **** 
3505:./Libraries/FatFs/Src/ff.c **** 
3506:./Libraries/FatFs/Src/ff.c **** 
3507:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3508:./Libraries/FatFs/Src/ff.c **** /* Read File                                                             */
3509:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3510:./Libraries/FatFs/Src/ff.c **** 
3511:./Libraries/FatFs/Src/ff.c **** FRESULT f_read (
3512:./Libraries/FatFs/Src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3513:./Libraries/FatFs/Src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3514:./Libraries/FatFs/Src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3515:./Libraries/FatFs/Src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3516:./Libraries/FatFs/Src/ff.c **** )
3517:./Libraries/FatFs/Src/ff.c **** {
 6690              		.loc 1 3517 1
 6691              		.cfi_startproc
 6692              		@ args = 0, pretend = 0, frame = 56
 6693              		@ frame_needed = 1, uses_anonymous_args = 0
 6694 0000 80B5     		push	{r7, lr}
 6695              	.LCFI226:
 6696              		.cfi_def_cfa_offset 8
 6697              		.cfi_offset 7, -8
 6698              		.cfi_offset 14, -4
ARM GAS  /tmp/cceCRWeb.s 			page 180


 6699 0002 8EB0     		sub	sp, sp, #56
 6700              	.LCFI227:
 6701              		.cfi_def_cfa_offset 64
 6702 0004 00AF     		add	r7, sp, #0
 6703              	.LCFI228:
 6704              		.cfi_def_cfa_register 7
 6705 0006 F860     		str	r0, [r7, #12]
 6706 0008 B960     		str	r1, [r7, #8]
 6707 000a 7A60     		str	r2, [r7, #4]
 6708 000c 3B60     		str	r3, [r7]
3518:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3519:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3520:./Libraries/FatFs/Src/ff.c **** 	DWORD clst, sect;
3521:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t remain;
3522:./Libraries/FatFs/Src/ff.c **** 	UINT rcnt, cc, csect;
3523:./Libraries/FatFs/Src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
 6709              		.loc 1 3523 8
 6710 000e BB68     		ldr	r3, [r7, #8]
 6711 0010 7B62     		str	r3, [r7, #36]
3524:./Libraries/FatFs/Src/ff.c **** 
3525:./Libraries/FatFs/Src/ff.c **** 
3526:./Libraries/FatFs/Src/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6712              		.loc 1 3526 6
 6713 0012 3B68     		ldr	r3, [r7]
 6714 0014 0022     		movs	r2, #0
 6715 0016 1A60     		str	r2, [r3]
3527:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 6716              		.loc 1 3527 8
 6717 0018 FB68     		ldr	r3, [r7, #12]
 6718 001a 07F11402 		add	r2, r7, #20
 6719 001e 1146     		mov	r1, r2
 6720 0020 1846     		mov	r0, r3
 6721 0022 FFF7FEFF 		bl	validate
 6722 0026 0346     		mov	r3, r0
 6723 0028 87F83730 		strb	r3, [r7, #55]
3528:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6724              		.loc 1 3528 5
 6725 002c 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6726 0030 002B     		cmp	r3, #0
 6727 0032 07D1     		bne	.L414
 6728              		.loc 1 3528 27 discriminator 2
 6729 0034 FB68     		ldr	r3, [r7, #12]
 6730 0036 5B7D     		ldrb	r3, [r3, #21]
 6731 0038 87F83730 		strb	r3, [r7, #55]
 6732              		.loc 1 3528 19 discriminator 2
 6733 003c 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6734 0040 002B     		cmp	r3, #0
 6735 0042 09D0     		beq	.L415
 6736              	.L414:
 6737              		.loc 1 3528 57 discriminator 3
 6738 0044 7B69     		ldr	r3, [r7, #20]
 6739 0046 97F83720 		ldrb	r2, [r7, #55]	@ zero_extendqisi2
 6740 004a 1146     		mov	r1, r2
 6741 004c 1846     		mov	r0, r3
 6742 004e FFF7FEFF 		bl	unlock_fs
 6743 0052 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6744 0056 3DE1     		b	.L438
ARM GAS  /tmp/cceCRWeb.s 			page 181


 6745              	.L415:
3529:./Libraries/FatFs/Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6746              		.loc 1 3529 10
 6747 0058 FB68     		ldr	r3, [r7, #12]
 6748 005a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 6749              		.loc 1 3529 17
 6750 005c 03F00103 		and	r3, r3, #1
 6751              		.loc 1 3529 5
 6752 0060 002B     		cmp	r3, #0
 6753 0062 06D1     		bne	.L417
 6754              		.loc 1 3529 29 discriminator 1
 6755 0064 7B69     		ldr	r3, [r7, #20]
 6756 0066 0721     		movs	r1, #7
 6757 0068 1846     		mov	r0, r3
 6758 006a FFF7FEFF 		bl	unlock_fs
 6759 006e 0723     		movs	r3, #7
 6760 0070 30E1     		b	.L438
 6761              	.L417:
3530:./Libraries/FatFs/Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 6762              		.loc 1 3530 18
 6763 0072 FB68     		ldr	r3, [r7, #12]
 6764 0074 DA68     		ldr	r2, [r3, #12]
 6765              		.loc 1 3530 31
 6766 0076 FB68     		ldr	r3, [r7, #12]
 6767 0078 9B69     		ldr	r3, [r3, #24]
 6768              		.loc 1 3530 9
 6769 007a D31A     		subs	r3, r2, r3
 6770 007c 3B62     		str	r3, [r7, #32]
3531:./Libraries/FatFs/Src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6771              		.loc 1 3531 5
 6772 007e 7A68     		ldr	r2, [r7, #4]
 6773 0080 3B6A     		ldr	r3, [r7, #32]
 6774 0082 9A42     		cmp	r2, r3
 6775 0084 40F21C81 		bls	.L419
 6776              		.loc 1 3531 24 discriminator 1
 6777 0088 3B6A     		ldr	r3, [r7, #32]
 6778 008a 7B60     		str	r3, [r7, #4]
3532:./Libraries/FatFs/Src/ff.c **** 
3533:./Libraries/FatFs/Src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 6779              		.loc 1 3533 2 discriminator 1
 6780 008c 18E1     		b	.L419
 6781              	.L437:
3534:./Libraries/FatFs/Src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3535:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6782              		.loc 1 3535 9
 6783 008e FB68     		ldr	r3, [r7, #12]
 6784 0090 9B69     		ldr	r3, [r3, #24]
 6785              		.loc 1 3535 16
 6786 0092 C3F30803 		ubfx	r3, r3, #0, #9
 6787              		.loc 1 3535 6
 6788 0096 002B     		cmp	r3, #0
 6789 0098 40F0E480 		bne	.L420
3536:./Libraries/FatFs/Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 6790              		.loc 1 3536 21
 6791 009c FB68     		ldr	r3, [r7, #12]
 6792 009e 9B69     		ldr	r3, [r3, #24]
 6793              		.loc 1 3536 28
ARM GAS  /tmp/cceCRWeb.s 			page 182


 6794 00a0 5B0A     		lsrs	r3, r3, #9
 6795              		.loc 1 3536 42
 6796 00a2 7A69     		ldr	r2, [r7, #20]
 6797 00a4 5289     		ldrh	r2, [r2, #10]
 6798              		.loc 1 3536 50
 6799 00a6 013A     		subs	r2, r2, #1
 6800              		.loc 1 3536 10
 6801 00a8 1340     		ands	r3, r3, r2
 6802 00aa FB61     		str	r3, [r7, #28]
3537:./Libraries/FatFs/Src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 6803              		.loc 1 3537 7
 6804 00ac FB69     		ldr	r3, [r7, #28]
 6805 00ae 002B     		cmp	r3, #0
 6806 00b0 39D1     		bne	.L421
3538:./Libraries/FatFs/Src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6807              		.loc 1 3538 11
 6808 00b2 FB68     		ldr	r3, [r7, #12]
 6809 00b4 9B69     		ldr	r3, [r3, #24]
 6810              		.loc 1 3538 8
 6811 00b6 002B     		cmp	r3, #0
 6812 00b8 03D1     		bne	.L422
3539:./Libraries/FatFs/Src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 6813              		.loc 1 3539 11
 6814 00ba FB68     		ldr	r3, [r7, #12]
 6815 00bc 9B68     		ldr	r3, [r3, #8]
 6816 00be 3B63     		str	r3, [r7, #48]
 6817 00c0 13E0     		b	.L423
 6818              	.L422:
3540:./Libraries/FatFs/Src/ff.c **** 				} else {						/* Middle or end of the file */
3541:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
3542:./Libraries/FatFs/Src/ff.c **** 					if (fp->cltbl) {
 6819              		.loc 1 3542 12
 6820 00c2 FB68     		ldr	r3, [r7, #12]
 6821 00c4 DB6A     		ldr	r3, [r3, #44]
 6822              		.loc 1 3542 9
 6823 00c6 002B     		cmp	r3, #0
 6824 00c8 07D0     		beq	.L424
3543:./Libraries/FatFs/Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6825              		.loc 1 3543 14
 6826 00ca FB68     		ldr	r3, [r7, #12]
 6827 00cc 9B69     		ldr	r3, [r3, #24]
 6828 00ce 1946     		mov	r1, r3
 6829 00d0 F868     		ldr	r0, [r7, #12]
 6830 00d2 FFF7FEFF 		bl	clmt_clust
 6831 00d6 3863     		str	r0, [r7, #48]
 6832 00d8 07E0     		b	.L423
 6833              	.L424:
3544:./Libraries/FatFs/Src/ff.c **** 					} else
3545:./Libraries/FatFs/Src/ff.c **** #endif
3546:./Libraries/FatFs/Src/ff.c **** 					{
3547:./Libraries/FatFs/Src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 6834              		.loc 1 3547 14
 6835 00da FA68     		ldr	r2, [r7, #12]
 6836 00dc FB68     		ldr	r3, [r7, #12]
 6837 00de DB69     		ldr	r3, [r3, #28]
 6838 00e0 1946     		mov	r1, r3
 6839 00e2 1046     		mov	r0, r2
ARM GAS  /tmp/cceCRWeb.s 			page 183


 6840 00e4 FFF7FEFF 		bl	get_fat
 6841 00e8 3863     		str	r0, [r7, #48]
 6842              	.L423:
3548:./Libraries/FatFs/Src/ff.c **** 					}
3549:./Libraries/FatFs/Src/ff.c **** 				}
3550:./Libraries/FatFs/Src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 6843              		.loc 1 3550 8
 6844 00ea 3B6B     		ldr	r3, [r7, #48]
 6845 00ec 012B     		cmp	r3, #1
 6846 00ee 09D8     		bhi	.L425
 6847              		.loc 1 3550 19 discriminator 1
 6848 00f0 FB68     		ldr	r3, [r7, #12]
 6849 00f2 0222     		movs	r2, #2
 6850 00f4 5A75     		strb	r2, [r3, #21]
 6851 00f6 7B69     		ldr	r3, [r7, #20]
 6852 00f8 0221     		movs	r1, #2
 6853 00fa 1846     		mov	r0, r3
 6854 00fc FFF7FEFF 		bl	unlock_fs
 6855 0100 0223     		movs	r3, #2
 6856 0102 E7E0     		b	.L438
 6857              	.L425:
3551:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6858              		.loc 1 3551 8
 6859 0104 3B6B     		ldr	r3, [r7, #48]
 6860 0106 B3F1FF3F 		cmp	r3, #-1
 6861 010a 09D1     		bne	.L426
 6862              		.loc 1 3551 29 discriminator 1
 6863 010c FB68     		ldr	r3, [r7, #12]
 6864 010e 0122     		movs	r2, #1
 6865 0110 5A75     		strb	r2, [r3, #21]
 6866 0112 7B69     		ldr	r3, [r7, #20]
 6867 0114 0121     		movs	r1, #1
 6868 0116 1846     		mov	r0, r3
 6869 0118 FFF7FEFF 		bl	unlock_fs
 6870 011c 0123     		movs	r3, #1
 6871 011e D9E0     		b	.L438
 6872              	.L426:
3552:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6873              		.loc 1 3552 15
 6874 0120 FB68     		ldr	r3, [r7, #12]
 6875 0122 3A6B     		ldr	r2, [r7, #48]
 6876 0124 DA61     		str	r2, [r3, #28]
 6877              	.L421:
3553:./Libraries/FatFs/Src/ff.c **** 			}
3554:./Libraries/FatFs/Src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 6878              		.loc 1 3554 11
 6879 0126 7A69     		ldr	r2, [r7, #20]
 6880 0128 FB68     		ldr	r3, [r7, #12]
 6881 012a DB69     		ldr	r3, [r3, #28]
 6882 012c 1946     		mov	r1, r3
 6883 012e 1046     		mov	r0, r2
 6884 0130 FFF7FEFF 		bl	clust2sect
 6885 0134 B861     		str	r0, [r7, #24]
3555:./Libraries/FatFs/Src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 6886              		.loc 1 3555 7
 6887 0136 BB69     		ldr	r3, [r7, #24]
 6888 0138 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 184


 6889 013a 09D1     		bne	.L427
 6890              		.loc 1 3555 15 discriminator 1
 6891 013c FB68     		ldr	r3, [r7, #12]
 6892 013e 0222     		movs	r2, #2
 6893 0140 5A75     		strb	r2, [r3, #21]
 6894 0142 7B69     		ldr	r3, [r7, #20]
 6895 0144 0221     		movs	r1, #2
 6896 0146 1846     		mov	r0, r3
 6897 0148 FFF7FEFF 		bl	unlock_fs
 6898 014c 0223     		movs	r3, #2
 6899 014e C1E0     		b	.L438
 6900              	.L427:
3556:./Libraries/FatFs/Src/ff.c **** 			sect += csect;
 6901              		.loc 1 3556 9
 6902 0150 BA69     		ldr	r2, [r7, #24]
 6903 0152 FB69     		ldr	r3, [r7, #28]
 6904 0154 1344     		add	r3, r3, r2
 6905 0156 BB61     		str	r3, [r7, #24]
3557:./Libraries/FatFs/Src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 6906              		.loc 1 3557 7
 6907 0158 7B68     		ldr	r3, [r7, #4]
 6908 015a 5B0A     		lsrs	r3, r3, #9
 6909 015c BB62     		str	r3, [r7, #40]
3558:./Libraries/FatFs/Src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6910              		.loc 1 3558 7
 6911 015e BB6A     		ldr	r3, [r7, #40]
 6912 0160 002B     		cmp	r3, #0
 6913 0162 3ED0     		beq	.L428
3559:./Libraries/FatFs/Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6914              		.loc 1 3559 15
 6915 0164 FA69     		ldr	r2, [r7, #28]
 6916 0166 BB6A     		ldr	r3, [r7, #40]
 6917 0168 1344     		add	r3, r3, r2
 6918              		.loc 1 3559 24
 6919 016a 7A69     		ldr	r2, [r7, #20]
 6920 016c 5289     		ldrh	r2, [r2, #10]
 6921              		.loc 1 3559 8
 6922 016e 9342     		cmp	r3, r2
 6923 0170 05D9     		bls	.L429
3560:./Libraries/FatFs/Src/ff.c **** 					cc = fs->csize - csect;
 6924              		.loc 1 3560 13
 6925 0172 7B69     		ldr	r3, [r7, #20]
 6926 0174 5B89     		ldrh	r3, [r3, #10]
 6927 0176 1A46     		mov	r2, r3
 6928              		.loc 1 3560 9
 6929 0178 FB69     		ldr	r3, [r7, #28]
 6930 017a D31A     		subs	r3, r2, r3
 6931 017c BB62     		str	r3, [r7, #40]
 6932              	.L429:
3561:./Libraries/FatFs/Src/ff.c **** 				}
3562:./Libraries/FatFs/Src/ff.c **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6933              		.loc 1 3562 21
 6934 017e 7B69     		ldr	r3, [r7, #20]
 6935              		.loc 1 3562 9
 6936 0180 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 6937 0182 BB6A     		ldr	r3, [r7, #40]
 6938 0184 BA69     		ldr	r2, [r7, #24]
ARM GAS  /tmp/cceCRWeb.s 			page 185


 6939 0186 796A     		ldr	r1, [r7, #36]
 6940 0188 FFF7FEFF 		bl	disk_read
 6941 018c 0346     		mov	r3, r0
 6942              		.loc 1 3562 8
 6943 018e 002B     		cmp	r3, #0
 6944 0190 09D0     		beq	.L430
 6945              		.loc 1 3562 56 discriminator 1
 6946 0192 FB68     		ldr	r3, [r7, #12]
 6947 0194 0122     		movs	r2, #1
 6948 0196 5A75     		strb	r2, [r3, #21]
 6949 0198 7B69     		ldr	r3, [r7, #20]
 6950 019a 0121     		movs	r1, #1
 6951 019c 1846     		mov	r0, r3
 6952 019e FFF7FEFF 		bl	unlock_fs
 6953 01a2 0123     		movs	r3, #1
 6954 01a4 96E0     		b	.L438
 6955              	.L430:
3563:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3564:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3565:./Libraries/FatFs/Src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3566:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3567:./Libraries/FatFs/Src/ff.c **** 				}
3568:./Libraries/FatFs/Src/ff.c **** #else
3569:./Libraries/FatFs/Src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 6956              		.loc 1 3569 12
 6957 01a6 FB68     		ldr	r3, [r7, #12]
 6958 01a8 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 6959              		.loc 1 3569 9
 6960 01aa 5BB2     		sxtb	r3, r3
 6961              		.loc 1 3569 8
 6962 01ac 002B     		cmp	r3, #0
 6963 01ae 14DA     		bge	.L431
 6964              		.loc 1 3569 36 discriminator 1
 6965 01b0 FB68     		ldr	r3, [r7, #12]
 6966 01b2 1A6A     		ldr	r2, [r3, #32]
 6967              		.loc 1 3569 43 discriminator 1
 6968 01b4 BB69     		ldr	r3, [r7, #24]
 6969 01b6 D31A     		subs	r3, r2, r3
 6970              		.loc 1 3569 31 discriminator 1
 6971 01b8 BA6A     		ldr	r2, [r7, #40]
 6972 01ba 9A42     		cmp	r2, r3
 6973 01bc 0DD9     		bls	.L431
3570:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 6974              		.loc 1 3570 26
 6975 01be FB68     		ldr	r3, [r7, #12]
 6976 01c0 1A6A     		ldr	r2, [r3, #32]
 6977              		.loc 1 3570 33
 6978 01c2 BB69     		ldr	r3, [r7, #24]
 6979 01c4 D31A     		subs	r3, r2, r3
 6980              		.loc 1 3570 41
 6981 01c6 5B02     		lsls	r3, r3, #9
 6982              		.loc 1 3570 20
 6983 01c8 7A6A     		ldr	r2, [r7, #36]
 6984 01ca D018     		adds	r0, r2, r3
 6985              		.loc 1 3570 54
 6986 01cc FB68     		ldr	r3, [r7, #12]
 6987 01ce 3033     		adds	r3, r3, #48
ARM GAS  /tmp/cceCRWeb.s 			page 186


 6988              		.loc 1 3570 6
 6989 01d0 4FF40072 		mov	r2, #512
 6990 01d4 1946     		mov	r1, r3
 6991 01d6 FFF7FEFF 		bl	mem_cpy
 6992              	.L431:
3571:./Libraries/FatFs/Src/ff.c **** 				}
3572:./Libraries/FatFs/Src/ff.c **** #endif
3573:./Libraries/FatFs/Src/ff.c **** #endif
3574:./Libraries/FatFs/Src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 6993              		.loc 1 3574 10
 6994 01da BB6A     		ldr	r3, [r7, #40]
 6995 01dc 5B02     		lsls	r3, r3, #9
 6996 01de FB62     		str	r3, [r7, #44]
3575:./Libraries/FatFs/Src/ff.c **** 				continue;
 6997              		.loc 1 3575 5
 6998 01e0 5AE0     		b	.L432
 6999              	.L428:
3576:./Libraries/FatFs/Src/ff.c **** 			}
3577:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
3578:./Libraries/FatFs/Src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 7000              		.loc 1 3578 10
 7001 01e2 FB68     		ldr	r3, [r7, #12]
 7002 01e4 1B6A     		ldr	r3, [r3, #32]
 7003              		.loc 1 3578 7
 7004 01e6 BA69     		ldr	r2, [r7, #24]
 7005 01e8 9A42     		cmp	r2, r3
 7006 01ea 38D0     		beq	.L433
3579:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3580:./Libraries/FatFs/Src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 7007              		.loc 1 3580 11
 7008 01ec FB68     		ldr	r3, [r7, #12]
 7009 01ee 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7010              		.loc 1 3580 9
 7011 01f0 5BB2     		sxtb	r3, r3
 7012              		.loc 1 3580 8
 7013 01f2 002B     		cmp	r3, #0
 7014 01f4 1DDA     		bge	.L434
3581:./Libraries/FatFs/Src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7015              		.loc 1 3581 23
 7016 01f6 7B69     		ldr	r3, [r7, #20]
 7017              		.loc 1 3581 10
 7018 01f8 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7019              		.loc 1 3581 32
 7020 01fa FB68     		ldr	r3, [r7, #12]
 7021 01fc 03F13001 		add	r1, r3, #48
 7022              		.loc 1 3581 10
 7023 0200 FB68     		ldr	r3, [r7, #12]
 7024 0202 1A6A     		ldr	r2, [r3, #32]
 7025 0204 0123     		movs	r3, #1
 7026 0206 FFF7FEFF 		bl	disk_write
 7027 020a 0346     		mov	r3, r0
 7028              		.loc 1 3581 9
 7029 020c 002B     		cmp	r3, #0
 7030 020e 09D0     		beq	.L435
 7031              		.loc 1 3581 63 discriminator 1
 7032 0210 FB68     		ldr	r3, [r7, #12]
 7033 0212 0122     		movs	r2, #1
ARM GAS  /tmp/cceCRWeb.s 			page 187


 7034 0214 5A75     		strb	r2, [r3, #21]
 7035 0216 7B69     		ldr	r3, [r7, #20]
 7036 0218 0121     		movs	r1, #1
 7037 021a 1846     		mov	r0, r3
 7038 021c FFF7FEFF 		bl	unlock_fs
 7039 0220 0123     		movs	r3, #1
 7040 0222 57E0     		b	.L438
 7041              	.L435:
3582:./Libraries/FatFs/Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7042              		.loc 1 3582 15
 7043 0224 FB68     		ldr	r3, [r7, #12]
 7044 0226 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7045 0228 03F07F03 		and	r3, r3, #127
 7046 022c DAB2     		uxtb	r2, r3
 7047 022e FB68     		ldr	r3, [r7, #12]
 7048 0230 1A75     		strb	r2, [r3, #20]
 7049              	.L434:
3583:./Libraries/FatFs/Src/ff.c **** 				}
3584:./Libraries/FatFs/Src/ff.c **** #endif
3585:./Libraries/FatFs/Src/ff.c **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
 7050              		.loc 1 3585 21
 7051 0232 7B69     		ldr	r3, [r7, #20]
 7052              		.loc 1 3585 9
 7053 0234 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7054              		.loc 1 3585 30
 7055 0236 FB68     		ldr	r3, [r7, #12]
 7056 0238 03F13001 		add	r1, r3, #48
 7057              		.loc 1 3585 9
 7058 023c 0123     		movs	r3, #1
 7059 023e BA69     		ldr	r2, [r7, #24]
 7060 0240 FFF7FEFF 		bl	disk_read
 7061 0244 0346     		mov	r3, r0
 7062              		.loc 1 3585 8
 7063 0246 002B     		cmp	r3, #0
 7064 0248 09D0     		beq	.L433
 7065              		.loc 1 3585 57 discriminator 1
 7066 024a FB68     		ldr	r3, [r7, #12]
 7067 024c 0122     		movs	r2, #1
 7068 024e 5A75     		strb	r2, [r3, #21]
 7069 0250 7B69     		ldr	r3, [r7, #20]
 7070 0252 0121     		movs	r1, #1
 7071 0254 1846     		mov	r0, r3
 7072 0256 FFF7FEFF 		bl	unlock_fs
 7073 025a 0123     		movs	r3, #1
 7074 025c 3AE0     		b	.L438
 7075              	.L433:
3586:./Libraries/FatFs/Src/ff.c **** 			}
3587:./Libraries/FatFs/Src/ff.c **** #endif
3588:./Libraries/FatFs/Src/ff.c **** 			fp->sect = sect;
 7076              		.loc 1 3588 13
 7077 025e FB68     		ldr	r3, [r7, #12]
 7078 0260 BA69     		ldr	r2, [r7, #24]
 7079 0262 1A62     		str	r2, [r3, #32]
 7080              	.L420:
3589:./Libraries/FatFs/Src/ff.c **** 		}
3590:./Libraries/FatFs/Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 7081              		.loc 1 3590 27
ARM GAS  /tmp/cceCRWeb.s 			page 188


 7082 0264 FB68     		ldr	r3, [r7, #12]
 7083 0266 9B69     		ldr	r3, [r3, #24]
 7084              		.loc 1 3590 34
 7085 0268 C3F30803 		ubfx	r3, r3, #0, #9
 7086              		.loc 1 3590 8
 7087 026c C3F50073 		rsb	r3, r3, #512
 7088 0270 FB62     		str	r3, [r7, #44]
3591:./Libraries/FatFs/Src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 7089              		.loc 1 3591 6
 7090 0272 FA6A     		ldr	r2, [r7, #44]
 7091 0274 7B68     		ldr	r3, [r7, #4]
 7092 0276 9A42     		cmp	r2, r3
 7093 0278 01D9     		bls	.L436
 7094              		.loc 1 3591 24 discriminator 1
 7095 027a 7B68     		ldr	r3, [r7, #4]
 7096 027c FB62     		str	r3, [r7, #44]
 7097              	.L436:
3592:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3593:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3594:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3595:./Libraries/FatFs/Src/ff.c **** #else
3596:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 7098              		.loc 1 3596 18
 7099 027e FB68     		ldr	r3, [r7, #12]
 7100 0280 03F13002 		add	r2, r3, #48
 7101              		.loc 1 3596 30
 7102 0284 FB68     		ldr	r3, [r7, #12]
 7103 0286 9B69     		ldr	r3, [r3, #24]
 7104              		.loc 1 3596 37
 7105 0288 C3F30803 		ubfx	r3, r3, #0, #9
 7106              		.loc 1 3596 3
 7107 028c 1344     		add	r3, r3, r2
 7108 028e FA6A     		ldr	r2, [r7, #44]
 7109 0290 1946     		mov	r1, r3
 7110 0292 786A     		ldr	r0, [r7, #36]
 7111 0294 FFF7FEFF 		bl	mem_cpy
 7112              	.L432:
3534:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7113              		.loc 1 3534 9
 7114 0298 7A6A     		ldr	r2, [r7, #36]
 7115 029a FB6A     		ldr	r3, [r7, #44]
 7116 029c 1344     		add	r3, r3, r2
 7117 029e 7B62     		str	r3, [r7, #36]
3534:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7118              		.loc 1 3534 27
 7119 02a0 FB68     		ldr	r3, [r7, #12]
 7120 02a2 9A69     		ldr	r2, [r3, #24]
 7121 02a4 FB6A     		ldr	r3, [r7, #44]
 7122 02a6 1A44     		add	r2, r2, r3
 7123 02a8 FB68     		ldr	r3, [r7, #12]
 7124 02aa 9A61     		str	r2, [r3, #24]
3534:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7125              		.loc 1 3534 40
 7126 02ac 3B68     		ldr	r3, [r7]
 7127 02ae 1A68     		ldr	r2, [r3]
 7128 02b0 FB6A     		ldr	r3, [r7, #44]
 7129 02b2 1A44     		add	r2, r2, r3
ARM GAS  /tmp/cceCRWeb.s 			page 189


 7130 02b4 3B68     		ldr	r3, [r7]
 7131 02b6 1A60     		str	r2, [r3]
3534:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7132              		.loc 1 3534 53
 7133 02b8 7A68     		ldr	r2, [r7, #4]
 7134 02ba FB6A     		ldr	r3, [r7, #44]
 7135 02bc D31A     		subs	r3, r2, r3
 7136 02be 7B60     		str	r3, [r7, #4]
 7137              	.L419:
3533:./Libraries/FatFs/Src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 7138              		.loc 1 3533 2
 7139 02c0 7B68     		ldr	r3, [r7, #4]
 7140 02c2 002B     		cmp	r3, #0
 7141 02c4 7FF4E3AE 		bne	.L437
3597:./Libraries/FatFs/Src/ff.c **** #endif
3598:./Libraries/FatFs/Src/ff.c **** 	}
3599:./Libraries/FatFs/Src/ff.c **** 
3600:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 7142              		.loc 1 3600 2
 7143 02c8 7B69     		ldr	r3, [r7, #20]
 7144 02ca 0021     		movs	r1, #0
 7145 02cc 1846     		mov	r0, r3
 7146 02ce FFF7FEFF 		bl	unlock_fs
 7147 02d2 0023     		movs	r3, #0
 7148              	.L438:
3601:./Libraries/FatFs/Src/ff.c **** }
 7149              		.loc 1 3601 1 discriminator 1
 7150 02d4 1846     		mov	r0, r3
 7151 02d6 3837     		adds	r7, r7, #56
 7152              	.LCFI229:
 7153              		.cfi_def_cfa_offset 8
 7154 02d8 BD46     		mov	sp, r7
 7155              	.LCFI230:
 7156              		.cfi_def_cfa_register 13
 7157              		@ sp needed
 7158 02da 80BD     		pop	{r7, pc}
 7159              		.cfi_endproc
 7160              	.LFE377:
 7162              		.section	.text.f_write,"ax",%progbits
 7163              		.align	1
 7164              		.global	f_write
 7165              		.syntax unified
 7166              		.thumb
 7167              		.thumb_func
 7168              		.fpu fpv5-d16
 7170              	f_write:
 7171              	.LFB378:
3602:./Libraries/FatFs/Src/ff.c **** 
3603:./Libraries/FatFs/Src/ff.c **** 
3604:./Libraries/FatFs/Src/ff.c **** 
3605:./Libraries/FatFs/Src/ff.c **** 
3606:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3607:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3608:./Libraries/FatFs/Src/ff.c **** /* Write File                                                            */
3609:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3610:./Libraries/FatFs/Src/ff.c **** 
3611:./Libraries/FatFs/Src/ff.c **** FRESULT f_write (
ARM GAS  /tmp/cceCRWeb.s 			page 190


3612:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3613:./Libraries/FatFs/Src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3614:./Libraries/FatFs/Src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3615:./Libraries/FatFs/Src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3616:./Libraries/FatFs/Src/ff.c **** )
3617:./Libraries/FatFs/Src/ff.c **** {
 7172              		.loc 1 3617 1
 7173              		.cfi_startproc
 7174              		@ args = 0, pretend = 0, frame = 48
 7175              		@ frame_needed = 1, uses_anonymous_args = 0
 7176 0000 80B5     		push	{r7, lr}
 7177              	.LCFI231:
 7178              		.cfi_def_cfa_offset 8
 7179              		.cfi_offset 7, -8
 7180              		.cfi_offset 14, -4
 7181 0002 8CB0     		sub	sp, sp, #48
 7182              	.LCFI232:
 7183              		.cfi_def_cfa_offset 56
 7184 0004 00AF     		add	r7, sp, #0
 7185              	.LCFI233:
 7186              		.cfi_def_cfa_register 7
 7187 0006 F860     		str	r0, [r7, #12]
 7188 0008 B960     		str	r1, [r7, #8]
 7189 000a 7A60     		str	r2, [r7, #4]
 7190 000c 3B60     		str	r3, [r7]
3618:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3619:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3620:./Libraries/FatFs/Src/ff.c **** 	DWORD clst, sect;
3621:./Libraries/FatFs/Src/ff.c **** 	UINT wcnt, cc, csect;
3622:./Libraries/FatFs/Src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 7191              		.loc 1 3622 14
 7192 000e BB68     		ldr	r3, [r7, #8]
 7193 0010 FB61     		str	r3, [r7, #28]
3623:./Libraries/FatFs/Src/ff.c **** 
3624:./Libraries/FatFs/Src/ff.c **** 
3625:./Libraries/FatFs/Src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 7194              		.loc 1 3625 6
 7195 0012 3B68     		ldr	r3, [r7]
 7196 0014 0022     		movs	r2, #0
 7197 0016 1A60     		str	r2, [r3]
3626:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 7198              		.loc 1 3626 8
 7199 0018 FB68     		ldr	r3, [r7, #12]
 7200 001a 07F11002 		add	r2, r7, #16
 7201 001e 1146     		mov	r1, r2
 7202 0020 1846     		mov	r0, r3
 7203 0022 FFF7FEFF 		bl	validate
 7204 0026 0346     		mov	r3, r0
 7205 0028 87F82F30 		strb	r3, [r7, #47]
3627:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 7206              		.loc 1 3627 5
 7207 002c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7208 0030 002B     		cmp	r3, #0
 7209 0032 07D1     		bne	.L440
 7210              		.loc 1 3627 27 discriminator 2
 7211 0034 FB68     		ldr	r3, [r7, #12]
 7212 0036 5B7D     		ldrb	r3, [r3, #21]
ARM GAS  /tmp/cceCRWeb.s 			page 191


 7213 0038 87F82F30 		strb	r3, [r7, #47]
 7214              		.loc 1 3627 19 discriminator 2
 7215 003c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7216 0040 002B     		cmp	r3, #0
 7217 0042 09D0     		beq	.L441
 7218              	.L440:
 7219              		.loc 1 3627 57 discriminator 3
 7220 0044 3B69     		ldr	r3, [r7, #16]
 7221 0046 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 7222 004a 1146     		mov	r1, r2
 7223 004c 1846     		mov	r0, r3
 7224 004e FFF7FEFF 		bl	unlock_fs
 7225 0052 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7226 0056 73E1     		b	.L466
 7227              	.L441:
3628:./Libraries/FatFs/Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7228              		.loc 1 3628 10
 7229 0058 FB68     		ldr	r3, [r7, #12]
 7230 005a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7231              		.loc 1 3628 17
 7232 005c 03F00203 		and	r3, r3, #2
 7233              		.loc 1 3628 5
 7234 0060 002B     		cmp	r3, #0
 7235 0062 06D1     		bne	.L443
 7236              		.loc 1 3628 30 discriminator 1
 7237 0064 3B69     		ldr	r3, [r7, #16]
 7238 0066 0721     		movs	r1, #7
 7239 0068 1846     		mov	r0, r3
 7240 006a FFF7FEFF 		bl	unlock_fs
 7241 006e 0723     		movs	r3, #7
 7242 0070 66E1     		b	.L466
 7243              	.L443:
3629:./Libraries/FatFs/Src/ff.c **** 
3630:./Libraries/FatFs/Src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3631:./Libraries/FatFs/Src/ff.c **** 	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 7244              		.loc 1 3631 59
 7245 0072 FB68     		ldr	r3, [r7, #12]
 7246 0074 9A69     		ldr	r2, [r3, #24]
 7247              		.loc 1 3631 49
 7248 0076 7B68     		ldr	r3, [r7, #4]
 7249 0078 1A44     		add	r2, r2, r3
 7250              		.loc 1 3631 84
 7251 007a FB68     		ldr	r3, [r7, #12]
 7252 007c 9B69     		ldr	r3, [r3, #24]
 7253              		.loc 1 3631 5
 7254 007e 9A42     		cmp	r2, r3
 7255 0080 80F04B81 		bcs	.L445
3632:./Libraries/FatFs/Src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 7256              		.loc 1 3632 38
 7257 0084 FB68     		ldr	r3, [r7, #12]
 7258 0086 9B69     		ldr	r3, [r3, #24]
 7259              		.loc 1 3632 7
 7260 0088 DB43     		mvns	r3, r3
 7261 008a 7B60     		str	r3, [r7, #4]
3633:./Libraries/FatFs/Src/ff.c **** 	}
3634:./Libraries/FatFs/Src/ff.c **** 
3635:./Libraries/FatFs/Src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
ARM GAS  /tmp/cceCRWeb.s 			page 192


 7262              		.loc 1 3635 2
 7263 008c 45E1     		b	.L445
 7264              	.L465:
3636:./Libraries/FatFs/Src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3637:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7265              		.loc 1 3637 9
 7266 008e FB68     		ldr	r3, [r7, #12]
 7267 0090 9B69     		ldr	r3, [r3, #24]
 7268              		.loc 1 3637 16
 7269 0092 C3F30803 		ubfx	r3, r3, #0, #9
 7270              		.loc 1 3637 6
 7271 0096 002B     		cmp	r3, #0
 7272 0098 40F00181 		bne	.L446
3638:./Libraries/FatFs/Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 7273              		.loc 1 3638 21
 7274 009c FB68     		ldr	r3, [r7, #12]
 7275 009e 9B69     		ldr	r3, [r3, #24]
 7276              		.loc 1 3638 28
 7277 00a0 5B0A     		lsrs	r3, r3, #9
 7278              		.loc 1 3638 43
 7279 00a2 3A69     		ldr	r2, [r7, #16]
 7280 00a4 5289     		ldrh	r2, [r2, #10]
 7281              		.loc 1 3638 51
 7282 00a6 013A     		subs	r2, r2, #1
 7283              		.loc 1 3638 10
 7284 00a8 1340     		ands	r3, r3, r2
 7285 00aa BB61     		str	r3, [r7, #24]
3639:./Libraries/FatFs/Src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 7286              		.loc 1 3639 7
 7287 00ac BB69     		ldr	r3, [r7, #24]
 7288 00ae 002B     		cmp	r3, #0
 7289 00b0 4DD1     		bne	.L447
3640:./Libraries/FatFs/Src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 7290              		.loc 1 3640 11
 7291 00b2 FB68     		ldr	r3, [r7, #12]
 7292 00b4 9B69     		ldr	r3, [r3, #24]
 7293              		.loc 1 3640 8
 7294 00b6 002B     		cmp	r3, #0
 7295 00b8 0CD1     		bne	.L448
3641:./Libraries/FatFs/Src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 7296              		.loc 1 3641 11
 7297 00ba FB68     		ldr	r3, [r7, #12]
 7298 00bc 9B68     		ldr	r3, [r3, #8]
 7299 00be BB62     		str	r3, [r7, #40]
3642:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 7300              		.loc 1 3642 9
 7301 00c0 BB6A     		ldr	r3, [r7, #40]
 7302 00c2 002B     		cmp	r3, #0
 7303 00c4 1AD1     		bne	.L449
3643:./Libraries/FatFs/Src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 7304              		.loc 1 3643 14
 7305 00c6 FB68     		ldr	r3, [r7, #12]
 7306 00c8 0021     		movs	r1, #0
 7307 00ca 1846     		mov	r0, r3
 7308 00cc FFF7FEFF 		bl	create_chain
 7309 00d0 B862     		str	r0, [r7, #40]
 7310 00d2 13E0     		b	.L449
ARM GAS  /tmp/cceCRWeb.s 			page 193


 7311              	.L448:
3644:./Libraries/FatFs/Src/ff.c **** 					}
3645:./Libraries/FatFs/Src/ff.c **** 				} else {					/* On the middle or end of the file */
3646:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
3647:./Libraries/FatFs/Src/ff.c **** 					if (fp->cltbl) {
 7312              		.loc 1 3647 12
 7313 00d4 FB68     		ldr	r3, [r7, #12]
 7314 00d6 DB6A     		ldr	r3, [r3, #44]
 7315              		.loc 1 3647 9
 7316 00d8 002B     		cmp	r3, #0
 7317 00da 07D0     		beq	.L450
3648:./Libraries/FatFs/Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 7318              		.loc 1 3648 14
 7319 00dc FB68     		ldr	r3, [r7, #12]
 7320 00de 9B69     		ldr	r3, [r3, #24]
 7321 00e0 1946     		mov	r1, r3
 7322 00e2 F868     		ldr	r0, [r7, #12]
 7323 00e4 FFF7FEFF 		bl	clmt_clust
 7324 00e8 B862     		str	r0, [r7, #40]
 7325 00ea 07E0     		b	.L449
 7326              	.L450:
3649:./Libraries/FatFs/Src/ff.c **** 					} else
3650:./Libraries/FatFs/Src/ff.c **** #endif
3651:./Libraries/FatFs/Src/ff.c **** 					{
3652:./Libraries/FatFs/Src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 7327              		.loc 1 3652 14
 7328 00ec FA68     		ldr	r2, [r7, #12]
 7329 00ee FB68     		ldr	r3, [r7, #12]
 7330 00f0 DB69     		ldr	r3, [r3, #28]
 7331 00f2 1946     		mov	r1, r3
 7332 00f4 1046     		mov	r0, r2
 7333 00f6 FFF7FEFF 		bl	create_chain
 7334 00fa B862     		str	r0, [r7, #40]
 7335              	.L449:
3653:./Libraries/FatFs/Src/ff.c **** 					}
3654:./Libraries/FatFs/Src/ff.c **** 				}
3655:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 7336              		.loc 1 3655 8
 7337 00fc BB6A     		ldr	r3, [r7, #40]
 7338 00fe 002B     		cmp	r3, #0
 7339 0100 00F01081 		beq	.L467
3656:./Libraries/FatFs/Src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 7340              		.loc 1 3656 8
 7341 0104 BB6A     		ldr	r3, [r7, #40]
 7342 0106 012B     		cmp	r3, #1
 7343 0108 09D1     		bne	.L453
 7344              		.loc 1 3656 20 discriminator 1
 7345 010a FB68     		ldr	r3, [r7, #12]
 7346 010c 0222     		movs	r2, #2
 7347 010e 5A75     		strb	r2, [r3, #21]
 7348 0110 3B69     		ldr	r3, [r7, #16]
 7349 0112 0221     		movs	r1, #2
 7350 0114 1846     		mov	r0, r3
 7351 0116 FFF7FEFF 		bl	unlock_fs
 7352 011a 0223     		movs	r3, #2
 7353 011c 10E1     		b	.L466
 7354              	.L453:
ARM GAS  /tmp/cceCRWeb.s 			page 194


3657:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7355              		.loc 1 3657 8
 7356 011e BB6A     		ldr	r3, [r7, #40]
 7357 0120 B3F1FF3F 		cmp	r3, #-1
 7358 0124 09D1     		bne	.L454
 7359              		.loc 1 3657 29 discriminator 1
 7360 0126 FB68     		ldr	r3, [r7, #12]
 7361 0128 0122     		movs	r2, #1
 7362 012a 5A75     		strb	r2, [r3, #21]
 7363 012c 3B69     		ldr	r3, [r7, #16]
 7364 012e 0121     		movs	r1, #1
 7365 0130 1846     		mov	r0, r3
 7366 0132 FFF7FEFF 		bl	unlock_fs
 7367 0136 0123     		movs	r3, #1
 7368 0138 02E1     		b	.L466
 7369              	.L454:
3658:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 7370              		.loc 1 3658 15
 7371 013a FB68     		ldr	r3, [r7, #12]
 7372 013c BA6A     		ldr	r2, [r7, #40]
 7373 013e DA61     		str	r2, [r3, #28]
3659:./Libraries/FatFs/Src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 7374              		.loc 1 3659 16
 7375 0140 FB68     		ldr	r3, [r7, #12]
 7376 0142 9B68     		ldr	r3, [r3, #8]
 7377              		.loc 1 3659 8
 7378 0144 002B     		cmp	r3, #0
 7379 0146 02D1     		bne	.L447
 7380              		.loc 1 3659 45 discriminator 1
 7381 0148 FB68     		ldr	r3, [r7, #12]
 7382 014a BA6A     		ldr	r2, [r7, #40]
 7383 014c 9A60     		str	r2, [r3, #8]
 7384              	.L447:
3660:./Libraries/FatFs/Src/ff.c **** 			}
3661:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3662:./Libraries/FatFs/Src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3663:./Libraries/FatFs/Src/ff.c **** #else
3664:./Libraries/FatFs/Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 7385              		.loc 1 3664 10
 7386 014e FB68     		ldr	r3, [r7, #12]
 7387 0150 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7388              		.loc 1 3664 8
 7389 0152 5BB2     		sxtb	r3, r3
 7390              		.loc 1 3664 7
 7391 0154 002B     		cmp	r3, #0
 7392 0156 1DDA     		bge	.L455
3665:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7393              		.loc 1 3665 22
 7394 0158 3B69     		ldr	r3, [r7, #16]
 7395              		.loc 1 3665 9
 7396 015a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7397              		.loc 1 3665 31
 7398 015c FB68     		ldr	r3, [r7, #12]
 7399 015e 03F13001 		add	r1, r3, #48
 7400              		.loc 1 3665 9
 7401 0162 FB68     		ldr	r3, [r7, #12]
 7402 0164 1A6A     		ldr	r2, [r3, #32]
ARM GAS  /tmp/cceCRWeb.s 			page 195


 7403 0166 0123     		movs	r3, #1
 7404 0168 FFF7FEFF 		bl	disk_write
 7405 016c 0346     		mov	r3, r0
 7406              		.loc 1 3665 8
 7407 016e 002B     		cmp	r3, #0
 7408 0170 09D0     		beq	.L456
 7409              		.loc 1 3665 62 discriminator 1
 7410 0172 FB68     		ldr	r3, [r7, #12]
 7411 0174 0122     		movs	r2, #1
 7412 0176 5A75     		strb	r2, [r3, #21]
 7413 0178 3B69     		ldr	r3, [r7, #16]
 7414 017a 0121     		movs	r1, #1
 7415 017c 1846     		mov	r0, r3
 7416 017e FFF7FEFF 		bl	unlock_fs
 7417 0182 0123     		movs	r3, #1
 7418 0184 DCE0     		b	.L466
 7419              	.L456:
3666:./Libraries/FatFs/Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7420              		.loc 1 3666 14
 7421 0186 FB68     		ldr	r3, [r7, #12]
 7422 0188 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7423 018a 03F07F03 		and	r3, r3, #127
 7424 018e DAB2     		uxtb	r2, r3
 7425 0190 FB68     		ldr	r3, [r7, #12]
 7426 0192 1A75     		strb	r2, [r3, #20]
 7427              	.L455:
3667:./Libraries/FatFs/Src/ff.c **** 			}
3668:./Libraries/FatFs/Src/ff.c **** #endif
3669:./Libraries/FatFs/Src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 7428              		.loc 1 3669 11
 7429 0194 3A69     		ldr	r2, [r7, #16]
 7430 0196 FB68     		ldr	r3, [r7, #12]
 7431 0198 DB69     		ldr	r3, [r3, #28]
 7432 019a 1946     		mov	r1, r3
 7433 019c 1046     		mov	r0, r2
 7434 019e FFF7FEFF 		bl	clust2sect
 7435 01a2 7861     		str	r0, [r7, #20]
3670:./Libraries/FatFs/Src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 7436              		.loc 1 3670 7
 7437 01a4 7B69     		ldr	r3, [r7, #20]
 7438 01a6 002B     		cmp	r3, #0
 7439 01a8 09D1     		bne	.L457
 7440              		.loc 1 3670 15 discriminator 1
 7441 01aa FB68     		ldr	r3, [r7, #12]
 7442 01ac 0222     		movs	r2, #2
 7443 01ae 5A75     		strb	r2, [r3, #21]
 7444 01b0 3B69     		ldr	r3, [r7, #16]
 7445 01b2 0221     		movs	r1, #2
 7446 01b4 1846     		mov	r0, r3
 7447 01b6 FFF7FEFF 		bl	unlock_fs
 7448 01ba 0223     		movs	r3, #2
 7449 01bc C0E0     		b	.L466
 7450              	.L457:
3671:./Libraries/FatFs/Src/ff.c **** 			sect += csect;
 7451              		.loc 1 3671 9
 7452 01be 7A69     		ldr	r2, [r7, #20]
 7453 01c0 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cceCRWeb.s 			page 196


 7454 01c2 1344     		add	r3, r3, r2
 7455 01c4 7B61     		str	r3, [r7, #20]
3672:./Libraries/FatFs/Src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 7456              		.loc 1 3672 7
 7457 01c6 7B68     		ldr	r3, [r7, #4]
 7458 01c8 5B0A     		lsrs	r3, r3, #9
 7459 01ca 3B62     		str	r3, [r7, #32]
3673:./Libraries/FatFs/Src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 7460              		.loc 1 3673 7
 7461 01cc 3B6A     		ldr	r3, [r7, #32]
 7462 01ce 002B     		cmp	r3, #0
 7463 01d0 41D0     		beq	.L458
3674:./Libraries/FatFs/Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7464              		.loc 1 3674 15
 7465 01d2 BA69     		ldr	r2, [r7, #24]
 7466 01d4 3B6A     		ldr	r3, [r7, #32]
 7467 01d6 1344     		add	r3, r3, r2
 7468              		.loc 1 3674 24
 7469 01d8 3A69     		ldr	r2, [r7, #16]
 7470 01da 5289     		ldrh	r2, [r2, #10]
 7471              		.loc 1 3674 8
 7472 01dc 9342     		cmp	r3, r2
 7473 01de 05D9     		bls	.L459
3675:./Libraries/FatFs/Src/ff.c **** 					cc = fs->csize - csect;
 7474              		.loc 1 3675 13
 7475 01e0 3B69     		ldr	r3, [r7, #16]
 7476 01e2 5B89     		ldrh	r3, [r3, #10]
 7477 01e4 1A46     		mov	r2, r3
 7478              		.loc 1 3675 9
 7479 01e6 BB69     		ldr	r3, [r7, #24]
 7480 01e8 D31A     		subs	r3, r2, r3
 7481 01ea 3B62     		str	r3, [r7, #32]
 7482              	.L459:
3676:./Libraries/FatFs/Src/ff.c **** 				}
3677:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7483              		.loc 1 3677 22
 7484 01ec 3B69     		ldr	r3, [r7, #16]
 7485              		.loc 1 3677 9
 7486 01ee 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7487 01f0 3B6A     		ldr	r3, [r7, #32]
 7488 01f2 7A69     		ldr	r2, [r7, #20]
 7489 01f4 F969     		ldr	r1, [r7, #28]
 7490 01f6 FFF7FEFF 		bl	disk_write
 7491 01fa 0346     		mov	r3, r0
 7492              		.loc 1 3677 8
 7493 01fc 002B     		cmp	r3, #0
 7494 01fe 09D0     		beq	.L460
 7495              		.loc 1 3677 57 discriminator 1
 7496 0200 FB68     		ldr	r3, [r7, #12]
 7497 0202 0122     		movs	r2, #1
 7498 0204 5A75     		strb	r2, [r3, #21]
 7499 0206 3B69     		ldr	r3, [r7, #16]
 7500 0208 0121     		movs	r1, #1
 7501 020a 1846     		mov	r0, r3
 7502 020c FFF7FEFF 		bl	unlock_fs
 7503 0210 0123     		movs	r3, #1
 7504 0212 95E0     		b	.L466
ARM GAS  /tmp/cceCRWeb.s 			page 197


 7505              	.L460:
3678:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 2
3679:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3680:./Libraries/FatFs/Src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3681:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3682:./Libraries/FatFs/Src/ff.c **** 					fs->wflag = 0;
3683:./Libraries/FatFs/Src/ff.c **** 				}
3684:./Libraries/FatFs/Src/ff.c **** #else
3685:./Libraries/FatFs/Src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 7506              		.loc 1 3685 11
 7507 0214 FB68     		ldr	r3, [r7, #12]
 7508 0216 1A6A     		ldr	r2, [r3, #32]
 7509              		.loc 1 3685 18
 7510 0218 7B69     		ldr	r3, [r7, #20]
 7511 021a D31A     		subs	r3, r2, r3
 7512              		.loc 1 3685 8
 7513 021c 3A6A     		ldr	r2, [r7, #32]
 7514 021e 9A42     		cmp	r2, r3
 7515 0220 15D9     		bls	.L461
3686:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 7516              		.loc 1 3686 16
 7517 0222 FB68     		ldr	r3, [r7, #12]
 7518 0224 03F13000 		add	r0, r3, #48
 7519              		.loc 1 3686 35
 7520 0228 FB68     		ldr	r3, [r7, #12]
 7521 022a 1A6A     		ldr	r2, [r3, #32]
 7522              		.loc 1 3686 42
 7523 022c 7B69     		ldr	r3, [r7, #20]
 7524 022e D31A     		subs	r3, r2, r3
 7525              		.loc 1 3686 50
 7526 0230 5B02     		lsls	r3, r3, #9
 7527              		.loc 1 3686 29
 7528 0232 FA69     		ldr	r2, [r7, #28]
 7529 0234 1344     		add	r3, r3, r2
 7530              		.loc 1 3686 6
 7531 0236 4FF40072 		mov	r2, #512
 7532 023a 1946     		mov	r1, r3
 7533 023c FFF7FEFF 		bl	mem_cpy
3687:./Libraries/FatFs/Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7534              		.loc 1 3687 15
 7535 0240 FB68     		ldr	r3, [r7, #12]
 7536 0242 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7537 0244 03F07F03 		and	r3, r3, #127
 7538 0248 DAB2     		uxtb	r2, r3
 7539 024a FB68     		ldr	r3, [r7, #12]
 7540 024c 1A75     		strb	r2, [r3, #20]
 7541              	.L461:
3688:./Libraries/FatFs/Src/ff.c **** 				}
3689:./Libraries/FatFs/Src/ff.c **** #endif
3690:./Libraries/FatFs/Src/ff.c **** #endif
3691:./Libraries/FatFs/Src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 7542              		.loc 1 3691 10
 7543 024e 3B6A     		ldr	r3, [r7, #32]
 7544 0250 5B02     		lsls	r3, r3, #9
 7545 0252 7B62     		str	r3, [r7, #36]
3692:./Libraries/FatFs/Src/ff.c **** 				continue;
 7546              		.loc 1 3692 5
ARM GAS  /tmp/cceCRWeb.s 			page 198


 7547 0254 44E0     		b	.L462
 7548              	.L458:
3693:./Libraries/FatFs/Src/ff.c **** 			}
3694:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3695:./Libraries/FatFs/Src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3696:./Libraries/FatFs/Src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3697:./Libraries/FatFs/Src/ff.c **** 				fs->winsect = sect;
3698:./Libraries/FatFs/Src/ff.c **** 			}
3699:./Libraries/FatFs/Src/ff.c **** #else
3700:./Libraries/FatFs/Src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 7549              		.loc 1 3700 10
 7550 0256 FB68     		ldr	r3, [r7, #12]
 7551 0258 1B6A     		ldr	r3, [r3, #32]
 7552              		.loc 1 3700 7
 7553 025a 7A69     		ldr	r2, [r7, #20]
 7554 025c 9A42     		cmp	r2, r3
 7555 025e 1BD0     		beq	.L463
3701:./Libraries/FatFs/Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7556              		.loc 1 3701 7 discriminator 1
 7557 0260 FB68     		ldr	r3, [r7, #12]
 7558 0262 9A69     		ldr	r2, [r3, #24]
 7559              		.loc 1 3701 23 discriminator 1
 7560 0264 FB68     		ldr	r3, [r7, #12]
 7561 0266 DB68     		ldr	r3, [r3, #12]
3700:./Libraries/FatFs/Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7562              		.loc 1 3700 25 discriminator 1
 7563 0268 9A42     		cmp	r2, r3
 7564 026a 15D2     		bcs	.L463
3702:./Libraries/FatFs/Src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 7565              		.loc 1 3702 17
 7566 026c 3B69     		ldr	r3, [r7, #16]
 7567              		.loc 1 3702 5
 7568 026e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7569              		.loc 1 3702 26
 7570 0270 FB68     		ldr	r3, [r7, #12]
 7571 0272 03F13001 		add	r1, r3, #48
 7572              		.loc 1 3702 5
 7573 0276 0123     		movs	r3, #1
 7574 0278 7A69     		ldr	r2, [r7, #20]
 7575 027a FFF7FEFF 		bl	disk_read
 7576 027e 0346     		mov	r3, r0
3701:./Libraries/FatFs/Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7577              		.loc 1 3701 32
 7578 0280 002B     		cmp	r3, #0
 7579 0282 09D0     		beq	.L463
3703:./Libraries/FatFs/Src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 7580              		.loc 1 3703 6
 7581 0284 FB68     		ldr	r3, [r7, #12]
 7582 0286 0122     		movs	r2, #1
 7583 0288 5A75     		strb	r2, [r3, #21]
 7584 028a 3B69     		ldr	r3, [r7, #16]
 7585 028c 0121     		movs	r1, #1
 7586 028e 1846     		mov	r0, r3
 7587 0290 FFF7FEFF 		bl	unlock_fs
 7588 0294 0123     		movs	r3, #1
 7589 0296 53E0     		b	.L466
 7590              	.L463:
ARM GAS  /tmp/cceCRWeb.s 			page 199


3704:./Libraries/FatFs/Src/ff.c **** 			}
3705:./Libraries/FatFs/Src/ff.c **** #endif
3706:./Libraries/FatFs/Src/ff.c **** 			fp->sect = sect;
 7591              		.loc 1 3706 13
 7592 0298 FB68     		ldr	r3, [r7, #12]
 7593 029a 7A69     		ldr	r2, [r7, #20]
 7594 029c 1A62     		str	r2, [r3, #32]
 7595              	.L446:
3707:./Libraries/FatFs/Src/ff.c **** 		}
3708:./Libraries/FatFs/Src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 7596              		.loc 1 3708 27
 7597 029e FB68     		ldr	r3, [r7, #12]
 7598 02a0 9B69     		ldr	r3, [r3, #24]
 7599              		.loc 1 3708 34
 7600 02a2 C3F30803 		ubfx	r3, r3, #0, #9
 7601              		.loc 1 3708 8
 7602 02a6 C3F50073 		rsb	r3, r3, #512
 7603 02aa 7B62     		str	r3, [r7, #36]
3709:./Libraries/FatFs/Src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 7604              		.loc 1 3709 6
 7605 02ac 7A6A     		ldr	r2, [r7, #36]
 7606 02ae 7B68     		ldr	r3, [r7, #4]
 7607 02b0 9A42     		cmp	r2, r3
 7608 02b2 01D9     		bls	.L464
 7609              		.loc 1 3709 24 discriminator 1
 7610 02b4 7B68     		ldr	r3, [r7, #4]
 7611 02b6 7B62     		str	r3, [r7, #36]
 7612              	.L464:
3710:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
3711:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3712:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3713:./Libraries/FatFs/Src/ff.c **** 		fs->wflag = 1;
3714:./Libraries/FatFs/Src/ff.c **** #else
3715:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 7613              		.loc 1 3715 11
 7614 02b8 FB68     		ldr	r3, [r7, #12]
 7615 02ba 03F13002 		add	r2, r3, #48
 7616              		.loc 1 3715 23
 7617 02be FB68     		ldr	r3, [r7, #12]
 7618 02c0 9B69     		ldr	r3, [r3, #24]
 7619              		.loc 1 3715 30
 7620 02c2 C3F30803 		ubfx	r3, r3, #0, #9
 7621              		.loc 1 3715 3
 7622 02c6 1344     		add	r3, r3, r2
 7623 02c8 7A6A     		ldr	r2, [r7, #36]
 7624 02ca F969     		ldr	r1, [r7, #28]
 7625 02cc 1846     		mov	r0, r3
 7626 02ce FFF7FEFF 		bl	mem_cpy
3716:./Libraries/FatFs/Src/ff.c **** 		fp->flag |= FA_DIRTY;
 7627              		.loc 1 3716 12
 7628 02d2 FB68     		ldr	r3, [r7, #12]
 7629 02d4 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7630 02d6 63F07F03 		orn	r3, r3, #127
 7631 02da DAB2     		uxtb	r2, r3
 7632 02dc FB68     		ldr	r3, [r7, #12]
 7633 02de 1A75     		strb	r2, [r3, #20]
 7634              	.L462:
ARM GAS  /tmp/cceCRWeb.s 			page 200


3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7635              		.loc 1 3636 9
 7636 02e0 FA69     		ldr	r2, [r7, #28]
 7637 02e2 7B6A     		ldr	r3, [r7, #36]
 7638 02e4 1344     		add	r3, r3, r2
 7639 02e6 FB61     		str	r3, [r7, #28]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7640              		.loc 1 3636 27
 7641 02e8 FB68     		ldr	r3, [r7, #12]
 7642 02ea 9A69     		ldr	r2, [r3, #24]
 7643 02ec 7B6A     		ldr	r3, [r7, #36]
 7644 02ee 1A44     		add	r2, r2, r3
 7645 02f0 FB68     		ldr	r3, [r7, #12]
 7646 02f2 9A61     		str	r2, [r3, #24]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7647              		.loc 1 3636 73
 7648 02f4 FB68     		ldr	r3, [r7, #12]
 7649 02f6 DA68     		ldr	r2, [r3, #12]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7650              		.loc 1 3636 57
 7651 02f8 FB68     		ldr	r3, [r7, #12]
 7652 02fa 9B69     		ldr	r3, [r3, #24]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7653              		.loc 1 3636 94
 7654 02fc 9A42     		cmp	r2, r3
 7655 02fe 38BF     		it	cc
 7656 0300 1A46     		movcc	r2, r3
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7657              		.loc 1 3636 52
 7658 0302 FB68     		ldr	r3, [r7, #12]
 7659 0304 DA60     		str	r2, [r3, #12]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7660              		.loc 1 3636 117
 7661 0306 3B68     		ldr	r3, [r7]
 7662 0308 1A68     		ldr	r2, [r3]
 7663 030a 7B6A     		ldr	r3, [r7, #36]
 7664 030c 1A44     		add	r2, r2, r3
 7665 030e 3B68     		ldr	r3, [r7]
 7666 0310 1A60     		str	r2, [r3]
3636:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7667              		.loc 1 3636 130
 7668 0312 7A68     		ldr	r2, [r7, #4]
 7669 0314 7B6A     		ldr	r3, [r7, #36]
 7670 0316 D31A     		subs	r3, r2, r3
 7671 0318 7B60     		str	r3, [r7, #4]
 7672              	.L445:
3635:./Libraries/FatFs/Src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 7673              		.loc 1 3635 2
 7674 031a 7B68     		ldr	r3, [r7, #4]
 7675 031c 002B     		cmp	r3, #0
 7676 031e 7FF4B6AE 		bne	.L465
 7677 0322 00E0     		b	.L452
 7678              	.L467:
3655:./Libraries/FatFs/Src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 7679              		.loc 1 3655 5
 7680 0324 00BF     		nop
 7681              	.L452:
ARM GAS  /tmp/cceCRWeb.s 			page 201


3717:./Libraries/FatFs/Src/ff.c **** #endif
3718:./Libraries/FatFs/Src/ff.c **** 	}
3719:./Libraries/FatFs/Src/ff.c **** 
3720:./Libraries/FatFs/Src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 7682              		.loc 1 3720 11
 7683 0326 FB68     		ldr	r3, [r7, #12]
 7684 0328 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7685 032a 43F04003 		orr	r3, r3, #64
 7686 032e DAB2     		uxtb	r2, r3
 7687 0330 FB68     		ldr	r3, [r7, #12]
 7688 0332 1A75     		strb	r2, [r3, #20]
3721:./Libraries/FatFs/Src/ff.c **** 
3722:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 7689              		.loc 1 3722 2
 7690 0334 3B69     		ldr	r3, [r7, #16]
 7691 0336 0021     		movs	r1, #0
 7692 0338 1846     		mov	r0, r3
 7693 033a FFF7FEFF 		bl	unlock_fs
 7694 033e 0023     		movs	r3, #0
 7695              	.L466:
3723:./Libraries/FatFs/Src/ff.c **** }
 7696              		.loc 1 3723 1 discriminator 1
 7697 0340 1846     		mov	r0, r3
 7698 0342 3037     		adds	r7, r7, #48
 7699              	.LCFI234:
 7700              		.cfi_def_cfa_offset 8
 7701 0344 BD46     		mov	sp, r7
 7702              	.LCFI235:
 7703              		.cfi_def_cfa_register 13
 7704              		@ sp needed
 7705 0346 80BD     		pop	{r7, pc}
 7706              		.cfi_endproc
 7707              	.LFE378:
 7709              		.section	.text.f_sync,"ax",%progbits
 7710              		.align	1
 7711              		.global	f_sync
 7712              		.syntax unified
 7713              		.thumb
 7714              		.thumb_func
 7715              		.fpu fpv5-d16
 7717              	f_sync:
 7718              	.LFB379:
3724:./Libraries/FatFs/Src/ff.c **** 
3725:./Libraries/FatFs/Src/ff.c **** 
3726:./Libraries/FatFs/Src/ff.c **** 
3727:./Libraries/FatFs/Src/ff.c **** 
3728:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3729:./Libraries/FatFs/Src/ff.c **** /* Synchronize the File                                                  */
3730:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3731:./Libraries/FatFs/Src/ff.c **** 
3732:./Libraries/FatFs/Src/ff.c **** FRESULT f_sync (
3733:./Libraries/FatFs/Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3734:./Libraries/FatFs/Src/ff.c **** )
3735:./Libraries/FatFs/Src/ff.c **** {
 7719              		.loc 1 3735 1
 7720              		.cfi_startproc
 7721              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/cceCRWeb.s 			page 202


 7722              		@ frame_needed = 1, uses_anonymous_args = 0
 7723 0000 80B5     		push	{r7, lr}
 7724              	.LCFI236:
 7725              		.cfi_def_cfa_offset 8
 7726              		.cfi_offset 7, -8
 7727              		.cfi_offset 14, -4
 7728 0002 86B0     		sub	sp, sp, #24
 7729              	.LCFI237:
 7730              		.cfi_def_cfa_offset 32
 7731 0004 00AF     		add	r7, sp, #0
 7732              	.LCFI238:
 7733              		.cfi_def_cfa_register 7
 7734 0006 7860     		str	r0, [r7, #4]
3736:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3737:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3738:./Libraries/FatFs/Src/ff.c **** 	DWORD tm;
3739:./Libraries/FatFs/Src/ff.c **** 	BYTE *dir;
3740:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3741:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
3742:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
3743:./Libraries/FatFs/Src/ff.c **** #endif
3744:./Libraries/FatFs/Src/ff.c **** 
3745:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 7735              		.loc 1 3745 8
 7736 0008 7B68     		ldr	r3, [r7, #4]
 7737 000a 07F10802 		add	r2, r7, #8
 7738 000e 1146     		mov	r1, r2
 7739 0010 1846     		mov	r0, r3
 7740 0012 FFF7FEFF 		bl	validate
 7741 0016 0346     		mov	r3, r0
 7742 0018 FB75     		strb	r3, [r7, #23]
3746:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 7743              		.loc 1 3746 5
 7744 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7745 001c 002B     		cmp	r3, #0
 7746 001e 6DD1     		bne	.L469
3747:./Libraries/FatFs/Src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 7747              		.loc 1 3747 9
 7748 0020 7B68     		ldr	r3, [r7, #4]
 7749 0022 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7750              		.loc 1 3747 16
 7751 0024 03F04003 		and	r3, r3, #64
 7752              		.loc 1 3747 6
 7753 0028 002B     		cmp	r3, #0
 7754 002a 67D0     		beq	.L469
3748:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
3749:./Libraries/FatFs/Src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 7755              		.loc 1 3749 10
 7756 002c 7B68     		ldr	r3, [r7, #4]
 7757 002e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7758              		.loc 1 3749 8
 7759 0030 5BB2     		sxtb	r3, r3
 7760              		.loc 1 3749 7
 7761 0032 002B     		cmp	r3, #0
 7762 0034 1ADA     		bge	.L470
3750:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 7763              		.loc 1 3750 22
ARM GAS  /tmp/cceCRWeb.s 			page 203


 7764 0036 BB68     		ldr	r3, [r7, #8]
 7765              		.loc 1 3750 9
 7766 0038 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7767              		.loc 1 3750 31
 7768 003a 7B68     		ldr	r3, [r7, #4]
 7769 003c 03F13001 		add	r1, r3, #48
 7770              		.loc 1 3750 9
 7771 0040 7B68     		ldr	r3, [r7, #4]
 7772 0042 1A6A     		ldr	r2, [r3, #32]
 7773 0044 0123     		movs	r3, #1
 7774 0046 FFF7FEFF 		bl	disk_write
 7775 004a 0346     		mov	r3, r0
 7776              		.loc 1 3750 8
 7777 004c 002B     		cmp	r3, #0
 7778 004e 06D0     		beq	.L471
 7779              		.loc 1 3750 62 discriminator 1
 7780 0050 BB68     		ldr	r3, [r7, #8]
 7781 0052 0121     		movs	r1, #1
 7782 0054 1846     		mov	r0, r3
 7783 0056 FFF7FEFF 		bl	unlock_fs
 7784 005a 0123     		movs	r3, #1
 7785 005c 55E0     		b	.L473
 7786              	.L471:
3751:./Libraries/FatFs/Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7787              		.loc 1 3751 14
 7788 005e 7B68     		ldr	r3, [r7, #4]
 7789 0060 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7790 0062 03F07F03 		and	r3, r3, #127
 7791 0066 DAB2     		uxtb	r2, r3
 7792 0068 7B68     		ldr	r3, [r7, #4]
 7793 006a 1A75     		strb	r2, [r3, #20]
 7794              	.L470:
3752:./Libraries/FatFs/Src/ff.c **** 			}
3753:./Libraries/FatFs/Src/ff.c **** #endif
3754:./Libraries/FatFs/Src/ff.c **** 			/* Update the directory entry */
3755:./Libraries/FatFs/Src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
 7795              		.loc 1 3755 9
 7796 006c FFF7FEFF 		bl	get_fattime
 7797 0070 3861     		str	r0, [r7, #16]
3756:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3757:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3758:./Libraries/FatFs/Src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3759:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
3760:./Libraries/FatFs/Src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3761:./Libraries/FatFs/Src/ff.c **** 				}
3762:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
3763:./Libraries/FatFs/Src/ff.c **** 					INIT_NAMBUF(fs);
3764:./Libraries/FatFs/Src/ff.c **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3765:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK) {
3766:./Libraries/FatFs/Src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3767:./Libraries/FatFs/Src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3768:./Libraries/FatFs/Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3769:./Libraries/FatFs/Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3770:./Libraries/FatFs/Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3771:./Libraries/FatFs/Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3772:./Libraries/FatFs/Src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3773:./Libraries/FatFs/Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
ARM GAS  /tmp/cceCRWeb.s 			page 204


3774:./Libraries/FatFs/Src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3775:./Libraries/FatFs/Src/ff.c **** 						if (res == FR_OK) {
3776:./Libraries/FatFs/Src/ff.c **** 							res = sync_fs(fs);
3777:./Libraries/FatFs/Src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3778:./Libraries/FatFs/Src/ff.c **** 						}
3779:./Libraries/FatFs/Src/ff.c **** 					}
3780:./Libraries/FatFs/Src/ff.c **** 					FREE_NAMBUF();
3781:./Libraries/FatFs/Src/ff.c **** 				}
3782:./Libraries/FatFs/Src/ff.c **** 			} else
3783:./Libraries/FatFs/Src/ff.c **** #endif
3784:./Libraries/FatFs/Src/ff.c **** 			{
3785:./Libraries/FatFs/Src/ff.c **** 				res = move_window(fs, fp->dir_sect);
 7798              		.loc 1 3785 11
 7799 0072 BA68     		ldr	r2, [r7, #8]
 7800 0074 7B68     		ldr	r3, [r7, #4]
 7801 0076 5B6A     		ldr	r3, [r3, #36]
 7802 0078 1946     		mov	r1, r3
 7803 007a 1046     		mov	r0, r2
 7804 007c FFF7FEFF 		bl	move_window
 7805 0080 0346     		mov	r3, r0
 7806 0082 FB75     		strb	r3, [r7, #23]
3786:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
 7807              		.loc 1 3786 8
 7808 0084 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7809 0086 002B     		cmp	r3, #0
 7810 0088 38D1     		bne	.L469
3787:./Libraries/FatFs/Src/ff.c **** 					dir = fp->dir_ptr;
 7811              		.loc 1 3787 10
 7812 008a 7B68     		ldr	r3, [r7, #4]
 7813 008c 9B6A     		ldr	r3, [r3, #40]
 7814 008e FB60     		str	r3, [r7, #12]
3788:./Libraries/FatFs/Src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 7815              		.loc 1 3788 20
 7816 0090 FB68     		ldr	r3, [r7, #12]
 7817 0092 0B33     		adds	r3, r3, #11
 7818 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7819 0096 FB68     		ldr	r3, [r7, #12]
 7820 0098 0B33     		adds	r3, r3, #11
 7821 009a 42F02002 		orr	r2, r2, #32
 7822 009e D2B2     		uxtb	r2, r2
 7823 00a0 1A70     		strb	r2, [r3]
3789:./Libraries/FatFs/Src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 7824              		.loc 1 3789 6
 7825 00a2 7B68     		ldr	r3, [r7, #4]
 7826 00a4 1868     		ldr	r0, [r3]
 7827 00a6 7B68     		ldr	r3, [r7, #4]
 7828 00a8 9B68     		ldr	r3, [r3, #8]
 7829 00aa 1A46     		mov	r2, r3
 7830 00ac F968     		ldr	r1, [r7, #12]
 7831 00ae FFF7FEFF 		bl	st_clust
3790:./Libraries/FatFs/Src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 7832              		.loc 1 3790 6
 7833 00b2 FB68     		ldr	r3, [r7, #12]
 7834 00b4 03F11C02 		add	r2, r3, #28
 7835              		.loc 1 3790 49
 7836 00b8 7B68     		ldr	r3, [r7, #4]
 7837 00ba DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cceCRWeb.s 			page 205


 7838              		.loc 1 3790 6
 7839 00bc 1946     		mov	r1, r3
 7840 00be 1046     		mov	r0, r2
 7841 00c0 FFF7FEFF 		bl	st_dword
3791:./Libraries/FatFs/Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 7842              		.loc 1 3791 6
 7843 00c4 FB68     		ldr	r3, [r7, #12]
 7844 00c6 1633     		adds	r3, r3, #22
 7845 00c8 3969     		ldr	r1, [r7, #16]
 7846 00ca 1846     		mov	r0, r3
 7847 00cc FFF7FEFF 		bl	st_dword
3792:./Libraries/FatFs/Src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 7848              		.loc 1 3792 6
 7849 00d0 FB68     		ldr	r3, [r7, #12]
 7850 00d2 1233     		adds	r3, r3, #18
 7851 00d4 0021     		movs	r1, #0
 7852 00d6 1846     		mov	r0, r3
 7853 00d8 FFF7FEFF 		bl	st_word
3793:./Libraries/FatFs/Src/ff.c **** 					fs->wflag = 1;
 7854              		.loc 1 3793 8
 7855 00dc BB68     		ldr	r3, [r7, #8]
 7856              		.loc 1 3793 16
 7857 00de 0122     		movs	r2, #1
 7858 00e0 DA70     		strb	r2, [r3, #3]
3794:./Libraries/FatFs/Src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 7859              		.loc 1 3794 12
 7860 00e2 BB68     		ldr	r3, [r7, #8]
 7861 00e4 1846     		mov	r0, r3
 7862 00e6 FFF7FEFF 		bl	sync_fs
 7863 00ea 0346     		mov	r3, r0
 7864 00ec FB75     		strb	r3, [r7, #23]
3795:./Libraries/FatFs/Src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 7865              		.loc 1 3795 15
 7866 00ee 7B68     		ldr	r3, [r7, #4]
 7867 00f0 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7868 00f2 23F04003 		bic	r3, r3, #64
 7869 00f6 DAB2     		uxtb	r2, r3
 7870 00f8 7B68     		ldr	r3, [r7, #4]
 7871 00fa 1A75     		strb	r2, [r3, #20]
 7872              	.L469:
3796:./Libraries/FatFs/Src/ff.c **** 				}
3797:./Libraries/FatFs/Src/ff.c **** 			}
3798:./Libraries/FatFs/Src/ff.c **** 		}
3799:./Libraries/FatFs/Src/ff.c **** 	}
3800:./Libraries/FatFs/Src/ff.c **** 
3801:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 7873              		.loc 1 3801 2
 7874 00fc BB68     		ldr	r3, [r7, #8]
 7875 00fe FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7876 0100 1146     		mov	r1, r2
 7877 0102 1846     		mov	r0, r3
 7878 0104 FFF7FEFF 		bl	unlock_fs
 7879 0108 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7880              	.L473:
3802:./Libraries/FatFs/Src/ff.c **** }
 7881              		.loc 1 3802 1 discriminator 1
 7882 010a 1846     		mov	r0, r3
ARM GAS  /tmp/cceCRWeb.s 			page 206


 7883 010c 1837     		adds	r7, r7, #24
 7884              	.LCFI239:
 7885              		.cfi_def_cfa_offset 8
 7886 010e BD46     		mov	sp, r7
 7887              	.LCFI240:
 7888              		.cfi_def_cfa_register 13
 7889              		@ sp needed
 7890 0110 80BD     		pop	{r7, pc}
 7891              		.cfi_endproc
 7892              	.LFE379:
 7894              		.section	.text.f_close,"ax",%progbits
 7895              		.align	1
 7896              		.global	f_close
 7897              		.syntax unified
 7898              		.thumb
 7899              		.thumb_func
 7900              		.fpu fpv5-d16
 7902              	f_close:
 7903              	.LFB380:
3803:./Libraries/FatFs/Src/ff.c **** 
3804:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
3805:./Libraries/FatFs/Src/ff.c **** 
3806:./Libraries/FatFs/Src/ff.c **** 
3807:./Libraries/FatFs/Src/ff.c **** 
3808:./Libraries/FatFs/Src/ff.c **** 
3809:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3810:./Libraries/FatFs/Src/ff.c **** /* Close File                                                            */
3811:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3812:./Libraries/FatFs/Src/ff.c **** 
3813:./Libraries/FatFs/Src/ff.c **** FRESULT f_close (
3814:./Libraries/FatFs/Src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
3815:./Libraries/FatFs/Src/ff.c **** )
3816:./Libraries/FatFs/Src/ff.c **** {
 7904              		.loc 1 3816 1
 7905              		.cfi_startproc
 7906              		@ args = 0, pretend = 0, frame = 16
 7907              		@ frame_needed = 1, uses_anonymous_args = 0
 7908 0000 80B5     		push	{r7, lr}
 7909              	.LCFI241:
 7910              		.cfi_def_cfa_offset 8
 7911              		.cfi_offset 7, -8
 7912              		.cfi_offset 14, -4
 7913 0002 84B0     		sub	sp, sp, #16
 7914              	.LCFI242:
 7915              		.cfi_def_cfa_offset 24
 7916 0004 00AF     		add	r7, sp, #0
 7917              	.LCFI243:
 7918              		.cfi_def_cfa_register 7
 7919 0006 7860     		str	r0, [r7, #4]
3817:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3818:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3819:./Libraries/FatFs/Src/ff.c **** 
3820:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
3821:./Libraries/FatFs/Src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 7920              		.loc 1 3821 8
 7921 0008 7868     		ldr	r0, [r7, #4]
 7922 000a FFF7FEFF 		bl	f_sync
ARM GAS  /tmp/cceCRWeb.s 			page 207


 7923 000e 0346     		mov	r3, r0
 7924 0010 FB73     		strb	r3, [r7, #15]
3822:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK)
 7925              		.loc 1 3822 5
 7926 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7927 0014 002B     		cmp	r3, #0
 7928 0016 1DD1     		bne	.L475
3823:./Libraries/FatFs/Src/ff.c **** #endif
3824:./Libraries/FatFs/Src/ff.c **** 	{
3825:./Libraries/FatFs/Src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
 7929              		.loc 1 3825 9
 7930 0018 7B68     		ldr	r3, [r7, #4]
 7931 001a 07F10802 		add	r2, r7, #8
 7932 001e 1146     		mov	r1, r2
 7933 0020 1846     		mov	r0, r3
 7934 0022 FFF7FEFF 		bl	validate
 7935 0026 0346     		mov	r3, r0
 7936 0028 FB73     		strb	r3, [r7, #15]
3826:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 7937              		.loc 1 3826 6
 7938 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7939 002c 002B     		cmp	r3, #0
 7940 002e 11D1     		bne	.L475
3827:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
3828:./Libraries/FatFs/Src/ff.c **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 7941              		.loc 1 3828 10
 7942 0030 7B68     		ldr	r3, [r7, #4]
 7943 0032 1B69     		ldr	r3, [r3, #16]
 7944 0034 1846     		mov	r0, r3
 7945 0036 FFF7FEFF 		bl	dec_lock
 7946 003a 0346     		mov	r3, r0
 7947 003c FB73     		strb	r3, [r7, #15]
3829:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK)
 7948              		.loc 1 3829 7
 7949 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7950 0040 002B     		cmp	r3, #0
 7951 0042 02D1     		bne	.L476
3830:./Libraries/FatFs/Src/ff.c **** #endif
3831:./Libraries/FatFs/Src/ff.c **** 			{
3832:./Libraries/FatFs/Src/ff.c **** 				fp->obj.fs = 0;			/* Invalidate file object */
 7952              		.loc 1 3832 16
 7953 0044 7B68     		ldr	r3, [r7, #4]
 7954 0046 0022     		movs	r2, #0
 7955 0048 1A60     		str	r2, [r3]
 7956              	.L476:
3833:./Libraries/FatFs/Src/ff.c **** 			}
3834:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT
3835:./Libraries/FatFs/Src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
 7957              		.loc 1 3835 4
 7958 004a BB68     		ldr	r3, [r7, #8]
 7959 004c 0021     		movs	r1, #0
 7960 004e 1846     		mov	r0, r3
 7961 0050 FFF7FEFF 		bl	unlock_fs
 7962              	.L475:
3836:./Libraries/FatFs/Src/ff.c **** #endif
3837:./Libraries/FatFs/Src/ff.c **** 		}
3838:./Libraries/FatFs/Src/ff.c **** 	}
ARM GAS  /tmp/cceCRWeb.s 			page 208


3839:./Libraries/FatFs/Src/ff.c **** 	return res;
 7963              		.loc 1 3839 9
 7964 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3840:./Libraries/FatFs/Src/ff.c **** }
 7965              		.loc 1 3840 1
 7966 0056 1846     		mov	r0, r3
 7967 0058 1037     		adds	r7, r7, #16
 7968              	.LCFI244:
 7969              		.cfi_def_cfa_offset 8
 7970 005a BD46     		mov	sp, r7
 7971              	.LCFI245:
 7972              		.cfi_def_cfa_register 13
 7973              		@ sp needed
 7974 005c 80BD     		pop	{r7, pc}
 7975              		.cfi_endproc
 7976              	.LFE380:
 7978              		.section	.text.f_lseek,"ax",%progbits
 7979              		.align	1
 7980              		.global	f_lseek
 7981              		.syntax unified
 7982              		.thumb
 7983              		.thumb_func
 7984              		.fpu fpv5-d16
 7986              	f_lseek:
 7987              	.LFB381:
3841:./Libraries/FatFs/Src/ff.c **** 
3842:./Libraries/FatFs/Src/ff.c **** 
3843:./Libraries/FatFs/Src/ff.c **** 
3844:./Libraries/FatFs/Src/ff.c **** 
3845:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH >= 1
3846:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3847:./Libraries/FatFs/Src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
3848:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3849:./Libraries/FatFs/Src/ff.c **** 
3850:./Libraries/FatFs/Src/ff.c **** #if _VOLUMES >= 2
3851:./Libraries/FatFs/Src/ff.c **** FRESULT f_chdrive (
3852:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path		/* Drive number */
3853:./Libraries/FatFs/Src/ff.c **** )
3854:./Libraries/FatFs/Src/ff.c **** {
3855:./Libraries/FatFs/Src/ff.c **** 	int vol;
3856:./Libraries/FatFs/Src/ff.c **** 
3857:./Libraries/FatFs/Src/ff.c **** 
3858:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive number */
3859:./Libraries/FatFs/Src/ff.c **** 	vol = get_ldnumber(&path);
3860:./Libraries/FatFs/Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3861:./Libraries/FatFs/Src/ff.c **** 
3862:./Libraries/FatFs/Src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
3863:./Libraries/FatFs/Src/ff.c **** 
3864:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
3865:./Libraries/FatFs/Src/ff.c **** }
3866:./Libraries/FatFs/Src/ff.c **** #endif
3867:./Libraries/FatFs/Src/ff.c **** 
3868:./Libraries/FatFs/Src/ff.c **** 
3869:./Libraries/FatFs/Src/ff.c **** FRESULT f_chdir (
3870:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3871:./Libraries/FatFs/Src/ff.c **** )
3872:./Libraries/FatFs/Src/ff.c **** {
ARM GAS  /tmp/cceCRWeb.s 			page 209


3873:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3874:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
3875:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3876:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
3877:./Libraries/FatFs/Src/ff.c **** 
3878:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
3879:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, 0);
3880:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
3881:./Libraries/FatFs/Src/ff.c **** 		dj.obj.fs = fs;
3882:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
3883:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3884:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3885:./Libraries/FatFs/Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3886:./Libraries/FatFs/Src/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3887:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3888:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3889:./Libraries/FatFs/Src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
3890:./Libraries/FatFs/Src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
3891:./Libraries/FatFs/Src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
3892:./Libraries/FatFs/Src/ff.c **** 				}
3893:./Libraries/FatFs/Src/ff.c **** #endif
3894:./Libraries/FatFs/Src/ff.c **** 			} else {
3895:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3896:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
3897:./Libraries/FatFs/Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
3898:./Libraries/FatFs/Src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3899:./Libraries/FatFs/Src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3900:./Libraries/FatFs/Src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3901:./Libraries/FatFs/Src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
3902:./Libraries/FatFs/Src/ff.c **** 					} else
3903:./Libraries/FatFs/Src/ff.c **** #endif
3904:./Libraries/FatFs/Src/ff.c **** 					{
3905:./Libraries/FatFs/Src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3906:./Libraries/FatFs/Src/ff.c **** 					}
3907:./Libraries/FatFs/Src/ff.c **** 				} else {
3908:./Libraries/FatFs/Src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3909:./Libraries/FatFs/Src/ff.c **** 				}
3910:./Libraries/FatFs/Src/ff.c **** 			}
3911:./Libraries/FatFs/Src/ff.c **** 		}
3912:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
3913:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3914:./Libraries/FatFs/Src/ff.c **** 	}
3915:./Libraries/FatFs/Src/ff.c **** 
3916:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
3917:./Libraries/FatFs/Src/ff.c **** }
3918:./Libraries/FatFs/Src/ff.c **** 
3919:./Libraries/FatFs/Src/ff.c **** 
3920:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH >= 2
3921:./Libraries/FatFs/Src/ff.c **** FRESULT f_getcwd (
3922:./Libraries/FatFs/Src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3923:./Libraries/FatFs/Src/ff.c **** 	UINT len		/* Size of path */
3924:./Libraries/FatFs/Src/ff.c **** )
3925:./Libraries/FatFs/Src/ff.c **** {
3926:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
3927:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
3928:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
3929:./Libraries/FatFs/Src/ff.c **** 	UINT i, n;
ARM GAS  /tmp/cceCRWeb.s 			page 210


3930:./Libraries/FatFs/Src/ff.c **** 	DWORD ccl;
3931:./Libraries/FatFs/Src/ff.c **** 	TCHAR *tp;
3932:./Libraries/FatFs/Src/ff.c **** 	FILINFO fno;
3933:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
3934:./Libraries/FatFs/Src/ff.c **** 
3935:./Libraries/FatFs/Src/ff.c **** 
3936:./Libraries/FatFs/Src/ff.c **** 	*buff = 0;
3937:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
3938:./Libraries/FatFs/Src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3939:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
3940:./Libraries/FatFs/Src/ff.c **** 		dj.obj.fs = fs;
3941:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
3942:./Libraries/FatFs/Src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3943:./Libraries/FatFs/Src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3944:./Libraries/FatFs/Src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3945:./Libraries/FatFs/Src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3946:./Libraries/FatFs/Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3947:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) break;
3948:./Libraries/FatFs/Src/ff.c **** 				res = move_window(fs, dj.sect);
3949:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) break;
3950:./Libraries/FatFs/Src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3951:./Libraries/FatFs/Src/ff.c **** 				res = dir_sdi(&dj, 0);
3952:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) break;
3953:./Libraries/FatFs/Src/ff.c **** 				do {							/* Find the entry links to the child directory */
3954:./Libraries/FatFs/Src/ff.c **** 					res = dir_read(&dj, 0);
3955:./Libraries/FatFs/Src/ff.c **** 					if (res != FR_OK) break;
3956:./Libraries/FatFs/Src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3957:./Libraries/FatFs/Src/ff.c **** 					res = dir_next(&dj, 0);
3958:./Libraries/FatFs/Src/ff.c **** 				} while (res == FR_OK);
3959:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3960:./Libraries/FatFs/Src/ff.c **** 				if (res != FR_OK) break;
3961:./Libraries/FatFs/Src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3962:./Libraries/FatFs/Src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;
3963:./Libraries/FatFs/Src/ff.c **** 				if (i < n + 3) {
3964:./Libraries/FatFs/Src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
3965:./Libraries/FatFs/Src/ff.c **** 				}
3966:./Libraries/FatFs/Src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];
3967:./Libraries/FatFs/Src/ff.c **** 				buff[--i] = '/';
3968:./Libraries/FatFs/Src/ff.c **** 			}
3969:./Libraries/FatFs/Src/ff.c **** 		}
3970:./Libraries/FatFs/Src/ff.c **** 		tp = buff;
3971:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
3972:./Libraries/FatFs/Src/ff.c **** #if _VOLUMES >= 2
3973:./Libraries/FatFs/Src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3974:./Libraries/FatFs/Src/ff.c **** 			*tp++ = ':';
3975:./Libraries/FatFs/Src/ff.c **** #endif
3976:./Libraries/FatFs/Src/ff.c **** 			if (i == len) {					/* Root-directory */
3977:./Libraries/FatFs/Src/ff.c **** 				*tp++ = '/';
3978:./Libraries/FatFs/Src/ff.c **** 			} else {						/* Sub-directroy */
3979:./Libraries/FatFs/Src/ff.c **** 				do		/* Add stacked path str */
3980:./Libraries/FatFs/Src/ff.c **** 					*tp++ = buff[i++];
3981:./Libraries/FatFs/Src/ff.c **** 				while (i < len);
3982:./Libraries/FatFs/Src/ff.c **** 			}
3983:./Libraries/FatFs/Src/ff.c **** 		}
3984:./Libraries/FatFs/Src/ff.c **** 		*tp = 0;
3985:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
3986:./Libraries/FatFs/Src/ff.c **** 	}
ARM GAS  /tmp/cceCRWeb.s 			page 211


3987:./Libraries/FatFs/Src/ff.c **** 
3988:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
3989:./Libraries/FatFs/Src/ff.c **** }
3990:./Libraries/FatFs/Src/ff.c **** 
3991:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_RPATH >= 2 */
3992:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_RPATH >= 1 */
3993:./Libraries/FatFs/Src/ff.c **** 
3994:./Libraries/FatFs/Src/ff.c **** 
3995:./Libraries/FatFs/Src/ff.c **** 
3996:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 2
3997:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
3998:./Libraries/FatFs/Src/ff.c **** /* Seek File R/W Pointer                                                 */
3999:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4000:./Libraries/FatFs/Src/ff.c **** 
4001:./Libraries/FatFs/Src/ff.c **** FRESULT f_lseek (
4002:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4003:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4004:./Libraries/FatFs/Src/ff.c **** )
4005:./Libraries/FatFs/Src/ff.c **** {
 7988              		.loc 1 4005 1
 7989              		.cfi_startproc
 7990              		@ args = 0, pretend = 0, frame = 64
 7991              		@ frame_needed = 1, uses_anonymous_args = 0
 7992 0000 80B5     		push	{r7, lr}
 7993              	.LCFI246:
 7994              		.cfi_def_cfa_offset 8
 7995              		.cfi_offset 7, -8
 7996              		.cfi_offset 14, -4
 7997 0002 90B0     		sub	sp, sp, #64
 7998              	.LCFI247:
 7999              		.cfi_def_cfa_offset 72
 8000 0004 00AF     		add	r7, sp, #0
 8001              	.LCFI248:
 8002              		.cfi_def_cfa_register 7
 8003 0006 7860     		str	r0, [r7, #4]
 8004 0008 3960     		str	r1, [r7]
4006:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4007:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4008:./Libraries/FatFs/Src/ff.c **** 	DWORD clst, bcs, nsect;
4009:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t ifptr;
4010:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
4011:./Libraries/FatFs/Src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4012:./Libraries/FatFs/Src/ff.c **** #endif
4013:./Libraries/FatFs/Src/ff.c **** 
4014:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005              		.loc 1 4014 8
 8006 000a 7B68     		ldr	r3, [r7, #4]
 8007 000c 07F10802 		add	r2, r7, #8
 8008 0010 1146     		mov	r1, r2
 8009 0012 1846     		mov	r0, r3
 8010 0014 FFF7FEFF 		bl	validate
 8011 0018 0346     		mov	r3, r0
 8012 001a 87F83F30 		strb	r3, [r7, #63]
4015:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 8013              		.loc 1 4015 5
 8014 001e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8015 0022 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 212


 8016 0024 03D1     		bne	.L479
 8017              		.loc 1 4015 24 discriminator 1
 8018 0026 7B68     		ldr	r3, [r7, #4]
 8019 0028 5B7D     		ldrb	r3, [r3, #21]
 8020 002a 87F83F30 		strb	r3, [r7, #63]
 8021              	.L479:
4016:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
4017:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4018:./Libraries/FatFs/Src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4019:./Libraries/FatFs/Src/ff.c **** 	}
4020:./Libraries/FatFs/Src/ff.c **** #endif
4021:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 8022              		.loc 1 4021 5
 8023 002e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8024 0032 002B     		cmp	r3, #0
 8025 0034 09D0     		beq	.L480
 8026              		.loc 1 4021 20 discriminator 1
 8027 0036 BB68     		ldr	r3, [r7, #8]
 8028 0038 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 8029 003c 1146     		mov	r1, r2
 8030 003e 1846     		mov	r0, r3
 8031 0040 FFF7FEFF 		bl	unlock_fs
 8032 0044 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8033 0048 29E2     		b	.L517
 8034              	.L480:
4022:./Libraries/FatFs/Src/ff.c **** 
4023:./Libraries/FatFs/Src/ff.c **** #if _USE_FASTSEEK
4024:./Libraries/FatFs/Src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
 8035              		.loc 1 4024 8
 8036 004a 7B68     		ldr	r3, [r7, #4]
 8037 004c DB6A     		ldr	r3, [r3, #44]
 8038              		.loc 1 4024 5
 8039 004e 002B     		cmp	r3, #0
 8040 0050 00F0EA80 		beq	.L482
4025:./Libraries/FatFs/Src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8041              		.loc 1 4025 6
 8042 0054 3B68     		ldr	r3, [r7]
 8043 0056 B3F1FF3F 		cmp	r3, #-1
 8044 005a 64D1     		bne	.L483
4026:./Libraries/FatFs/Src/ff.c **** 			tbl = fp->cltbl;
 8045              		.loc 1 4026 8
 8046 005c 7B68     		ldr	r3, [r7, #4]
 8047 005e DB6A     		ldr	r3, [r3, #44]
 8048 0060 7B62     		str	r3, [r7, #36]
4027:./Libraries/FatFs/Src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8049              		.loc 1 4027 15
 8050 0062 7B6A     		ldr	r3, [r7, #36]
 8051 0064 1A1D     		adds	r2, r3, #4
 8052 0066 7A62     		str	r2, [r7, #36]
 8053              		.loc 1 4027 9
 8054 0068 1B68     		ldr	r3, [r3]
 8055 006a 7B61     		str	r3, [r7, #20]
 8056              		.loc 1 4027 24
 8057 006c 0223     		movs	r3, #2
 8058 006e BB62     		str	r3, [r7, #40]
4028:./Libraries/FatFs/Src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 8059              		.loc 1 4028 7
ARM GAS  /tmp/cceCRWeb.s 			page 213


 8060 0070 7B68     		ldr	r3, [r7, #4]
 8061 0072 9B68     		ldr	r3, [r3, #8]
 8062 0074 3B63     		str	r3, [r7, #48]
4029:./Libraries/FatFs/Src/ff.c **** 			if (cl) {
 8063              		.loc 1 4029 7
 8064 0076 3B6B     		ldr	r3, [r7, #48]
 8065 0078 002B     		cmp	r3, #0
 8066 007a 44D0     		beq	.L484
 8067              	.L489:
4030:./Libraries/FatFs/Src/ff.c **** 				do {
4031:./Libraries/FatFs/Src/ff.c **** 					/* Get a fragment */
4032:./Libraries/FatFs/Src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8068              		.loc 1 4032 10
 8069 007c 3B6B     		ldr	r3, [r7, #48]
 8070 007e 3B61     		str	r3, [r7, #16]
 8071              		.loc 1 4032 20
 8072 0080 0023     		movs	r3, #0
 8073 0082 FB62     		str	r3, [r7, #44]
 8074              		.loc 1 4032 30
 8075 0084 BB6A     		ldr	r3, [r7, #40]
 8076 0086 0233     		adds	r3, r3, #2
 8077 0088 BB62     		str	r3, [r7, #40]
 8078              	.L487:
4033:./Libraries/FatFs/Src/ff.c **** 					do {
4034:./Libraries/FatFs/Src/ff.c **** 						pcl = cl; ncl++;
 8079              		.loc 1 4034 11
 8080 008a 3B6B     		ldr	r3, [r7, #48]
 8081 008c FB60     		str	r3, [r7, #12]
 8082              		.loc 1 4034 20
 8083 008e FB6A     		ldr	r3, [r7, #44]
 8084 0090 0133     		adds	r3, r3, #1
 8085 0092 FB62     		str	r3, [r7, #44]
4035:./Libraries/FatFs/Src/ff.c **** 						cl = get_fat(&fp->obj, cl);
 8086              		.loc 1 4035 12
 8087 0094 7B68     		ldr	r3, [r7, #4]
 8088 0096 396B     		ldr	r1, [r7, #48]
 8089 0098 1846     		mov	r0, r3
 8090 009a FFF7FEFF 		bl	get_fat
 8091 009e 3863     		str	r0, [r7, #48]
4036:./Libraries/FatFs/Src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8092              		.loc 1 4036 10
 8093 00a0 3B6B     		ldr	r3, [r7, #48]
 8094 00a2 012B     		cmp	r3, #1
 8095 00a4 09D8     		bhi	.L485
 8096              		.loc 1 4036 20 discriminator 1
 8097 00a6 7B68     		ldr	r3, [r7, #4]
 8098 00a8 0222     		movs	r2, #2
 8099 00aa 5A75     		strb	r2, [r3, #21]
 8100 00ac BB68     		ldr	r3, [r7, #8]
 8101 00ae 0221     		movs	r1, #2
 8102 00b0 1846     		mov	r0, r3
 8103 00b2 FFF7FEFF 		bl	unlock_fs
 8104 00b6 0223     		movs	r3, #2
 8105 00b8 F1E1     		b	.L517
 8106              	.L485:
4037:./Libraries/FatFs/Src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8107              		.loc 1 4037 10
ARM GAS  /tmp/cceCRWeb.s 			page 214


 8108 00ba 3B6B     		ldr	r3, [r7, #48]
 8109 00bc B3F1FF3F 		cmp	r3, #-1
 8110 00c0 09D1     		bne	.L486
 8111              		.loc 1 4037 29 discriminator 1
 8112 00c2 7B68     		ldr	r3, [r7, #4]
 8113 00c4 0122     		movs	r2, #1
 8114 00c6 5A75     		strb	r2, [r3, #21]
 8115 00c8 BB68     		ldr	r3, [r7, #8]
 8116 00ca 0121     		movs	r1, #1
 8117 00cc 1846     		mov	r0, r3
 8118 00ce FFF7FEFF 		bl	unlock_fs
 8119 00d2 0123     		movs	r3, #1
 8120 00d4 E3E1     		b	.L517
 8121              	.L486:
4038:./Libraries/FatFs/Src/ff.c **** 					} while (cl == pcl + 1);
 8122              		.loc 1 4038 25
 8123 00d6 FB68     		ldr	r3, [r7, #12]
 8124 00d8 0133     		adds	r3, r3, #1
 8125              		.loc 1 4038 6
 8126 00da 3A6B     		ldr	r2, [r7, #48]
 8127 00dc 9A42     		cmp	r2, r3
 8128 00de D4D0     		beq	.L487
4039:./Libraries/FatFs/Src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8129              		.loc 1 4039 9
 8130 00e0 BA6A     		ldr	r2, [r7, #40]
 8131 00e2 7B69     		ldr	r3, [r7, #20]
 8132 00e4 9A42     		cmp	r2, r3
 8133 00e6 09D8     		bhi	.L488
4040:./Libraries/FatFs/Src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 8134              		.loc 1 4040 11
 8135 00e8 7B6A     		ldr	r3, [r7, #36]
 8136 00ea 1A1D     		adds	r2, r3, #4
 8137 00ec 7A62     		str	r2, [r7, #36]
 8138              		.loc 1 4040 14
 8139 00ee FA6A     		ldr	r2, [r7, #44]
 8140 00f0 1A60     		str	r2, [r3]
 8141              		.loc 1 4040 25
 8142 00f2 7B6A     		ldr	r3, [r7, #36]
 8143 00f4 1A1D     		adds	r2, r3, #4
 8144 00f6 7A62     		str	r2, [r7, #36]
 8145              		.loc 1 4040 28
 8146 00f8 3A69     		ldr	r2, [r7, #16]
 8147 00fa 1A60     		str	r2, [r3]
 8148              	.L488:
4041:./Libraries/FatFs/Src/ff.c **** 					}
4042:./Libraries/FatFs/Src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8149              		.loc 1 4042 21
 8150 00fc BB68     		ldr	r3, [r7, #8]
 8151 00fe 9B69     		ldr	r3, [r3, #24]
 8152              		.loc 1 4042 5
 8153 0100 3A6B     		ldr	r2, [r7, #48]
 8154 0102 9A42     		cmp	r2, r3
 8155 0104 BAD3     		bcc	.L489
 8156              	.L484:
4043:./Libraries/FatFs/Src/ff.c **** 			}
4044:./Libraries/FatFs/Src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
 8157              		.loc 1 4044 7
ARM GAS  /tmp/cceCRWeb.s 			page 215


 8158 0106 7B68     		ldr	r3, [r7, #4]
 8159 0108 DB6A     		ldr	r3, [r3, #44]
 8160              		.loc 1 4044 15
 8161 010a BA6A     		ldr	r2, [r7, #40]
 8162 010c 1A60     		str	r2, [r3]
4045:./Libraries/FatFs/Src/ff.c **** 			if (ulen <= tlen) {
 8163              		.loc 1 4045 7
 8164 010e BA6A     		ldr	r2, [r7, #40]
 8165 0110 7B69     		ldr	r3, [r7, #20]
 8166 0112 9A42     		cmp	r2, r3
 8167 0114 03D8     		bhi	.L490
4046:./Libraries/FatFs/Src/ff.c **** 				*tbl = 0;		/* Terminate table */
 8168              		.loc 1 4046 10
 8169 0116 7B6A     		ldr	r3, [r7, #36]
 8170 0118 0022     		movs	r2, #0
 8171 011a 1A60     		str	r2, [r3]
 8172 011c B6E1     		b	.L491
 8173              	.L490:
4047:./Libraries/FatFs/Src/ff.c **** 			} else {
4048:./Libraries/FatFs/Src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8174              		.loc 1 4048 9
 8175 011e 1123     		movs	r3, #17
 8176 0120 87F83F30 		strb	r3, [r7, #63]
 8177 0124 B2E1     		b	.L491
 8178              	.L483:
4049:./Libraries/FatFs/Src/ff.c **** 			}
4050:./Libraries/FatFs/Src/ff.c **** 		} else {						/* Fast seek */
4051:./Libraries/FatFs/Src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8179              		.loc 1 4051 21
 8180 0126 7B68     		ldr	r3, [r7, #4]
 8181 0128 DB68     		ldr	r3, [r3, #12]
 8182              		.loc 1 4051 7
 8183 012a 3A68     		ldr	r2, [r7]
 8184 012c 9A42     		cmp	r2, r3
 8185 012e 02D9     		bls	.L492
 8186              		.loc 1 4051 35 discriminator 1
 8187 0130 7B68     		ldr	r3, [r7, #4]
 8188 0132 DB68     		ldr	r3, [r3, #12]
 8189 0134 3B60     		str	r3, [r7]
 8190              	.L492:
4052:./Libraries/FatFs/Src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
 8191              		.loc 1 4052 13
 8192 0136 7B68     		ldr	r3, [r7, #4]
 8193 0138 3A68     		ldr	r2, [r7]
 8194 013a 9A61     		str	r2, [r3, #24]
4053:./Libraries/FatFs/Src/ff.c **** 			if (ofs) {
 8195              		.loc 1 4053 7
 8196 013c 3B68     		ldr	r3, [r7]
 8197 013e 002B     		cmp	r3, #0
 8198 0140 00F0A481 		beq	.L491
4054:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 8199              		.loc 1 4054 17
 8200 0144 3B68     		ldr	r3, [r7]
 8201 0146 013B     		subs	r3, r3, #1
 8202 0148 1946     		mov	r1, r3
 8203 014a 7868     		ldr	r0, [r7, #4]
 8204 014c FFF7FEFF 		bl	clmt_clust
ARM GAS  /tmp/cceCRWeb.s 			page 216


 8205 0150 0246     		mov	r2, r0
 8206              		.loc 1 4054 15
 8207 0152 7B68     		ldr	r3, [r7, #4]
 8208 0154 DA61     		str	r2, [r3, #28]
4055:./Libraries/FatFs/Src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
 8209              		.loc 1 4055 11
 8210 0156 BA68     		ldr	r2, [r7, #8]
 8211 0158 7B68     		ldr	r3, [r7, #4]
 8212 015a DB69     		ldr	r3, [r3, #28]
 8213 015c 1946     		mov	r1, r3
 8214 015e 1046     		mov	r0, r2
 8215 0160 FFF7FEFF 		bl	clust2sect
 8216 0164 B861     		str	r0, [r7, #24]
4056:./Libraries/FatFs/Src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
 8217              		.loc 1 4056 8
 8218 0166 BB69     		ldr	r3, [r7, #24]
 8219 0168 002B     		cmp	r3, #0
 8220 016a 09D1     		bne	.L493
 8221              		.loc 1 4056 15 discriminator 1
 8222 016c 7B68     		ldr	r3, [r7, #4]
 8223 016e 0222     		movs	r2, #2
 8224 0170 5A75     		strb	r2, [r3, #21]
 8225 0172 BB68     		ldr	r3, [r7, #8]
 8226 0174 0221     		movs	r1, #2
 8227 0176 1846     		mov	r0, r3
 8228 0178 FFF7FEFF 		bl	unlock_fs
 8229 017c 0223     		movs	r3, #2
 8230 017e 8EE1     		b	.L517
 8231              	.L493:
4057:./Libraries/FatFs/Src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8232              		.loc 1 4057 25
 8233 0180 3B68     		ldr	r3, [r7]
 8234 0182 013B     		subs	r3, r3, #1
 8235              		.loc 1 4057 12
 8236 0184 5B0A     		lsrs	r3, r3, #9
 8237              		.loc 1 4057 45
 8238 0186 BA68     		ldr	r2, [r7, #8]
 8239 0188 5289     		ldrh	r2, [r2, #10]
 8240              		.loc 1 4057 53
 8241 018a 013A     		subs	r2, r2, #1
 8242              		.loc 1 4057 40
 8243 018c 1340     		ands	r3, r3, r2
 8244              		.loc 1 4057 9
 8245 018e BA69     		ldr	r2, [r7, #24]
 8246 0190 1344     		add	r3, r3, r2
 8247 0192 BB61     		str	r3, [r7, #24]
4058:./Libraries/FatFs/Src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8248              		.loc 1 4058 11
 8249 0194 7B68     		ldr	r3, [r7, #4]
 8250 0196 9B69     		ldr	r3, [r3, #24]
 8251              		.loc 1 4058 18
 8252 0198 C3F30803 		ubfx	r3, r3, #0, #9
 8253              		.loc 1 4058 8
 8254 019c 002B     		cmp	r3, #0
 8255 019e 00F07581 		beq	.L491
 8256              		.loc 1 4058 39 discriminator 1
 8257 01a2 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 217


 8258 01a4 1B6A     		ldr	r3, [r3, #32]
 8259              		.loc 1 4058 27 discriminator 1
 8260 01a6 BA69     		ldr	r2, [r7, #24]
 8261 01a8 9A42     		cmp	r2, r3
 8262 01aa 00F06F81 		beq	.L491
4059:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
4060:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
4061:./Libraries/FatFs/Src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8263              		.loc 1 4061 12
 8264 01ae 7B68     		ldr	r3, [r7, #4]
 8265 01b0 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8266              		.loc 1 4061 10
 8267 01b2 5BB2     		sxtb	r3, r3
 8268              		.loc 1 4061 9
 8269 01b4 002B     		cmp	r3, #0
 8270 01b6 1DDA     		bge	.L494
4062:./Libraries/FatFs/Src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8271              		.loc 1 4062 24
 8272 01b8 BB68     		ldr	r3, [r7, #8]
 8273              		.loc 1 4062 11
 8274 01ba 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 8275              		.loc 1 4062 33
 8276 01bc 7B68     		ldr	r3, [r7, #4]
 8277 01be 03F13001 		add	r1, r3, #48
 8278              		.loc 1 4062 11
 8279 01c2 7B68     		ldr	r3, [r7, #4]
 8280 01c4 1A6A     		ldr	r2, [r3, #32]
 8281 01c6 0123     		movs	r3, #1
 8282 01c8 FFF7FEFF 		bl	disk_write
 8283 01cc 0346     		mov	r3, r0
 8284              		.loc 1 4062 10
 8285 01ce 002B     		cmp	r3, #0
 8286 01d0 09D0     		beq	.L495
 8287              		.loc 1 4062 64 discriminator 1
 8288 01d2 7B68     		ldr	r3, [r7, #4]
 8289 01d4 0122     		movs	r2, #1
 8290 01d6 5A75     		strb	r2, [r3, #21]
 8291 01d8 BB68     		ldr	r3, [r7, #8]
 8292 01da 0121     		movs	r1, #1
 8293 01dc 1846     		mov	r0, r3
 8294 01de FFF7FEFF 		bl	unlock_fs
 8295 01e2 0123     		movs	r3, #1
 8296 01e4 5BE1     		b	.L517
 8297              	.L495:
4063:./Libraries/FatFs/Src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 8298              		.loc 1 4063 16
 8299 01e6 7B68     		ldr	r3, [r7, #4]
 8300 01e8 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8301 01ea 03F07F03 		and	r3, r3, #127
 8302 01ee DAB2     		uxtb	r2, r3
 8303 01f0 7B68     		ldr	r3, [r7, #4]
 8304 01f2 1A75     		strb	r2, [r3, #20]
 8305              	.L494:
4064:./Libraries/FatFs/Src/ff.c **** 					}
4065:./Libraries/FatFs/Src/ff.c **** #endif
4066:./Libraries/FatFs/Src/ff.c **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sec
 8306              		.loc 1 4066 22
ARM GAS  /tmp/cceCRWeb.s 			page 218


 8307 01f4 BB68     		ldr	r3, [r7, #8]
 8308              		.loc 1 4066 10
 8309 01f6 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 8310              		.loc 1 4066 31
 8311 01f8 7B68     		ldr	r3, [r7, #4]
 8312 01fa 03F13001 		add	r1, r3, #48
 8313              		.loc 1 4066 10
 8314 01fe 0123     		movs	r3, #1
 8315 0200 BA69     		ldr	r2, [r7, #24]
 8316 0202 FFF7FEFF 		bl	disk_read
 8317 0206 0346     		mov	r3, r0
 8318              		.loc 1 4066 9
 8319 0208 002B     		cmp	r3, #0
 8320 020a 09D0     		beq	.L496
 8321              		.loc 1 4066 57 discriminator 1
 8322 020c 7B68     		ldr	r3, [r7, #4]
 8323 020e 0122     		movs	r2, #1
 8324 0210 5A75     		strb	r2, [r3, #21]
 8325 0212 BB68     		ldr	r3, [r7, #8]
 8326 0214 0121     		movs	r1, #1
 8327 0216 1846     		mov	r0, r3
 8328 0218 FFF7FEFF 		bl	unlock_fs
 8329 021c 0123     		movs	r3, #1
 8330 021e 3EE1     		b	.L517
 8331              	.L496:
4067:./Libraries/FatFs/Src/ff.c **** #endif
4068:./Libraries/FatFs/Src/ff.c **** 					fp->sect = dsc;
 8332              		.loc 1 4068 15
 8333 0220 7B68     		ldr	r3, [r7, #4]
 8334 0222 BA69     		ldr	r2, [r7, #24]
 8335 0224 1A62     		str	r2, [r3, #32]
 8336 0226 31E1     		b	.L491
 8337              	.L482:
4069:./Libraries/FatFs/Src/ff.c **** 				}
4070:./Libraries/FatFs/Src/ff.c **** 			}
4071:./Libraries/FatFs/Src/ff.c **** 		}
4072:./Libraries/FatFs/Src/ff.c **** 	} else
4073:./Libraries/FatFs/Src/ff.c **** #endif
4074:./Libraries/FatFs/Src/ff.c **** 
4075:./Libraries/FatFs/Src/ff.c **** 	/* Normal Seek */
4076:./Libraries/FatFs/Src/ff.c **** 	{
4077:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4078:./Libraries/FatFs/Src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATx
4079:./Libraries/FatFs/Src/ff.c **** #endif
4080:./Libraries/FatFs/Src/ff.c **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
 8338              		.loc 1 4080 20
 8339 0228 7B68     		ldr	r3, [r7, #4]
 8340 022a DB68     		ldr	r3, [r3, #12]
 8341              		.loc 1 4080 6
 8342 022c 3A68     		ldr	r2, [r7]
 8343 022e 9A42     		cmp	r2, r3
 8344 0230 08D9     		bls	.L497
 8345              		.loc 1 4080 53 discriminator 1
 8346 0232 7B68     		ldr	r3, [r7, #4]
 8347 0234 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8348              		.loc 1 4080 60 discriminator 1
 8349 0236 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/cceCRWeb.s 			page 219


 8350              		.loc 1 4080 29 discriminator 1
 8351 023a 002B     		cmp	r3, #0
 8352 023c 02D1     		bne	.L497
4081:./Libraries/FatFs/Src/ff.c **** 			ofs = fp->obj.objsize;
 8353              		.loc 1 4081 8
 8354 023e 7B68     		ldr	r3, [r7, #4]
 8355 0240 DB68     		ldr	r3, [r3, #12]
 8356 0242 3B60     		str	r3, [r7]
 8357              	.L497:
4082:./Libraries/FatFs/Src/ff.c **** 		}
4083:./Libraries/FatFs/Src/ff.c **** 		ifptr = fp->fptr;
 8358              		.loc 1 4083 9
 8359 0244 7B68     		ldr	r3, [r7, #4]
 8360 0246 9B69     		ldr	r3, [r3, #24]
 8361 0248 3B62     		str	r3, [r7, #32]
4084:./Libraries/FatFs/Src/ff.c **** 		fp->fptr = nsect = 0;
 8362              		.loc 1 4084 20
 8363 024a 0023     		movs	r3, #0
 8364 024c 7B63     		str	r3, [r7, #52]
 8365              		.loc 1 4084 12
 8366 024e 7B68     		ldr	r3, [r7, #4]
 8367 0250 7A6B     		ldr	r2, [r7, #52]
 8368 0252 9A61     		str	r2, [r3, #24]
4085:./Libraries/FatFs/Src/ff.c **** 		if (ofs) {
 8369              		.loc 1 4085 6
 8370 0254 3B68     		ldr	r3, [r7]
 8371 0256 002B     		cmp	r3, #0
 8372 0258 00F0C080 		beq	.L498
4086:./Libraries/FatFs/Src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8373              		.loc 1 4086 19
 8374 025c BB68     		ldr	r3, [r7, #8]
 8375 025e 5B89     		ldrh	r3, [r3, #10]
 8376              		.loc 1 4086 8
 8377 0260 5B02     		lsls	r3, r3, #9
 8378 0262 FB61     		str	r3, [r7, #28]
4087:./Libraries/FatFs/Src/ff.c **** 			if (ifptr > 0 &&
 8379              		.loc 1 4087 7
 8380 0264 3B6A     		ldr	r3, [r7, #32]
 8381 0266 002B     		cmp	r3, #0
 8382 0268 1BD0     		beq	.L499
4088:./Libraries/FatFs/Src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8383              		.loc 1 4088 10 discriminator 1
 8384 026a 3B68     		ldr	r3, [r7]
 8385 026c 5A1E     		subs	r2, r3, #1
 8386              		.loc 1 4088 15 discriminator 1
 8387 026e FB69     		ldr	r3, [r7, #28]
 8388 0270 B2FBF3F2 		udiv	r2, r2, r3
 8389              		.loc 1 4088 31 discriminator 1
 8390 0274 3B6A     		ldr	r3, [r7, #32]
 8391 0276 591E     		subs	r1, r3, #1
 8392              		.loc 1 4088 36 discriminator 1
 8393 0278 FB69     		ldr	r3, [r7, #28]
 8394 027a B1FBF3F3 		udiv	r3, r1, r3
4087:./Libraries/FatFs/Src/ff.c **** 			if (ifptr > 0 &&
 8395              		.loc 1 4087 18 discriminator 1
 8396 027e 9A42     		cmp	r2, r3
 8397 0280 0FD3     		bcc	.L499
ARM GAS  /tmp/cceCRWeb.s 			page 220


4089:./Libraries/FatFs/Src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8398              		.loc 1 4089 23
 8399 0282 3B6A     		ldr	r3, [r7, #32]
 8400 0284 5A1E     		subs	r2, r3, #1
 8401              		.loc 1 4089 30
 8402 0286 FB69     		ldr	r3, [r7, #28]
 8403 0288 5B42     		rsbs	r3, r3, #0
 8404              		.loc 1 4089 28
 8405 028a 1A40     		ands	r2, r2, r3
 8406              		.loc 1 4089 14
 8407 028c 7B68     		ldr	r3, [r7, #4]
 8408 028e 9A61     		str	r2, [r3, #24]
4090:./Libraries/FatFs/Src/ff.c **** 				ofs -= fp->fptr;
 8409              		.loc 1 4090 14
 8410 0290 7B68     		ldr	r3, [r7, #4]
 8411 0292 9B69     		ldr	r3, [r3, #24]
 8412              		.loc 1 4090 9
 8413 0294 3A68     		ldr	r2, [r7]
 8414 0296 D31A     		subs	r3, r2, r3
 8415 0298 3B60     		str	r3, [r7]
4091:./Libraries/FatFs/Src/ff.c **** 				clst = fp->clust;
 8416              		.loc 1 4091 10
 8417 029a 7B68     		ldr	r3, [r7, #4]
 8418 029c DB69     		ldr	r3, [r3, #28]
 8419 029e BB63     		str	r3, [r7, #56]
 8420 02a0 2CE0     		b	.L500
 8421              	.L499:
4092:./Libraries/FatFs/Src/ff.c **** 			} else {									/* When seek to back cluster, */
4093:./Libraries/FatFs/Src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 8422              		.loc 1 4093 10
 8423 02a2 7B68     		ldr	r3, [r7, #4]
 8424 02a4 9B68     		ldr	r3, [r3, #8]
 8425 02a6 BB63     		str	r3, [r7, #56]
4094:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
4095:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8426              		.loc 1 4095 8
 8427 02a8 BB6B     		ldr	r3, [r7, #56]
 8428 02aa 002B     		cmp	r3, #0
 8429 02ac 23D1     		bne	.L501
4096:./Libraries/FatFs/Src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 8430              		.loc 1 4096 13
 8431 02ae 7B68     		ldr	r3, [r7, #4]
 8432 02b0 0021     		movs	r1, #0
 8433 02b2 1846     		mov	r0, r3
 8434 02b4 FFF7FEFF 		bl	create_chain
 8435 02b8 B863     		str	r0, [r7, #56]
4097:./Libraries/FatFs/Src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8436              		.loc 1 4097 9
 8437 02ba BB6B     		ldr	r3, [r7, #56]
 8438 02bc 012B     		cmp	r3, #1
 8439 02be 09D1     		bne	.L502
 8440              		.loc 1 4097 21 discriminator 1
 8441 02c0 7B68     		ldr	r3, [r7, #4]
 8442 02c2 0222     		movs	r2, #2
 8443 02c4 5A75     		strb	r2, [r3, #21]
 8444 02c6 BB68     		ldr	r3, [r7, #8]
 8445 02c8 0221     		movs	r1, #2
ARM GAS  /tmp/cceCRWeb.s 			page 221


 8446 02ca 1846     		mov	r0, r3
 8447 02cc FFF7FEFF 		bl	unlock_fs
 8448 02d0 0223     		movs	r3, #2
 8449 02d2 E4E0     		b	.L517
 8450              	.L502:
4098:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8451              		.loc 1 4098 9
 8452 02d4 BB6B     		ldr	r3, [r7, #56]
 8453 02d6 B3F1FF3F 		cmp	r3, #-1
 8454 02da 09D1     		bne	.L503
 8455              		.loc 1 4098 30 discriminator 1
 8456 02dc 7B68     		ldr	r3, [r7, #4]
 8457 02de 0122     		movs	r2, #1
 8458 02e0 5A75     		strb	r2, [r3, #21]
 8459 02e2 BB68     		ldr	r3, [r7, #8]
 8460 02e4 0121     		movs	r1, #1
 8461 02e6 1846     		mov	r0, r3
 8462 02e8 FFF7FEFF 		bl	unlock_fs
 8463 02ec 0123     		movs	r3, #1
 8464 02ee D6E0     		b	.L517
 8465              	.L503:
4099:./Libraries/FatFs/Src/ff.c **** 					fp->obj.sclust = clst;
 8466              		.loc 1 4099 21
 8467 02f0 7B68     		ldr	r3, [r7, #4]
 8468 02f2 BA6B     		ldr	r2, [r7, #56]
 8469 02f4 9A60     		str	r2, [r3, #8]
 8470              	.L501:
4100:./Libraries/FatFs/Src/ff.c **** 				}
4101:./Libraries/FatFs/Src/ff.c **** #endif
4102:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clst;
 8471              		.loc 1 4102 15
 8472 02f6 7B68     		ldr	r3, [r7, #4]
 8473 02f8 BA6B     		ldr	r2, [r7, #56]
 8474 02fa DA61     		str	r2, [r3, #28]
 8475              	.L500:
4103:./Libraries/FatFs/Src/ff.c **** 			}
4104:./Libraries/FatFs/Src/ff.c **** 			if (clst != 0) {
 8476              		.loc 1 4104 7
 8477 02fc BB6B     		ldr	r3, [r7, #56]
 8478 02fe 002B     		cmp	r3, #0
 8479 0300 6CD0     		beq	.L498
4105:./Libraries/FatFs/Src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 8480              		.loc 1 4105 11
 8481 0302 44E0     		b	.L504
 8482              	.L511:
4106:./Libraries/FatFs/Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8483              		.loc 1 4106 10
 8484 0304 3A68     		ldr	r2, [r7]
 8485 0306 FB69     		ldr	r3, [r7, #28]
 8486 0308 D31A     		subs	r3, r2, r3
 8487 030a 3B60     		str	r3, [r7]
 8488              		.loc 1 4106 27
 8489 030c 7B68     		ldr	r3, [r7, #4]
 8490 030e 9A69     		ldr	r2, [r3, #24]
 8491 0310 FB69     		ldr	r3, [r7, #28]
 8492 0312 1A44     		add	r2, r2, r3
 8493 0314 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 222


 8494 0316 9A61     		str	r2, [r3, #24]
4107:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
4108:./Libraries/FatFs/Src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8495              		.loc 1 4108 12
 8496 0318 7B68     		ldr	r3, [r7, #4]
 8497 031a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8498              		.loc 1 4108 19
 8499 031c 03F00203 		and	r3, r3, #2
 8500              		.loc 1 4108 9
 8501 0320 002B     		cmp	r3, #0
 8502 0322 0BD0     		beq	.L505
4109:./Libraries/FatFs/Src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
4110:./Libraries/FatFs/Src/ff.c **** 							fp->obj.objsize = fp->fptr;
4111:./Libraries/FatFs/Src/ff.c **** 							fp->flag |= FA_MODIFIED;
4112:./Libraries/FatFs/Src/ff.c **** 						}
4113:./Libraries/FatFs/Src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8503              		.loc 1 4113 14
 8504 0324 7B68     		ldr	r3, [r7, #4]
 8505 0326 B96B     		ldr	r1, [r7, #56]
 8506 0328 1846     		mov	r0, r3
 8507 032a FFF7FEFF 		bl	create_chain
 8508 032e B863     		str	r0, [r7, #56]
4114:./Libraries/FatFs/Src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8509              		.loc 1 4114 10
 8510 0330 BB6B     		ldr	r3, [r7, #56]
 8511 0332 002B     		cmp	r3, #0
 8512 0334 08D1     		bne	.L506
4115:./Libraries/FatFs/Src/ff.c **** 							ofs = 0; break;
 8513              		.loc 1 4115 12
 8514 0336 0023     		movs	r3, #0
 8515 0338 3B60     		str	r3, [r7]
 8516              		.loc 1 4115 8
 8517 033a 2CE0     		b	.L507
 8518              	.L505:
4116:./Libraries/FatFs/Src/ff.c **** 						}
4117:./Libraries/FatFs/Src/ff.c **** 					} else
4118:./Libraries/FatFs/Src/ff.c **** #endif
4119:./Libraries/FatFs/Src/ff.c **** 					{
4120:./Libraries/FatFs/Src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8519              		.loc 1 4120 14
 8520 033c 7B68     		ldr	r3, [r7, #4]
 8521 033e B96B     		ldr	r1, [r7, #56]
 8522 0340 1846     		mov	r0, r3
 8523 0342 FFF7FEFF 		bl	get_fat
 8524 0346 B863     		str	r0, [r7, #56]
 8525              	.L506:
4121:./Libraries/FatFs/Src/ff.c **** 					}
4122:./Libraries/FatFs/Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8526              		.loc 1 4122 9
 8527 0348 BB6B     		ldr	r3, [r7, #56]
 8528 034a B3F1FF3F 		cmp	r3, #-1
 8529 034e 09D1     		bne	.L508
 8530              		.loc 1 4122 30 discriminator 1
 8531 0350 7B68     		ldr	r3, [r7, #4]
 8532 0352 0122     		movs	r2, #1
 8533 0354 5A75     		strb	r2, [r3, #21]
 8534 0356 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cceCRWeb.s 			page 223


 8535 0358 0121     		movs	r1, #1
 8536 035a 1846     		mov	r0, r3
 8537 035c FFF7FEFF 		bl	unlock_fs
 8538 0360 0123     		movs	r3, #1
 8539 0362 9CE0     		b	.L517
 8540              	.L508:
4123:./Libraries/FatFs/Src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8541              		.loc 1 4123 9
 8542 0364 BB6B     		ldr	r3, [r7, #56]
 8543 0366 012B     		cmp	r3, #1
 8544 0368 04D9     		bls	.L509
 8545              		.loc 1 4123 33 discriminator 2
 8546 036a BB68     		ldr	r3, [r7, #8]
 8547 036c 9B69     		ldr	r3, [r3, #24]
 8548              		.loc 1 4123 20 discriminator 2
 8549 036e BA6B     		ldr	r2, [r7, #56]
 8550 0370 9A42     		cmp	r2, r3
 8551 0372 09D3     		bcc	.L510
 8552              	.L509:
 8553              		.loc 1 4123 45 discriminator 3
 8554 0374 7B68     		ldr	r3, [r7, #4]
 8555 0376 0222     		movs	r2, #2
 8556 0378 5A75     		strb	r2, [r3, #21]
 8557 037a BB68     		ldr	r3, [r7, #8]
 8558 037c 0221     		movs	r1, #2
 8559 037e 1846     		mov	r0, r3
 8560 0380 FFF7FEFF 		bl	unlock_fs
 8561 0384 0223     		movs	r3, #2
 8562 0386 8AE0     		b	.L517
 8563              	.L510:
4124:./Libraries/FatFs/Src/ff.c **** 					fp->clust = clst;
 8564              		.loc 1 4124 16
 8565 0388 7B68     		ldr	r3, [r7, #4]
 8566 038a BA6B     		ldr	r2, [r7, #56]
 8567 038c DA61     		str	r2, [r3, #28]
 8568              	.L504:
4105:./Libraries/FatFs/Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8569              		.loc 1 4105 11
 8570 038e 3A68     		ldr	r2, [r7]
 8571 0390 FB69     		ldr	r3, [r7, #28]
 8572 0392 9A42     		cmp	r2, r3
 8573 0394 B6D8     		bhi	.L511
 8574              	.L507:
4125:./Libraries/FatFs/Src/ff.c **** 				}
4126:./Libraries/FatFs/Src/ff.c **** 				fp->fptr += ofs;
 8575              		.loc 1 4126 14
 8576 0396 7B68     		ldr	r3, [r7, #4]
 8577 0398 9A69     		ldr	r2, [r3, #24]
 8578 039a 3B68     		ldr	r3, [r7]
 8579 039c 1A44     		add	r2, r2, r3
 8580 039e 7B68     		ldr	r3, [r7, #4]
 8581 03a0 9A61     		str	r2, [r3, #24]
4127:./Libraries/FatFs/Src/ff.c **** 				if (ofs % SS(fs)) {
 8582              		.loc 1 4127 13
 8583 03a2 3B68     		ldr	r3, [r7]
 8584 03a4 C3F30803 		ubfx	r3, r3, #0, #9
 8585              		.loc 1 4127 8
ARM GAS  /tmp/cceCRWeb.s 			page 224


 8586 03a8 002B     		cmp	r3, #0
 8587 03aa 17D0     		beq	.L498
4128:./Libraries/FatFs/Src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 8588              		.loc 1 4128 14
 8589 03ac BB68     		ldr	r3, [r7, #8]
 8590 03ae B96B     		ldr	r1, [r7, #56]
 8591 03b0 1846     		mov	r0, r3
 8592 03b2 FFF7FEFF 		bl	clust2sect
 8593 03b6 7863     		str	r0, [r7, #52]
4129:./Libraries/FatFs/Src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 8594              		.loc 1 4129 9
 8595 03b8 7B6B     		ldr	r3, [r7, #52]
 8596 03ba 002B     		cmp	r3, #0
 8597 03bc 09D1     		bne	.L512
 8598              		.loc 1 4129 18 discriminator 1
 8599 03be 7B68     		ldr	r3, [r7, #4]
 8600 03c0 0222     		movs	r2, #2
 8601 03c2 5A75     		strb	r2, [r3, #21]
 8602 03c4 BB68     		ldr	r3, [r7, #8]
 8603 03c6 0221     		movs	r1, #2
 8604 03c8 1846     		mov	r0, r3
 8605 03ca FFF7FEFF 		bl	unlock_fs
 8606 03ce 0223     		movs	r3, #2
 8607 03d0 65E0     		b	.L517
 8608              	.L512:
4130:./Libraries/FatFs/Src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 8609              		.loc 1 4130 15
 8610 03d2 3B68     		ldr	r3, [r7]
 8611 03d4 5B0A     		lsrs	r3, r3, #9
 8612              		.loc 1 4130 12
 8613 03d6 7A6B     		ldr	r2, [r7, #52]
 8614 03d8 1344     		add	r3, r3, r2
 8615 03da 7B63     		str	r3, [r7, #52]
 8616              	.L498:
4131:./Libraries/FatFs/Src/ff.c **** 				}
4132:./Libraries/FatFs/Src/ff.c **** 			}
4133:./Libraries/FatFs/Src/ff.c **** 		}
4134:./Libraries/FatFs/Src/ff.c **** 		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is e
 8617              		.loc 1 4134 26
 8618 03dc 7B68     		ldr	r3, [r7, #4]
 8619 03de 9A69     		ldr	r2, [r3, #24]
 8620              		.loc 1 4134 42
 8621 03e0 7B68     		ldr	r3, [r7, #4]
 8622 03e2 DB68     		ldr	r3, [r3, #12]
 8623              		.loc 1 4134 6
 8624 03e4 9A42     		cmp	r2, r3
 8625 03e6 0AD9     		bls	.L513
4135:./Libraries/FatFs/Src/ff.c **** 			fp->obj.objsize = fp->fptr;
 8626              		.loc 1 4135 24
 8627 03e8 7B68     		ldr	r3, [r7, #4]
 8628 03ea 9A69     		ldr	r2, [r3, #24]
 8629              		.loc 1 4135 20
 8630 03ec 7B68     		ldr	r3, [r7, #4]
 8631 03ee DA60     		str	r2, [r3, #12]
4136:./Libraries/FatFs/Src/ff.c **** 			fp->flag |= FA_MODIFIED;
 8632              		.loc 1 4136 13
 8633 03f0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 225


 8634 03f2 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8635 03f4 43F04003 		orr	r3, r3, #64
 8636 03f8 DAB2     		uxtb	r2, r3
 8637 03fa 7B68     		ldr	r3, [r7, #4]
 8638 03fc 1A75     		strb	r2, [r3, #20]
 8639              	.L513:
4137:./Libraries/FatFs/Src/ff.c **** 		}
4138:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8640              		.loc 1 4138 9
 8641 03fe 7B68     		ldr	r3, [r7, #4]
 8642 0400 9B69     		ldr	r3, [r3, #24]
 8643              		.loc 1 4138 16
 8644 0402 C3F30803 		ubfx	r3, r3, #0, #9
 8645              		.loc 1 4138 6
 8646 0406 002B     		cmp	r3, #0
 8647 0408 40D0     		beq	.L491
 8648              		.loc 1 4138 39 discriminator 1
 8649 040a 7B68     		ldr	r3, [r7, #4]
 8650 040c 1B6A     		ldr	r3, [r3, #32]
 8651              		.loc 1 4138 25 discriminator 1
 8652 040e 7A6B     		ldr	r2, [r7, #52]
 8653 0410 9A42     		cmp	r2, r3
 8654 0412 3BD0     		beq	.L491
4139:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
4140:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
4141:./Libraries/FatFs/Src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8655              		.loc 1 4141 10
 8656 0414 7B68     		ldr	r3, [r7, #4]
 8657 0416 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8658              		.loc 1 4141 8
 8659 0418 5BB2     		sxtb	r3, r3
 8660              		.loc 1 4141 7
 8661 041a 002B     		cmp	r3, #0
 8662 041c 1DDA     		bge	.L514
4142:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8663              		.loc 1 4142 22
 8664 041e BB68     		ldr	r3, [r7, #8]
 8665              		.loc 1 4142 9
 8666 0420 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 8667              		.loc 1 4142 31
 8668 0422 7B68     		ldr	r3, [r7, #4]
 8669 0424 03F13001 		add	r1, r3, #48
 8670              		.loc 1 4142 9
 8671 0428 7B68     		ldr	r3, [r7, #4]
 8672 042a 1A6A     		ldr	r2, [r3, #32]
 8673 042c 0123     		movs	r3, #1
 8674 042e FFF7FEFF 		bl	disk_write
 8675 0432 0346     		mov	r3, r0
 8676              		.loc 1 4142 8
 8677 0434 002B     		cmp	r3, #0
 8678 0436 09D0     		beq	.L515
 8679              		.loc 1 4142 62 discriminator 1
 8680 0438 7B68     		ldr	r3, [r7, #4]
 8681 043a 0122     		movs	r2, #1
 8682 043c 5A75     		strb	r2, [r3, #21]
 8683 043e BB68     		ldr	r3, [r7, #8]
 8684 0440 0121     		movs	r1, #1
ARM GAS  /tmp/cceCRWeb.s 			page 226


 8685 0442 1846     		mov	r0, r3
 8686 0444 FFF7FEFF 		bl	unlock_fs
 8687 0448 0123     		movs	r3, #1
 8688 044a 28E0     		b	.L517
 8689              	.L515:
4143:./Libraries/FatFs/Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8690              		.loc 1 4143 14
 8691 044c 7B68     		ldr	r3, [r7, #4]
 8692 044e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8693 0450 03F07F03 		and	r3, r3, #127
 8694 0454 DAB2     		uxtb	r2, r3
 8695 0456 7B68     		ldr	r3, [r7, #4]
 8696 0458 1A75     		strb	r2, [r3, #20]
 8697              	.L514:
4144:./Libraries/FatFs/Src/ff.c **** 			}
4145:./Libraries/FatFs/Src/ff.c **** #endif
4146:./Libraries/FatFs/Src/ff.c **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
 8698              		.loc 1 4146 20
 8699 045a BB68     		ldr	r3, [r7, #8]
 8700              		.loc 1 4146 8
 8701 045c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 8702              		.loc 1 4146 29
 8703 045e 7B68     		ldr	r3, [r7, #4]
 8704 0460 03F13001 		add	r1, r3, #48
 8705              		.loc 1 4146 8
 8706 0464 0123     		movs	r3, #1
 8707 0466 7A6B     		ldr	r2, [r7, #52]
 8708 0468 FFF7FEFF 		bl	disk_read
 8709 046c 0346     		mov	r3, r0
 8710              		.loc 1 4146 7
 8711 046e 002B     		cmp	r3, #0
 8712 0470 09D0     		beq	.L516
 8713              		.loc 1 4146 57 discriminator 1
 8714 0472 7B68     		ldr	r3, [r7, #4]
 8715 0474 0122     		movs	r2, #1
 8716 0476 5A75     		strb	r2, [r3, #21]
 8717 0478 BB68     		ldr	r3, [r7, #8]
 8718 047a 0121     		movs	r1, #1
 8719 047c 1846     		mov	r0, r3
 8720 047e FFF7FEFF 		bl	unlock_fs
 8721 0482 0123     		movs	r3, #1
 8722 0484 0BE0     		b	.L517
 8723              	.L516:
4147:./Libraries/FatFs/Src/ff.c **** #endif
4148:./Libraries/FatFs/Src/ff.c **** 			fp->sect = nsect;
 8724              		.loc 1 4148 13
 8725 0486 7B68     		ldr	r3, [r7, #4]
 8726 0488 7A6B     		ldr	r2, [r7, #52]
 8727 048a 1A62     		str	r2, [r3, #32]
 8728              	.L491:
4149:./Libraries/FatFs/Src/ff.c **** 		}
4150:./Libraries/FatFs/Src/ff.c **** 	}
4151:./Libraries/FatFs/Src/ff.c **** 
4152:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 8729              		.loc 1 4152 2
 8730 048c BB68     		ldr	r3, [r7, #8]
 8731 048e 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 227


 8732 0492 1146     		mov	r1, r2
 8733 0494 1846     		mov	r0, r3
 8734 0496 FFF7FEFF 		bl	unlock_fs
 8735 049a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 8736              	.L517:
4153:./Libraries/FatFs/Src/ff.c **** }
 8737              		.loc 1 4153 1 discriminator 2
 8738 049e 1846     		mov	r0, r3
 8739 04a0 4037     		adds	r7, r7, #64
 8740              	.LCFI249:
 8741              		.cfi_def_cfa_offset 8
 8742 04a2 BD46     		mov	sp, r7
 8743              	.LCFI250:
 8744              		.cfi_def_cfa_register 13
 8745              		@ sp needed
 8746 04a4 80BD     		pop	{r7, pc}
 8747              		.cfi_endproc
 8748              	.LFE381:
 8750              		.section	.text.f_opendir,"ax",%progbits
 8751              		.align	1
 8752              		.global	f_opendir
 8753              		.syntax unified
 8754              		.thumb
 8755              		.thumb_func
 8756              		.fpu fpv5-d16
 8758              	f_opendir:
 8759              	.LFB382:
4154:./Libraries/FatFs/Src/ff.c **** 
4155:./Libraries/FatFs/Src/ff.c **** 
4156:./Libraries/FatFs/Src/ff.c **** 
4157:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE <= 1
4158:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4159:./Libraries/FatFs/Src/ff.c **** /* Create a Directory Object                                             */
4160:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4161:./Libraries/FatFs/Src/ff.c **** 
4162:./Libraries/FatFs/Src/ff.c **** FRESULT f_opendir (
4163:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4164:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4165:./Libraries/FatFs/Src/ff.c **** )
4166:./Libraries/FatFs/Src/ff.c **** {
 8760              		.loc 1 4166 1
 8761              		.cfi_startproc
 8762              		@ args = 0, pretend = 0, frame = 24
 8763              		@ frame_needed = 1, uses_anonymous_args = 0
 8764 0000 80B5     		push	{r7, lr}
 8765              	.LCFI251:
 8766              		.cfi_def_cfa_offset 8
 8767              		.cfi_offset 7, -8
 8768              		.cfi_offset 14, -4
 8769 0002 86B0     		sub	sp, sp, #24
 8770              	.LCFI252:
 8771              		.cfi_def_cfa_offset 32
 8772 0004 00AF     		add	r7, sp, #0
 8773              	.LCFI253:
 8774              		.cfi_def_cfa_register 7
 8775 0006 7860     		str	r0, [r7, #4]
 8776 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/cceCRWeb.s 			page 228


4167:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4168:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4169:./Libraries/FatFs/Src/ff.c **** 	_FDID *obj;
4170:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4171:./Libraries/FatFs/Src/ff.c **** 
4172:./Libraries/FatFs/Src/ff.c **** 
4173:./Libraries/FatFs/Src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 8777              		.loc 1 4173 5
 8778 000a 7B68     		ldr	r3, [r7, #4]
 8779 000c 002B     		cmp	r3, #0
 8780 000e 01D1     		bne	.L519
 8781              		.loc 1 4173 18 discriminator 1
 8782 0010 0923     		movs	r3, #9
 8783 0012 6AE0     		b	.L527
 8784              	.L519:
4174:./Libraries/FatFs/Src/ff.c **** 
4175:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4176:./Libraries/FatFs/Src/ff.c **** 	obj = &dp->obj;
 8785              		.loc 1 4176 6
 8786 0014 7B68     		ldr	r3, [r7, #4]
 8787 0016 3B61     		str	r3, [r7, #16]
4177:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 8788              		.loc 1 4177 8
 8789 0018 07F10C01 		add	r1, r7, #12
 8790 001c 3B46     		mov	r3, r7
 8791 001e 0022     		movs	r2, #0
 8792 0020 1846     		mov	r0, r3
 8793 0022 FFF7FEFF 		bl	find_volume
 8794 0026 0346     		mov	r3, r0
 8795 0028 FB75     		strb	r3, [r7, #23]
4178:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 8796              		.loc 1 4178 5
 8797 002a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8798 002c 002B     		cmp	r3, #0
 8799 002e 4FD1     		bne	.L521
4179:./Libraries/FatFs/Src/ff.c **** 		obj->fs = fs;
 8800              		.loc 1 4179 11
 8801 0030 FA68     		ldr	r2, [r7, #12]
 8802 0032 3B69     		ldr	r3, [r7, #16]
 8803 0034 1A60     		str	r2, [r3]
4180:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4181:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8804              		.loc 1 4181 9
 8805 0036 3B68     		ldr	r3, [r7]
 8806 0038 1946     		mov	r1, r3
 8807 003a 7868     		ldr	r0, [r7, #4]
 8808 003c FFF7FEFF 		bl	follow_path
 8809 0040 0346     		mov	r3, r0
 8810 0042 FB75     		strb	r3, [r7, #23]
4182:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 8811              		.loc 1 4182 6
 8812 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8813 0046 002B     		cmp	r3, #0
 8814 0048 3DD1     		bne	.L522
4183:./Libraries/FatFs/Src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8815              		.loc 1 4183 16
 8816 004a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cceCRWeb.s 			page 229


 8817 004c 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 8818              		.loc 1 4183 8
 8819 0050 5BB2     		sxtb	r3, r3
 8820              		.loc 1 4183 7
 8821 0052 002B     		cmp	r3, #0
 8822 0054 12DB     		blt	.L523
4184:./Libraries/FatFs/Src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8823              		.loc 1 4184 12
 8824 0056 3B69     		ldr	r3, [r7, #16]
 8825 0058 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 8826              		.loc 1 4184 19
 8827 005a 03F01003 		and	r3, r3, #16
 8828              		.loc 1 4184 8
 8829 005e 002B     		cmp	r3, #0
 8830 0060 0AD0     		beq	.L524
4185:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4186:./Libraries/FatFs/Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4187:./Libraries/FatFs/Src/ff.c **** 						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
4188:./Libraries/FatFs/Src/ff.c **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4189:./Libraries/FatFs/Src/ff.c **** 						obj->c_ofs = dp->blk_ofs;
4190:./Libraries/FatFs/Src/ff.c **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
4191:./Libraries/FatFs/Src/ff.c **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4192:./Libraries/FatFs/Src/ff.c **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4193:./Libraries/FatFs/Src/ff.c **** 					} else
4194:./Libraries/FatFs/Src/ff.c **** #endif
4195:./Libraries/FatFs/Src/ff.c **** 					{
4196:./Libraries/FatFs/Src/ff.c **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8831              		.loc 1 4196 21
 8832 0062 FA68     		ldr	r2, [r7, #12]
 8833              		.loc 1 4196 36
 8834 0064 7B68     		ldr	r3, [r7, #4]
 8835 0066 1B6A     		ldr	r3, [r3, #32]
 8836              		.loc 1 4196 21
 8837 0068 1946     		mov	r1, r3
 8838 006a 1046     		mov	r0, r2
 8839 006c FFF7FEFF 		bl	ld_clust
 8840 0070 0246     		mov	r2, r0
 8841              		.loc 1 4196 19
 8842 0072 3B69     		ldr	r3, [r7, #16]
 8843 0074 9A60     		str	r2, [r3, #8]
 8844 0076 01E0     		b	.L523
 8845              	.L524:
4197:./Libraries/FatFs/Src/ff.c **** 					}
4198:./Libraries/FatFs/Src/ff.c **** 				} else {						/* This object is a file */
4199:./Libraries/FatFs/Src/ff.c **** 					res = FR_NO_PATH;
 8846              		.loc 1 4199 10
 8847 0078 0523     		movs	r3, #5
 8848 007a FB75     		strb	r3, [r7, #23]
 8849              	.L523:
4200:./Libraries/FatFs/Src/ff.c **** 				}
4201:./Libraries/FatFs/Src/ff.c **** 			}
4202:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 8850              		.loc 1 4202 7
 8851 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8852 007e 002B     		cmp	r3, #0
 8853 0080 21D1     		bne	.L522
4203:./Libraries/FatFs/Src/ff.c **** 				obj->id = fs->id;
ARM GAS  /tmp/cceCRWeb.s 			page 230


 8854              		.loc 1 4203 17
 8855 0082 FB68     		ldr	r3, [r7, #12]
 8856 0084 DA88     		ldrh	r2, [r3, #6]
 8857              		.loc 1 4203 13
 8858 0086 3B69     		ldr	r3, [r7, #16]
 8859 0088 9A80     		strh	r2, [r3, #4]	@ movhi
4204:./Libraries/FatFs/Src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8860              		.loc 1 4204 11
 8861 008a 0021     		movs	r1, #0
 8862 008c 7868     		ldr	r0, [r7, #4]
 8863 008e FFF7FEFF 		bl	dir_sdi
 8864 0092 0346     		mov	r3, r0
 8865 0094 FB75     		strb	r3, [r7, #23]
4205:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
4206:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
 8866              		.loc 1 4206 8
 8867 0096 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8868 0098 002B     		cmp	r3, #0
 8869 009a 14D1     		bne	.L522
4207:./Libraries/FatFs/Src/ff.c **** 					if (obj->sclust) {
 8870              		.loc 1 4207 13
 8871 009c 3B69     		ldr	r3, [r7, #16]
 8872 009e 9B68     		ldr	r3, [r3, #8]
 8873              		.loc 1 4207 9
 8874 00a0 002B     		cmp	r3, #0
 8875 00a2 0DD0     		beq	.L525
4208:./Libraries/FatFs/Src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8876              		.loc 1 4208 21
 8877 00a4 0021     		movs	r1, #0
 8878 00a6 7868     		ldr	r0, [r7, #4]
 8879 00a8 FFF7FEFF 		bl	inc_lock
 8880 00ac 0246     		mov	r2, r0
 8881              		.loc 1 4208 19
 8882 00ae 3B69     		ldr	r3, [r7, #16]
 8883 00b0 1A61     		str	r2, [r3, #16]
4209:./Libraries/FatFs/Src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8884              		.loc 1 4209 15
 8885 00b2 3B69     		ldr	r3, [r7, #16]
 8886 00b4 1B69     		ldr	r3, [r3, #16]
 8887              		.loc 1 4209 10
 8888 00b6 002B     		cmp	r3, #0
 8889 00b8 05D1     		bne	.L522
 8890              		.loc 1 4209 29 discriminator 1
 8891 00ba 1223     		movs	r3, #18
 8892 00bc FB75     		strb	r3, [r7, #23]
 8893 00be 02E0     		b	.L522
 8894              	.L525:
4210:./Libraries/FatFs/Src/ff.c **** 					} else {
4211:./Libraries/FatFs/Src/ff.c **** 						obj->lockid = 0;	/* Root directory need not to be locked */
 8895              		.loc 1 4211 19
 8896 00c0 3B69     		ldr	r3, [r7, #16]
 8897 00c2 0022     		movs	r2, #0
 8898 00c4 1A61     		str	r2, [r3, #16]
 8899              	.L522:
4212:./Libraries/FatFs/Src/ff.c **** 					}
4213:./Libraries/FatFs/Src/ff.c **** 				}
4214:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 231


4215:./Libraries/FatFs/Src/ff.c **** 			}
4216:./Libraries/FatFs/Src/ff.c **** 		}
4217:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4218:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8900              		.loc 1 4218 6
 8901 00c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8902 00c8 042B     		cmp	r3, #4
 8903 00ca 01D1     		bne	.L521
 8904              		.loc 1 4218 30 discriminator 1
 8905 00cc 0523     		movs	r3, #5
 8906 00ce FB75     		strb	r3, [r7, #23]
 8907              	.L521:
4219:./Libraries/FatFs/Src/ff.c **** 	}
4220:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8908              		.loc 1 4220 5
 8909 00d0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8910 00d2 002B     		cmp	r3, #0
 8911 00d4 02D0     		beq	.L526
 8912              		.loc 1 4220 28 discriminator 1
 8913 00d6 3B69     		ldr	r3, [r7, #16]
 8914 00d8 0022     		movs	r2, #0
 8915 00da 1A60     		str	r2, [r3]
 8916              	.L526:
4221:./Libraries/FatFs/Src/ff.c **** 
4222:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 8917              		.loc 1 4222 2
 8918 00dc FB68     		ldr	r3, [r7, #12]
 8919 00de FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8920 00e0 1146     		mov	r1, r2
 8921 00e2 1846     		mov	r0, r3
 8922 00e4 FFF7FEFF 		bl	unlock_fs
 8923 00e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8924              	.L527:
4223:./Libraries/FatFs/Src/ff.c **** }
 8925              		.loc 1 4223 1 discriminator 1
 8926 00ea 1846     		mov	r0, r3
 8927 00ec 1837     		adds	r7, r7, #24
 8928              	.LCFI254:
 8929              		.cfi_def_cfa_offset 8
 8930 00ee BD46     		mov	sp, r7
 8931              	.LCFI255:
 8932              		.cfi_def_cfa_register 13
 8933              		@ sp needed
 8934 00f0 80BD     		pop	{r7, pc}
 8935              		.cfi_endproc
 8936              	.LFE382:
 8938              		.section	.text.f_closedir,"ax",%progbits
 8939              		.align	1
 8940              		.global	f_closedir
 8941              		.syntax unified
 8942              		.thumb
 8943              		.thumb_func
 8944              		.fpu fpv5-d16
 8946              	f_closedir:
 8947              	.LFB383:
4224:./Libraries/FatFs/Src/ff.c **** 
4225:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 232


4226:./Libraries/FatFs/Src/ff.c **** 
4227:./Libraries/FatFs/Src/ff.c **** 
4228:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4229:./Libraries/FatFs/Src/ff.c **** /* Close Directory                                                       */
4230:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4231:./Libraries/FatFs/Src/ff.c **** 
4232:./Libraries/FatFs/Src/ff.c **** FRESULT f_closedir (
4233:./Libraries/FatFs/Src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4234:./Libraries/FatFs/Src/ff.c **** )
4235:./Libraries/FatFs/Src/ff.c **** {
 8948              		.loc 1 4235 1
 8949              		.cfi_startproc
 8950              		@ args = 0, pretend = 0, frame = 16
 8951              		@ frame_needed = 1, uses_anonymous_args = 0
 8952 0000 80B5     		push	{r7, lr}
 8953              	.LCFI256:
 8954              		.cfi_def_cfa_offset 8
 8955              		.cfi_offset 7, -8
 8956              		.cfi_offset 14, -4
 8957 0002 84B0     		sub	sp, sp, #16
 8958              	.LCFI257:
 8959              		.cfi_def_cfa_offset 24
 8960 0004 00AF     		add	r7, sp, #0
 8961              	.LCFI258:
 8962              		.cfi_def_cfa_register 7
 8963 0006 7860     		str	r0, [r7, #4]
4236:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4237:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4238:./Libraries/FatFs/Src/ff.c **** 
4239:./Libraries/FatFs/Src/ff.c **** 
4240:./Libraries/FatFs/Src/ff.c **** 	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8964              		.loc 1 4240 8
 8965 0008 7B68     		ldr	r3, [r7, #4]
 8966 000a 07F10802 		add	r2, r7, #8
 8967 000e 1146     		mov	r1, r2
 8968 0010 1846     		mov	r0, r3
 8969 0012 FFF7FEFF 		bl	validate
 8970 0016 0346     		mov	r3, r0
 8971 0018 FB73     		strb	r3, [r7, #15]
4241:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 8972              		.loc 1 4241 5
 8973 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8974 001c 002B     		cmp	r3, #0
 8975 001e 15D1     		bne	.L529
4242:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
4243:./Libraries/FatFs/Src/ff.c **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8976              		.loc 1 4243 14
 8977 0020 7B68     		ldr	r3, [r7, #4]
 8978 0022 1B69     		ldr	r3, [r3, #16]
 8979              		.loc 1 4243 6
 8980 0024 002B     		cmp	r3, #0
 8981 0026 06D0     		beq	.L530
4244:./Libraries/FatFs/Src/ff.c **** 			res = dec_lock(dp->obj.lockid);
 8982              		.loc 1 4244 10
 8983 0028 7B68     		ldr	r3, [r7, #4]
 8984 002a 1B69     		ldr	r3, [r3, #16]
 8985 002c 1846     		mov	r0, r3
ARM GAS  /tmp/cceCRWeb.s 			page 233


 8986 002e FFF7FEFF 		bl	dec_lock
 8987 0032 0346     		mov	r3, r0
 8988 0034 FB73     		strb	r3, [r7, #15]
 8989              	.L530:
4245:./Libraries/FatFs/Src/ff.c **** 		}
4246:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK)
 8990              		.loc 1 4246 6
 8991 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8992 0038 002B     		cmp	r3, #0
 8993 003a 02D1     		bne	.L531
4247:./Libraries/FatFs/Src/ff.c **** #endif
4248:./Libraries/FatFs/Src/ff.c **** 		{
4249:./Libraries/FatFs/Src/ff.c **** 			dp->obj.fs = 0;			/* Invalidate directory object */
 8994              		.loc 1 4249 15
 8995 003c 7B68     		ldr	r3, [r7, #4]
 8996 003e 0022     		movs	r2, #0
 8997 0040 1A60     		str	r2, [r3]
 8998              	.L531:
4250:./Libraries/FatFs/Src/ff.c **** 		}
4251:./Libraries/FatFs/Src/ff.c **** #if _FS_REENTRANT
4252:./Libraries/FatFs/Src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8999              		.loc 1 4252 3
 9000 0042 BB68     		ldr	r3, [r7, #8]
 9001 0044 0021     		movs	r1, #0
 9002 0046 1846     		mov	r0, r3
 9003 0048 FFF7FEFF 		bl	unlock_fs
 9004              	.L529:
4253:./Libraries/FatFs/Src/ff.c **** #endif
4254:./Libraries/FatFs/Src/ff.c **** 	}
4255:./Libraries/FatFs/Src/ff.c **** 	return res;
 9005              		.loc 1 4255 9
 9006 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
4256:./Libraries/FatFs/Src/ff.c **** }
 9007              		.loc 1 4256 1
 9008 004e 1846     		mov	r0, r3
 9009 0050 1037     		adds	r7, r7, #16
 9010              	.LCFI259:
 9011              		.cfi_def_cfa_offset 8
 9012 0052 BD46     		mov	sp, r7
 9013              	.LCFI260:
 9014              		.cfi_def_cfa_register 13
 9015              		@ sp needed
 9016 0054 80BD     		pop	{r7, pc}
 9017              		.cfi_endproc
 9018              	.LFE383:
 9020              		.section	.text.f_readdir,"ax",%progbits
 9021              		.align	1
 9022              		.global	f_readdir
 9023              		.syntax unified
 9024              		.thumb
 9025              		.thumb_func
 9026              		.fpu fpv5-d16
 9028              	f_readdir:
 9029              	.LFB384:
4257:./Libraries/FatFs/Src/ff.c **** 
4258:./Libraries/FatFs/Src/ff.c **** 
4259:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 234


4260:./Libraries/FatFs/Src/ff.c **** 
4261:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4262:./Libraries/FatFs/Src/ff.c **** /* Read Directory Entries in Sequence                                    */
4263:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4264:./Libraries/FatFs/Src/ff.c **** 
4265:./Libraries/FatFs/Src/ff.c **** FRESULT f_readdir (
4266:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4267:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4268:./Libraries/FatFs/Src/ff.c **** )
4269:./Libraries/FatFs/Src/ff.c **** {
 9030              		.loc 1 4269 1
 9031              		.cfi_startproc
 9032              		@ args = 0, pretend = 0, frame = 16
 9033              		@ frame_needed = 1, uses_anonymous_args = 0
 9034 0000 80B5     		push	{r7, lr}
 9035              	.LCFI261:
 9036              		.cfi_def_cfa_offset 8
 9037              		.cfi_offset 7, -8
 9038              		.cfi_offset 14, -4
 9039 0002 84B0     		sub	sp, sp, #16
 9040              	.LCFI262:
 9041              		.cfi_def_cfa_offset 24
 9042 0004 00AF     		add	r7, sp, #0
 9043              	.LCFI263:
 9044              		.cfi_def_cfa_register 7
 9045 0006 7860     		str	r0, [r7, #4]
 9046 0008 3960     		str	r1, [r7]
4270:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4271:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4272:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4273:./Libraries/FatFs/Src/ff.c **** 
4274:./Libraries/FatFs/Src/ff.c **** 
4275:./Libraries/FatFs/Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 9047              		.loc 1 4275 8
 9048 000a 7B68     		ldr	r3, [r7, #4]
 9049 000c 07F10802 		add	r2, r7, #8
 9050 0010 1146     		mov	r1, r2
 9051 0012 1846     		mov	r0, r3
 9052 0014 FFF7FEFF 		bl	validate
 9053 0018 0346     		mov	r3, r0
 9054 001a FB73     		strb	r3, [r7, #15]
4276:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 9055              		.loc 1 4276 5
 9056 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9057 001e 002B     		cmp	r3, #0
 9058 0020 26D1     		bne	.L534
4277:./Libraries/FatFs/Src/ff.c **** 		if (!fno) {
 9059              		.loc 1 4277 6
 9060 0022 3B68     		ldr	r3, [r7]
 9061 0024 002B     		cmp	r3, #0
 9062 0026 06D1     		bne	.L535
4278:./Libraries/FatFs/Src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 9063              		.loc 1 4278 10
 9064 0028 0021     		movs	r1, #0
 9065 002a 7868     		ldr	r0, [r7, #4]
 9066 002c FFF7FEFF 		bl	dir_sdi
 9067 0030 0346     		mov	r3, r0
ARM GAS  /tmp/cceCRWeb.s 			page 235


 9068 0032 FB73     		strb	r3, [r7, #15]
 9069 0034 1CE0     		b	.L534
 9070              	.L535:
4279:./Libraries/FatFs/Src/ff.c **** 		} else {
4280:./Libraries/FatFs/Src/ff.c **** 			INIT_NAMBUF(fs);
4281:./Libraries/FatFs/Src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 9071              		.loc 1 4281 10
 9072 0036 0021     		movs	r1, #0
 9073 0038 7868     		ldr	r0, [r7, #4]
 9074 003a FFF7FEFF 		bl	dir_read
 9075 003e 0346     		mov	r3, r0
 9076 0040 FB73     		strb	r3, [r7, #15]
4282:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 9077              		.loc 1 4282 7
 9078 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9079 0044 042B     		cmp	r3, #4
 9080 0046 01D1     		bne	.L536
 9081              		.loc 1 4282 31 discriminator 1
 9082 0048 0023     		movs	r3, #0
 9083 004a FB73     		strb	r3, [r7, #15]
 9084              	.L536:
4283:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 9085              		.loc 1 4283 7
 9086 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9087 004e 002B     		cmp	r3, #0
 9088 0050 0ED1     		bne	.L534
4284:./Libraries/FatFs/Src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 9089              		.loc 1 4284 5
 9090 0052 3968     		ldr	r1, [r7]
 9091 0054 7868     		ldr	r0, [r7, #4]
 9092 0056 FFF7FEFF 		bl	get_fileinfo
4285:./Libraries/FatFs/Src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 9093              		.loc 1 4285 11
 9094 005a 0021     		movs	r1, #0
 9095 005c 7868     		ldr	r0, [r7, #4]
 9096 005e FFF7FEFF 		bl	dir_next
 9097 0062 0346     		mov	r3, r0
 9098 0064 FB73     		strb	r3, [r7, #15]
4286:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 9099              		.loc 1 4286 8
 9100 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 9101 0068 042B     		cmp	r3, #4
 9102 006a 01D1     		bne	.L534
 9103              		.loc 1 4286 32 discriminator 1
 9104 006c 0023     		movs	r3, #0
 9105 006e FB73     		strb	r3, [r7, #15]
 9106              	.L534:
4287:./Libraries/FatFs/Src/ff.c **** 			}
4288:./Libraries/FatFs/Src/ff.c **** 			FREE_NAMBUF();
4289:./Libraries/FatFs/Src/ff.c **** 		}
4290:./Libraries/FatFs/Src/ff.c **** 	}
4291:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 9107              		.loc 1 4291 2
 9108 0070 BB68     		ldr	r3, [r7, #8]
 9109 0072 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 9110 0074 1146     		mov	r1, r2
 9111 0076 1846     		mov	r0, r3
ARM GAS  /tmp/cceCRWeb.s 			page 236


 9112 0078 FFF7FEFF 		bl	unlock_fs
 9113 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
4292:./Libraries/FatFs/Src/ff.c **** }
 9114              		.loc 1 4292 1
 9115 007e 1846     		mov	r0, r3
 9116 0080 1037     		adds	r7, r7, #16
 9117              	.LCFI264:
 9118              		.cfi_def_cfa_offset 8
 9119 0082 BD46     		mov	sp, r7
 9120              	.LCFI265:
 9121              		.cfi_def_cfa_register 13
 9122              		@ sp needed
 9123 0084 80BD     		pop	{r7, pc}
 9124              		.cfi_endproc
 9125              	.LFE384:
 9127              		.section	.text.f_stat,"ax",%progbits
 9128              		.align	1
 9129              		.global	f_stat
 9130              		.syntax unified
 9131              		.thumb
 9132              		.thumb_func
 9133              		.fpu fpv5-d16
 9135              	f_stat:
 9136              	.LFB385:
4293:./Libraries/FatFs/Src/ff.c **** 
4294:./Libraries/FatFs/Src/ff.c **** 
4295:./Libraries/FatFs/Src/ff.c **** 
4296:./Libraries/FatFs/Src/ff.c **** #if _USE_FIND
4297:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4298:./Libraries/FatFs/Src/ff.c **** /* Find Next File                                                        */
4299:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4300:./Libraries/FatFs/Src/ff.c **** 
4301:./Libraries/FatFs/Src/ff.c **** FRESULT f_findnext (
4302:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4303:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4304:./Libraries/FatFs/Src/ff.c **** )
4305:./Libraries/FatFs/Src/ff.c **** {
4306:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4307:./Libraries/FatFs/Src/ff.c **** 
4308:./Libraries/FatFs/Src/ff.c **** 
4309:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
4310:./Libraries/FatFs/Src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4311:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4312:./Libraries/FatFs/Src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4313:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0 && _USE_FIND == 2
4314:./Libraries/FatFs/Src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4315:./Libraries/FatFs/Src/ff.c **** #endif
4316:./Libraries/FatFs/Src/ff.c **** 	}
4317:./Libraries/FatFs/Src/ff.c **** 	return res;
4318:./Libraries/FatFs/Src/ff.c **** }
4319:./Libraries/FatFs/Src/ff.c **** 
4320:./Libraries/FatFs/Src/ff.c **** 
4321:./Libraries/FatFs/Src/ff.c **** 
4322:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4323:./Libraries/FatFs/Src/ff.c **** /* Find First File                                                       */
4324:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4325:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 237


4326:./Libraries/FatFs/Src/ff.c **** FRESULT f_findfirst (
4327:./Libraries/FatFs/Src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4328:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4329:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4330:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4331:./Libraries/FatFs/Src/ff.c **** )
4332:./Libraries/FatFs/Src/ff.c **** {
4333:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4334:./Libraries/FatFs/Src/ff.c **** 
4335:./Libraries/FatFs/Src/ff.c **** 
4336:./Libraries/FatFs/Src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4337:./Libraries/FatFs/Src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4338:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
4339:./Libraries/FatFs/Src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4340:./Libraries/FatFs/Src/ff.c **** 	}
4341:./Libraries/FatFs/Src/ff.c **** 	return res;
4342:./Libraries/FatFs/Src/ff.c **** }
4343:./Libraries/FatFs/Src/ff.c **** 
4344:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_FIND */
4345:./Libraries/FatFs/Src/ff.c **** 
4346:./Libraries/FatFs/Src/ff.c **** 
4347:./Libraries/FatFs/Src/ff.c **** 
4348:./Libraries/FatFs/Src/ff.c **** #if _FS_MINIMIZE == 0
4349:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4350:./Libraries/FatFs/Src/ff.c **** /* Get File Status                                                       */
4351:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4352:./Libraries/FatFs/Src/ff.c **** 
4353:./Libraries/FatFs/Src/ff.c **** FRESULT f_stat (
4354:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4355:./Libraries/FatFs/Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4356:./Libraries/FatFs/Src/ff.c **** )
4357:./Libraries/FatFs/Src/ff.c **** {
 9137              		.loc 1 4357 1
 9138              		.cfi_startproc
 9139              		@ args = 0, pretend = 0, frame = 64
 9140              		@ frame_needed = 1, uses_anonymous_args = 0
 9141 0000 80B5     		push	{r7, lr}
 9142              	.LCFI266:
 9143              		.cfi_def_cfa_offset 8
 9144              		.cfi_offset 7, -8
 9145              		.cfi_offset 14, -4
 9146 0002 90B0     		sub	sp, sp, #64
 9147              	.LCFI267:
 9148              		.cfi_def_cfa_offset 72
 9149 0004 00AF     		add	r7, sp, #0
 9150              	.LCFI268:
 9151              		.cfi_def_cfa_register 7
 9152 0006 7860     		str	r0, [r7, #4]
 9153 0008 3960     		str	r1, [r7]
4358:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4359:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
4360:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4361:./Libraries/FatFs/Src/ff.c **** 
4362:./Libraries/FatFs/Src/ff.c **** 
4363:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4364:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
 9154              		.loc 1 4364 8
ARM GAS  /tmp/cceCRWeb.s 			page 238


 9155 000a 07F10C01 		add	r1, r7, #12
 9156 000e 3B1D     		adds	r3, r7, #4
 9157 0010 0022     		movs	r2, #0
 9158 0012 1846     		mov	r0, r3
 9159 0014 FFF7FEFF 		bl	find_volume
 9160 0018 0346     		mov	r3, r0
 9161 001a 87F83F30 		strb	r3, [r7, #63]
4365:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 9162              		.loc 1 4365 5
 9163 001e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9164 0022 002B     		cmp	r3, #0
 9165 0024 1FD1     		bne	.L539
4366:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4367:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 9166              		.loc 1 4367 9
 9167 0026 7A68     		ldr	r2, [r7, #4]
 9168 0028 07F10C03 		add	r3, r7, #12
 9169 002c 1146     		mov	r1, r2
 9170 002e 1846     		mov	r0, r3
 9171 0030 FFF7FEFF 		bl	follow_path
 9172 0034 0346     		mov	r3, r0
 9173 0036 87F83F30 		strb	r3, [r7, #63]
4368:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 9174              		.loc 1 4368 6
 9175 003a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 9176 003e 002B     		cmp	r3, #0
 9177 0040 11D1     		bne	.L539
4369:./Libraries/FatFs/Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 9178              		.loc 1 4369 13
 9179 0042 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 9180              		.loc 1 4369 8
 9181 0046 5BB2     		sxtb	r3, r3
 9182              		.loc 1 4369 7
 9183 0048 002B     		cmp	r3, #0
 9184 004a 03DA     		bge	.L540
4370:./Libraries/FatFs/Src/ff.c **** 				res = FR_INVALID_NAME;
 9185              		.loc 1 4370 9
 9186 004c 0623     		movs	r3, #6
 9187 004e 87F83F30 		strb	r3, [r7, #63]
 9188 0052 08E0     		b	.L539
 9189              	.L540:
4371:./Libraries/FatFs/Src/ff.c **** 			} else {							/* Found an object */
4372:./Libraries/FatFs/Src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 9190              		.loc 1 4372 8
 9191 0054 3B68     		ldr	r3, [r7]
 9192 0056 002B     		cmp	r3, #0
 9193 0058 05D0     		beq	.L539
 9194              		.loc 1 4372 14 discriminator 1
 9195 005a 07F10C03 		add	r3, r7, #12
 9196 005e 3968     		ldr	r1, [r7]
 9197 0060 1846     		mov	r0, r3
 9198 0062 FFF7FEFF 		bl	get_fileinfo
 9199              	.L539:
4373:./Libraries/FatFs/Src/ff.c **** 			}
4374:./Libraries/FatFs/Src/ff.c **** 		}
4375:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4376:./Libraries/FatFs/Src/ff.c **** 	}
ARM GAS  /tmp/cceCRWeb.s 			page 239


4377:./Libraries/FatFs/Src/ff.c **** 
4378:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
 9200              		.loc 1 4378 2
 9201 0066 FB68     		ldr	r3, [r7, #12]
 9202 0068 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 9203 006c 1146     		mov	r1, r2
 9204 006e 1846     		mov	r0, r3
 9205 0070 FFF7FEFF 		bl	unlock_fs
 9206 0074 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
4379:./Libraries/FatFs/Src/ff.c **** }
 9207              		.loc 1 4379 1
 9208 0078 1846     		mov	r0, r3
 9209 007a 4037     		adds	r7, r7, #64
 9210              	.LCFI269:
 9211              		.cfi_def_cfa_offset 8
 9212 007c BD46     		mov	sp, r7
 9213              	.LCFI270:
 9214              		.cfi_def_cfa_register 13
 9215              		@ sp needed
 9216 007e 80BD     		pop	{r7, pc}
 9217              		.cfi_endproc
 9218              	.LFE385:
 9220              		.section	.text.f_getfree,"ax",%progbits
 9221              		.align	1
 9222              		.global	f_getfree
 9223              		.syntax unified
 9224              		.thumb
 9225              		.thumb_func
 9226              		.fpu fpv5-d16
 9228              	f_getfree:
 9229              	.LFB386:
4380:./Libraries/FatFs/Src/ff.c **** 
4381:./Libraries/FatFs/Src/ff.c **** 
4382:./Libraries/FatFs/Src/ff.c **** 
4383:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
4384:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4385:./Libraries/FatFs/Src/ff.c **** /* Get Number of Free Clusters                                           */
4386:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4387:./Libraries/FatFs/Src/ff.c **** 
4388:./Libraries/FatFs/Src/ff.c **** FRESULT f_getfree (
4389:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4390:./Libraries/FatFs/Src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4391:./Libraries/FatFs/Src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4392:./Libraries/FatFs/Src/ff.c **** )
4393:./Libraries/FatFs/Src/ff.c **** {
 9230              		.loc 1 4393 1
 9231              		.cfi_startproc
 9232              		@ args = 0, pretend = 0, frame = 72
 9233              		@ frame_needed = 1, uses_anonymous_args = 0
 9234 0000 80B5     		push	{r7, lr}
 9235              	.LCFI271:
 9236              		.cfi_def_cfa_offset 8
 9237              		.cfi_offset 7, -8
 9238              		.cfi_offset 14, -4
 9239 0002 92B0     		sub	sp, sp, #72
 9240              	.LCFI272:
 9241              		.cfi_def_cfa_offset 80
ARM GAS  /tmp/cceCRWeb.s 			page 240


 9242 0004 00AF     		add	r7, sp, #0
 9243              	.LCFI273:
 9244              		.cfi_def_cfa_register 7
 9245 0006 F860     		str	r0, [r7, #12]
 9246 0008 B960     		str	r1, [r7, #8]
 9247 000a 7A60     		str	r2, [r7, #4]
4394:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4395:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4396:./Libraries/FatFs/Src/ff.c **** 	DWORD nfree, clst, sect, stat;
4397:./Libraries/FatFs/Src/ff.c **** 	UINT i;
4398:./Libraries/FatFs/Src/ff.c **** 	BYTE *p;
4399:./Libraries/FatFs/Src/ff.c **** 	_FDID obj;
4400:./Libraries/FatFs/Src/ff.c **** 
4401:./Libraries/FatFs/Src/ff.c **** 
4402:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4403:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 9248              		.loc 1 4403 8
 9249 000c 07F12801 		add	r1, r7, #40
 9250 0010 07F10C03 		add	r3, r7, #12
 9251 0014 0022     		movs	r2, #0
 9252 0016 1846     		mov	r0, r3
 9253 0018 FFF7FEFF 		bl	find_volume
 9254 001c 0346     		mov	r3, r0
 9255 001e 87F84730 		strb	r3, [r7, #71]
4404:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 9256              		.loc 1 4404 5
 9257 0022 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 9258 0026 002B     		cmp	r3, #0
 9259 0028 40F09980 		bne	.L543
4405:./Libraries/FatFs/Src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 9260              		.loc 1 4405 10
 9261 002c BA6A     		ldr	r2, [r7, #40]
 9262 002e 7B68     		ldr	r3, [r7, #4]
 9263 0030 1A60     		str	r2, [r3]
4406:./Libraries/FatFs/Src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
4407:./Libraries/FatFs/Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 9264              		.loc 1 4407 9
 9265 0032 BB6A     		ldr	r3, [r7, #40]
 9266 0034 5A69     		ldr	r2, [r3, #20]
 9267              		.loc 1 4407 26
 9268 0036 BB6A     		ldr	r3, [r7, #40]
 9269 0038 9B69     		ldr	r3, [r3, #24]
 9270              		.loc 1 4407 37
 9271 003a 023B     		subs	r3, r3, #2
 9272              		.loc 1 4407 6
 9273 003c 9A42     		cmp	r2, r3
 9274 003e 04D8     		bhi	.L544
4408:./Libraries/FatFs/Src/ff.c **** 			*nclst = fs->free_clst;
 9275              		.loc 1 4408 15
 9276 0040 BB6A     		ldr	r3, [r7, #40]
 9277 0042 5A69     		ldr	r2, [r3, #20]
 9278              		.loc 1 4408 11
 9279 0044 BB68     		ldr	r3, [r7, #8]
 9280 0046 1A60     		str	r2, [r3]
 9281 0048 89E0     		b	.L543
 9282              	.L544:
4409:./Libraries/FatFs/Src/ff.c **** 		} else {
ARM GAS  /tmp/cceCRWeb.s 			page 241


4410:./Libraries/FatFs/Src/ff.c **** 			/* Get number of free clusters */
4411:./Libraries/FatFs/Src/ff.c **** 			nfree = 0;
 9283              		.loc 1 4411 10
 9284 004a 0023     		movs	r3, #0
 9285 004c 3B64     		str	r3, [r7, #64]
4412:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 9286              		.loc 1 4412 10
 9287 004e BB6A     		ldr	r3, [r7, #40]
 9288 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9289              		.loc 1 4412 7
 9290 0052 012B     		cmp	r3, #1
 9291 0054 28D1     		bne	.L545
4413:./Libraries/FatFs/Src/ff.c **** 				clst = 2; obj.fs = fs;
 9292              		.loc 1 4413 10
 9293 0056 0223     		movs	r3, #2
 9294 0058 FB63     		str	r3, [r7, #60]
 9295              		.loc 1 4413 22
 9296 005a BB6A     		ldr	r3, [r7, #40]
 9297 005c 7B61     		str	r3, [r7, #20]
 9298              	.L550:
4414:./Libraries/FatFs/Src/ff.c **** 				do {
4415:./Libraries/FatFs/Src/ff.c **** 					stat = get_fat(&obj, clst);
 9299              		.loc 1 4415 13
 9300 005e 07F11403 		add	r3, r7, #20
 9301 0062 F96B     		ldr	r1, [r7, #60]
 9302 0064 1846     		mov	r0, r3
 9303 0066 FFF7FEFF 		bl	get_fat
 9304 006a F862     		str	r0, [r7, #44]
4416:./Libraries/FatFs/Src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 9305              		.loc 1 4416 9
 9306 006c FB6A     		ldr	r3, [r7, #44]
 9307 006e B3F1FF3F 		cmp	r3, #-1
 9308 0072 03D1     		bne	.L546
 9309              		.loc 1 4416 36 discriminator 1
 9310 0074 0123     		movs	r3, #1
 9311 0076 87F84730 		strb	r3, [r7, #71]
 9312              		.loc 1 4416 6 discriminator 1
 9313 007a 63E0     		b	.L551
 9314              	.L546:
4417:./Libraries/FatFs/Src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 9315              		.loc 1 4417 9
 9316 007c FB6A     		ldr	r3, [r7, #44]
 9317 007e 012B     		cmp	r3, #1
 9318 0080 03D1     		bne	.L548
 9319              		.loc 1 4417 27 discriminator 1
 9320 0082 0223     		movs	r3, #2
 9321 0084 87F84730 		strb	r3, [r7, #71]
 9322              		.loc 1 4417 6 discriminator 1
 9323 0088 5CE0     		b	.L551
 9324              	.L548:
4418:./Libraries/FatFs/Src/ff.c **** 					if (stat == 0) nfree++;
 9325              		.loc 1 4418 9
 9326 008a FB6A     		ldr	r3, [r7, #44]
 9327 008c 002B     		cmp	r3, #0
 9328 008e 02D1     		bne	.L549
 9329              		.loc 1 4418 26 discriminator 1
 9330 0090 3B6C     		ldr	r3, [r7, #64]
ARM GAS  /tmp/cceCRWeb.s 			page 242


 9331 0092 0133     		adds	r3, r3, #1
 9332 0094 3B64     		str	r3, [r7, #64]
 9333              	.L549:
4419:./Libraries/FatFs/Src/ff.c **** 				} while (++clst < fs->n_fatent);
 9334              		.loc 1 4419 5
 9335 0096 FB6B     		ldr	r3, [r7, #60]
 9336 0098 0133     		adds	r3, r3, #1
 9337 009a FB63     		str	r3, [r7, #60]
 9338              		.loc 1 4419 25
 9339 009c BB6A     		ldr	r3, [r7, #40]
 9340 009e 9B69     		ldr	r3, [r3, #24]
 9341              		.loc 1 4419 5
 9342 00a0 FA6B     		ldr	r2, [r7, #60]
 9343 00a2 9A42     		cmp	r2, r3
 9344 00a4 DBD3     		bcc	.L550
 9345 00a6 4DE0     		b	.L551
 9346              	.L545:
4420:./Libraries/FatFs/Src/ff.c **** 			} else {
4421:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4422:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4423:./Libraries/FatFs/Src/ff.c **** 					BYTE bm;
4424:./Libraries/FatFs/Src/ff.c **** 					UINT b;
4425:./Libraries/FatFs/Src/ff.c **** 
4426:./Libraries/FatFs/Src/ff.c **** 					clst = fs->n_fatent - 2;
4427:./Libraries/FatFs/Src/ff.c **** 					sect = fs->database;
4428:./Libraries/FatFs/Src/ff.c **** 					i = 0;
4429:./Libraries/FatFs/Src/ff.c **** 					do {
4430:./Libraries/FatFs/Src/ff.c **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
4431:./Libraries/FatFs/Src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4432:./Libraries/FatFs/Src/ff.c **** 							if (!(bm & 1)) nfree++;
4433:./Libraries/FatFs/Src/ff.c **** 							bm >>= 1;
4434:./Libraries/FatFs/Src/ff.c **** 						}
4435:./Libraries/FatFs/Src/ff.c **** 						i = (i + 1) % SS(fs);
4436:./Libraries/FatFs/Src/ff.c **** 					} while (clst);
4437:./Libraries/FatFs/Src/ff.c **** 				} else
4438:./Libraries/FatFs/Src/ff.c **** #endif
4439:./Libraries/FatFs/Src/ff.c **** 				{	/* FAT16/32: Sector alighed FAT entries */
4440:./Libraries/FatFs/Src/ff.c **** 					clst = fs->n_fatent; sect = fs->fatbase;
 9347              		.loc 1 4440 15
 9348 00a8 BB6A     		ldr	r3, [r7, #40]
 9349              		.loc 1 4440 11
 9350 00aa 9B69     		ldr	r3, [r3, #24]
 9351 00ac FB63     		str	r3, [r7, #60]
 9352              		.loc 1 4440 36
 9353 00ae BB6A     		ldr	r3, [r7, #40]
 9354              		.loc 1 4440 32
 9355 00b0 5B6A     		ldr	r3, [r3, #36]
 9356 00b2 BB63     		str	r3, [r7, #56]
4441:./Libraries/FatFs/Src/ff.c **** 					i = 0; p = 0;
 9357              		.loc 1 4441 8
 9358 00b4 0023     		movs	r3, #0
 9359 00b6 7B63     		str	r3, [r7, #52]
 9360              		.loc 1 4441 15
 9361 00b8 0023     		movs	r3, #0
 9362 00ba 3B63     		str	r3, [r7, #48]
 9363              	.L558:
4442:./Libraries/FatFs/Src/ff.c **** 					do {
ARM GAS  /tmp/cceCRWeb.s 			page 243


4443:./Libraries/FatFs/Src/ff.c **** 						if (i == 0) {
 9364              		.loc 1 4443 10
 9365 00bc 7B6B     		ldr	r3, [r7, #52]
 9366 00be 002B     		cmp	r3, #0
 9367 00c0 13D1     		bne	.L552
4444:./Libraries/FatFs/Src/ff.c **** 							res = move_window(fs, sect++);
 9368              		.loc 1 4444 14
 9369 00c2 B86A     		ldr	r0, [r7, #40]
 9370 00c4 BB6B     		ldr	r3, [r7, #56]
 9371 00c6 5A1C     		adds	r2, r3, #1
 9372 00c8 BA63     		str	r2, [r7, #56]
 9373 00ca 1946     		mov	r1, r3
 9374 00cc FFF7FEFF 		bl	move_window
 9375 00d0 0346     		mov	r3, r0
 9376 00d2 87F84730 		strb	r3, [r7, #71]
4445:./Libraries/FatFs/Src/ff.c **** 							if (res != FR_OK) break;
 9377              		.loc 1 4445 11
 9378 00d6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 9379 00da 002B     		cmp	r3, #0
 9380 00dc 31D1     		bne	.L560
4446:./Libraries/FatFs/Src/ff.c **** 							p = fs->win;
 9381              		.loc 1 4446 14
 9382 00de BB6A     		ldr	r3, [r7, #40]
 9383              		.loc 1 4446 10
 9384 00e0 3433     		adds	r3, r3, #52
 9385 00e2 3B63     		str	r3, [r7, #48]
4447:./Libraries/FatFs/Src/ff.c **** 							i = SS(fs);
 9386              		.loc 1 4447 10
 9387 00e4 4FF40073 		mov	r3, #512
 9388 00e8 7B63     		str	r3, [r7, #52]
 9389              	.L552:
4448:./Libraries/FatFs/Src/ff.c **** 						}
4449:./Libraries/FatFs/Src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
 9390              		.loc 1 4449 13
 9391 00ea BB6A     		ldr	r3, [r7, #40]
 9392 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9393              		.loc 1 4449 10
 9394 00ee 022B     		cmp	r3, #2
 9395 00f0 0FD1     		bne	.L554
4450:./Libraries/FatFs/Src/ff.c **** 							if (ld_word(p) == 0) nfree++;
 9396              		.loc 1 4450 12
 9397 00f2 386B     		ldr	r0, [r7, #48]
 9398 00f4 FFF7FEFF 		bl	ld_word
 9399 00f8 0346     		mov	r3, r0
 9400              		.loc 1 4450 11
 9401 00fa 002B     		cmp	r3, #0
 9402 00fc 02D1     		bne	.L555
 9403              		.loc 1 4450 34 discriminator 1
 9404 00fe 3B6C     		ldr	r3, [r7, #64]
 9405 0100 0133     		adds	r3, r3, #1
 9406 0102 3B64     		str	r3, [r7, #64]
 9407              	.L555:
4451:./Libraries/FatFs/Src/ff.c **** 							p += 2; i -= 2;
 9408              		.loc 1 4451 10
 9409 0104 3B6B     		ldr	r3, [r7, #48]
 9410 0106 0233     		adds	r3, r3, #2
 9411 0108 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/cceCRWeb.s 			page 244


 9412              		.loc 1 4451 18
 9413 010a 7B6B     		ldr	r3, [r7, #52]
 9414 010c 023B     		subs	r3, r3, #2
 9415 010e 7B63     		str	r3, [r7, #52]
 9416 0110 10E0     		b	.L556
 9417              	.L554:
4452:./Libraries/FatFs/Src/ff.c **** 						} else {
4453:./Libraries/FatFs/Src/ff.c **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 9418              		.loc 1 4453 13
 9419 0112 386B     		ldr	r0, [r7, #48]
 9420 0114 FFF7FEFF 		bl	ld_dword
 9421 0118 0346     		mov	r3, r0
 9422              		.loc 1 4453 25
 9423 011a 23F07043 		bic	r3, r3, #-268435456
 9424              		.loc 1 4453 11
 9425 011e 002B     		cmp	r3, #0
 9426 0120 02D1     		bne	.L557
 9427              		.loc 1 4453 50 discriminator 1
 9428 0122 3B6C     		ldr	r3, [r7, #64]
 9429 0124 0133     		adds	r3, r3, #1
 9430 0126 3B64     		str	r3, [r7, #64]
 9431              	.L557:
4454:./Libraries/FatFs/Src/ff.c **** 							p += 4; i -= 4;
 9432              		.loc 1 4454 10
 9433 0128 3B6B     		ldr	r3, [r7, #48]
 9434 012a 0433     		adds	r3, r3, #4
 9435 012c 3B63     		str	r3, [r7, #48]
 9436              		.loc 1 4454 18
 9437 012e 7B6B     		ldr	r3, [r7, #52]
 9438 0130 043B     		subs	r3, r3, #4
 9439 0132 7B63     		str	r3, [r7, #52]
 9440              	.L556:
4455:./Libraries/FatFs/Src/ff.c **** 						}
4456:./Libraries/FatFs/Src/ff.c **** 					} while (--clst);
 9441              		.loc 1 4456 6
 9442 0134 FB6B     		ldr	r3, [r7, #60]
 9443 0136 013B     		subs	r3, r3, #1
 9444 0138 FB63     		str	r3, [r7, #60]
 9445 013a FB6B     		ldr	r3, [r7, #60]
 9446 013c 002B     		cmp	r3, #0
 9447 013e BDD1     		bne	.L558
 9448 0140 00E0     		b	.L551
 9449              	.L560:
4445:./Libraries/FatFs/Src/ff.c **** 							p = fs->win;
 9450              		.loc 1 4445 8
 9451 0142 00BF     		nop
 9452              	.L551:
4457:./Libraries/FatFs/Src/ff.c **** 				}
4458:./Libraries/FatFs/Src/ff.c **** 			}
4459:./Libraries/FatFs/Src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
 9453              		.loc 1 4459 11
 9454 0144 BB68     		ldr	r3, [r7, #8]
 9455 0146 3A6C     		ldr	r2, [r7, #64]
 9456 0148 1A60     		str	r2, [r3]
4460:./Libraries/FatFs/Src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 9457              		.loc 1 4460 6
 9458 014a BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cceCRWeb.s 			page 245


 9459              		.loc 1 4460 18
 9460 014c 3A6C     		ldr	r2, [r7, #64]
 9461 014e 5A61     		str	r2, [r3, #20]
4461:./Libraries/FatFs/Src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 9462              		.loc 1 4461 17
 9463 0150 BB6A     		ldr	r3, [r7, #40]
 9464 0152 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 9465 0154 BB6A     		ldr	r3, [r7, #40]
 9466 0156 42F00102 		orr	r2, r2, #1
 9467 015a D2B2     		uxtb	r2, r2
 9468 015c 1A71     		strb	r2, [r3, #4]
 9469              	.L543:
4462:./Libraries/FatFs/Src/ff.c **** 		}
4463:./Libraries/FatFs/Src/ff.c **** 	}
4464:./Libraries/FatFs/Src/ff.c **** 
4465:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 9470              		.loc 1 4465 2
 9471 015e BB6A     		ldr	r3, [r7, #40]
 9472 0160 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 9473 0164 1146     		mov	r1, r2
 9474 0166 1846     		mov	r0, r3
 9475 0168 FFF7FEFF 		bl	unlock_fs
 9476 016c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
4466:./Libraries/FatFs/Src/ff.c **** }
 9477              		.loc 1 4466 1
 9478 0170 1846     		mov	r0, r3
 9479 0172 4837     		adds	r7, r7, #72
 9480              	.LCFI274:
 9481              		.cfi_def_cfa_offset 8
 9482 0174 BD46     		mov	sp, r7
 9483              	.LCFI275:
 9484              		.cfi_def_cfa_register 13
 9485              		@ sp needed
 9486 0176 80BD     		pop	{r7, pc}
 9487              		.cfi_endproc
 9488              	.LFE386:
 9490              		.section	.text.f_truncate,"ax",%progbits
 9491              		.align	1
 9492              		.global	f_truncate
 9493              		.syntax unified
 9494              		.thumb
 9495              		.thumb_func
 9496              		.fpu fpv5-d16
 9498              	f_truncate:
 9499              	.LFB387:
4467:./Libraries/FatFs/Src/ff.c **** 
4468:./Libraries/FatFs/Src/ff.c **** 
4469:./Libraries/FatFs/Src/ff.c **** 
4470:./Libraries/FatFs/Src/ff.c **** 
4471:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4472:./Libraries/FatFs/Src/ff.c **** /* Truncate File                                                         */
4473:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4474:./Libraries/FatFs/Src/ff.c **** 
4475:./Libraries/FatFs/Src/ff.c **** FRESULT f_truncate (
4476:./Libraries/FatFs/Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4477:./Libraries/FatFs/Src/ff.c **** )
4478:./Libraries/FatFs/Src/ff.c **** {
ARM GAS  /tmp/cceCRWeb.s 			page 246


 9500              		.loc 1 4478 1
 9501              		.cfi_startproc
 9502              		@ args = 0, pretend = 0, frame = 24
 9503              		@ frame_needed = 1, uses_anonymous_args = 0
 9504 0000 80B5     		push	{r7, lr}
 9505              	.LCFI276:
 9506              		.cfi_def_cfa_offset 8
 9507              		.cfi_offset 7, -8
 9508              		.cfi_offset 14, -4
 9509 0002 86B0     		sub	sp, sp, #24
 9510              	.LCFI277:
 9511              		.cfi_def_cfa_offset 32
 9512 0004 00AF     		add	r7, sp, #0
 9513              	.LCFI278:
 9514              		.cfi_def_cfa_register 7
 9515 0006 7860     		str	r0, [r7, #4]
4479:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4480:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4481:./Libraries/FatFs/Src/ff.c **** 	DWORD ncl;
4482:./Libraries/FatFs/Src/ff.c **** 
4483:./Libraries/FatFs/Src/ff.c **** 
4484:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 9516              		.loc 1 4484 8
 9517 0008 7B68     		ldr	r3, [r7, #4]
 9518 000a 07F10C02 		add	r2, r7, #12
 9519 000e 1146     		mov	r1, r2
 9520 0010 1846     		mov	r0, r3
 9521 0012 FFF7FEFF 		bl	validate
 9522 0016 0346     		mov	r3, r0
 9523 0018 FB75     		strb	r3, [r7, #23]
4485:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 9524              		.loc 1 4485 5
 9525 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9526 001c 002B     		cmp	r3, #0
 9527 001e 05D1     		bne	.L562
 9528              		.loc 1 4485 27 discriminator 2
 9529 0020 7B68     		ldr	r3, [r7, #4]
 9530 0022 5B7D     		ldrb	r3, [r3, #21]
 9531 0024 FB75     		strb	r3, [r7, #23]
 9532              		.loc 1 4485 19 discriminator 2
 9533 0026 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9534 0028 002B     		cmp	r3, #0
 9535 002a 07D0     		beq	.L563
 9536              	.L562:
 9537              		.loc 1 4485 57 discriminator 3
 9538 002c FB68     		ldr	r3, [r7, #12]
 9539 002e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9540 0030 1146     		mov	r1, r2
 9541 0032 1846     		mov	r0, r3
 9542 0034 FFF7FEFF 		bl	unlock_fs
 9543 0038 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9544 003a 88E0     		b	.L573
 9545              	.L563:
4486:./Libraries/FatFs/Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 9546              		.loc 1 4486 10
 9547 003c 7B68     		ldr	r3, [r7, #4]
 9548 003e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 247


 9549              		.loc 1 4486 17
 9550 0040 03F00203 		and	r3, r3, #2
 9551              		.loc 1 4486 5
 9552 0044 002B     		cmp	r3, #0
 9553 0046 06D1     		bne	.L565
 9554              		.loc 1 4486 30 discriminator 1
 9555 0048 FB68     		ldr	r3, [r7, #12]
 9556 004a 0721     		movs	r1, #7
 9557 004c 1846     		mov	r0, r3
 9558 004e FFF7FEFF 		bl	unlock_fs
 9559 0052 0723     		movs	r3, #7
 9560 0054 7BE0     		b	.L573
 9561              	.L565:
4487:./Libraries/FatFs/Src/ff.c **** 
4488:./Libraries/FatFs/Src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 9562              		.loc 1 4488 8
 9563 0056 7B68     		ldr	r3, [r7, #4]
 9564 0058 9A69     		ldr	r2, [r3, #24]
 9565              		.loc 1 4488 24
 9566 005a 7B68     		ldr	r3, [r7, #4]
 9567 005c DB68     		ldr	r3, [r3, #12]
 9568              		.loc 1 4488 5
 9569 005e 9A42     		cmp	r2, r3
 9570 0060 6ED2     		bcs	.L566
4489:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 9571              		.loc 1 4489 9
 9572 0062 7B68     		ldr	r3, [r7, #4]
 9573 0064 9B69     		ldr	r3, [r3, #24]
 9574              		.loc 1 4489 6
 9575 0066 002B     		cmp	r3, #0
 9576 0068 0CD1     		bne	.L567
4490:./Libraries/FatFs/Src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 9577              		.loc 1 4490 10
 9578 006a 7868     		ldr	r0, [r7, #4]
 9579 006c 7B68     		ldr	r3, [r7, #4]
 9580 006e 9B68     		ldr	r3, [r3, #8]
 9581 0070 0022     		movs	r2, #0
 9582 0072 1946     		mov	r1, r3
 9583 0074 FFF7FEFF 		bl	remove_chain
 9584 0078 0346     		mov	r3, r0
 9585 007a FB75     		strb	r3, [r7, #23]
4491:./Libraries/FatFs/Src/ff.c **** 			fp->obj.sclust = 0;
 9586              		.loc 1 4491 19
 9587 007c 7B68     		ldr	r3, [r7, #4]
 9588 007e 0022     		movs	r2, #0
 9589 0080 9A60     		str	r2, [r3, #8]
 9590 0082 25E0     		b	.L568
 9591              	.L567:
4492:./Libraries/FatFs/Src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4493:./Libraries/FatFs/Src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
 9592              		.loc 1 4493 10
 9593 0084 7A68     		ldr	r2, [r7, #4]
 9594 0086 7B68     		ldr	r3, [r7, #4]
 9595 0088 DB69     		ldr	r3, [r3, #28]
 9596 008a 1946     		mov	r1, r3
 9597 008c 1046     		mov	r0, r2
 9598 008e FFF7FEFF 		bl	get_fat
ARM GAS  /tmp/cceCRWeb.s 			page 248


 9599 0092 3861     		str	r0, [r7, #16]
4494:./Libraries/FatFs/Src/ff.c **** 			res = FR_OK;
 9600              		.loc 1 4494 8
 9601 0094 0023     		movs	r3, #0
 9602 0096 FB75     		strb	r3, [r7, #23]
4495:./Libraries/FatFs/Src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9603              		.loc 1 4495 7
 9604 0098 3B69     		ldr	r3, [r7, #16]
 9605 009a B3F1FF3F 		cmp	r3, #-1
 9606 009e 01D1     		bne	.L569
 9607              		.loc 1 4495 31 discriminator 1
 9608 00a0 0123     		movs	r3, #1
 9609 00a2 FB75     		strb	r3, [r7, #23]
 9610              	.L569:
4496:./Libraries/FatFs/Src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 9611              		.loc 1 4496 7
 9612 00a4 3B69     		ldr	r3, [r7, #16]
 9613 00a6 012B     		cmp	r3, #1
 9614 00a8 01D1     		bne	.L570
 9615              		.loc 1 4496 22 discriminator 1
 9616 00aa 0223     		movs	r3, #2
 9617 00ac FB75     		strb	r3, [r7, #23]
 9618              	.L570:
4497:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9619              		.loc 1 4497 7
 9620 00ae FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9621 00b0 002B     		cmp	r3, #0
 9622 00b2 0DD1     		bne	.L568
 9623              		.loc 1 4497 32 discriminator 1
 9624 00b4 FB68     		ldr	r3, [r7, #12]
 9625 00b6 9B69     		ldr	r3, [r3, #24]
 9626              		.loc 1 4497 21 discriminator 1
 9627 00b8 3A69     		ldr	r2, [r7, #16]
 9628 00ba 9A42     		cmp	r2, r3
 9629 00bc 08D2     		bcs	.L568
4498:./Libraries/FatFs/Src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9630              		.loc 1 4498 11
 9631 00be 7868     		ldr	r0, [r7, #4]
 9632 00c0 7B68     		ldr	r3, [r7, #4]
 9633 00c2 DB69     		ldr	r3, [r3, #28]
 9634 00c4 1A46     		mov	r2, r3
 9635 00c6 3969     		ldr	r1, [r7, #16]
 9636 00c8 FFF7FEFF 		bl	remove_chain
 9637 00cc 0346     		mov	r3, r0
 9638 00ce FB75     		strb	r3, [r7, #23]
 9639              	.L568:
4499:./Libraries/FatFs/Src/ff.c **** 			}
4500:./Libraries/FatFs/Src/ff.c **** 		}
4501:./Libraries/FatFs/Src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 9640              		.loc 1 4501 23
 9641 00d0 7B68     		ldr	r3, [r7, #4]
 9642 00d2 9A69     		ldr	r2, [r3, #24]
 9643              		.loc 1 4501 19
 9644 00d4 7B68     		ldr	r3, [r7, #4]
 9645 00d6 DA60     		str	r2, [r3, #12]
4502:./Libraries/FatFs/Src/ff.c **** 		fp->flag |= FA_MODIFIED;
 9646              		.loc 1 4502 12
ARM GAS  /tmp/cceCRWeb.s 			page 249


 9647 00d8 7B68     		ldr	r3, [r7, #4]
 9648 00da 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 9649 00dc 43F04003 		orr	r3, r3, #64
 9650 00e0 DAB2     		uxtb	r2, r3
 9651 00e2 7B68     		ldr	r3, [r7, #4]
 9652 00e4 1A75     		strb	r2, [r3, #20]
4503:./Libraries/FatFs/Src/ff.c **** #if !_FS_TINY
4504:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 9653              		.loc 1 4504 6
 9654 00e6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9655 00e8 002B     		cmp	r3, #0
 9656 00ea 1BD1     		bne	.L571
 9657              		.loc 1 4504 26 discriminator 1
 9658 00ec 7B68     		ldr	r3, [r7, #4]
 9659 00ee 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 9660              		.loc 1 4504 20 discriminator 1
 9661 00f0 5BB2     		sxtb	r3, r3
 9662 00f2 002B     		cmp	r3, #0
 9663 00f4 16DA     		bge	.L571
4505:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 9664              		.loc 1 4505 21
 9665 00f6 FB68     		ldr	r3, [r7, #12]
 9666              		.loc 1 4505 8
 9667 00f8 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 9668              		.loc 1 4505 30
 9669 00fa 7B68     		ldr	r3, [r7, #4]
 9670 00fc 03F13001 		add	r1, r3, #48
 9671              		.loc 1 4505 8
 9672 0100 7B68     		ldr	r3, [r7, #4]
 9673 0102 1A6A     		ldr	r2, [r3, #32]
 9674 0104 0123     		movs	r3, #1
 9675 0106 FFF7FEFF 		bl	disk_write
 9676 010a 0346     		mov	r3, r0
 9677              		.loc 1 4505 7
 9678 010c 002B     		cmp	r3, #0
 9679 010e 02D0     		beq	.L572
4506:./Libraries/FatFs/Src/ff.c **** 				res = FR_DISK_ERR;
 9680              		.loc 1 4506 9
 9681 0110 0123     		movs	r3, #1
 9682 0112 FB75     		strb	r3, [r7, #23]
 9683 0114 06E0     		b	.L571
 9684              	.L572:
4507:./Libraries/FatFs/Src/ff.c **** 			} else {
4508:./Libraries/FatFs/Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 9685              		.loc 1 4508 14
 9686 0116 7B68     		ldr	r3, [r7, #4]
 9687 0118 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 9688 011a 03F07F03 		and	r3, r3, #127
 9689 011e DAB2     		uxtb	r2, r3
 9690 0120 7B68     		ldr	r3, [r7, #4]
 9691 0122 1A75     		strb	r2, [r3, #20]
 9692              	.L571:
4509:./Libraries/FatFs/Src/ff.c **** 			}
4510:./Libraries/FatFs/Src/ff.c **** 		}
4511:./Libraries/FatFs/Src/ff.c **** #endif
4512:./Libraries/FatFs/Src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
 9693              		.loc 1 4512 6
ARM GAS  /tmp/cceCRWeb.s 			page 250


 9694 0124 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9695 0126 002B     		cmp	r3, #0
 9696 0128 0AD0     		beq	.L566
 9697              		.loc 1 4512 21 discriminator 1
 9698 012a 7B68     		ldr	r3, [r7, #4]
 9699 012c FA7D     		ldrb	r2, [r7, #23]
 9700 012e 5A75     		strb	r2, [r3, #21]
 9701 0130 FB68     		ldr	r3, [r7, #12]
 9702 0132 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9703 0134 1146     		mov	r1, r2
 9704 0136 1846     		mov	r0, r3
 9705 0138 FFF7FEFF 		bl	unlock_fs
 9706 013c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9707 013e 06E0     		b	.L573
 9708              	.L566:
4513:./Libraries/FatFs/Src/ff.c **** 	}
4514:./Libraries/FatFs/Src/ff.c **** 
4515:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 9709              		.loc 1 4515 2
 9710 0140 FB68     		ldr	r3, [r7, #12]
 9711 0142 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9712 0144 1146     		mov	r1, r2
 9713 0146 1846     		mov	r0, r3
 9714 0148 FFF7FEFF 		bl	unlock_fs
 9715 014c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9716              	.L573:
4516:./Libraries/FatFs/Src/ff.c **** }
 9717              		.loc 1 4516 1 discriminator 1
 9718 014e 1846     		mov	r0, r3
 9719 0150 1837     		adds	r7, r7, #24
 9720              	.LCFI279:
 9721              		.cfi_def_cfa_offset 8
 9722 0152 BD46     		mov	sp, r7
 9723              	.LCFI280:
 9724              		.cfi_def_cfa_register 13
 9725              		@ sp needed
 9726 0154 80BD     		pop	{r7, pc}
 9727              		.cfi_endproc
 9728              	.LFE387:
 9730              		.section	.text.f_unlink,"ax",%progbits
 9731              		.align	1
 9732              		.global	f_unlink
 9733              		.syntax unified
 9734              		.thumb
 9735              		.thumb_func
 9736              		.fpu fpv5-d16
 9738              	f_unlink:
 9739              	.LFB388:
4517:./Libraries/FatFs/Src/ff.c **** 
4518:./Libraries/FatFs/Src/ff.c **** 
4519:./Libraries/FatFs/Src/ff.c **** 
4520:./Libraries/FatFs/Src/ff.c **** 
4521:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4522:./Libraries/FatFs/Src/ff.c **** /* Delete a File/Directory                                               */
4523:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4524:./Libraries/FatFs/Src/ff.c **** 
4525:./Libraries/FatFs/Src/ff.c **** FRESULT f_unlink (
ARM GAS  /tmp/cceCRWeb.s 			page 251


4526:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4527:./Libraries/FatFs/Src/ff.c **** )
4528:./Libraries/FatFs/Src/ff.c **** {
 9740              		.loc 1 4528 1
 9741              		.cfi_startproc
 9742              		@ args = 0, pretend = 0, frame = 120
 9743              		@ frame_needed = 1, uses_anonymous_args = 0
 9744 0000 80B5     		push	{r7, lr}
 9745              	.LCFI281:
 9746              		.cfi_def_cfa_offset 8
 9747              		.cfi_offset 7, -8
 9748              		.cfi_offset 14, -4
 9749 0002 9EB0     		sub	sp, sp, #120
 9750              	.LCFI282:
 9751              		.cfi_def_cfa_offset 128
 9752 0004 00AF     		add	r7, sp, #0
 9753              	.LCFI283:
 9754              		.cfi_def_cfa_register 7
 9755 0006 7860     		str	r0, [r7, #4]
4529:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4530:./Libraries/FatFs/Src/ff.c **** 	DIR dj, sdj;
4531:./Libraries/FatFs/Src/ff.c **** 	DWORD dclst = 0;
 9756              		.loc 1 4531 8
 9757 0008 0023     		movs	r3, #0
 9758 000a 3B67     		str	r3, [r7, #112]
4532:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4533:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4534:./Libraries/FatFs/Src/ff.c **** 	_FDID obj;
4535:./Libraries/FatFs/Src/ff.c **** #endif
4536:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4537:./Libraries/FatFs/Src/ff.c **** 
4538:./Libraries/FatFs/Src/ff.c **** 
4539:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4540:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 9759              		.loc 1 4540 8
 9760 000c 07F10C01 		add	r1, r7, #12
 9761 0010 3B1D     		adds	r3, r7, #4
 9762 0012 0222     		movs	r2, #2
 9763 0014 1846     		mov	r0, r3
 9764 0016 FFF7FEFF 		bl	find_volume
 9765 001a 0346     		mov	r3, r0
 9766 001c 87F87730 		strb	r3, [r7, #119]
4541:./Libraries/FatFs/Src/ff.c **** 	dj.obj.fs = fs;
 9767              		.loc 1 4541 12
 9768 0020 FB68     		ldr	r3, [r7, #12]
 9769 0022 3B64     		str	r3, [r7, #64]
4542:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 9770              		.loc 1 4542 5
 9771 0024 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9772 0028 002B     		cmp	r3, #0
 9773 002a 40F08E80 		bne	.L575
4543:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4544:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9774              		.loc 1 4544 9
 9775 002e 7A68     		ldr	r2, [r7, #4]
 9776 0030 07F14003 		add	r3, r7, #64
 9777 0034 1146     		mov	r1, r2
ARM GAS  /tmp/cceCRWeb.s 			page 252


 9778 0036 1846     		mov	r0, r3
 9779 0038 FFF7FEFF 		bl	follow_path
 9780 003c 0346     		mov	r3, r0
 9781 003e 87F87730 		strb	r3, [r7, #119]
4545:./Libraries/FatFs/Src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4546:./Libraries/FatFs/Src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4547:./Libraries/FatFs/Src/ff.c **** 		}
4548:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
4549:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 9782              		.loc 1 4549 6
 9783 0042 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9784 0046 002B     		cmp	r3, #0
 9785 0048 08D1     		bne	.L576
 9786              		.loc 1 4549 27 discriminator 1
 9787 004a 07F14003 		add	r3, r7, #64
 9788 004e 0221     		movs	r1, #2
 9789 0050 1846     		mov	r0, r3
 9790 0052 FFF7FEFF 		bl	chk_lock
 9791 0056 0346     		mov	r3, r0
 9792 0058 87F87730 		strb	r3, [r7, #119]
 9793              	.L576:
4550:./Libraries/FatFs/Src/ff.c **** #endif
4551:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 9794              		.loc 1 4551 6
 9795 005c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9796 0060 002B     		cmp	r3, #0
 9797 0062 72D1     		bne	.L575
4552:./Libraries/FatFs/Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9798              		.loc 1 4552 13
 9799 0064 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 9800              		.loc 1 4552 8
 9801 0068 5BB2     		sxtb	r3, r3
 9802              		.loc 1 4552 7
 9803 006a 002B     		cmp	r3, #0
 9804 006c 03DA     		bge	.L577
4553:./Libraries/FatFs/Src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9805              		.loc 1 4553 9
 9806 006e 0623     		movs	r3, #6
 9807 0070 87F87730 		strb	r3, [r7, #119]
 9808 0074 08E0     		b	.L578
 9809              	.L577:
4554:./Libraries/FatFs/Src/ff.c **** 			} else {
4555:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
 9810              		.loc 1 4555 15
 9811 0076 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 9812              		.loc 1 4555 21
 9813 007a 03F00103 		and	r3, r3, #1
 9814              		.loc 1 4555 8
 9815 007e 002B     		cmp	r3, #0
 9816 0080 02D0     		beq	.L578
4556:./Libraries/FatFs/Src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9817              		.loc 1 4556 10
 9818 0082 0723     		movs	r3, #7
 9819 0084 87F87730 		strb	r3, [r7, #119]
 9820              	.L578:
4557:./Libraries/FatFs/Src/ff.c **** 				}
4558:./Libraries/FatFs/Src/ff.c **** 			}
ARM GAS  /tmp/cceCRWeb.s 			page 253


4559:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 9821              		.loc 1 4559 7
 9822 0088 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9823 008c 002B     		cmp	r3, #0
 9824 008e 34D1     		bne	.L579
4560:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4561:./Libraries/FatFs/Src/ff.c **** 				obj.fs = fs;
4562:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4563:./Libraries/FatFs/Src/ff.c **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4564:./Libraries/FatFs/Src/ff.c **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4565:./Libraries/FatFs/Src/ff.c **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4566:./Libraries/FatFs/Src/ff.c **** 				} else
4567:./Libraries/FatFs/Src/ff.c **** #endif
4568:./Libraries/FatFs/Src/ff.c **** 				{
4569:./Libraries/FatFs/Src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
 9825              		.loc 1 4569 14
 9826 0090 FB68     		ldr	r3, [r7, #12]
 9827              		.loc 1 4569 29
 9828 0092 3A6E     		ldr	r2, [r7, #96]
 9829              		.loc 1 4569 14
 9830 0094 1146     		mov	r1, r2
 9831 0096 1846     		mov	r0, r3
 9832 0098 FFF7FEFF 		bl	ld_clust
 9833 009c 3867     		str	r0, [r7, #112]
4570:./Libraries/FatFs/Src/ff.c **** 				}
4571:./Libraries/FatFs/Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 9834              		.loc 1 4571 15
 9835 009e 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 9836              		.loc 1 4571 21
 9837 00a2 03F01003 		and	r3, r3, #16
 9838              		.loc 1 4571 8
 9839 00a6 002B     		cmp	r3, #0
 9840 00a8 27D0     		beq	.L579
4572:./Libraries/FatFs/Src/ff.c **** #if _FS_RPATH != 0
4573:./Libraries/FatFs/Src/ff.c **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4574:./Libraries/FatFs/Src/ff.c **** 						res = FR_DENIED;
4575:./Libraries/FatFs/Src/ff.c **** 					} else
4576:./Libraries/FatFs/Src/ff.c **** #endif
4577:./Libraries/FatFs/Src/ff.c **** 					{
4578:./Libraries/FatFs/Src/ff.c **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
 9841              		.loc 1 4578 18
 9842 00aa FB68     		ldr	r3, [r7, #12]
 9843 00ac 3B61     		str	r3, [r7, #16]
4579:./Libraries/FatFs/Src/ff.c **** 						sdj.obj.sclust = dclst;
 9844              		.loc 1 4579 22
 9845 00ae 3B6F     		ldr	r3, [r7, #112]
 9846 00b0 BB61     		str	r3, [r7, #24]
4580:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4581:./Libraries/FatFs/Src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4582:./Libraries/FatFs/Src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4583:./Libraries/FatFs/Src/ff.c **** 							sdj.obj.stat = obj.stat;
4584:./Libraries/FatFs/Src/ff.c **** 						}
4585:./Libraries/FatFs/Src/ff.c **** #endif
4586:./Libraries/FatFs/Src/ff.c **** 						res = dir_sdi(&sdj, 0);
 9847              		.loc 1 4586 13
 9848 00b2 07F11003 		add	r3, r7, #16
 9849 00b6 0021     		movs	r1, #0
ARM GAS  /tmp/cceCRWeb.s 			page 254


 9850 00b8 1846     		mov	r0, r3
 9851 00ba FFF7FEFF 		bl	dir_sdi
 9852 00be 0346     		mov	r3, r0
 9853 00c0 87F87730 		strb	r3, [r7, #119]
4587:./Libraries/FatFs/Src/ff.c **** 						if (res == FR_OK) {
 9854              		.loc 1 4587 10
 9855 00c4 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9856 00c8 002B     		cmp	r3, #0
 9857 00ca 16D1     		bne	.L579
4588:./Libraries/FatFs/Src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
 9858              		.loc 1 4588 14
 9859 00cc 07F11003 		add	r3, r7, #16
 9860 00d0 0021     		movs	r1, #0
 9861 00d2 1846     		mov	r0, r3
 9862 00d4 FFF7FEFF 		bl	dir_read
 9863 00d8 0346     		mov	r3, r0
 9864 00da 87F87730 		strb	r3, [r7, #119]
4589:./Libraries/FatFs/Src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9865              		.loc 1 4589 11
 9866 00de 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9867 00e2 002B     		cmp	r3, #0
 9868 00e4 02D1     		bne	.L580
 9869              		.loc 1 4589 30 discriminator 1
 9870 00e6 0723     		movs	r3, #7
 9871 00e8 87F87730 		strb	r3, [r7, #119]
 9872              	.L580:
4590:./Libraries/FatFs/Src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9873              		.loc 1 4590 11
 9874 00ec 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9875 00f0 042B     		cmp	r3, #4
 9876 00f2 02D1     		bne	.L579
 9877              		.loc 1 4590 35 discriminator 1
 9878 00f4 0023     		movs	r3, #0
 9879 00f6 87F87730 		strb	r3, [r7, #119]
 9880              	.L579:
4591:./Libraries/FatFs/Src/ff.c **** 						}
4592:./Libraries/FatFs/Src/ff.c **** 					}
4593:./Libraries/FatFs/Src/ff.c **** 				}
4594:./Libraries/FatFs/Src/ff.c **** 			}
4595:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 9881              		.loc 1 4595 7
 9882 00fa 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9883 00fe 002B     		cmp	r3, #0
 9884 0100 23D1     		bne	.L575
4596:./Libraries/FatFs/Src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9885              		.loc 1 4596 11
 9886 0102 07F14003 		add	r3, r7, #64
 9887 0106 1846     		mov	r0, r3
 9888 0108 FFF7FEFF 		bl	dir_remove
 9889 010c 0346     		mov	r3, r0
 9890 010e 87F87730 		strb	r3, [r7, #119]
4597:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 9891              		.loc 1 4597 8
 9892 0112 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9893 0116 002B     		cmp	r3, #0
 9894 0118 0CD1     		bne	.L581
 9895              		.loc 1 4597 22 discriminator 1
ARM GAS  /tmp/cceCRWeb.s 			page 255


 9896 011a 3B6F     		ldr	r3, [r7, #112]
 9897 011c 002B     		cmp	r3, #0
 9898 011e 09D0     		beq	.L581
4598:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4599:./Libraries/FatFs/Src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4600:./Libraries/FatFs/Src/ff.c **** #else
4601:./Libraries/FatFs/Src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
 9899              		.loc 1 4601 12
 9900 0120 07F14003 		add	r3, r7, #64
 9901 0124 0022     		movs	r2, #0
 9902 0126 396F     		ldr	r1, [r7, #112]
 9903 0128 1846     		mov	r0, r3
 9904 012a FFF7FEFF 		bl	remove_chain
 9905 012e 0346     		mov	r3, r0
 9906 0130 87F87730 		strb	r3, [r7, #119]
 9907              	.L581:
4602:./Libraries/FatFs/Src/ff.c **** #endif
4603:./Libraries/FatFs/Src/ff.c **** 				}
4604:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 9908              		.loc 1 4604 8
 9909 0134 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 9910 0138 002B     		cmp	r3, #0
 9911 013a 06D1     		bne	.L575
 9912              		.loc 1 4604 29 discriminator 1
 9913 013c FB68     		ldr	r3, [r7, #12]
 9914 013e 1846     		mov	r0, r3
 9915 0140 FFF7FEFF 		bl	sync_fs
 9916 0144 0346     		mov	r3, r0
 9917 0146 87F87730 		strb	r3, [r7, #119]
 9918              	.L575:
4605:./Libraries/FatFs/Src/ff.c **** 			}
4606:./Libraries/FatFs/Src/ff.c **** 		}
4607:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4608:./Libraries/FatFs/Src/ff.c **** 	}
4609:./Libraries/FatFs/Src/ff.c **** 
4610:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 9919              		.loc 1 4610 2
 9920 014a FB68     		ldr	r3, [r7, #12]
 9921 014c 97F87720 		ldrb	r2, [r7, #119]	@ zero_extendqisi2
 9922 0150 1146     		mov	r1, r2
 9923 0152 1846     		mov	r0, r3
 9924 0154 FFF7FEFF 		bl	unlock_fs
 9925 0158 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
4611:./Libraries/FatFs/Src/ff.c **** }
 9926              		.loc 1 4611 1
 9927 015c 1846     		mov	r0, r3
 9928 015e 7837     		adds	r7, r7, #120
 9929              	.LCFI284:
 9930              		.cfi_def_cfa_offset 8
 9931 0160 BD46     		mov	sp, r7
 9932              	.LCFI285:
 9933              		.cfi_def_cfa_register 13
 9934              		@ sp needed
 9935 0162 80BD     		pop	{r7, pc}
 9936              		.cfi_endproc
 9937              	.LFE388:
 9939              		.section	.text.f_mkdir,"ax",%progbits
ARM GAS  /tmp/cceCRWeb.s 			page 256


 9940              		.align	1
 9941              		.global	f_mkdir
 9942              		.syntax unified
 9943              		.thumb
 9944              		.thumb_func
 9945              		.fpu fpv5-d16
 9947              	f_mkdir:
 9948              	.LFB389:
4612:./Libraries/FatFs/Src/ff.c **** 
4613:./Libraries/FatFs/Src/ff.c **** 
4614:./Libraries/FatFs/Src/ff.c **** 
4615:./Libraries/FatFs/Src/ff.c **** 
4616:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4617:./Libraries/FatFs/Src/ff.c **** /* Create a Directory                                                    */
4618:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4619:./Libraries/FatFs/Src/ff.c **** 
4620:./Libraries/FatFs/Src/ff.c **** FRESULT f_mkdir (
4621:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4622:./Libraries/FatFs/Src/ff.c **** )
4623:./Libraries/FatFs/Src/ff.c **** {
 9949              		.loc 1 4623 1
 9950              		.cfi_startproc
 9951              		@ args = 0, pretend = 0, frame = 88
 9952              		@ frame_needed = 1, uses_anonymous_args = 0
 9953 0000 80B5     		push	{r7, lr}
 9954              	.LCFI286:
 9955              		.cfi_def_cfa_offset 8
 9956              		.cfi_offset 7, -8
 9957              		.cfi_offset 14, -4
 9958 0002 96B0     		sub	sp, sp, #88
 9959              	.LCFI287:
 9960              		.cfi_def_cfa_offset 96
 9961 0004 00AF     		add	r7, sp, #0
 9962              	.LCFI288:
 9963              		.cfi_def_cfa_register 7
 9964 0006 7860     		str	r0, [r7, #4]
4624:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4625:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
4626:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4627:./Libraries/FatFs/Src/ff.c **** 	BYTE *dir;
4628:./Libraries/FatFs/Src/ff.c **** 	UINT n;
4629:./Libraries/FatFs/Src/ff.c **** 	DWORD dsc, dcl, pcl, tm;
4630:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4631:./Libraries/FatFs/Src/ff.c **** 
4632:./Libraries/FatFs/Src/ff.c **** 
4633:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4634:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 9965              		.loc 1 4634 8
 9966 0008 07F10801 		add	r1, r7, #8
 9967 000c 3B1D     		adds	r3, r7, #4
 9968 000e 0222     		movs	r2, #2
 9969 0010 1846     		mov	r0, r3
 9970 0012 FFF7FEFF 		bl	find_volume
 9971 0016 0346     		mov	r3, r0
 9972 0018 87F85730 		strb	r3, [r7, #87]
4635:./Libraries/FatFs/Src/ff.c **** 	dj.obj.fs = fs;
 9973              		.loc 1 4635 12
ARM GAS  /tmp/cceCRWeb.s 			page 257


 9974 001c BB68     		ldr	r3, [r7, #8]
 9975 001e FB60     		str	r3, [r7, #12]
4636:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 9976              		.loc 1 4636 5
 9977 0020 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 9978 0024 002B     		cmp	r3, #0
 9979 0026 40F0EC80 		bne	.L584
4637:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4638:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9980              		.loc 1 4638 9
 9981 002a 7A68     		ldr	r2, [r7, #4]
 9982 002c 07F10C03 		add	r3, r7, #12
 9983 0030 1146     		mov	r1, r2
 9984 0032 1846     		mov	r0, r3
 9985 0034 FFF7FEFF 		bl	follow_path
 9986 0038 0346     		mov	r3, r0
 9987 003a 87F85730 		strb	r3, [r7, #87]
4639:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9988              		.loc 1 4639 6
 9989 003e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 9990 0042 002B     		cmp	r3, #0
 9991 0044 02D1     		bne	.L585
 9992              		.loc 1 4639 25 discriminator 1
 9993 0046 0823     		movs	r3, #8
 9994 0048 87F85730 		strb	r3, [r7, #87]
 9995              	.L585:
4640:./Libraries/FatFs/Src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4641:./Libraries/FatFs/Src/ff.c **** 			res = FR_INVALID_NAME;
4642:./Libraries/FatFs/Src/ff.c **** 		}
4643:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 9996              		.loc 1 4643 6
 9997 004c 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 9998 0050 042B     		cmp	r3, #4
 9999 0052 40F0D680 		bne	.L584
4644:./Libraries/FatFs/Src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 10000              		.loc 1 4644 10
 10001 0056 07F10C03 		add	r3, r7, #12
 10002 005a 0021     		movs	r1, #0
 10003 005c 1846     		mov	r0, r3
 10004 005e FFF7FEFF 		bl	create_chain
 10005 0062 7864     		str	r0, [r7, #68]
4645:./Libraries/FatFs/Src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 10006              		.loc 1 4645 30
 10007 0064 BB68     		ldr	r3, [r7, #8]
 10008 0066 5B89     		ldrh	r3, [r3, #10]
 10009              		.loc 1 4645 38
 10010 0068 5B02     		lsls	r3, r3, #9
 10011              		.loc 1 4645 19
 10012 006a BB61     		str	r3, [r7, #24]
4646:./Libraries/FatFs/Src/ff.c **** 			res = FR_OK;
 10013              		.loc 1 4646 8
 10014 006c 0023     		movs	r3, #0
 10015 006e 87F85730 		strb	r3, [r7, #87]
4647:./Libraries/FatFs/Src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 10016              		.loc 1 4647 7
 10017 0072 7B6C     		ldr	r3, [r7, #68]
 10018 0074 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 258


 10019 0076 02D1     		bne	.L586
 10020              		.loc 1 4647 22 discriminator 1
 10021 0078 0723     		movs	r3, #7
 10022 007a 87F85730 		strb	r3, [r7, #87]
 10023              	.L586:
4648:./Libraries/FatFs/Src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 10024              		.loc 1 4648 7
 10025 007e 7B6C     		ldr	r3, [r7, #68]
 10026 0080 012B     		cmp	r3, #1
 10027 0082 02D1     		bne	.L587
 10028              		.loc 1 4648 22 discriminator 1
 10029 0084 0223     		movs	r3, #2
 10030 0086 87F85730 		strb	r3, [r7, #87]
 10031              	.L587:
4649:./Libraries/FatFs/Src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 10032              		.loc 1 4649 7
 10033 008a 7B6C     		ldr	r3, [r7, #68]
 10034 008c B3F1FF3F 		cmp	r3, #-1
 10035 0090 02D1     		bne	.L588
 10036              		.loc 1 4649 31 discriminator 1
 10037 0092 0123     		movs	r3, #1
 10038 0094 87F85730 		strb	r3, [r7, #87]
 10039              	.L588:
4650:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 10040              		.loc 1 4650 7
 10041 0098 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10042 009c 002B     		cmp	r3, #0
 10043 009e 06D1     		bne	.L589
 10044              		.loc 1 4650 28 discriminator 1
 10045 00a0 BB68     		ldr	r3, [r7, #8]
 10046 00a2 1846     		mov	r0, r3
 10047 00a4 FFF7FEFF 		bl	sync_window
 10048 00a8 0346     		mov	r3, r0
 10049 00aa 87F85730 		strb	r3, [r7, #87]
 10050              	.L589:
4651:./Libraries/FatFs/Src/ff.c **** 			tm = GET_FATTIME();
 10051              		.loc 1 4651 9
 10052 00ae FFF7FEFF 		bl	get_fattime
 10053 00b2 3864     		str	r0, [r7, #64]
4652:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 10054              		.loc 1 4652 7
 10055 00b4 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10056 00b8 002B     		cmp	r3, #0
 10057 00ba 6AD1     		bne	.L590
4653:./Libraries/FatFs/Src/ff.c **** 				dsc = clust2sect(fs, dcl);
 10058              		.loc 1 4653 11
 10059 00bc BB68     		ldr	r3, [r7, #8]
 10060 00be 796C     		ldr	r1, [r7, #68]
 10061 00c0 1846     		mov	r0, r3
 10062 00c2 FFF7FEFF 		bl	clust2sect
 10063 00c6 F864     		str	r0, [r7, #76]
4654:./Libraries/FatFs/Src/ff.c **** 				dir = fs->win;
 10064              		.loc 1 4654 13
 10065 00c8 BB68     		ldr	r3, [r7, #8]
 10066              		.loc 1 4654 9
 10067 00ca 3433     		adds	r3, r3, #52
 10068 00cc FB63     		str	r3, [r7, #60]
ARM GAS  /tmp/cceCRWeb.s 			page 259


4655:./Libraries/FatFs/Src/ff.c **** 				mem_set(dir, 0, SS(fs));
 10069              		.loc 1 4655 5
 10070 00ce 4FF40072 		mov	r2, #512
 10071 00d2 0021     		movs	r1, #0
 10072 00d4 F86B     		ldr	r0, [r7, #60]
 10073 00d6 FFF7FEFF 		bl	mem_set
4656:./Libraries/FatFs/Src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4657:./Libraries/FatFs/Src/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 10074              		.loc 1 4657 6
 10075 00da 0B22     		movs	r2, #11
 10076 00dc 2021     		movs	r1, #32
 10077 00de F86B     		ldr	r0, [r7, #60]
 10078 00e0 FFF7FEFF 		bl	mem_set
4658:./Libraries/FatFs/Src/ff.c **** 					dir[DIR_Name] = '.';
 10079              		.loc 1 4658 20
 10080 00e4 FB6B     		ldr	r3, [r7, #60]
 10081 00e6 2E22     		movs	r2, #46
 10082 00e8 1A70     		strb	r2, [r3]
4659:./Libraries/FatFs/Src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 10083              		.loc 1 4659 9
 10084 00ea FB6B     		ldr	r3, [r7, #60]
 10085 00ec 0B33     		adds	r3, r3, #11
 10086              		.loc 1 4659 20
 10087 00ee 1022     		movs	r2, #16
 10088 00f0 1A70     		strb	r2, [r3]
4660:./Libraries/FatFs/Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 10089              		.loc 1 4660 6
 10090 00f2 FB6B     		ldr	r3, [r7, #60]
 10091 00f4 1633     		adds	r3, r3, #22
 10092 00f6 396C     		ldr	r1, [r7, #64]
 10093 00f8 1846     		mov	r0, r3
 10094 00fa FFF7FEFF 		bl	st_dword
4661:./Libraries/FatFs/Src/ff.c **** 					st_clust(fs, dir, dcl);
 10095              		.loc 1 4661 6
 10096 00fe BB68     		ldr	r3, [r7, #8]
 10097 0100 7A6C     		ldr	r2, [r7, #68]
 10098 0102 F96B     		ldr	r1, [r7, #60]
 10099 0104 1846     		mov	r0, r3
 10100 0106 FFF7FEFF 		bl	st_clust
4662:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 10101              		.loc 1 4662 18
 10102 010a FB6B     		ldr	r3, [r7, #60]
 10103 010c 2033     		adds	r3, r3, #32
 10104              		.loc 1 4662 6
 10105 010e 2022     		movs	r2, #32
 10106 0110 F96B     		ldr	r1, [r7, #60]
 10107 0112 1846     		mov	r0, r3
 10108 0114 FFF7FEFF 		bl	mem_cpy
4663:./Libraries/FatFs/Src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 10109              		.loc 1 4663 9
 10110 0118 FB6B     		ldr	r3, [r7, #60]
 10111 011a 2133     		adds	r3, r3, #33
 10112              		.loc 1 4663 22
 10113 011c 2E22     		movs	r2, #46
 10114 011e 1A70     		strb	r2, [r3]
 10115              		.loc 1 4663 33
 10116 0120 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cceCRWeb.s 			page 260


 10117 0122 BB64     		str	r3, [r7, #72]
4664:./Libraries/FatFs/Src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 10118              		.loc 1 4664 12
 10119 0124 BB68     		ldr	r3, [r7, #8]
 10120 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10121              		.loc 1 4664 9
 10122 0128 032B     		cmp	r3, #3
 10123 012a 06D1     		bne	.L591
 10124              		.loc 1 4664 46 discriminator 1
 10125 012c BB68     		ldr	r3, [r7, #8]
 10126 012e 9B6A     		ldr	r3, [r3, #40]
 10127              		.loc 1 4664 34 discriminator 1
 10128 0130 BA6C     		ldr	r2, [r7, #72]
 10129 0132 9A42     		cmp	r2, r3
 10130 0134 01D1     		bne	.L591
 10131              		.loc 1 4664 61 discriminator 2
 10132 0136 0023     		movs	r3, #0
 10133 0138 BB64     		str	r3, [r7, #72]
 10134              	.L591:
4665:./Libraries/FatFs/Src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 10135              		.loc 1 4665 6
 10136 013a B868     		ldr	r0, [r7, #8]
 10137 013c FB6B     		ldr	r3, [r7, #60]
 10138 013e 2033     		adds	r3, r3, #32
 10139 0140 BA6C     		ldr	r2, [r7, #72]
 10140 0142 1946     		mov	r1, r3
 10141 0144 FFF7FEFF 		bl	st_clust
4666:./Libraries/FatFs/Src/ff.c **** 				}
4667:./Libraries/FatFs/Src/ff.c **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 10142              		.loc 1 4667 16
 10143 0148 BB68     		ldr	r3, [r7, #8]
 10144 014a 5B89     		ldrh	r3, [r3, #10]
 10145              		.loc 1 4667 12
 10146 014c 3B65     		str	r3, [r7, #80]
 10147              		.loc 1 4667 5
 10148 014e 1BE0     		b	.L592
 10149              	.L594:
4668:./Libraries/FatFs/Src/ff.c **** 					fs->winsect = dsc++;
 10150              		.loc 1 4668 23
 10151 0150 FB6C     		ldr	r3, [r7, #76]
 10152 0152 5A1C     		adds	r2, r3, #1
 10153 0154 FA64     		str	r2, [r7, #76]
 10154              		.loc 1 4668 8
 10155 0156 BA68     		ldr	r2, [r7, #8]
 10156              		.loc 1 4668 18
 10157 0158 1363     		str	r3, [r2, #48]
4669:./Libraries/FatFs/Src/ff.c **** 					fs->wflag = 1;
 10158              		.loc 1 4669 8
 10159 015a BB68     		ldr	r3, [r7, #8]
 10160              		.loc 1 4669 16
 10161 015c 0122     		movs	r2, #1
 10162 015e DA70     		strb	r2, [r3, #3]
4670:./Libraries/FatFs/Src/ff.c **** 					res = sync_window(fs);
 10163              		.loc 1 4670 12
 10164 0160 BB68     		ldr	r3, [r7, #8]
 10165 0162 1846     		mov	r0, r3
 10166 0164 FFF7FEFF 		bl	sync_window
ARM GAS  /tmp/cceCRWeb.s 			page 261


 10167 0168 0346     		mov	r3, r0
 10168 016a 87F85730 		strb	r3, [r7, #87]
4671:./Libraries/FatFs/Src/ff.c **** 					if (res != FR_OK) break;
 10169              		.loc 1 4671 9
 10170 016e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10171 0172 002B     		cmp	r3, #0
 10172 0174 0CD1     		bne	.L598
4672:./Libraries/FatFs/Src/ff.c **** 					mem_set(dir, 0, SS(fs));
 10173              		.loc 1 4672 6 discriminator 2
 10174 0176 4FF40072 		mov	r2, #512
 10175 017a 0021     		movs	r1, #0
 10176 017c F86B     		ldr	r0, [r7, #60]
 10177 017e FFF7FEFF 		bl	mem_set
4667:./Libraries/FatFs/Src/ff.c **** 					fs->winsect = dsc++;
 10178              		.loc 1 4667 29 discriminator 2
 10179 0182 3B6D     		ldr	r3, [r7, #80]
 10180 0184 013B     		subs	r3, r3, #1
 10181 0186 3B65     		str	r3, [r7, #80]
 10182              	.L592:
4667:./Libraries/FatFs/Src/ff.c **** 					fs->winsect = dsc++;
 10183              		.loc 1 4667 5 discriminator 1
 10184 0188 3B6D     		ldr	r3, [r7, #80]
 10185 018a 002B     		cmp	r3, #0
 10186 018c E0D1     		bne	.L594
 10187 018e 00E0     		b	.L590
 10188              	.L598:
4671:./Libraries/FatFs/Src/ff.c **** 					if (res != FR_OK) break;
 10189              		.loc 1 4671 6
 10190 0190 00BF     		nop
 10191              	.L590:
4673:./Libraries/FatFs/Src/ff.c **** 				}
4674:./Libraries/FatFs/Src/ff.c **** 			}
4675:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 10192              		.loc 1 4675 7
 10193 0192 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10194 0196 002B     		cmp	r3, #0
 10195 0198 07D1     		bne	.L595
4676:./Libraries/FatFs/Src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
 10196              		.loc 1 4676 11
 10197 019a 07F10C03 		add	r3, r7, #12
 10198 019e 1846     		mov	r0, r3
 10199 01a0 FFF7FEFF 		bl	dir_register
 10200 01a4 0346     		mov	r3, r0
 10201 01a6 87F85730 		strb	r3, [r7, #87]
 10202              	.L595:
4677:./Libraries/FatFs/Src/ff.c **** 			}
4678:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 10203              		.loc 1 4678 7
 10204 01aa 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10205 01ae 002B     		cmp	r3, #0
 10206 01b0 20D1     		bne	.L596
4679:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4680:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4681:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4682:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4683:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4684:./Libraries/FatFs/Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
ARM GAS  /tmp/cceCRWeb.s 			page 262


4685:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4686:./Libraries/FatFs/Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4687:./Libraries/FatFs/Src/ff.c **** 					res = store_xdir(&dj);
4688:./Libraries/FatFs/Src/ff.c **** 				} else
4689:./Libraries/FatFs/Src/ff.c **** #endif
4690:./Libraries/FatFs/Src/ff.c **** 				{
4691:./Libraries/FatFs/Src/ff.c **** 					dir = dj.dir;
 10207              		.loc 1 4691 10
 10208 01b2 FB6A     		ldr	r3, [r7, #44]
 10209 01b4 FB63     		str	r3, [r7, #60]
4692:./Libraries/FatFs/Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 10210              		.loc 1 4692 6
 10211 01b6 FB6B     		ldr	r3, [r7, #60]
 10212 01b8 1633     		adds	r3, r3, #22
 10213 01ba 396C     		ldr	r1, [r7, #64]
 10214 01bc 1846     		mov	r0, r3
 10215 01be FFF7FEFF 		bl	st_dword
4693:./Libraries/FatFs/Src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 10216              		.loc 1 4693 6
 10217 01c2 BB68     		ldr	r3, [r7, #8]
 10218 01c4 7A6C     		ldr	r2, [r7, #68]
 10219 01c6 F96B     		ldr	r1, [r7, #60]
 10220 01c8 1846     		mov	r0, r3
 10221 01ca FFF7FEFF 		bl	st_clust
4694:./Libraries/FatFs/Src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 10222              		.loc 1 4694 9
 10223 01ce FB6B     		ldr	r3, [r7, #60]
 10224 01d0 0B33     		adds	r3, r3, #11
 10225              		.loc 1 4694 20
 10226 01d2 1022     		movs	r2, #16
 10227 01d4 1A70     		strb	r2, [r3]
4695:./Libraries/FatFs/Src/ff.c **** 					fs->wflag = 1;
 10228              		.loc 1 4695 8
 10229 01d6 BB68     		ldr	r3, [r7, #8]
 10230              		.loc 1 4695 16
 10231 01d8 0122     		movs	r2, #1
 10232 01da DA70     		strb	r2, [r3, #3]
4696:./Libraries/FatFs/Src/ff.c **** 				}
4697:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
 10233              		.loc 1 4697 8
 10234 01dc 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10235 01e0 002B     		cmp	r3, #0
 10236 01e2 0ED1     		bne	.L584
4698:./Libraries/FatFs/Src/ff.c **** 					res = sync_fs(fs);
 10237              		.loc 1 4698 12
 10238 01e4 BB68     		ldr	r3, [r7, #8]
 10239 01e6 1846     		mov	r0, r3
 10240 01e8 FFF7FEFF 		bl	sync_fs
 10241 01ec 0346     		mov	r3, r0
 10242 01ee 87F85730 		strb	r3, [r7, #87]
 10243 01f2 06E0     		b	.L584
 10244              	.L596:
4699:./Libraries/FatFs/Src/ff.c **** 				}
4700:./Libraries/FatFs/Src/ff.c **** 			} else {
4701:./Libraries/FatFs/Src/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 10245              		.loc 1 4701 5
 10246 01f4 07F10C03 		add	r3, r7, #12
ARM GAS  /tmp/cceCRWeb.s 			page 263


 10247 01f8 0022     		movs	r2, #0
 10248 01fa 796C     		ldr	r1, [r7, #68]
 10249 01fc 1846     		mov	r0, r3
 10250 01fe FFF7FEFF 		bl	remove_chain
 10251              	.L584:
4702:./Libraries/FatFs/Src/ff.c **** 			}
4703:./Libraries/FatFs/Src/ff.c **** 		}
4704:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4705:./Libraries/FatFs/Src/ff.c **** 	}
4706:./Libraries/FatFs/Src/ff.c **** 
4707:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 10252              		.loc 1 4707 2
 10253 0202 BB68     		ldr	r3, [r7, #8]
 10254 0204 97F85720 		ldrb	r2, [r7, #87]	@ zero_extendqisi2
 10255 0208 1146     		mov	r1, r2
 10256 020a 1846     		mov	r0, r3
 10257 020c FFF7FEFF 		bl	unlock_fs
 10258 0210 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
4708:./Libraries/FatFs/Src/ff.c **** }
 10259              		.loc 1 4708 1
 10260 0214 1846     		mov	r0, r3
 10261 0216 5837     		adds	r7, r7, #88
 10262              	.LCFI289:
 10263              		.cfi_def_cfa_offset 8
 10264 0218 BD46     		mov	sp, r7
 10265              	.LCFI290:
 10266              		.cfi_def_cfa_register 13
 10267              		@ sp needed
 10268 021a 80BD     		pop	{r7, pc}
 10269              		.cfi_endproc
 10270              	.LFE389:
 10272              		.section	.text.f_rename,"ax",%progbits
 10273              		.align	1
 10274              		.global	f_rename
 10275              		.syntax unified
 10276              		.thumb
 10277              		.thumb_func
 10278              		.fpu fpv5-d16
 10280              	f_rename:
 10281              	.LFB390:
4709:./Libraries/FatFs/Src/ff.c **** 
4710:./Libraries/FatFs/Src/ff.c **** 
4711:./Libraries/FatFs/Src/ff.c **** 
4712:./Libraries/FatFs/Src/ff.c **** 
4713:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4714:./Libraries/FatFs/Src/ff.c **** /* Rename a File/Directory                                               */
4715:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4716:./Libraries/FatFs/Src/ff.c **** 
4717:./Libraries/FatFs/Src/ff.c **** FRESULT f_rename (
4718:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4719:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4720:./Libraries/FatFs/Src/ff.c **** )
4721:./Libraries/FatFs/Src/ff.c **** {
 10282              		.loc 1 4721 1
 10283              		.cfi_startproc
 10284              		@ args = 0, pretend = 0, frame = 144
 10285              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cceCRWeb.s 			page 264


 10286 0000 90B5     		push	{r4, r7, lr}
 10287              	.LCFI291:
 10288              		.cfi_def_cfa_offset 12
 10289              		.cfi_offset 4, -12
 10290              		.cfi_offset 7, -8
 10291              		.cfi_offset 14, -4
 10292 0002 A5B0     		sub	sp, sp, #148
 10293              	.LCFI292:
 10294              		.cfi_def_cfa_offset 160
 10295 0004 00AF     		add	r7, sp, #0
 10296              	.LCFI293:
 10297              		.cfi_def_cfa_register 7
 10298 0006 7860     		str	r0, [r7, #4]
 10299 0008 3960     		str	r1, [r7]
4722:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4723:./Libraries/FatFs/Src/ff.c **** 	DIR djo, djn;
4724:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4725:./Libraries/FatFs/Src/ff.c **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4726:./Libraries/FatFs/Src/ff.c **** 	DWORD dw;
4727:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4728:./Libraries/FatFs/Src/ff.c **** 
4729:./Libraries/FatFs/Src/ff.c **** 
4730:./Libraries/FatFs/Src/ff.c **** 	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 10300              		.loc 1 4730 2
 10301 000a 3B46     		mov	r3, r7
 10302 000c 1846     		mov	r0, r3
 10303 000e FFF7FEFF 		bl	get_ldnumber
4731:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 10304              		.loc 1 4731 8
 10305 0012 07F12001 		add	r1, r7, #32
 10306 0016 3B1D     		adds	r3, r7, #4
 10307 0018 0222     		movs	r2, #2
 10308 001a 1846     		mov	r0, r3
 10309 001c FFF7FEFF 		bl	find_volume
 10310 0020 0346     		mov	r3, r0
 10311 0022 87F88F30 		strb	r3, [r7, #143]
4732:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
 10312              		.loc 1 4732 5
 10313 0026 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10314 002a 002B     		cmp	r3, #0
 10315 002c 40F0DB80 		bne	.L600
4733:./Libraries/FatFs/Src/ff.c **** 		djo.obj.fs = fs;
 10316              		.loc 1 4733 14
 10317 0030 3B6A     		ldr	r3, [r7, #32]
 10318 0032 7B65     		str	r3, [r7, #84]
4734:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4735:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 10319              		.loc 1 4735 9
 10320 0034 7A68     		ldr	r2, [r7, #4]
 10321 0036 07F15403 		add	r3, r7, #84
 10322 003a 1146     		mov	r1, r2
 10323 003c 1846     		mov	r0, r3
 10324 003e FFF7FEFF 		bl	follow_path
 10325 0042 0346     		mov	r3, r0
 10326 0044 87F88F30 		strb	r3, [r7, #143]
4736:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 10327              		.loc 1 4736 6
ARM GAS  /tmp/cceCRWeb.s 			page 265


 10328 0048 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10329 004c 002B     		cmp	r3, #0
 10330 004e 08D1     		bne	.L601
 10331              		.loc 1 4736 30 discriminator 1
 10332 0050 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 10333              		.loc 1 4736 39 discriminator 1
 10334 0054 03F0A003 		and	r3, r3, #160
 10335              		.loc 1 4736 20 discriminator 1
 10336 0058 002B     		cmp	r3, #0
 10337 005a 02D0     		beq	.L601
 10338              		.loc 1 4736 68 discriminator 2
 10339 005c 0623     		movs	r3, #6
 10340 005e 87F88F30 		strb	r3, [r7, #143]
 10341              	.L601:
4737:./Libraries/FatFs/Src/ff.c **** #if _FS_LOCK != 0
4738:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
 10342              		.loc 1 4738 6
 10343 0062 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10344 0066 002B     		cmp	r3, #0
 10345 0068 08D1     		bne	.L602
4739:./Libraries/FatFs/Src/ff.c **** 			res = chk_lock(&djo, 2);
 10346              		.loc 1 4739 10
 10347 006a 07F15403 		add	r3, r7, #84
 10348 006e 0221     		movs	r1, #2
 10349 0070 1846     		mov	r0, r3
 10350 0072 FFF7FEFF 		bl	chk_lock
 10351 0076 0346     		mov	r3, r0
 10352 0078 87F88F30 		strb	r3, [r7, #143]
 10353              	.L602:
4740:./Libraries/FatFs/Src/ff.c **** 		}
4741:./Libraries/FatFs/Src/ff.c **** #endif
4742:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
 10354              		.loc 1 4742 6
 10355 007c 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10356 0080 002B     		cmp	r3, #0
 10357 0082 40F0B080 		bne	.L600
4743:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4744:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4745:./Libraries/FatFs/Src/ff.c **** 				BYTE nf, nn;
4746:./Libraries/FatFs/Src/ff.c **** 				WORD nh;
4747:./Libraries/FatFs/Src/ff.c **** 
4748:./Libraries/FatFs/Src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4749:./Libraries/FatFs/Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4750:./Libraries/FatFs/Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4751:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4752:./Libraries/FatFs/Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4753:./Libraries/FatFs/Src/ff.c **** 				}
4754:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4755:./Libraries/FatFs/Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4756:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK) {
4757:./Libraries/FatFs/Src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4758:./Libraries/FatFs/Src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4759:./Libraries/FatFs/Src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4760:./Libraries/FatFs/Src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4761:./Libraries/FatFs/Src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4762:./Libraries/FatFs/Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4763:./Libraries/FatFs/Src/ff.c **** 						res = store_xdir(&djn);
ARM GAS  /tmp/cceCRWeb.s 			page 266


4764:./Libraries/FatFs/Src/ff.c **** 					}
4765:./Libraries/FatFs/Src/ff.c **** 				}
4766:./Libraries/FatFs/Src/ff.c **** 			} else
4767:./Libraries/FatFs/Src/ff.c **** #endif
4768:./Libraries/FatFs/Src/ff.c **** 			{	/* At FAT12/FAT16/FAT32 */
4769:./Libraries/FatFs/Src/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 10358              		.loc 1 4769 21
 10359 0086 7B6F     		ldr	r3, [r7, #116]
 10360              		.loc 1 4769 26
 10361 0088 03F10B01 		add	r1, r3, #11
 10362              		.loc 1 4769 5
 10363 008c 07F10803 		add	r3, r7, #8
 10364 0090 1522     		movs	r2, #21
 10365 0092 1846     		mov	r0, r3
 10366 0094 FFF7FEFF 		bl	mem_cpy
4770:./Libraries/FatFs/Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 10367              		.loc 1 4770 5
 10368 0098 07F15401 		add	r1, r7, #84
 10369 009c 07F12403 		add	r3, r7, #36
 10370 00a0 3022     		movs	r2, #48
 10371 00a2 1846     		mov	r0, r3
 10372 00a4 FFF7FEFF 		bl	mem_cpy
4771:./Libraries/FatFs/Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 10373              		.loc 1 4771 11
 10374 00a8 3A68     		ldr	r2, [r7]
 10375 00aa 07F12403 		add	r3, r7, #36
 10376 00ae 1146     		mov	r1, r2
 10377 00b0 1846     		mov	r0, r3
 10378 00b2 FFF7FEFF 		bl	follow_path
 10379 00b6 0346     		mov	r3, r0
 10380 00b8 87F88F30 		strb	r3, [r7, #143]
4772:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 10381              		.loc 1 4772 8
 10382 00bc 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10383 00c0 002B     		cmp	r3, #0
 10384 00c2 0CD1     		bne	.L603
4773:./Libraries/FatFs/Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 10385              		.loc 1 4773 20
 10386 00c4 FA6A     		ldr	r2, [r7, #44]
 10387              		.loc 1 4773 38
 10388 00c6 FB6D     		ldr	r3, [r7, #92]
 10389              		.loc 1 4773 84
 10390 00c8 9A42     		cmp	r2, r3
 10391 00ca 05D1     		bne	.L604
 10392              		.loc 1 4773 52 discriminator 1
 10393 00cc BA6B     		ldr	r2, [r7, #56]
 10394              		.loc 1 4773 64 discriminator 1
 10395 00ce BB6E     		ldr	r3, [r7, #104]
 10396              		.loc 1 4773 46 discriminator 1
 10397 00d0 9A42     		cmp	r2, r3
 10398 00d2 01D1     		bne	.L604
 10399              		.loc 1 4773 84 discriminator 3
 10400 00d4 0423     		movs	r3, #4
 10401 00d6 00E0     		b	.L605
 10402              	.L604:
 10403              		.loc 1 4773 84 is_stmt 0 discriminator 4
 10404 00d8 0823     		movs	r3, #8
ARM GAS  /tmp/cceCRWeb.s 			page 267


 10405              	.L605:
 10406              		.loc 1 4773 10 is_stmt 1 discriminator 6
 10407 00da 87F88F30 		strb	r3, [r7, #143]
 10408              	.L603:
4774:./Libraries/FatFs/Src/ff.c **** 				}
4775:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 10409              		.loc 1 4775 8
 10410 00de 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10411 00e2 042B     		cmp	r3, #4
 10412 00e4 68D1     		bne	.L606
4776:./Libraries/FatFs/Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 10413              		.loc 1 4776 12
 10414 00e6 07F12403 		add	r3, r7, #36
 10415 00ea 1846     		mov	r0, r3
 10416 00ec FFF7FEFF 		bl	dir_register
 10417 00f0 0346     		mov	r3, r0
 10418 00f2 87F88F30 		strb	r3, [r7, #143]
4777:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK) {
 10419              		.loc 1 4777 9
 10420 00f6 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10421 00fa 002B     		cmp	r3, #0
 10422 00fc 5CD1     		bne	.L606
4778:./Libraries/FatFs/Src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
 10423              		.loc 1 4778 11
 10424 00fe 7B6C     		ldr	r3, [r7, #68]
 10425 0100 C7F88830 		str	r3, [r7, #136]
4779:./Libraries/FatFs/Src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 10426              		.loc 1 4779 19
 10427 0104 D7F88830 		ldr	r3, [r7, #136]
 10428 0108 03F10D00 		add	r0, r3, #13
 10429              		.loc 1 4779 7
 10430 010c 07F10803 		add	r3, r7, #8
 10431 0110 0233     		adds	r3, r3, #2
 10432 0112 1322     		movs	r2, #19
 10433 0114 1946     		mov	r1, r3
 10434 0116 FFF7FEFF 		bl	mem_cpy
4780:./Libraries/FatFs/Src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 10435              		.loc 1 4780 26
 10436 011a 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 10437              		.loc 1 4780 10
 10438 011c D7F88830 		ldr	r3, [r7, #136]
 10439 0120 0B33     		adds	r3, r3, #11
 10440              		.loc 1 4780 21
 10441 0122 42F02002 		orr	r2, r2, #32
 10442 0126 D2B2     		uxtb	r2, r2
 10443 0128 1A70     		strb	r2, [r3]
4781:./Libraries/FatFs/Src/ff.c **** 						fs->wflag = 1;
 10444              		.loc 1 4781 9
 10445 012a 3B6A     		ldr	r3, [r7, #32]
 10446              		.loc 1 4781 17
 10447 012c 0122     		movs	r2, #1
 10448 012e DA70     		strb	r2, [r3, #3]
4782:./Libraries/FatFs/Src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 10449              		.loc 1 4782 15
 10450 0130 D7F88830 		ldr	r3, [r7, #136]
 10451 0134 0B33     		adds	r3, r3, #11
 10452 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 268


 10453              		.loc 1 4782 26
 10454 0138 03F01003 		and	r3, r3, #16
 10455              		.loc 1 4782 10
 10456 013c 002B     		cmp	r3, #0
 10457 013e 3BD0     		beq	.L606
 10458              		.loc 1 4782 46 discriminator 1
 10459 0140 FA6D     		ldr	r2, [r7, #92]
 10460              		.loc 1 4782 64 discriminator 1
 10461 0142 FB6A     		ldr	r3, [r7, #44]
 10462              		.loc 1 4782 36 discriminator 1
 10463 0144 9A42     		cmp	r2, r3
 10464 0146 37D0     		beq	.L606
4783:./Libraries/FatFs/Src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 10465              		.loc 1 4783 13
 10466 0148 3C6A     		ldr	r4, [r7, #32]
 10467 014a 3B6A     		ldr	r3, [r7, #32]
 10468 014c D7F88810 		ldr	r1, [r7, #136]
 10469 0150 1846     		mov	r0, r3
 10470 0152 FFF7FEFF 		bl	ld_clust
 10471 0156 0346     		mov	r3, r0
 10472 0158 1946     		mov	r1, r3
 10473 015a 2046     		mov	r0, r4
 10474 015c FFF7FEFF 		bl	clust2sect
 10475 0160 C7F88400 		str	r0, [r7, #132]
4784:./Libraries/FatFs/Src/ff.c **** 							if (!dw) {
 10476              		.loc 1 4784 11
 10477 0164 D7F88430 		ldr	r3, [r7, #132]
 10478 0168 002B     		cmp	r3, #0
 10479 016a 03D1     		bne	.L607
4785:./Libraries/FatFs/Src/ff.c **** 								res = FR_INT_ERR;
 10480              		.loc 1 4785 13
 10481 016c 0223     		movs	r3, #2
 10482 016e 87F88F30 		strb	r3, [r7, #143]
 10483 0172 21E0     		b	.L606
 10484              	.L607:
4786:./Libraries/FatFs/Src/ff.c **** 							} else {
4787:./Libraries/FatFs/Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4788:./Libraries/FatFs/Src/ff.c **** 								res = move_window(fs, dw);
 10485              		.loc 1 4788 15
 10486 0174 3B6A     		ldr	r3, [r7, #32]
 10487 0176 D7F88410 		ldr	r1, [r7, #132]
 10488 017a 1846     		mov	r0, r3
 10489 017c FFF7FEFF 		bl	move_window
 10490 0180 0346     		mov	r3, r0
 10491 0182 87F88F30 		strb	r3, [r7, #143]
4789:./Libraries/FatFs/Src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 10492              		.loc 1 4789 17
 10493 0186 3B6A     		ldr	r3, [r7, #32]
 10494              		.loc 1 4789 15
 10495 0188 3433     		adds	r3, r3, #52
 10496              		.loc 1 4789 13
 10497 018a 2033     		adds	r3, r3, #32
 10498 018c C7F88830 		str	r3, [r7, #136]
4790:./Libraries/FatFs/Src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 10499              		.loc 1 4790 12
 10500 0190 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10501 0194 002B     		cmp	r3, #0
ARM GAS  /tmp/cceCRWeb.s 			page 269


 10502 0196 0FD1     		bne	.L606
 10503              		.loc 1 4790 32 discriminator 1
 10504 0198 D7F88830 		ldr	r3, [r7, #136]
 10505 019c 0133     		adds	r3, r3, #1
 10506 019e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10507              		.loc 1 4790 26 discriminator 1
 10508 01a0 2E2B     		cmp	r3, #46
 10509 01a2 09D1     		bne	.L606
4791:./Libraries/FatFs/Src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 10510              		.loc 1 4791 10
 10511 01a4 3B6A     		ldr	r3, [r7, #32]
 10512 01a6 FA6A     		ldr	r2, [r7, #44]
 10513 01a8 D7F88810 		ldr	r1, [r7, #136]
 10514 01ac 1846     		mov	r0, r3
 10515 01ae FFF7FEFF 		bl	st_clust
4792:./Libraries/FatFs/Src/ff.c **** 									fs->wflag = 1;
 10516              		.loc 1 4792 12
 10517 01b2 3B6A     		ldr	r3, [r7, #32]
 10518              		.loc 1 4792 20
 10519 01b4 0122     		movs	r2, #1
 10520 01b6 DA70     		strb	r2, [r3, #3]
 10521              	.L606:
4793:./Libraries/FatFs/Src/ff.c **** 								}
4794:./Libraries/FatFs/Src/ff.c **** 							}
4795:./Libraries/FatFs/Src/ff.c **** 						}
4796:./Libraries/FatFs/Src/ff.c **** 					}
4797:./Libraries/FatFs/Src/ff.c **** 				}
4798:./Libraries/FatFs/Src/ff.c **** 			}
4799:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
 10522              		.loc 1 4799 7
 10523 01b8 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10524 01bc 002B     		cmp	r3, #0
 10525 01be 12D1     		bne	.L600
4800:./Libraries/FatFs/Src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 10526              		.loc 1 4800 11
 10527 01c0 07F15403 		add	r3, r7, #84
 10528 01c4 1846     		mov	r0, r3
 10529 01c6 FFF7FEFF 		bl	dir_remove
 10530 01ca 0346     		mov	r3, r0
 10531 01cc 87F88F30 		strb	r3, [r7, #143]
4801:./Libraries/FatFs/Src/ff.c **** 				if (res == FR_OK) {
 10532              		.loc 1 4801 8
 10533 01d0 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 10534 01d4 002B     		cmp	r3, #0
 10535 01d6 06D1     		bne	.L600
4802:./Libraries/FatFs/Src/ff.c **** 					res = sync_fs(fs);
 10536              		.loc 1 4802 12
 10537 01d8 3B6A     		ldr	r3, [r7, #32]
 10538 01da 1846     		mov	r0, r3
 10539 01dc FFF7FEFF 		bl	sync_fs
 10540 01e0 0346     		mov	r3, r0
 10541 01e2 87F88F30 		strb	r3, [r7, #143]
 10542              	.L600:
4803:./Libraries/FatFs/Src/ff.c **** 				}
4804:./Libraries/FatFs/Src/ff.c **** 			}
4805:./Libraries/FatFs/Src/ff.c **** /* End of the critical section */
4806:./Libraries/FatFs/Src/ff.c **** 		}
ARM GAS  /tmp/cceCRWeb.s 			page 270


4807:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4808:./Libraries/FatFs/Src/ff.c **** 	}
4809:./Libraries/FatFs/Src/ff.c **** 
4810:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
 10543              		.loc 1 4810 2
 10544 01e6 3B6A     		ldr	r3, [r7, #32]
 10545 01e8 97F88F20 		ldrb	r2, [r7, #143]	@ zero_extendqisi2
 10546 01ec 1146     		mov	r1, r2
 10547 01ee 1846     		mov	r0, r3
 10548 01f0 FFF7FEFF 		bl	unlock_fs
 10549 01f4 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
4811:./Libraries/FatFs/Src/ff.c **** }
 10550              		.loc 1 4811 1
 10551 01f8 1846     		mov	r0, r3
 10552 01fa 9437     		adds	r7, r7, #148
 10553              	.LCFI294:
 10554              		.cfi_def_cfa_offset 12
 10555 01fc BD46     		mov	sp, r7
 10556              	.LCFI295:
 10557              		.cfi_def_cfa_register 13
 10558              		@ sp needed
 10559 01fe 90BD     		pop	{r4, r7, pc}
 10560              		.cfi_endproc
 10561              	.LFE390:
 10563              		.section	.rodata
 10564 000f 00       		.align	2
 10565              	.LC1:
 10566 0010 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10566      53444F53 
 10566      352E3000 
 10567              		.align	2
 10568              	.LC2:
 10569 001c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10569      414D4520 
 10569      20202046 
 10569      41543332 
 10569      20202000 
 10570              		.align	2
 10571              	.LC3:
 10572 0030 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 10572      414D4520 
 10572      20202046 
 10572      41542020 
 10572      20202000 
 10573              		.section	.text.f_mkfs,"ax",%progbits
 10574              		.align	1
 10575              		.global	f_mkfs
 10576              		.syntax unified
 10577              		.thumb
 10578              		.thumb_func
 10579              		.fpu fpv5-d16
 10581              	f_mkfs:
 10582              	.LFB391:
4812:./Libraries/FatFs/Src/ff.c **** 
4813:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
4814:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_MINIMIZE == 0 */
4815:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
ARM GAS  /tmp/cceCRWeb.s 			page 271


4816:./Libraries/FatFs/Src/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
4817:./Libraries/FatFs/Src/ff.c **** 
4818:./Libraries/FatFs/Src/ff.c **** 
4819:./Libraries/FatFs/Src/ff.c **** 
4820:./Libraries/FatFs/Src/ff.c **** #if _USE_CHMOD && !_FS_READONLY
4821:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4822:./Libraries/FatFs/Src/ff.c **** /* Change Attribute                                                      */
4823:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4824:./Libraries/FatFs/Src/ff.c **** 
4825:./Libraries/FatFs/Src/ff.c **** FRESULT f_chmod (
4826:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4827:./Libraries/FatFs/Src/ff.c **** 	BYTE attr,			/* Attribute bits */
4828:./Libraries/FatFs/Src/ff.c **** 	BYTE mask			/* Attribute mask to change */
4829:./Libraries/FatFs/Src/ff.c **** )
4830:./Libraries/FatFs/Src/ff.c **** {
4831:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4832:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
4833:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4834:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4835:./Libraries/FatFs/Src/ff.c **** 
4836:./Libraries/FatFs/Src/ff.c **** 
4837:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4838:./Libraries/FatFs/Src/ff.c **** 	dj.obj.fs = fs;
4839:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
4840:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4841:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4842:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4843:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
4844:./Libraries/FatFs/Src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4845:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4846:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4847:./Libraries/FatFs/Src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4848:./Libraries/FatFs/Src/ff.c **** 				res = store_xdir(&dj);
4849:./Libraries/FatFs/Src/ff.c **** 			} else
4850:./Libraries/FatFs/Src/ff.c **** #endif
4851:./Libraries/FatFs/Src/ff.c **** 			{
4852:./Libraries/FatFs/Src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4853:./Libraries/FatFs/Src/ff.c **** 				fs->wflag = 1;
4854:./Libraries/FatFs/Src/ff.c **** 			}
4855:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
4856:./Libraries/FatFs/Src/ff.c **** 				res = sync_fs(fs);
4857:./Libraries/FatFs/Src/ff.c **** 			}
4858:./Libraries/FatFs/Src/ff.c **** 		}
4859:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4860:./Libraries/FatFs/Src/ff.c **** 	}
4861:./Libraries/FatFs/Src/ff.c **** 
4862:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
4863:./Libraries/FatFs/Src/ff.c **** }
4864:./Libraries/FatFs/Src/ff.c **** 
4865:./Libraries/FatFs/Src/ff.c **** 
4866:./Libraries/FatFs/Src/ff.c **** 
4867:./Libraries/FatFs/Src/ff.c **** 
4868:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4869:./Libraries/FatFs/Src/ff.c **** /* Change Timestamp                                                      */
4870:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4871:./Libraries/FatFs/Src/ff.c **** 
4872:./Libraries/FatFs/Src/ff.c **** FRESULT f_utime (
ARM GAS  /tmp/cceCRWeb.s 			page 272


4873:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4874:./Libraries/FatFs/Src/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4875:./Libraries/FatFs/Src/ff.c **** )
4876:./Libraries/FatFs/Src/ff.c **** {
4877:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4878:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
4879:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4880:./Libraries/FatFs/Src/ff.c **** 	DEF_NAMBUF
4881:./Libraries/FatFs/Src/ff.c **** 
4882:./Libraries/FatFs/Src/ff.c **** 
4883:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4884:./Libraries/FatFs/Src/ff.c **** 	dj.obj.fs = fs;
4885:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
4886:./Libraries/FatFs/Src/ff.c **** 		INIT_NAMBUF(fs);
4887:./Libraries/FatFs/Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4888:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4889:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
4890:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4891:./Libraries/FatFs/Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4892:./Libraries/FatFs/Src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4893:./Libraries/FatFs/Src/ff.c **** 				res = store_xdir(&dj);
4894:./Libraries/FatFs/Src/ff.c **** 			} else
4895:./Libraries/FatFs/Src/ff.c **** #endif
4896:./Libraries/FatFs/Src/ff.c **** 			{
4897:./Libraries/FatFs/Src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4898:./Libraries/FatFs/Src/ff.c **** 				fs->wflag = 1;
4899:./Libraries/FatFs/Src/ff.c **** 			}
4900:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_OK) {
4901:./Libraries/FatFs/Src/ff.c **** 				res = sync_fs(fs);
4902:./Libraries/FatFs/Src/ff.c **** 			}
4903:./Libraries/FatFs/Src/ff.c **** 		}
4904:./Libraries/FatFs/Src/ff.c **** 		FREE_NAMBUF();
4905:./Libraries/FatFs/Src/ff.c **** 	}
4906:./Libraries/FatFs/Src/ff.c **** 
4907:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
4908:./Libraries/FatFs/Src/ff.c **** }
4909:./Libraries/FatFs/Src/ff.c **** 
4910:./Libraries/FatFs/Src/ff.c **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4911:./Libraries/FatFs/Src/ff.c **** 
4912:./Libraries/FatFs/Src/ff.c **** 
4913:./Libraries/FatFs/Src/ff.c **** 
4914:./Libraries/FatFs/Src/ff.c **** #if _USE_LABEL
4915:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4916:./Libraries/FatFs/Src/ff.c **** /* Get Volume Label                                                      */
4917:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
4918:./Libraries/FatFs/Src/ff.c **** 
4919:./Libraries/FatFs/Src/ff.c **** FRESULT f_getlabel (
4920:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4921:./Libraries/FatFs/Src/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4922:./Libraries/FatFs/Src/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4923:./Libraries/FatFs/Src/ff.c **** )
4924:./Libraries/FatFs/Src/ff.c **** {
4925:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
4926:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
4927:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
4928:./Libraries/FatFs/Src/ff.c **** 	UINT si, di;
4929:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE || _FS_EXFAT
ARM GAS  /tmp/cceCRWeb.s 			page 273


4930:./Libraries/FatFs/Src/ff.c **** 	WCHAR w;
4931:./Libraries/FatFs/Src/ff.c **** #endif
4932:./Libraries/FatFs/Src/ff.c **** 
4933:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
4934:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&path, &fs, 0);
4935:./Libraries/FatFs/Src/ff.c **** 
4936:./Libraries/FatFs/Src/ff.c **** 	/* Get volume label */
4937:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK && label) {
4938:./Libraries/FatFs/Src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4939:./Libraries/FatFs/Src/ff.c **** 		res = dir_sdi(&dj, 0);
4940:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
4941:./Libraries/FatFs/Src/ff.c **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4942:./Libraries/FatFs/Src/ff.c **** 		 	if (res == FR_OK) {
4943:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
4944:./Libraries/FatFs/Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4945:./Libraries/FatFs/Src/ff.c **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4946:./Libraries/FatFs/Src/ff.c **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4947:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
4948:./Libraries/FatFs/Src/ff.c **** 						label[di++] = w;
4949:./Libraries/FatFs/Src/ff.c **** #else
4950:./Libraries/FatFs/Src/ff.c **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
4951:./Libraries/FatFs/Src/ff.c **** 						if (w == 0) w = '?';	/* Replace wrong character */
4952:./Libraries/FatFs/Src/ff.c **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4953:./Libraries/FatFs/Src/ff.c **** 						label[di++] = (char)w;
4954:./Libraries/FatFs/Src/ff.c **** #endif
4955:./Libraries/FatFs/Src/ff.c **** 					}
4956:./Libraries/FatFs/Src/ff.c **** 					label[di] = 0;
4957:./Libraries/FatFs/Src/ff.c **** 				} else
4958:./Libraries/FatFs/Src/ff.c **** #endif
4959:./Libraries/FatFs/Src/ff.c **** 				{
4960:./Libraries/FatFs/Src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4961:./Libraries/FatFs/Src/ff.c **** 					do {
4962:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
4963:./Libraries/FatFs/Src/ff.c **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4964:./Libraries/FatFs/Src/ff.c **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4965:./Libraries/FatFs/Src/ff.c **** 							w = w << 8 | dj.dir[si++];
4966:./Libraries/FatFs/Src/ff.c **** 						}
4967:./Libraries/FatFs/Src/ff.c **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4968:./Libraries/FatFs/Src/ff.c **** #else
4969:./Libraries/FatFs/Src/ff.c **** 						label[di++] = dj.dir[si++];
4970:./Libraries/FatFs/Src/ff.c **** #endif
4971:./Libraries/FatFs/Src/ff.c **** 					} while (di < 11);
4972:./Libraries/FatFs/Src/ff.c **** 					do {				/* Truncate trailing spaces */
4973:./Libraries/FatFs/Src/ff.c **** 						label[di] = 0;
4974:./Libraries/FatFs/Src/ff.c **** 						if (di == 0) break;
4975:./Libraries/FatFs/Src/ff.c **** 					} while (label[--di] == ' ');
4976:./Libraries/FatFs/Src/ff.c **** 				}
4977:./Libraries/FatFs/Src/ff.c **** 			}
4978:./Libraries/FatFs/Src/ff.c **** 		}
4979:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4980:./Libraries/FatFs/Src/ff.c **** 			label[0] = 0;
4981:./Libraries/FatFs/Src/ff.c **** 			res = FR_OK;
4982:./Libraries/FatFs/Src/ff.c **** 		}
4983:./Libraries/FatFs/Src/ff.c **** 	}
4984:./Libraries/FatFs/Src/ff.c **** 
4985:./Libraries/FatFs/Src/ff.c **** 	/* Get volume serial number */
4986:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK && vsn) {
ARM GAS  /tmp/cceCRWeb.s 			page 274


4987:./Libraries/FatFs/Src/ff.c **** 		res = move_window(fs, fs->volbase);
4988:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
4989:./Libraries/FatFs/Src/ff.c **** 			switch (fs->fs_type) {
4990:./Libraries/FatFs/Src/ff.c **** 			case FS_EXFAT:
4991:./Libraries/FatFs/Src/ff.c **** 				di = BPB_VolIDEx; break;
4992:./Libraries/FatFs/Src/ff.c **** 
4993:./Libraries/FatFs/Src/ff.c **** 			case FS_FAT32:
4994:./Libraries/FatFs/Src/ff.c **** 				di = BS_VolID32; break;
4995:./Libraries/FatFs/Src/ff.c **** 
4996:./Libraries/FatFs/Src/ff.c **** 			default:
4997:./Libraries/FatFs/Src/ff.c **** 				di = BS_VolID;
4998:./Libraries/FatFs/Src/ff.c **** 			}
4999:./Libraries/FatFs/Src/ff.c **** 			*vsn = ld_dword(fs->win + di);
5000:./Libraries/FatFs/Src/ff.c **** 		}
5001:./Libraries/FatFs/Src/ff.c **** 	}
5002:./Libraries/FatFs/Src/ff.c **** 
5003:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
5004:./Libraries/FatFs/Src/ff.c **** }
5005:./Libraries/FatFs/Src/ff.c **** 
5006:./Libraries/FatFs/Src/ff.c **** 
5007:./Libraries/FatFs/Src/ff.c **** 
5008:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
5009:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5010:./Libraries/FatFs/Src/ff.c **** /* Set Volume Label                                                      */
5011:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5012:./Libraries/FatFs/Src/ff.c **** 
5013:./Libraries/FatFs/Src/ff.c **** FRESULT f_setlabel (
5014:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
5015:./Libraries/FatFs/Src/ff.c **** )
5016:./Libraries/FatFs/Src/ff.c **** {
5017:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
5018:./Libraries/FatFs/Src/ff.c **** 	DIR dj;
5019:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
5020:./Libraries/FatFs/Src/ff.c **** 	BYTE dirvn[22];
5021:./Libraries/FatFs/Src/ff.c **** 	UINT i, j, slen;
5022:./Libraries/FatFs/Src/ff.c **** 	WCHAR w;
5023:./Libraries/FatFs/Src/ff.c **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
5024:./Libraries/FatFs/Src/ff.c **** 
5025:./Libraries/FatFs/Src/ff.c **** 
5026:./Libraries/FatFs/Src/ff.c **** 	/* Get logical drive */
5027:./Libraries/FatFs/Src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5028:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5029:./Libraries/FatFs/Src/ff.c **** 	dj.obj.fs = fs;
5030:./Libraries/FatFs/Src/ff.c **** 
5031:./Libraries/FatFs/Src/ff.c **** 	/* Get length of given volume label */
5032:./Libraries/FatFs/Src/ff.c **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
5033:./Libraries/FatFs/Src/ff.c **** 
5034:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
5035:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5036:./Libraries/FatFs/Src/ff.c **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
5037:./Libraries/FatFs/Src/ff.c **** 			w = label[i++];
5038:./Libraries/FatFs/Src/ff.c **** #if !_LFN_UNICODE
5039:./Libraries/FatFs/Src/ff.c **** 			if (IsDBCS1(w)) {
5040:./Libraries/FatFs/Src/ff.c **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5041:./Libraries/FatFs/Src/ff.c **** 			}
5042:./Libraries/FatFs/Src/ff.c **** 			w = ff_convert(w, 1);
5043:./Libraries/FatFs/Src/ff.c **** #endif
ARM GAS  /tmp/cceCRWeb.s 			page 275


5044:./Libraries/FatFs/Src/ff.c **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
5045:./Libraries/FatFs/Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5046:./Libraries/FatFs/Src/ff.c **** 			}
5047:./Libraries/FatFs/Src/ff.c **** 			st_word(dirvn + j, w); j += 2;
5048:./Libraries/FatFs/Src/ff.c **** 		}
5049:./Libraries/FatFs/Src/ff.c **** 		slen = j;
5050:./Libraries/FatFs/Src/ff.c **** 	} else
5051:./Libraries/FatFs/Src/ff.c **** #endif
5052:./Libraries/FatFs/Src/ff.c **** 	{	/* On the FAT12/16/32 volume */
5053:./Libraries/FatFs/Src/ff.c **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
5054:./Libraries/FatFs/Src/ff.c **** 		if (slen) {		/* Is there a volume label to be set? */
5055:./Libraries/FatFs/Src/ff.c **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
5056:./Libraries/FatFs/Src/ff.c **** 			do {
5057:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
5058:./Libraries/FatFs/Src/ff.c **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
5059:./Libraries/FatFs/Src/ff.c **** #else
5060:./Libraries/FatFs/Src/ff.c **** 				w = (BYTE)label[i++];
5061:./Libraries/FatFs/Src/ff.c **** 				if (IsDBCS1(w)) {
5062:./Libraries/FatFs/Src/ff.c **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5063:./Libraries/FatFs/Src/ff.c **** 				}
5064:./Libraries/FatFs/Src/ff.c **** #if _USE_LFN != 0
5065:./Libraries/FatFs/Src/ff.c **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
5066:./Libraries/FatFs/Src/ff.c **** #else
5067:./Libraries/FatFs/Src/ff.c **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
5068:./Libraries/FatFs/Src/ff.c **** #ifdef _EXCVT
5069:./Libraries/FatFs/Src/ff.c **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
5070:./Libraries/FatFs/Src/ff.c **** #else
5071:./Libraries/FatFs/Src/ff.c **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
5072:./Libraries/FatFs/Src/ff.c **** #endif
5073:./Libraries/FatFs/Src/ff.c **** #endif
5074:./Libraries/FatFs/Src/ff.c **** #endif
5075:./Libraries/FatFs/Src/ff.c **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
5076:./Libraries/FatFs/Src/ff.c **** 					LEAVE_FF(fs, FR_INVALID_NAME);
5077:./Libraries/FatFs/Src/ff.c **** 				}
5078:./Libraries/FatFs/Src/ff.c **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
5079:./Libraries/FatFs/Src/ff.c **** 				dirvn[j++] = (BYTE)w;
5080:./Libraries/FatFs/Src/ff.c **** 			} while (i < slen);
5081:./Libraries/FatFs/Src/ff.c **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
5082:./Libraries/FatFs/Src/ff.c **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5083:./Libraries/FatFs/Src/ff.c **** 		}
5084:./Libraries/FatFs/Src/ff.c **** 	}
5085:./Libraries/FatFs/Src/ff.c **** 
5086:./Libraries/FatFs/Src/ff.c **** 	/* Set volume label */
5087:./Libraries/FatFs/Src/ff.c **** 	dj.obj.sclust = 0;		/* Open root directory */
5088:./Libraries/FatFs/Src/ff.c **** 	res = dir_sdi(&dj, 0);
5089:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
5090:./Libraries/FatFs/Src/ff.c **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5091:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {
5092:./Libraries/FatFs/Src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5093:./Libraries/FatFs/Src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
5094:./Libraries/FatFs/Src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5095:./Libraries/FatFs/Src/ff.c **** 			} else {
5096:./Libraries/FatFs/Src/ff.c **** 				if (slen) {
5097:./Libraries/FatFs/Src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5098:./Libraries/FatFs/Src/ff.c **** 				} else {
5099:./Libraries/FatFs/Src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5100:./Libraries/FatFs/Src/ff.c **** 				}
ARM GAS  /tmp/cceCRWeb.s 			page 276


5101:./Libraries/FatFs/Src/ff.c **** 			}
5102:./Libraries/FatFs/Src/ff.c **** 			fs->wflag = 1;
5103:./Libraries/FatFs/Src/ff.c **** 			res = sync_fs(fs);
5104:./Libraries/FatFs/Src/ff.c **** 		} else {			/* No volume label entry is found or error */
5105:./Libraries/FatFs/Src/ff.c **** 			if (res == FR_NO_FILE) {
5106:./Libraries/FatFs/Src/ff.c **** 				res = FR_OK;
5107:./Libraries/FatFs/Src/ff.c **** 				if (slen) {	/* Create a volume label entry */
5108:./Libraries/FatFs/Src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5109:./Libraries/FatFs/Src/ff.c **** 					if (res == FR_OK) {
5110:./Libraries/FatFs/Src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5111:./Libraries/FatFs/Src/ff.c **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5112:./Libraries/FatFs/Src/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5113:./Libraries/FatFs/Src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5114:./Libraries/FatFs/Src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5115:./Libraries/FatFs/Src/ff.c **** 						} else {
5116:./Libraries/FatFs/Src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5117:./Libraries/FatFs/Src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5118:./Libraries/FatFs/Src/ff.c **** 						}
5119:./Libraries/FatFs/Src/ff.c **** 						fs->wflag = 1;
5120:./Libraries/FatFs/Src/ff.c **** 						res = sync_fs(fs);
5121:./Libraries/FatFs/Src/ff.c **** 					}
5122:./Libraries/FatFs/Src/ff.c **** 				}
5123:./Libraries/FatFs/Src/ff.c **** 			}
5124:./Libraries/FatFs/Src/ff.c **** 		}
5125:./Libraries/FatFs/Src/ff.c **** 	}
5126:./Libraries/FatFs/Src/ff.c **** 
5127:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
5128:./Libraries/FatFs/Src/ff.c **** }
5129:./Libraries/FatFs/Src/ff.c **** 
5130:./Libraries/FatFs/Src/ff.c **** #endif /* !_FS_READONLY */
5131:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_LABEL */
5132:./Libraries/FatFs/Src/ff.c **** 
5133:./Libraries/FatFs/Src/ff.c **** 
5134:./Libraries/FatFs/Src/ff.c **** 
5135:./Libraries/FatFs/Src/ff.c **** #if _USE_EXPAND && !_FS_READONLY
5136:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5137:./Libraries/FatFs/Src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5138:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5139:./Libraries/FatFs/Src/ff.c **** 
5140:./Libraries/FatFs/Src/ff.c **** FRESULT f_expand (
5141:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5142:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5143:./Libraries/FatFs/Src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5144:./Libraries/FatFs/Src/ff.c **** )
5145:./Libraries/FatFs/Src/ff.c **** {
5146:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
5147:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
5148:./Libraries/FatFs/Src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5149:./Libraries/FatFs/Src/ff.c **** 
5150:./Libraries/FatFs/Src/ff.c **** 
5151:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5152:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5153:./Libraries/FatFs/Src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5154:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
5155:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5156:./Libraries/FatFs/Src/ff.c **** #endif
5157:./Libraries/FatFs/Src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
ARM GAS  /tmp/cceCRWeb.s 			page 277


5158:./Libraries/FatFs/Src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5159:./Libraries/FatFs/Src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5160:./Libraries/FatFs/Src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5161:./Libraries/FatFs/Src/ff.c **** 
5162:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
5163:./Libraries/FatFs/Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5164:./Libraries/FatFs/Src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5165:./Libraries/FatFs/Src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5166:./Libraries/FatFs/Src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5167:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5168:./Libraries/FatFs/Src/ff.c **** 			if (opt) {		/* Allocate it now */
5169:./Libraries/FatFs/Src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5170:./Libraries/FatFs/Src/ff.c **** 				lclst = scl + tcl - 1;
5171:./Libraries/FatFs/Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5172:./Libraries/FatFs/Src/ff.c **** 				lclst = scl - 1;
5173:./Libraries/FatFs/Src/ff.c **** 			}
5174:./Libraries/FatFs/Src/ff.c **** 		}
5175:./Libraries/FatFs/Src/ff.c **** 	} else
5176:./Libraries/FatFs/Src/ff.c **** #endif
5177:./Libraries/FatFs/Src/ff.c **** 	{
5178:./Libraries/FatFs/Src/ff.c **** 		scl = clst = stcl; ncl = 0;
5179:./Libraries/FatFs/Src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5180:./Libraries/FatFs/Src/ff.c **** 			n = get_fat(&fp->obj, clst);
5181:./Libraries/FatFs/Src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5182:./Libraries/FatFs/Src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5183:./Libraries/FatFs/Src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5184:./Libraries/FatFs/Src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5185:./Libraries/FatFs/Src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5186:./Libraries/FatFs/Src/ff.c **** 			} else {
5187:./Libraries/FatFs/Src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5188:./Libraries/FatFs/Src/ff.c **** 			}
5189:./Libraries/FatFs/Src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5190:./Libraries/FatFs/Src/ff.c **** 		}
5191:./Libraries/FatFs/Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5192:./Libraries/FatFs/Src/ff.c **** 			if (opt) {		/* Allocate it now */
5193:./Libraries/FatFs/Src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5194:./Libraries/FatFs/Src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5195:./Libraries/FatFs/Src/ff.c **** 					if (res != FR_OK) break;
5196:./Libraries/FatFs/Src/ff.c **** 					lclst = clst;
5197:./Libraries/FatFs/Src/ff.c **** 				}
5198:./Libraries/FatFs/Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5199:./Libraries/FatFs/Src/ff.c **** 				lclst = scl - 1;
5200:./Libraries/FatFs/Src/ff.c **** 			}
5201:./Libraries/FatFs/Src/ff.c **** 		}
5202:./Libraries/FatFs/Src/ff.c **** 	}
5203:./Libraries/FatFs/Src/ff.c **** 
5204:./Libraries/FatFs/Src/ff.c **** 	if (res == FR_OK) {
5205:./Libraries/FatFs/Src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5206:./Libraries/FatFs/Src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5207:./Libraries/FatFs/Src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5208:./Libraries/FatFs/Src/ff.c **** 			fp->obj.objsize = fsz;
5209:./Libraries/FatFs/Src/ff.c **** 			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5210:./Libraries/FatFs/Src/ff.c **** 			fp->flag |= FA_MODIFIED;
5211:./Libraries/FatFs/Src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5212:./Libraries/FatFs/Src/ff.c **** 				fs->free_clst -= tcl;
5213:./Libraries/FatFs/Src/ff.c **** 				fs->fsi_flag |= 1;
5214:./Libraries/FatFs/Src/ff.c **** 			}
ARM GAS  /tmp/cceCRWeb.s 			page 278


5215:./Libraries/FatFs/Src/ff.c **** 		}
5216:./Libraries/FatFs/Src/ff.c **** 	}
5217:./Libraries/FatFs/Src/ff.c **** 
5218:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, res);
5219:./Libraries/FatFs/Src/ff.c **** }
5220:./Libraries/FatFs/Src/ff.c **** 
5221:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_EXPAND && !_FS_READONLY */
5222:./Libraries/FatFs/Src/ff.c **** 
5223:./Libraries/FatFs/Src/ff.c **** 
5224:./Libraries/FatFs/Src/ff.c **** 
5225:./Libraries/FatFs/Src/ff.c **** #if _USE_FORWARD
5226:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5227:./Libraries/FatFs/Src/ff.c **** /* Forward data to the stream directly                                   */
5228:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5229:./Libraries/FatFs/Src/ff.c **** 
5230:./Libraries/FatFs/Src/ff.c **** FRESULT f_forward (
5231:./Libraries/FatFs/Src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5232:./Libraries/FatFs/Src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5233:./Libraries/FatFs/Src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5234:./Libraries/FatFs/Src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5235:./Libraries/FatFs/Src/ff.c **** )
5236:./Libraries/FatFs/Src/ff.c **** {
5237:./Libraries/FatFs/Src/ff.c **** 	FRESULT res;
5238:./Libraries/FatFs/Src/ff.c **** 	FATFS *fs;
5239:./Libraries/FatFs/Src/ff.c **** 	DWORD clst, sect;
5240:./Libraries/FatFs/Src/ff.c **** 	FSIZE_t remain;
5241:./Libraries/FatFs/Src/ff.c **** 	UINT rcnt, csect;
5242:./Libraries/FatFs/Src/ff.c **** 	BYTE *dbuf;
5243:./Libraries/FatFs/Src/ff.c **** 
5244:./Libraries/FatFs/Src/ff.c **** 
5245:./Libraries/FatFs/Src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5246:./Libraries/FatFs/Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5247:./Libraries/FatFs/Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5248:./Libraries/FatFs/Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5249:./Libraries/FatFs/Src/ff.c **** 
5250:./Libraries/FatFs/Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5251:./Libraries/FatFs/Src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5252:./Libraries/FatFs/Src/ff.c **** 
5253:./Libraries/FatFs/Src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5254:./Libraries/FatFs/Src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5255:./Libraries/FatFs/Src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5256:./Libraries/FatFs/Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5257:./Libraries/FatFs/Src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5258:./Libraries/FatFs/Src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5259:./Libraries/FatFs/Src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5260:./Libraries/FatFs/Src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5261:./Libraries/FatFs/Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5262:./Libraries/FatFs/Src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5263:./Libraries/FatFs/Src/ff.c **** 			}
5264:./Libraries/FatFs/Src/ff.c **** 		}
5265:./Libraries/FatFs/Src/ff.c **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
5266:./Libraries/FatFs/Src/ff.c **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5267:./Libraries/FatFs/Src/ff.c **** 		sect += csect;
5268:./Libraries/FatFs/Src/ff.c **** #if _FS_TINY
5269:./Libraries/FatFs/Src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5270:./Libraries/FatFs/Src/ff.c **** 		dbuf = fs->win;
5271:./Libraries/FatFs/Src/ff.c **** #else
ARM GAS  /tmp/cceCRWeb.s 			page 279


5272:./Libraries/FatFs/Src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5273:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
5274:./Libraries/FatFs/Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5275:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5276:./Libraries/FatFs/Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5277:./Libraries/FatFs/Src/ff.c **** 			}
5278:./Libraries/FatFs/Src/ff.c **** #endif
5279:./Libraries/FatFs/Src/ff.c **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5280:./Libraries/FatFs/Src/ff.c **** 		}
5281:./Libraries/FatFs/Src/ff.c **** 		dbuf = fp->buf;
5282:./Libraries/FatFs/Src/ff.c **** #endif
5283:./Libraries/FatFs/Src/ff.c **** 		fp->sect = sect;
5284:./Libraries/FatFs/Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5285:./Libraries/FatFs/Src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5286:./Libraries/FatFs/Src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5287:./Libraries/FatFs/Src/ff.c **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5288:./Libraries/FatFs/Src/ff.c **** 	}
5289:./Libraries/FatFs/Src/ff.c **** 
5290:./Libraries/FatFs/Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5291:./Libraries/FatFs/Src/ff.c **** }
5292:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_FORWARD */
5293:./Libraries/FatFs/Src/ff.c **** 
5294:./Libraries/FatFs/Src/ff.c **** 
5295:./Libraries/FatFs/Src/ff.c **** 
5296:./Libraries/FatFs/Src/ff.c **** #if _USE_MKFS && !_FS_READONLY
5297:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5298:./Libraries/FatFs/Src/ff.c **** /* Create an FAT/exFAT volume                                            */
5299:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5300:./Libraries/FatFs/Src/ff.c **** 
5301:./Libraries/FatFs/Src/ff.c **** FRESULT f_mkfs (
5302:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5303:./Libraries/FatFs/Src/ff.c **** 	BYTE opt,			/* Format option */
5304:./Libraries/FatFs/Src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5305:./Libraries/FatFs/Src/ff.c **** 	void* work,			/* Pointer to working buffer */
5306:./Libraries/FatFs/Src/ff.c **** 	UINT len			/* Size of working buffer */
5307:./Libraries/FatFs/Src/ff.c **** )
5308:./Libraries/FatFs/Src/ff.c **** {
 10583              		.loc 1 5308 1
 10584              		.cfi_startproc
 10585              		@ args = 4, pretend = 0, frame = 112
 10586              		@ frame_needed = 1, uses_anonymous_args = 0
 10587 0000 90B5     		push	{r4, r7, lr}
 10588              	.LCFI296:
 10589              		.cfi_def_cfa_offset 12
 10590              		.cfi_offset 4, -12
 10591              		.cfi_offset 7, -8
 10592              		.cfi_offset 14, -4
 10593 0002 9DB0     		sub	sp, sp, #116
 10594              	.LCFI297:
 10595              		.cfi_def_cfa_offset 128
 10596 0004 00AF     		add	r7, sp, #0
 10597              	.LCFI298:
 10598              		.cfi_def_cfa_register 7
 10599 0006 F860     		str	r0, [r7, #12]
 10600 0008 7A60     		str	r2, [r7, #4]
 10601 000a 3B60     		str	r3, [r7]
 10602 000c 0B46     		mov	r3, r1
ARM GAS  /tmp/cceCRWeb.s 			page 280


 10603 000e FB72     		strb	r3, [r7, #11]
5309:./Libraries/FatFs/Src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 10604              		.loc 1 5309 13
 10605 0010 0123     		movs	r3, #1
 10606 0012 7B64     		str	r3, [r7, #68]
5310:./Libraries/FatFs/Src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 10607              		.loc 1 5310 13
 10608 0014 4FF40073 		mov	r3, #512
 10609 0018 3B64     		str	r3, [r7, #64]
5311:./Libraries/FatFs/Src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5312:./Libraries/FatFs/Src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5313:./Libraries/FatFs/Src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5314:./Libraries/FatFs/Src/ff.c **** 	WORD ss;
5315:./Libraries/FatFs/Src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5316:./Libraries/FatFs/Src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5317:./Libraries/FatFs/Src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5318:./Libraries/FatFs/Src/ff.c **** 	UINT i;
5319:./Libraries/FatFs/Src/ff.c **** 	int vol;
5320:./Libraries/FatFs/Src/ff.c **** 	DSTATUS stat;
5321:./Libraries/FatFs/Src/ff.c **** #if _USE_TRIM || _FS_EXFAT
5322:./Libraries/FatFs/Src/ff.c **** 	DWORD tbl[3];
5323:./Libraries/FatFs/Src/ff.c **** #endif
5324:./Libraries/FatFs/Src/ff.c **** 
5325:./Libraries/FatFs/Src/ff.c **** 
5326:./Libraries/FatFs/Src/ff.c **** 	/* Check mounted drive and clear work area */
5327:./Libraries/FatFs/Src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
 10610              		.loc 1 5327 8
 10611 001a 07F10C03 		add	r3, r7, #12
 10612 001e 1846     		mov	r0, r3
 10613 0020 FFF7FEFF 		bl	get_ldnumber
 10614 0024 F863     		str	r0, [r7, #60]
5328:./Libraries/FatFs/Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10615              		.loc 1 5328 5
 10616 0026 FB6B     		ldr	r3, [r7, #60]
 10617 0028 002B     		cmp	r3, #0
 10618 002a 02DA     		bge	.L610
 10619              		.loc 1 5328 22 discriminator 1
 10620 002c 0B23     		movs	r3, #11
 10621 002e 00F00DBC 		b	.L684
 10622              	.L610:
5329:./Libraries/FatFs/Src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 10623              		.loc 1 5329 11
 10624 0032 944A     		ldr	r2, .L689
 10625 0034 FB6B     		ldr	r3, [r7, #60]
 10626 0036 52F82330 		ldr	r3, [r2, r3, lsl #2]
 10627              		.loc 1 5329 5
 10628 003a 002B     		cmp	r3, #0
 10629 003c 05D0     		beq	.L612
 10630              		.loc 1 5329 23 discriminator 1
 10631 003e 914A     		ldr	r2, .L689
 10632 0040 FB6B     		ldr	r3, [r7, #60]
 10633 0042 52F82330 		ldr	r3, [r2, r3, lsl #2]
 10634              		.loc 1 5329 38 discriminator 1
 10635 0046 0022     		movs	r2, #0
 10636 0048 1A70     		strb	r2, [r3]
 10637              	.L612:
5330:./Libraries/FatFs/Src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
ARM GAS  /tmp/cceCRWeb.s 			page 281


 10638              		.loc 1 5330 7
 10639 004a FB6B     		ldr	r3, [r7, #60]
 10640 004c 87F83B30 		strb	r3, [r7, #59]
5331:./Libraries/FatFs/Src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 10641              		.loc 1 5331 7
 10642 0050 0023     		movs	r3, #0
 10643 0052 87F83A30 		strb	r3, [r7, #58]
5332:./Libraries/FatFs/Src/ff.c **** 
5333:./Libraries/FatFs/Src/ff.c **** 	/* Check physical drive status */
5334:./Libraries/FatFs/Src/ff.c **** 	stat = disk_initialize(pdrv);
 10644              		.loc 1 5334 9
 10645 0056 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 10646 005a 1846     		mov	r0, r3
 10647 005c FFF7FEFF 		bl	disk_initialize
 10648 0060 0346     		mov	r3, r0
 10649 0062 87F83930 		strb	r3, [r7, #57]
5335:./Libraries/FatFs/Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10650              		.loc 1 5335 11
 10651 0066 97F83930 		ldrb	r3, [r7, #57]	@ zero_extendqisi2
 10652 006a 03F00103 		and	r3, r3, #1
 10653              		.loc 1 5335 5
 10654 006e 002B     		cmp	r3, #0
 10655 0070 01D0     		beq	.L613
 10656              		.loc 1 5335 32 discriminator 1
 10657 0072 0323     		movs	r3, #3
 10658 0074 EAE3     		b	.L684
 10659              	.L613:
5336:./Libraries/FatFs/Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10660              		.loc 1 5336 11
 10661 0076 97F83930 		ldrb	r3, [r7, #57]	@ zero_extendqisi2
 10662 007a 03F00403 		and	r3, r3, #4
 10663              		.loc 1 5336 5
 10664 007e 002B     		cmp	r3, #0
 10665 0080 01D0     		beq	.L614
 10666              		.loc 1 5336 33 discriminator 1
 10667 0082 0A23     		movs	r3, #10
 10668 0084 E2E3     		b	.L684
 10669              	.L614:
5337:./Libraries/FatFs/Src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 10670              		.loc 1 5337 6
 10671 0086 07F11402 		add	r2, r7, #20
 10672 008a 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 10673 008e 0321     		movs	r1, #3
 10674 0090 1846     		mov	r0, r3
 10675 0092 FFF7FEFF 		bl	disk_ioctl
 10676 0096 0346     		mov	r3, r0
 10677              		.loc 1 5337 5
 10678 0098 002B     		cmp	r3, #0
 10679 009a 0CD1     		bne	.L615
 10680              		.loc 1 5337 61 discriminator 2
 10681 009c 7B69     		ldr	r3, [r7, #20]
 10682              		.loc 1 5337 58 discriminator 2
 10683 009e 002B     		cmp	r3, #0
 10684 00a0 09D0     		beq	.L615
 10685              		.loc 1 5337 79 discriminator 4
 10686 00a2 7B69     		ldr	r3, [r7, #20]
 10687              		.loc 1 5337 69 discriminator 4
ARM GAS  /tmp/cceCRWeb.s 			page 282


 10688 00a4 B3F5004F 		cmp	r3, #32768
 10689 00a8 05D8     		bhi	.L615
 10690              		.loc 1 5337 108 discriminator 6
 10691 00aa 7B69     		ldr	r3, [r7, #20]
 10692 00ac 5A1E     		subs	r2, r3, #1
 10693              		.loc 1 5337 98 discriminator 6
 10694 00ae 7B69     		ldr	r3, [r7, #20]
 10695 00b0 1340     		ands	r3, r3, r2
 10696              		.loc 1 5337 87 discriminator 6
 10697 00b2 002B     		cmp	r3, #0
 10698 00b4 01D0     		beq	.L616
 10699              	.L615:
 10700              		.loc 1 5337 122 discriminator 7
 10701 00b6 0123     		movs	r3, #1
 10702 00b8 7B61     		str	r3, [r7, #20]
 10703              	.L616:
5338:./Libraries/FatFs/Src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5339:./Libraries/FatFs/Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5340:./Libraries/FatFs/Src/ff.c **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5341:./Libraries/FatFs/Src/ff.c **** #else
5342:./Libraries/FatFs/Src/ff.c **** 	ss = _MAX_SS;
 10704              		.loc 1 5342 5
 10705 00ba 4FF40073 		mov	r3, #512
 10706 00be FB86     		strh	r3, [r7, #54]	@ movhi
5343:./Libraries/FatFs/Src/ff.c **** #endif
5344:./Libraries/FatFs/Src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
 10707              		.loc 1 5344 5
 10708 00c0 7B68     		ldr	r3, [r7, #4]
 10709 00c2 002B     		cmp	r3, #0
 10710 00c4 03D0     		beq	.L617
 10711              		.loc 1 5344 21 discriminator 1
 10712 00c6 FB8E     		ldrh	r3, [r7, #54]
 10713              		.loc 1 5344 15 discriminator 1
 10714 00c8 7A68     		ldr	r2, [r7, #4]
 10715 00ca 9A42     		cmp	r2, r3
 10716 00cc 09D3     		bcc	.L618
 10717              	.L617:
 10718              		.loc 1 5344 27 discriminator 4
 10719 00ce 7B68     		ldr	r3, [r7, #4]
 10720 00d0 B3F1807F 		cmp	r3, #16777216
 10721 00d4 05D8     		bhi	.L618
 10722              		.loc 1 5344 58 discriminator 6
 10723 00d6 7B68     		ldr	r3, [r7, #4]
 10724 00d8 5A1E     		subs	r2, r3, #1
 10725              		.loc 1 5344 52 discriminator 6
 10726 00da 7B68     		ldr	r3, [r7, #4]
 10727 00dc 1340     		ands	r3, r3, r2
 10728              		.loc 1 5344 45 discriminator 6
 10729 00de 002B     		cmp	r3, #0
 10730 00e0 01D0     		beq	.L619
 10731              	.L618:
 10732              		.loc 1 5344 72 discriminator 7
 10733 00e2 1323     		movs	r3, #19
 10734 00e4 B2E3     		b	.L684
 10735              	.L619:
5345:./Libraries/FatFs/Src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10736              		.loc 1 5345 5
ARM GAS  /tmp/cceCRWeb.s 			page 283


 10737 00e6 FB8E     		ldrh	r3, [r7, #54]
 10738 00e8 7A68     		ldr	r2, [r7, #4]
 10739 00ea B2FBF3F3 		udiv	r3, r2, r3
 10740 00ee 7B60     		str	r3, [r7, #4]
5346:./Libraries/FatFs/Src/ff.c **** 
5347:./Libraries/FatFs/Src/ff.c **** 	/* Get working buffer */
5348:./Libraries/FatFs/Src/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
 10741              		.loc 1 5348 6
 10742 00f0 3B68     		ldr	r3, [r7]
 10743 00f2 3B63     		str	r3, [r7, #48]
5349:./Libraries/FatFs/Src/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer (sector) */
 10744              		.loc 1 5349 15
 10745 00f4 FB8E     		ldrh	r3, [r7, #54]
 10746              		.loc 1 5349 9
 10747 00f6 D7F88020 		ldr	r2, [r7, #128]
 10748 00fa B2FBF3F3 		udiv	r3, r2, r3
 10749 00fe FB62     		str	r3, [r7, #44]
5350:./Libraries/FatFs/Src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 10750              		.loc 1 5350 19
 10751 0100 FA8E     		ldrh	r2, [r7, #54]
 10752              		.loc 1 5350 10
 10753 0102 FB6A     		ldr	r3, [r7, #44]
 10754 0104 02FB03F3 		mul	r3, r2, r3
 10755 0108 BB62     		str	r3, [r7, #40]
5351:./Libraries/FatFs/Src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
 10756              		.loc 1 5351 5
 10757 010a BB6A     		ldr	r3, [r7, #40]
 10758 010c 002B     		cmp	r3, #0
 10759 010e 01D1     		bne	.L620
 10760              		.loc 1 5351 23 discriminator 1
 10761 0110 0E23     		movs	r3, #14
 10762 0112 9BE3     		b	.L684
 10763              	.L620:
5352:./Libraries/FatFs/Src/ff.c **** 
5353:./Libraries/FatFs/Src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5354:./Libraries/FatFs/Src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5355:./Libraries/FatFs/Src/ff.c **** 		/* Get partition information from partition table in the MBR */
5356:./Libraries/FatFs/Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5357:./Libraries/FatFs/Src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check if MBR is valid */
5358:./Libraries/FatFs/Src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5359:./Libraries/FatFs/Src/ff.c **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5360:./Libraries/FatFs/Src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5361:./Libraries/FatFs/Src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5362:./Libraries/FatFs/Src/ff.c **** 	} else {
5363:./Libraries/FatFs/Src/ff.c **** 		/* Create a single-partition in this function */
5364:./Libraries/FatFs/Src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 10764              		.loc 1 5364 7
 10765 0114 07F11002 		add	r2, r7, #16
 10766 0118 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 10767 011c 0121     		movs	r1, #1
 10768 011e 1846     		mov	r0, r3
 10769 0120 FFF7FEFF 		bl	disk_ioctl
 10770 0124 0346     		mov	r3, r0
 10771              		.loc 1 5364 6
 10772 0126 002B     		cmp	r3, #0
 10773 0128 01D0     		beq	.L621
 10774              		.loc 1 5364 69 discriminator 1
ARM GAS  /tmp/cceCRWeb.s 			page 284


 10775 012a 0123     		movs	r3, #1
 10776 012c 8EE3     		b	.L684
 10777              	.L621:
5365:./Libraries/FatFs/Src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 10778              		.loc 1 5365 16
 10779 012e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10780 0130 03F00803 		and	r3, r3, #8
 10781              		.loc 1 5365 30
 10782 0134 002B     		cmp	r3, #0
 10783 0136 01D0     		beq	.L622
 10784              		.loc 1 5365 30 is_stmt 0 discriminator 1
 10785 0138 0023     		movs	r3, #0
 10786 013a 00E0     		b	.L623
 10787              	.L622:
 10788              		.loc 1 5365 30 discriminator 2
 10789 013c 3F23     		movs	r3, #63
 10790              	.L623:
 10791              		.loc 1 5365 9 is_stmt 1 discriminator 4
 10792 013e 7B62     		str	r3, [r7, #36]
5366:./Libraries/FatFs/Src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 10793              		.loc 1 5366 14 discriminator 4
 10794 0140 3B69     		ldr	r3, [r7, #16]
 10795              		.loc 1 5366 6 discriminator 4
 10796 0142 7A6A     		ldr	r2, [r7, #36]
 10797 0144 9A42     		cmp	r2, r3
 10798 0146 01D9     		bls	.L624
 10799              		.loc 1 5366 30 discriminator 1
 10800 0148 0E23     		movs	r3, #14
 10801 014a 7FE3     		b	.L684
 10802              	.L624:
5367:./Libraries/FatFs/Src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 10803              		.loc 1 5367 10
 10804 014c 3A69     		ldr	r2, [r7, #16]
 10805 014e 7B6A     		ldr	r3, [r7, #36]
 10806 0150 D31A     		subs	r3, r2, r3
 10807 0152 3B61     		str	r3, [r7, #16]
5368:./Libraries/FatFs/Src/ff.c **** 	}
5369:./Libraries/FatFs/Src/ff.c **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 10808              		.loc 1 5369 13
 10809 0154 3B69     		ldr	r3, [r7, #16]
 10810              		.loc 1 5369 5
 10811 0156 7F2B     		cmp	r3, #127
 10812 0158 01D8     		bhi	.L625
 10813              		.loc 1 5369 27 discriminator 1
 10814 015a 0E23     		movs	r3, #14
 10815 015c 76E3     		b	.L684
 10816              	.L625:
5370:./Libraries/FatFs/Src/ff.c **** 
5371:./Libraries/FatFs/Src/ff.c **** 	/* Pre-determine the FAT type */
5372:./Libraries/FatFs/Src/ff.c **** 	do {
5373:./Libraries/FatFs/Src/ff.c **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5374:./Libraries/FatFs/Src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5375:./Libraries/FatFs/Src/ff.c **** 				fmt = FS_EXFAT; break;
5376:./Libraries/FatFs/Src/ff.c **** 			}
5377:./Libraries/FatFs/Src/ff.c **** 		}
5378:./Libraries/FatFs/Src/ff.c **** 		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 10817              		.loc 1 5378 6
ARM GAS  /tmp/cceCRWeb.s 			page 285


 10818 015e 7B68     		ldr	r3, [r7, #4]
 10819 0160 802B     		cmp	r3, #128
 10820 0162 01D9     		bls	.L626
 10821              		.loc 1 5378 24 discriminator 1
 10822 0164 1323     		movs	r3, #19
 10823 0166 71E3     		b	.L684
 10824              	.L626:
5379:./Libraries/FatFs/Src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 10825              		.loc 1 5379 11
 10826 0168 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10827 016a 03F00203 		and	r3, r3, #2
 10828              		.loc 1 5379 6
 10829 016e 002B     		cmp	r3, #0
 10830 0170 0DD0     		beq	.L627
5380:./Libraries/FatFs/Src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 10831              		.loc 1 5380 13
 10832 0172 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10833 0174 03F00703 		and	r3, r3, #7
 10834              		.loc 1 5380 7
 10835 0178 022B     		cmp	r3, #2
 10836 017a 04D0     		beq	.L628
 10837              		.loc 1 5380 44 discriminator 1
 10838 017c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10839 017e 03F00103 		and	r3, r3, #1
 10840              		.loc 1 5380 35 discriminator 1
 10841 0182 002B     		cmp	r3, #0
 10842 0184 03D1     		bne	.L627
 10843              	.L628:
5381:./Libraries/FatFs/Src/ff.c **** 				fmt = FS_FAT32; break;
 10844              		.loc 1 5381 9
 10845 0186 0323     		movs	r3, #3
 10846 0188 87F84F30 		strb	r3, [r7, #79]
 10847              		.loc 1 5381 5
 10848 018c 09E0     		b	.L656
 10849              	.L627:
5382:./Libraries/FatFs/Src/ff.c **** 			}
5383:./Libraries/FatFs/Src/ff.c **** 		}
5384:./Libraries/FatFs/Src/ff.c **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 10850              		.loc 1 5384 13
 10851 018e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10852 0190 03F00103 		and	r3, r3, #1
 10853              		.loc 1 5384 6
 10854 0194 002B     		cmp	r3, #0
 10855 0196 01D1     		bne	.L630
 10856              		.loc 1 5384 31 discriminator 1
 10857 0198 1323     		movs	r3, #19
 10858 019a 57E3     		b	.L684
 10859              	.L630:
5385:./Libraries/FatFs/Src/ff.c **** 		fmt = FS_FAT16;
 10860              		.loc 1 5385 7
 10861 019c 0223     		movs	r3, #2
 10862 019e 87F84F30 		strb	r3, [r7, #79]
 10863              	.L656:
5386:./Libraries/FatFs/Src/ff.c **** 	} while (0);
5387:./Libraries/FatFs/Src/ff.c **** 
5388:./Libraries/FatFs/Src/ff.c **** #if _FS_EXFAT
5389:./Libraries/FatFs/Src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
ARM GAS  /tmp/cceCRWeb.s 			page 286


5390:./Libraries/FatFs/Src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5391:./Libraries/FatFs/Src/ff.c **** 		WCHAR ch, si;
5392:./Libraries/FatFs/Src/ff.c **** 		UINT j, st;
5393:./Libraries/FatFs/Src/ff.c **** 		BYTE b;
5394:./Libraries/FatFs/Src/ff.c **** 
5395:./Libraries/FatFs/Src/ff.c **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5396:./Libraries/FatFs/Src/ff.c **** #if _USE_TRIM
5397:./Libraries/FatFs/Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5398:./Libraries/FatFs/Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5399:./Libraries/FatFs/Src/ff.c **** #endif
5400:./Libraries/FatFs/Src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5401:./Libraries/FatFs/Src/ff.c **** 		if (!au) {	/* au auto-selection */
5402:./Libraries/FatFs/Src/ff.c **** 			au = 8;
5403:./Libraries/FatFs/Src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5404:./Libraries/FatFs/Src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5405:./Libraries/FatFs/Src/ff.c **** 		}
5406:./Libraries/FatFs/Src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5407:./Libraries/FatFs/Src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5408:./Libraries/FatFs/Src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5409:./Libraries/FatFs/Src/ff.c **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5410:./Libraries/FatFs/Src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5411:./Libraries/FatFs/Src/ff.c **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5412:./Libraries/FatFs/Src/ff.c **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5413:./Libraries/FatFs/Src/ff.c **** 
5414:./Libraries/FatFs/Src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5415:./Libraries/FatFs/Src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5416:./Libraries/FatFs/Src/ff.c **** 
5417:./Libraries/FatFs/Src/ff.c **** 		/* Create a compressed up-case table */
5418:./Libraries/FatFs/Src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5419:./Libraries/FatFs/Src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5420:./Libraries/FatFs/Src/ff.c **** 		st = si = i = j = szb_case = 0;
5421:./Libraries/FatFs/Src/ff.c **** 		do {
5422:./Libraries/FatFs/Src/ff.c **** 			switch (st) {
5423:./Libraries/FatFs/Src/ff.c **** 			case 0:
5424:./Libraries/FatFs/Src/ff.c **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5425:./Libraries/FatFs/Src/ff.c **** 				if (ch != si) {
5426:./Libraries/FatFs/Src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5427:./Libraries/FatFs/Src/ff.c **** 				}
5428:./Libraries/FatFs/Src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5429:./Libraries/FatFs/Src/ff.c **** 				if (j >= 128) {
5430:./Libraries/FatFs/Src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5431:./Libraries/FatFs/Src/ff.c **** 				}
5432:./Libraries/FatFs/Src/ff.c **** 				st = 1;			/* Do not compress short run */
5433:./Libraries/FatFs/Src/ff.c **** 				/* go to next case */
5434:./Libraries/FatFs/Src/ff.c **** 			case 1:
5435:./Libraries/FatFs/Src/ff.c **** 				ch = si++;		/* Fill the short run */
5436:./Libraries/FatFs/Src/ff.c **** 				if (--j == 0) st = 0;
5437:./Libraries/FatFs/Src/ff.c **** 				break;
5438:./Libraries/FatFs/Src/ff.c **** 
5439:./Libraries/FatFs/Src/ff.c **** 			default:
5440:./Libraries/FatFs/Src/ff.c **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
5441:./Libraries/FatFs/Src/ff.c **** 				st = 0;
5442:./Libraries/FatFs/Src/ff.c **** 			}
5443:./Libraries/FatFs/Src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5444:./Libraries/FatFs/Src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5445:./Libraries/FatFs/Src/ff.c **** 			i += 2; szb_case += 2;
5446:./Libraries/FatFs/Src/ff.c **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
ARM GAS  /tmp/cceCRWeb.s 			page 287


5447:./Libraries/FatFs/Src/ff.c **** 				n = (i + ss - 1) / ss;
5448:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5449:./Libraries/FatFs/Src/ff.c **** 				sect += n; i = 0;
5450:./Libraries/FatFs/Src/ff.c **** 			}
5451:./Libraries/FatFs/Src/ff.c **** 		} while (si);
5452:./Libraries/FatFs/Src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5453:./Libraries/FatFs/Src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5454:./Libraries/FatFs/Src/ff.c **** 
5455:./Libraries/FatFs/Src/ff.c **** 		/* Initialize the allocation bitmap */
5456:./Libraries/FatFs/Src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5457:./Libraries/FatFs/Src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5458:./Libraries/FatFs/Src/ff.c **** 		do {
5459:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, szb_buf);
5460:./Libraries/FatFs/Src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5461:./Libraries/FatFs/Src/ff.c **** 			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5462:./Libraries/FatFs/Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5463:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5464:./Libraries/FatFs/Src/ff.c **** 			sect += n; nsect -= n;
5465:./Libraries/FatFs/Src/ff.c **** 		} while (nsect);
5466:./Libraries/FatFs/Src/ff.c **** 
5467:./Libraries/FatFs/Src/ff.c **** 		/* Initialize the FAT */
5468:./Libraries/FatFs/Src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5469:./Libraries/FatFs/Src/ff.c **** 		j = nb = cl = 0;
5470:./Libraries/FatFs/Src/ff.c **** 		do {
5471:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5472:./Libraries/FatFs/Src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5473:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5474:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5475:./Libraries/FatFs/Src/ff.c **** 			}
5476:./Libraries/FatFs/Src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5477:./Libraries/FatFs/Src/ff.c **** 				while (nb && i < szb_buf) {			/* Create a chain */
5478:./Libraries/FatFs/Src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5479:./Libraries/FatFs/Src/ff.c **** 					i += 4; cl++; nb--;
5480:./Libraries/FatFs/Src/ff.c **** 				}
5481:./Libraries/FatFs/Src/ff.c **** 				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
5482:./Libraries/FatFs/Src/ff.c **** 			} while (nb && i < szb_buf);
5483:./Libraries/FatFs/Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5484:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5485:./Libraries/FatFs/Src/ff.c **** 			sect += n; nsect -= n;
5486:./Libraries/FatFs/Src/ff.c **** 		} while (nsect);
5487:./Libraries/FatFs/Src/ff.c **** 
5488:./Libraries/FatFs/Src/ff.c **** 		/* Initialize the root directory */
5489:./Libraries/FatFs/Src/ff.c **** 		mem_set(buf, 0, szb_buf);
5490:./Libraries/FatFs/Src/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5491:./Libraries/FatFs/Src/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5492:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5493:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5494:./Libraries/FatFs/Src/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5495:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
5496:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5497:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
5498:./Libraries/FatFs/Src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5499:./Libraries/FatFs/Src/ff.c **** 		do {	/* Fill root directory sectors */
5500:./Libraries/FatFs/Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5501:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5502:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
5503:./Libraries/FatFs/Src/ff.c **** 			sect += n; nsect -= n;
ARM GAS  /tmp/cceCRWeb.s 			page 288


5504:./Libraries/FatFs/Src/ff.c **** 		} while (nsect);
5505:./Libraries/FatFs/Src/ff.c **** 
5506:./Libraries/FatFs/Src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5507:./Libraries/FatFs/Src/ff.c **** 		sect = b_vol;
5508:./Libraries/FatFs/Src/ff.c **** 		for (n = 0; n < 2; n++) {
5509:./Libraries/FatFs/Src/ff.c **** 			/* Main record (+0) */
5510:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
5511:./Libraries/FatFs/Src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5512:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5513:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5514:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5515:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5516:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5517:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5518:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5519:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5520:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
5521:./Libraries/FatFs/Src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5522:./Libraries/FatFs/Src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5523:./Libraries/FatFs/Src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5524:./Libraries/FatFs/Src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5525:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5526:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5527:./Libraries/FatFs/Src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5528:./Libraries/FatFs/Src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5529:./Libraries/FatFs/Src/ff.c **** 			}
5530:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5531:./Libraries/FatFs/Src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5532:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
5533:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5534:./Libraries/FatFs/Src/ff.c **** 			for (j = 1; j < 9; j++) {
5535:./Libraries/FatFs/Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5536:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5537:./Libraries/FatFs/Src/ff.c **** 			}
5538:./Libraries/FatFs/Src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5539:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
5540:./Libraries/FatFs/Src/ff.c **** 			for ( ; j < 11; j++) {
5541:./Libraries/FatFs/Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5542:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5543:./Libraries/FatFs/Src/ff.c **** 			}
5544:./Libraries/FatFs/Src/ff.c **** 			/* Sum record (+11) */
5545:./Libraries/FatFs/Src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5546:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5547:./Libraries/FatFs/Src/ff.c **** 		}
5548:./Libraries/FatFs/Src/ff.c **** 
5549:./Libraries/FatFs/Src/ff.c **** 	} else
5550:./Libraries/FatFs/Src/ff.c **** #endif	/* _FS_EXFAT */
5551:./Libraries/FatFs/Src/ff.c **** 	{	/* Create an FAT12/16/32 volume */
5552:./Libraries/FatFs/Src/ff.c **** 		do {
5553:./Libraries/FatFs/Src/ff.c **** 			pau = au;
 10864              		.loc 1 5553 8
 10865 01a2 7B68     		ldr	r3, [r7, #4]
 10866 01a4 3B65     		str	r3, [r7, #80]
5554:./Libraries/FatFs/Src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5555:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
 10867              		.loc 1 5555 7
 10868 01a6 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
ARM GAS  /tmp/cceCRWeb.s 			page 289


 10869 01aa 032B     		cmp	r3, #3
 10870 01ac 3CD1     		bne	.L631
5556:./Libraries/FatFs/Src/ff.c **** 				if (!pau) {	/* au auto-selection */
 10871              		.loc 1 5556 8
 10872 01ae 3B6D     		ldr	r3, [r7, #80]
 10873 01b0 002B     		cmp	r3, #0
 10874 01b2 1BD1     		bne	.L632
5557:./Libraries/FatFs/Src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 10875              		.loc 1 5557 17
 10876 01b4 3B69     		ldr	r3, [r7, #16]
 10877              		.loc 1 5557 8
 10878 01b6 5B0C     		lsrs	r3, r3, #17
 10879 01b8 FB65     		str	r3, [r7, #92]
5558:./Libraries/FatFs/Src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 10880              		.loc 1 5558 13
 10881 01ba 0023     		movs	r3, #0
 10882 01bc BB64     		str	r3, [r7, #72]
 10883              		.loc 1 5558 22
 10884 01be 0123     		movs	r3, #1
 10885 01c0 3B65     		str	r3, [r7, #80]
 10886              		.loc 1 5558 6
 10887 01c2 05E0     		b	.L633
 10888              	.L634:
 10889              		.loc 1 5558 55 discriminator 4
 10890 01c4 BB6C     		ldr	r3, [r7, #72]
 10891 01c6 0133     		adds	r3, r3, #1
 10892 01c8 BB64     		str	r3, [r7, #72]
 10893              		.loc 1 5558 63 discriminator 4
 10894 01ca 3B6D     		ldr	r3, [r7, #80]
 10895 01cc 5B00     		lsls	r3, r3, #1
 10896 01ce 3B65     		str	r3, [r7, #80]
 10897              	.L633:
 10898              		.loc 1 5558 32 discriminator 1
 10899 01d0 2D4A     		ldr	r2, .L689+4
 10900 01d2 BB6C     		ldr	r3, [r7, #72]
 10901 01d4 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 10902              		.loc 1 5558 6 discriminator 1
 10903 01d8 002B     		cmp	r3, #0
 10904 01da 07D0     		beq	.L632
 10905              		.loc 1 5558 44 discriminator 3
 10906 01dc 2A4A     		ldr	r2, .L689+4
 10907 01de BB6C     		ldr	r3, [r7, #72]
 10908 01e0 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 10909 01e4 1A46     		mov	r2, r3
 10910              		.loc 1 5558 36 discriminator 3
 10911 01e6 FB6D     		ldr	r3, [r7, #92]
 10912 01e8 9342     		cmp	r3, r2
 10913 01ea EBD2     		bcs	.L634
 10914              	.L632:
5559:./Libraries/FatFs/Src/ff.c **** 				}
5560:./Libraries/FatFs/Src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
 10915              		.loc 1 5560 21
 10916 01ec 3A69     		ldr	r2, [r7, #16]
 10917              		.loc 1 5560 12
 10918 01ee 3B6D     		ldr	r3, [r7, #80]
 10919 01f0 B2FBF3F3 		udiv	r3, r2, r3
 10920 01f4 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/cceCRWeb.s 			page 290


5561:./Libraries/FatFs/Src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 10921              		.loc 1 5561 26
 10922 01f6 3B6A     		ldr	r3, [r7, #32]
 10923 01f8 0233     		adds	r3, r3, #2
 10924 01fa 9A00     		lsls	r2, r3, #2
 10925              		.loc 1 5561 30
 10926 01fc FB8E     		ldrh	r3, [r7, #54]
 10927 01fe 1344     		add	r3, r3, r2
 10928              		.loc 1 5561 35
 10929 0200 5A1E     		subs	r2, r3, #1
 10930              		.loc 1 5561 40
 10931 0202 FB8E     		ldrh	r3, [r7, #54]
 10932              		.loc 1 5561 12
 10933 0204 B2FBF3F3 		udiv	r3, r2, r3
 10934 0208 BB66     		str	r3, [r7, #104]
5562:./Libraries/FatFs/Src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
 10935              		.loc 1 5562 12
 10936 020a 2023     		movs	r3, #32
 10937 020c 7B65     		str	r3, [r7, #84]
5563:./Libraries/FatFs/Src/ff.c **** 				sz_dir = 0;		/* No static directory */
 10938              		.loc 1 5563 12
 10939 020e 0023     		movs	r3, #0
 10940 0210 FB66     		str	r3, [r7, #108]
5564:./Libraries/FatFs/Src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 10941              		.loc 1 5564 8
 10942 0212 3B6A     		ldr	r3, [r7, #32]
 10943 0214 4FF6F572 		movw	r2, #65525
 10944 0218 9342     		cmp	r3, r2
 10945 021a 03D9     		bls	.L635
 10946              		.loc 1 5564 29 discriminator 2
 10947 021c 3B6A     		ldr	r3, [r7, #32]
 10948 021e 1B4A     		ldr	r2, .L689+8
 10949 0220 9342     		cmp	r3, r2
 10950 0222 52D9     		bls	.L636
 10951              	.L635:
 10952              		.loc 1 5564 59 discriminator 3
 10953 0224 0E23     		movs	r3, #14
 10954 0226 11E3     		b	.L684
 10955              	.L631:
5565:./Libraries/FatFs/Src/ff.c **** 			} else {				/* FAT12/16 volume */
5566:./Libraries/FatFs/Src/ff.c **** 				if (!pau) {	/* au auto-selection */
 10956              		.loc 1 5566 8
 10957 0228 3B6D     		ldr	r3, [r7, #80]
 10958 022a 002B     		cmp	r3, #0
 10959 022c 1BD1     		bne	.L637
5567:./Libraries/FatFs/Src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 10960              		.loc 1 5567 17
 10961 022e 3B69     		ldr	r3, [r7, #16]
 10962              		.loc 1 5567 8
 10963 0230 1B0B     		lsrs	r3, r3, #12
 10964 0232 FB65     		str	r3, [r7, #92]
5568:./Libraries/FatFs/Src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 10965              		.loc 1 5568 13
 10966 0234 0023     		movs	r3, #0
 10967 0236 BB64     		str	r3, [r7, #72]
 10968              		.loc 1 5568 22
 10969 0238 0123     		movs	r3, #1
ARM GAS  /tmp/cceCRWeb.s 			page 291


 10970 023a 3B65     		str	r3, [r7, #80]
 10971              		.loc 1 5568 6
 10972 023c 05E0     		b	.L638
 10973              	.L639:
 10974              		.loc 1 5568 51 discriminator 4
 10975 023e BB6C     		ldr	r3, [r7, #72]
 10976 0240 0133     		adds	r3, r3, #1
 10977 0242 BB64     		str	r3, [r7, #72]
 10978              		.loc 1 5568 59 discriminator 4
 10979 0244 3B6D     		ldr	r3, [r7, #80]
 10980 0246 5B00     		lsls	r3, r3, #1
 10981 0248 3B65     		str	r3, [r7, #80]
 10982              	.L638:
 10983              		.loc 1 5568 30 discriminator 1
 10984 024a 114A     		ldr	r2, .L689+12
 10985 024c BB6C     		ldr	r3, [r7, #72]
 10986 024e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 10987              		.loc 1 5568 6 discriminator 1
 10988 0252 002B     		cmp	r3, #0
 10989 0254 07D0     		beq	.L637
 10990              		.loc 1 5568 40 discriminator 3
 10991 0256 0E4A     		ldr	r2, .L689+12
 10992 0258 BB6C     		ldr	r3, [r7, #72]
 10993 025a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 10994 025e 1A46     		mov	r2, r3
 10995              		.loc 1 5568 34 discriminator 3
 10996 0260 FB6D     		ldr	r3, [r7, #92]
 10997 0262 9342     		cmp	r3, r2
 10998 0264 EBD2     		bcs	.L639
 10999              	.L637:
5569:./Libraries/FatFs/Src/ff.c **** 				}
5570:./Libraries/FatFs/Src/ff.c **** 				n_clst = sz_vol / pau;
 11000              		.loc 1 5570 21
 11001 0266 3A69     		ldr	r2, [r7, #16]
 11002              		.loc 1 5570 12
 11003 0268 3B6D     		ldr	r3, [r7, #80]
 11004 026a B2FBF3F3 		udiv	r3, r2, r3
 11005 026e 3B62     		str	r3, [r7, #32]
5571:./Libraries/FatFs/Src/ff.c **** 				if (n_clst > MAX_FAT12) {
 11006              		.loc 1 5571 8
 11007 0270 3B6A     		ldr	r3, [r7, #32]
 11008 0272 40F6F572 		movw	r2, #4085
 11009 0276 9342     		cmp	r3, r2
 11010 0278 0CD9     		bls	.L640
5572:./Libraries/FatFs/Src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
 11011              		.loc 1 5572 21
 11012 027a 3B6A     		ldr	r3, [r7, #32]
 11013 027c 0233     		adds	r3, r3, #2
 11014              		.loc 1 5572 8
 11015 027e 5B00     		lsls	r3, r3, #1
 11016 0280 FB65     		str	r3, [r7, #92]
 11017 0282 12E0     		b	.L641
 11018              	.L690:
 11019              		.align	2
 11020              	.L689:
 11021 0284 00000000 		.word	FatFs
 11022 0288 00000000 		.word	cst32.15639
ARM GAS  /tmp/cceCRWeb.s 			page 292


 11023 028c F5FFFF0F 		.word	268435445
 11024 0290 00000000 		.word	cst.15638
 11025              	.L640:
5573:./Libraries/FatFs/Src/ff.c **** 				} else {
5574:./Libraries/FatFs/Src/ff.c **** 					fmt = FS_FAT12;
 11026              		.loc 1 5574 10
 11027 0294 0123     		movs	r3, #1
 11028 0296 87F84F30 		strb	r3, [r7, #79]
5575:./Libraries/FatFs/Src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 11029              		.loc 1 5575 18
 11030 029a 3A6A     		ldr	r2, [r7, #32]
 11031 029c 1346     		mov	r3, r2
 11032 029e 5B00     		lsls	r3, r3, #1
 11033 02a0 1344     		add	r3, r3, r2
 11034              		.loc 1 5575 22
 11035 02a2 0133     		adds	r3, r3, #1
 11036              		.loc 1 5575 27
 11037 02a4 5B08     		lsrs	r3, r3, #1
 11038              		.loc 1 5575 8
 11039 02a6 0333     		adds	r3, r3, #3
 11040 02a8 FB65     		str	r3, [r7, #92]
 11041              	.L641:
5576:./Libraries/FatFs/Src/ff.c **** 				}
5577:./Libraries/FatFs/Src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 11042              		.loc 1 5577 17
 11043 02aa FA8E     		ldrh	r2, [r7, #54]
 11044 02ac FB6D     		ldr	r3, [r7, #92]
 11045 02ae 1344     		add	r3, r3, r2
 11046              		.loc 1 5577 22
 11047 02b0 5A1E     		subs	r2, r3, #1
 11048              		.loc 1 5577 27
 11049 02b2 FB8E     		ldrh	r3, [r7, #54]
 11050              		.loc 1 5577 12
 11051 02b4 B2FBF3F3 		udiv	r3, r2, r3
 11052 02b8 BB66     		str	r3, [r7, #104]
5578:./Libraries/FatFs/Src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
 11053              		.loc 1 5578 12
 11054 02ba 0123     		movs	r3, #1
 11055 02bc 7B65     		str	r3, [r7, #84]
5579:./Libraries/FatFs/Src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 11056              		.loc 1 5579 31
 11057 02be 3B6C     		ldr	r3, [r7, #64]
 11058 02c0 5A01     		lsls	r2, r3, #5
 11059              		.loc 1 5579 40
 11060 02c2 FB8E     		ldrh	r3, [r7, #54]
 11061              		.loc 1 5579 12
 11062 02c4 B2FBF3F3 		udiv	r3, r2, r3
 11063 02c8 FB66     		str	r3, [r7, #108]
 11064              	.L636:
5580:./Libraries/FatFs/Src/ff.c **** 			}
5581:./Libraries/FatFs/Src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
 11065              		.loc 1 5581 10
 11066 02ca 7A6A     		ldr	r2, [r7, #36]
 11067 02cc 7B6D     		ldr	r3, [r7, #84]
 11068 02ce 1344     		add	r3, r3, r2
 11069 02d0 BB65     		str	r3, [r7, #88]
5582:./Libraries/FatFs/Src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
ARM GAS  /tmp/cceCRWeb.s 			page 293


 11070              		.loc 1 5582 28
 11071 02d2 BB6E     		ldr	r3, [r7, #104]
 11072 02d4 7A6C     		ldr	r2, [r7, #68]
 11073 02d6 02FB03F2 		mul	r2, r2, r3
 11074              		.loc 1 5582 19
 11075 02da BB6D     		ldr	r3, [r7, #88]
 11076 02dc 1344     		add	r3, r3, r2
 11077              		.loc 1 5582 11
 11078 02de FA6E     		ldr	r2, [r7, #108]
 11079 02e0 1344     		add	r3, r3, r2
 11080 02e2 FB61     		str	r3, [r7, #28]
5583:./Libraries/FatFs/Src/ff.c **** 
5584:./Libraries/FatFs/Src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5585:./Libraries/FatFs/Src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
 11081              		.loc 1 5585 17
 11082 02e4 7A69     		ldr	r2, [r7, #20]
 11083 02e6 FB69     		ldr	r3, [r7, #28]
 11084 02e8 1344     		add	r3, r3, r2
 11085              		.loc 1 5585 26
 11086 02ea 5A1E     		subs	r2, r3, #1
 11087              		.loc 1 5585 33
 11088 02ec 7B69     		ldr	r3, [r7, #20]
 11089 02ee 5B42     		rsbs	r3, r3, #0
 11090              		.loc 1 5585 31
 11091 02f0 1A40     		ands	r2, r2, r3
 11092              		.loc 1 5585 6
 11093 02f2 FB69     		ldr	r3, [r7, #28]
 11094 02f4 D31A     		subs	r3, r2, r3
 11095 02f6 FB65     		str	r3, [r7, #92]
5586:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 11096              		.loc 1 5586 7
 11097 02f8 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11098 02fc 032B     		cmp	r3, #3
 11099 02fe 08D1     		bne	.L642
5587:./Libraries/FatFs/Src/ff.c **** 				sz_rsv += n; b_fat += n;
 11100              		.loc 1 5587 12
 11101 0300 7A6D     		ldr	r2, [r7, #84]
 11102 0302 FB6D     		ldr	r3, [r7, #92]
 11103 0304 1344     		add	r3, r3, r2
 11104 0306 7B65     		str	r3, [r7, #84]
 11105              		.loc 1 5587 24
 11106 0308 BA6D     		ldr	r2, [r7, #88]
 11107 030a FB6D     		ldr	r3, [r7, #92]
 11108 030c 1344     		add	r3, r3, r2
 11109 030e BB65     		str	r3, [r7, #88]
 11110 0310 06E0     		b	.L643
 11111              	.L642:
5588:./Libraries/FatFs/Src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
5589:./Libraries/FatFs/Src/ff.c **** 				sz_fat += n / n_fats;
 11112              		.loc 1 5589 17
 11113 0312 FA6D     		ldr	r2, [r7, #92]
 11114 0314 7B6C     		ldr	r3, [r7, #68]
 11115 0316 B2FBF3F3 		udiv	r3, r2, r3
 11116              		.loc 1 5589 12
 11117 031a BA6E     		ldr	r2, [r7, #104]
 11118 031c 1344     		add	r3, r3, r2
 11119 031e BB66     		str	r3, [r7, #104]
ARM GAS  /tmp/cceCRWeb.s 			page 294


 11120              	.L643:
5590:./Libraries/FatFs/Src/ff.c **** 			}
5591:./Libraries/FatFs/Src/ff.c **** 
5592:./Libraries/FatFs/Src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5593:./Libraries/FatFs/Src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 11121              		.loc 1 5593 30
 11122 0320 3B6D     		ldr	r3, [r7, #80]
 11123 0322 1A01     		lsls	r2, r3, #4
 11124              		.loc 1 5593 24
 11125 0324 FB69     		ldr	r3, [r7, #28]
 11126 0326 1A44     		add	r2, r2, r3
 11127              		.loc 1 5593 35
 11128 0328 7B6A     		ldr	r3, [r7, #36]
 11129 032a D21A     		subs	r2, r2, r3
 11130              		.loc 1 5593 15
 11131 032c 3B69     		ldr	r3, [r7, #16]
 11132              		.loc 1 5593 7
 11133 032e 9A42     		cmp	r2, r3
 11134 0330 01D9     		bls	.L644
 11135              		.loc 1 5593 51 discriminator 1
 11136 0332 0E23     		movs	r3, #14
 11137 0334 8AE2     		b	.L684
 11138              	.L644:
5594:./Libraries/FatFs/Src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 11139              		.loc 1 5594 21
 11140 0336 3A69     		ldr	r2, [r7, #16]
 11141 0338 7B6D     		ldr	r3, [r7, #84]
 11142 033a D21A     		subs	r2, r2, r3
 11143              		.loc 1 5594 39
 11144 033c BB6E     		ldr	r3, [r7, #104]
 11145 033e 796C     		ldr	r1, [r7, #68]
 11146 0340 01FB03F3 		mul	r3, r1, r3
 11147              		.loc 1 5594 30
 11148 0344 D21A     		subs	r2, r2, r3
 11149              		.loc 1 5594 48
 11150 0346 FB6E     		ldr	r3, [r7, #108]
 11151 0348 D21A     		subs	r2, r2, r3
 11152              		.loc 1 5594 11
 11153 034a 3B6D     		ldr	r3, [r7, #80]
 11154 034c B2FBF3F3 		udiv	r3, r2, r3
 11155 0350 3B62     		str	r3, [r7, #32]
5595:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {
 11156              		.loc 1 5595 7
 11157 0352 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11158 0356 032B     		cmp	r3, #3
 11159 0358 0FD1     		bne	.L645
5596:./Libraries/FatFs/Src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 11160              		.loc 1 5596 8
 11161 035a 3B6A     		ldr	r3, [r7, #32]
 11162 035c 4FF6F572 		movw	r2, #65525
 11163 0360 9342     		cmp	r3, r2
 11164 0362 0AD8     		bhi	.L645
5597:./Libraries/FatFs/Src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 11165              		.loc 1 5597 9
 11166 0364 7B68     		ldr	r3, [r7, #4]
 11167 0366 002B     		cmp	r3, #0
 11168 0368 05D1     		bne	.L646
ARM GAS  /tmp/cceCRWeb.s 			page 295


 11169              		.loc 1 5597 21 discriminator 1
 11170 036a 3B6D     		ldr	r3, [r7, #80]
 11171 036c 5B08     		lsrs	r3, r3, #1
 11172 036e 7B60     		str	r3, [r7, #4]
 11173              		.loc 1 5597 14 discriminator 1
 11174 0370 7B68     		ldr	r3, [r7, #4]
 11175 0372 002B     		cmp	r3, #0
 11176 0374 44D1     		bne	.L685
 11177              	.L646:
5598:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11178              		.loc 1 5598 13
 11179 0376 0E23     		movs	r3, #14
 11180 0378 68E2     		b	.L684
 11181              	.L645:
5599:./Libraries/FatFs/Src/ff.c **** 				}
5600:./Libraries/FatFs/Src/ff.c **** 			}
5601:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT16) {
 11182              		.loc 1 5601 7
 11183 037a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11184 037e 022B     		cmp	r3, #2
 11185 0380 33D1     		bne	.L648
5602:./Libraries/FatFs/Src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 11186              		.loc 1 5602 8
 11187 0382 3B6A     		ldr	r3, [r7, #32]
 11188 0384 4FF6F572 		movw	r2, #65525
 11189 0388 9342     		cmp	r3, r2
 11190 038a 1ED9     		bls	.L649
5603:./Libraries/FatFs/Src/ff.c **** 					if (!au && (pau * 2) <= 64) {
 11191              		.loc 1 5603 9
 11192 038c 7B68     		ldr	r3, [r7, #4]
 11193 038e 002B     		cmp	r3, #0
 11194 0390 07D1     		bne	.L650
 11195              		.loc 1 5603 22 discriminator 1
 11196 0392 3B6D     		ldr	r3, [r7, #80]
 11197 0394 5B00     		lsls	r3, r3, #1
 11198              		.loc 1 5603 14 discriminator 1
 11199 0396 402B     		cmp	r3, #64
 11200 0398 03D8     		bhi	.L650
5604:./Libraries/FatFs/Src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 11201              		.loc 1 5604 10
 11202 039a 3B6D     		ldr	r3, [r7, #80]
 11203 039c 5B00     		lsls	r3, r3, #1
 11204 039e 7B60     		str	r3, [r7, #4]
 11205              		.loc 1 5604 7
 11206 03a0 33E0     		b	.L647
 11207              	.L650:
5605:./Libraries/FatFs/Src/ff.c **** 					}
5606:./Libraries/FatFs/Src/ff.c **** 					if ((opt & FM_FAT32)) {
 11208              		.loc 1 5606 15
 11209 03a2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 11210 03a4 03F00203 		and	r3, r3, #2
 11211              		.loc 1 5606 9
 11212 03a8 002B     		cmp	r3, #0
 11213 03aa 03D0     		beq	.L651
5607:./Libraries/FatFs/Src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 11214              		.loc 1 5607 11
 11215 03ac 0323     		movs	r3, #3
ARM GAS  /tmp/cceCRWeb.s 			page 296


 11216 03ae 87F84F30 		strb	r3, [r7, #79]
 11217              		.loc 1 5607 7
 11218 03b2 2AE0     		b	.L647
 11219              	.L651:
5608:./Libraries/FatFs/Src/ff.c **** 					}
5609:./Libraries/FatFs/Src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 11220              		.loc 1 5609 9
 11221 03b4 7B68     		ldr	r3, [r7, #4]
 11222 03b6 002B     		cmp	r3, #0
 11223 03b8 05D1     		bne	.L652
 11224              		.loc 1 5609 21 discriminator 1
 11225 03ba 3B6D     		ldr	r3, [r7, #80]
 11226 03bc 5B00     		lsls	r3, r3, #1
 11227 03be 7B60     		str	r3, [r7, #4]
 11228              		.loc 1 5609 14 discriminator 1
 11229 03c0 7B68     		ldr	r3, [r7, #4]
 11230 03c2 802B     		cmp	r3, #128
 11231 03c4 1ED9     		bls	.L686
 11232              	.L652:
5610:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11233              		.loc 1 5610 13
 11234 03c6 0E23     		movs	r3, #14
 11235 03c8 40E2     		b	.L684
 11236              	.L649:
5611:./Libraries/FatFs/Src/ff.c **** 				}
5612:./Libraries/FatFs/Src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 11237              		.loc 1 5612 9
 11238 03ca 3B6A     		ldr	r3, [r7, #32]
 11239 03cc 40F6F572 		movw	r2, #4085
 11240 03d0 9342     		cmp	r3, r2
 11241 03d2 0AD8     		bhi	.L648
5613:./Libraries/FatFs/Src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 11242              		.loc 1 5613 9
 11243 03d4 7B68     		ldr	r3, [r7, #4]
 11244 03d6 002B     		cmp	r3, #0
 11245 03d8 05D1     		bne	.L653
 11246              		.loc 1 5613 21 discriminator 1
 11247 03da 3B6D     		ldr	r3, [r7, #80]
 11248 03dc 5B00     		lsls	r3, r3, #1
 11249 03de 7B60     		str	r3, [r7, #4]
 11250              		.loc 1 5613 14 discriminator 1
 11251 03e0 7B68     		ldr	r3, [r7, #4]
 11252 03e2 802B     		cmp	r3, #128
 11253 03e4 10D9     		bls	.L687
 11254              	.L653:
5614:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11255              		.loc 1 5614 13
 11256 03e6 0E23     		movs	r3, #14
 11257 03e8 30E2     		b	.L684
 11258              	.L648:
5615:./Libraries/FatFs/Src/ff.c **** 				}
5616:./Libraries/FatFs/Src/ff.c **** 			}
5617:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
 11259              		.loc 1 5617 7
 11260 03ea 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11261 03ee 012B     		cmp	r3, #1
 11262 03f0 0CD1     		bne	.L688
ARM GAS  /tmp/cceCRWeb.s 			page 297


 11263              		.loc 1 5617 24 discriminator 1
 11264 03f2 3B6A     		ldr	r3, [r7, #32]
 11265 03f4 40F6F572 		movw	r2, #4085
 11266 03f8 9342     		cmp	r3, r2
 11267 03fa 07D9     		bls	.L688
 11268              		.loc 1 5617 54 discriminator 2
 11269 03fc 0E23     		movs	r3, #14
 11270 03fe 25E2     		b	.L684
 11271              	.L685:
5597:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11272              		.loc 1 5597 6
 11273 0400 00BF     		nop
 11274 0402 CEE6     		b	.L656
 11275              	.L686:
5609:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11276              		.loc 1 5609 6
 11277 0404 00BF     		nop
 11278 0406 CCE6     		b	.L656
 11279              	.L687:
5613:./Libraries/FatFs/Src/ff.c **** 					return FR_MKFS_ABORTED;
 11280              		.loc 1 5613 6
 11281 0408 00BF     		nop
 11282              	.L647:
5553:./Libraries/FatFs/Src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
 11283              		.loc 1 5553 8
 11284 040a CAE6     		b	.L656
 11285              	.L688:
5618:./Libraries/FatFs/Src/ff.c **** 
5619:./Libraries/FatFs/Src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5620:./Libraries/FatFs/Src/ff.c **** 			break;
 11286              		.loc 1 5620 4
 11287 040c 00BF     		nop
5621:./Libraries/FatFs/Src/ff.c **** 		} while (1);
5622:./Libraries/FatFs/Src/ff.c **** 
5623:./Libraries/FatFs/Src/ff.c **** #if _USE_TRIM
5624:./Libraries/FatFs/Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5625:./Libraries/FatFs/Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5626:./Libraries/FatFs/Src/ff.c **** #endif
5627:./Libraries/FatFs/Src/ff.c **** 		/* Create FAT VBR */
5628:./Libraries/FatFs/Src/ff.c **** 		mem_set(buf, 0, ss);
 11288              		.loc 1 5628 3
 11289 040e FB8E     		ldrh	r3, [r7, #54]
 11290 0410 1A46     		mov	r2, r3
 11291 0412 0021     		movs	r1, #0
 11292 0414 386B     		ldr	r0, [r7, #48]
 11293 0416 FFF7FEFF 		bl	mem_set
5629:./Libraries/FatFs/Src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 11294              		.loc 1 5629 3
 11295 041a 0B22     		movs	r2, #11
 11296 041c BC49     		ldr	r1, .L691
 11297 041e 386B     		ldr	r0, [r7, #48]
 11298 0420 FFF7FEFF 		bl	mem_cpy
5630:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 11299              		.loc 1 5630 3
 11300 0424 3B6B     		ldr	r3, [r7, #48]
 11301 0426 0B33     		adds	r3, r3, #11
 11302 0428 FA8E     		ldrh	r2, [r7, #54]
ARM GAS  /tmp/cceCRWeb.s 			page 298


 11303 042a 1146     		mov	r1, r2
 11304 042c 1846     		mov	r0, r3
 11305 042e FFF7FEFF 		bl	st_word
5631:./Libraries/FatFs/Src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 11306              		.loc 1 5631 6
 11307 0432 3B6B     		ldr	r3, [r7, #48]
 11308 0434 0D33     		adds	r3, r3, #13
 11309              		.loc 1 5631 25
 11310 0436 3A6D     		ldr	r2, [r7, #80]
 11311 0438 D2B2     		uxtb	r2, r2
 11312              		.loc 1 5631 23
 11313 043a 1A70     		strb	r2, [r3]
5632:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 11314              		.loc 1 5632 3
 11315 043c 3B6B     		ldr	r3, [r7, #48]
 11316 043e 0E33     		adds	r3, r3, #14
 11317 0440 7A6D     		ldr	r2, [r7, #84]
 11318 0442 92B2     		uxth	r2, r2
 11319 0444 1146     		mov	r1, r2
 11320 0446 1846     		mov	r0, r3
 11321 0448 FFF7FEFF 		bl	st_word
5633:./Libraries/FatFs/Src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 11322              		.loc 1 5633 6
 11323 044c 3B6B     		ldr	r3, [r7, #48]
 11324 044e 1033     		adds	r3, r3, #16
 11325              		.loc 1 5633 22
 11326 0450 7A6C     		ldr	r2, [r7, #68]
 11327 0452 D2B2     		uxtb	r2, r2
 11328              		.loc 1 5633 20
 11329 0454 1A70     		strb	r2, [r3]
5634:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
 11330              		.loc 1 5634 3
 11331 0456 3B6B     		ldr	r3, [r7, #48]
 11332 0458 03F11102 		add	r2, r3, #17
 11333 045c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11334 0460 032B     		cmp	r3, #3
 11335 0462 02D0     		beq	.L657
 11336              		.loc 1 5634 3 is_stmt 0 discriminator 1
 11337 0464 3B6C     		ldr	r3, [r7, #64]
 11338 0466 9BB2     		uxth	r3, r3
 11339 0468 00E0     		b	.L658
 11340              	.L657:
 11341              		.loc 1 5634 3 discriminator 2
 11342 046a 0023     		movs	r3, #0
 11343              	.L658:
 11344              		.loc 1 5634 3 discriminator 4
 11345 046c 1946     		mov	r1, r3
 11346 046e 1046     		mov	r0, r2
 11347 0470 FFF7FEFF 		bl	st_word
5635:./Libraries/FatFs/Src/ff.c **** 		if (sz_vol < 0x10000) {
 11348              		.loc 1 5635 14 is_stmt 1 discriminator 4
 11349 0474 3B69     		ldr	r3, [r7, #16]
 11350              		.loc 1 5635 6 discriminator 4
 11351 0476 B3F5803F 		cmp	r3, #65536
 11352 047a 08D2     		bcs	.L659
5636:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 11353              		.loc 1 5636 4
ARM GAS  /tmp/cceCRWeb.s 			page 299


 11354 047c 3B6B     		ldr	r3, [r7, #48]
 11355 047e 1333     		adds	r3, r3, #19
 11356 0480 3A69     		ldr	r2, [r7, #16]
 11357 0482 92B2     		uxth	r2, r2
 11358 0484 1146     		mov	r1, r2
 11359 0486 1846     		mov	r0, r3
 11360 0488 FFF7FEFF 		bl	st_word
 11361 048c 06E0     		b	.L660
 11362              	.L659:
5637:./Libraries/FatFs/Src/ff.c **** 		} else {
5638:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 11363              		.loc 1 5638 4
 11364 048e 3B6B     		ldr	r3, [r7, #48]
 11365 0490 2033     		adds	r3, r3, #32
 11366 0492 3A69     		ldr	r2, [r7, #16]
 11367 0494 1146     		mov	r1, r2
 11368 0496 1846     		mov	r0, r3
 11369 0498 FFF7FEFF 		bl	st_dword
 11370              	.L660:
5639:./Libraries/FatFs/Src/ff.c **** 		}
5640:./Libraries/FatFs/Src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 11371              		.loc 1 5640 6
 11372 049c 3B6B     		ldr	r3, [r7, #48]
 11373 049e 1533     		adds	r3, r3, #21
 11374              		.loc 1 5640 18
 11375 04a0 F822     		movs	r2, #248
 11376 04a2 1A70     		strb	r2, [r3]
5641:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 11377              		.loc 1 5641 3
 11378 04a4 3B6B     		ldr	r3, [r7, #48]
 11379 04a6 1833     		adds	r3, r3, #24
 11380 04a8 3F21     		movs	r1, #63
 11381 04aa 1846     		mov	r0, r3
 11382 04ac FFF7FEFF 		bl	st_word
5642:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 11383              		.loc 1 5642 3
 11384 04b0 3B6B     		ldr	r3, [r7, #48]
 11385 04b2 1A33     		adds	r3, r3, #26
 11386 04b4 FF21     		movs	r1, #255
 11387 04b6 1846     		mov	r0, r3
 11388 04b8 FFF7FEFF 		bl	st_word
5643:./Libraries/FatFs/Src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 11389              		.loc 1 5643 3
 11390 04bc 3B6B     		ldr	r3, [r7, #48]
 11391 04be 1C33     		adds	r3, r3, #28
 11392 04c0 796A     		ldr	r1, [r7, #36]
 11393 04c2 1846     		mov	r0, r3
 11394 04c4 FFF7FEFF 		bl	st_dword
5644:./Libraries/FatFs/Src/ff.c **** 		if (fmt == FS_FAT32) {
 11395              		.loc 1 5644 6
 11396 04c8 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11397 04cc 032B     		cmp	r3, #3
 11398 04ce 31D1     		bne	.L661
5645:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 11399              		.loc 1 5645 4
 11400 04d0 3B6B     		ldr	r3, [r7, #48]
 11401 04d2 03F14304 		add	r4, r3, #67
ARM GAS  /tmp/cceCRWeb.s 			page 300


 11402 04d6 FFF7FEFF 		bl	get_fattime
 11403 04da 0346     		mov	r3, r0
 11404 04dc 1946     		mov	r1, r3
 11405 04de 2046     		mov	r0, r4
 11406 04e0 FFF7FEFF 		bl	st_dword
5646:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 11407              		.loc 1 5646 4
 11408 04e4 3B6B     		ldr	r3, [r7, #48]
 11409 04e6 2433     		adds	r3, r3, #36
 11410 04e8 B96E     		ldr	r1, [r7, #104]
 11411 04ea 1846     		mov	r0, r3
 11412 04ec FFF7FEFF 		bl	st_dword
5647:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 11413              		.loc 1 5647 4
 11414 04f0 3B6B     		ldr	r3, [r7, #48]
 11415 04f2 2C33     		adds	r3, r3, #44
 11416 04f4 0221     		movs	r1, #2
 11417 04f6 1846     		mov	r0, r3
 11418 04f8 FFF7FEFF 		bl	st_dword
5648:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 11419              		.loc 1 5648 4
 11420 04fc 3B6B     		ldr	r3, [r7, #48]
 11421 04fe 3033     		adds	r3, r3, #48
 11422 0500 0121     		movs	r1, #1
 11423 0502 1846     		mov	r0, r3
 11424 0504 FFF7FEFF 		bl	st_word
5649:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 11425              		.loc 1 5649 4
 11426 0508 3B6B     		ldr	r3, [r7, #48]
 11427 050a 3233     		adds	r3, r3, #50
 11428 050c 0621     		movs	r1, #6
 11429 050e 1846     		mov	r0, r3
 11430 0510 FFF7FEFF 		bl	st_word
5650:./Libraries/FatFs/Src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 11431              		.loc 1 5650 7
 11432 0514 3B6B     		ldr	r3, [r7, #48]
 11433 0516 4033     		adds	r3, r3, #64
 11434              		.loc 1 5650 21
 11435 0518 8022     		movs	r2, #128
 11436 051a 1A70     		strb	r2, [r3]
5651:./Libraries/FatFs/Src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 11437              		.loc 1 5651 7
 11438 051c 3B6B     		ldr	r3, [r7, #48]
 11439 051e 4233     		adds	r3, r3, #66
 11440              		.loc 1 5651 22
 11441 0520 2922     		movs	r2, #41
 11442 0522 1A70     		strb	r2, [r3]
5652:./Libraries/FatFs/Src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 11443              		.loc 1 5652 16
 11444 0524 3B6B     		ldr	r3, [r7, #48]
 11445 0526 4733     		adds	r3, r3, #71
 11446              		.loc 1 5652 4
 11447 0528 1322     		movs	r2, #19
 11448 052a 7A49     		ldr	r1, .L691+4
 11449 052c 1846     		mov	r0, r3
 11450 052e FFF7FEFF 		bl	mem_cpy
 11451 0532 20E0     		b	.L662
ARM GAS  /tmp/cceCRWeb.s 			page 301


 11452              	.L661:
5653:./Libraries/FatFs/Src/ff.c **** 		} else {
5654:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 11453              		.loc 1 5654 4
 11454 0534 3B6B     		ldr	r3, [r7, #48]
 11455 0536 03F12704 		add	r4, r3, #39
 11456 053a FFF7FEFF 		bl	get_fattime
 11457 053e 0346     		mov	r3, r0
 11458 0540 1946     		mov	r1, r3
 11459 0542 2046     		mov	r0, r4
 11460 0544 FFF7FEFF 		bl	st_dword
5655:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 11461              		.loc 1 5655 4
 11462 0548 3B6B     		ldr	r3, [r7, #48]
 11463 054a 1633     		adds	r3, r3, #22
 11464 054c BA6E     		ldr	r2, [r7, #104]
 11465 054e 92B2     		uxth	r2, r2
 11466 0550 1146     		mov	r1, r2
 11467 0552 1846     		mov	r0, r3
 11468 0554 FFF7FEFF 		bl	st_word
5656:./Libraries/FatFs/Src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 11469              		.loc 1 5656 7
 11470 0558 3B6B     		ldr	r3, [r7, #48]
 11471 055a 2433     		adds	r3, r3, #36
 11472              		.loc 1 5656 19
 11473 055c 8022     		movs	r2, #128
 11474 055e 1A70     		strb	r2, [r3]
5657:./Libraries/FatFs/Src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 11475              		.loc 1 5657 7
 11476 0560 3B6B     		ldr	r3, [r7, #48]
 11477 0562 2633     		adds	r3, r3, #38
 11478              		.loc 1 5657 20
 11479 0564 2922     		movs	r2, #41
 11480 0566 1A70     		strb	r2, [r3]
5658:./Libraries/FatFs/Src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11481              		.loc 1 5658 16
 11482 0568 3B6B     		ldr	r3, [r7, #48]
 11483 056a 2B33     		adds	r3, r3, #43
 11484              		.loc 1 5658 4
 11485 056c 1322     		movs	r2, #19
 11486 056e 6A49     		ldr	r1, .L691+8
 11487 0570 1846     		mov	r0, r3
 11488 0572 FFF7FEFF 		bl	mem_cpy
 11489              	.L662:
5659:./Libraries/FatFs/Src/ff.c **** 		}
5660:./Libraries/FatFs/Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
 11490              		.loc 1 5660 3
 11491 0576 3B6B     		ldr	r3, [r7, #48]
 11492 0578 03F5FF73 		add	r3, r3, #510
 11493 057c 4AF65521 		movw	r1, #43605
 11494 0580 1846     		mov	r0, r3
 11495 0582 FFF7FEFF 		bl	st_word
5661:./Libraries/FatFs/Src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
 11496              		.loc 1 5661 7
 11497 0586 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11498 058a 0123     		movs	r3, #1
 11499 058c 7A6A     		ldr	r2, [r7, #36]
ARM GAS  /tmp/cceCRWeb.s 			page 302


 11500 058e 396B     		ldr	r1, [r7, #48]
 11501 0590 FFF7FEFF 		bl	disk_write
 11502 0594 0346     		mov	r3, r0
 11503              		.loc 1 5661 6
 11504 0596 002B     		cmp	r3, #0
 11505 0598 01D0     		beq	.L663
 11506              		.loc 1 5661 57 discriminator 1
 11507 059a 0123     		movs	r3, #1
 11508 059c 56E1     		b	.L684
 11509              	.L663:
5662:./Libraries/FatFs/Src/ff.c **** 
5663:./Libraries/FatFs/Src/ff.c **** 		/* Create FSINFO record if needed */
5664:./Libraries/FatFs/Src/ff.c **** 		if (fmt == FS_FAT32) {
 11510              		.loc 1 5664 6
 11511 059e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11512 05a2 032B     		cmp	r3, #3
 11513 05a4 40D1     		bne	.L664
5665:./Libraries/FatFs/Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 11514              		.loc 1 5665 4
 11515 05a6 7B6A     		ldr	r3, [r7, #36]
 11516 05a8 9A1D     		adds	r2, r3, #6
 11517 05aa 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11518 05ae 0123     		movs	r3, #1
 11519 05b0 396B     		ldr	r1, [r7, #48]
 11520 05b2 FFF7FEFF 		bl	disk_write
5666:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
 11521              		.loc 1 5666 4
 11522 05b6 FB8E     		ldrh	r3, [r7, #54]
 11523 05b8 1A46     		mov	r2, r3
 11524 05ba 0021     		movs	r1, #0
 11525 05bc 386B     		ldr	r0, [r7, #48]
 11526 05be FFF7FEFF 		bl	mem_set
5667:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
 11527              		.loc 1 5667 4
 11528 05c2 5649     		ldr	r1, .L691+12
 11529 05c4 386B     		ldr	r0, [r7, #48]
 11530 05c6 FFF7FEFF 		bl	st_dword
5668:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
 11531              		.loc 1 5668 4
 11532 05ca 3B6B     		ldr	r3, [r7, #48]
 11533 05cc 03F5F273 		add	r3, r3, #484
 11534 05d0 5349     		ldr	r1, .L691+16
 11535 05d2 1846     		mov	r0, r3
 11536 05d4 FFF7FEFF 		bl	st_dword
5669:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11537              		.loc 1 5669 4
 11538 05d8 3B6B     		ldr	r3, [r7, #48]
 11539 05da 03F5F472 		add	r2, r3, #488
 11540 05de 3B6A     		ldr	r3, [r7, #32]
 11541 05e0 013B     		subs	r3, r3, #1
 11542 05e2 1946     		mov	r1, r3
 11543 05e4 1046     		mov	r0, r2
 11544 05e6 FFF7FEFF 		bl	st_dword
5670:./Libraries/FatFs/Src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11545              		.loc 1 5670 4
 11546 05ea 3B6B     		ldr	r3, [r7, #48]
 11547 05ec 03F5F673 		add	r3, r3, #492
ARM GAS  /tmp/cceCRWeb.s 			page 303


 11548 05f0 0221     		movs	r1, #2
 11549 05f2 1846     		mov	r0, r3
 11550 05f4 FFF7FEFF 		bl	st_dword
5671:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
 11551              		.loc 1 5671 4
 11552 05f8 3B6B     		ldr	r3, [r7, #48]
 11553 05fa 03F5FF73 		add	r3, r3, #510
 11554 05fe 4AF65521 		movw	r1, #43605
 11555 0602 1846     		mov	r0, r3
 11556 0604 FFF7FEFF 		bl	st_word
5672:./Libraries/FatFs/Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 11557              		.loc 1 5672 4
 11558 0608 7B6A     		ldr	r3, [r7, #36]
 11559 060a DA1D     		adds	r2, r3, #7
 11560 060c 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11561 0610 0123     		movs	r3, #1
 11562 0612 396B     		ldr	r1, [r7, #48]
 11563 0614 FFF7FEFF 		bl	disk_write
5673:./Libraries/FatFs/Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 11564              		.loc 1 5673 4
 11565 0618 7B6A     		ldr	r3, [r7, #36]
 11566 061a 5A1C     		adds	r2, r3, #1
 11567 061c 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11568 0620 0123     		movs	r3, #1
 11569 0622 396B     		ldr	r1, [r7, #48]
 11570 0624 FFF7FEFF 		bl	disk_write
 11571              	.L664:
5674:./Libraries/FatFs/Src/ff.c **** 		}
5675:./Libraries/FatFs/Src/ff.c **** 
5676:./Libraries/FatFs/Src/ff.c **** 		/* Initialize FAT area */
5677:./Libraries/FatFs/Src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
 11572              		.loc 1 5677 3
 11573 0628 BA6A     		ldr	r2, [r7, #40]
 11574 062a 0021     		movs	r1, #0
 11575 062c 386B     		ldr	r0, [r7, #48]
 11576 062e FFF7FEFF 		bl	mem_set
5678:./Libraries/FatFs/Src/ff.c **** 		sect = b_fat;		/* FAT start sector */
 11577              		.loc 1 5678 8
 11578 0632 BB6D     		ldr	r3, [r7, #88]
 11579 0634 7B66     		str	r3, [r7, #100]
5679:./Libraries/FatFs/Src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 11580              		.loc 1 5679 10
 11581 0636 0023     		movs	r3, #0
 11582 0638 BB64     		str	r3, [r7, #72]
 11583              		.loc 1 5679 3
 11584 063a 4BE0     		b	.L665
 11585              	.L672:
5680:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {
 11586              		.loc 1 5680 7
 11587 063c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11588 0640 032B     		cmp	r3, #3
 11589 0642 13D1     		bne	.L666
5681:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 11590              		.loc 1 5681 5
 11591 0644 6FF00701 		mvn	r1, #7
 11592 0648 386B     		ldr	r0, [r7, #48]
 11593 064a FFF7FEFF 		bl	st_dword
ARM GAS  /tmp/cceCRWeb.s 			page 304


5682:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 11594              		.loc 1 5682 5
 11595 064e 3B6B     		ldr	r3, [r7, #48]
 11596 0650 0433     		adds	r3, r3, #4
 11597 0652 4FF0FF31 		mov	r1, #-1
 11598 0656 1846     		mov	r0, r3
 11599 0658 FFF7FEFF 		bl	st_dword
5683:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 11600              		.loc 1 5683 5
 11601 065c 3B6B     		ldr	r3, [r7, #48]
 11602 065e 0833     		adds	r3, r3, #8
 11603 0660 6FF07041 		mvn	r1, #-268435456
 11604 0664 1846     		mov	r0, r3
 11605 0666 FFF7FEFF 		bl	st_dword
 11606 066a 0BE0     		b	.L667
 11607              	.L666:
5684:./Libraries/FatFs/Src/ff.c **** 			} else {
5685:./Libraries/FatFs/Src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 11608              		.loc 1 5685 5
 11609 066c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11610 0670 012B     		cmp	r3, #1
 11611 0672 01D1     		bne	.L668
 11612              		.loc 1 5685 5 is_stmt 0 discriminator 1
 11613 0674 2B4B     		ldr	r3, .L691+20
 11614 0676 01E0     		b	.L669
 11615              	.L668:
 11616              		.loc 1 5685 5 discriminator 2
 11617 0678 6FF00703 		mvn	r3, #7
 11618              	.L669:
 11619              		.loc 1 5685 5 discriminator 4
 11620 067c 1946     		mov	r1, r3
 11621 067e 386B     		ldr	r0, [r7, #48]
 11622 0680 FFF7FEFF 		bl	st_dword
 11623              	.L667:
5686:./Libraries/FatFs/Src/ff.c **** 			}
5687:./Libraries/FatFs/Src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
 11624              		.loc 1 5687 10 is_stmt 1
 11625 0684 BB6E     		ldr	r3, [r7, #104]
 11626 0686 3B66     		str	r3, [r7, #96]
 11627              	.L671:
5688:./Libraries/FatFs/Src/ff.c **** 			do {	/* Fill FAT sectors */
5689:./Libraries/FatFs/Src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
 11628              		.loc 1 5689 7
 11629 0688 3A6E     		ldr	r2, [r7, #96]
 11630 068a FB6A     		ldr	r3, [r7, #44]
 11631 068c 9342     		cmp	r3, r2
 11632 068e 28BF     		it	cs
 11633 0690 1346     		movcs	r3, r2
 11634 0692 FB65     		str	r3, [r7, #92]
5690:./Libraries/FatFs/Src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 11635              		.loc 1 5690 9
 11636 0694 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11637 0698 FB6D     		ldr	r3, [r7, #92]
 11638 069a 7A6E     		ldr	r2, [r7, #100]
 11639 069c 396B     		ldr	r1, [r7, #48]
 11640 069e FFF7FEFF 		bl	disk_write
 11641 06a2 0346     		mov	r3, r0
ARM GAS  /tmp/cceCRWeb.s 			page 305


 11642              		.loc 1 5690 8
 11643 06a4 002B     		cmp	r3, #0
 11644 06a6 01D0     		beq	.L670
 11645              		.loc 1 5690 64 discriminator 1
 11646 06a8 0123     		movs	r3, #1
 11647 06aa CFE0     		b	.L684
 11648              	.L670:
5691:./Libraries/FatFs/Src/ff.c **** 				mem_set(buf, 0, ss);
 11649              		.loc 1 5691 5
 11650 06ac FB8E     		ldrh	r3, [r7, #54]
 11651 06ae 1A46     		mov	r2, r3
 11652 06b0 0021     		movs	r1, #0
 11653 06b2 386B     		ldr	r0, [r7, #48]
 11654 06b4 FFF7FEFF 		bl	mem_set
5692:./Libraries/FatFs/Src/ff.c **** 				sect += n; nsect -= n;
 11655              		.loc 1 5692 10
 11656 06b8 7A6E     		ldr	r2, [r7, #100]
 11657 06ba FB6D     		ldr	r3, [r7, #92]
 11658 06bc 1344     		add	r3, r3, r2
 11659 06be 7B66     		str	r3, [r7, #100]
 11660              		.loc 1 5692 22
 11661 06c0 3A6E     		ldr	r2, [r7, #96]
 11662 06c2 FB6D     		ldr	r3, [r7, #92]
 11663 06c4 D31A     		subs	r3, r2, r3
 11664 06c6 3B66     		str	r3, [r7, #96]
5693:./Libraries/FatFs/Src/ff.c **** 			} while (nsect);
 11665              		.loc 1 5693 4
 11666 06c8 3B6E     		ldr	r3, [r7, #96]
 11667 06ca 002B     		cmp	r3, #0
 11668 06cc DCD1     		bne	.L671
5679:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {
 11669              		.loc 1 5679 28 discriminator 2
 11670 06ce BB6C     		ldr	r3, [r7, #72]
 11671 06d0 0133     		adds	r3, r3, #1
 11672 06d2 BB64     		str	r3, [r7, #72]
 11673              	.L665:
5679:./Libraries/FatFs/Src/ff.c **** 			if (fmt == FS_FAT32) {
 11674              		.loc 1 5679 3 discriminator 1
 11675 06d4 BA6C     		ldr	r2, [r7, #72]
 11676 06d6 7B6C     		ldr	r3, [r7, #68]
 11677 06d8 9A42     		cmp	r2, r3
 11678 06da AFD3     		bcc	.L672
5694:./Libraries/FatFs/Src/ff.c **** 		}
5695:./Libraries/FatFs/Src/ff.c **** 
5696:./Libraries/FatFs/Src/ff.c **** 		/* Initialize root directory (fill with zero) */
5697:./Libraries/FatFs/Src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 11679              		.loc 1 5697 35
 11680 06dc 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11681 06e0 032B     		cmp	r3, #3
 11682 06e2 01D1     		bne	.L673
 11683              		.loc 1 5697 35 is_stmt 0 discriminator 1
 11684 06e4 3B6D     		ldr	r3, [r7, #80]
 11685 06e6 00E0     		b	.L674
 11686              	.L673:
 11687              		.loc 1 5697 35 discriminator 2
 11688 06e8 FB6E     		ldr	r3, [r7, #108]
 11689              	.L674:
ARM GAS  /tmp/cceCRWeb.s 			page 306


 11690              		.loc 1 5697 9 is_stmt 1 discriminator 4
 11691 06ea 3B66     		str	r3, [r7, #96]
 11692              	.L676:
5698:./Libraries/FatFs/Src/ff.c **** 		do {
5699:./Libraries/FatFs/Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
 11693              		.loc 1 5699 6
 11694 06ec 3A6E     		ldr	r2, [r7, #96]
 11695 06ee FB6A     		ldr	r3, [r7, #44]
 11696 06f0 9342     		cmp	r3, r2
 11697 06f2 28BF     		it	cs
 11698 06f4 1346     		movcs	r3, r2
 11699 06f6 FB65     		str	r3, [r7, #92]
5700:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 11700              		.loc 1 5700 8
 11701 06f8 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11702 06fc FB6D     		ldr	r3, [r7, #92]
 11703 06fe 7A6E     		ldr	r2, [r7, #100]
 11704 0700 396B     		ldr	r1, [r7, #48]
 11705 0702 FFF7FEFF 		bl	disk_write
 11706 0706 0346     		mov	r3, r0
 11707              		.loc 1 5700 7
 11708 0708 002B     		cmp	r3, #0
 11709 070a 0DD0     		beq	.L675
 11710              		.loc 1 5700 63 discriminator 1
 11711 070c 0123     		movs	r3, #1
 11712 070e 9DE0     		b	.L684
 11713              	.L692:
 11714              		.align	2
 11715              	.L691:
 11716 0710 10000000 		.word	.LC1
 11717 0714 1C000000 		.word	.LC2
 11718 0718 30000000 		.word	.LC3
 11719 071c 52526141 		.word	1096897106
 11720 0720 72724161 		.word	1631679090
 11721 0724 F8FFFF00 		.word	16777208
 11722              	.L675:
5701:./Libraries/FatFs/Src/ff.c **** 			sect += n; nsect -= n;
 11723              		.loc 1 5701 9
 11724 0728 7A6E     		ldr	r2, [r7, #100]
 11725 072a FB6D     		ldr	r3, [r7, #92]
 11726 072c 1344     		add	r3, r3, r2
 11727 072e 7B66     		str	r3, [r7, #100]
 11728              		.loc 1 5701 21
 11729 0730 3A6E     		ldr	r2, [r7, #96]
 11730 0732 FB6D     		ldr	r3, [r7, #92]
 11731 0734 D31A     		subs	r3, r2, r3
 11732 0736 3B66     		str	r3, [r7, #96]
5702:./Libraries/FatFs/Src/ff.c **** 		} while (nsect);
 11733              		.loc 1 5702 3
 11734 0738 3B6E     		ldr	r3, [r7, #96]
 11735 073a 002B     		cmp	r3, #0
 11736 073c D6D1     		bne	.L676
5703:./Libraries/FatFs/Src/ff.c **** 	}
5704:./Libraries/FatFs/Src/ff.c **** 
5705:./Libraries/FatFs/Src/ff.c **** 	/* Determine system ID in the partition table */
5706:./Libraries/FatFs/Src/ff.c **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5707:./Libraries/FatFs/Src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
ARM GAS  /tmp/cceCRWeb.s 			page 307


5708:./Libraries/FatFs/Src/ff.c **** 	} else {
5709:./Libraries/FatFs/Src/ff.c **** 		if (fmt == FS_FAT32) {
 11737              		.loc 1 5709 6
 11738 073e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11739 0742 032B     		cmp	r3, #3
 11740 0744 03D1     		bne	.L677
5710:./Libraries/FatFs/Src/ff.c **** 			sys = 0x0C;		/* FAT32X */
 11741              		.loc 1 5710 8
 11742 0746 0C23     		movs	r3, #12
 11743 0748 87F84E30 		strb	r3, [r7, #78]
 11744 074c 10E0     		b	.L678
 11745              	.L677:
5711:./Libraries/FatFs/Src/ff.c **** 		} else {
5712:./Libraries/FatFs/Src/ff.c **** 			if (sz_vol >= 0x10000) {
 11746              		.loc 1 5712 15
 11747 074e 3B69     		ldr	r3, [r7, #16]
 11748              		.loc 1 5712 7
 11749 0750 B3F5803F 		cmp	r3, #65536
 11750 0754 03D3     		bcc	.L679
5713:./Libraries/FatFs/Src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
 11751              		.loc 1 5713 9
 11752 0756 0623     		movs	r3, #6
 11753 0758 87F84E30 		strb	r3, [r7, #78]
 11754 075c 08E0     		b	.L678
 11755              	.L679:
5714:./Libraries/FatFs/Src/ff.c **** 			} else {
5715:./Libraries/FatFs/Src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 11756              		.loc 1 5715 9
 11757 075e 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 11758 0762 022B     		cmp	r3, #2
 11759 0764 01D1     		bne	.L680
 11760              		.loc 1 5715 9 is_stmt 0 discriminator 1
 11761 0766 0423     		movs	r3, #4
 11762 0768 00E0     		b	.L681
 11763              	.L680:
 11764              		.loc 1 5715 9 discriminator 2
 11765 076a 0123     		movs	r3, #1
 11766              	.L681:
 11767              		.loc 1 5715 9 discriminator 4
 11768 076c 87F84E30 		strb	r3, [r7, #78]
 11769              	.L678:
5716:./Libraries/FatFs/Src/ff.c **** 			}
5717:./Libraries/FatFs/Src/ff.c **** 		}
5718:./Libraries/FatFs/Src/ff.c **** 	}
5719:./Libraries/FatFs/Src/ff.c **** 
5720:./Libraries/FatFs/Src/ff.c **** 	/* Update partition information */
5721:./Libraries/FatFs/Src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5722:./Libraries/FatFs/Src/ff.c **** 		/* Update system ID in the partition table */
5723:./Libraries/FatFs/Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
5724:./Libraries/FatFs/Src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5725:./Libraries/FatFs/Src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
5726:./Libraries/FatFs/Src/ff.c **** 	} else {								/* Created as a new single partition */
5727:./Libraries/FatFs/Src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 11770              		.loc 1 5727 13 is_stmt 1
 11771 0770 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 11772 0772 03F00803 		and	r3, r3, #8
 11773              		.loc 1 5727 6
ARM GAS  /tmp/cceCRWeb.s 			page 308


 11774 0776 002B     		cmp	r3, #0
 11775 0778 5BD1     		bne	.L682
5728:./Libraries/FatFs/Src/ff.c **** 			mem_set(buf, 0, ss);
 11776              		.loc 1 5728 4
 11777 077a FB8E     		ldrh	r3, [r7, #54]
 11778 077c 1A46     		mov	r2, r3
 11779 077e 0021     		movs	r1, #0
 11780 0780 386B     		ldr	r0, [r7, #48]
 11781 0782 FFF7FEFF 		bl	mem_set
5729:./Libraries/FatFs/Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 11782              		.loc 1 5729 4
 11783 0786 3B6B     		ldr	r3, [r7, #48]
 11784 0788 03F5FF73 		add	r3, r3, #510
 11785 078c 4AF65521 		movw	r1, #43605
 11786 0790 1846     		mov	r0, r3
 11787 0792 FFF7FEFF 		bl	st_word
5730:./Libraries/FatFs/Src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 11788              		.loc 1 5730 8
 11789 0796 3B6B     		ldr	r3, [r7, #48]
 11790 0798 03F5DF73 		add	r3, r3, #446
 11791 079c BB61     		str	r3, [r7, #24]
5731:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
 11792              		.loc 1 5731 18
 11793 079e BB69     		ldr	r3, [r7, #24]
 11794 07a0 0022     		movs	r2, #0
 11795 07a2 1A70     		strb	r2, [r3]
5732:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
 11796              		.loc 1 5732 7
 11797 07a4 BB69     		ldr	r3, [r7, #24]
 11798 07a6 0133     		adds	r3, r3, #1
 11799              		.loc 1 5732 20
 11800 07a8 0122     		movs	r2, #1
 11801 07aa 1A70     		strb	r2, [r3]
5733:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
 11802              		.loc 1 5733 7
 11803 07ac BB69     		ldr	r3, [r7, #24]
 11804 07ae 0233     		adds	r3, r3, #2
 11805              		.loc 1 5733 19
 11806 07b0 0122     		movs	r2, #1
 11807 07b2 1A70     		strb	r2, [r3]
5734:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
 11808              		.loc 1 5734 7
 11809 07b4 BB69     		ldr	r3, [r7, #24]
 11810 07b6 0333     		adds	r3, r3, #3
 11811              		.loc 1 5734 19
 11812 07b8 0022     		movs	r2, #0
 11813 07ba 1A70     		strb	r2, [r3]
5735:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
 11814              		.loc 1 5735 7
 11815 07bc BB69     		ldr	r3, [r7, #24]
 11816 07be 0433     		adds	r3, r3, #4
 11817              		.loc 1 5735 20
 11818 07c0 97F84E20 		ldrb	r2, [r7, #78]
 11819 07c4 1A70     		strb	r2, [r3]
5736:./Libraries/FatFs/Src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 11820              		.loc 1 5736 15
 11821 07c6 3A69     		ldr	r2, [r7, #16]
ARM GAS  /tmp/cceCRWeb.s 			page 309


 11822 07c8 7B6A     		ldr	r3, [r7, #36]
 11823 07ca 1A44     		add	r2, r2, r3
 11824              		.loc 1 5736 6
 11825 07cc 214B     		ldr	r3, .L693
 11826 07ce A3FB0213 		umull	r1, r3, r3, r2
 11827 07d2 D21A     		subs	r2, r2, r3
 11828 07d4 5208     		lsrs	r2, r2, #1
 11829 07d6 1344     		add	r3, r3, r2
 11830 07d8 5B0B     		lsrs	r3, r3, #13
 11831 07da FB65     		str	r3, [r7, #92]
5737:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
 11832              		.loc 1 5737 7
 11833 07dc BB69     		ldr	r3, [r7, #24]
 11834 07de 0533     		adds	r3, r3, #5
 11835              		.loc 1 5737 20
 11836 07e0 FE22     		movs	r2, #254
 11837 07e2 1A70     		strb	r2, [r3]
5738:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 11838              		.loc 1 5738 30
 11839 07e4 FB6D     		ldr	r3, [r7, #92]
 11840 07e6 9B08     		lsrs	r3, r3, #2
 11841              		.loc 1 5738 21
 11842 07e8 DAB2     		uxtb	r2, r3
 11843              		.loc 1 5738 7
 11844 07ea BB69     		ldr	r3, [r7, #24]
 11845 07ec 0633     		adds	r3, r3, #6
 11846              		.loc 1 5738 21
 11847 07ee 42F03F02 		orr	r2, r2, #63
 11848 07f2 D2B2     		uxtb	r2, r2
 11849              		.loc 1 5738 19
 11850 07f4 1A70     		strb	r2, [r3]
5739:./Libraries/FatFs/Src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 11851              		.loc 1 5739 7
 11852 07f6 BB69     		ldr	r3, [r7, #24]
 11853 07f8 0733     		adds	r3, r3, #7
 11854              		.loc 1 5739 21
 11855 07fa FA6D     		ldr	r2, [r7, #92]
 11856 07fc D2B2     		uxtb	r2, r2
 11857              		.loc 1 5739 19
 11858 07fe 1A70     		strb	r2, [r3]
5740:./Libraries/FatFs/Src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 11859              		.loc 1 5740 4
 11860 0800 BB69     		ldr	r3, [r7, #24]
 11861 0802 0833     		adds	r3, r3, #8
 11862 0804 796A     		ldr	r1, [r7, #36]
 11863 0806 1846     		mov	r0, r3
 11864 0808 FFF7FEFF 		bl	st_dword
5741:./Libraries/FatFs/Src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 11865              		.loc 1 5741 4
 11866 080c BB69     		ldr	r3, [r7, #24]
 11867 080e 0C33     		adds	r3, r3, #12
 11868 0810 3A69     		ldr	r2, [r7, #16]
 11869 0812 1146     		mov	r1, r2
 11870 0814 1846     		mov	r0, r3
 11871 0816 FFF7FEFF 		bl	st_dword
5742:./Libraries/FatFs/Src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 11872              		.loc 1 5742 8
ARM GAS  /tmp/cceCRWeb.s 			page 310


 11873 081a 97F83B00 		ldrb	r0, [r7, #59]	@ zero_extendqisi2
 11874 081e 0123     		movs	r3, #1
 11875 0820 0022     		movs	r2, #0
 11876 0822 396B     		ldr	r1, [r7, #48]
 11877 0824 FFF7FEFF 		bl	disk_write
 11878 0828 0346     		mov	r3, r0
 11879              		.loc 1 5742 7
 11880 082a 002B     		cmp	r3, #0
 11881 082c 01D0     		beq	.L682
 11882              		.loc 1 5742 54 discriminator 1
 11883 082e 0123     		movs	r3, #1
 11884 0830 0CE0     		b	.L684
 11885              	.L682:
5743:./Libraries/FatFs/Src/ff.c **** 		}
5744:./Libraries/FatFs/Src/ff.c **** 	}
5745:./Libraries/FatFs/Src/ff.c **** 
5746:./Libraries/FatFs/Src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 11886              		.loc 1 5746 6
 11887 0832 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 11888 0836 0022     		movs	r2, #0
 11889 0838 0021     		movs	r1, #0
 11890 083a 1846     		mov	r0, r3
 11891 083c FFF7FEFF 		bl	disk_ioctl
 11892 0840 0346     		mov	r3, r0
 11893              		.loc 1 5746 5
 11894 0842 002B     		cmp	r3, #0
 11895 0844 01D0     		beq	.L683
 11896              		.loc 1 5746 55 discriminator 1
 11897 0846 0123     		movs	r3, #1
 11898 0848 00E0     		b	.L684
 11899              	.L683:
5747:./Libraries/FatFs/Src/ff.c **** 
5748:./Libraries/FatFs/Src/ff.c **** 	return FR_OK;
 11900              		.loc 1 5748 9
 11901 084a 0023     		movs	r3, #0
 11902              	.L684:
5749:./Libraries/FatFs/Src/ff.c **** }
 11903              		.loc 1 5749 1 discriminator 1
 11904 084c 1846     		mov	r0, r3
 11905 084e 7437     		adds	r7, r7, #116
 11906              	.LCFI299:
 11907              		.cfi_def_cfa_offset 12
 11908 0850 BD46     		mov	sp, r7
 11909              	.LCFI300:
 11910              		.cfi_def_cfa_register 13
 11911              		@ sp needed
 11912 0852 90BD     		pop	{r4, r7, pc}
 11913              	.L694:
 11914              		.align	2
 11915              	.L693:
 11916 0854 5B561505 		.word	85284443
 11917              		.cfi_endproc
 11918              	.LFE391:
 11920              		.section	.text.f_gets,"ax",%progbits
 11921              		.align	1
 11922              		.global	f_gets
 11923              		.syntax unified
ARM GAS  /tmp/cceCRWeb.s 			page 311


 11924              		.thumb
 11925              		.thumb_func
 11926              		.fpu fpv5-d16
 11928              	f_gets:
 11929              	.LFB392:
5750:./Libraries/FatFs/Src/ff.c **** 
5751:./Libraries/FatFs/Src/ff.c **** 
5752:./Libraries/FatFs/Src/ff.c **** 
5753:./Libraries/FatFs/Src/ff.c **** #if _MULTI_PARTITION
5754:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5755:./Libraries/FatFs/Src/ff.c **** /* Create partition table on the physical drive                          */
5756:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5757:./Libraries/FatFs/Src/ff.c **** 
5758:./Libraries/FatFs/Src/ff.c **** FRESULT f_fdisk (
5759:./Libraries/FatFs/Src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5760:./Libraries/FatFs/Src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5761:./Libraries/FatFs/Src/ff.c **** 	void* work			/* Pointer to the working buffer */
5762:./Libraries/FatFs/Src/ff.c **** )
5763:./Libraries/FatFs/Src/ff.c **** {
5764:./Libraries/FatFs/Src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5765:./Libraries/FatFs/Src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5766:./Libraries/FatFs/Src/ff.c **** 	DSTATUS stat;
5767:./Libraries/FatFs/Src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5768:./Libraries/FatFs/Src/ff.c **** 
5769:./Libraries/FatFs/Src/ff.c **** 
5770:./Libraries/FatFs/Src/ff.c **** 	stat = disk_initialize(pdrv);
5771:./Libraries/FatFs/Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5772:./Libraries/FatFs/Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5773:./Libraries/FatFs/Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5774:./Libraries/FatFs/Src/ff.c **** 
5775:./Libraries/FatFs/Src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
5776:./Libraries/FatFs/Src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5777:./Libraries/FatFs/Src/ff.c **** 	if (n == 256) n--;
5778:./Libraries/FatFs/Src/ff.c **** 	e_hd = n - 1;
5779:./Libraries/FatFs/Src/ff.c **** 	sz_cyl = 63 * n;
5780:./Libraries/FatFs/Src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
5781:./Libraries/FatFs/Src/ff.c **** 
5782:./Libraries/FatFs/Src/ff.c **** 	/* Create partition table */
5783:./Libraries/FatFs/Src/ff.c **** 	mem_set(buf, 0, _MAX_SS);
5784:./Libraries/FatFs/Src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
5785:./Libraries/FatFs/Src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5786:./Libraries/FatFs/Src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
5787:./Libraries/FatFs/Src/ff.c **** 		if (!p_cyl) continue;
5788:./Libraries/FatFs/Src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
5789:./Libraries/FatFs/Src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5790:./Libraries/FatFs/Src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5791:./Libraries/FatFs/Src/ff.c **** 			s_hd = 1;
5792:./Libraries/FatFs/Src/ff.c **** 			s_part += 63; sz_part -= 63;
5793:./Libraries/FatFs/Src/ff.c **** 		} else {
5794:./Libraries/FatFs/Src/ff.c **** 			s_hd = 0;
5795:./Libraries/FatFs/Src/ff.c **** 		}
5796:./Libraries/FatFs/Src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
5797:./Libraries/FatFs/Src/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5798:./Libraries/FatFs/Src/ff.c **** 
5799:./Libraries/FatFs/Src/ff.c **** 		/* Set partition table */
5800:./Libraries/FatFs/Src/ff.c **** 		p[1] = s_hd;						/* Start head */
5801:./Libraries/FatFs/Src/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
ARM GAS  /tmp/cceCRWeb.s 			page 312


5802:./Libraries/FatFs/Src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5803:./Libraries/FatFs/Src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
5804:./Libraries/FatFs/Src/ff.c **** 		p[5] = e_hd;						/* End head */
5805:./Libraries/FatFs/Src/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
5806:./Libraries/FatFs/Src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5807:./Libraries/FatFs/Src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5808:./Libraries/FatFs/Src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
5809:./Libraries/FatFs/Src/ff.c **** 
5810:./Libraries/FatFs/Src/ff.c **** 		/* Next partition */
5811:./Libraries/FatFs/Src/ff.c **** 		b_cyl += p_cyl;
5812:./Libraries/FatFs/Src/ff.c **** 	}
5813:./Libraries/FatFs/Src/ff.c **** 	st_word(p, 0xAA55);
5814:./Libraries/FatFs/Src/ff.c **** 
5815:./Libraries/FatFs/Src/ff.c **** 	/* Write it to the MBR */
5816:./Libraries/FatFs/Src/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5817:./Libraries/FatFs/Src/ff.c **** }
5818:./Libraries/FatFs/Src/ff.c **** 
5819:./Libraries/FatFs/Src/ff.c **** #endif /* _MULTI_PARTITION */
5820:./Libraries/FatFs/Src/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
5821:./Libraries/FatFs/Src/ff.c **** 
5822:./Libraries/FatFs/Src/ff.c **** 
5823:./Libraries/FatFs/Src/ff.c **** 
5824:./Libraries/FatFs/Src/ff.c **** 
5825:./Libraries/FatFs/Src/ff.c **** #if _USE_STRFUNC
5826:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5827:./Libraries/FatFs/Src/ff.c **** /* Get a string from the file                                            */
5828:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5829:./Libraries/FatFs/Src/ff.c **** 
5830:./Libraries/FatFs/Src/ff.c **** TCHAR* f_gets (
5831:./Libraries/FatFs/Src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5832:./Libraries/FatFs/Src/ff.c **** 	int len,		/* Size of string buffer (characters) */
5833:./Libraries/FatFs/Src/ff.c **** 	FIL* fp			/* Pointer to the file object */
5834:./Libraries/FatFs/Src/ff.c **** )
5835:./Libraries/FatFs/Src/ff.c **** {
 11930              		.loc 1 5835 1
 11931              		.cfi_startproc
 11932              		@ args = 0, pretend = 0, frame = 32
 11933              		@ frame_needed = 1, uses_anonymous_args = 0
 11934 0000 80B5     		push	{r7, lr}
 11935              	.LCFI301:
 11936              		.cfi_def_cfa_offset 8
 11937              		.cfi_offset 7, -8
 11938              		.cfi_offset 14, -4
 11939 0002 88B0     		sub	sp, sp, #32
 11940              	.LCFI302:
 11941              		.cfi_def_cfa_offset 40
 11942 0004 00AF     		add	r7, sp, #0
 11943              	.LCFI303:
 11944              		.cfi_def_cfa_register 7
 11945 0006 F860     		str	r0, [r7, #12]
 11946 0008 B960     		str	r1, [r7, #8]
 11947 000a 7A60     		str	r2, [r7, #4]
5836:./Libraries/FatFs/Src/ff.c **** 	int n = 0;
 11948              		.loc 1 5836 6
 11949 000c 0023     		movs	r3, #0
 11950 000e FB61     		str	r3, [r7, #28]
5837:./Libraries/FatFs/Src/ff.c **** 	TCHAR c, *p = buff;
ARM GAS  /tmp/cceCRWeb.s 			page 313


 11951              		.loc 1 5837 12
 11952 0010 FB68     		ldr	r3, [r7, #12]
 11953 0012 BB61     		str	r3, [r7, #24]
5838:./Libraries/FatFs/Src/ff.c **** 	BYTE s[2];
5839:./Libraries/FatFs/Src/ff.c **** 	UINT rc;
5840:./Libraries/FatFs/Src/ff.c **** 
5841:./Libraries/FatFs/Src/ff.c **** 
5842:./Libraries/FatFs/Src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
 11954              		.loc 1 5842 8
 11955 0014 1BE0     		b	.L696
 11956              	.L700:
5843:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
5844:./Libraries/FatFs/Src/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5845:./Libraries/FatFs/Src/ff.c **** 		f_read(fp, s, 1, &rc);
5846:./Libraries/FatFs/Src/ff.c **** 		if (rc != 1) break;
5847:./Libraries/FatFs/Src/ff.c **** 		c = s[0];
5848:./Libraries/FatFs/Src/ff.c **** 		if (c >= 0x80) {
5849:./Libraries/FatFs/Src/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5850:./Libraries/FatFs/Src/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence (0x80-0x7FF) */
5851:./Libraries/FatFs/Src/ff.c **** 				f_read(fp, s, 1, &rc);
5852:./Libraries/FatFs/Src/ff.c **** 				if (rc != 1) break;
5853:./Libraries/FatFs/Src/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5854:./Libraries/FatFs/Src/ff.c **** 				if (c < 0x80) c = '?';	/* Reject invalid code range */
5855:./Libraries/FatFs/Src/ff.c **** 			} else {
5856:./Libraries/FatFs/Src/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence (0x800-0xFFFF) */
5857:./Libraries/FatFs/Src/ff.c **** 					f_read(fp, s, 2, &rc);
5858:./Libraries/FatFs/Src/ff.c **** 					if (rc != 2) break;
5859:./Libraries/FatFs/Src/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5860:./Libraries/FatFs/Src/ff.c **** 					if (c < 0x800) c = '?';	/* Reject invalid code range */
5861:./Libraries/FatFs/Src/ff.c **** 				} else {			/* Reject four-byte sequence */
5862:./Libraries/FatFs/Src/ff.c **** 					c = '?';
5863:./Libraries/FatFs/Src/ff.c **** 				}
5864:./Libraries/FatFs/Src/ff.c **** 			}
5865:./Libraries/FatFs/Src/ff.c **** 		}
5866:./Libraries/FatFs/Src/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5867:./Libraries/FatFs/Src/ff.c **** 		f_read(fp, s, 2, &rc);
5868:./Libraries/FatFs/Src/ff.c **** 		if (rc != 2) break;
5869:./Libraries/FatFs/Src/ff.c **** 		c = s[1] + (s[0] << 8);
5870:./Libraries/FatFs/Src/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5871:./Libraries/FatFs/Src/ff.c **** 		f_read(fp, s, 2, &rc);
5872:./Libraries/FatFs/Src/ff.c **** 		if (rc != 2) break;
5873:./Libraries/FatFs/Src/ff.c **** 		c = s[0] + (s[1] << 8);
5874:./Libraries/FatFs/Src/ff.c **** #else						/* Read a character in ANSI/OEM */
5875:./Libraries/FatFs/Src/ff.c **** 		f_read(fp, s, 1, &rc);
5876:./Libraries/FatFs/Src/ff.c **** 		if (rc != 1) break;
5877:./Libraries/FatFs/Src/ff.c **** 		c = s[0];
5878:./Libraries/FatFs/Src/ff.c **** 		if (IsDBCS1(c)) {
5879:./Libraries/FatFs/Src/ff.c **** 			f_read(fp, s, 1, &rc);
5880:./Libraries/FatFs/Src/ff.c **** 			if (rc != 1) break;
5881:./Libraries/FatFs/Src/ff.c **** 			c = (c << 8) + s[0];
5882:./Libraries/FatFs/Src/ff.c **** 		}
5883:./Libraries/FatFs/Src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5884:./Libraries/FatFs/Src/ff.c **** 		if (!c) c = '?';
5885:./Libraries/FatFs/Src/ff.c **** #endif
5886:./Libraries/FatFs/Src/ff.c **** #else						/* Read a character without conversion */
5887:./Libraries/FatFs/Src/ff.c **** 		f_read(fp, s, 1, &rc);
 11957              		.loc 1 5887 3
ARM GAS  /tmp/cceCRWeb.s 			page 314


 11958 0016 07F11003 		add	r3, r7, #16
 11959 001a 07F11401 		add	r1, r7, #20
 11960 001e 0122     		movs	r2, #1
 11961 0020 7868     		ldr	r0, [r7, #4]
 11962 0022 FFF7FEFF 		bl	f_read
5888:./Libraries/FatFs/Src/ff.c **** 		if (rc != 1) break;
 11963              		.loc 1 5888 10
 11964 0026 3B69     		ldr	r3, [r7, #16]
 11965              		.loc 1 5888 6
 11966 0028 012B     		cmp	r3, #1
 11967 002a 16D1     		bne	.L704
5889:./Libraries/FatFs/Src/ff.c **** 		c = s[0];
 11968              		.loc 1 5889 5
 11969 002c 3B7D     		ldrb	r3, [r7, #20]
 11970 002e FB75     		strb	r3, [r7, #23]
5890:./Libraries/FatFs/Src/ff.c **** #endif
5891:./Libraries/FatFs/Src/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 11971              		.loc 1 5891 6
 11972 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11973 0032 0D2B     		cmp	r3, #13
 11974 0034 00D1     		bne	.L699
 11975              		.loc 1 5891 3 discriminator 1
 11976 0036 0AE0     		b	.L696
 11977              	.L699:
5892:./Libraries/FatFs/Src/ff.c **** 		*p++ = c;
 11978              		.loc 1 5892 5
 11979 0038 BB69     		ldr	r3, [r7, #24]
 11980 003a 5A1C     		adds	r2, r3, #1
 11981 003c BA61     		str	r2, [r7, #24]
 11982              		.loc 1 5892 8
 11983 003e FA7D     		ldrb	r2, [r7, #23]
 11984 0040 1A70     		strb	r2, [r3]
5893:./Libraries/FatFs/Src/ff.c **** 		n++;
 11985              		.loc 1 5893 4
 11986 0042 FB69     		ldr	r3, [r7, #28]
 11987 0044 0133     		adds	r3, r3, #1
 11988 0046 FB61     		str	r3, [r7, #28]
5894:./Libraries/FatFs/Src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11989              		.loc 1 5894 6
 11990 0048 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11991 004a 0A2B     		cmp	r3, #10
 11992 004c 07D0     		beq	.L705
 11993              	.L696:
5842:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
 11994              		.loc 1 5842 17
 11995 004e BB68     		ldr	r3, [r7, #8]
 11996 0050 013B     		subs	r3, r3, #1
5842:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
 11997              		.loc 1 5842 8
 11998 0052 FA69     		ldr	r2, [r7, #28]
 11999 0054 9A42     		cmp	r2, r3
 12000 0056 DEDB     		blt	.L700
 12001 0058 02E0     		b	.L698
 12002              	.L704:
5888:./Libraries/FatFs/Src/ff.c **** 		c = s[0];
 12003              		.loc 1 5888 3
 12004 005a 00BF     		nop
ARM GAS  /tmp/cceCRWeb.s 			page 315


 12005 005c 00E0     		b	.L698
 12006              	.L705:
 12007              		.loc 1 5894 3
 12008 005e 00BF     		nop
 12009              	.L698:
5895:./Libraries/FatFs/Src/ff.c **** 	}
5896:./Libraries/FatFs/Src/ff.c **** 	*p = 0;
 12010              		.loc 1 5896 5
 12011 0060 BB69     		ldr	r3, [r7, #24]
 12012 0062 0022     		movs	r2, #0
 12013 0064 1A70     		strb	r2, [r3]
5897:./Libraries/FatFs/Src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 12014              		.loc 1 5897 18
 12015 0066 FB69     		ldr	r3, [r7, #28]
 12016 0068 002B     		cmp	r3, #0
 12017 006a 01D0     		beq	.L701
 12018              		.loc 1 5897 18 is_stmt 0 discriminator 1
 12019 006c FB68     		ldr	r3, [r7, #12]
 12020 006e 00E0     		b	.L703
 12021              	.L701:
 12022              		.loc 1 5897 18 discriminator 2
 12023 0070 0023     		movs	r3, #0
 12024              	.L703:
5898:./Libraries/FatFs/Src/ff.c **** }
 12025              		.loc 1 5898 1 is_stmt 1
 12026 0072 1846     		mov	r0, r3
 12027 0074 2037     		adds	r7, r7, #32
 12028              	.LCFI304:
 12029              		.cfi_def_cfa_offset 8
 12030 0076 BD46     		mov	sp, r7
 12031              	.LCFI305:
 12032              		.cfi_def_cfa_register 13
 12033              		@ sp needed
 12034 0078 80BD     		pop	{r7, pc}
 12035              		.cfi_endproc
 12036              	.LFE392:
 12038              		.section	.text.putc_bfd,"ax",%progbits
 12039              		.align	1
 12040              		.syntax unified
 12041              		.thumb
 12042              		.thumb_func
 12043              		.fpu fpv5-d16
 12045              	putc_bfd:
 12046              	.LFB393:
5899:./Libraries/FatFs/Src/ff.c **** 
5900:./Libraries/FatFs/Src/ff.c **** 
5901:./Libraries/FatFs/Src/ff.c **** 
5902:./Libraries/FatFs/Src/ff.c **** 
5903:./Libraries/FatFs/Src/ff.c **** #if !_FS_READONLY
5904:./Libraries/FatFs/Src/ff.c **** #include <stdarg.h>
5905:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5906:./Libraries/FatFs/Src/ff.c **** /* Put a character to the file                                           */
5907:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
5908:./Libraries/FatFs/Src/ff.c **** 
5909:./Libraries/FatFs/Src/ff.c **** typedef struct {
5910:./Libraries/FatFs/Src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
5911:./Libraries/FatFs/Src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
ARM GAS  /tmp/cceCRWeb.s 			page 316


5912:./Libraries/FatFs/Src/ff.c **** 	BYTE buf[64];	/* Write buffer */
5913:./Libraries/FatFs/Src/ff.c **** } putbuff;
5914:./Libraries/FatFs/Src/ff.c **** 
5915:./Libraries/FatFs/Src/ff.c **** 
5916:./Libraries/FatFs/Src/ff.c **** static
5917:./Libraries/FatFs/Src/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
5918:./Libraries/FatFs/Src/ff.c **** 	putbuff* pb,
5919:./Libraries/FatFs/Src/ff.c **** 	TCHAR c
5920:./Libraries/FatFs/Src/ff.c **** )
5921:./Libraries/FatFs/Src/ff.c **** {
 12047              		.loc 1 5921 1
 12048              		.cfi_startproc
 12049              		@ args = 0, pretend = 0, frame = 16
 12050              		@ frame_needed = 1, uses_anonymous_args = 0
 12051 0000 80B5     		push	{r7, lr}
 12052              	.LCFI306:
 12053              		.cfi_def_cfa_offset 8
 12054              		.cfi_offset 7, -8
 12055              		.cfi_offset 14, -4
 12056 0002 84B0     		sub	sp, sp, #16
 12057              	.LCFI307:
 12058              		.cfi_def_cfa_offset 24
 12059 0004 00AF     		add	r7, sp, #0
 12060              	.LCFI308:
 12061              		.cfi_def_cfa_register 7
 12062 0006 7860     		str	r0, [r7, #4]
 12063 0008 0B46     		mov	r3, r1
 12064 000a FB70     		strb	r3, [r7, #3]
5922:./Libraries/FatFs/Src/ff.c **** 	UINT bw;
5923:./Libraries/FatFs/Src/ff.c **** 	int i;
5924:./Libraries/FatFs/Src/ff.c **** 
5925:./Libraries/FatFs/Src/ff.c **** 
5926:./Libraries/FatFs/Src/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 12065              		.loc 1 5926 5
 12066 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 12067 000e 0A2B     		cmp	r3, #10
 12068 0010 03D1     		bne	.L707
5927:./Libraries/FatFs/Src/ff.c **** 		putc_bfd(pb, '\r');
 12069              		.loc 1 5927 3
 12070 0012 0D21     		movs	r1, #13
 12071 0014 7868     		ldr	r0, [r7, #4]
 12072 0016 FFF7F3FF 		bl	putc_bfd
 12073              	.L707:
5928:./Libraries/FatFs/Src/ff.c **** 	}
5929:./Libraries/FatFs/Src/ff.c **** 
5930:./Libraries/FatFs/Src/ff.c **** 	i = pb->idx;		/* Write index of pb->buf[] */
 12074              		.loc 1 5930 4
 12075 001a 7B68     		ldr	r3, [r7, #4]
 12076 001c 5B68     		ldr	r3, [r3, #4]
 12077 001e FB60     		str	r3, [r7, #12]
5931:./Libraries/FatFs/Src/ff.c **** 	if (i < 0) return;
 12078              		.loc 1 5931 5
 12079 0020 FB68     		ldr	r3, [r7, #12]
 12080 0022 002B     		cmp	r3, #0
 12081 0024 25DB     		blt	.L713
5932:./Libraries/FatFs/Src/ff.c **** 
5933:./Libraries/FatFs/Src/ff.c **** #if _LFN_UNICODE
ARM GAS  /tmp/cceCRWeb.s 			page 317


5934:./Libraries/FatFs/Src/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5935:./Libraries/FatFs/Src/ff.c **** 	if (c < 0x80) {				/* 7-bit */
5936:./Libraries/FatFs/Src/ff.c **** 		pb->buf[i++] = (BYTE)c;
5937:./Libraries/FatFs/Src/ff.c **** 	} else {
5938:./Libraries/FatFs/Src/ff.c **** 		if (c < 0x800) {		/* 11-bit */
5939:./Libraries/FatFs/Src/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5940:./Libraries/FatFs/Src/ff.c **** 		} else {				/* 16-bit */
5941:./Libraries/FatFs/Src/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5942:./Libraries/FatFs/Src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5943:./Libraries/FatFs/Src/ff.c **** 		}
5944:./Libraries/FatFs/Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5945:./Libraries/FatFs/Src/ff.c **** 	}
5946:./Libraries/FatFs/Src/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5947:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5948:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5949:./Libraries/FatFs/Src/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5950:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5951:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5952:./Libraries/FatFs/Src/ff.c **** #else							/* Write a character in ANSI/OEM */
5953:./Libraries/FatFs/Src/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
5954:./Libraries/FatFs/Src/ff.c **** 	if (!c) c = '?';
5955:./Libraries/FatFs/Src/ff.c **** 	if (c >= 0x100)
5956:./Libraries/FatFs/Src/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
5957:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5958:./Libraries/FatFs/Src/ff.c **** #endif
5959:./Libraries/FatFs/Src/ff.c **** #else							/* Write a character without conversion */
5960:./Libraries/FatFs/Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
 12082              		.loc 1 5960 11
 12083 0026 FB68     		ldr	r3, [r7, #12]
 12084 0028 5A1C     		adds	r2, r3, #1
 12085 002a FA60     		str	r2, [r7, #12]
 12086              		.loc 1 5960 15
 12087 002c 7A68     		ldr	r2, [r7, #4]
 12088 002e 1344     		add	r3, r3, r2
 12089 0030 FA78     		ldrb	r2, [r7, #3]
 12090 0032 1A73     		strb	r2, [r3, #12]
5961:./Libraries/FatFs/Src/ff.c **** #endif
5962:./Libraries/FatFs/Src/ff.c **** 
5963:./Libraries/FatFs/Src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 12091              		.loc 1 5963 5
 12092 0034 FB68     		ldr	r3, [r7, #12]
 12093 0036 3C2B     		cmp	r3, #60
 12094 0038 12DD     		ble	.L710
5964:./Libraries/FatFs/Src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 12095              		.loc 1 5964 3
 12096 003a 7B68     		ldr	r3, [r7, #4]
 12097 003c 1868     		ldr	r0, [r3]
 12098              		.loc 1 5964 21
 12099 003e 7B68     		ldr	r3, [r7, #4]
 12100 0040 03F10C01 		add	r1, r3, #12
 12101              		.loc 1 5964 3
 12102 0044 FA68     		ldr	r2, [r7, #12]
 12103 0046 07F10803 		add	r3, r7, #8
 12104 004a FFF7FEFF 		bl	f_write
5965:./Libraries/FatFs/Src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 12105              		.loc 1 5965 11
 12106 004e BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/cceCRWeb.s 			page 318


 12107              		.loc 1 5965 14
 12108 0050 FB68     		ldr	r3, [r7, #12]
 12109              		.loc 1 5965 27
 12110 0052 9A42     		cmp	r2, r3
 12111 0054 01D1     		bne	.L711
 12112              		.loc 1 5965 27 is_stmt 0 discriminator 1
 12113 0056 0023     		movs	r3, #0
 12114 0058 01E0     		b	.L712
 12115              	.L711:
 12116              		.loc 1 5965 27 discriminator 2
 12117 005a 4FF0FF33 		mov	r3, #-1
 12118              	.L712:
 12119              		.loc 1 5965 5 is_stmt 1 discriminator 4
 12120 005e FB60     		str	r3, [r7, #12]
 12121              	.L710:
5966:./Libraries/FatFs/Src/ff.c **** 	}
5967:./Libraries/FatFs/Src/ff.c **** 	pb->idx = i;
 12122              		.loc 1 5967 10
 12123 0060 7B68     		ldr	r3, [r7, #4]
 12124 0062 FA68     		ldr	r2, [r7, #12]
 12125 0064 5A60     		str	r2, [r3, #4]
5968:./Libraries/FatFs/Src/ff.c **** 	pb->nchr++;
 12126              		.loc 1 5968 4
 12127 0066 7B68     		ldr	r3, [r7, #4]
 12128 0068 9B68     		ldr	r3, [r3, #8]
 12129              		.loc 1 5968 10
 12130 006a 5A1C     		adds	r2, r3, #1
 12131 006c 7B68     		ldr	r3, [r7, #4]
 12132 006e 9A60     		str	r2, [r3, #8]
 12133 0070 00E0     		b	.L706
 12134              	.L713:
5931:./Libraries/FatFs/Src/ff.c **** 
 12135              		.loc 1 5931 13
 12136 0072 00BF     		nop
 12137              	.L706:
5969:./Libraries/FatFs/Src/ff.c **** }
 12138              		.loc 1 5969 1
 12139 0074 1037     		adds	r7, r7, #16
 12140              	.LCFI309:
 12141              		.cfi_def_cfa_offset 8
 12142 0076 BD46     		mov	sp, r7
 12143              	.LCFI310:
 12144              		.cfi_def_cfa_register 13
 12145              		@ sp needed
 12146 0078 80BD     		pop	{r7, pc}
 12147              		.cfi_endproc
 12148              	.LFE393:
 12150              		.section	.text.putc_flush,"ax",%progbits
 12151              		.align	1
 12152              		.syntax unified
 12153              		.thumb
 12154              		.thumb_func
 12155              		.fpu fpv5-d16
 12157              	putc_flush:
 12158              	.LFB394:
5970:./Libraries/FatFs/Src/ff.c **** 
5971:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 319


5972:./Libraries/FatFs/Src/ff.c **** static
5973:./Libraries/FatFs/Src/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
5974:./Libraries/FatFs/Src/ff.c **** 	putbuff* pb
5975:./Libraries/FatFs/Src/ff.c **** )
5976:./Libraries/FatFs/Src/ff.c **** {
 12159              		.loc 1 5976 1
 12160              		.cfi_startproc
 12161              		@ args = 0, pretend = 0, frame = 16
 12162              		@ frame_needed = 1, uses_anonymous_args = 0
 12163 0000 80B5     		push	{r7, lr}
 12164              	.LCFI311:
 12165              		.cfi_def_cfa_offset 8
 12166              		.cfi_offset 7, -8
 12167              		.cfi_offset 14, -4
 12168 0002 84B0     		sub	sp, sp, #16
 12169              	.LCFI312:
 12170              		.cfi_def_cfa_offset 24
 12171 0004 00AF     		add	r7, sp, #0
 12172              	.LCFI313:
 12173              		.cfi_def_cfa_register 7
 12174 0006 7860     		str	r0, [r7, #4]
5977:./Libraries/FatFs/Src/ff.c **** 	UINT nw;
5978:./Libraries/FatFs/Src/ff.c **** 
5979:./Libraries/FatFs/Src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 12175              		.loc 1 5979 11
 12176 0008 7B68     		ldr	r3, [r7, #4]
 12177 000a 5B68     		ldr	r3, [r3, #4]
 12178              		.loc 1 5979 5
 12179 000c 002B     		cmp	r3, #0
 12180 000e 16DB     		blt	.L715
5980:./Libraries/FatFs/Src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 12181              		.loc 1 5980 6
 12182 0010 7B68     		ldr	r3, [r7, #4]
 12183 0012 1868     		ldr	r0, [r3]
 12184              		.loc 1 5980 24
 12185 0014 7B68     		ldr	r3, [r7, #4]
 12186 0016 03F10C01 		add	r1, r3, #12
 12187              		.loc 1 5980 39
 12188 001a 7B68     		ldr	r3, [r7, #4]
 12189 001c 5B68     		ldr	r3, [r3, #4]
 12190              		.loc 1 5980 6
 12191 001e 1A46     		mov	r2, r3
 12192 0020 07F10C03 		add	r3, r7, #12
 12193 0024 FFF7FEFF 		bl	f_write
 12194 0028 0346     		mov	r3, r0
 12195              		.loc 1 5980 3
 12196 002a 002B     		cmp	r3, #0
 12197 002c 07D1     		bne	.L715
5981:./Libraries/FatFs/Src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 12198              		.loc 1 5981 14
 12199 002e 7B68     		ldr	r3, [r7, #4]
 12200 0030 5B68     		ldr	r3, [r3, #4]
 12201              		.loc 1 5981 20
 12202 0032 FA68     		ldr	r2, [r7, #12]
 12203              		.loc 1 5981 3
 12204 0034 9342     		cmp	r3, r2
 12205 0036 02D1     		bne	.L715
ARM GAS  /tmp/cceCRWeb.s 			page 320


 12206              		.loc 1 5981 36 discriminator 1
 12207 0038 7B68     		ldr	r3, [r7, #4]
 12208 003a 9B68     		ldr	r3, [r3, #8]
 12209 003c 01E0     		b	.L717
 12210              	.L715:
5982:./Libraries/FatFs/Src/ff.c **** 	return EOF;
 12211              		.loc 1 5982 9
 12212 003e 4FF0FF33 		mov	r3, #-1
 12213              	.L717:
5983:./Libraries/FatFs/Src/ff.c **** }
 12214              		.loc 1 5983 1 discriminator 1
 12215 0042 1846     		mov	r0, r3
 12216 0044 1037     		adds	r7, r7, #16
 12217              	.LCFI314:
 12218              		.cfi_def_cfa_offset 8
 12219 0046 BD46     		mov	sp, r7
 12220              	.LCFI315:
 12221              		.cfi_def_cfa_register 13
 12222              		@ sp needed
 12223 0048 80BD     		pop	{r7, pc}
 12224              		.cfi_endproc
 12225              	.LFE394:
 12227              		.section	.text.putc_init,"ax",%progbits
 12228              		.align	1
 12229              		.syntax unified
 12230              		.thumb
 12231              		.thumb_func
 12232              		.fpu fpv5-d16
 12234              	putc_init:
 12235              	.LFB395:
5984:./Libraries/FatFs/Src/ff.c **** 
5985:./Libraries/FatFs/Src/ff.c **** 
5986:./Libraries/FatFs/Src/ff.c **** static
5987:./Libraries/FatFs/Src/ff.c **** void putc_init (		/* Initialize write buffer */
5988:./Libraries/FatFs/Src/ff.c **** 	putbuff* pb,
5989:./Libraries/FatFs/Src/ff.c **** 	FIL* fp
5990:./Libraries/FatFs/Src/ff.c **** )
5991:./Libraries/FatFs/Src/ff.c **** {
 12236              		.loc 1 5991 1
 12237              		.cfi_startproc
 12238              		@ args = 0, pretend = 0, frame = 8
 12239              		@ frame_needed = 1, uses_anonymous_args = 0
 12240              		@ link register save eliminated.
 12241 0000 80B4     		push	{r7}
 12242              	.LCFI316:
 12243              		.cfi_def_cfa_offset 4
 12244              		.cfi_offset 7, -4
 12245 0002 83B0     		sub	sp, sp, #12
 12246              	.LCFI317:
 12247              		.cfi_def_cfa_offset 16
 12248 0004 00AF     		add	r7, sp, #0
 12249              	.LCFI318:
 12250              		.cfi_def_cfa_register 7
 12251 0006 7860     		str	r0, [r7, #4]
 12252 0008 3960     		str	r1, [r7]
5992:./Libraries/FatFs/Src/ff.c **** 	pb->fp = fp;
 12253              		.loc 1 5992 9
ARM GAS  /tmp/cceCRWeb.s 			page 321


 12254 000a 7B68     		ldr	r3, [r7, #4]
 12255 000c 3A68     		ldr	r2, [r7]
 12256 000e 1A60     		str	r2, [r3]
5993:./Libraries/FatFs/Src/ff.c **** 	pb->nchr = pb->idx = 0;
 12257              		.loc 1 5993 21
 12258 0010 7B68     		ldr	r3, [r7, #4]
 12259 0012 0022     		movs	r2, #0
 12260 0014 5A60     		str	r2, [r3, #4]
 12261              		.loc 1 5993 15
 12262 0016 7B68     		ldr	r3, [r7, #4]
 12263 0018 5A68     		ldr	r2, [r3, #4]
 12264              		.loc 1 5993 11
 12265 001a 7B68     		ldr	r3, [r7, #4]
 12266 001c 9A60     		str	r2, [r3, #8]
5994:./Libraries/FatFs/Src/ff.c **** }
 12267              		.loc 1 5994 1
 12268 001e 00BF     		nop
 12269 0020 0C37     		adds	r7, r7, #12
 12270              	.LCFI319:
 12271              		.cfi_def_cfa_offset 4
 12272 0022 BD46     		mov	sp, r7
 12273              	.LCFI320:
 12274              		.cfi_def_cfa_register 13
 12275              		@ sp needed
 12276 0024 5DF8047B 		ldr	r7, [sp], #4
 12277              	.LCFI321:
 12278              		.cfi_restore 7
 12279              		.cfi_def_cfa_offset 0
 12280 0028 7047     		bx	lr
 12281              		.cfi_endproc
 12282              	.LFE395:
 12284              		.section	.text.f_putc,"ax",%progbits
 12285              		.align	1
 12286              		.global	f_putc
 12287              		.syntax unified
 12288              		.thumb
 12289              		.thumb_func
 12290              		.fpu fpv5-d16
 12292              	f_putc:
 12293              	.LFB396:
5995:./Libraries/FatFs/Src/ff.c **** 
5996:./Libraries/FatFs/Src/ff.c **** 
5997:./Libraries/FatFs/Src/ff.c **** 
5998:./Libraries/FatFs/Src/ff.c **** int f_putc (
5999:./Libraries/FatFs/Src/ff.c **** 	TCHAR c,	/* A character to be output */
6000:./Libraries/FatFs/Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
6001:./Libraries/FatFs/Src/ff.c **** )
6002:./Libraries/FatFs/Src/ff.c **** {
 12294              		.loc 1 6002 1
 12295              		.cfi_startproc
 12296              		@ args = 0, pretend = 0, frame = 88
 12297              		@ frame_needed = 1, uses_anonymous_args = 0
 12298 0000 80B5     		push	{r7, lr}
 12299              	.LCFI322:
 12300              		.cfi_def_cfa_offset 8
 12301              		.cfi_offset 7, -8
 12302              		.cfi_offset 14, -4
ARM GAS  /tmp/cceCRWeb.s 			page 322


 12303 0002 96B0     		sub	sp, sp, #88
 12304              	.LCFI323:
 12305              		.cfi_def_cfa_offset 96
 12306 0004 00AF     		add	r7, sp, #0
 12307              	.LCFI324:
 12308              		.cfi_def_cfa_register 7
 12309 0006 0346     		mov	r3, r0
 12310 0008 3960     		str	r1, [r7]
 12311 000a FB71     		strb	r3, [r7, #7]
6003:./Libraries/FatFs/Src/ff.c **** 	putbuff pb;
6004:./Libraries/FatFs/Src/ff.c **** 
6005:./Libraries/FatFs/Src/ff.c **** 
6006:./Libraries/FatFs/Src/ff.c **** 	putc_init(&pb, fp);
 12312              		.loc 1 6006 2
 12313 000c 07F10C03 		add	r3, r7, #12
 12314 0010 3968     		ldr	r1, [r7]
 12315 0012 1846     		mov	r0, r3
 12316 0014 FFF7FEFF 		bl	putc_init
6007:./Libraries/FatFs/Src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 12317              		.loc 1 6007 2
 12318 0018 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 12319 001a 07F10C03 		add	r3, r7, #12
 12320 001e 1146     		mov	r1, r2
 12321 0020 1846     		mov	r0, r3
 12322 0022 FFF7FEFF 		bl	putc_bfd
6008:./Libraries/FatFs/Src/ff.c **** 	return putc_flush(&pb);
 12323              		.loc 1 6008 9
 12324 0026 07F10C03 		add	r3, r7, #12
 12325 002a 1846     		mov	r0, r3
 12326 002c FFF7FEFF 		bl	putc_flush
 12327 0030 0346     		mov	r3, r0
6009:./Libraries/FatFs/Src/ff.c **** }
 12328              		.loc 1 6009 1
 12329 0032 1846     		mov	r0, r3
 12330 0034 5837     		adds	r7, r7, #88
 12331              	.LCFI325:
 12332              		.cfi_def_cfa_offset 8
 12333 0036 BD46     		mov	sp, r7
 12334              	.LCFI326:
 12335              		.cfi_def_cfa_register 13
 12336              		@ sp needed
 12337 0038 80BD     		pop	{r7, pc}
 12338              		.cfi_endproc
 12339              	.LFE396:
 12341              		.section	.text.f_puts,"ax",%progbits
 12342              		.align	1
 12343              		.global	f_puts
 12344              		.syntax unified
 12345              		.thumb
 12346              		.thumb_func
 12347              		.fpu fpv5-d16
 12349              	f_puts:
 12350              	.LFB397:
6010:./Libraries/FatFs/Src/ff.c **** 
6011:./Libraries/FatFs/Src/ff.c **** 
6012:./Libraries/FatFs/Src/ff.c **** 
6013:./Libraries/FatFs/Src/ff.c **** 
ARM GAS  /tmp/cceCRWeb.s 			page 323


6014:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
6015:./Libraries/FatFs/Src/ff.c **** /* Put a string to the file                                              */
6016:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
6017:./Libraries/FatFs/Src/ff.c **** 
6018:./Libraries/FatFs/Src/ff.c **** int f_puts (
6019:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6020:./Libraries/FatFs/Src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6021:./Libraries/FatFs/Src/ff.c **** )
6022:./Libraries/FatFs/Src/ff.c **** {
 12351              		.loc 1 6022 1
 12352              		.cfi_startproc
 12353              		@ args = 0, pretend = 0, frame = 88
 12354              		@ frame_needed = 1, uses_anonymous_args = 0
 12355 0000 80B5     		push	{r7, lr}
 12356              	.LCFI327:
 12357              		.cfi_def_cfa_offset 8
 12358              		.cfi_offset 7, -8
 12359              		.cfi_offset 14, -4
 12360 0002 96B0     		sub	sp, sp, #88
 12361              	.LCFI328:
 12362              		.cfi_def_cfa_offset 96
 12363 0004 00AF     		add	r7, sp, #0
 12364              	.LCFI329:
 12365              		.cfi_def_cfa_register 7
 12366 0006 7860     		str	r0, [r7, #4]
 12367 0008 3960     		str	r1, [r7]
6023:./Libraries/FatFs/Src/ff.c **** 	putbuff pb;
6024:./Libraries/FatFs/Src/ff.c **** 
6025:./Libraries/FatFs/Src/ff.c **** 
6026:./Libraries/FatFs/Src/ff.c **** 	putc_init(&pb, fp);
 12368              		.loc 1 6026 2
 12369 000a 07F10C03 		add	r3, r7, #12
 12370 000e 3968     		ldr	r1, [r7]
 12371 0010 1846     		mov	r0, r3
 12372 0012 FFF7FEFF 		bl	putc_init
6027:./Libraries/FatFs/Src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 12373              		.loc 1 6027 8
 12374 0016 09E0     		b	.L722
 12375              	.L723:
 12376              		.loc 1 6027 33 discriminator 2
 12377 0018 7B68     		ldr	r3, [r7, #4]
 12378 001a 5A1C     		adds	r2, r3, #1
 12379 001c 7A60     		str	r2, [r7, #4]
 12380              		.loc 1 6027 15 discriminator 2
 12381 001e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 12382 0020 07F10C03 		add	r3, r7, #12
 12383 0024 1146     		mov	r1, r2
 12384 0026 1846     		mov	r0, r3
 12385 0028 FFF7FEFF 		bl	putc_bfd
 12386              	.L722:
 12387              		.loc 1 6027 9 discriminator 1
 12388 002c 7B68     		ldr	r3, [r7, #4]
 12389 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12390              		.loc 1 6027 8 discriminator 1
 12391 0030 002B     		cmp	r3, #0
 12392 0032 F1D1     		bne	.L723
6028:./Libraries/FatFs/Src/ff.c **** 	return putc_flush(&pb);
ARM GAS  /tmp/cceCRWeb.s 			page 324


 12393              		.loc 1 6028 9
 12394 0034 07F10C03 		add	r3, r7, #12
 12395 0038 1846     		mov	r0, r3
 12396 003a FFF7FEFF 		bl	putc_flush
 12397 003e 0346     		mov	r3, r0
6029:./Libraries/FatFs/Src/ff.c **** }
 12398              		.loc 1 6029 1
 12399 0040 1846     		mov	r0, r3
 12400 0042 5837     		adds	r7, r7, #88
 12401              	.LCFI330:
 12402              		.cfi_def_cfa_offset 8
 12403 0044 BD46     		mov	sp, r7
 12404              	.LCFI331:
 12405              		.cfi_def_cfa_register 13
 12406              		@ sp needed
 12407 0046 80BD     		pop	{r7, pc}
 12408              		.cfi_endproc
 12409              	.LFE397:
 12411              		.section	.text.f_printf,"ax",%progbits
 12412              		.align	1
 12413              		.global	f_printf
 12414              		.syntax unified
 12415              		.thumb
 12416              		.thumb_func
 12417              		.fpu fpv5-d16
 12419              	f_printf:
 12420              	.LFB398:
6030:./Libraries/FatFs/Src/ff.c **** 
6031:./Libraries/FatFs/Src/ff.c **** 
6032:./Libraries/FatFs/Src/ff.c **** 
6033:./Libraries/FatFs/Src/ff.c **** 
6034:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
6035:./Libraries/FatFs/Src/ff.c **** /* Put a formatted string to the file                                    */
6036:./Libraries/FatFs/Src/ff.c **** /*-----------------------------------------------------------------------*/
6037:./Libraries/FatFs/Src/ff.c **** 
6038:./Libraries/FatFs/Src/ff.c **** int f_printf (
6039:./Libraries/FatFs/Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6040:./Libraries/FatFs/Src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6041:./Libraries/FatFs/Src/ff.c **** 	...					/* Optional arguments... */
6042:./Libraries/FatFs/Src/ff.c **** )
6043:./Libraries/FatFs/Src/ff.c **** {
 12421              		.loc 1 6043 1
 12422              		.cfi_startproc
 12423              		@ args = 4, pretend = 12, frame = 152
 12424              		@ frame_needed = 1, uses_anonymous_args = 1
 12425 0000 0EB4     		push	{r1, r2, r3}
 12426              	.LCFI332:
 12427              		.cfi_def_cfa_offset 12
 12428              		.cfi_offset 1, -12
 12429              		.cfi_offset 2, -8
 12430              		.cfi_offset 3, -4
 12431 0002 80B5     		push	{r7, lr}
 12432              	.LCFI333:
 12433              		.cfi_def_cfa_offset 20
 12434              		.cfi_offset 7, -20
 12435              		.cfi_offset 14, -16
 12436 0004 A7B0     		sub	sp, sp, #156
ARM GAS  /tmp/cceCRWeb.s 			page 325


 12437              	.LCFI334:
 12438              		.cfi_def_cfa_offset 176
 12439 0006 00AF     		add	r7, sp, #0
 12440              	.LCFI335:
 12441              		.cfi_def_cfa_register 7
 12442 0008 7860     		str	r0, [r7, #4]
6044:./Libraries/FatFs/Src/ff.c **** 	va_list arp;
6045:./Libraries/FatFs/Src/ff.c **** 	putbuff pb;
6046:./Libraries/FatFs/Src/ff.c **** 	BYTE f, r;
6047:./Libraries/FatFs/Src/ff.c **** 	UINT i, j, w;
6048:./Libraries/FatFs/Src/ff.c **** 	DWORD v;
6049:./Libraries/FatFs/Src/ff.c **** 	TCHAR c, d, str[32], *p;
6050:./Libraries/FatFs/Src/ff.c **** 
6051:./Libraries/FatFs/Src/ff.c **** 
6052:./Libraries/FatFs/Src/ff.c **** 	putc_init(&pb, fp);
 12443              		.loc 1 6052 2
 12444 000a 07F12C03 		add	r3, r7, #44
 12445 000e 7968     		ldr	r1, [r7, #4]
 12446 0010 1846     		mov	r0, r3
 12447 0012 FFF7FEFF 		bl	putc_init
6053:./Libraries/FatFs/Src/ff.c **** 
6054:./Libraries/FatFs/Src/ff.c **** 	va_start(arp, fmt);
 12448              		.loc 1 6054 2
 12449 0016 07F1A803 		add	r3, r7, #168
 12450 001a BB67     		str	r3, [r7, #120]
 12451              	.L776:
6055:./Libraries/FatFs/Src/ff.c **** 
6056:./Libraries/FatFs/Src/ff.c **** 	for (;;) {
6057:./Libraries/FatFs/Src/ff.c **** 		c = *fmt++;
 12452              		.loc 1 6057 11
 12453 001c D7F8A430 		ldr	r3, [r7, #164]
 12454 0020 5A1C     		adds	r2, r3, #1
 12455 0022 C7F8A420 		str	r2, [r7, #164]
 12456              		.loc 1 6057 5
 12457 0026 1B78     		ldrb	r3, [r3]
 12458 0028 87F88330 		strb	r3, [r7, #131]
6058:./Libraries/FatFs/Src/ff.c **** 		if (c == 0) break;			/* End of string */
 12459              		.loc 1 6058 6
 12460 002c 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12461 0030 002B     		cmp	r3, #0
 12462 0032 00F0F481 		beq	.L778
6059:./Libraries/FatFs/Src/ff.c **** 		if (c != '%') {				/* Non escape character */
 12463              		.loc 1 6059 6
 12464 0036 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12465 003a 252B     		cmp	r3, #37
 12466 003c 08D0     		beq	.L728
6060:./Libraries/FatFs/Src/ff.c **** 			putc_bfd(&pb, c);
 12467              		.loc 1 6060 4
 12468 003e 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 12469 0042 07F12C03 		add	r3, r7, #44
 12470 0046 1146     		mov	r1, r2
 12471 0048 1846     		mov	r0, r3
 12472 004a FFF7FEFF 		bl	putc_bfd
6061:./Libraries/FatFs/Src/ff.c **** 			continue;
 12473              		.loc 1 6061 4
 12474 004e E5E1     		b	.L729
 12475              	.L728:
ARM GAS  /tmp/cceCRWeb.s 			page 326


6062:./Libraries/FatFs/Src/ff.c **** 		}
6063:./Libraries/FatFs/Src/ff.c **** 		w = f = 0;
 12476              		.loc 1 6063 9
 12477 0050 0023     		movs	r3, #0
 12478 0052 87F89730 		strb	r3, [r7, #151]
 12479              		.loc 1 6063 5
 12480 0056 0023     		movs	r3, #0
 12481 0058 C7F88830 		str	r3, [r7, #136]
6064:./Libraries/FatFs/Src/ff.c **** 		c = *fmt++;
 12482              		.loc 1 6064 11
 12483 005c D7F8A430 		ldr	r3, [r7, #164]
 12484 0060 5A1C     		adds	r2, r3, #1
 12485 0062 C7F8A420 		str	r2, [r7, #164]
 12486              		.loc 1 6064 5
 12487 0066 1B78     		ldrb	r3, [r3]
 12488 0068 87F88330 		strb	r3, [r7, #131]
6065:./Libraries/FatFs/Src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 12489              		.loc 1 6065 6
 12490 006c 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12491 0070 302B     		cmp	r3, #48
 12492 0072 0BD1     		bne	.L730
6066:./Libraries/FatFs/Src/ff.c **** 			f = 1; c = *fmt++;
 12493              		.loc 1 6066 6
 12494 0074 0123     		movs	r3, #1
 12495 0076 87F89730 		strb	r3, [r7, #151]
 12496              		.loc 1 6066 19
 12497 007a D7F8A430 		ldr	r3, [r7, #164]
 12498 007e 5A1C     		adds	r2, r3, #1
 12499 0080 C7F8A420 		str	r2, [r7, #164]
 12500              		.loc 1 6066 13
 12501 0084 1B78     		ldrb	r3, [r3]
 12502 0086 87F88330 		strb	r3, [r7, #131]
 12503 008a 24E0     		b	.L732
 12504              	.L730:
6067:./Libraries/FatFs/Src/ff.c **** 		} else {
6068:./Libraries/FatFs/Src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 12505              		.loc 1 6068 7
 12506 008c 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12507 0090 2D2B     		cmp	r3, #45
 12508 0092 20D1     		bne	.L732
6069:./Libraries/FatFs/Src/ff.c **** 				f = 2; c = *fmt++;
 12509              		.loc 1 6069 7
 12510 0094 0223     		movs	r3, #2
 12511 0096 87F89730 		strb	r3, [r7, #151]
 12512              		.loc 1 6069 20
 12513 009a D7F8A430 		ldr	r3, [r7, #164]
 12514 009e 5A1C     		adds	r2, r3, #1
 12515 00a0 C7F8A420 		str	r2, [r7, #164]
 12516              		.loc 1 6069 14
 12517 00a4 1B78     		ldrb	r3, [r3]
 12518 00a6 87F88330 		strb	r3, [r7, #131]
6070:./Libraries/FatFs/Src/ff.c **** 			}
6071:./Libraries/FatFs/Src/ff.c **** 		}
6072:./Libraries/FatFs/Src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 12519              		.loc 1 6072 9
 12520 00aa 14E0     		b	.L732
 12521              	.L734:
ARM GAS  /tmp/cceCRWeb.s 			page 327


6073:./Libraries/FatFs/Src/ff.c **** 			w = w * 10 + c - '0';
 12522              		.loc 1 6073 10
 12523 00ac D7F88820 		ldr	r2, [r7, #136]
 12524 00b0 1346     		mov	r3, r2
 12525 00b2 9B00     		lsls	r3, r3, #2
 12526 00b4 1344     		add	r3, r3, r2
 12527 00b6 5B00     		lsls	r3, r3, #1
 12528 00b8 1A46     		mov	r2, r3
 12529              		.loc 1 6073 15
 12530 00ba 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12531 00be 1344     		add	r3, r3, r2
 12532              		.loc 1 6073 6
 12533 00c0 303B     		subs	r3, r3, #48
 12534 00c2 C7F88830 		str	r3, [r7, #136]
6074:./Libraries/FatFs/Src/ff.c **** 			c = *fmt++;
 12535              		.loc 1 6074 12
 12536 00c6 D7F8A430 		ldr	r3, [r7, #164]
 12537 00ca 5A1C     		adds	r2, r3, #1
 12538 00cc C7F8A420 		str	r2, [r7, #164]
 12539              		.loc 1 6074 6
 12540 00d0 1B78     		ldrb	r3, [r3]
 12541 00d2 87F88330 		strb	r3, [r7, #131]
 12542              	.L732:
6072:./Libraries/FatFs/Src/ff.c **** 			w = w * 10 + c - '0';
 12543              		.loc 1 6072 9
 12544 00d6 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12545 00da 2F2B     		cmp	r3, #47
 12546 00dc 03D9     		bls	.L733
6072:./Libraries/FatFs/Src/ff.c **** 			w = w * 10 + c - '0';
 12547              		.loc 1 6072 10 discriminator 1
 12548 00de 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12549 00e2 392B     		cmp	r3, #57
 12550 00e4 E2D9     		bls	.L734
 12551              	.L733:
6075:./Libraries/FatFs/Src/ff.c **** 		}
6076:./Libraries/FatFs/Src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 12552              		.loc 1 6076 6
 12553 00e6 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12554 00ea 6C2B     		cmp	r3, #108
 12555 00ec 03D0     		beq	.L735
 12556              		.loc 1 6076 16 discriminator 1
 12557 00ee 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12558 00f2 4C2B     		cmp	r3, #76
 12559 00f4 0DD1     		bne	.L736
 12560              	.L735:
6077:./Libraries/FatFs/Src/ff.c **** 			f |= 4; c = *fmt++;
 12561              		.loc 1 6077 6
 12562 00f6 97F89730 		ldrb	r3, [r7, #151]
 12563 00fa 43F00403 		orr	r3, r3, #4
 12564 00fe 87F89730 		strb	r3, [r7, #151]
 12565              		.loc 1 6077 20
 12566 0102 D7F8A430 		ldr	r3, [r7, #164]
 12567 0106 5A1C     		adds	r2, r3, #1
 12568 0108 C7F8A420 		str	r2, [r7, #164]
 12569              		.loc 1 6077 14
 12570 010c 1B78     		ldrb	r3, [r3]
 12571 010e 87F88330 		strb	r3, [r7, #131]
ARM GAS  /tmp/cceCRWeb.s 			page 328


 12572              	.L736:
6078:./Libraries/FatFs/Src/ff.c **** 		}
6079:./Libraries/FatFs/Src/ff.c **** 		if (!c) break;
 12573              		.loc 1 6079 6
 12574 0112 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12575 0116 002B     		cmp	r3, #0
 12576 0118 00F08381 		beq	.L779
6080:./Libraries/FatFs/Src/ff.c **** 		d = c;
 12577              		.loc 1 6080 5
 12578 011c 97F88330 		ldrb	r3, [r7, #131]
 12579 0120 87F88230 		strb	r3, [r7, #130]
6081:./Libraries/FatFs/Src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 12580              		.loc 1 6081 6
 12581 0124 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12582 0128 602B     		cmp	r3, #96
 12583 012a 08D9     		bls	.L738
 12584              		.loc 1 6081 7 discriminator 1
 12585 012c 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12586 0130 7A2B     		cmp	r3, #122
 12587 0132 04D8     		bhi	.L738
 12588              		.loc 1 6081 21 discriminator 2
 12589 0134 97F88230 		ldrb	r3, [r7, #130]
 12590 0138 203B     		subs	r3, r3, #32
 12591 013a 87F88230 		strb	r3, [r7, #130]
 12592              	.L738:
6082:./Libraries/FatFs/Src/ff.c **** 		switch (d) {				/* Type is... */
 12593              		.loc 1 6082 3
 12594 013e 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12595 0142 423B     		subs	r3, r3, #66
 12596 0144 162B     		cmp	r3, #22
 12597 0146 00F29880 		bhi	.L739
 12598 014a 01A2     		adr	r2, .L741
 12599 014c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 12600              		.p2align 2
 12601              	.L741:
 12602 0150 5B020000 		.word	.L746+1
 12603 0154 43020000 		.word	.L745+1
 12604 0158 6B020000 		.word	.L742+1
 12605 015c 7B020000 		.word	.L739+1
 12606 0160 7B020000 		.word	.L739+1
 12607 0164 7B020000 		.word	.L739+1
 12608 0168 7B020000 		.word	.L739+1
 12609 016c 7B020000 		.word	.L739+1
 12610 0170 7B020000 		.word	.L739+1
 12611 0174 7B020000 		.word	.L739+1
 12612 0178 7B020000 		.word	.L739+1
 12613 017c 7B020000 		.word	.L739+1
 12614 0180 7B020000 		.word	.L739+1
 12615 0184 63020000 		.word	.L744+1
 12616 0188 7B020000 		.word	.L739+1
 12617 018c 7B020000 		.word	.L739+1
 12618 0190 7B020000 		.word	.L739+1
 12619 0194 AD010000 		.word	.L743+1
 12620 0198 7B020000 		.word	.L739+1
 12621 019c 6B020000 		.word	.L742+1
 12622 01a0 7B020000 		.word	.L739+1
 12623 01a4 7B020000 		.word	.L739+1
ARM GAS  /tmp/cceCRWeb.s 			page 329


 12624 01a8 73020000 		.word	.L740+1
 12625              		.p2align 1
 12626              	.L743:
6083:./Libraries/FatFs/Src/ff.c **** 		case 'S' :					/* String */
6084:./Libraries/FatFs/Src/ff.c **** 			p = va_arg(arp, TCHAR*);
 12627              		.loc 1 6084 6
 12628 01ac BB6F     		ldr	r3, [r7, #120]
 12629 01ae 1A1D     		adds	r2, r3, #4
 12630 01b0 BA67     		str	r2, [r7, #120]
 12631 01b2 1B68     		ldr	r3, [r3]
 12632 01b4 FB67     		str	r3, [r7, #124]
6085:./Libraries/FatFs/Src/ff.c **** 			for (j = 0; p[j]; j++) ;
 12633              		.loc 1 6085 11
 12634 01b6 0023     		movs	r3, #0
 12635 01b8 C7F88C30 		str	r3, [r7, #140]
 12636              		.loc 1 6085 4
 12637 01bc 04E0     		b	.L747
 12638              	.L748:
 12639              		.loc 1 6085 23 discriminator 3
 12640 01be D7F88C30 		ldr	r3, [r7, #140]
 12641 01c2 0133     		adds	r3, r3, #1
 12642 01c4 C7F88C30 		str	r3, [r7, #140]
 12643              	.L747:
 12644              		.loc 1 6085 17 discriminator 1
 12645 01c8 FA6F     		ldr	r2, [r7, #124]
 12646 01ca D7F88C30 		ldr	r3, [r7, #140]
 12647 01ce 1344     		add	r3, r3, r2
 12648 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12649              		.loc 1 6085 4 discriminator 1
 12650 01d2 002B     		cmp	r3, #0
 12651 01d4 F3D1     		bne	.L748
6086:./Libraries/FatFs/Src/ff.c **** 			if (!(f & 2)) {
 12652              		.loc 1 6086 12
 12653 01d6 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 12654 01da 03F00203 		and	r3, r3, #2
 12655              		.loc 1 6086 7
 12656 01de 002B     		cmp	r3, #0
 12657 01e0 1AD1     		bne	.L752
6087:./Libraries/FatFs/Src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 12658              		.loc 1 6087 11
 12659 01e2 05E0     		b	.L750
 12660              	.L751:
 12661              		.loc 1 6087 21 discriminator 2
 12662 01e4 07F12C03 		add	r3, r7, #44
 12663 01e8 2021     		movs	r1, #32
 12664 01ea 1846     		mov	r0, r3
 12665 01ec FFF7FEFF 		bl	putc_bfd
 12666              	.L750:
 12667              		.loc 1 6087 13 discriminator 1
 12668 01f0 D7F88C30 		ldr	r3, [r7, #140]
 12669 01f4 5A1C     		adds	r2, r3, #1
 12670 01f6 C7F88C20 		str	r2, [r7, #140]
 12671              		.loc 1 6087 11 discriminator 1
 12672 01fa D7F88820 		ldr	r2, [r7, #136]
 12673 01fe 9A42     		cmp	r2, r3
 12674 0200 F0D8     		bhi	.L751
6088:./Libraries/FatFs/Src/ff.c **** 			}
ARM GAS  /tmp/cceCRWeb.s 			page 330


6089:./Libraries/FatFs/Src/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 12675              		.loc 1 6089 10
 12676 0202 09E0     		b	.L752
 12677              	.L753:
 12678              		.loc 1 6089 31 discriminator 2
 12679 0204 FB6F     		ldr	r3, [r7, #124]
 12680 0206 5A1C     		adds	r2, r3, #1
 12681 0208 FA67     		str	r2, [r7, #124]
 12682              		.loc 1 6089 15 discriminator 2
 12683 020a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 12684 020c 07F12C03 		add	r3, r7, #44
 12685 0210 1146     		mov	r1, r2
 12686 0212 1846     		mov	r0, r3
 12687 0214 FFF7FEFF 		bl	putc_bfd
 12688              	.L752:
 12689              		.loc 1 6089 11 discriminator 1
 12690 0218 FB6F     		ldr	r3, [r7, #124]
 12691 021a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12692              		.loc 1 6089 10 discriminator 1
 12693 021c 002B     		cmp	r3, #0
 12694 021e F1D1     		bne	.L753
6090:./Libraries/FatFs/Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 12695              		.loc 1 6090 10
 12696 0220 05E0     		b	.L754
 12697              	.L755:
 12698              		.loc 1 6090 20 discriminator 2
 12699 0222 07F12C03 		add	r3, r7, #44
 12700 0226 2021     		movs	r1, #32
 12701 0228 1846     		mov	r0, r3
 12702 022a FFF7FEFF 		bl	putc_bfd
 12703              	.L754:
 12704              		.loc 1 6090 12 discriminator 1
 12705 022e D7F88C30 		ldr	r3, [r7, #140]
 12706 0232 5A1C     		adds	r2, r3, #1
 12707 0234 C7F88C20 		str	r2, [r7, #140]
 12708              		.loc 1 6090 10 discriminator 1
 12709 0238 D7F88820 		ldr	r2, [r7, #136]
 12710 023c 9A42     		cmp	r2, r3
 12711 023e F0D8     		bhi	.L755
6091:./Libraries/FatFs/Src/ff.c **** 			continue;
 12712              		.loc 1 6091 4
 12713 0240 ECE0     		b	.L729
 12714              	.L745:
6092:./Libraries/FatFs/Src/ff.c **** 
6093:./Libraries/FatFs/Src/ff.c **** 		case 'C' :					/* Character */
6094:./Libraries/FatFs/Src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 12715              		.loc 1 6094 25
 12716 0242 BB6F     		ldr	r3, [r7, #120]
 12717 0244 1A1D     		adds	r2, r3, #4
 12718 0246 BA67     		str	r2, [r7, #120]
 12719 0248 1B68     		ldr	r3, [r3]
 12720              		.loc 1 6094 4
 12721 024a DAB2     		uxtb	r2, r3
 12722 024c 07F12C03 		add	r3, r7, #44
 12723 0250 1146     		mov	r1, r2
 12724 0252 1846     		mov	r0, r3
 12725 0254 FFF7FEFF 		bl	putc_bfd
ARM GAS  /tmp/cceCRWeb.s 			page 331


 12726 0258 E0E0     		b	.L729
 12727              	.L746:
6095:./Libraries/FatFs/Src/ff.c **** 
6096:./Libraries/FatFs/Src/ff.c **** 		case 'B' :					/* Binary */
6097:./Libraries/FatFs/Src/ff.c **** 			r = 2; break;
 12728              		.loc 1 6097 6
 12729 025a 0223     		movs	r3, #2
 12730 025c 87F89630 		strb	r3, [r7, #150]
 12731              		.loc 1 6097 4
 12732 0260 14E0     		b	.L756
 12733              	.L744:
6098:./Libraries/FatFs/Src/ff.c **** 
6099:./Libraries/FatFs/Src/ff.c **** 		case 'O' :					/* Octal */
6100:./Libraries/FatFs/Src/ff.c **** 			r = 8; break;
 12734              		.loc 1 6100 6
 12735 0262 0823     		movs	r3, #8
 12736 0264 87F89630 		strb	r3, [r7, #150]
 12737              		.loc 1 6100 4
 12738 0268 10E0     		b	.L756
 12739              	.L742:
6101:./Libraries/FatFs/Src/ff.c **** 
6102:./Libraries/FatFs/Src/ff.c **** 		case 'D' :					/* Signed decimal */
6103:./Libraries/FatFs/Src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6104:./Libraries/FatFs/Src/ff.c **** 			r = 10; break;
 12740              		.loc 1 6104 6
 12741 026a 0A23     		movs	r3, #10
 12742 026c 87F89630 		strb	r3, [r7, #150]
 12743              		.loc 1 6104 4
 12744 0270 0CE0     		b	.L756
 12745              	.L740:
6105:./Libraries/FatFs/Src/ff.c **** 
6106:./Libraries/FatFs/Src/ff.c **** 		case 'X' :					/* Hexdecimal */
6107:./Libraries/FatFs/Src/ff.c **** 			r = 16; break;
 12746              		.loc 1 6107 6
 12747 0272 1023     		movs	r3, #16
 12748 0274 87F89630 		strb	r3, [r7, #150]
 12749              		.loc 1 6107 4
 12750 0278 08E0     		b	.L756
 12751              	.L739:
6108:./Libraries/FatFs/Src/ff.c **** 
6109:./Libraries/FatFs/Src/ff.c **** 		default:					/* Unknown type (pass-through) */
6110:./Libraries/FatFs/Src/ff.c **** 			putc_bfd(&pb, c); continue;
 12752              		.loc 1 6110 4
 12753 027a 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 12754 027e 07F12C03 		add	r3, r7, #44
 12755 0282 1146     		mov	r1, r2
 12756 0284 1846     		mov	r0, r3
 12757 0286 FFF7FEFF 		bl	putc_bfd
 12758 028a C7E0     		b	.L729
 12759              	.L756:
6111:./Libraries/FatFs/Src/ff.c **** 		}
6112:./Libraries/FatFs/Src/ff.c **** 
6113:./Libraries/FatFs/Src/ff.c **** 		/* Get an argument and put it in numeral */
6114:./Libraries/FatFs/Src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 12760              		.loc 1 6114 10
 12761 028c 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 12762 0290 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/cceCRWeb.s 			page 332


 12763              		.loc 1 6114 42
 12764 0294 002B     		cmp	r3, #0
 12765 0296 04D0     		beq	.L757
 12766              		.loc 1 6114 24
 12767 0298 BB6F     		ldr	r3, [r7, #120]
 12768 029a 1A1D     		adds	r2, r3, #4
 12769 029c BA67     		str	r2, [r7, #120]
 12770 029e 1B68     		ldr	r3, [r3]
 12771 02a0 0CE0     		b	.L758
 12772              	.L757:
 12773              		.loc 1 6114 88 discriminator 2
 12774 02a2 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12775 02a6 442B     		cmp	r3, #68
 12776 02a8 04D1     		bne	.L759
 12777              		.loc 1 6114 71
 12778 02aa BB6F     		ldr	r3, [r7, #120]
 12779 02ac 1A1D     		adds	r2, r3, #4
 12780 02ae BA67     		str	r2, [r7, #120]
 12781 02b0 1B68     		ldr	r3, [r3]
 12782 02b2 03E0     		b	.L758
 12783              	.L759:
 12784              		.loc 1 6114 88
 12785 02b4 BB6F     		ldr	r3, [r7, #120]
 12786 02b6 1A1D     		adds	r2, r3, #4
 12787 02b8 BA67     		str	r2, [r7, #120]
 12788 02ba 1B68     		ldr	r3, [r3]
 12789              	.L758:
 12790              		.loc 1 6114 5 discriminator 8
 12791 02bc C7F88430 		str	r3, [r7, #132]
6115:./Libraries/FatFs/Src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12792              		.loc 1 6115 6 discriminator 8
 12793 02c0 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12794 02c4 442B     		cmp	r3, #68
 12795 02c6 0ED1     		bne	.L761
 12796              		.loc 1 6115 16 discriminator 1
 12797 02c8 D7F88430 		ldr	r3, [r7, #132]
 12798 02cc 002B     		cmp	r3, #0
 12799 02ce 0ADA     		bge	.L761
6116:./Libraries/FatFs/Src/ff.c **** 			v = 0 - v;
 12800              		.loc 1 6116 6
 12801 02d0 D7F88430 		ldr	r3, [r7, #132]
 12802 02d4 5B42     		rsbs	r3, r3, #0
 12803 02d6 C7F88430 		str	r3, [r7, #132]
6117:./Libraries/FatFs/Src/ff.c **** 			f |= 8;
 12804              		.loc 1 6117 6
 12805 02da 97F89730 		ldrb	r3, [r7, #151]
 12806 02de 43F00803 		orr	r3, r3, #8
 12807 02e2 87F89730 		strb	r3, [r7, #151]
 12808              	.L761:
6118:./Libraries/FatFs/Src/ff.c **** 		}
6119:./Libraries/FatFs/Src/ff.c **** 		i = 0;
 12809              		.loc 1 6119 5
 12810 02e6 0023     		movs	r3, #0
 12811 02e8 C7F89030 		str	r3, [r7, #144]
 12812              	.L766:
6120:./Libraries/FatFs/Src/ff.c **** 		do {
6121:./Libraries/FatFs/Src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
ARM GAS  /tmp/cceCRWeb.s 			page 333


 12813              		.loc 1 6121 18
 12814 02ec 97F89620 		ldrb	r2, [r7, #150]	@ zero_extendqisi2
 12815 02f0 D7F88430 		ldr	r3, [r7, #132]
 12816 02f4 B3FBF2F1 		udiv	r1, r3, r2
 12817 02f8 02FB01F2 		mul	r2, r2, r1
 12818 02fc 9B1A     		subs	r3, r3, r2
 12819              		.loc 1 6121 6
 12820 02fe 87F88230 		strb	r3, [r7, #130]
 12821              		.loc 1 6121 26
 12822 0302 97F89630 		ldrb	r3, [r7, #150]	@ zero_extendqisi2
 12823 0306 D7F88420 		ldr	r2, [r7, #132]
 12824 030a B2FBF3F3 		udiv	r3, r2, r3
 12825 030e C7F88430 		str	r3, [r7, #132]
6122:./Libraries/FatFs/Src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 12826              		.loc 1 6122 7
 12827 0312 97F88230 		ldrb	r3, [r7, #130]	@ zero_extendqisi2
 12828 0316 092B     		cmp	r3, #9
 12829 0318 0BD9     		bls	.L762
 12830              		.loc 1 6122 17 discriminator 1
 12831 031a 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 12832 031e 782B     		cmp	r3, #120
 12833 0320 01D1     		bne	.L763
 12834              		.loc 1 6122 17 is_stmt 0 discriminator 2
 12835 0322 2722     		movs	r2, #39
 12836 0324 00E0     		b	.L764
 12837              	.L763:
 12838              		.loc 1 6122 17 discriminator 3
 12839 0326 0722     		movs	r2, #7
 12840              	.L764:
 12841              		.loc 1 6122 17 discriminator 5
 12842 0328 97F88230 		ldrb	r3, [r7, #130]
 12843 032c 1344     		add	r3, r3, r2
 12844 032e 87F88230 		strb	r3, [r7, #130]
 12845              	.L762:
6123:./Libraries/FatFs/Src/ff.c **** 			str[i++] = d + '0';
 12846              		.loc 1 6123 9 is_stmt 1
 12847 0332 D7F89030 		ldr	r3, [r7, #144]
 12848 0336 5A1C     		adds	r2, r3, #1
 12849 0338 C7F89020 		str	r2, [r7, #144]
 12850              		.loc 1 6123 17
 12851 033c 97F88220 		ldrb	r2, [r7, #130]
 12852 0340 3032     		adds	r2, r2, #48
 12853 0342 D2B2     		uxtb	r2, r2
 12854              		.loc 1 6123 13
 12855 0344 07F19801 		add	r1, r7, #152
 12856 0348 0B44     		add	r3, r3, r1
 12857 034a 03F88C2C 		strb	r2, [r3, #-140]
6124:./Libraries/FatFs/Src/ff.c **** 		} while (v && i < sizeof str / sizeof str[0]);
 12858              		.loc 1 6124 3
 12859 034e D7F88430 		ldr	r3, [r7, #132]
 12860 0352 002B     		cmp	r3, #0
 12861 0354 03D0     		beq	.L765
 12862              		.loc 1 6124 14 discriminator 1
 12863 0356 D7F89030 		ldr	r3, [r7, #144]
 12864 035a 1F2B     		cmp	r3, #31
 12865 035c C6D9     		bls	.L766
 12866              	.L765:
ARM GAS  /tmp/cceCRWeb.s 			page 334


6125:./Libraries/FatFs/Src/ff.c **** 		if (f & 8) str[i++] = '-';
 12867              		.loc 1 6125 9
 12868 035e 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 12869 0362 03F00803 		and	r3, r3, #8
 12870              		.loc 1 6125 6
 12871 0366 002B     		cmp	r3, #0
 12872 0368 0AD0     		beq	.L767
 12873              		.loc 1 6125 19 discriminator 1
 12874 036a D7F89030 		ldr	r3, [r7, #144]
 12875 036e 5A1C     		adds	r2, r3, #1
 12876 0370 C7F89020 		str	r2, [r7, #144]
 12877              		.loc 1 6125 23 discriminator 1
 12878 0374 07F19802 		add	r2, r7, #152
 12879 0378 1344     		add	r3, r3, r2
 12880 037a 2D22     		movs	r2, #45
 12881 037c 03F88C2C 		strb	r2, [r3, #-140]
 12882              	.L767:
6126:./Libraries/FatFs/Src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 12883              		.loc 1 6126 5
 12884 0380 D7F89030 		ldr	r3, [r7, #144]
 12885 0384 C7F88C30 		str	r3, [r7, #140]
 12886              		.loc 1 6126 17
 12887 0388 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 12888 038c 03F00103 		and	r3, r3, #1
 12889              		.loc 1 6126 12
 12890 0390 002B     		cmp	r3, #0
 12891 0392 01D0     		beq	.L768
 12892              		.loc 1 6126 12 is_stmt 0 discriminator 1
 12893 0394 3023     		movs	r3, #48
 12894 0396 00E0     		b	.L769
 12895              	.L768:
 12896              		.loc 1 6126 12 discriminator 2
 12897 0398 2023     		movs	r3, #32
 12898              	.L769:
 12899              		.loc 1 6126 12 discriminator 4
 12900 039a 87F88230 		strb	r3, [r7, #130]
6127:./Libraries/FatFs/Src/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 12901              		.loc 1 6127 9 is_stmt 1 discriminator 4
 12902 039e 07E0     		b	.L770
 12903              	.L772:
 12904              		.loc 1 6127 31 discriminator 3
 12905 03a0 97F88220 		ldrb	r2, [r7, #130]	@ zero_extendqisi2
 12906 03a4 07F12C03 		add	r3, r7, #44
 12907 03a8 1146     		mov	r1, r2
 12908 03aa 1846     		mov	r0, r3
 12909 03ac FFF7FEFF 		bl	putc_bfd
 12910              	.L770:
 12911              		.loc 1 6127 14 discriminator 1
 12912 03b0 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 12913 03b4 03F00203 		and	r3, r3, #2
 12914              		.loc 1 6127 9 discriminator 1
 12915 03b8 002B     		cmp	r3, #0
 12916 03ba 08D1     		bne	.L773
 12917              		.loc 1 6127 23 discriminator 2
 12918 03bc D7F88C30 		ldr	r3, [r7, #140]
 12919 03c0 5A1C     		adds	r2, r3, #1
 12920 03c2 C7F88C20 		str	r2, [r7, #140]
ARM GAS  /tmp/cceCRWeb.s 			page 335


 12921              		.loc 1 6127 19 discriminator 2
 12922 03c6 D7F88820 		ldr	r2, [r7, #136]
 12923 03ca 9A42     		cmp	r2, r3
 12924 03cc E8D8     		bhi	.L772
 12925              	.L773:
6128:./Libraries/FatFs/Src/ff.c **** 		do {
6129:./Libraries/FatFs/Src/ff.c **** 			putc_bfd(&pb, str[--i]);
 12926              		.loc 1 6129 4 discriminator 1
 12927 03ce D7F89030 		ldr	r3, [r7, #144]
 12928 03d2 013B     		subs	r3, r3, #1
 12929 03d4 C7F89030 		str	r3, [r7, #144]
 12930 03d8 07F10C02 		add	r2, r7, #12
 12931 03dc D7F89030 		ldr	r3, [r7, #144]
 12932 03e0 1344     		add	r3, r3, r2
 12933 03e2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 12934 03e4 07F12C03 		add	r3, r7, #44
 12935 03e8 1146     		mov	r1, r2
 12936 03ea 1846     		mov	r0, r3
 12937 03ec FFF7FEFF 		bl	putc_bfd
6130:./Libraries/FatFs/Src/ff.c **** 		} while (i);
 12938              		.loc 1 6130 3 discriminator 1
 12939 03f0 D7F89030 		ldr	r3, [r7, #144]
 12940 03f4 002B     		cmp	r3, #0
 12941 03f6 EAD1     		bne	.L773
6131:./Libraries/FatFs/Src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 12942              		.loc 1 6131 9
 12943 03f8 07E0     		b	.L774
 12944              	.L775:
 12945              		.loc 1 6131 19 discriminator 2
 12946 03fa 97F88220 		ldrb	r2, [r7, #130]	@ zero_extendqisi2
 12947 03fe 07F12C03 		add	r3, r7, #44
 12948 0402 1146     		mov	r1, r2
 12949 0404 1846     		mov	r0, r3
 12950 0406 FFF7FEFF 		bl	putc_bfd
 12951              	.L774:
 12952              		.loc 1 6131 11 discriminator 1
 12953 040a D7F88C30 		ldr	r3, [r7, #140]
 12954 040e 5A1C     		adds	r2, r3, #1
 12955 0410 C7F88C20 		str	r2, [r7, #140]
 12956              		.loc 1 6131 9 discriminator 1
 12957 0414 D7F88820 		ldr	r2, [r7, #136]
 12958 0418 9A42     		cmp	r2, r3
 12959 041a EED8     		bhi	.L775
 12960              	.L729:
6057:./Libraries/FatFs/Src/ff.c **** 		if (c == 0) break;			/* End of string */
 12961              		.loc 1 6057 5
 12962 041c FEE5     		b	.L776
 12963              	.L778:
6058:./Libraries/FatFs/Src/ff.c **** 		if (c != '%') {				/* Non escape character */
 12964              		.loc 1 6058 3
 12965 041e 00BF     		nop
 12966 0420 00E0     		b	.L727
 12967              	.L779:
6079:./Libraries/FatFs/Src/ff.c **** 		d = c;
 12968              		.loc 1 6079 3
 12969 0422 00BF     		nop
 12970              	.L727:
ARM GAS  /tmp/cceCRWeb.s 			page 336


6132:./Libraries/FatFs/Src/ff.c **** 	}
6133:./Libraries/FatFs/Src/ff.c **** 
6134:./Libraries/FatFs/Src/ff.c **** 	va_end(arp);
6135:./Libraries/FatFs/Src/ff.c **** 
6136:./Libraries/FatFs/Src/ff.c **** 	return putc_flush(&pb);
 12971              		.loc 1 6136 9
 12972 0424 07F12C03 		add	r3, r7, #44
 12973 0428 1846     		mov	r0, r3
 12974 042a FFF7FEFF 		bl	putc_flush
 12975 042e 0346     		mov	r3, r0
6137:./Libraries/FatFs/Src/ff.c **** }
 12976              		.loc 1 6137 1
 12977 0430 1846     		mov	r0, r3
 12978 0432 9C37     		adds	r7, r7, #156
 12979              	.LCFI336:
 12980              		.cfi_def_cfa_offset 20
 12981 0434 BD46     		mov	sp, r7
 12982              	.LCFI337:
 12983              		.cfi_def_cfa_register 13
 12984              		@ sp needed
 12985 0436 BDE88040 		pop	{r7, lr}
 12986              	.LCFI338:
 12987              		.cfi_restore 14
 12988              		.cfi_restore 7
 12989              		.cfi_def_cfa_offset 12
 12990 043a 03B0     		add	sp, sp, #12
 12991              	.LCFI339:
 12992              		.cfi_restore 3
 12993              		.cfi_restore 2
 12994              		.cfi_restore 1
 12995              		.cfi_def_cfa_offset 0
 12996 043c 7047     		bx	lr
 12997              		.cfi_endproc
 12998              	.LFE398:
 13000 043e 00BF     		.section	.rodata.cst32.15639,"a"
 13001              		.align	2
 13004              	cst32.15639:
 13005 0000 0100     		.short	1
 13006 0002 0200     		.short	2
 13007 0004 0400     		.short	4
 13008 0006 0800     		.short	8
 13009 0008 1000     		.short	16
 13010 000a 2000     		.short	32
 13011 000c 0000     		.short	0
 13012              		.section	.rodata.cst.15638,"a"
 13013              		.align	2
 13016              	cst.15638:
 13017 0000 0100     		.short	1
 13018 0002 0400     		.short	4
 13019 0004 1000     		.short	16
 13020 0006 4000     		.short	64
 13021 0008 0001     		.short	256
 13022 000a 0002     		.short	512
 13023 000c 0000     		.short	0
 13024              		.text
 13025              	.Letext0:
 13026              		.file 2 "./Libraries/FatFs/Inc/integer.h"
ARM GAS  /tmp/cceCRWeb.s 			page 337


 13027              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 13028              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 13029              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 13030              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 13031              		.file 7 "/usr/include/newlib/sys/_types.h"
 13032              		.file 8 "/usr/include/newlib/sys/reent.h"
 13033              		.file 9 "/usr/include/newlib/sys/lock.h"
 13034              		.file 10 "/usr/include/newlib/math.h"
 13035              		.file 11 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 13036              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 13037              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 13038              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 13039              		.file 15 "./Libraries/FreeRTOS/Source/CMSIS_RTOS/cmsis_os2.h"
 13040              		.file 16 "./Libraries/FatFs/Inc/ff.h"
 13041              		.file 17 "./Libraries/FatFs/Inc/diskio.h"
 13042              		.file 18 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h"
 13043              		.file 19 "<built-in>"
ARM GAS  /tmp/cceCRWeb.s 			page 338


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/cceCRWeb.s:17     .bss.FatFs:0000000000000000 $d
     /tmp/cceCRWeb.s:20     .bss.FatFs:0000000000000000 FatFs
     /tmp/cceCRWeb.s:23     .bss.Fsid:0000000000000000 $d
     /tmp/cceCRWeb.s:26     .bss.Fsid:0000000000000000 Fsid
     /tmp/cceCRWeb.s:29     .bss.Files:0000000000000000 $d
     /tmp/cceCRWeb.s:32     .bss.Files:0000000000000000 Files
     /tmp/cceCRWeb.s:35     .rodata.ExCvt:0000000000000000 $d
     /tmp/cceCRWeb.s:38     .rodata.ExCvt:0000000000000000 ExCvt
     /tmp/cceCRWeb.s:47     .text.ld_word:0000000000000000 $t
     /tmp/cceCRWeb.s:54     .text.ld_word:0000000000000000 ld_word
     /tmp/cceCRWeb.s:113    .text.ld_dword:0000000000000000 $t
     /tmp/cceCRWeb.s:119    .text.ld_dword:0000000000000000 ld_dword
     /tmp/cceCRWeb.s:192    .text.st_word:0000000000000000 $t
     /tmp/cceCRWeb.s:198    .text.st_word:0000000000000000 st_word
     /tmp/cceCRWeb.s:258    .text.st_dword:0000000000000000 $t
     /tmp/cceCRWeb.s:264    .text.st_dword:0000000000000000 st_dword
     /tmp/cceCRWeb.s:349    .text.mem_cpy:0000000000000000 $t
     /tmp/cceCRWeb.s:355    .text.mem_cpy:0000000000000000 mem_cpy
     /tmp/cceCRWeb.s:424    .text.mem_set:0000000000000000 $t
     /tmp/cceCRWeb.s:430    .text.mem_set:0000000000000000 mem_set
     /tmp/cceCRWeb.s:489    .text.mem_cmp:0000000000000000 $t
     /tmp/cceCRWeb.s:495    .text.mem_cmp:0000000000000000 mem_cmp
     /tmp/cceCRWeb.s:573    .text.chk_chr:0000000000000000 $t
     /tmp/cceCRWeb.s:579    .text.chk_chr:0000000000000000 chk_chr
     /tmp/cceCRWeb.s:642    .text.lock_fs:0000000000000000 $t
     /tmp/cceCRWeb.s:648    .text.lock_fs:0000000000000000 lock_fs
     /tmp/cceCRWeb.s:700    .text.unlock_fs:0000000000000000 $t
     /tmp/cceCRWeb.s:706    .text.unlock_fs:0000000000000000 unlock_fs
     /tmp/cceCRWeb.s:762    .text.chk_lock:0000000000000000 $t
     /tmp/cceCRWeb.s:768    .text.chk_lock:0000000000000000 chk_lock
     /tmp/cceCRWeb.s:920    .text.chk_lock:00000000000000b4 $d
     /tmp/cceCRWeb.s:925    .text.enq_lock:0000000000000000 $t
     /tmp/cceCRWeb.s:931    .text.enq_lock:0000000000000000 enq_lock
     /tmp/cceCRWeb.s:997    .text.enq_lock:0000000000000040 $d
     /tmp/cceCRWeb.s:1002   .text.inc_lock:0000000000000000 $t
     /tmp/cceCRWeb.s:1008   .text.inc_lock:0000000000000000 inc_lock
     /tmp/cceCRWeb.s:1226   .text.inc_lock:0000000000000118 $d
     /tmp/cceCRWeb.s:1231   .text.dec_lock:0000000000000000 $t
     /tmp/cceCRWeb.s:1237   .text.dec_lock:0000000000000000 dec_lock
     /tmp/cceCRWeb.s:1335   .text.dec_lock:0000000000000074 $d
     /tmp/cceCRWeb.s:1340   .text.clear_lock:0000000000000000 $t
     /tmp/cceCRWeb.s:1346   .text.clear_lock:0000000000000000 clear_lock
     /tmp/cceCRWeb.s:1415   .text.clear_lock:0000000000000044 $d
     /tmp/cceCRWeb.s:1420   .text.sync_window:0000000000000000 $t
     /tmp/cceCRWeb.s:1426   .text.sync_window:0000000000000000 sync_window
     /tmp/cceCRWeb.s:1543   .text.move_window:0000000000000000 $t
     /tmp/cceCRWeb.s:1549   .text.move_window:0000000000000000 move_window
     /tmp/cceCRWeb.s:1629   .text.sync_fs:0000000000000000 $t
     /tmp/cceCRWeb.s:1635   .text.sync_fs:0000000000000000 sync_fs
     /tmp/cceCRWeb.s:1779   .text.sync_fs:00000000000000d4 $d
     /tmp/cceCRWeb.s:1785   .text.clust2sect:0000000000000000 $t
     /tmp/cceCRWeb.s:1791   .text.clust2sect:0000000000000000 clust2sect
     /tmp/cceCRWeb.s:1858   .text.get_fat:0000000000000000 $t
     /tmp/cceCRWeb.s:1864   .text.get_fat:0000000000000000 get_fat
     /tmp/cceCRWeb.s:2110   .text.put_fat:0000000000000000 $t
ARM GAS  /tmp/cceCRWeb.s 			page 339


     /tmp/cceCRWeb.s:2116   .text.put_fat:0000000000000000 put_fat
     /tmp/cceCRWeb.s:2442   .text.remove_chain:0000000000000000 $t
     /tmp/cceCRWeb.s:2448   .text.remove_chain:0000000000000000 remove_chain
     /tmp/cceCRWeb.s:2608   .text.create_chain:0000000000000000 $t
     /tmp/cceCRWeb.s:2614   .text.create_chain:0000000000000000 create_chain
     /tmp/cceCRWeb.s:2848   .text.clmt_clust:0000000000000000 $t
     /tmp/cceCRWeb.s:2854   .text.clmt_clust:0000000000000000 clmt_clust
     /tmp/cceCRWeb.s:2952   .text.dir_sdi:0000000000000000 $t
     /tmp/cceCRWeb.s:2958   .text.dir_sdi:0000000000000000 dir_sdi
     /tmp/cceCRWeb.s:3155   .text.dir_next:0000000000000000 $t
     /tmp/cceCRWeb.s:3161   .text.dir_next:0000000000000000 dir_next
     /tmp/cceCRWeb.s:3450   .text.dir_alloc:0000000000000000 $t
     /tmp/cceCRWeb.s:3456   .text.dir_alloc:0000000000000000 dir_alloc
     /tmp/cceCRWeb.s:3576   .text.ld_clust:0000000000000000 $t
     /tmp/cceCRWeb.s:3582   .text.ld_clust:0000000000000000 ld_clust
     /tmp/cceCRWeb.s:3644   .text.st_clust:0000000000000000 $t
     /tmp/cceCRWeb.s:3650   .text.st_clust:0000000000000000 st_clust
     /tmp/cceCRWeb.s:3710   .text.dir_read:0000000000000000 $t
     /tmp/cceCRWeb.s:3716   .text.dir_read:0000000000000000 dir_read
     /tmp/cceCRWeb.s:3868   .text.dir_find:0000000000000000 $t
     /tmp/cceCRWeb.s:3874   .text.dir_find:0000000000000000 dir_find
     /tmp/cceCRWeb.s:4012   .text.dir_register:0000000000000000 $t
     /tmp/cceCRWeb.s:4018   .text.dir_register:0000000000000000 dir_register
     /tmp/cceCRWeb.s:4101   .text.dir_remove:0000000000000000 $t
     /tmp/cceCRWeb.s:4107   .text.dir_remove:0000000000000000 dir_remove
     /tmp/cceCRWeb.s:4168   .text.get_fileinfo:0000000000000000 $t
     /tmp/cceCRWeb.s:4174   .text.get_fileinfo:0000000000000000 get_fileinfo
     /tmp/cceCRWeb.s:4334   .rodata:0000000000000000 $d
     /tmp/cceCRWeb.s:4338   .text.create_name:0000000000000000 $t
     /tmp/cceCRWeb.s:4344   .text.create_name:0000000000000000 create_name
     /tmp/cceCRWeb.s:4581   .text.create_name:0000000000000120 $d
     /tmp/cceCRWeb.s:4587   .text.follow_path:0000000000000000 $t
     /tmp/cceCRWeb.s:4593   .text.follow_path:0000000000000000 follow_path
     /tmp/cceCRWeb.s:4768   .text.get_ldnumber:0000000000000000 $t
     /tmp/cceCRWeb.s:4774   .text.get_ldnumber:0000000000000000 get_ldnumber
     /tmp/cceCRWeb.s:4899   .text.check_fs:0000000000000000 $t
     /tmp/cceCRWeb.s:4905   .text.check_fs:0000000000000000 check_fs
     /tmp/cceCRWeb.s:5030   .text.check_fs:00000000000000a4 $d
     /tmp/cceCRWeb.s:5036   .text.find_volume:0000000000000000 $t
     /tmp/cceCRWeb.s:5042   .text.find_volume:0000000000000000 find_volume
     /tmp/cceCRWeb.s:5526   .text.find_volume:00000000000002d8 $d
     /tmp/cceCRWeb.s:5529   .text.find_volume:00000000000002dc $t
     /tmp/cceCRWeb.s:5823   .text.find_volume:000000000000049c $d
     /tmp/cceCRWeb.s:5830   .text.validate:0000000000000000 $t
     /tmp/cceCRWeb.s:5836   .text.validate:0000000000000000 validate
     /tmp/cceCRWeb.s:5957   .text.f_mount:0000000000000000 $t
     /tmp/cceCRWeb.s:5964   .text.f_mount:0000000000000000 f_mount
     /tmp/cceCRWeb.s:6107   .text.f_mount:00000000000000c4 $d
     /tmp/cceCRWeb.s:6112   .text.f_open:0000000000000000 $t
     /tmp/cceCRWeb.s:6119   .text.f_open:0000000000000000 f_open
     /tmp/cceCRWeb.s:6681   .text.f_read:0000000000000000 $t
     /tmp/cceCRWeb.s:6688   .text.f_read:0000000000000000 f_read
     /tmp/cceCRWeb.s:7163   .text.f_write:0000000000000000 $t
     /tmp/cceCRWeb.s:7170   .text.f_write:0000000000000000 f_write
     /tmp/cceCRWeb.s:7710   .text.f_sync:0000000000000000 $t
     /tmp/cceCRWeb.s:7717   .text.f_sync:0000000000000000 f_sync
     /tmp/cceCRWeb.s:7895   .text.f_close:0000000000000000 $t
ARM GAS  /tmp/cceCRWeb.s 			page 340


     /tmp/cceCRWeb.s:7902   .text.f_close:0000000000000000 f_close
     /tmp/cceCRWeb.s:7979   .text.f_lseek:0000000000000000 $t
     /tmp/cceCRWeb.s:7986   .text.f_lseek:0000000000000000 f_lseek
     /tmp/cceCRWeb.s:8751   .text.f_opendir:0000000000000000 $t
     /tmp/cceCRWeb.s:8758   .text.f_opendir:0000000000000000 f_opendir
     /tmp/cceCRWeb.s:8939   .text.f_closedir:0000000000000000 $t
     /tmp/cceCRWeb.s:8946   .text.f_closedir:0000000000000000 f_closedir
     /tmp/cceCRWeb.s:9021   .text.f_readdir:0000000000000000 $t
     /tmp/cceCRWeb.s:9028   .text.f_readdir:0000000000000000 f_readdir
     /tmp/cceCRWeb.s:9128   .text.f_stat:0000000000000000 $t
     /tmp/cceCRWeb.s:9135   .text.f_stat:0000000000000000 f_stat
     /tmp/cceCRWeb.s:9221   .text.f_getfree:0000000000000000 $t
     /tmp/cceCRWeb.s:9228   .text.f_getfree:0000000000000000 f_getfree
     /tmp/cceCRWeb.s:9491   .text.f_truncate:0000000000000000 $t
     /tmp/cceCRWeb.s:9498   .text.f_truncate:0000000000000000 f_truncate
     /tmp/cceCRWeb.s:9731   .text.f_unlink:0000000000000000 $t
     /tmp/cceCRWeb.s:9738   .text.f_unlink:0000000000000000 f_unlink
     /tmp/cceCRWeb.s:9940   .text.f_mkdir:0000000000000000 $t
     /tmp/cceCRWeb.s:9947   .text.f_mkdir:0000000000000000 f_mkdir
     /tmp/cceCRWeb.s:10273  .text.f_rename:0000000000000000 $t
     /tmp/cceCRWeb.s:10280  .text.f_rename:0000000000000000 f_rename
     /tmp/cceCRWeb.s:10574  .text.f_mkfs:0000000000000000 $t
     /tmp/cceCRWeb.s:10581  .text.f_mkfs:0000000000000000 f_mkfs
     /tmp/cceCRWeb.s:11021  .text.f_mkfs:0000000000000284 $d
     /tmp/cceCRWeb.s:13004  .rodata.cst32.15639:0000000000000000 cst32.15639
     /tmp/cceCRWeb.s:13016  .rodata.cst.15638:0000000000000000 cst.15638
     /tmp/cceCRWeb.s:11027  .text.f_mkfs:0000000000000294 $t
     /tmp/cceCRWeb.s:11716  .text.f_mkfs:0000000000000710 $d
     /tmp/cceCRWeb.s:11724  .text.f_mkfs:0000000000000728 $t
     /tmp/cceCRWeb.s:11916  .text.f_mkfs:0000000000000854 $d
     /tmp/cceCRWeb.s:11921  .text.f_gets:0000000000000000 $t
     /tmp/cceCRWeb.s:11928  .text.f_gets:0000000000000000 f_gets
     /tmp/cceCRWeb.s:12039  .text.putc_bfd:0000000000000000 $t
     /tmp/cceCRWeb.s:12045  .text.putc_bfd:0000000000000000 putc_bfd
     /tmp/cceCRWeb.s:12151  .text.putc_flush:0000000000000000 $t
     /tmp/cceCRWeb.s:12157  .text.putc_flush:0000000000000000 putc_flush
     /tmp/cceCRWeb.s:12228  .text.putc_init:0000000000000000 $t
     /tmp/cceCRWeb.s:12234  .text.putc_init:0000000000000000 putc_init
     /tmp/cceCRWeb.s:12285  .text.f_putc:0000000000000000 $t
     /tmp/cceCRWeb.s:12292  .text.f_putc:0000000000000000 f_putc
     /tmp/cceCRWeb.s:12342  .text.f_puts:0000000000000000 $t
     /tmp/cceCRWeb.s:12349  .text.f_puts:0000000000000000 f_puts
     /tmp/cceCRWeb.s:12412  .text.f_printf:0000000000000000 $t
     /tmp/cceCRWeb.s:12419  .text.f_printf:0000000000000000 f_printf
     /tmp/cceCRWeb.s:12602  .text.f_printf:0000000000000150 $d
     /tmp/cceCRWeb.s:12625  .text.f_printf:00000000000001ac $t
     /tmp/cceCRWeb.s:13001  .rodata.cst32.15639:0000000000000000 $d
     /tmp/cceCRWeb.s:13013  .rodata.cst.15638:0000000000000000 $d

UNDEFINED SYMBOLS
ff_req_grant
ff_rel_grant
disk_write
disk_read
disk_ioctl
disk_status
disk_initialize
ARM GAS  /tmp/cceCRWeb.s 			page 341


ff_del_syncobj
ff_cre_syncobj
get_fattime
