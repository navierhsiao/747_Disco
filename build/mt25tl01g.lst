ARM GAS  /tmp/ccF4jbqJ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"mt25tl01g.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	qspi_object,140,4
  17              		.global	qspi_attr
  18              		.section	.data.qspi_attr,"aw"
  19              		.align	2
  22              	qspi_attr:
  23 0000 00500052 		.word	1375752192
  24 0004 03000000 		.word	3
  25 0008 01000000 		.word	1
  26 000c 00000000 		.word	0
  27 0010 00000000 		.word	0
  28 0014 00030000 		.word	768
  29 0018 00000000 		.word	0
  30 001c 00000000 		.word	0
  31 0020 40000000 		.word	64
  32 0024 03000000 		.word	3
  33              		.section	.text.mt25tl01g_Init,"ax",%progbits
  34              		.align	1
  35              		.global	mt25tl01g_Init
  36              		.arch armv7e-m
  37              		.syntax unified
  38              		.thumb
  39              		.thumb_func
  40              		.fpu fpv5-d16
  42              	mt25tl01g_Init:
  43              	.LFB338:
  44              		.file 1 "./BSP/Components/Src/mt25tl01g.c"
   1:./BSP/Components/Src/mt25tl01g.c **** #include "../../system.h"
   2:./BSP/Components/Src/mt25tl01g.c **** 
   3:./BSP/Components/Src/mt25tl01g.c **** QSPI_objectTypeDef qspi_object;
   4:./BSP/Components/Src/mt25tl01g.c **** 
   5:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object);
   6:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object);
   7:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedMode(QSPI_objectTypeDef *object);
   8:./BSP/Components/Src/mt25tl01g.c **** 
   9:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t Mode);
  10:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode);
  11:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode);
  12:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object);
  13:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode);
  14:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object);
  15:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object);
  16:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeSTR(QSPI_objectTypeDef *object,uint8_t mode);
ARM GAS  /tmp/ccF4jbqJ.s 			page 2


  17:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeDTR(QSPI_objectTypeDef *object,uint8_t mode);
  18:./BSP/Components/Src/mt25tl01g.c **** 
  19:./BSP/Components/Src/mt25tl01g.c **** QSPI_objectAttr qspi_attr={
  20:./BSP/Components/Src/mt25tl01g.c ****     .Instance               = QUADSPI,
  21:./BSP/Components/Src/mt25tl01g.c ****     //STR:1，DTR：3
  22:./BSP/Components/Src/mt25tl01g.c ****     .ClockPrescaler         = QSPI_DTR_TRANSFER,
  23:./BSP/Components/Src/mt25tl01g.c ****     .FifoThreshold          = 1,
  24:./BSP/Components/Src/mt25tl01g.c ****     //若為STR使用:QSPI_SAMPLE_SHIFTING_HALFCYCLE
  25:./BSP/Components/Src/mt25tl01g.c ****     .SampleShifting         = QSPI_SAMPLE_SHIFTING_NONE,
  26:./BSP/Components/Src/mt25tl01g.c ****     .FlashSize              = 0,
  27:./BSP/Components/Src/mt25tl01g.c ****     .ChipSelectHighTime     = QSPI_CS_HIGH_TIME_4_CYCLE, /* Min 50ns for nonRead */
  28:./BSP/Components/Src/mt25tl01g.c ****     .ClockMode              = QSPI_CLOCK_MODE_0,
  29:./BSP/Components/Src/mt25tl01g.c ****     .FlashID                = QSPI_FLASH_ID_1,
  30:./BSP/Components/Src/mt25tl01g.c ****     .DualFlash              = QSPI_DUALFLASH_ENABLE,
  31:./BSP/Components/Src/mt25tl01g.c ****     .transferRate           = QSPI_DTR_TRANSFER
  32:./BSP/Components/Src/mt25tl01g.c **** };
  33:./BSP/Components/Src/mt25tl01g.c **** 
  34:./BSP/Components/Src/mt25tl01g.c **** void mt25tl01g_Init(void)
  35:./BSP/Components/Src/mt25tl01g.c **** {
  45              		.loc 1 35 1
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 16
  48              		@ frame_needed = 1, uses_anonymous_args = 0
  49 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 20
  52              		.cfi_offset 4, -20
  53              		.cfi_offset 5, -16
  54              		.cfi_offset 6, -12
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 8DB0     		sub	sp, sp, #52
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 72
  60 0004 08AF     		add	r7, sp, #32
  61              	.LCFI2:
  62              		.cfi_def_cfa 7, 40
  63 0006 4FF00063 		mov	r3, #134217728
  64 000a 7B60     		str	r3, [r7, #4]
  65              	.LBB6:
  66              	.LBB7:
  67              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccF4jbqJ.s 			page 3


  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccF4jbqJ.s 			page 4


  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccF4jbqJ.s 			page 5


 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/ccF4jbqJ.s 			page 6


 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccF4jbqJ.s 			page 7


 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
ARM GAS  /tmp/ccF4jbqJ.s 			page 8


 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccF4jbqJ.s 			page 9


 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccF4jbqJ.s 			page 10


 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccF4jbqJ.s 			page 11


 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
ARM GAS  /tmp/ccF4jbqJ.s 			page 12


 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
ARM GAS  /tmp/ccF4jbqJ.s 			page 13


 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /tmp/ccF4jbqJ.s 			page 14


 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccF4jbqJ.s 			page 15


 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccF4jbqJ.s 			page 16


 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
ARM GAS  /tmp/ccF4jbqJ.s 			page 17


 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccF4jbqJ.s 			page 18


 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccF4jbqJ.s 			page 19


 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccF4jbqJ.s 			page 20


 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccF4jbqJ.s 			page 21


1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  68              		.loc 2 1055 4
  69 000c 7B68     		ldr	r3, [r7, #4]
  70              		.syntax unified
  71              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
  72 000e 93FAA3F3 		rbit r3, r3
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76 0012 3B60     		str	r3, [r7]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
  77              		.loc 2 1068 10
  78 0014 3B68     		ldr	r3, [r7]
  79 0016 BB60     		str	r3, [r7, #8]
  80              	.LBE7:
  81              	.LBE6:
  82              	.LBB8:
  83              	.LBB9:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
ARM GAS  /tmp/ccF4jbqJ.s 			page 22


1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
  84              		.loc 2 1089 6
  85 0018 BB68     		ldr	r3, [r7, #8]
  86 001a 002B     		cmp	r3, #0
  87 001c 01D1     		bne	.L3
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
  88              		.loc 2 1091 12
  89 001e 2023     		movs	r3, #32
  90 0020 03E0     		b	.L4
  91              	.L3:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
  92              		.loc 2 1093 10
  93 0022 BB68     		ldr	r3, [r7, #8]
  94 0024 B3FA83F3 		clz	r3, r3
  95 0028 DBB2     		uxtb	r3, r3
  96              	.L4:
  97              	.LBE9:
  98              	.LBE8:
  36:./BSP/Components/Src/mt25tl01g.c ****     const uint32_t size=(uint32_t)POSITION_VAL((uint32_t)MT25TL01G_FLASH_SIZE) - 1U;
  99              		.loc 1 36 20
 100 002a 013B     		subs	r3, r3, #1
 101 002c FB60     		str	r3, [r7, #12]
  37:./BSP/Components/Src/mt25tl01g.c ****     qspi_attr.FlashSize=size;
 102              		.loc 1 37 24
 103 002e 184A     		ldr	r2, .L5
 104 0030 FB68     		ldr	r3, [r7, #12]
 105 0032 1361     		str	r3, [r2, #16]
  38:./BSP/Components/Src/mt25tl01g.c **** 
  39:./BSP/Components/Src/mt25tl01g.c ****     QSPI_object_Init(&qspi_object,qspi_attr);
 106              		.loc 1 39 5
 107 0034 164E     		ldr	r6, .L5
 108 0036 6D46     		mov	r5, sp
 109 0038 06F10C04 		add	r4, r6, #12
 110 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 111 003e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 112 0040 94E80700 		ldm	r4, {r0, r1, r2}
 113 0044 85E80700 		stm	r5, {r0, r1, r2}
 114 0048 96E80E00 		ldm	r6, {r1, r2, r3}
 115 004c 1148     		ldr	r0, .L5+4
 116 004e FFF7FEFF 		bl	QSPI_object_Init
  40:./BSP/Components/Src/mt25tl01g.c ****     qspi_object.qspi_init(&qspi_object);
 117              		.loc 1 40 16
 118 0052 104B     		ldr	r3, .L5+4
 119 0054 5B6F     		ldr	r3, [r3, #116]
 120              		.loc 1 40 5
 121 0056 0F48     		ldr	r0, .L5+4
 122 0058 9847     		blx	r3
 123              	.LVL0:
  41:./BSP/Components/Src/mt25tl01g.c **** 
ARM GAS  /tmp/ccF4jbqJ.s 			page 23


  42:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemory(&qspi_object);
 124              		.loc 1 42 5
 125 005a 0E48     		ldr	r0, .L5+4
 126 005c FFF7FEFF 		bl	MT25TL01G_ResetMemory
  43:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(&qspi_object);
 127              		.loc 1 43 5
 128 0060 0C48     		ldr	r0, .L5+4
 129 0062 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  44:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_Enter4BytesAddressMode(&qspi_object,0);
 130              		.loc 1 44 5
 131 0066 0021     		movs	r1, #0
 132 0068 0A48     		ldr	r0, .L5+4
 133 006a FFF7FEFF 		bl	MT25TL01G_Enter4BytesAddressMode
  45:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_DummyCyclesCfg(&qspi_object);
 134              		.loc 1 45 5
 135 006e 0948     		ldr	r0, .L5+4
 136 0070 FFF7FEFF 		bl	MT25TL01G_DummyCyclesCfg
  46:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ExitQPIMode(&qspi_object);
 137              		.loc 1 46 5
 138 0074 0748     		ldr	r0, .L5+4
 139 0076 FFF7FEFF 		bl	MT25TL01G_ExitQPIMode
  47:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_EnterQPIMode(&qspi_object);
 140              		.loc 1 47 5
 141 007a 0648     		ldr	r0, .L5+4
 142 007c FFF7FEFF 		bl	MT25TL01G_EnterQPIMode
  48:./BSP/Components/Src/mt25tl01g.c **** 
  49:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_EnableMemoryMappedMode(&qspi_object);
 143              		.loc 1 49 5
 144 0080 0448     		ldr	r0, .L5+4
 145 0082 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedMode
  50:./BSP/Components/Src/mt25tl01g.c **** }
 146              		.loc 1 50 1
 147 0086 00BF     		nop
 148 0088 1437     		adds	r7, r7, #20
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 20
 151 008a BD46     		mov	sp, r7
 152              	.LCFI4:
 153              		.cfi_def_cfa_register 13
 154              		@ sp needed
 155 008c F0BD     		pop	{r4, r5, r6, r7, pc}
 156              	.L6:
 157 008e 00BF     		.align	2
 158              	.L5:
 159 0090 00000000 		.word	qspi_attr
 160 0094 00000000 		.word	qspi_object
 161              		.cfi_endproc
 162              	.LFE338:
 164              		.section	.text.MT25TL01G_ResetMemory,"ax",%progbits
 165              		.align	1
 166              		.global	MT25TL01G_ResetMemory
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu fpv5-d16
 172              	MT25TL01G_ResetMemory:
 173              	.LFB339:
ARM GAS  /tmp/ccF4jbqJ.s 			page 24


  51:./BSP/Components/Src/mt25tl01g.c **** 
  52:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object)
  53:./BSP/Components/Src/mt25tl01g.c **** {
 174              		.loc 1 53 1
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 8
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 80B5     		push	{r7, lr}
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 82B0     		sub	sp, sp, #8
 184              	.LCFI6:
 185              		.cfi_def_cfa_offset 16
 186 0004 00AF     		add	r7, sp, #0
 187              	.LCFI7:
 188              		.cfi_def_cfa_register 7
 189 0006 7860     		str	r0, [r7, #4]
  54:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,0);
 190              		.loc 1 54 5
 191 0008 0021     		movs	r1, #0
 192 000a 7868     		ldr	r0, [r7, #4]
 193 000c FFF7FEFF 		bl	MT25TL01G_ResetEnable
  55:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,0);
 194              		.loc 1 55 5
 195 0010 0021     		movs	r1, #0
 196 0012 7868     		ldr	r0, [r7, #4]
 197 0014 FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  56:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 198              		.loc 1 56 5
 199 0018 7868     		ldr	r0, [r7, #4]
 200 001a FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  57:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,1);
 201              		.loc 1 57 5
 202 001e 0121     		movs	r1, #1
 203 0020 7868     		ldr	r0, [r7, #4]
 204 0022 FFF7FEFF 		bl	MT25TL01G_ResetEnable
  58:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,1);
 205              		.loc 1 58 5
 206 0026 0121     		movs	r1, #1
 207 0028 7868     		ldr	r0, [r7, #4]
 208 002a FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  59:./BSP/Components/Src/mt25tl01g.c **** }
 209              		.loc 1 59 1
 210 002e 00BF     		nop
 211 0030 0837     		adds	r7, r7, #8
 212              	.LCFI8:
 213              		.cfi_def_cfa_offset 8
 214 0032 BD46     		mov	sp, r7
 215              	.LCFI9:
 216              		.cfi_def_cfa_register 13
 217              		@ sp needed
 218 0034 80BD     		pop	{r7, pc}
 219              		.cfi_endproc
 220              	.LFE339:
 222              		.section	.text.MT25TL01G_DummyCyclesCfg,"ax",%progbits
ARM GAS  /tmp/ccF4jbqJ.s 			page 25


 223              		.align	1
 224              		.global	MT25TL01G_DummyCyclesCfg
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu fpv5-d16
 230              	MT25TL01G_DummyCyclesCfg:
 231              	.LFB340:
  60:./BSP/Components/Src/mt25tl01g.c **** 
  61:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object)
  62:./BSP/Components/Src/mt25tl01g.c **** {
 232              		.loc 1 62 1
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 72
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              	.LCFI10:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 92B0     		sub	sp, sp, #72
 242              	.LCFI11:
 243              		.cfi_def_cfa_offset 80
 244 0004 00AF     		add	r7, sp, #0
 245              	.LCFI12:
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
  63:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
  64:./BSP/Components/Src/mt25tl01g.c ****     uint16_t reg=0;
 248              		.loc 1 64 14
 249 0008 0023     		movs	r3, #0
 250 000a FB81     		strh	r3, [r7, #14]	@ movhi
  65:./BSP/Components/Src/mt25tl01g.c **** 
  66:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the read volatile configuration register command */
  67:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 251              		.loc 1 67 31
 252 000c 4FF44073 		mov	r3, #768
 253 0010 BB62     		str	r3, [r7, #40]
  68:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 254              		.loc 1 68 31
 255 0012 8523     		movs	r3, #133
 256 0014 3B61     		str	r3, [r7, #16]
  69:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 257              		.loc 1 69 31
 258 0016 0023     		movs	r3, #0
 259 0018 FB62     		str	r3, [r7, #44]
  70:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 260              		.loc 1 70 31
 261 001a 0023     		movs	r3, #0
 262 001c 3B63     		str	r3, [r7, #48]
  71:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 263              		.loc 1 71 31
 264 001e 4FF04073 		mov	r3, #50331648
 265 0022 7B63     		str	r3, [r7, #52]
  72:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 266              		.loc 1 72 31
 267 0024 0023     		movs	r3, #0
ARM GAS  /tmp/ccF4jbqJ.s 			page 26


 268 0026 7B62     		str	r3, [r7, #36]
  73:./BSP/Components/Src/mt25tl01g.c ****     command.NbData            = 2;
 269              		.loc 1 73 31
 270 0028 0223     		movs	r3, #2
 271 002a BB63     		str	r3, [r7, #56]
  74:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 272              		.loc 1 74 31
 273 002c 0023     		movs	r3, #0
 274 002e FB63     		str	r3, [r7, #60]
  75:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 275              		.loc 1 75 31
 276 0030 0023     		movs	r3, #0
 277 0032 3B64     		str	r3, [r7, #64]
  76:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 278              		.loc 1 76 31
 279 0034 0023     		movs	r3, #0
 280 0036 7B64     		str	r3, [r7, #68]
  77:./BSP/Components/Src/mt25tl01g.c **** 
  78:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 281              		.loc 1 78 11
 282 0038 7B68     		ldr	r3, [r7, #4]
 283 003a 9B6F     		ldr	r3, [r3, #120]
 284              		.loc 1 78 5
 285 003c 07F11002 		add	r2, r7, #16
 286 0040 1146     		mov	r1, r2
 287 0042 7868     		ldr	r0, [r7, #4]
 288 0044 9847     		blx	r3
 289              	.LVL1:
  79:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_readData(object,(uint8_t*)(&reg));
 290              		.loc 1 79 11
 291 0046 7B68     		ldr	r3, [r7, #4]
 292 0048 D3F88030 		ldr	r3, [r3, #128]
 293              		.loc 1 79 5
 294 004c 07F10E02 		add	r2, r7, #14
 295 0050 1146     		mov	r1, r2
 296 0052 7868     		ldr	r0, [r7, #4]
 297 0054 9847     		blx	r3
 298              	.LVL2:
  80:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,0);
 299              		.loc 1 80 5
 300 0056 0021     		movs	r1, #0
 301 0058 7868     		ldr	r0, [r7, #4]
 302 005a FFF7FEFF 		bl	MT25TL01G_WriteEnable
  81:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 303              		.loc 1 81 25
 304 005e 8123     		movs	r3, #129
 305 0060 3B61     		str	r3, [r7, #16]
  82:./BSP/Components/Src/mt25tl01g.c ****     MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 306              		.loc 1 82 5
 307 0062 FA89     		ldrh	r2, [r7, #14]
 308 0064 40F60F73 		movw	r3, #3855
 309 0068 1340     		ands	r3, r3, r2
 310 006a 9AB2     		uxth	r2, r3
 311 006c 0A4B     		ldr	r3, .L9
 312 006e 1343     		orrs	r3, r3, r2
 313 0070 9BB2     		uxth	r3, r3
 314 0072 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccF4jbqJ.s 			page 27


  83:./BSP/Components/Src/mt25tl01g.c ****                                (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));
  84:./BSP/Components/Src/mt25tl01g.c **** 
  85:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 315              		.loc 1 85 11
 316 0074 7B68     		ldr	r3, [r7, #4]
 317 0076 9B6F     		ldr	r3, [r3, #120]
 318              		.loc 1 85 5
 319 0078 07F11002 		add	r2, r7, #16
 320 007c 1146     		mov	r1, r2
 321 007e 7868     		ldr	r0, [r7, #4]
 322 0080 9847     		blx	r3
 323              	.LVL3:
  86:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeData(object,(uint8_t*)(&reg));
 324              		.loc 1 86 11
 325 0082 7B68     		ldr	r3, [r7, #4]
 326 0084 DB6F     		ldr	r3, [r3, #124]
 327              		.loc 1 86 5
 328 0086 07F10E02 		add	r2, r7, #14
 329 008a 1146     		mov	r1, r2
 330 008c 7868     		ldr	r0, [r7, #4]
 331 008e 9847     		blx	r3
 332              	.LVL4:
  87:./BSP/Components/Src/mt25tl01g.c **** }
 333              		.loc 1 87 1
 334 0090 00BF     		nop
 335 0092 4837     		adds	r7, r7, #72
 336              	.LCFI13:
 337              		.cfi_def_cfa_offset 8
 338 0094 BD46     		mov	sp, r7
 339              	.LCFI14:
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 0096 80BD     		pop	{r7, pc}
 343              	.L10:
 344              		.align	2
 345              	.L9:
 346 0098 8080FFFF 		.word	-32640
 347              		.cfi_endproc
 348              	.LFE340:
 350              		.section	.text.MT25TL01G_EnableMemoryMappedMode,"ax",%progbits
 351              		.align	1
 352              		.global	MT25TL01G_EnableMemoryMappedMode
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv5-d16
 358              	MT25TL01G_EnableMemoryMappedMode:
 359              	.LFB341:
  88:./BSP/Components/Src/mt25tl01g.c **** 
  89:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedMode(QSPI_objectTypeDef *object)
  90:./BSP/Components/Src/mt25tl01g.c **** {
 360              		.loc 1 90 1
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              	.LCFI15:
ARM GAS  /tmp/ccF4jbqJ.s 			page 28


 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 82B0     		sub	sp, sp, #8
 370              	.LCFI16:
 371              		.cfi_def_cfa_offset 16
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI17:
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
  91:./BSP/Components/Src/mt25tl01g.c ****     if(object->object_attr.transferRate==QSPI_STR_TRANSFER)
 376              		.loc 1 91 27
 377 0008 7B68     		ldr	r3, [r7, #4]
 378 000a 1B6F     		ldr	r3, [r3, #112]
 379              		.loc 1 91 7
 380 000c 012B     		cmp	r3, #1
 381 000e 04D1     		bne	.L12
  92:./BSP/Components/Src/mt25tl01g.c ****     {
  93:./BSP/Components/Src/mt25tl01g.c ****         MT25TL01G_EnableMemoryMappedModeSTR(object,3);
 382              		.loc 1 93 9
 383 0010 0321     		movs	r1, #3
 384 0012 7868     		ldr	r0, [r7, #4]
 385 0014 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedModeSTR
  94:./BSP/Components/Src/mt25tl01g.c ****     }
  95:./BSP/Components/Src/mt25tl01g.c ****     else if(object->object_attr.transferRate==QSPI_DTR_TRANSFER)
  96:./BSP/Components/Src/mt25tl01g.c ****     {
  97:./BSP/Components/Src/mt25tl01g.c ****         MT25TL01G_EnableMemoryMappedModeDTR(object,3);
  98:./BSP/Components/Src/mt25tl01g.c ****     }
  99:./BSP/Components/Src/mt25tl01g.c **** }
 386              		.loc 1 99 1
 387 0018 07E0     		b	.L14
 388              	.L12:
  95:./BSP/Components/Src/mt25tl01g.c ****     {
 389              		.loc 1 95 32
 390 001a 7B68     		ldr	r3, [r7, #4]
 391 001c 1B6F     		ldr	r3, [r3, #112]
  95:./BSP/Components/Src/mt25tl01g.c ****     {
 392              		.loc 1 95 12
 393 001e 032B     		cmp	r3, #3
 394 0020 03D1     		bne	.L14
  97:./BSP/Components/Src/mt25tl01g.c ****     }
 395              		.loc 1 97 9
 396 0022 0321     		movs	r1, #3
 397 0024 7868     		ldr	r0, [r7, #4]
 398 0026 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedModeDTR
 399              	.L14:
 400              		.loc 1 99 1
 401 002a 00BF     		nop
 402 002c 0837     		adds	r7, r7, #8
 403              	.LCFI18:
 404              		.cfi_def_cfa_offset 8
 405 002e BD46     		mov	sp, r7
 406              	.LCFI19:
 407              		.cfi_def_cfa_register 13
 408              		@ sp needed
 409 0030 80BD     		pop	{r7, pc}
 410              		.cfi_endproc
ARM GAS  /tmp/ccF4jbqJ.s 			page 29


 411              	.LFE341:
 413              		.section	.text.MT25TL01G_Enter4BytesAddressMode,"ax",%progbits
 414              		.align	1
 415              		.global	MT25TL01G_Enter4BytesAddressMode
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu fpv5-d16
 421              	MT25TL01G_Enter4BytesAddressMode:
 422              	.LFB342:
 100:./BSP/Components/Src/mt25tl01g.c **** 
 101:./BSP/Components/Src/mt25tl01g.c **** /*
 102:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
 103:./BSP/Components/Src/mt25tl01g.c **** *                       hardware command setting
 104:./BSP/Components/Src/mt25tl01g.c **** *           mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 105:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
 106:./BSP/Components/Src/mt25tl01g.c **** */
 107:./BSP/Components/Src/mt25tl01g.c **** 
 108:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 109:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t mode)
 110:./BSP/Components/Src/mt25tl01g.c **** {
 423              		.loc 1 110 1
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 64
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427 0000 80B5     		push	{r7, lr}
 428              	.LCFI20:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 90B0     		sub	sp, sp, #64
 433              	.LCFI21:
 434              		.cfi_def_cfa_offset 72
 435 0004 00AF     		add	r7, sp, #0
 436              	.LCFI22:
 437              		.cfi_def_cfa_register 7
 438 0006 7860     		str	r0, [r7, #4]
 439 0008 0B46     		mov	r3, r1
 440 000a FB70     		strb	r3, [r7, #3]
 111:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 112:./BSP/Components/Src/mt25tl01g.c **** 
 113:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the command */
 114:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 441              		.loc 1 114 67
 442 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 443 000e 002B     		cmp	r3, #0
 444 0010 02D1     		bne	.L16
 445              		.loc 1 114 67 is_stmt 0 discriminator 1
 446 0012 4FF44073 		mov	r3, #768
 447 0016 01E0     		b	.L17
 448              	.L16:
 449              		.loc 1 114 67 discriminator 2
 450 0018 4FF48073 		mov	r3, #256
 451              	.L17:
 452              		.loc 1 114 31 is_stmt 1 discriminator 4
 453 001c 3B62     		str	r3, [r7, #32]
 115:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
ARM GAS  /tmp/ccF4jbqJ.s 			page 30


 454              		.loc 1 115 31 discriminator 4
 455 001e B723     		movs	r3, #183
 456 0020 BB60     		str	r3, [r7, #8]
 116:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 457              		.loc 1 116 31 discriminator 4
 458 0022 0023     		movs	r3, #0
 459 0024 7B62     		str	r3, [r7, #36]
 117:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 460              		.loc 1 117 31 discriminator 4
 461 0026 0023     		movs	r3, #0
 462 0028 BB62     		str	r3, [r7, #40]
 118:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 463              		.loc 1 118 31 discriminator 4
 464 002a 0023     		movs	r3, #0
 465 002c FB62     		str	r3, [r7, #44]
 119:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 466              		.loc 1 119 31 discriminator 4
 467 002e 0023     		movs	r3, #0
 468 0030 FB61     		str	r3, [r7, #28]
 120:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 469              		.loc 1 120 31 discriminator 4
 470 0032 0023     		movs	r3, #0
 471 0034 7B63     		str	r3, [r7, #52]
 121:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 472              		.loc 1 121 31 discriminator 4
 473 0036 0023     		movs	r3, #0
 474 0038 BB63     		str	r3, [r7, #56]
 122:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 475              		.loc 1 122 31 discriminator 4
 476 003a 0023     		movs	r3, #0
 477 003c FB63     		str	r3, [r7, #60]
 123:./BSP/Components/Src/mt25tl01g.c **** 
 124:./BSP/Components/Src/mt25tl01g.c ****     /*write enable */
 125:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,mode);
 478              		.loc 1 125 5 discriminator 4
 479 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 480 0040 1946     		mov	r1, r3
 481 0042 7868     		ldr	r0, [r7, #4]
 482 0044 FFF7FEFF 		bl	MT25TL01G_WriteEnable
 126:./BSP/Components/Src/mt25tl01g.c **** 
 127:./BSP/Components/Src/mt25tl01g.c ****     /* Send the command */
 128:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 483              		.loc 1 128 11 discriminator 4
 484 0048 7B68     		ldr	r3, [r7, #4]
 485 004a 9B6F     		ldr	r3, [r3, #120]
 486              		.loc 1 128 5 discriminator 4
 487 004c 07F10802 		add	r2, r7, #8
 488 0050 1146     		mov	r1, r2
 489 0052 7868     		ldr	r0, [r7, #4]
 490 0054 9847     		blx	r3
 491              	.LVL5:
 129:./BSP/Components/Src/mt25tl01g.c **** 
 130:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait the memory is ready */
 131:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 492              		.loc 1 131 5 discriminator 4
 493 0056 7868     		ldr	r0, [r7, #4]
 494 0058 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
ARM GAS  /tmp/ccF4jbqJ.s 			page 31


 132:./BSP/Components/Src/mt25tl01g.c **** }
 495              		.loc 1 132 1 discriminator 4
 496 005c 00BF     		nop
 497 005e 4037     		adds	r7, r7, #64
 498              	.LCFI23:
 499              		.cfi_def_cfa_offset 8
 500 0060 BD46     		mov	sp, r7
 501              	.LCFI24:
 502              		.cfi_def_cfa_register 13
 503              		@ sp needed
 504 0062 80BD     		pop	{r7, pc}
 505              		.cfi_endproc
 506              	.LFE342:
 508              		.section	.text.MT25TL01G_ResetEnable,"ax",%progbits
 509              		.align	1
 510              		.global	MT25TL01G_ResetEnable
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu fpv5-d16
 516              	MT25TL01G_ResetEnable:
 517              	.LFB343:
 133:./BSP/Components/Src/mt25tl01g.c **** 
 134:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 135:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode)
 136:./BSP/Components/Src/mt25tl01g.c **** {
 518              		.loc 1 136 1
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 64
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 80B5     		push	{r7, lr}
 523              	.LCFI25:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 7, -8
 526              		.cfi_offset 14, -4
 527 0002 90B0     		sub	sp, sp, #64
 528              	.LCFI26:
 529              		.cfi_def_cfa_offset 72
 530 0004 00AF     		add	r7, sp, #0
 531              	.LCFI27:
 532              		.cfi_def_cfa_register 7
 533 0006 7860     		str	r0, [r7, #4]
 534 0008 0B46     		mov	r3, r1
 535 000a FB70     		strb	r3, [r7, #3]
 137:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 138:./BSP/Components/Src/mt25tl01g.c **** 
 139:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 140:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 141:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 536              		.loc 1 141 67
 537 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 538 000e 002B     		cmp	r3, #0
 539 0010 02D1     		bne	.L19
 540              		.loc 1 141 67 is_stmt 0 discriminator 1
 541 0012 4FF44073 		mov	r3, #768
 542 0016 01E0     		b	.L20
 543              	.L19:
ARM GAS  /tmp/ccF4jbqJ.s 			page 32


 544              		.loc 1 141 67 discriminator 2
 545 0018 4FF48073 		mov	r3, #256
 546              	.L20:
 547              		.loc 1 141 31 is_stmt 1 discriminator 4
 548 001c 3B62     		str	r3, [r7, #32]
 142:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 549              		.loc 1 142 31 discriminator 4
 550 001e 6623     		movs	r3, #102
 551 0020 BB60     		str	r3, [r7, #8]
 143:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 552              		.loc 1 143 31 discriminator 4
 553 0022 0023     		movs	r3, #0
 554 0024 7B62     		str	r3, [r7, #36]
 144:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 555              		.loc 1 144 31 discriminator 4
 556 0026 0023     		movs	r3, #0
 557 0028 BB62     		str	r3, [r7, #40]
 145:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 558              		.loc 1 145 31 discriminator 4
 559 002a 0023     		movs	r3, #0
 560 002c FB62     		str	r3, [r7, #44]
 146:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 561              		.loc 1 146 31 discriminator 4
 562 002e 0023     		movs	r3, #0
 563 0030 FB61     		str	r3, [r7, #28]
 147:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 564              		.loc 1 147 31 discriminator 4
 565 0032 0023     		movs	r3, #0
 566 0034 7B63     		str	r3, [r7, #52]
 148:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 567              		.loc 1 148 31 discriminator 4
 568 0036 0023     		movs	r3, #0
 569 0038 BB63     		str	r3, [r7, #56]
 149:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 570              		.loc 1 149 31 discriminator 4
 571 003a 0023     		movs	r3, #0
 572 003c FB63     		str	r3, [r7, #60]
 150:./BSP/Components/Src/mt25tl01g.c **** 
 151:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 573              		.loc 1 151 11 discriminator 4
 574 003e 7B68     		ldr	r3, [r7, #4]
 575 0040 9B6F     		ldr	r3, [r3, #120]
 576              		.loc 1 151 5 discriminator 4
 577 0042 07F10802 		add	r2, r7, #8
 578 0046 1146     		mov	r1, r2
 579 0048 7868     		ldr	r0, [r7, #4]
 580 004a 9847     		blx	r3
 581              	.LVL6:
 152:./BSP/Components/Src/mt25tl01g.c **** }
 582              		.loc 1 152 1 discriminator 4
 583 004c 00BF     		nop
 584 004e 4037     		adds	r7, r7, #64
 585              	.LCFI28:
 586              		.cfi_def_cfa_offset 8
 587 0050 BD46     		mov	sp, r7
 588              	.LCFI29:
 589              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccF4jbqJ.s 			page 33


 590              		@ sp needed
 591 0052 80BD     		pop	{r7, pc}
 592              		.cfi_endproc
 593              	.LFE343:
 595              		.section	.text.MT25TL01G_ResetMemoryCMD,"ax",%progbits
 596              		.align	1
 597              		.global	MT25TL01G_ResetMemoryCMD
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv5-d16
 603              	MT25TL01G_ResetMemoryCMD:
 604              	.LFB344:
 153:./BSP/Components/Src/mt25tl01g.c **** 
 154:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 155:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode)
 156:./BSP/Components/Src/mt25tl01g.c **** {
 605              		.loc 1 156 1
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 64
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 80B5     		push	{r7, lr}
 610              	.LCFI30:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 90B0     		sub	sp, sp, #64
 615              	.LCFI31:
 616              		.cfi_def_cfa_offset 72
 617 0004 00AF     		add	r7, sp, #0
 618              	.LCFI32:
 619              		.cfi_def_cfa_register 7
 620 0006 7860     		str	r0, [r7, #4]
 621 0008 0B46     		mov	r3, r1
 622 000a FB70     		strb	r3, [r7, #3]
 157:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 158:./BSP/Components/Src/mt25tl01g.c **** 
 159:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 160:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 161:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 623              		.loc 1 161 67
 624 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 625 000e 002B     		cmp	r3, #0
 626 0010 02D1     		bne	.L22
 627              		.loc 1 161 67 is_stmt 0 discriminator 1
 628 0012 4FF44073 		mov	r3, #768
 629 0016 01E0     		b	.L23
 630              	.L22:
 631              		.loc 1 161 67 discriminator 2
 632 0018 4FF48073 		mov	r3, #256
 633              	.L23:
 634              		.loc 1 161 31 is_stmt 1 discriminator 4
 635 001c 3B62     		str	r3, [r7, #32]
 162:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_MEMORY_CMD;
 636              		.loc 1 162 31 discriminator 4
 637 001e 9923     		movs	r3, #153
 638 0020 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccF4jbqJ.s 			page 34


 163:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 639              		.loc 1 163 31 discriminator 4
 640 0022 0023     		movs	r3, #0
 641 0024 7B62     		str	r3, [r7, #36]
 164:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 642              		.loc 1 164 31 discriminator 4
 643 0026 0023     		movs	r3, #0
 644 0028 BB62     		str	r3, [r7, #40]
 165:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 645              		.loc 1 165 31 discriminator 4
 646 002a 0023     		movs	r3, #0
 647 002c FB62     		str	r3, [r7, #44]
 166:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 648              		.loc 1 166 31 discriminator 4
 649 002e 0023     		movs	r3, #0
 650 0030 FB61     		str	r3, [r7, #28]
 167:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 651              		.loc 1 167 31 discriminator 4
 652 0032 0023     		movs	r3, #0
 653 0034 7B63     		str	r3, [r7, #52]
 168:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 654              		.loc 1 168 31 discriminator 4
 655 0036 0023     		movs	r3, #0
 656 0038 BB63     		str	r3, [r7, #56]
 169:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 657              		.loc 1 169 31 discriminator 4
 658 003a 0023     		movs	r3, #0
 659 003c FB63     		str	r3, [r7, #60]
 170:./BSP/Components/Src/mt25tl01g.c **** 
 171:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 660              		.loc 1 171 11 discriminator 4
 661 003e 7B68     		ldr	r3, [r7, #4]
 662 0040 9B6F     		ldr	r3, [r3, #120]
 663              		.loc 1 171 5 discriminator 4
 664 0042 07F10802 		add	r2, r7, #8
 665 0046 1146     		mov	r1, r2
 666 0048 7868     		ldr	r0, [r7, #4]
 667 004a 9847     		blx	r3
 668              	.LVL7:
 172:./BSP/Components/Src/mt25tl01g.c **** }
 669              		.loc 1 172 1 discriminator 4
 670 004c 00BF     		nop
 671 004e 4037     		adds	r7, r7, #64
 672              	.LCFI33:
 673              		.cfi_def_cfa_offset 8
 674 0050 BD46     		mov	sp, r7
 675              	.LCFI34:
 676              		.cfi_def_cfa_register 13
 677              		@ sp needed
 678 0052 80BD     		pop	{r7, pc}
 679              		.cfi_endproc
 680              	.LFE344:
 682              		.section	.text.MT25TL01G_AutoPollingMemReady,"ax",%progbits
 683              		.align	1
 684              		.global	MT25TL01G_AutoPollingMemReady
 685              		.syntax unified
 686              		.thumb
ARM GAS  /tmp/ccF4jbqJ.s 			page 35


 687              		.thumb_func
 688              		.fpu fpv5-d16
 690              	MT25TL01G_AutoPollingMemReady:
 691              	.LFB345:
 173:./BSP/Components/Src/mt25tl01g.c **** 
 174:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object)
 175:./BSP/Components/Src/mt25tl01g.c **** {
 692              		.loc 1 175 1
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 88
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 0000 80B5     		push	{r7, lr}
 697              	.LCFI35:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 96B0     		sub	sp, sp, #88
 702              	.LCFI36:
 703              		.cfi_def_cfa_offset 96
 704 0004 00AF     		add	r7, sp, #0
 705              	.LCFI37:
 706              		.cfi_def_cfa_register 7
 707 0006 7860     		str	r0, [r7, #4]
 176:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 177:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 178:./BSP/Components/Src/mt25tl01g.c **** 
 179:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for memory ready */
 180:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 708              		.loc 1 180 31
 709 0008 4FF44073 		mov	r3, #768
 710 000c BB63     		str	r3, [r7, #56]
 181:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 711              		.loc 1 181 31
 712 000e 0523     		movs	r3, #5
 713 0010 3B62     		str	r3, [r7, #32]
 182:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 714              		.loc 1 182 31
 715 0012 0023     		movs	r3, #0
 716 0014 FB63     		str	r3, [r7, #60]
 183:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 717              		.loc 1 183 31
 718 0016 0023     		movs	r3, #0
 719 0018 3B64     		str	r3, [r7, #64]
 184:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 720              		.loc 1 184 31
 721 001a 4FF04073 		mov	r3, #50331648
 722 001e 7B64     		str	r3, [r7, #68]
 185:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 2;
 723              		.loc 1 185 31
 724 0020 0223     		movs	r3, #2
 725 0022 7B63     		str	r3, [r7, #52]
 186:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 726              		.loc 1 186 31
 727 0024 0023     		movs	r3, #0
 728 0026 FB64     		str	r3, [r7, #76]
 187:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 729              		.loc 1 187 31
ARM GAS  /tmp/ccF4jbqJ.s 			page 36


 730 0028 0023     		movs	r3, #0
 731 002a 3B65     		str	r3, [r7, #80]
 188:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 732              		.loc 1 188 31
 733 002c 0023     		movs	r3, #0
 734 002e 7B65     		str	r3, [r7, #84]
 189:./BSP/Components/Src/mt25tl01g.c **** 
 190:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = 0;
 735              		.loc 1 190 28
 736 0030 0023     		movs	r3, #0
 737 0032 BB60     		str	r3, [r7, #8]
 191:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 738              		.loc 1 191 28
 739 0034 0023     		movs	r3, #0
 740 0036 BB61     		str	r3, [r7, #24]
 192:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 741              		.loc 1 192 28
 742 0038 1023     		movs	r3, #16
 743 003a 3B61     		str	r3, [r7, #16]
 193:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 744              		.loc 1 193 28
 745 003c 4FF48003 		mov	r3, #4194304
 746 0040 FB61     		str	r3, [r7, #28]
 194:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 747              		.loc 1 194 28
 748 0042 40F20113 		movw	r3, #257
 749 0046 FB60     		str	r3, [r7, #12]
 195:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 750              		.loc 1 195 28
 751 0048 0223     		movs	r3, #2
 752 004a 7B61     		str	r3, [r7, #20]
 196:./BSP/Components/Src/mt25tl01g.c **** 
 197:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 753              		.loc 1 197 11
 754 004c 7B68     		ldr	r3, [r7, #4]
 755 004e D3F88430 		ldr	r3, [r3, #132]
 756              		.loc 1 197 5
 757 0052 07F10802 		add	r2, r7, #8
 758 0056 07F12001 		add	r1, r7, #32
 759 005a 7868     		ldr	r0, [r7, #4]
 760 005c 9847     		blx	r3
 761              	.LVL8:
 198:./BSP/Components/Src/mt25tl01g.c **** }
 762              		.loc 1 198 1
 763 005e 00BF     		nop
 764 0060 5837     		adds	r7, r7, #88
 765              	.LCFI38:
 766              		.cfi_def_cfa_offset 8
 767 0062 BD46     		mov	sp, r7
 768              	.LCFI39:
 769              		.cfi_def_cfa_register 13
 770              		@ sp needed
 771 0064 80BD     		pop	{r7, pc}
 772              		.cfi_endproc
 773              	.LFE345:
 775              		.section	.text.MT25TL01G_WriteEnable,"ax",%progbits
 776              		.align	1
ARM GAS  /tmp/ccF4jbqJ.s 			page 37


 777              		.global	MT25TL01G_WriteEnable
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv5-d16
 783              	MT25TL01G_WriteEnable:
 784              	.LFB346:
 199:./BSP/Components/Src/mt25tl01g.c **** 
 200:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 201:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode)
 202:./BSP/Components/Src/mt25tl01g.c **** {
 785              		.loc 1 202 1
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 88
 788              		@ frame_needed = 1, uses_anonymous_args = 0
 789 0000 80B5     		push	{r7, lr}
 790              	.LCFI40:
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 7, -8
 793              		.cfi_offset 14, -4
 794 0002 96B0     		sub	sp, sp, #88
 795              	.LCFI41:
 796              		.cfi_def_cfa_offset 96
 797 0004 00AF     		add	r7, sp, #0
 798              	.LCFI42:
 799              		.cfi_def_cfa_register 7
 800 0006 7860     		str	r0, [r7, #4]
 801 0008 0B46     		mov	r3, r1
 802 000a FB70     		strb	r3, [r7, #3]
 203:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 204:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 205:./BSP/Components/Src/mt25tl01g.c **** 
 206:./BSP/Components/Src/mt25tl01g.c ****     /* Enable write operations */
 207:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 803              		.loc 1 207 67
 804 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 805 000e 002B     		cmp	r3, #0
 806 0010 02D1     		bne	.L26
 807              		.loc 1 207 67 is_stmt 0 discriminator 1
 808 0012 4FF44073 		mov	r3, #768
 809 0016 01E0     		b	.L27
 810              	.L26:
 811              		.loc 1 207 67 discriminator 2
 812 0018 4FF48073 		mov	r3, #256
 813              	.L27:
 814              		.loc 1 207 31 is_stmt 1 discriminator 4
 815 001c BB63     		str	r3, [r7, #56]
 208:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 816              		.loc 1 208 31 discriminator 4
 817 001e 0623     		movs	r3, #6
 818 0020 3B62     		str	r3, [r7, #32]
 209:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 819              		.loc 1 209 31 discriminator 4
 820 0022 0023     		movs	r3, #0
 821 0024 FB63     		str	r3, [r7, #60]
 210:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 822              		.loc 1 210 31 discriminator 4
ARM GAS  /tmp/ccF4jbqJ.s 			page 38


 823 0026 0023     		movs	r3, #0
 824 0028 3B64     		str	r3, [r7, #64]
 211:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 825              		.loc 1 211 31 discriminator 4
 826 002a 0023     		movs	r3, #0
 827 002c 7B64     		str	r3, [r7, #68]
 212:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 828              		.loc 1 212 31 discriminator 4
 829 002e 0023     		movs	r3, #0
 830 0030 7B63     		str	r3, [r7, #52]
 213:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 831              		.loc 1 213 31 discriminator 4
 832 0032 0023     		movs	r3, #0
 833 0034 FB64     		str	r3, [r7, #76]
 214:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 834              		.loc 1 214 31 discriminator 4
 835 0036 0023     		movs	r3, #0
 836 0038 3B65     		str	r3, [r7, #80]
 215:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 837              		.loc 1 215 31 discriminator 4
 838 003a 0023     		movs	r3, #0
 839 003c 7B65     		str	r3, [r7, #84]
 216:./BSP/Components/Src/mt25tl01g.c **** 
 217:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 840              		.loc 1 217 11 discriminator 4
 841 003e 7B68     		ldr	r3, [r7, #4]
 842 0040 9B6F     		ldr	r3, [r3, #120]
 843              		.loc 1 217 5 discriminator 4
 844 0042 07F12002 		add	r2, r7, #32
 845 0046 1146     		mov	r1, r2
 846 0048 7868     		ldr	r0, [r7, #4]
 847 004a 9847     		blx	r3
 848              	.LVL9:
 218:./BSP/Components/Src/mt25tl01g.c **** 
 219:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for write enabling */
 220:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 849              		.loc 1 220 28 discriminator 4
 850 004c 40F20223 		movw	r3, #514
 851 0050 BB60     		str	r3, [r7, #8]
 221:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 852              		.loc 1 221 28 discriminator 4
 853 0052 40F20223 		movw	r3, #514
 854 0056 FB60     		str	r3, [r7, #12]
 222:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 855              		.loc 1 222 28 discriminator 4
 856 0058 0023     		movs	r3, #0
 857 005a BB61     		str	r3, [r7, #24]
 223:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 858              		.loc 1 223 28 discriminator 4
 859 005c 0223     		movs	r3, #2
 860 005e 7B61     		str	r3, [r7, #20]
 224:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 861              		.loc 1 224 28 discriminator 4
 862 0060 1023     		movs	r3, #16
 863 0062 3B61     		str	r3, [r7, #16]
 225:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 864              		.loc 1 225 28 discriminator 4
ARM GAS  /tmp/ccF4jbqJ.s 			page 39


 865 0064 4FF48003 		mov	r3, #4194304
 866 0068 FB61     		str	r3, [r7, #28]
 226:./BSP/Components/Src/mt25tl01g.c **** 
 227:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 867              		.loc 1 227 28 discriminator 4
 868 006a 0523     		movs	r3, #5
 869 006c 3B62     		str	r3, [r7, #32]
 228:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode       = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 870              		.loc 1 228 64 discriminator 4
 871 006e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 872 0070 002B     		cmp	r3, #0
 873 0072 02D1     		bne	.L28
 874              		.loc 1 228 64 is_stmt 0 discriminator 1
 875 0074 4FF44073 		mov	r3, #768
 876 0078 01E0     		b	.L29
 877              	.L28:
 878              		.loc 1 228 64 discriminator 2
 879 007a 4FF48073 		mov	r3, #256
 880              	.L29:
 881              		.loc 1 228 28 is_stmt 1 discriminator 4
 882 007e 7B64     		str	r3, [r7, #68]
 229:./BSP/Components/Src/mt25tl01g.c **** 
 230:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 883              		.loc 1 230 11 discriminator 4
 884 0080 7B68     		ldr	r3, [r7, #4]
 885 0082 D3F88430 		ldr	r3, [r3, #132]
 886              		.loc 1 230 5 discriminator 4
 887 0086 07F10802 		add	r2, r7, #8
 888 008a 07F12001 		add	r1, r7, #32
 889 008e 7868     		ldr	r0, [r7, #4]
 890 0090 9847     		blx	r3
 891              	.LVL10:
 231:./BSP/Components/Src/mt25tl01g.c **** }
 892              		.loc 1 231 1 discriminator 4
 893 0092 00BF     		nop
 894 0094 5837     		adds	r7, r7, #88
 895              	.LCFI43:
 896              		.cfi_def_cfa_offset 8
 897 0096 BD46     		mov	sp, r7
 898              	.LCFI44:
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 0098 80BD     		pop	{r7, pc}
 902              		.cfi_endproc
 903              	.LFE346:
 905              		.section	.text.MT25TL01G_EnterQPIMode,"ax",%progbits
 906              		.align	1
 907              		.global	MT25TL01G_EnterQPIMode
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv5-d16
 913              	MT25TL01G_EnterQPIMode:
 914              	.LFB347:
 232:./BSP/Components/Src/mt25tl01g.c **** 
 233:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object)
 234:./BSP/Components/Src/mt25tl01g.c **** {
ARM GAS  /tmp/ccF4jbqJ.s 			page 40


 915              		.loc 1 234 1
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 64
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI45:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 90B0     		sub	sp, sp, #64
 925              	.LCFI46:
 926              		.cfi_def_cfa_offset 72
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI47:
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
 235:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 236:./BSP/Components/Src/mt25tl01g.c **** 
 237:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 931              		.loc 1 237 31
 932 0008 4FF48073 		mov	r3, #256
 933 000c 3B62     		str	r3, [r7, #32]
 238:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 934              		.loc 1 238 31
 935 000e 3523     		movs	r3, #53
 936 0010 BB60     		str	r3, [r7, #8]
 239:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 937              		.loc 1 239 31
 938 0012 0023     		movs	r3, #0
 939 0014 7B62     		str	r3, [r7, #36]
 240:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 940              		.loc 1 240 31
 941 0016 0023     		movs	r3, #0
 942 0018 BB62     		str	r3, [r7, #40]
 241:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 943              		.loc 1 241 31
 944 001a 0023     		movs	r3, #0
 945 001c FB62     		str	r3, [r7, #44]
 242:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 946              		.loc 1 242 31
 947 001e 0023     		movs	r3, #0
 948 0020 FB61     		str	r3, [r7, #28]
 243:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 949              		.loc 1 243 31
 950 0022 0023     		movs	r3, #0
 951 0024 7B63     		str	r3, [r7, #52]
 244:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 952              		.loc 1 244 31
 953 0026 0023     		movs	r3, #0
 954 0028 BB63     		str	r3, [r7, #56]
 245:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 955              		.loc 1 245 31
 956 002a 0023     		movs	r3, #0
 957 002c FB63     		str	r3, [r7, #60]
 246:./BSP/Components/Src/mt25tl01g.c **** 
 247:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 958              		.loc 1 247 11
ARM GAS  /tmp/ccF4jbqJ.s 			page 41


 959 002e 7B68     		ldr	r3, [r7, #4]
 960 0030 9B6F     		ldr	r3, [r3, #120]
 961              		.loc 1 247 5
 962 0032 07F10802 		add	r2, r7, #8
 963 0036 1146     		mov	r1, r2
 964 0038 7868     		ldr	r0, [r7, #4]
 965 003a 9847     		blx	r3
 966              	.LVL11:
 248:./BSP/Components/Src/mt25tl01g.c **** }
 967              		.loc 1 248 1
 968 003c 00BF     		nop
 969 003e 4037     		adds	r7, r7, #64
 970              	.LCFI48:
 971              		.cfi_def_cfa_offset 8
 972 0040 BD46     		mov	sp, r7
 973              	.LCFI49:
 974              		.cfi_def_cfa_register 13
 975              		@ sp needed
 976 0042 80BD     		pop	{r7, pc}
 977              		.cfi_endproc
 978              	.LFE347:
 980              		.section	.text.MT25TL01G_ExitQPIMode,"ax",%progbits
 981              		.align	1
 982              		.global	MT25TL01G_ExitQPIMode
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu fpv5-d16
 988              	MT25TL01G_ExitQPIMode:
 989              	.LFB348:
 249:./BSP/Components/Src/mt25tl01g.c **** 
 250:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object)
 251:./BSP/Components/Src/mt25tl01g.c **** {
 990              		.loc 1 251 1
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 64
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0000 80B5     		push	{r7, lr}
 995              	.LCFI50:
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 0002 90B0     		sub	sp, sp, #64
 1000              	.LCFI51:
 1001              		.cfi_def_cfa_offset 72
 1002 0004 00AF     		add	r7, sp, #0
 1003              	.LCFI52:
 1004              		.cfi_def_cfa_register 7
 1005 0006 7860     		str	r0, [r7, #4]
 252:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 253:./BSP/Components/Src/mt25tl01g.c **** 
 254:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1006              		.loc 1 254 31
 1007 0008 4FF48073 		mov	r3, #256
 1008 000c 3B62     		str	r3, [r7, #32]
 255:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 1009              		.loc 1 255 31
ARM GAS  /tmp/ccF4jbqJ.s 			page 42


 1010 000e F523     		movs	r3, #245
 1011 0010 BB60     		str	r3, [r7, #8]
 256:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 1012              		.loc 1 256 31
 1013 0012 0023     		movs	r3, #0
 1014 0014 7B62     		str	r3, [r7, #36]
 257:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1015              		.loc 1 257 31
 1016 0016 0023     		movs	r3, #0
 1017 0018 BB62     		str	r3, [r7, #40]
 258:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 1018              		.loc 1 258 31
 1019 001a 0023     		movs	r3, #0
 1020 001c FB62     		str	r3, [r7, #44]
 259:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 1021              		.loc 1 259 31
 1022 001e 0023     		movs	r3, #0
 1023 0020 FB61     		str	r3, [r7, #28]
 260:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 1024              		.loc 1 260 31
 1025 0022 0023     		movs	r3, #0
 1026 0024 7B63     		str	r3, [r7, #52]
 261:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 1027              		.loc 1 261 31
 1028 0026 0023     		movs	r3, #0
 1029 0028 BB63     		str	r3, [r7, #56]
 262:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1030              		.loc 1 262 31
 1031 002a 0023     		movs	r3, #0
 1032 002c FB63     		str	r3, [r7, #60]
 263:./BSP/Components/Src/mt25tl01g.c **** 
 264:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 1033              		.loc 1 264 11
 1034 002e 7B68     		ldr	r3, [r7, #4]
 1035 0030 9B6F     		ldr	r3, [r3, #120]
 1036              		.loc 1 264 5
 1037 0032 07F10802 		add	r2, r7, #8
 1038 0036 1146     		mov	r1, r2
 1039 0038 7868     		ldr	r0, [r7, #4]
 1040 003a 9847     		blx	r3
 1041              	.LVL12:
 265:./BSP/Components/Src/mt25tl01g.c **** }
 1042              		.loc 1 265 1
 1043 003c 00BF     		nop
 1044 003e 4037     		adds	r7, r7, #64
 1045              	.LCFI53:
 1046              		.cfi_def_cfa_offset 8
 1047 0040 BD46     		mov	sp, r7
 1048              	.LCFI54:
 1049              		.cfi_def_cfa_register 13
 1050              		@ sp needed
 1051 0042 80BD     		pop	{r7, pc}
 1052              		.cfi_endproc
 1053              	.LFE348:
 1055              		.section	.text.MT25TL01G_EnableMemoryMappedModeSTR,"ax",%progbits
 1056              		.align	1
 1057              		.global	MT25TL01G_EnableMemoryMappedModeSTR
ARM GAS  /tmp/ccF4jbqJ.s 			page 43


 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv5-d16
 1063              	MT25TL01G_EnableMemoryMappedModeSTR:
 1064              	.LFB349:
 266:./BSP/Components/Src/mt25tl01g.c **** 
 267:./BSP/Components/Src/mt25tl01g.c **** /*
 268:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 269:./BSP/Components/Src/mt25tl01g.c **** *   mode 0  =   SPI_MODE
 270:./BSP/Components/Src/mt25tl01g.c **** *   mode 1  =   SPI_2IO_MODE
 271:./BSP/Components/Src/mt25tl01g.c **** *   mode 2  =   SPI_4IO_MODE
 272:./BSP/Components/Src/mt25tl01g.c **** *   mode 3  =   QPI_MODE
 273:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 274:./BSP/Components/Src/mt25tl01g.c **** */
 275:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeSTR(QSPI_objectTypeDef *object,uint8_t mode)
 276:./BSP/Components/Src/mt25tl01g.c **** {
 1065              		.loc 1 276 1
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 72
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              	.LCFI55:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 7, -8
 1073              		.cfi_offset 14, -4
 1074 0002 92B0     		sub	sp, sp, #72
 1075              	.LCFI56:
 1076              		.cfi_def_cfa_offset 80
 1077 0004 00AF     		add	r7, sp, #0
 1078              	.LCFI57:
 1079              		.cfi_def_cfa_register 7
 1080 0006 7860     		str	r0, [r7, #4]
 1081 0008 0B46     		mov	r3, r1
 1082 000a FB70     		strb	r3, [r7, #3]
 277:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef      command;
 278:./BSP/Components/Src/mt25tl01g.c ****     QSPI_MemoryMappedTypeDef mem_mapped_cfg;
 279:./BSP/Components/Src/mt25tl01g.c ****     switch(mode)
 1083              		.loc 1 279 5
 1084 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1085 000e 032B     		cmp	r3, #3
 1086 0010 3AD8     		bhi	.L33
 1087 0012 01A2     		adr	r2, .L35
 1088 0014 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1089              		.p2align 2
 1090              	.L35:
 1091 0018 29000000 		.word	.L38+1
 1092 001c 41000000 		.word	.L37+1
 1093 0020 59000000 		.word	.L36+1
 1094 0024 71000000 		.word	.L34+1
 1095              		.p2align 1
 1096              	.L38:
 280:./BSP/Components/Src/mt25tl01g.c ****     {
 281:./BSP/Components/Src/mt25tl01g.c ****         case 0:     /* 1-1-1 read commands */
 282:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1097              		.loc 1 282 39
 1098 0028 4FF48073 		mov	r3, #256
ARM GAS  /tmp/ccF4jbqJ.s 			page 44


 1099 002c BB62     		str	r3, [r7, #40]
 283:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 1100              		.loc 1 283 39
 1101 002e 0C23     		movs	r3, #12
 1102 0030 3B61     		str	r3, [r7, #16]
 284:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1103              		.loc 1 284 39
 1104 0032 4FF48063 		mov	r3, #1024
 1105 0036 FB62     		str	r3, [r7, #44]
 285:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_1_LINE;
 1106              		.loc 1 285 39
 1107 0038 4FF08073 		mov	r3, #16777216
 1108 003c 7B63     		str	r3, [r7, #52]
 286:./BSP/Components/Src/mt25tl01g.c ****             break;
 1109              		.loc 1 286 13
 1110 003e 23E0     		b	.L33
 1111              	.L37:
 287:./BSP/Components/Src/mt25tl01g.c **** 
 288:./BSP/Components/Src/mt25tl01g.c ****         case 1:     /* 1-2-2 read commands */
 289:./BSP/Components/Src/mt25tl01g.c **** 
 290:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1112              		.loc 1 290 39
 1113 0040 4FF48073 		mov	r3, #256
 1114 0044 BB62     		str	r3, [r7, #40]
 291:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 1115              		.loc 1 291 39
 1116 0046 BC23     		movs	r3, #188
 1117 0048 3B61     		str	r3, [r7, #16]
 292:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_2_LINES;
 1118              		.loc 1 292 39
 1119 004a 4FF40063 		mov	r3, #2048
 1120 004e FB62     		str	r3, [r7, #44]
 293:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_2_LINES;
 1121              		.loc 1 293 39
 1122 0050 4FF00073 		mov	r3, #33554432
 1123 0054 7B63     		str	r3, [r7, #52]
 294:./BSP/Components/Src/mt25tl01g.c ****             break;
 1124              		.loc 1 294 13
 1125 0056 17E0     		b	.L33
 1126              	.L36:
 295:./BSP/Components/Src/mt25tl01g.c **** 
 296:./BSP/Components/Src/mt25tl01g.c ****         case 2:     /* 1-4-4 read commands */
 297:./BSP/Components/Src/mt25tl01g.c **** 
 298:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1127              		.loc 1 298 39
 1128 0058 4FF48073 		mov	r3, #256
 1129 005c BB62     		str	r3, [r7, #40]
 299:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 1130              		.loc 1 299 39
 1131 005e EC23     		movs	r3, #236
 1132 0060 3B61     		str	r3, [r7, #16]
 300:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1133              		.loc 1 300 39
 1134 0062 4FF44063 		mov	r3, #3072
 1135 0066 FB62     		str	r3, [r7, #44]
 301:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1136              		.loc 1 301 39
ARM GAS  /tmp/ccF4jbqJ.s 			page 45


 1137 0068 4FF04073 		mov	r3, #50331648
 1138 006c 7B63     		str	r3, [r7, #52]
 302:./BSP/Components/Src/mt25tl01g.c ****             break;
 1139              		.loc 1 302 13
 1140 006e 0BE0     		b	.L33
 1141              	.L34:
 303:./BSP/Components/Src/mt25tl01g.c **** 
 304:./BSP/Components/Src/mt25tl01g.c ****         case 3:     /* 4-4-4 commands */
 305:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 1142              		.loc 1 305 39
 1143 0070 4FF44073 		mov	r3, #768
 1144 0074 BB62     		str	r3, [r7, #40]
 306:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 1145              		.loc 1 306 39
 1146 0076 EB23     		movs	r3, #235
 1147 0078 3B61     		str	r3, [r7, #16]
 307:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1148              		.loc 1 307 39
 1149 007a 4FF44063 		mov	r3, #3072
 1150 007e FB62     		str	r3, [r7, #44]
 308:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1151              		.loc 1 308 39
 1152 0080 4FF04073 		mov	r3, #50331648
 1153 0084 7B63     		str	r3, [r7, #52]
 309:./BSP/Components/Src/mt25tl01g.c ****             break;
 1154              		.loc 1 309 13
 1155 0086 00BF     		nop
 1156              	.L33:
 310:./BSP/Components/Src/mt25tl01g.c ****     }
 311:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the command for the read instruction */
 312:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 1157              		.loc 1 312 31
 1158 0088 0823     		movs	r3, #8
 1159 008a 7B62     		str	r3, [r7, #36]
 313:./BSP/Components/Src/mt25tl01g.c ****     command.AddressSize       = QSPI_ADDRESS_32_BITS;
 1160              		.loc 1 313 31
 1161 008c 4FF44053 		mov	r3, #12288
 1162 0090 FB61     		str	r3, [r7, #28]
 314:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1163              		.loc 1 314 31
 1164 0092 0023     		movs	r3, #0
 1165 0094 3B63     		str	r3, [r7, #48]
 315:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 1166              		.loc 1 315 31
 1167 0096 0023     		movs	r3, #0
 1168 0098 FB63     		str	r3, [r7, #60]
 316:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 1169              		.loc 1 316 31
 1170 009a 0023     		movs	r3, #0
 1171 009c 3B64     		str	r3, [r7, #64]
 317:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1172              		.loc 1 317 31
 1173 009e 0023     		movs	r3, #0
 1174 00a0 7B64     		str	r3, [r7, #68]
 318:./BSP/Components/Src/mt25tl01g.c **** 
 319:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the memory mapped mode */
 320:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
ARM GAS  /tmp/ccF4jbqJ.s 			page 46


 1175              		.loc 1 320 38
 1176 00a2 0023     		movs	r3, #0
 1177 00a4 FB60     		str	r3, [r7, #12]
 321:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutPeriod     = 0;
 1178              		.loc 1 321 38
 1179 00a6 0023     		movs	r3, #0
 1180 00a8 BB60     		str	r3, [r7, #8]
 322:./BSP/Components/Src/mt25tl01g.c **** 
 323:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_memoryMapped(object,&command,&mem_mapped_cfg);
 1181              		.loc 1 323 11
 1182 00aa 7B68     		ldr	r3, [r7, #4]
 1183 00ac D3F88830 		ldr	r3, [r3, #136]
 1184              		.loc 1 323 5
 1185 00b0 07F10802 		add	r2, r7, #8
 1186 00b4 07F11001 		add	r1, r7, #16
 1187 00b8 7868     		ldr	r0, [r7, #4]
 1188 00ba 9847     		blx	r3
 1189              	.LVL13:
 324:./BSP/Components/Src/mt25tl01g.c **** }
 1190              		.loc 1 324 1
 1191 00bc 00BF     		nop
 1192 00be 4837     		adds	r7, r7, #72
 1193              	.LCFI58:
 1194              		.cfi_def_cfa_offset 8
 1195 00c0 BD46     		mov	sp, r7
 1196              	.LCFI59:
 1197              		.cfi_def_cfa_register 13
 1198              		@ sp needed
 1199 00c2 80BD     		pop	{r7, pc}
 1200              		.cfi_endproc
 1201              	.LFE349:
 1203              		.section	.text.MT25TL01G_EnableMemoryMappedModeDTR,"ax",%progbits
 1204              		.align	1
 1205              		.global	MT25TL01G_EnableMemoryMappedModeDTR
 1206              		.syntax unified
 1207              		.thumb
 1208              		.thumb_func
 1209              		.fpu fpv5-d16
 1211              	MT25TL01G_EnableMemoryMappedModeDTR:
 1212              	.LFB350:
 325:./BSP/Components/Src/mt25tl01g.c **** 
 326:./BSP/Components/Src/mt25tl01g.c **** /*
 327:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 328:./BSP/Components/Src/mt25tl01g.c **** *   mode 0  =   SPI_MODE
 329:./BSP/Components/Src/mt25tl01g.c **** *   mode 1  =   SPI_2IO_MODE
 330:./BSP/Components/Src/mt25tl01g.c **** *   mode 2  =   SPI_4IO_MODE
 331:./BSP/Components/Src/mt25tl01g.c **** *   mode 3  =   QPI_MODE
 332:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 333:./BSP/Components/Src/mt25tl01g.c **** */
 334:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeDTR(QSPI_objectTypeDef *object,uint8_t mode)
 335:./BSP/Components/Src/mt25tl01g.c **** {
 1213              		.loc 1 335 1
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 72
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217 0000 80B5     		push	{r7, lr}
 1218              	.LCFI60:
ARM GAS  /tmp/ccF4jbqJ.s 			page 47


 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 7, -8
 1221              		.cfi_offset 14, -4
 1222 0002 92B0     		sub	sp, sp, #72
 1223              	.LCFI61:
 1224              		.cfi_def_cfa_offset 80
 1225 0004 00AF     		add	r7, sp, #0
 1226              	.LCFI62:
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
 1229 0008 0B46     		mov	r3, r1
 1230 000a FB70     		strb	r3, [r7, #3]
 336:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef      command;
 337:./BSP/Components/Src/mt25tl01g.c ****     QSPI_MemoryMappedTypeDef mem_mapped_cfg;
 338:./BSP/Components/Src/mt25tl01g.c ****     switch(mode)
 1231              		.loc 1 338 5
 1232 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1233 000e 032B     		cmp	r3, #3
 1234 0010 3AD8     		bhi	.L40
 1235 0012 01A2     		adr	r2, .L42
 1236 0014 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1237              		.p2align 2
 1238              	.L42:
 1239 0018 29000000 		.word	.L45+1
 1240 001c 41000000 		.word	.L44+1
 1241 0020 59000000 		.word	.L43+1
 1242 0024 71000000 		.word	.L41+1
 1243              		.p2align 1
 1244              	.L45:
 339:./BSP/Components/Src/mt25tl01g.c ****     {
 340:./BSP/Components/Src/mt25tl01g.c ****         case 0:                /* 1-1-1 commands, Power on H/W default setting */
 341:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1245              		.loc 1 341 39
 1246 0028 4FF48073 		mov	r3, #256
 1247 002c BB62     		str	r3, [r7, #40]
 342:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 1248              		.loc 1 342 39
 1249 002e 0E23     		movs	r3, #14
 1250 0030 3B61     		str	r3, [r7, #16]
 343:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1251              		.loc 1 343 39
 1252 0032 4FF48063 		mov	r3, #1024
 1253 0036 FB62     		str	r3, [r7, #44]
 344:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_1_LINE;
 1254              		.loc 1 344 39
 1255 0038 4FF08073 		mov	r3, #16777216
 1256 003c 7B63     		str	r3, [r7, #52]
 345:./BSP/Components/Src/mt25tl01g.c ****             break;
 1257              		.loc 1 345 13
 1258 003e 23E0     		b	.L40
 1259              	.L44:
 346:./BSP/Components/Src/mt25tl01g.c **** 
 347:./BSP/Components/Src/mt25tl01g.c ****         case 1:           /* 1-1-2 read commands */
 348:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1260              		.loc 1 348 39
 1261 0040 4FF48073 		mov	r3, #256
 1262 0044 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccF4jbqJ.s 			page 48


 349:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 1263              		.loc 1 349 39
 1264 0046 3D23     		movs	r3, #61
 1265 0048 3B61     		str	r3, [r7, #16]
 350:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1266              		.loc 1 350 39
 1267 004a 4FF48063 		mov	r3, #1024
 1268 004e FB62     		str	r3, [r7, #44]
 351:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_2_LINES;
 1269              		.loc 1 351 39
 1270 0050 4FF00073 		mov	r3, #33554432
 1271 0054 7B63     		str	r3, [r7, #52]
 352:./BSP/Components/Src/mt25tl01g.c ****         break;
 1272              		.loc 1 352 9
 1273 0056 17E0     		b	.L40
 1274              	.L43:
 353:./BSP/Components/Src/mt25tl01g.c **** 
 354:./BSP/Components/Src/mt25tl01g.c ****         case 2:             /* 1-4-4 read commands */
 355:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1275              		.loc 1 355 39
 1276 0058 4FF48073 		mov	r3, #256
 1277 005c BB62     		str	r3, [r7, #40]
 356:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 1278              		.loc 1 356 39
 1279 005e EE23     		movs	r3, #238
 1280 0060 3B61     		str	r3, [r7, #16]
 357:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1281              		.loc 1 357 39
 1282 0062 4FF44063 		mov	r3, #3072
 1283 0066 FB62     		str	r3, [r7, #44]
 358:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1284              		.loc 1 358 39
 1285 0068 4FF04073 		mov	r3, #50331648
 1286 006c 7B63     		str	r3, [r7, #52]
 359:./BSP/Components/Src/mt25tl01g.c ****             break;
 1287              		.loc 1 359 13
 1288 006e 0BE0     		b	.L40
 1289              	.L41:
 360:./BSP/Components/Src/mt25tl01g.c **** 
 361:./BSP/Components/Src/mt25tl01g.c ****         case 3:                 /* 4-4-4 commands */
 362:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 1290              		.loc 1 362 39
 1291 0070 4FF44073 		mov	r3, #768
 1292 0074 BB62     		str	r3, [r7, #40]
 363:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 1293              		.loc 1 363 39
 1294 0076 ED23     		movs	r3, #237
 1295 0078 3B61     		str	r3, [r7, #16]
 364:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1296              		.loc 1 364 39
 1297 007a 4FF44063 		mov	r3, #3072
 1298 007e FB62     		str	r3, [r7, #44]
 365:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1299              		.loc 1 365 39
 1300 0080 4FF04073 		mov	r3, #50331648
 1301 0084 7B63     		str	r3, [r7, #52]
 366:./BSP/Components/Src/mt25tl01g.c ****             break;
ARM GAS  /tmp/ccF4jbqJ.s 			page 49


 1302              		.loc 1 366 13
 1303 0086 00BF     		nop
 1304              	.L40:
 367:./BSP/Components/Src/mt25tl01g.c ****     }
 368:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the command for the read instruction */
 369:./BSP/Components/Src/mt25tl01g.c ****     command.AddressSize       = QSPI_ADDRESS_32_BITS;
 1305              		.loc 1 369 31
 1306 0088 4FF44053 		mov	r3, #12288
 1307 008c FB61     		str	r3, [r7, #28]
 370:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1308              		.loc 1 370 31
 1309 008e 0023     		movs	r3, #0
 1310 0090 3B63     		str	r3, [r7, #48]
 371:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 1311              		.loc 1 371 31
 1312 0092 0823     		movs	r3, #8
 1313 0094 7B62     		str	r3, [r7, #36]
 372:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 1314              		.loc 1 372 31
 1315 0096 4FF00043 		mov	r3, #-2147483648
 1316 009a FB63     		str	r3, [r7, #60]
 373:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 1317              		.loc 1 373 31
 1318 009c 4FF08043 		mov	r3, #1073741824
 1319 00a0 3B64     		str	r3, [r7, #64]
 374:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1320              		.loc 1 374 31
 1321 00a2 0023     		movs	r3, #0
 1322 00a4 7B64     		str	r3, [r7, #68]
 375:./BSP/Components/Src/mt25tl01g.c **** 
 376:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the memory mapped mode */
 377:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 1323              		.loc 1 377 38
 1324 00a6 0023     		movs	r3, #0
 1325 00a8 FB60     		str	r3, [r7, #12]
 378:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutPeriod     = 0;
 1326              		.loc 1 378 38
 1327 00aa 0023     		movs	r3, #0
 1328 00ac BB60     		str	r3, [r7, #8]
 379:./BSP/Components/Src/mt25tl01g.c **** 
 380:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_memoryMapped(object,&command,&mem_mapped_cfg);
 1329              		.loc 1 380 11
 1330 00ae 7B68     		ldr	r3, [r7, #4]
 1331 00b0 D3F88830 		ldr	r3, [r3, #136]
 1332              		.loc 1 380 5
 1333 00b4 07F10802 		add	r2, r7, #8
 1334 00b8 07F11001 		add	r1, r7, #16
 1335 00bc 7868     		ldr	r0, [r7, #4]
 1336 00be 9847     		blx	r3
 1337              	.LVL14:
 381:./BSP/Components/Src/mt25tl01g.c **** }...
 1338              		.loc 1 381 1
 1339 00c0 00BF     		nop
 1340 00c2 4837     		adds	r7, r7, #72
 1341              	.LCFI63:
 1342              		.cfi_def_cfa_offset 8
 1343 00c4 BD46     		mov	sp, r7
ARM GAS  /tmp/ccF4jbqJ.s 			page 50


 1344              	.LCFI64:
 1345              		.cfi_def_cfa_register 13
 1346              		@ sp needed
 1347 00c6 80BD     		pop	{r7, pc}
 1348              		.cfi_endproc
 1349              	.LFE350:
 1351              		.text
 1352              	.Letext0:
 1353              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1354              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 1355              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 1356              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 1357              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1358              		.file 8 "/usr/include/newlib/sys/_types.h"
 1359              		.file 9 "/usr/include/newlib/sys/reent.h"
 1360              		.file 10 "/usr/include/newlib/sys/lock.h"
 1361              		.file 11 "/usr/include/newlib/math.h"
 1362              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1363              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 1364              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 1365              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
 1366              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1367              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1368              		.file 18 "/usr/include/newlib/stdlib.h"
 1369              		.file 19 "./BSP/Components/Src/../../Components/Inc/lcd.h"
 1370              		.file 20 "./BSP/Components/Src/../../Hardware/Inc/qspi.h"
ARM GAS  /tmp/ccF4jbqJ.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mt25tl01g.c
                            *COM*:000000000000008c qspi_object
     /tmp/ccF4jbqJ.s:22     .data.qspi_attr:0000000000000000 qspi_attr
     /tmp/ccF4jbqJ.s:19     .data.qspi_attr:0000000000000000 $d
     /tmp/ccF4jbqJ.s:34     .text.mt25tl01g_Init:0000000000000000 $t
     /tmp/ccF4jbqJ.s:42     .text.mt25tl01g_Init:0000000000000000 mt25tl01g_Init
     /tmp/ccF4jbqJ.s:172    .text.MT25TL01G_ResetMemory:0000000000000000 MT25TL01G_ResetMemory
     /tmp/ccF4jbqJ.s:690    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 MT25TL01G_AutoPollingMemReady
     /tmp/ccF4jbqJ.s:421    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 MT25TL01G_Enter4BytesAddressMode
     /tmp/ccF4jbqJ.s:230    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 MT25TL01G_DummyCyclesCfg
     /tmp/ccF4jbqJ.s:988    .text.MT25TL01G_ExitQPIMode:0000000000000000 MT25TL01G_ExitQPIMode
     /tmp/ccF4jbqJ.s:913    .text.MT25TL01G_EnterQPIMode:0000000000000000 MT25TL01G_EnterQPIMode
     /tmp/ccF4jbqJ.s:358    .text.MT25TL01G_EnableMemoryMappedMode:0000000000000000 MT25TL01G_EnableMemoryMappedMode
     /tmp/ccF4jbqJ.s:159    .text.mt25tl01g_Init:0000000000000090 $d
     /tmp/ccF4jbqJ.s:165    .text.MT25TL01G_ResetMemory:0000000000000000 $t
     /tmp/ccF4jbqJ.s:516    .text.MT25TL01G_ResetEnable:0000000000000000 MT25TL01G_ResetEnable
     /tmp/ccF4jbqJ.s:603    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 MT25TL01G_ResetMemoryCMD
     /tmp/ccF4jbqJ.s:223    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 $t
     /tmp/ccF4jbqJ.s:783    .text.MT25TL01G_WriteEnable:0000000000000000 MT25TL01G_WriteEnable
     /tmp/ccF4jbqJ.s:346    .text.MT25TL01G_DummyCyclesCfg:0000000000000098 $d
     /tmp/ccF4jbqJ.s:351    .text.MT25TL01G_EnableMemoryMappedMode:0000000000000000 $t
     /tmp/ccF4jbqJ.s:1063   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000000 MT25TL01G_EnableMemoryMappedModeSTR
     /tmp/ccF4jbqJ.s:1211   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000000 MT25TL01G_EnableMemoryMappedModeDTR
     /tmp/ccF4jbqJ.s:414    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 $t
     /tmp/ccF4jbqJ.s:509    .text.MT25TL01G_ResetEnable:0000000000000000 $t
     /tmp/ccF4jbqJ.s:596    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 $t
     /tmp/ccF4jbqJ.s:683    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 $t
     /tmp/ccF4jbqJ.s:776    .text.MT25TL01G_WriteEnable:0000000000000000 $t
     /tmp/ccF4jbqJ.s:906    .text.MT25TL01G_EnterQPIMode:0000000000000000 $t
     /tmp/ccF4jbqJ.s:981    .text.MT25TL01G_ExitQPIMode:0000000000000000 $t
     /tmp/ccF4jbqJ.s:1056   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000000 $t
     /tmp/ccF4jbqJ.s:1091   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000018 $d
     /tmp/ccF4jbqJ.s:1095   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000028 $t
     /tmp/ccF4jbqJ.s:1204   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000000 $t
     /tmp/ccF4jbqJ.s:1239   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000018 $d
     /tmp/ccF4jbqJ.s:1243   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000028 $t

UNDEFINED SYMBOLS
QSPI_object_Init
