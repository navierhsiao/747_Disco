ARM GAS  /tmp/ccKBMVaa.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"mt25tl01g.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	qspi_attr
  17              		.section	.data.qspi_attr,"aw"
  18              		.align	2
  21              	qspi_attr:
  22 0000 00500052 		.word	1375752192
  23 0004 03000000 		.word	3
  24 0008 01000000 		.word	1
  25 000c 00000000 		.word	0
  26 0010 00000000 		.word	0
  27 0014 00030000 		.word	768
  28 0018 00000000 		.word	0
  29 001c 00000000 		.word	0
  30 0020 40000000 		.word	64
  31 0024 03000000 		.word	3
  32              		.section	.text.mt25tl01g_Init,"ax",%progbits
  33              		.align	1
  34              		.global	mt25tl01g_Init
  35              		.arch armv7e-m
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu fpv5-d16
  41              	mt25tl01g_Init:
  42              	.LFB338:
  43              		.file 1 "./BSP/Components/Src/mt25tl01g.c"
   1:./BSP/Components/Src/mt25tl01g.c **** #include "../../system.h"
   2:./BSP/Components/Src/mt25tl01g.c **** 
   3:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object);
   4:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object);
   5:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedMode(QSPI_objectTypeDef *object);
   6:./BSP/Components/Src/mt25tl01g.c **** 
   7:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t Mode);
   8:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode);
   9:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode);
  10:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object);
  11:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode);
  12:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object);
  13:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object);
  14:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeSTR(QSPI_objectTypeDef *object,uint8_t mode);
  15:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeDTR(QSPI_objectTypeDef *object,uint8_t mode);
  16:./BSP/Components/Src/mt25tl01g.c **** 
  17:./BSP/Components/Src/mt25tl01g.c **** QSPI_objectAttr qspi_attr={
ARM GAS  /tmp/ccKBMVaa.s 			page 2


  18:./BSP/Components/Src/mt25tl01g.c ****     .Instance               = QUADSPI,
  19:./BSP/Components/Src/mt25tl01g.c ****     //STR:1，DTR：3
  20:./BSP/Components/Src/mt25tl01g.c ****     .ClockPrescaler         = QSPI_DTR_TRANSFER,
  21:./BSP/Components/Src/mt25tl01g.c ****     .FifoThreshold          = 1,
  22:./BSP/Components/Src/mt25tl01g.c ****     //若為STR使用:QSPI_SAMPLE_SHIFTING_HALFCYCLE
  23:./BSP/Components/Src/mt25tl01g.c ****     .SampleShifting         = QSPI_SAMPLE_SHIFTING_NONE,
  24:./BSP/Components/Src/mt25tl01g.c ****     .FlashSize              = 0,
  25:./BSP/Components/Src/mt25tl01g.c ****     .ChipSelectHighTime     = QSPI_CS_HIGH_TIME_4_CYCLE, /* Min 50ns for nonRead */
  26:./BSP/Components/Src/mt25tl01g.c ****     .ClockMode              = QSPI_CLOCK_MODE_0,
  27:./BSP/Components/Src/mt25tl01g.c ****     .FlashID                = QSPI_FLASH_ID_1,
  28:./BSP/Components/Src/mt25tl01g.c ****     .DualFlash              = QSPI_DUALFLASH_ENABLE,
  29:./BSP/Components/Src/mt25tl01g.c ****     .transferRate           = QSPI_DTR_TRANSFER
  30:./BSP/Components/Src/mt25tl01g.c **** };
  31:./BSP/Components/Src/mt25tl01g.c **** 
  32:./BSP/Components/Src/mt25tl01g.c **** void mt25tl01g_Init(void)
  33:./BSP/Components/Src/mt25tl01g.c **** {
  44              		.loc 1 33 1
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 160
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 20
  51              		.cfi_offset 4, -20
  52              		.cfi_offset 5, -16
  53              		.cfi_offset 6, -12
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 B1B0     		sub	sp, sp, #196
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 216
  59 0004 08AF     		add	r7, sp, #32
  60              	.LCFI2:
  61              		.cfi_def_cfa 7, 184
  62 0006 4FF00063 		mov	r3, #134217728
  63 000a C7F89430 		str	r3, [r7, #148]
  64              	.LBB6:
  65              	.LBB7:
  66              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /tmp/ccKBMVaa.s 			page 3


  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccKBMVaa.s 			page 4


  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccKBMVaa.s 			page 5


 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccKBMVaa.s 			page 6


 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /tmp/ccKBMVaa.s 			page 7


 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 8


 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKBMVaa.s 			page 9


 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccKBMVaa.s 			page 10


 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccKBMVaa.s 			page 11


 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 12


 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 13


 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 14


 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
ARM GAS  /tmp/ccKBMVaa.s 			page 15


 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 16


 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  /tmp/ccKBMVaa.s 			page 17


 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKBMVaa.s 			page 18


 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  /tmp/ccKBMVaa.s 			page 19


 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccKBMVaa.s 			page 20


 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
ARM GAS  /tmp/ccKBMVaa.s 			page 21


1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  67              		.loc 2 1055 4
  68 000e D7F89430 		ldr	r3, [r7, #148]
  69              		.syntax unified
  70              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
  71 0012 93FAA3F3 		rbit r3, r3
  72              	@ 0 "" 2
  73              		.thumb
  74              		.syntax unified
  75 0016 C7F89030 		str	r3, [r7, #144]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
  76              		.loc 2 1068 10
  77 001a D7F89030 		ldr	r3, [r7, #144]
  78 001e C7F89830 		str	r3, [r7, #152]
  79              	.LBE7:
  80              	.LBE6:
  81              	.LBB8:
  82              	.LBB9:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
ARM GAS  /tmp/ccKBMVaa.s 			page 22


1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
  83              		.loc 2 1089 6
  84 0022 D7F89830 		ldr	r3, [r7, #152]
  85 0026 002B     		cmp	r3, #0
  86 0028 01D1     		bne	.L3
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
  87              		.loc 2 1091 12
  88 002a 2023     		movs	r3, #32
  89 002c 04E0     		b	.L4
  90              	.L3:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
  91              		.loc 2 1093 10
  92 002e D7F89830 		ldr	r3, [r7, #152]
  93 0032 B3FA83F3 		clz	r3, r3
  94 0036 DBB2     		uxtb	r3, r3
  95              	.L4:
  96              	.LBE9:
  97              	.LBE8:
  34:./BSP/Components/Src/mt25tl01g.c ****     QSPI_objectTypeDef qspi_object;
  35:./BSP/Components/Src/mt25tl01g.c ****     const uint32_t size=(uint32_t)POSITION_VAL((uint32_t)MT25TL01G_FLASH_SIZE) - 1U;
  98              		.loc 1 35 20
  99 0038 013B     		subs	r3, r3, #1
 100 003a C7F89C30 		str	r3, [r7, #156]
  36:./BSP/Components/Src/mt25tl01g.c ****     qspi_attr.FlashSize=size;
 101              		.loc 1 36 24
 102 003e 1F4A     		ldr	r2, .L5
 103 0040 D7F89C30 		ldr	r3, [r7, #156]
 104 0044 1361     		str	r3, [r2, #16]
  37:./BSP/Components/Src/mt25tl01g.c **** 
  38:./BSP/Components/Src/mt25tl01g.c ****     QSPI_object_Init(&qspi_object,qspi_attr);
 105              		.loc 1 38 5
 106 0046 1D4E     		ldr	r6, .L5
 107 0048 07F1040C 		add	ip, r7, #4
 108 004c 6D46     		mov	r5, sp
 109 004e 06F10C04 		add	r4, r6, #12
 110 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 111 0054 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 112 0056 94E80700 		ldm	r4, {r0, r1, r2}
 113 005a 85E80700 		stm	r5, {r0, r1, r2}
 114 005e 96E80E00 		ldm	r6, {r1, r2, r3}
 115 0062 6046     		mov	r0, ip
 116 0064 FFF7FEFF 		bl	QSPI_object_Init
  39:./BSP/Components/Src/mt25tl01g.c ****     qspi_object.qspi_init(&qspi_object);
 117              		.loc 1 39 16
 118 0068 BB6F     		ldr	r3, [r7, #120]
 119              		.loc 1 39 5
 120 006a 3A1D     		adds	r2, r7, #4
 121 006c 1046     		mov	r0, r2
 122 006e 9847     		blx	r3
 123              	.LVL0:
  40:./BSP/Components/Src/mt25tl01g.c **** 
  41:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(&qspi_object,0);
ARM GAS  /tmp/ccKBMVaa.s 			page 23


 124              		.loc 1 41 5
 125 0070 3B1D     		adds	r3, r7, #4
 126 0072 0021     		movs	r1, #0
 127 0074 1846     		mov	r0, r3
 128 0076 FFF7FEFF 		bl	MT25TL01G_ResetEnable
  42:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemory(&qspi_object);
 129              		.loc 1 42 5
 130 007a 3B1D     		adds	r3, r7, #4
 131 007c 1846     		mov	r0, r3
 132 007e FFF7FEFF 		bl	MT25TL01G_ResetMemory
  43:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(&qspi_object);
 133              		.loc 1 43 5
 134 0082 3B1D     		adds	r3, r7, #4
 135 0084 1846     		mov	r0, r3
 136 0086 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  44:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_Enter4BytesAddressMode(&qspi_object,0);
 137              		.loc 1 44 5
 138 008a 3B1D     		adds	r3, r7, #4
 139 008c 0021     		movs	r1, #0
 140 008e 1846     		mov	r0, r3
 141 0090 FFF7FEFF 		bl	MT25TL01G_Enter4BytesAddressMode
  45:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_DummyCyclesCfg(&qspi_object);
 142              		.loc 1 45 5
 143 0094 3B1D     		adds	r3, r7, #4
 144 0096 1846     		mov	r0, r3
 145 0098 FFF7FEFF 		bl	MT25TL01G_DummyCyclesCfg
  46:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ExitQPIMode(&qspi_object);
 146              		.loc 1 46 5
 147 009c 3B1D     		adds	r3, r7, #4
 148 009e 1846     		mov	r0, r3
 149 00a0 FFF7FEFF 		bl	MT25TL01G_ExitQPIMode
  47:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_EnterQPIMode(&qspi_object);
 150              		.loc 1 47 5
 151 00a4 3B1D     		adds	r3, r7, #4
 152 00a6 1846     		mov	r0, r3
 153 00a8 FFF7FEFF 		bl	MT25TL01G_EnterQPIMode
  48:./BSP/Components/Src/mt25tl01g.c **** 
  49:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_EnableMemoryMappedMode(&qspi_object);
 154              		.loc 1 49 5
 155 00ac 3B1D     		adds	r3, r7, #4
 156 00ae 1846     		mov	r0, r3
 157 00b0 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedMode
  50:./BSP/Components/Src/mt25tl01g.c **** }
 158              		.loc 1 50 1
 159 00b4 00BF     		nop
 160 00b6 A437     		adds	r7, r7, #164
 161              	.LCFI3:
 162              		.cfi_def_cfa_offset 20
 163 00b8 BD46     		mov	sp, r7
 164              	.LCFI4:
 165              		.cfi_def_cfa_register 13
 166              		@ sp needed
 167 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 168              	.L6:
 169              		.align	2
 170              	.L5:
 171 00bc 00000000 		.word	qspi_attr
ARM GAS  /tmp/ccKBMVaa.s 			page 24


 172              		.cfi_endproc
 173              	.LFE338:
 175              		.section	.text.MT25TL01G_ResetMemory,"ax",%progbits
 176              		.align	1
 177              		.global	MT25TL01G_ResetMemory
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu fpv5-d16
 183              	MT25TL01G_ResetMemory:
 184              	.LFB339:
  51:./BSP/Components/Src/mt25tl01g.c **** 
  52:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object)
  53:./BSP/Components/Src/mt25tl01g.c **** {
 185              		.loc 1 53 1
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 8
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 82B0     		sub	sp, sp, #8
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 16
 197 0004 00AF     		add	r7, sp, #0
 198              	.LCFI7:
 199              		.cfi_def_cfa_register 7
 200 0006 7860     		str	r0, [r7, #4]
  54:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,0);
 201              		.loc 1 54 5
 202 0008 0021     		movs	r1, #0
 203 000a 7868     		ldr	r0, [r7, #4]
 204 000c FFF7FEFF 		bl	MT25TL01G_ResetEnable
  55:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,0);
 205              		.loc 1 55 5
 206 0010 0021     		movs	r1, #0
 207 0012 7868     		ldr	r0, [r7, #4]
 208 0014 FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  56:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 209              		.loc 1 56 5
 210 0018 7868     		ldr	r0, [r7, #4]
 211 001a FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  57:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,1);
 212              		.loc 1 57 5
 213 001e 0121     		movs	r1, #1
 214 0020 7868     		ldr	r0, [r7, #4]
 215 0022 FFF7FEFF 		bl	MT25TL01G_ResetEnable
  58:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,1);
 216              		.loc 1 58 5
 217 0026 0121     		movs	r1, #1
 218 0028 7868     		ldr	r0, [r7, #4]
 219 002a FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  59:./BSP/Components/Src/mt25tl01g.c **** }
 220              		.loc 1 59 1
 221 002e 00BF     		nop
ARM GAS  /tmp/ccKBMVaa.s 			page 25


 222 0030 0837     		adds	r7, r7, #8
 223              	.LCFI8:
 224              		.cfi_def_cfa_offset 8
 225 0032 BD46     		mov	sp, r7
 226              	.LCFI9:
 227              		.cfi_def_cfa_register 13
 228              		@ sp needed
 229 0034 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE339:
 233              		.section	.text.MT25TL01G_DummyCyclesCfg,"ax",%progbits
 234              		.align	1
 235              		.global	MT25TL01G_DummyCyclesCfg
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv5-d16
 241              	MT25TL01G_DummyCyclesCfg:
 242              	.LFB340:
  60:./BSP/Components/Src/mt25tl01g.c **** 
  61:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object)
  62:./BSP/Components/Src/mt25tl01g.c **** {
 243              		.loc 1 62 1
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 72
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              	.LCFI10:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 92B0     		sub	sp, sp, #72
 253              	.LCFI11:
 254              		.cfi_def_cfa_offset 80
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI12:
 257              		.cfi_def_cfa_register 7
 258 0006 7860     		str	r0, [r7, #4]
  63:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
  64:./BSP/Components/Src/mt25tl01g.c ****     uint16_t reg=0;
 259              		.loc 1 64 14
 260 0008 0023     		movs	r3, #0
 261 000a FB81     		strh	r3, [r7, #14]	@ movhi
  65:./BSP/Components/Src/mt25tl01g.c **** 
  66:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the read volatile configuration register command */
  67:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 262              		.loc 1 67 31
 263 000c 4FF44073 		mov	r3, #768
 264 0010 BB62     		str	r3, [r7, #40]
  68:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 265              		.loc 1 68 31
 266 0012 8523     		movs	r3, #133
 267 0014 3B61     		str	r3, [r7, #16]
  69:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 268              		.loc 1 69 31
 269 0016 0023     		movs	r3, #0
 270 0018 FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/ccKBMVaa.s 			page 26


  70:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 271              		.loc 1 70 31
 272 001a 0023     		movs	r3, #0
 273 001c 3B63     		str	r3, [r7, #48]
  71:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 274              		.loc 1 71 31
 275 001e 4FF04073 		mov	r3, #50331648
 276 0022 7B63     		str	r3, [r7, #52]
  72:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 277              		.loc 1 72 31
 278 0024 0023     		movs	r3, #0
 279 0026 7B62     		str	r3, [r7, #36]
  73:./BSP/Components/Src/mt25tl01g.c ****     command.NbData            = 2;
 280              		.loc 1 73 31
 281 0028 0223     		movs	r3, #2
 282 002a BB63     		str	r3, [r7, #56]
  74:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 283              		.loc 1 74 31
 284 002c 0023     		movs	r3, #0
 285 002e FB63     		str	r3, [r7, #60]
  75:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 286              		.loc 1 75 31
 287 0030 0023     		movs	r3, #0
 288 0032 3B64     		str	r3, [r7, #64]
  76:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 289              		.loc 1 76 31
 290 0034 0023     		movs	r3, #0
 291 0036 7B64     		str	r3, [r7, #68]
  77:./BSP/Components/Src/mt25tl01g.c **** 
  78:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 292              		.loc 1 78 11
 293 0038 7B68     		ldr	r3, [r7, #4]
 294 003a 9B6F     		ldr	r3, [r3, #120]
 295              		.loc 1 78 5
 296 003c 07F11002 		add	r2, r7, #16
 297 0040 1146     		mov	r1, r2
 298 0042 7868     		ldr	r0, [r7, #4]
 299 0044 9847     		blx	r3
 300              	.LVL1:
  79:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_readData(object,(uint8_t*)(&reg));
 301              		.loc 1 79 11
 302 0046 7B68     		ldr	r3, [r7, #4]
 303 0048 D3F88030 		ldr	r3, [r3, #128]
 304              		.loc 1 79 5
 305 004c 07F10E02 		add	r2, r7, #14
 306 0050 1146     		mov	r1, r2
 307 0052 7868     		ldr	r0, [r7, #4]
 308 0054 9847     		blx	r3
 309              	.LVL2:
  80:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,0);
 310              		.loc 1 80 5
 311 0056 0021     		movs	r1, #0
 312 0058 7868     		ldr	r0, [r7, #4]
 313 005a FFF7FEFF 		bl	MT25TL01G_WriteEnable
  81:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 314              		.loc 1 81 25
 315 005e 8123     		movs	r3, #129
ARM GAS  /tmp/ccKBMVaa.s 			page 27


 316 0060 3B61     		str	r3, [r7, #16]
  82:./BSP/Components/Src/mt25tl01g.c ****     MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 317              		.loc 1 82 5
 318 0062 FA89     		ldrh	r2, [r7, #14]
 319 0064 40F60F73 		movw	r3, #3855
 320 0068 1340     		ands	r3, r3, r2
 321 006a 9AB2     		uxth	r2, r3
 322 006c 0A4B     		ldr	r3, .L9
 323 006e 1343     		orrs	r3, r3, r2
 324 0070 9BB2     		uxth	r3, r3
 325 0072 FB81     		strh	r3, [r7, #14]	@ movhi
  83:./BSP/Components/Src/mt25tl01g.c ****                                (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));
  84:./BSP/Components/Src/mt25tl01g.c **** 
  85:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 326              		.loc 1 85 11
 327 0074 7B68     		ldr	r3, [r7, #4]
 328 0076 9B6F     		ldr	r3, [r3, #120]
 329              		.loc 1 85 5
 330 0078 07F11002 		add	r2, r7, #16
 331 007c 1146     		mov	r1, r2
 332 007e 7868     		ldr	r0, [r7, #4]
 333 0080 9847     		blx	r3
 334              	.LVL3:
  86:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeData(object,(uint8_t*)(&reg));
 335              		.loc 1 86 11
 336 0082 7B68     		ldr	r3, [r7, #4]
 337 0084 DB6F     		ldr	r3, [r3, #124]
 338              		.loc 1 86 5
 339 0086 07F10E02 		add	r2, r7, #14
 340 008a 1146     		mov	r1, r2
 341 008c 7868     		ldr	r0, [r7, #4]
 342 008e 9847     		blx	r3
 343              	.LVL4:
  87:./BSP/Components/Src/mt25tl01g.c **** }
 344              		.loc 1 87 1
 345 0090 00BF     		nop
 346 0092 4837     		adds	r7, r7, #72
 347              	.LCFI13:
 348              		.cfi_def_cfa_offset 8
 349 0094 BD46     		mov	sp, r7
 350              	.LCFI14:
 351              		.cfi_def_cfa_register 13
 352              		@ sp needed
 353 0096 80BD     		pop	{r7, pc}
 354              	.L10:
 355              		.align	2
 356              	.L9:
 357 0098 8080FFFF 		.word	-32640
 358              		.cfi_endproc
 359              	.LFE340:
 361              		.section	.text.MT25TL01G_EnableMemoryMappedMode,"ax",%progbits
 362              		.align	1
 363              		.global	MT25TL01G_EnableMemoryMappedMode
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv5-d16
ARM GAS  /tmp/ccKBMVaa.s 			page 28


 369              	MT25TL01G_EnableMemoryMappedMode:
 370              	.LFB341:
  88:./BSP/Components/Src/mt25tl01g.c **** 
  89:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedMode(QSPI_objectTypeDef *object)
  90:./BSP/Components/Src/mt25tl01g.c **** {
 371              		.loc 1 90 1
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 8
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375 0000 80B5     		push	{r7, lr}
 376              	.LCFI15:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380 0002 82B0     		sub	sp, sp, #8
 381              	.LCFI16:
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              	.LCFI17:
 385              		.cfi_def_cfa_register 7
 386 0006 7860     		str	r0, [r7, #4]
  91:./BSP/Components/Src/mt25tl01g.c ****     if(object->object_attr.transferRate==QSPI_STR_TRANSFER)
 387              		.loc 1 91 27
 388 0008 7B68     		ldr	r3, [r7, #4]
 389 000a 1B6F     		ldr	r3, [r3, #112]
 390              		.loc 1 91 7
 391 000c 012B     		cmp	r3, #1
 392 000e 04D1     		bne	.L12
  92:./BSP/Components/Src/mt25tl01g.c ****     {
  93:./BSP/Components/Src/mt25tl01g.c ****         MT25TL01G_EnableMemoryMappedModeSTR(object,3);
 393              		.loc 1 93 9
 394 0010 0321     		movs	r1, #3
 395 0012 7868     		ldr	r0, [r7, #4]
 396 0014 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedModeSTR
  94:./BSP/Components/Src/mt25tl01g.c ****     }
  95:./BSP/Components/Src/mt25tl01g.c ****     else if(object->object_attr.transferRate==QSPI_DTR_TRANSFER)
  96:./BSP/Components/Src/mt25tl01g.c ****     {
  97:./BSP/Components/Src/mt25tl01g.c ****         MT25TL01G_EnableMemoryMappedModeDTR(object,3);
  98:./BSP/Components/Src/mt25tl01g.c ****     }
  99:./BSP/Components/Src/mt25tl01g.c **** }
 397              		.loc 1 99 1
 398 0018 07E0     		b	.L14
 399              	.L12:
  95:./BSP/Components/Src/mt25tl01g.c ****     {
 400              		.loc 1 95 32
 401 001a 7B68     		ldr	r3, [r7, #4]
 402 001c 1B6F     		ldr	r3, [r3, #112]
  95:./BSP/Components/Src/mt25tl01g.c ****     {
 403              		.loc 1 95 12
 404 001e 032B     		cmp	r3, #3
 405 0020 03D1     		bne	.L14
  97:./BSP/Components/Src/mt25tl01g.c ****     }
 406              		.loc 1 97 9
 407 0022 0321     		movs	r1, #3
 408 0024 7868     		ldr	r0, [r7, #4]
 409 0026 FFF7FEFF 		bl	MT25TL01G_EnableMemoryMappedModeDTR
 410              	.L14:
ARM GAS  /tmp/ccKBMVaa.s 			page 29


 411              		.loc 1 99 1
 412 002a 00BF     		nop
 413 002c 0837     		adds	r7, r7, #8
 414              	.LCFI18:
 415              		.cfi_def_cfa_offset 8
 416 002e BD46     		mov	sp, r7
 417              	.LCFI19:
 418              		.cfi_def_cfa_register 13
 419              		@ sp needed
 420 0030 80BD     		pop	{r7, pc}
 421              		.cfi_endproc
 422              	.LFE341:
 424              		.section	.text.MT25TL01G_Enter4BytesAddressMode,"ax",%progbits
 425              		.align	1
 426              		.global	MT25TL01G_Enter4BytesAddressMode
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv5-d16
 432              	MT25TL01G_Enter4BytesAddressMode:
 433              	.LFB342:
 100:./BSP/Components/Src/mt25tl01g.c **** 
 101:./BSP/Components/Src/mt25tl01g.c **** /*
 102:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
 103:./BSP/Components/Src/mt25tl01g.c **** *                       hardware command setting
 104:./BSP/Components/Src/mt25tl01g.c **** *           mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 105:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
 106:./BSP/Components/Src/mt25tl01g.c **** */
 107:./BSP/Components/Src/mt25tl01g.c **** 
 108:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 109:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t mode)
 110:./BSP/Components/Src/mt25tl01g.c **** {
 434              		.loc 1 110 1
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 64
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438 0000 80B5     		push	{r7, lr}
 439              	.LCFI20:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0002 90B0     		sub	sp, sp, #64
 444              	.LCFI21:
 445              		.cfi_def_cfa_offset 72
 446 0004 00AF     		add	r7, sp, #0
 447              	.LCFI22:
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 450 0008 0B46     		mov	r3, r1
 451 000a FB70     		strb	r3, [r7, #3]
 111:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 112:./BSP/Components/Src/mt25tl01g.c **** 
 113:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the command */
 114:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 452              		.loc 1 114 67
 453 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 454 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccKBMVaa.s 			page 30


 455 0010 02D1     		bne	.L16
 456              		.loc 1 114 67 is_stmt 0 discriminator 1
 457 0012 4FF44073 		mov	r3, #768
 458 0016 01E0     		b	.L17
 459              	.L16:
 460              		.loc 1 114 67 discriminator 2
 461 0018 4FF48073 		mov	r3, #256
 462              	.L17:
 463              		.loc 1 114 31 is_stmt 1 discriminator 4
 464 001c 3B62     		str	r3, [r7, #32]
 115:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 465              		.loc 1 115 31 discriminator 4
 466 001e B723     		movs	r3, #183
 467 0020 BB60     		str	r3, [r7, #8]
 116:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 468              		.loc 1 116 31 discriminator 4
 469 0022 0023     		movs	r3, #0
 470 0024 7B62     		str	r3, [r7, #36]
 117:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 471              		.loc 1 117 31 discriminator 4
 472 0026 0023     		movs	r3, #0
 473 0028 BB62     		str	r3, [r7, #40]
 118:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 474              		.loc 1 118 31 discriminator 4
 475 002a 0023     		movs	r3, #0
 476 002c FB62     		str	r3, [r7, #44]
 119:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 477              		.loc 1 119 31 discriminator 4
 478 002e 0023     		movs	r3, #0
 479 0030 FB61     		str	r3, [r7, #28]
 120:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 480              		.loc 1 120 31 discriminator 4
 481 0032 0023     		movs	r3, #0
 482 0034 7B63     		str	r3, [r7, #52]
 121:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 483              		.loc 1 121 31 discriminator 4
 484 0036 0023     		movs	r3, #0
 485 0038 BB63     		str	r3, [r7, #56]
 122:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 486              		.loc 1 122 31 discriminator 4
 487 003a 0023     		movs	r3, #0
 488 003c FB63     		str	r3, [r7, #60]
 123:./BSP/Components/Src/mt25tl01g.c **** 
 124:./BSP/Components/Src/mt25tl01g.c ****     /*write enable */
 125:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,mode);
 489              		.loc 1 125 5 discriminator 4
 490 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 491 0040 1946     		mov	r1, r3
 492 0042 7868     		ldr	r0, [r7, #4]
 493 0044 FFF7FEFF 		bl	MT25TL01G_WriteEnable
 126:./BSP/Components/Src/mt25tl01g.c **** 
 127:./BSP/Components/Src/mt25tl01g.c ****     /* Send the command */
 128:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 494              		.loc 1 128 11 discriminator 4
 495 0048 7B68     		ldr	r3, [r7, #4]
 496 004a 9B6F     		ldr	r3, [r3, #120]
 497              		.loc 1 128 5 discriminator 4
ARM GAS  /tmp/ccKBMVaa.s 			page 31


 498 004c 07F10802 		add	r2, r7, #8
 499 0050 1146     		mov	r1, r2
 500 0052 7868     		ldr	r0, [r7, #4]
 501 0054 9847     		blx	r3
 502              	.LVL5:
 129:./BSP/Components/Src/mt25tl01g.c **** 
 130:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait the memory is ready */
 131:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 503              		.loc 1 131 5 discriminator 4
 504 0056 7868     		ldr	r0, [r7, #4]
 505 0058 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
 132:./BSP/Components/Src/mt25tl01g.c **** }
 506              		.loc 1 132 1 discriminator 4
 507 005c 00BF     		nop
 508 005e 4037     		adds	r7, r7, #64
 509              	.LCFI23:
 510              		.cfi_def_cfa_offset 8
 511 0060 BD46     		mov	sp, r7
 512              	.LCFI24:
 513              		.cfi_def_cfa_register 13
 514              		@ sp needed
 515 0062 80BD     		pop	{r7, pc}
 516              		.cfi_endproc
 517              	.LFE342:
 519              		.section	.text.MT25TL01G_ResetEnable,"ax",%progbits
 520              		.align	1
 521              		.global	MT25TL01G_ResetEnable
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv5-d16
 527              	MT25TL01G_ResetEnable:
 528              	.LFB343:
 133:./BSP/Components/Src/mt25tl01g.c **** 
 134:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 135:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode)
 136:./BSP/Components/Src/mt25tl01g.c **** {
 529              		.loc 1 136 1
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 64
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 0000 80B5     		push	{r7, lr}
 534              	.LCFI25:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 90B0     		sub	sp, sp, #64
 539              	.LCFI26:
 540              		.cfi_def_cfa_offset 72
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI27:
 543              		.cfi_def_cfa_register 7
 544 0006 7860     		str	r0, [r7, #4]
 545 0008 0B46     		mov	r3, r1
 546 000a FB70     		strb	r3, [r7, #3]
 137:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 138:./BSP/Components/Src/mt25tl01g.c **** 
ARM GAS  /tmp/ccKBMVaa.s 			page 32


 139:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 140:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 141:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 547              		.loc 1 141 67
 548 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 549 000e 002B     		cmp	r3, #0
 550 0010 02D1     		bne	.L19
 551              		.loc 1 141 67 is_stmt 0 discriminator 1
 552 0012 4FF44073 		mov	r3, #768
 553 0016 01E0     		b	.L20
 554              	.L19:
 555              		.loc 1 141 67 discriminator 2
 556 0018 4FF48073 		mov	r3, #256
 557              	.L20:
 558              		.loc 1 141 31 is_stmt 1 discriminator 4
 559 001c 3B62     		str	r3, [r7, #32]
 142:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 560              		.loc 1 142 31 discriminator 4
 561 001e 6623     		movs	r3, #102
 562 0020 BB60     		str	r3, [r7, #8]
 143:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 563              		.loc 1 143 31 discriminator 4
 564 0022 0023     		movs	r3, #0
 565 0024 7B62     		str	r3, [r7, #36]
 144:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 566              		.loc 1 144 31 discriminator 4
 567 0026 0023     		movs	r3, #0
 568 0028 BB62     		str	r3, [r7, #40]
 145:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 569              		.loc 1 145 31 discriminator 4
 570 002a 0023     		movs	r3, #0
 571 002c FB62     		str	r3, [r7, #44]
 146:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 572              		.loc 1 146 31 discriminator 4
 573 002e 0023     		movs	r3, #0
 574 0030 FB61     		str	r3, [r7, #28]
 147:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 575              		.loc 1 147 31 discriminator 4
 576 0032 0023     		movs	r3, #0
 577 0034 7B63     		str	r3, [r7, #52]
 148:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 578              		.loc 1 148 31 discriminator 4
 579 0036 0023     		movs	r3, #0
 580 0038 BB63     		str	r3, [r7, #56]
 149:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 581              		.loc 1 149 31 discriminator 4
 582 003a 0023     		movs	r3, #0
 583 003c FB63     		str	r3, [r7, #60]
 150:./BSP/Components/Src/mt25tl01g.c **** 
 151:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 584              		.loc 1 151 11 discriminator 4
 585 003e 7B68     		ldr	r3, [r7, #4]
 586 0040 9B6F     		ldr	r3, [r3, #120]
 587              		.loc 1 151 5 discriminator 4
 588 0042 07F10802 		add	r2, r7, #8
 589 0046 1146     		mov	r1, r2
 590 0048 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccKBMVaa.s 			page 33


 591 004a 9847     		blx	r3
 592              	.LVL6:
 152:./BSP/Components/Src/mt25tl01g.c **** }
 593              		.loc 1 152 1 discriminator 4
 594 004c 00BF     		nop
 595 004e 4037     		adds	r7, r7, #64
 596              	.LCFI28:
 597              		.cfi_def_cfa_offset 8
 598 0050 BD46     		mov	sp, r7
 599              	.LCFI29:
 600              		.cfi_def_cfa_register 13
 601              		@ sp needed
 602 0052 80BD     		pop	{r7, pc}
 603              		.cfi_endproc
 604              	.LFE343:
 606              		.section	.text.MT25TL01G_ResetMemoryCMD,"ax",%progbits
 607              		.align	1
 608              		.global	MT25TL01G_ResetMemoryCMD
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv5-d16
 614              	MT25TL01G_ResetMemoryCMD:
 615              	.LFB344:
 153:./BSP/Components/Src/mt25tl01g.c **** 
 154:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 155:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode)
 156:./BSP/Components/Src/mt25tl01g.c **** {
 616              		.loc 1 156 1
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 64
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620 0000 80B5     		push	{r7, lr}
 621              	.LCFI30:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 90B0     		sub	sp, sp, #64
 626              	.LCFI31:
 627              		.cfi_def_cfa_offset 72
 628 0004 00AF     		add	r7, sp, #0
 629              	.LCFI32:
 630              		.cfi_def_cfa_register 7
 631 0006 7860     		str	r0, [r7, #4]
 632 0008 0B46     		mov	r3, r1
 633 000a FB70     		strb	r3, [r7, #3]
 157:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 158:./BSP/Components/Src/mt25tl01g.c **** 
 159:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 160:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 161:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 634              		.loc 1 161 67
 635 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 636 000e 002B     		cmp	r3, #0
 637 0010 02D1     		bne	.L22
 638              		.loc 1 161 67 is_stmt 0 discriminator 1
 639 0012 4FF44073 		mov	r3, #768
ARM GAS  /tmp/ccKBMVaa.s 			page 34


 640 0016 01E0     		b	.L23
 641              	.L22:
 642              		.loc 1 161 67 discriminator 2
 643 0018 4FF48073 		mov	r3, #256
 644              	.L23:
 645              		.loc 1 161 31 is_stmt 1 discriminator 4
 646 001c 3B62     		str	r3, [r7, #32]
 162:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_MEMORY_CMD;
 647              		.loc 1 162 31 discriminator 4
 648 001e 9923     		movs	r3, #153
 649 0020 BB60     		str	r3, [r7, #8]
 163:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 650              		.loc 1 163 31 discriminator 4
 651 0022 0023     		movs	r3, #0
 652 0024 7B62     		str	r3, [r7, #36]
 164:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 653              		.loc 1 164 31 discriminator 4
 654 0026 0023     		movs	r3, #0
 655 0028 BB62     		str	r3, [r7, #40]
 165:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 656              		.loc 1 165 31 discriminator 4
 657 002a 0023     		movs	r3, #0
 658 002c FB62     		str	r3, [r7, #44]
 166:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 659              		.loc 1 166 31 discriminator 4
 660 002e 0023     		movs	r3, #0
 661 0030 FB61     		str	r3, [r7, #28]
 167:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 662              		.loc 1 167 31 discriminator 4
 663 0032 0023     		movs	r3, #0
 664 0034 7B63     		str	r3, [r7, #52]
 168:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 665              		.loc 1 168 31 discriminator 4
 666 0036 0023     		movs	r3, #0
 667 0038 BB63     		str	r3, [r7, #56]
 169:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 668              		.loc 1 169 31 discriminator 4
 669 003a 0023     		movs	r3, #0
 670 003c FB63     		str	r3, [r7, #60]
 170:./BSP/Components/Src/mt25tl01g.c **** 
 171:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 671              		.loc 1 171 11 discriminator 4
 672 003e 7B68     		ldr	r3, [r7, #4]
 673 0040 9B6F     		ldr	r3, [r3, #120]
 674              		.loc 1 171 5 discriminator 4
 675 0042 07F10802 		add	r2, r7, #8
 676 0046 1146     		mov	r1, r2
 677 0048 7868     		ldr	r0, [r7, #4]
 678 004a 9847     		blx	r3
 679              	.LVL7:
 172:./BSP/Components/Src/mt25tl01g.c **** }
 680              		.loc 1 172 1 discriminator 4
 681 004c 00BF     		nop
 682 004e 4037     		adds	r7, r7, #64
 683              	.LCFI33:
 684              		.cfi_def_cfa_offset 8
 685 0050 BD46     		mov	sp, r7
ARM GAS  /tmp/ccKBMVaa.s 			page 35


 686              	.LCFI34:
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0052 80BD     		pop	{r7, pc}
 690              		.cfi_endproc
 691              	.LFE344:
 693              		.section	.text.MT25TL01G_AutoPollingMemReady,"ax",%progbits
 694              		.align	1
 695              		.global	MT25TL01G_AutoPollingMemReady
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu fpv5-d16
 701              	MT25TL01G_AutoPollingMemReady:
 702              	.LFB345:
 173:./BSP/Components/Src/mt25tl01g.c **** 
 174:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object)
 175:./BSP/Components/Src/mt25tl01g.c **** {
 703              		.loc 1 175 1
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 88
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707 0000 80B5     		push	{r7, lr}
 708              	.LCFI35:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 96B0     		sub	sp, sp, #88
 713              	.LCFI36:
 714              		.cfi_def_cfa_offset 96
 715 0004 00AF     		add	r7, sp, #0
 716              	.LCFI37:
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 176:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 177:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 178:./BSP/Components/Src/mt25tl01g.c **** 
 179:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for memory ready */
 180:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 719              		.loc 1 180 31
 720 0008 4FF44073 		mov	r3, #768
 721 000c BB63     		str	r3, [r7, #56]
 181:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 722              		.loc 1 181 31
 723 000e 0523     		movs	r3, #5
 724 0010 3B62     		str	r3, [r7, #32]
 182:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 725              		.loc 1 182 31
 726 0012 0023     		movs	r3, #0
 727 0014 FB63     		str	r3, [r7, #60]
 183:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 728              		.loc 1 183 31
 729 0016 0023     		movs	r3, #0
 730 0018 3B64     		str	r3, [r7, #64]
 184:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 731              		.loc 1 184 31
 732 001a 4FF04073 		mov	r3, #50331648
ARM GAS  /tmp/ccKBMVaa.s 			page 36


 733 001e 7B64     		str	r3, [r7, #68]
 185:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 2;
 734              		.loc 1 185 31
 735 0020 0223     		movs	r3, #2
 736 0022 7B63     		str	r3, [r7, #52]
 186:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 737              		.loc 1 186 31
 738 0024 0023     		movs	r3, #0
 739 0026 FB64     		str	r3, [r7, #76]
 187:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 740              		.loc 1 187 31
 741 0028 0023     		movs	r3, #0
 742 002a 3B65     		str	r3, [r7, #80]
 188:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 743              		.loc 1 188 31
 744 002c 0023     		movs	r3, #0
 745 002e 7B65     		str	r3, [r7, #84]
 189:./BSP/Components/Src/mt25tl01g.c **** 
 190:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = 0;
 746              		.loc 1 190 28
 747 0030 0023     		movs	r3, #0
 748 0032 BB60     		str	r3, [r7, #8]
 191:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 749              		.loc 1 191 28
 750 0034 0023     		movs	r3, #0
 751 0036 BB61     		str	r3, [r7, #24]
 192:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 752              		.loc 1 192 28
 753 0038 1023     		movs	r3, #16
 754 003a 3B61     		str	r3, [r7, #16]
 193:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 755              		.loc 1 193 28
 756 003c 4FF48003 		mov	r3, #4194304
 757 0040 FB61     		str	r3, [r7, #28]
 194:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 758              		.loc 1 194 28
 759 0042 40F20113 		movw	r3, #257
 760 0046 FB60     		str	r3, [r7, #12]
 195:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 761              		.loc 1 195 28
 762 0048 0223     		movs	r3, #2
 763 004a 7B61     		str	r3, [r7, #20]
 196:./BSP/Components/Src/mt25tl01g.c **** 
 197:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 764              		.loc 1 197 11
 765 004c 7B68     		ldr	r3, [r7, #4]
 766 004e D3F88430 		ldr	r3, [r3, #132]
 767              		.loc 1 197 5
 768 0052 07F10802 		add	r2, r7, #8
 769 0056 07F12001 		add	r1, r7, #32
 770 005a 7868     		ldr	r0, [r7, #4]
 771 005c 9847     		blx	r3
 772              	.LVL8:
 198:./BSP/Components/Src/mt25tl01g.c **** }
 773              		.loc 1 198 1
 774 005e 00BF     		nop
 775 0060 5837     		adds	r7, r7, #88
ARM GAS  /tmp/ccKBMVaa.s 			page 37


 776              	.LCFI38:
 777              		.cfi_def_cfa_offset 8
 778 0062 BD46     		mov	sp, r7
 779              	.LCFI39:
 780              		.cfi_def_cfa_register 13
 781              		@ sp needed
 782 0064 80BD     		pop	{r7, pc}
 783              		.cfi_endproc
 784              	.LFE345:
 786              		.section	.text.MT25TL01G_WriteEnable,"ax",%progbits
 787              		.align	1
 788              		.global	MT25TL01G_WriteEnable
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv5-d16
 794              	MT25TL01G_WriteEnable:
 795              	.LFB346:
 199:./BSP/Components/Src/mt25tl01g.c **** 
 200:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 201:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode)
 202:./BSP/Components/Src/mt25tl01g.c **** {
 796              		.loc 1 202 1
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 88
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 80B5     		push	{r7, lr}
 801              	.LCFI40:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 96B0     		sub	sp, sp, #88
 806              	.LCFI41:
 807              		.cfi_def_cfa_offset 96
 808 0004 00AF     		add	r7, sp, #0
 809              	.LCFI42:
 810              		.cfi_def_cfa_register 7
 811 0006 7860     		str	r0, [r7, #4]
 812 0008 0B46     		mov	r3, r1
 813 000a FB70     		strb	r3, [r7, #3]
 203:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 204:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 205:./BSP/Components/Src/mt25tl01g.c **** 
 206:./BSP/Components/Src/mt25tl01g.c ****     /* Enable write operations */
 207:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 814              		.loc 1 207 67
 815 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 816 000e 002B     		cmp	r3, #0
 817 0010 02D1     		bne	.L26
 818              		.loc 1 207 67 is_stmt 0 discriminator 1
 819 0012 4FF44073 		mov	r3, #768
 820 0016 01E0     		b	.L27
 821              	.L26:
 822              		.loc 1 207 67 discriminator 2
 823 0018 4FF48073 		mov	r3, #256
 824              	.L27:
 825              		.loc 1 207 31 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccKBMVaa.s 			page 38


 826 001c BB63     		str	r3, [r7, #56]
 208:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 827              		.loc 1 208 31 discriminator 4
 828 001e 0623     		movs	r3, #6
 829 0020 3B62     		str	r3, [r7, #32]
 209:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 830              		.loc 1 209 31 discriminator 4
 831 0022 0023     		movs	r3, #0
 832 0024 FB63     		str	r3, [r7, #60]
 210:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 833              		.loc 1 210 31 discriminator 4
 834 0026 0023     		movs	r3, #0
 835 0028 3B64     		str	r3, [r7, #64]
 211:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 836              		.loc 1 211 31 discriminator 4
 837 002a 0023     		movs	r3, #0
 838 002c 7B64     		str	r3, [r7, #68]
 212:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 839              		.loc 1 212 31 discriminator 4
 840 002e 0023     		movs	r3, #0
 841 0030 7B63     		str	r3, [r7, #52]
 213:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 842              		.loc 1 213 31 discriminator 4
 843 0032 0023     		movs	r3, #0
 844 0034 FB64     		str	r3, [r7, #76]
 214:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 845              		.loc 1 214 31 discriminator 4
 846 0036 0023     		movs	r3, #0
 847 0038 3B65     		str	r3, [r7, #80]
 215:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 848              		.loc 1 215 31 discriminator 4
 849 003a 0023     		movs	r3, #0
 850 003c 7B65     		str	r3, [r7, #84]
 216:./BSP/Components/Src/mt25tl01g.c **** 
 217:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 851              		.loc 1 217 11 discriminator 4
 852 003e 7B68     		ldr	r3, [r7, #4]
 853 0040 9B6F     		ldr	r3, [r3, #120]
 854              		.loc 1 217 5 discriminator 4
 855 0042 07F12002 		add	r2, r7, #32
 856 0046 1146     		mov	r1, r2
 857 0048 7868     		ldr	r0, [r7, #4]
 858 004a 9847     		blx	r3
 859              	.LVL9:
 218:./BSP/Components/Src/mt25tl01g.c **** 
 219:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for write enabling */
 220:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 860              		.loc 1 220 28 discriminator 4
 861 004c 40F20223 		movw	r3, #514
 862 0050 BB60     		str	r3, [r7, #8]
 221:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 863              		.loc 1 221 28 discriminator 4
 864 0052 40F20223 		movw	r3, #514
 865 0056 FB60     		str	r3, [r7, #12]
 222:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 866              		.loc 1 222 28 discriminator 4
 867 0058 0023     		movs	r3, #0
ARM GAS  /tmp/ccKBMVaa.s 			page 39


 868 005a BB61     		str	r3, [r7, #24]
 223:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 869              		.loc 1 223 28 discriminator 4
 870 005c 0223     		movs	r3, #2
 871 005e 7B61     		str	r3, [r7, #20]
 224:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 872              		.loc 1 224 28 discriminator 4
 873 0060 1023     		movs	r3, #16
 874 0062 3B61     		str	r3, [r7, #16]
 225:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 875              		.loc 1 225 28 discriminator 4
 876 0064 4FF48003 		mov	r3, #4194304
 877 0068 FB61     		str	r3, [r7, #28]
 226:./BSP/Components/Src/mt25tl01g.c **** 
 227:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 878              		.loc 1 227 28 discriminator 4
 879 006a 0523     		movs	r3, #5
 880 006c 3B62     		str	r3, [r7, #32]
 228:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode       = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 881              		.loc 1 228 64 discriminator 4
 882 006e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 883 0070 002B     		cmp	r3, #0
 884 0072 02D1     		bne	.L28
 885              		.loc 1 228 64 is_stmt 0 discriminator 1
 886 0074 4FF44073 		mov	r3, #768
 887 0078 01E0     		b	.L29
 888              	.L28:
 889              		.loc 1 228 64 discriminator 2
 890 007a 4FF48073 		mov	r3, #256
 891              	.L29:
 892              		.loc 1 228 28 is_stmt 1 discriminator 4
 893 007e 7B64     		str	r3, [r7, #68]
 229:./BSP/Components/Src/mt25tl01g.c **** 
 230:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 894              		.loc 1 230 11 discriminator 4
 895 0080 7B68     		ldr	r3, [r7, #4]
 896 0082 D3F88430 		ldr	r3, [r3, #132]
 897              		.loc 1 230 5 discriminator 4
 898 0086 07F10802 		add	r2, r7, #8
 899 008a 07F12001 		add	r1, r7, #32
 900 008e 7868     		ldr	r0, [r7, #4]
 901 0090 9847     		blx	r3
 902              	.LVL10:
 231:./BSP/Components/Src/mt25tl01g.c **** }
 903              		.loc 1 231 1 discriminator 4
 904 0092 00BF     		nop
 905 0094 5837     		adds	r7, r7, #88
 906              	.LCFI43:
 907              		.cfi_def_cfa_offset 8
 908 0096 BD46     		mov	sp, r7
 909              	.LCFI44:
 910              		.cfi_def_cfa_register 13
 911              		@ sp needed
 912 0098 80BD     		pop	{r7, pc}
 913              		.cfi_endproc
 914              	.LFE346:
 916              		.section	.text.MT25TL01G_EnterQPIMode,"ax",%progbits
ARM GAS  /tmp/ccKBMVaa.s 			page 40


 917              		.align	1
 918              		.global	MT25TL01G_EnterQPIMode
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv5-d16
 924              	MT25TL01G_EnterQPIMode:
 925              	.LFB347:
 232:./BSP/Components/Src/mt25tl01g.c **** 
 233:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object)
 234:./BSP/Components/Src/mt25tl01g.c **** {
 926              		.loc 1 234 1
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 64
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930 0000 80B5     		push	{r7, lr}
 931              	.LCFI45:
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 7, -8
 934              		.cfi_offset 14, -4
 935 0002 90B0     		sub	sp, sp, #64
 936              	.LCFI46:
 937              		.cfi_def_cfa_offset 72
 938 0004 00AF     		add	r7, sp, #0
 939              	.LCFI47:
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 235:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 236:./BSP/Components/Src/mt25tl01g.c **** 
 237:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 942              		.loc 1 237 31
 943 0008 4FF48073 		mov	r3, #256
 944 000c 3B62     		str	r3, [r7, #32]
 238:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 945              		.loc 1 238 31
 946 000e 3523     		movs	r3, #53
 947 0010 BB60     		str	r3, [r7, #8]
 239:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 948              		.loc 1 239 31
 949 0012 0023     		movs	r3, #0
 950 0014 7B62     		str	r3, [r7, #36]
 240:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 951              		.loc 1 240 31
 952 0016 0023     		movs	r3, #0
 953 0018 BB62     		str	r3, [r7, #40]
 241:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 954              		.loc 1 241 31
 955 001a 0023     		movs	r3, #0
 956 001c FB62     		str	r3, [r7, #44]
 242:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 957              		.loc 1 242 31
 958 001e 0023     		movs	r3, #0
 959 0020 FB61     		str	r3, [r7, #28]
 243:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 960              		.loc 1 243 31
 961 0022 0023     		movs	r3, #0
 962 0024 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/ccKBMVaa.s 			page 41


 244:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 963              		.loc 1 244 31
 964 0026 0023     		movs	r3, #0
 965 0028 BB63     		str	r3, [r7, #56]
 245:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 966              		.loc 1 245 31
 967 002a 0023     		movs	r3, #0
 968 002c FB63     		str	r3, [r7, #60]
 246:./BSP/Components/Src/mt25tl01g.c **** 
 247:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 969              		.loc 1 247 11
 970 002e 7B68     		ldr	r3, [r7, #4]
 971 0030 9B6F     		ldr	r3, [r3, #120]
 972              		.loc 1 247 5
 973 0032 07F10802 		add	r2, r7, #8
 974 0036 1146     		mov	r1, r2
 975 0038 7868     		ldr	r0, [r7, #4]
 976 003a 9847     		blx	r3
 977              	.LVL11:
 248:./BSP/Components/Src/mt25tl01g.c **** }
 978              		.loc 1 248 1
 979 003c 00BF     		nop
 980 003e 4037     		adds	r7, r7, #64
 981              	.LCFI48:
 982              		.cfi_def_cfa_offset 8
 983 0040 BD46     		mov	sp, r7
 984              	.LCFI49:
 985              		.cfi_def_cfa_register 13
 986              		@ sp needed
 987 0042 80BD     		pop	{r7, pc}
 988              		.cfi_endproc
 989              	.LFE347:
 991              		.section	.text.MT25TL01G_ExitQPIMode,"ax",%progbits
 992              		.align	1
 993              		.global	MT25TL01G_ExitQPIMode
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu fpv5-d16
 999              	MT25TL01G_ExitQPIMode:
 1000              	.LFB348:
 249:./BSP/Components/Src/mt25tl01g.c **** 
 250:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object)
 251:./BSP/Components/Src/mt25tl01g.c **** {
 1001              		.loc 1 251 1
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 64
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005 0000 80B5     		push	{r7, lr}
 1006              	.LCFI50:
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 90B0     		sub	sp, sp, #64
 1011              	.LCFI51:
 1012              		.cfi_def_cfa_offset 72
 1013 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccKBMVaa.s 			page 42


 1014              	.LCFI52:
 1015              		.cfi_def_cfa_register 7
 1016 0006 7860     		str	r0, [r7, #4]
 252:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 253:./BSP/Components/Src/mt25tl01g.c **** 
 254:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1017              		.loc 1 254 31
 1018 0008 4FF48073 		mov	r3, #256
 1019 000c 3B62     		str	r3, [r7, #32]
 255:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 1020              		.loc 1 255 31
 1021 000e F523     		movs	r3, #245
 1022 0010 BB60     		str	r3, [r7, #8]
 256:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 1023              		.loc 1 256 31
 1024 0012 0023     		movs	r3, #0
 1025 0014 7B62     		str	r3, [r7, #36]
 257:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1026              		.loc 1 257 31
 1027 0016 0023     		movs	r3, #0
 1028 0018 BB62     		str	r3, [r7, #40]
 258:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 1029              		.loc 1 258 31
 1030 001a 0023     		movs	r3, #0
 1031 001c FB62     		str	r3, [r7, #44]
 259:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 1032              		.loc 1 259 31
 1033 001e 0023     		movs	r3, #0
 1034 0020 FB61     		str	r3, [r7, #28]
 260:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 1035              		.loc 1 260 31
 1036 0022 0023     		movs	r3, #0
 1037 0024 7B63     		str	r3, [r7, #52]
 261:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 1038              		.loc 1 261 31
 1039 0026 0023     		movs	r3, #0
 1040 0028 BB63     		str	r3, [r7, #56]
 262:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1041              		.loc 1 262 31
 1042 002a 0023     		movs	r3, #0
 1043 002c FB63     		str	r3, [r7, #60]
 263:./BSP/Components/Src/mt25tl01g.c **** 
 264:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 1044              		.loc 1 264 11
 1045 002e 7B68     		ldr	r3, [r7, #4]
 1046 0030 9B6F     		ldr	r3, [r3, #120]
 1047              		.loc 1 264 5
 1048 0032 07F10802 		add	r2, r7, #8
 1049 0036 1146     		mov	r1, r2
 1050 0038 7868     		ldr	r0, [r7, #4]
 1051 003a 9847     		blx	r3
 1052              	.LVL12:
 265:./BSP/Components/Src/mt25tl01g.c **** }
 1053              		.loc 1 265 1
 1054 003c 00BF     		nop
 1055 003e 4037     		adds	r7, r7, #64
 1056              	.LCFI53:
ARM GAS  /tmp/ccKBMVaa.s 			page 43


 1057              		.cfi_def_cfa_offset 8
 1058 0040 BD46     		mov	sp, r7
 1059              	.LCFI54:
 1060              		.cfi_def_cfa_register 13
 1061              		@ sp needed
 1062 0042 80BD     		pop	{r7, pc}
 1063              		.cfi_endproc
 1064              	.LFE348:
 1066              		.section	.text.MT25TL01G_EnableMemoryMappedModeSTR,"ax",%progbits
 1067              		.align	1
 1068              		.global	MT25TL01G_EnableMemoryMappedModeSTR
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu fpv5-d16
 1074              	MT25TL01G_EnableMemoryMappedModeSTR:
 1075              	.LFB349:
 266:./BSP/Components/Src/mt25tl01g.c **** 
 267:./BSP/Components/Src/mt25tl01g.c **** /*
 268:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 269:./BSP/Components/Src/mt25tl01g.c **** *   mode 0  =   SPI_MODE
 270:./BSP/Components/Src/mt25tl01g.c **** *   mode 1  =   SPI_2IO_MODE
 271:./BSP/Components/Src/mt25tl01g.c **** *   mode 2  =   SPI_4IO_MODE
 272:./BSP/Components/Src/mt25tl01g.c **** *   mode 3  =   QPI_MODE
 273:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 274:./BSP/Components/Src/mt25tl01g.c **** */
 275:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeSTR(QSPI_objectTypeDef *object,uint8_t mode)
 276:./BSP/Components/Src/mt25tl01g.c **** {
 1076              		.loc 1 276 1
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 72
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 0000 80B5     		push	{r7, lr}
 1081              	.LCFI55:
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 0002 92B0     		sub	sp, sp, #72
 1086              	.LCFI56:
 1087              		.cfi_def_cfa_offset 80
 1088 0004 00AF     		add	r7, sp, #0
 1089              	.LCFI57:
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 1092 0008 0B46     		mov	r3, r1
 1093 000a FB70     		strb	r3, [r7, #3]
 277:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef      command;
 278:./BSP/Components/Src/mt25tl01g.c ****     QSPI_MemoryMappedTypeDef mem_mapped_cfg;
 279:./BSP/Components/Src/mt25tl01g.c ****     switch(mode)
 1094              		.loc 1 279 5
 1095 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1096 000e 032B     		cmp	r3, #3
 1097 0010 3AD8     		bhi	.L33
 1098 0012 01A2     		adr	r2, .L35
 1099 0014 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1100              		.p2align 2
 1101              	.L35:
ARM GAS  /tmp/ccKBMVaa.s 			page 44


 1102 0018 29000000 		.word	.L38+1
 1103 001c 41000000 		.word	.L37+1
 1104 0020 59000000 		.word	.L36+1
 1105 0024 71000000 		.word	.L34+1
 1106              		.p2align 1
 1107              	.L38:
 280:./BSP/Components/Src/mt25tl01g.c ****     {
 281:./BSP/Components/Src/mt25tl01g.c ****         case 0:     /* 1-1-1 read commands */
 282:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1108              		.loc 1 282 39
 1109 0028 4FF48073 		mov	r3, #256
 1110 002c BB62     		str	r3, [r7, #40]
 283:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 1111              		.loc 1 283 39
 1112 002e 0C23     		movs	r3, #12
 1113 0030 3B61     		str	r3, [r7, #16]
 284:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1114              		.loc 1 284 39
 1115 0032 4FF48063 		mov	r3, #1024
 1116 0036 FB62     		str	r3, [r7, #44]
 285:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_1_LINE;
 1117              		.loc 1 285 39
 1118 0038 4FF08073 		mov	r3, #16777216
 1119 003c 7B63     		str	r3, [r7, #52]
 286:./BSP/Components/Src/mt25tl01g.c ****             break;
 1120              		.loc 1 286 13
 1121 003e 23E0     		b	.L33
 1122              	.L37:
 287:./BSP/Components/Src/mt25tl01g.c **** 
 288:./BSP/Components/Src/mt25tl01g.c ****         case 1:     /* 1-2-2 read commands */
 289:./BSP/Components/Src/mt25tl01g.c **** 
 290:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1123              		.loc 1 290 39
 1124 0040 4FF48073 		mov	r3, #256
 1125 0044 BB62     		str	r3, [r7, #40]
 291:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 1126              		.loc 1 291 39
 1127 0046 BC23     		movs	r3, #188
 1128 0048 3B61     		str	r3, [r7, #16]
 292:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_2_LINES;
 1129              		.loc 1 292 39
 1130 004a 4FF40063 		mov	r3, #2048
 1131 004e FB62     		str	r3, [r7, #44]
 293:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_2_LINES;
 1132              		.loc 1 293 39
 1133 0050 4FF00073 		mov	r3, #33554432
 1134 0054 7B63     		str	r3, [r7, #52]
 294:./BSP/Components/Src/mt25tl01g.c ****             break;
 1135              		.loc 1 294 13
 1136 0056 17E0     		b	.L33
 1137              	.L36:
 295:./BSP/Components/Src/mt25tl01g.c **** 
 296:./BSP/Components/Src/mt25tl01g.c ****         case 2:     /* 1-4-4 read commands */
 297:./BSP/Components/Src/mt25tl01g.c **** 
 298:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1138              		.loc 1 298 39
 1139 0058 4FF48073 		mov	r3, #256
ARM GAS  /tmp/ccKBMVaa.s 			page 45


 1140 005c BB62     		str	r3, [r7, #40]
 299:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 1141              		.loc 1 299 39
 1142 005e EC23     		movs	r3, #236
 1143 0060 3B61     		str	r3, [r7, #16]
 300:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1144              		.loc 1 300 39
 1145 0062 4FF44063 		mov	r3, #3072
 1146 0066 FB62     		str	r3, [r7, #44]
 301:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1147              		.loc 1 301 39
 1148 0068 4FF04073 		mov	r3, #50331648
 1149 006c 7B63     		str	r3, [r7, #52]
 302:./BSP/Components/Src/mt25tl01g.c ****             break;
 1150              		.loc 1 302 13
 1151 006e 0BE0     		b	.L33
 1152              	.L34:
 303:./BSP/Components/Src/mt25tl01g.c **** 
 304:./BSP/Components/Src/mt25tl01g.c ****         case 3:     /* 4-4-4 commands */
 305:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 1153              		.loc 1 305 39
 1154 0070 4FF44073 		mov	r3, #768
 1155 0074 BB62     		str	r3, [r7, #40]
 306:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 1156              		.loc 1 306 39
 1157 0076 EB23     		movs	r3, #235
 1158 0078 3B61     		str	r3, [r7, #16]
 307:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1159              		.loc 1 307 39
 1160 007a 4FF44063 		mov	r3, #3072
 1161 007e FB62     		str	r3, [r7, #44]
 308:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1162              		.loc 1 308 39
 1163 0080 4FF04073 		mov	r3, #50331648
 1164 0084 7B63     		str	r3, [r7, #52]
 309:./BSP/Components/Src/mt25tl01g.c ****             break;
 1165              		.loc 1 309 13
 1166 0086 00BF     		nop
 1167              	.L33:
 310:./BSP/Components/Src/mt25tl01g.c ****     }
 311:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the command for the read instruction */
 312:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 1168              		.loc 1 312 31
 1169 0088 0823     		movs	r3, #8
 1170 008a 7B62     		str	r3, [r7, #36]
 313:./BSP/Components/Src/mt25tl01g.c ****     command.AddressSize       = QSPI_ADDRESS_32_BITS;
 1171              		.loc 1 313 31
 1172 008c 4FF44053 		mov	r3, #12288
 1173 0090 FB61     		str	r3, [r7, #28]
 314:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1174              		.loc 1 314 31
 1175 0092 0023     		movs	r3, #0
 1176 0094 3B63     		str	r3, [r7, #48]
 315:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 1177              		.loc 1 315 31
 1178 0096 0023     		movs	r3, #0
 1179 0098 FB63     		str	r3, [r7, #60]
ARM GAS  /tmp/ccKBMVaa.s 			page 46


 316:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 1180              		.loc 1 316 31
 1181 009a 0023     		movs	r3, #0
 1182 009c 3B64     		str	r3, [r7, #64]
 317:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1183              		.loc 1 317 31
 1184 009e 0023     		movs	r3, #0
 1185 00a0 7B64     		str	r3, [r7, #68]
 318:./BSP/Components/Src/mt25tl01g.c **** 
 319:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the memory mapped mode */
 320:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 1186              		.loc 1 320 38
 1187 00a2 0023     		movs	r3, #0
 1188 00a4 FB60     		str	r3, [r7, #12]
 321:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutPeriod     = 0;
 1189              		.loc 1 321 38
 1190 00a6 0023     		movs	r3, #0
 1191 00a8 BB60     		str	r3, [r7, #8]
 322:./BSP/Components/Src/mt25tl01g.c **** 
 323:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_memoryMapped(object,&command,&mem_mapped_cfg);
 1192              		.loc 1 323 11
 1193 00aa 7B68     		ldr	r3, [r7, #4]
 1194 00ac D3F88830 		ldr	r3, [r3, #136]
 1195              		.loc 1 323 5
 1196 00b0 07F10802 		add	r2, r7, #8
 1197 00b4 07F11001 		add	r1, r7, #16
 1198 00b8 7868     		ldr	r0, [r7, #4]
 1199 00ba 9847     		blx	r3
 1200              	.LVL13:
 324:./BSP/Components/Src/mt25tl01g.c **** }
 1201              		.loc 1 324 1
 1202 00bc 00BF     		nop
 1203 00be 4837     		adds	r7, r7, #72
 1204              	.LCFI58:
 1205              		.cfi_def_cfa_offset 8
 1206 00c0 BD46     		mov	sp, r7
 1207              	.LCFI59:
 1208              		.cfi_def_cfa_register 13
 1209              		@ sp needed
 1210 00c2 80BD     		pop	{r7, pc}
 1211              		.cfi_endproc
 1212              	.LFE349:
 1214              		.section	.text.MT25TL01G_EnableMemoryMappedModeDTR,"ax",%progbits
 1215              		.align	1
 1216              		.global	MT25TL01G_EnableMemoryMappedModeDTR
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu fpv5-d16
 1222              	MT25TL01G_EnableMemoryMappedModeDTR:
 1223              	.LFB350:
 325:./BSP/Components/Src/mt25tl01g.c **** 
 326:./BSP/Components/Src/mt25tl01g.c **** /*
 327:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 328:./BSP/Components/Src/mt25tl01g.c **** *   mode 0  =   SPI_MODE
 329:./BSP/Components/Src/mt25tl01g.c **** *   mode 1  =   SPI_2IO_MODE
 330:./BSP/Components/Src/mt25tl01g.c **** *   mode 2  =   SPI_4IO_MODE
ARM GAS  /tmp/ccKBMVaa.s 			page 47


 331:./BSP/Components/Src/mt25tl01g.c **** *   mode 3  =   QPI_MODE
 332:./BSP/Components/Src/mt25tl01g.c **** ********************************************************************************
 333:./BSP/Components/Src/mt25tl01g.c **** */
 334:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnableMemoryMappedModeDTR(QSPI_objectTypeDef *object,uint8_t mode)
 335:./BSP/Components/Src/mt25tl01g.c **** {
 1224              		.loc 1 335 1
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 72
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228 0000 80B5     		push	{r7, lr}
 1229              	.LCFI60:
 1230              		.cfi_def_cfa_offset 8
 1231              		.cfi_offset 7, -8
 1232              		.cfi_offset 14, -4
 1233 0002 92B0     		sub	sp, sp, #72
 1234              	.LCFI61:
 1235              		.cfi_def_cfa_offset 80
 1236 0004 00AF     		add	r7, sp, #0
 1237              	.LCFI62:
 1238              		.cfi_def_cfa_register 7
 1239 0006 7860     		str	r0, [r7, #4]
 1240 0008 0B46     		mov	r3, r1
 1241 000a FB70     		strb	r3, [r7, #3]
 336:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef      command;
 337:./BSP/Components/Src/mt25tl01g.c ****     QSPI_MemoryMappedTypeDef mem_mapped_cfg;
 338:./BSP/Components/Src/mt25tl01g.c ****     switch(mode)
 1242              		.loc 1 338 5
 1243 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1244 000e 032B     		cmp	r3, #3
 1245 0010 3AD8     		bhi	.L40
 1246 0012 01A2     		adr	r2, .L42
 1247 0014 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1248              		.p2align 2
 1249              	.L42:
 1250 0018 29000000 		.word	.L45+1
 1251 001c 41000000 		.word	.L44+1
 1252 0020 59000000 		.word	.L43+1
 1253 0024 71000000 		.word	.L41+1
 1254              		.p2align 1
 1255              	.L45:
 339:./BSP/Components/Src/mt25tl01g.c ****     {
 340:./BSP/Components/Src/mt25tl01g.c ****         case 0:                /* 1-1-1 commands, Power on H/W default setting */
 341:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1256              		.loc 1 341 39
 1257 0028 4FF48073 		mov	r3, #256
 1258 002c BB62     		str	r3, [r7, #40]
 342:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 1259              		.loc 1 342 39
 1260 002e 0E23     		movs	r3, #14
 1261 0030 3B61     		str	r3, [r7, #16]
 343:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1262              		.loc 1 343 39
 1263 0032 4FF48063 		mov	r3, #1024
 1264 0036 FB62     		str	r3, [r7, #44]
 344:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_1_LINE;
 1265              		.loc 1 344 39
 1266 0038 4FF08073 		mov	r3, #16777216
ARM GAS  /tmp/ccKBMVaa.s 			page 48


 1267 003c 7B63     		str	r3, [r7, #52]
 345:./BSP/Components/Src/mt25tl01g.c ****             break;
 1268              		.loc 1 345 13
 1269 003e 23E0     		b	.L40
 1270              	.L44:
 346:./BSP/Components/Src/mt25tl01g.c **** 
 347:./BSP/Components/Src/mt25tl01g.c ****         case 1:           /* 1-1-2 read commands */
 348:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1271              		.loc 1 348 39
 1272 0040 4FF48073 		mov	r3, #256
 1273 0044 BB62     		str	r3, [r7, #40]
 349:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 1274              		.loc 1 349 39
 1275 0046 3D23     		movs	r3, #61
 1276 0048 3B61     		str	r3, [r7, #16]
 350:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_1_LINE;
 1277              		.loc 1 350 39
 1278 004a 4FF48063 		mov	r3, #1024
 1279 004e FB62     		str	r3, [r7, #44]
 351:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_2_LINES;
 1280              		.loc 1 351 39
 1281 0050 4FF00073 		mov	r3, #33554432
 1282 0054 7B63     		str	r3, [r7, #52]
 352:./BSP/Components/Src/mt25tl01g.c ****         break;
 1283              		.loc 1 352 9
 1284 0056 17E0     		b	.L40
 1285              	.L43:
 353:./BSP/Components/Src/mt25tl01g.c **** 
 354:./BSP/Components/Src/mt25tl01g.c ****         case 2:             /* 1-4-4 read commands */
 355:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 1286              		.loc 1 355 39
 1287 0058 4FF48073 		mov	r3, #256
 1288 005c BB62     		str	r3, [r7, #40]
 356:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 1289              		.loc 1 356 39
 1290 005e EE23     		movs	r3, #238
 1291 0060 3B61     		str	r3, [r7, #16]
 357:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1292              		.loc 1 357 39
 1293 0062 4FF44063 		mov	r3, #3072
 1294 0066 FB62     		str	r3, [r7, #44]
 358:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1295              		.loc 1 358 39
 1296 0068 4FF04073 		mov	r3, #50331648
 1297 006c 7B63     		str	r3, [r7, #52]
 359:./BSP/Components/Src/mt25tl01g.c ****             break;
 1298              		.loc 1 359 13
 1299 006e 0BE0     		b	.L40
 1300              	.L41:
 360:./BSP/Components/Src/mt25tl01g.c **** 
 361:./BSP/Components/Src/mt25tl01g.c ****         case 3:                 /* 4-4-4 commands */
 362:./BSP/Components/Src/mt25tl01g.c ****             command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 1301              		.loc 1 362 39
 1302 0070 4FF44073 		mov	r3, #768
 1303 0074 BB62     		str	r3, [r7, #40]
 363:./BSP/Components/Src/mt25tl01g.c ****             command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 1304              		.loc 1 363 39
ARM GAS  /tmp/ccKBMVaa.s 			page 49


 1305 0076 ED23     		movs	r3, #237
 1306 0078 3B61     		str	r3, [r7, #16]
 364:./BSP/Components/Src/mt25tl01g.c ****             command.AddressMode       = QSPI_ADDRESS_4_LINES;
 1307              		.loc 1 364 39
 1308 007a 4FF44063 		mov	r3, #3072
 1309 007e FB62     		str	r3, [r7, #44]
 365:./BSP/Components/Src/mt25tl01g.c ****             command.DataMode          = QSPI_DATA_4_LINES;
 1310              		.loc 1 365 39
 1311 0080 4FF04073 		mov	r3, #50331648
 1312 0084 7B63     		str	r3, [r7, #52]
 366:./BSP/Components/Src/mt25tl01g.c ****             break;
 1313              		.loc 1 366 13
 1314 0086 00BF     		nop
 1315              	.L40:
 367:./BSP/Components/Src/mt25tl01g.c ****     }
 368:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the command for the read instruction */
 369:./BSP/Components/Src/mt25tl01g.c ****     command.AddressSize       = QSPI_ADDRESS_32_BITS;
 1316              		.loc 1 369 31
 1317 0088 4FF44053 		mov	r3, #12288
 1318 008c FB61     		str	r3, [r7, #28]
 370:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 1319              		.loc 1 370 31
 1320 008e 0023     		movs	r3, #0
 1321 0090 3B63     		str	r3, [r7, #48]
 371:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 1322              		.loc 1 371 31
 1323 0092 0823     		movs	r3, #8
 1324 0094 7B62     		str	r3, [r7, #36]
 372:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 1325              		.loc 1 372 31
 1326 0096 4FF00043 		mov	r3, #-2147483648
 1327 009a FB63     		str	r3, [r7, #60]
 373:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 1328              		.loc 1 373 31
 1329 009c 4FF08043 		mov	r3, #1073741824
 1330 00a0 3B64     		str	r3, [r7, #64]
 374:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 1331              		.loc 1 374 31
 1332 00a2 0023     		movs	r3, #0
 1333 00a4 7B64     		str	r3, [r7, #68]
 375:./BSP/Components/Src/mt25tl01g.c **** 
 376:./BSP/Components/Src/mt25tl01g.c ****     /* Configure the memory mapped mode */
 377:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 1334              		.loc 1 377 38
 1335 00a6 0023     		movs	r3, #0
 1336 00a8 FB60     		str	r3, [r7, #12]
 378:./BSP/Components/Src/mt25tl01g.c ****     mem_mapped_cfg.TimeOutPeriod     = 0;
 1337              		.loc 1 378 38
 1338 00aa 0023     		movs	r3, #0
 1339 00ac BB60     		str	r3, [r7, #8]
 379:./BSP/Components/Src/mt25tl01g.c **** 
 380:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_memoryMapped(object,&command,&mem_mapped_cfg);
 1340              		.loc 1 380 11
 1341 00ae 7B68     		ldr	r3, [r7, #4]
 1342 00b0 D3F88830 		ldr	r3, [r3, #136]
 1343              		.loc 1 380 5
 1344 00b4 07F10802 		add	r2, r7, #8
ARM GAS  /tmp/ccKBMVaa.s 			page 50


 1345 00b8 07F11001 		add	r1, r7, #16
 1346 00bc 7868     		ldr	r0, [r7, #4]
 1347 00be 9847     		blx	r3
 1348              	.LVL14:
 381:./BSP/Components/Src/mt25tl01g.c **** }...
 1349              		.loc 1 381 1
 1350 00c0 00BF     		nop
 1351 00c2 4837     		adds	r7, r7, #72
 1352              	.LCFI63:
 1353              		.cfi_def_cfa_offset 8
 1354 00c4 BD46     		mov	sp, r7
 1355              	.LCFI64:
 1356              		.cfi_def_cfa_register 13
 1357              		@ sp needed
 1358 00c6 80BD     		pop	{r7, pc}
 1359              		.cfi_endproc
 1360              	.LFE350:
 1362              		.text
 1363              	.Letext0:
 1364              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1365              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 1366              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 1367              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 1368              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1369              		.file 8 "/usr/include/newlib/sys/_types.h"
 1370              		.file 9 "/usr/include/newlib/sys/reent.h"
 1371              		.file 10 "/usr/include/newlib/sys/lock.h"
 1372              		.file 11 "/usr/include/newlib/math.h"
 1373              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1374              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 1375              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 1376              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
 1377              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1378              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1379              		.file 18 "/usr/include/newlib/stdlib.h"
 1380              		.file 19 "./BSP/Components/Src/../../Components/Inc/lcd.h"
 1381              		.file 20 "./BSP/Components/Src/../../Hardware/Inc/qspi.h"
ARM GAS  /tmp/ccKBMVaa.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mt25tl01g.c
     /tmp/ccKBMVaa.s:21     .data.qspi_attr:0000000000000000 qspi_attr
     /tmp/ccKBMVaa.s:18     .data.qspi_attr:0000000000000000 $d
     /tmp/ccKBMVaa.s:33     .text.mt25tl01g_Init:0000000000000000 $t
     /tmp/ccKBMVaa.s:41     .text.mt25tl01g_Init:0000000000000000 mt25tl01g_Init
     /tmp/ccKBMVaa.s:527    .text.MT25TL01G_ResetEnable:0000000000000000 MT25TL01G_ResetEnable
     /tmp/ccKBMVaa.s:183    .text.MT25TL01G_ResetMemory:0000000000000000 MT25TL01G_ResetMemory
     /tmp/ccKBMVaa.s:701    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 MT25TL01G_AutoPollingMemReady
     /tmp/ccKBMVaa.s:432    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 MT25TL01G_Enter4BytesAddressMode
     /tmp/ccKBMVaa.s:241    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 MT25TL01G_DummyCyclesCfg
     /tmp/ccKBMVaa.s:999    .text.MT25TL01G_ExitQPIMode:0000000000000000 MT25TL01G_ExitQPIMode
     /tmp/ccKBMVaa.s:924    .text.MT25TL01G_EnterQPIMode:0000000000000000 MT25TL01G_EnterQPIMode
     /tmp/ccKBMVaa.s:369    .text.MT25TL01G_EnableMemoryMappedMode:0000000000000000 MT25TL01G_EnableMemoryMappedMode
     /tmp/ccKBMVaa.s:171    .text.mt25tl01g_Init:00000000000000bc $d
     /tmp/ccKBMVaa.s:176    .text.MT25TL01G_ResetMemory:0000000000000000 $t
     /tmp/ccKBMVaa.s:614    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 MT25TL01G_ResetMemoryCMD
     /tmp/ccKBMVaa.s:234    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 $t
     /tmp/ccKBMVaa.s:794    .text.MT25TL01G_WriteEnable:0000000000000000 MT25TL01G_WriteEnable
     /tmp/ccKBMVaa.s:357    .text.MT25TL01G_DummyCyclesCfg:0000000000000098 $d
     /tmp/ccKBMVaa.s:362    .text.MT25TL01G_EnableMemoryMappedMode:0000000000000000 $t
     /tmp/ccKBMVaa.s:1074   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000000 MT25TL01G_EnableMemoryMappedModeSTR
     /tmp/ccKBMVaa.s:1222   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000000 MT25TL01G_EnableMemoryMappedModeDTR
     /tmp/ccKBMVaa.s:425    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 $t
     /tmp/ccKBMVaa.s:520    .text.MT25TL01G_ResetEnable:0000000000000000 $t
     /tmp/ccKBMVaa.s:607    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 $t
     /tmp/ccKBMVaa.s:694    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 $t
     /tmp/ccKBMVaa.s:787    .text.MT25TL01G_WriteEnable:0000000000000000 $t
     /tmp/ccKBMVaa.s:917    .text.MT25TL01G_EnterQPIMode:0000000000000000 $t
     /tmp/ccKBMVaa.s:992    .text.MT25TL01G_ExitQPIMode:0000000000000000 $t
     /tmp/ccKBMVaa.s:1067   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000000 $t
     /tmp/ccKBMVaa.s:1102   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000018 $d
     /tmp/ccKBMVaa.s:1106   .text.MT25TL01G_EnableMemoryMappedModeSTR:0000000000000028 $t
     /tmp/ccKBMVaa.s:1215   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000000 $t
     /tmp/ccKBMVaa.s:1250   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000018 $d
     /tmp/ccKBMVaa.s:1254   .text.MT25TL01G_EnableMemoryMappedModeDTR:0000000000000028 $t

UNDEFINED SYMBOLS
QSPI_object_Init
