ARM GAS  /tmp/ccFsJsUS.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"mt25tl01g.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	qspi_object,132,4
  17              		.global	qspi_attr
  18              		.section	.data.qspi_attr,"aw"
  19              		.align	2
  22              	qspi_attr:
  23 0000 00500052 		.word	1375752192
  24 0004 03000000 		.word	3
  25 0008 01000000 		.word	1
  26 000c 00000000 		.word	0
  27 0010 00000000 		.word	0
  28 0014 00030000 		.word	768
  29 0018 00000000 		.word	0
  30 001c 00000000 		.word	0
  31 0020 40000000 		.word	64
  32              		.section	.text.mt25tl01g_Init,"ax",%progbits
  33              		.align	1
  34              		.global	mt25tl01g_Init
  35              		.arch armv7e-m
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu fpv5-d16
  41              	mt25tl01g_Init:
  42              	.LFB338:
  43              		.file 1 "./BSP/Components/Src/mt25tl01g.c"
   1:./BSP/Components/Src/mt25tl01g.c **** #include "../../system.h"
   2:./BSP/Components/Src/mt25tl01g.c **** 
   3:./BSP/Components/Src/mt25tl01g.c **** QSPI_objectTypeDef qspi_object;
   4:./BSP/Components/Src/mt25tl01g.c **** 
   5:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object);
   6:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object);
   7:./BSP/Components/Src/mt25tl01g.c **** 
   8:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t Mode);
   9:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode);
  10:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode);
  11:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object);
  12:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode);
  13:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object);
  14:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object);
  15:./BSP/Components/Src/mt25tl01g.c **** 
  16:./BSP/Components/Src/mt25tl01g.c **** QSPI_objectAttr qspi_attr={
  17:./BSP/Components/Src/mt25tl01g.c ****     .Instance               = QUADSPI,
ARM GAS  /tmp/ccFsJsUS.s 			page 2


  18:./BSP/Components/Src/mt25tl01g.c ****     //STR:1，DTR：3
  19:./BSP/Components/Src/mt25tl01g.c ****     .ClockPrescaler         = 3,
  20:./BSP/Components/Src/mt25tl01g.c ****     .FifoThreshold          = 1,
  21:./BSP/Components/Src/mt25tl01g.c ****     //若為STR使用:QSPI_SAMPLE_SHIFTING_HALFCYCLE
  22:./BSP/Components/Src/mt25tl01g.c ****     .SampleShifting         = QSPI_SAMPLE_SHIFTING_NONE,
  23:./BSP/Components/Src/mt25tl01g.c ****     .FlashSize              = 0,
  24:./BSP/Components/Src/mt25tl01g.c ****     .ChipSelectHighTime     = QSPI_CS_HIGH_TIME_4_CYCLE, /* Min 50ns for nonRead */
  25:./BSP/Components/Src/mt25tl01g.c ****     .ClockMode              = QSPI_CLOCK_MODE_0,
  26:./BSP/Components/Src/mt25tl01g.c ****     .FlashID                = QSPI_FLASH_ID_1,
  27:./BSP/Components/Src/mt25tl01g.c ****     .DualFlash              = QSPI_DUALFLASH_ENABLE
  28:./BSP/Components/Src/mt25tl01g.c **** };
  29:./BSP/Components/Src/mt25tl01g.c **** 
  30:./BSP/Components/Src/mt25tl01g.c **** void mt25tl01g_Init(void)
  31:./BSP/Components/Src/mt25tl01g.c **** {
  44              		.loc 1 31 1
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 16
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 20
  51              		.cfi_offset 4, -20
  52              		.cfi_offset 5, -16
  53              		.cfi_offset 6, -12
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 8BB0     		sub	sp, sp, #44
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 64
  59 0004 06AF     		add	r7, sp, #24
  60              	.LCFI2:
  61              		.cfi_def_cfa 7, 40
  62 0006 4FF00063 		mov	r3, #134217728
  63 000a 7B60     		str	r3, [r7, #4]
  64              	.LBB6:
  65              	.LBB7:
  66              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/ccFsJsUS.s 			page 3


  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccFsJsUS.s 			page 4


  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccFsJsUS.s 			page 5


 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccFsJsUS.s 			page 6


 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
ARM GAS  /tmp/ccFsJsUS.s 			page 7


 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccFsJsUS.s 			page 8


 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFsJsUS.s 			page 9


 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
ARM GAS  /tmp/ccFsJsUS.s 			page 10


 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
ARM GAS  /tmp/ccFsJsUS.s 			page 11


 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccFsJsUS.s 			page 12


 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
ARM GAS  /tmp/ccFsJsUS.s 			page 13


 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /tmp/ccFsJsUS.s 			page 14


 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
ARM GAS  /tmp/ccFsJsUS.s 			page 15


 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccFsJsUS.s 			page 16


 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccFsJsUS.s 			page 17


 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFsJsUS.s 			page 18


 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccFsJsUS.s 			page 19


 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFsJsUS.s 			page 20


 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccFsJsUS.s 			page 21


1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  67              		.loc 2 1055 4
  68 000c 7B68     		ldr	r3, [r7, #4]
  69              		.syntax unified
  70              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
  71 000e 93FAA3F3 		rbit r3, r3
  72              	@ 0 "" 2
  73              		.thumb
  74              		.syntax unified
  75 0012 3B60     		str	r3, [r7]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
  76              		.loc 2 1068 10
  77 0014 3B68     		ldr	r3, [r7]
  78 0016 BB60     		str	r3, [r7, #8]
  79              	.LBE7:
  80              	.LBE6:
  81              	.LBB8:
  82              	.LBB9:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
ARM GAS  /tmp/ccFsJsUS.s 			page 22


1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
  83              		.loc 2 1089 6
  84 0018 BB68     		ldr	r3, [r7, #8]
  85 001a 002B     		cmp	r3, #0
  86 001c 01D1     		bne	.L3
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
  87              		.loc 2 1091 12
  88 001e 2023     		movs	r3, #32
  89 0020 03E0     		b	.L4
  90              	.L3:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
  91              		.loc 2 1093 10
  92 0022 BB68     		ldr	r3, [r7, #8]
  93 0024 B3FA83F3 		clz	r3, r3
  94 0028 DBB2     		uxtb	r3, r3
  95              	.L4:
  96              	.LBE9:
  97              	.LBE8:
  32:./BSP/Components/Src/mt25tl01g.c ****     const uint32_t size=(uint32_t)POSITION_VAL((uint32_t)MT25TL01G_FLASH_SIZE) - 1U;
  98              		.loc 1 32 20
  99 002a 013B     		subs	r3, r3, #1
 100 002c FB60     		str	r3, [r7, #12]
  33:./BSP/Components/Src/mt25tl01g.c ****     qspi_attr.FlashSize=size;
 101              		.loc 1 33 24
 102 002e 164A     		ldr	r2, .L5
 103 0030 FB68     		ldr	r3, [r7, #12]
 104 0032 1361     		str	r3, [r2, #16]
  34:./BSP/Components/Src/mt25tl01g.c **** 
  35:./BSP/Components/Src/mt25tl01g.c ****     QSPI_object_Init(&qspi_object,qspi_attr);
 105              		.loc 1 35 5
 106 0034 144E     		ldr	r6, .L5
 107 0036 6D46     		mov	r5, sp
 108 0038 06F10C04 		add	r4, r6, #12
 109 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 110 003e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 111 0040 94E80300 		ldm	r4, {r0, r1}
 112 0044 85E80300 		stm	r5, {r0, r1}
 113 0048 96E80E00 		ldm	r6, {r1, r2, r3}
 114 004c 0F48     		ldr	r0, .L5+4
 115 004e FFF7FEFF 		bl	QSPI_object_Init
  36:./BSP/Components/Src/mt25tl01g.c ****     qspi_object.qspi_init(&qspi_object);
 116              		.loc 1 36 16
 117 0052 0E4B     		ldr	r3, .L5+4
 118 0054 1B6F     		ldr	r3, [r3, #112]
 119              		.loc 1 36 5
 120 0056 0D48     		ldr	r0, .L5+4
 121 0058 9847     		blx	r3
 122              	.LVL0:
  37:./BSP/Components/Src/mt25tl01g.c **** 
  38:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemory(&qspi_object);
 123              		.loc 1 38 5
 124 005a 0C48     		ldr	r0, .L5+4
 125 005c FFF7FEFF 		bl	MT25TL01G_ResetMemory
  39:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(&qspi_object);
ARM GAS  /tmp/ccFsJsUS.s 			page 23


 126              		.loc 1 39 5
 127 0060 0A48     		ldr	r0, .L5+4
 128 0062 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  40:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_Enter4BytesAddressMode(&qspi_object,0);
 129              		.loc 1 40 5
 130 0066 0021     		movs	r1, #0
 131 0068 0848     		ldr	r0, .L5+4
 132 006a FFF7FEFF 		bl	MT25TL01G_Enter4BytesAddressMode
  41:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_DummyCyclesCfg(&qspi_object);
 133              		.loc 1 41 5
 134 006e 0748     		ldr	r0, .L5+4
 135 0070 FFF7FEFF 		bl	MT25TL01G_DummyCyclesCfg
  42:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ExitQPIMode(&qspi_object);
 136              		.loc 1 42 5
 137 0074 0548     		ldr	r0, .L5+4
 138 0076 FFF7FEFF 		bl	MT25TL01G_ExitQPIMode
  43:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_EnterQPIMode(&qspi_object);
 139              		.loc 1 43 5
 140 007a 0448     		ldr	r0, .L5+4
 141 007c FFF7FEFF 		bl	MT25TL01G_EnterQPIMode
  44:./BSP/Components/Src/mt25tl01g.c **** }
 142              		.loc 1 44 1
 143 0080 00BF     		nop
 144 0082 1437     		adds	r7, r7, #20
 145              	.LCFI3:
 146              		.cfi_def_cfa_offset 20
 147 0084 BD46     		mov	sp, r7
 148              	.LCFI4:
 149              		.cfi_def_cfa_register 13
 150              		@ sp needed
 151 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 152              	.L6:
 153              		.align	2
 154              	.L5:
 155 0088 00000000 		.word	qspi_attr
 156 008c 00000000 		.word	qspi_object
 157              		.cfi_endproc
 158              	.LFE338:
 160              		.section	.text.MT25TL01G_ResetMemory,"ax",%progbits
 161              		.align	1
 162              		.global	MT25TL01G_ResetMemory
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv5-d16
 168              	MT25TL01G_ResetMemory:
 169              	.LFB339:
  45:./BSP/Components/Src/mt25tl01g.c **** 
  46:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemory(QSPI_objectTypeDef *object)
  47:./BSP/Components/Src/mt25tl01g.c **** {
 170              		.loc 1 47 1
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 80B5     		push	{r7, lr}
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccFsJsUS.s 			page 24


 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
 179 0002 82B0     		sub	sp, sp, #8
 180              	.LCFI6:
 181              		.cfi_def_cfa_offset 16
 182 0004 00AF     		add	r7, sp, #0
 183              	.LCFI7:
 184              		.cfi_def_cfa_register 7
 185 0006 7860     		str	r0, [r7, #4]
  48:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,0);
 186              		.loc 1 48 5
 187 0008 0021     		movs	r1, #0
 188 000a 7868     		ldr	r0, [r7, #4]
 189 000c FFF7FEFF 		bl	MT25TL01G_ResetEnable
  49:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,0);
 190              		.loc 1 49 5
 191 0010 0021     		movs	r1, #0
 192 0012 7868     		ldr	r0, [r7, #4]
 193 0014 FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  50:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 194              		.loc 1 50 5
 195 0018 7868     		ldr	r0, [r7, #4]
 196 001a FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
  51:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetEnable(object,1);
 197              		.loc 1 51 5
 198 001e 0121     		movs	r1, #1
 199 0020 7868     		ldr	r0, [r7, #4]
 200 0022 FFF7FEFF 		bl	MT25TL01G_ResetEnable
  52:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_ResetMemoryCMD(object,1);
 201              		.loc 1 52 5
 202 0026 0121     		movs	r1, #1
 203 0028 7868     		ldr	r0, [r7, #4]
 204 002a FFF7FEFF 		bl	MT25TL01G_ResetMemoryCMD
  53:./BSP/Components/Src/mt25tl01g.c **** }
 205              		.loc 1 53 1
 206 002e 00BF     		nop
 207 0030 0837     		adds	r7, r7, #8
 208              	.LCFI8:
 209              		.cfi_def_cfa_offset 8
 210 0032 BD46     		mov	sp, r7
 211              	.LCFI9:
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 0034 80BD     		pop	{r7, pc}
 215              		.cfi_endproc
 216              	.LFE339:
 218              		.section	.text.MT25TL01G_DummyCyclesCfg,"ax",%progbits
 219              		.align	1
 220              		.global	MT25TL01G_DummyCyclesCfg
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv5-d16
 226              	MT25TL01G_DummyCyclesCfg:
 227              	.LFB340:
  54:./BSP/Components/Src/mt25tl01g.c **** 
  55:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_DummyCyclesCfg(QSPI_objectTypeDef *object)
ARM GAS  /tmp/ccFsJsUS.s 			page 25


  56:./BSP/Components/Src/mt25tl01g.c **** {
 228              		.loc 1 56 1
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 72
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0000 80B5     		push	{r7, lr}
 233              	.LCFI10:
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 92B0     		sub	sp, sp, #72
 238              	.LCFI11:
 239              		.cfi_def_cfa_offset 80
 240 0004 00AF     		add	r7, sp, #0
 241              	.LCFI12:
 242              		.cfi_def_cfa_register 7
 243 0006 7860     		str	r0, [r7, #4]
  57:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
  58:./BSP/Components/Src/mt25tl01g.c ****     uint16_t reg=0;
 244              		.loc 1 58 14
 245 0008 0023     		movs	r3, #0
 246 000a FB81     		strh	r3, [r7, #14]	@ movhi
  59:./BSP/Components/Src/mt25tl01g.c **** 
  60:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the read volatile configuration register command */
  61:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 247              		.loc 1 61 31
 248 000c 4FF44073 		mov	r3, #768
 249 0010 BB62     		str	r3, [r7, #40]
  62:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 250              		.loc 1 62 31
 251 0012 8523     		movs	r3, #133
 252 0014 3B61     		str	r3, [r7, #16]
  63:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 253              		.loc 1 63 31
 254 0016 0023     		movs	r3, #0
 255 0018 FB62     		str	r3, [r7, #44]
  64:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 256              		.loc 1 64 31
 257 001a 0023     		movs	r3, #0
 258 001c 3B63     		str	r3, [r7, #48]
  65:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 259              		.loc 1 65 31
 260 001e 4FF04073 		mov	r3, #50331648
 261 0022 7B63     		str	r3, [r7, #52]
  66:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 262              		.loc 1 66 31
 263 0024 0023     		movs	r3, #0
 264 0026 7B62     		str	r3, [r7, #36]
  67:./BSP/Components/Src/mt25tl01g.c ****     command.NbData            = 2;
 265              		.loc 1 67 31
 266 0028 0223     		movs	r3, #2
 267 002a BB63     		str	r3, [r7, #56]
  68:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 268              		.loc 1 68 31
 269 002c 0023     		movs	r3, #0
 270 002e FB63     		str	r3, [r7, #60]
  69:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
ARM GAS  /tmp/ccFsJsUS.s 			page 26


 271              		.loc 1 69 31
 272 0030 0023     		movs	r3, #0
 273 0032 3B64     		str	r3, [r7, #64]
  70:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 274              		.loc 1 70 31
 275 0034 0023     		movs	r3, #0
 276 0036 7B64     		str	r3, [r7, #68]
  71:./BSP/Components/Src/mt25tl01g.c **** 
  72:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 277              		.loc 1 72 11
 278 0038 7B68     		ldr	r3, [r7, #4]
 279 003a 5B6F     		ldr	r3, [r3, #116]
 280              		.loc 1 72 5
 281 003c 07F11002 		add	r2, r7, #16
 282 0040 1146     		mov	r1, r2
 283 0042 7868     		ldr	r0, [r7, #4]
 284 0044 9847     		blx	r3
 285              	.LVL1:
  73:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_readData(object,(uint8_t*)(&reg));
 286              		.loc 1 73 11
 287 0046 7B68     		ldr	r3, [r7, #4]
 288 0048 DB6F     		ldr	r3, [r3, #124]
 289              		.loc 1 73 5
 290 004a 07F10E02 		add	r2, r7, #14
 291 004e 1146     		mov	r1, r2
 292 0050 7868     		ldr	r0, [r7, #4]
 293 0052 9847     		blx	r3
 294              	.LVL2:
  74:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,0);
 295              		.loc 1 74 5
 296 0054 0021     		movs	r1, #0
 297 0056 7868     		ldr	r0, [r7, #4]
 298 0058 FFF7FEFF 		bl	MT25TL01G_WriteEnable
  75:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 299              		.loc 1 75 25
 300 005c 8123     		movs	r3, #129
 301 005e 3B61     		str	r3, [r7, #16]
  76:./BSP/Components/Src/mt25tl01g.c ****     MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 302              		.loc 1 76 5
 303 0060 FA89     		ldrh	r2, [r7, #14]
 304 0062 40F60F73 		movw	r3, #3855
 305 0066 1340     		ands	r3, r3, r2
 306 0068 9AB2     		uxth	r2, r3
 307 006a 0B4B     		ldr	r3, .L9
 308 006c 1343     		orrs	r3, r3, r2
 309 006e 9BB2     		uxth	r3, r3
 310 0070 FB81     		strh	r3, [r7, #14]	@ movhi
  77:./BSP/Components/Src/mt25tl01g.c ****                                (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));
  78:./BSP/Components/Src/mt25tl01g.c **** 
  79:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 311              		.loc 1 79 11
 312 0072 7B68     		ldr	r3, [r7, #4]
 313 0074 5B6F     		ldr	r3, [r3, #116]
 314              		.loc 1 79 5
 315 0076 07F11002 		add	r2, r7, #16
 316 007a 1146     		mov	r1, r2
 317 007c 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccFsJsUS.s 			page 27


 318 007e 9847     		blx	r3
 319              	.LVL3:
  80:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeData(object,(uint8_t*)(&reg));
 320              		.loc 1 80 11
 321 0080 7B68     		ldr	r3, [r7, #4]
 322 0082 9B6F     		ldr	r3, [r3, #120]
 323              		.loc 1 80 5
 324 0084 07F10E02 		add	r2, r7, #14
 325 0088 1146     		mov	r1, r2
 326 008a 7868     		ldr	r0, [r7, #4]
 327 008c 9847     		blx	r3
 328              	.LVL4:
  81:./BSP/Components/Src/mt25tl01g.c **** }
 329              		.loc 1 81 1
 330 008e 00BF     		nop
 331 0090 4837     		adds	r7, r7, #72
 332              	.LCFI13:
 333              		.cfi_def_cfa_offset 8
 334 0092 BD46     		mov	sp, r7
 335              	.LCFI14:
 336              		.cfi_def_cfa_register 13
 337              		@ sp needed
 338 0094 80BD     		pop	{r7, pc}
 339              	.L10:
 340 0096 00BF     		.align	2
 341              	.L9:
 342 0098 8080FFFF 		.word	-32640
 343              		.cfi_endproc
 344              	.LFE340:
 346              		.section	.text.MT25TL01G_Enter4BytesAddressMode,"ax",%progbits
 347              		.align	1
 348              		.global	MT25TL01G_Enter4BytesAddressMode
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu fpv5-d16
 354              	MT25TL01G_Enter4BytesAddressMode:
 355              	.LFB341:
  82:./BSP/Components/Src/mt25tl01g.c **** 
  83:./BSP/Components/Src/mt25tl01g.c **** /*
  84:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
  85:./BSP/Components/Src/mt25tl01g.c **** *                       hardware command setting
  86:./BSP/Components/Src/mt25tl01g.c **** *           mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
  87:./BSP/Components/Src/mt25tl01g.c **** *********************************************************************************************
  88:./BSP/Components/Src/mt25tl01g.c **** */
  89:./BSP/Components/Src/mt25tl01g.c **** 
  90:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
  91:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_Enter4BytesAddressMode(QSPI_objectTypeDef *object, uint8_t mode)
  92:./BSP/Components/Src/mt25tl01g.c **** {
 356              		.loc 1 92 1
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 64
 359              		@ frame_needed = 1, uses_anonymous_args = 0
 360 0000 80B5     		push	{r7, lr}
 361              	.LCFI15:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 7, -8
ARM GAS  /tmp/ccFsJsUS.s 			page 28


 364              		.cfi_offset 14, -4
 365 0002 90B0     		sub	sp, sp, #64
 366              	.LCFI16:
 367              		.cfi_def_cfa_offset 72
 368 0004 00AF     		add	r7, sp, #0
 369              	.LCFI17:
 370              		.cfi_def_cfa_register 7
 371 0006 7860     		str	r0, [r7, #4]
 372 0008 0B46     		mov	r3, r1
 373 000a FB70     		strb	r3, [r7, #3]
  93:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
  94:./BSP/Components/Src/mt25tl01g.c **** 
  95:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the command */
  96:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 374              		.loc 1 96 67
 375 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 376 000e 002B     		cmp	r3, #0
 377 0010 02D1     		bne	.L12
 378              		.loc 1 96 67 is_stmt 0 discriminator 1
 379 0012 4FF44073 		mov	r3, #768
 380 0016 01E0     		b	.L13
 381              	.L12:
 382              		.loc 1 96 67 discriminator 2
 383 0018 4FF48073 		mov	r3, #256
 384              	.L13:
 385              		.loc 1 96 31 is_stmt 1 discriminator 4
 386 001c 3B62     		str	r3, [r7, #32]
  97:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 387              		.loc 1 97 31 discriminator 4
 388 001e B723     		movs	r3, #183
 389 0020 BB60     		str	r3, [r7, #8]
  98:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 390              		.loc 1 98 31 discriminator 4
 391 0022 0023     		movs	r3, #0
 392 0024 7B62     		str	r3, [r7, #36]
  99:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 393              		.loc 1 99 31 discriminator 4
 394 0026 0023     		movs	r3, #0
 395 0028 BB62     		str	r3, [r7, #40]
 100:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 396              		.loc 1 100 31 discriminator 4
 397 002a 0023     		movs	r3, #0
 398 002c FB62     		str	r3, [r7, #44]
 101:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 399              		.loc 1 101 31 discriminator 4
 400 002e 0023     		movs	r3, #0
 401 0030 FB61     		str	r3, [r7, #28]
 102:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 402              		.loc 1 102 31 discriminator 4
 403 0032 0023     		movs	r3, #0
 404 0034 7B63     		str	r3, [r7, #52]
 103:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 405              		.loc 1 103 31 discriminator 4
 406 0036 0023     		movs	r3, #0
 407 0038 BB63     		str	r3, [r7, #56]
 104:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 408              		.loc 1 104 31 discriminator 4
ARM GAS  /tmp/ccFsJsUS.s 			page 29


 409 003a 0023     		movs	r3, #0
 410 003c FB63     		str	r3, [r7, #60]
 105:./BSP/Components/Src/mt25tl01g.c **** 
 106:./BSP/Components/Src/mt25tl01g.c ****     /*write enable */
 107:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_WriteEnable(object,mode);
 411              		.loc 1 107 5 discriminator 4
 412 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 413 0040 1946     		mov	r1, r3
 414 0042 7868     		ldr	r0, [r7, #4]
 415 0044 FFF7FEFF 		bl	MT25TL01G_WriteEnable
 108:./BSP/Components/Src/mt25tl01g.c **** 
 109:./BSP/Components/Src/mt25tl01g.c ****     /* Send the command */
 110:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 416              		.loc 1 110 11 discriminator 4
 417 0048 7B68     		ldr	r3, [r7, #4]
 418 004a 5B6F     		ldr	r3, [r3, #116]
 419              		.loc 1 110 5 discriminator 4
 420 004c 07F10802 		add	r2, r7, #8
 421 0050 1146     		mov	r1, r2
 422 0052 7868     		ldr	r0, [r7, #4]
 423 0054 9847     		blx	r3
 424              	.LVL5:
 111:./BSP/Components/Src/mt25tl01g.c **** 
 112:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait the memory is ready */
 113:./BSP/Components/Src/mt25tl01g.c ****     MT25TL01G_AutoPollingMemReady(object);
 425              		.loc 1 113 5 discriminator 4
 426 0056 7868     		ldr	r0, [r7, #4]
 427 0058 FFF7FEFF 		bl	MT25TL01G_AutoPollingMemReady
 114:./BSP/Components/Src/mt25tl01g.c **** }
 428              		.loc 1 114 1 discriminator 4
 429 005c 00BF     		nop
 430 005e 4037     		adds	r7, r7, #64
 431              	.LCFI18:
 432              		.cfi_def_cfa_offset 8
 433 0060 BD46     		mov	sp, r7
 434              	.LCFI19:
 435              		.cfi_def_cfa_register 13
 436              		@ sp needed
 437 0062 80BD     		pop	{r7, pc}
 438              		.cfi_endproc
 439              	.LFE341:
 441              		.section	.text.MT25TL01G_ResetEnable,"ax",%progbits
 442              		.align	1
 443              		.global	MT25TL01G_ResetEnable
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv5-d16
 449              	MT25TL01G_ResetEnable:
 450              	.LFB342:
 115:./BSP/Components/Src/mt25tl01g.c **** 
 116:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 117:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetEnable(QSPI_objectTypeDef *object,uint8_t mode)
 118:./BSP/Components/Src/mt25tl01g.c **** {
 451              		.loc 1 118 1
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 64
ARM GAS  /tmp/ccFsJsUS.s 			page 30


 454              		@ frame_needed = 1, uses_anonymous_args = 0
 455 0000 80B5     		push	{r7, lr}
 456              	.LCFI20:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 90B0     		sub	sp, sp, #64
 461              	.LCFI21:
 462              		.cfi_def_cfa_offset 72
 463 0004 00AF     		add	r7, sp, #0
 464              	.LCFI22:
 465              		.cfi_def_cfa_register 7
 466 0006 7860     		str	r0, [r7, #4]
 467 0008 0B46     		mov	r3, r1
 468 000a FB70     		strb	r3, [r7, #3]
 119:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 120:./BSP/Components/Src/mt25tl01g.c **** 
 121:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 122:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 123:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 469              		.loc 1 123 67
 470 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 471 000e 002B     		cmp	r3, #0
 472 0010 02D1     		bne	.L15
 473              		.loc 1 123 67 is_stmt 0 discriminator 1
 474 0012 4FF44073 		mov	r3, #768
 475 0016 01E0     		b	.L16
 476              	.L15:
 477              		.loc 1 123 67 discriminator 2
 478 0018 4FF48073 		mov	r3, #256
 479              	.L16:
 480              		.loc 1 123 31 is_stmt 1 discriminator 4
 481 001c 3B62     		str	r3, [r7, #32]
 124:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 482              		.loc 1 124 31 discriminator 4
 483 001e 6623     		movs	r3, #102
 484 0020 BB60     		str	r3, [r7, #8]
 125:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 485              		.loc 1 125 31 discriminator 4
 486 0022 0023     		movs	r3, #0
 487 0024 7B62     		str	r3, [r7, #36]
 126:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 488              		.loc 1 126 31 discriminator 4
 489 0026 0023     		movs	r3, #0
 490 0028 BB62     		str	r3, [r7, #40]
 127:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 491              		.loc 1 127 31 discriminator 4
 492 002a 0023     		movs	r3, #0
 493 002c FB62     		str	r3, [r7, #44]
 128:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 494              		.loc 1 128 31 discriminator 4
 495 002e 0023     		movs	r3, #0
 496 0030 FB61     		str	r3, [r7, #28]
 129:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 497              		.loc 1 129 31 discriminator 4
 498 0032 0023     		movs	r3, #0
 499 0034 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/ccFsJsUS.s 			page 31


 130:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 500              		.loc 1 130 31 discriminator 4
 501 0036 0023     		movs	r3, #0
 502 0038 BB63     		str	r3, [r7, #56]
 131:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 503              		.loc 1 131 31 discriminator 4
 504 003a 0023     		movs	r3, #0
 505 003c FB63     		str	r3, [r7, #60]
 132:./BSP/Components/Src/mt25tl01g.c **** 
 133:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 506              		.loc 1 133 11 discriminator 4
 507 003e 7B68     		ldr	r3, [r7, #4]
 508 0040 5B6F     		ldr	r3, [r3, #116]
 509              		.loc 1 133 5 discriminator 4
 510 0042 07F10802 		add	r2, r7, #8
 511 0046 1146     		mov	r1, r2
 512 0048 7868     		ldr	r0, [r7, #4]
 513 004a 9847     		blx	r3
 514              	.LVL6:
 134:./BSP/Components/Src/mt25tl01g.c **** }
 515              		.loc 1 134 1 discriminator 4
 516 004c 00BF     		nop
 517 004e 4037     		adds	r7, r7, #64
 518              	.LCFI23:
 519              		.cfi_def_cfa_offset 8
 520 0050 BD46     		mov	sp, r7
 521              	.LCFI24:
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 0052 80BD     		pop	{r7, pc}
 525              		.cfi_endproc
 526              	.LFE342:
 528              		.section	.text.MT25TL01G_ResetMemoryCMD,"ax",%progbits
 529              		.align	1
 530              		.global	MT25TL01G_ResetMemoryCMD
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv5-d16
 536              	MT25TL01G_ResetMemoryCMD:
 537              	.LFB343:
 135:./BSP/Components/Src/mt25tl01g.c **** 
 136:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 137:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ResetMemoryCMD(QSPI_objectTypeDef *object,uint8_t mode)
 138:./BSP/Components/Src/mt25tl01g.c **** {
 538              		.loc 1 138 1
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 64
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 80B5     		push	{r7, lr}
 543              	.LCFI25:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 90B0     		sub	sp, sp, #64
 548              	.LCFI26:
 549              		.cfi_def_cfa_offset 72
ARM GAS  /tmp/ccFsJsUS.s 			page 32


 550 0004 00AF     		add	r7, sp, #0
 551              	.LCFI27:
 552              		.cfi_def_cfa_register 7
 553 0006 7860     		str	r0, [r7, #4]
 554 0008 0B46     		mov	r3, r1
 555 000a FB70     		strb	r3, [r7, #3]
 139:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 140:./BSP/Components/Src/mt25tl01g.c **** 
 141:./BSP/Components/Src/mt25tl01g.c ****     /* Initialize the reset enable command */
 142:./BSP/Components/Src/mt25tl01g.c ****     //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 143:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 556              		.loc 1 143 67
 557 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 558 000e 002B     		cmp	r3, #0
 559 0010 02D1     		bne	.L18
 560              		.loc 1 143 67 is_stmt 0 discriminator 1
 561 0012 4FF44073 		mov	r3, #768
 562 0016 01E0     		b	.L19
 563              	.L18:
 564              		.loc 1 143 67 discriminator 2
 565 0018 4FF48073 		mov	r3, #256
 566              	.L19:
 567              		.loc 1 143 31 is_stmt 1 discriminator 4
 568 001c 3B62     		str	r3, [r7, #32]
 144:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_RESET_MEMORY_CMD;
 569              		.loc 1 144 31 discriminator 4
 570 001e 9923     		movs	r3, #153
 571 0020 BB60     		str	r3, [r7, #8]
 145:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 572              		.loc 1 145 31 discriminator 4
 573 0022 0023     		movs	r3, #0
 574 0024 7B62     		str	r3, [r7, #36]
 146:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 575              		.loc 1 146 31 discriminator 4
 576 0026 0023     		movs	r3, #0
 577 0028 BB62     		str	r3, [r7, #40]
 147:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 578              		.loc 1 147 31 discriminator 4
 579 002a 0023     		movs	r3, #0
 580 002c FB62     		str	r3, [r7, #44]
 148:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 581              		.loc 1 148 31 discriminator 4
 582 002e 0023     		movs	r3, #0
 583 0030 FB61     		str	r3, [r7, #28]
 149:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 584              		.loc 1 149 31 discriminator 4
 585 0032 0023     		movs	r3, #0
 586 0034 7B63     		str	r3, [r7, #52]
 150:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 587              		.loc 1 150 31 discriminator 4
 588 0036 0023     		movs	r3, #0
 589 0038 BB63     		str	r3, [r7, #56]
 151:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 590              		.loc 1 151 31 discriminator 4
 591 003a 0023     		movs	r3, #0
 592 003c FB63     		str	r3, [r7, #60]
 152:./BSP/Components/Src/mt25tl01g.c **** 
ARM GAS  /tmp/ccFsJsUS.s 			page 33


 153:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 593              		.loc 1 153 11 discriminator 4
 594 003e 7B68     		ldr	r3, [r7, #4]
 595 0040 5B6F     		ldr	r3, [r3, #116]
 596              		.loc 1 153 5 discriminator 4
 597 0042 07F10802 		add	r2, r7, #8
 598 0046 1146     		mov	r1, r2
 599 0048 7868     		ldr	r0, [r7, #4]
 600 004a 9847     		blx	r3
 601              	.LVL7:
 154:./BSP/Components/Src/mt25tl01g.c **** }
 602              		.loc 1 154 1 discriminator 4
 603 004c 00BF     		nop
 604 004e 4037     		adds	r7, r7, #64
 605              	.LCFI28:
 606              		.cfi_def_cfa_offset 8
 607 0050 BD46     		mov	sp, r7
 608              	.LCFI29:
 609              		.cfi_def_cfa_register 13
 610              		@ sp needed
 611 0052 80BD     		pop	{r7, pc}
 612              		.cfi_endproc
 613              	.LFE343:
 615              		.section	.text.MT25TL01G_AutoPollingMemReady,"ax",%progbits
 616              		.align	1
 617              		.global	MT25TL01G_AutoPollingMemReady
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu fpv5-d16
 623              	MT25TL01G_AutoPollingMemReady:
 624              	.LFB344:
 155:./BSP/Components/Src/mt25tl01g.c **** 
 156:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_AutoPollingMemReady(QSPI_objectTypeDef *object)
 157:./BSP/Components/Src/mt25tl01g.c **** {
 625              		.loc 1 157 1
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 88
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 0000 80B5     		push	{r7, lr}
 630              	.LCFI30:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 7, -8
 633              		.cfi_offset 14, -4
 634 0002 96B0     		sub	sp, sp, #88
 635              	.LCFI31:
 636              		.cfi_def_cfa_offset 96
 637 0004 00AF     		add	r7, sp, #0
 638              	.LCFI32:
 639              		.cfi_def_cfa_register 7
 640 0006 7860     		str	r0, [r7, #4]
 158:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 159:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 160:./BSP/Components/Src/mt25tl01g.c **** 
 161:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for memory ready */
 162:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 641              		.loc 1 162 31
ARM GAS  /tmp/ccFsJsUS.s 			page 34


 642 0008 4FF44073 		mov	r3, #768
 643 000c BB63     		str	r3, [r7, #56]
 163:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 644              		.loc 1 163 31
 645 000e 0523     		movs	r3, #5
 646 0010 3B62     		str	r3, [r7, #32]
 164:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 647              		.loc 1 164 31
 648 0012 0023     		movs	r3, #0
 649 0014 FB63     		str	r3, [r7, #60]
 165:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 650              		.loc 1 165 31
 651 0016 0023     		movs	r3, #0
 652 0018 3B64     		str	r3, [r7, #64]
 166:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_4_LINES;
 653              		.loc 1 166 31
 654 001a 4FF04073 		mov	r3, #50331648
 655 001e 7B64     		str	r3, [r7, #68]
 167:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 2;
 656              		.loc 1 167 31
 657 0020 0223     		movs	r3, #2
 658 0022 7B63     		str	r3, [r7, #52]
 168:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 659              		.loc 1 168 31
 660 0024 0023     		movs	r3, #0
 661 0026 FB64     		str	r3, [r7, #76]
 169:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 662              		.loc 1 169 31
 663 0028 0023     		movs	r3, #0
 664 002a 3B65     		str	r3, [r7, #80]
 170:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 665              		.loc 1 170 31
 666 002c 0023     		movs	r3, #0
 667 002e 7B65     		str	r3, [r7, #84]
 171:./BSP/Components/Src/mt25tl01g.c **** 
 172:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = 0;
 668              		.loc 1 172 28
 669 0030 0023     		movs	r3, #0
 670 0032 BB60     		str	r3, [r7, #8]
 173:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 671              		.loc 1 173 28
 672 0034 0023     		movs	r3, #0
 673 0036 BB61     		str	r3, [r7, #24]
 174:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 674              		.loc 1 174 28
 675 0038 1023     		movs	r3, #16
 676 003a 3B61     		str	r3, [r7, #16]
 175:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 677              		.loc 1 175 28
 678 003c 4FF48003 		mov	r3, #4194304
 679 0040 FB61     		str	r3, [r7, #28]
 176:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 680              		.loc 1 176 28
 681 0042 40F20113 		movw	r3, #257
 682 0046 FB60     		str	r3, [r7, #12]
 177:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 683              		.loc 1 177 28
ARM GAS  /tmp/ccFsJsUS.s 			page 35


 684 0048 0223     		movs	r3, #2
 685 004a 7B61     		str	r3, [r7, #20]
 178:./BSP/Components/Src/mt25tl01g.c **** 
 179:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 686              		.loc 1 179 11
 687 004c 7B68     		ldr	r3, [r7, #4]
 688 004e D3F88030 		ldr	r3, [r3, #128]
 689              		.loc 1 179 5
 690 0052 07F10802 		add	r2, r7, #8
 691 0056 07F12001 		add	r1, r7, #32
 692 005a 7868     		ldr	r0, [r7, #4]
 693 005c 9847     		blx	r3
 694              	.LVL8:
 180:./BSP/Components/Src/mt25tl01g.c **** }
 695              		.loc 1 180 1
 696 005e 00BF     		nop
 697 0060 5837     		adds	r7, r7, #88
 698              	.LCFI33:
 699              		.cfi_def_cfa_offset 8
 700 0062 BD46     		mov	sp, r7
 701              	.LCFI34:
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0064 80BD     		pop	{r7, pc}
 705              		.cfi_endproc
 706              	.LFE344:
 708              		.section	.text.MT25TL01G_WriteEnable,"ax",%progbits
 709              		.align	1
 710              		.global	MT25TL01G_WriteEnable
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu fpv5-d16
 716              	MT25TL01G_WriteEnable:
 717              	.LFB345:
 181:./BSP/Components/Src/mt25tl01g.c **** 
 182:./BSP/Components/Src/mt25tl01g.c **** //mode=0:QSPI_INSTRUCTION_4_LINES，mode=1:QSPI_INSTRUCTION_1_LINE
 183:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_WriteEnable(QSPI_objectTypeDef *object,uint8_t mode)
 184:./BSP/Components/Src/mt25tl01g.c **** {
 718              		.loc 1 184 1
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 88
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722 0000 80B5     		push	{r7, lr}
 723              	.LCFI35:
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 96B0     		sub	sp, sp, #88
 728              	.LCFI36:
 729              		.cfi_def_cfa_offset 96
 730 0004 00AF     		add	r7, sp, #0
 731              	.LCFI37:
 732              		.cfi_def_cfa_register 7
 733 0006 7860     		str	r0, [r7, #4]
 734 0008 0B46     		mov	r3, r1
 735 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /tmp/ccFsJsUS.s 			page 36


 185:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef     command;
 186:./BSP/Components/Src/mt25tl01g.c ****     QSPI_AutoPollingTypeDef config;
 187:./BSP/Components/Src/mt25tl01g.c **** 
 188:./BSP/Components/Src/mt25tl01g.c ****     /* Enable write operations */
 189:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 736              		.loc 1 189 67
 737 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 738 000e 002B     		cmp	r3, #0
 739 0010 02D1     		bne	.L22
 740              		.loc 1 189 67 is_stmt 0 discriminator 1
 741 0012 4FF44073 		mov	r3, #768
 742 0016 01E0     		b	.L23
 743              	.L22:
 744              		.loc 1 189 67 discriminator 2
 745 0018 4FF48073 		mov	r3, #256
 746              	.L23:
 747              		.loc 1 189 31 is_stmt 1 discriminator 4
 748 001c BB63     		str	r3, [r7, #56]
 190:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 749              		.loc 1 190 31 discriminator 4
 750 001e 0623     		movs	r3, #6
 751 0020 3B62     		str	r3, [r7, #32]
 191:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 752              		.loc 1 191 31 discriminator 4
 753 0022 0023     		movs	r3, #0
 754 0024 FB63     		str	r3, [r7, #60]
 192:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 755              		.loc 1 192 31 discriminator 4
 756 0026 0023     		movs	r3, #0
 757 0028 3B64     		str	r3, [r7, #64]
 193:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 758              		.loc 1 193 31 discriminator 4
 759 002a 0023     		movs	r3, #0
 760 002c 7B64     		str	r3, [r7, #68]
 194:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 761              		.loc 1 194 31 discriminator 4
 762 002e 0023     		movs	r3, #0
 763 0030 7B63     		str	r3, [r7, #52]
 195:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 764              		.loc 1 195 31 discriminator 4
 765 0032 0023     		movs	r3, #0
 766 0034 FB64     		str	r3, [r7, #76]
 196:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 767              		.loc 1 196 31 discriminator 4
 768 0036 0023     		movs	r3, #0
 769 0038 3B65     		str	r3, [r7, #80]
 197:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 770              		.loc 1 197 31 discriminator 4
 771 003a 0023     		movs	r3, #0
 772 003c 7B65     		str	r3, [r7, #84]
 198:./BSP/Components/Src/mt25tl01g.c **** 
 199:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 773              		.loc 1 199 11 discriminator 4
 774 003e 7B68     		ldr	r3, [r7, #4]
 775 0040 5B6F     		ldr	r3, [r3, #116]
 776              		.loc 1 199 5 discriminator 4
 777 0042 07F12002 		add	r2, r7, #32
ARM GAS  /tmp/ccFsJsUS.s 			page 37


 778 0046 1146     		mov	r1, r2
 779 0048 7868     		ldr	r0, [r7, #4]
 780 004a 9847     		blx	r3
 781              	.LVL9:
 200:./BSP/Components/Src/mt25tl01g.c **** 
 201:./BSP/Components/Src/mt25tl01g.c ****     /* Configure automatic polling mode to wait for write enabling */
 202:./BSP/Components/Src/mt25tl01g.c ****     config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 782              		.loc 1 202 28 discriminator 4
 783 004c 40F20223 		movw	r3, #514
 784 0050 BB60     		str	r3, [r7, #8]
 203:./BSP/Components/Src/mt25tl01g.c ****     config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 785              		.loc 1 203 28 discriminator 4
 786 0052 40F20223 		movw	r3, #514
 787 0056 FB60     		str	r3, [r7, #12]
 204:./BSP/Components/Src/mt25tl01g.c ****     config.MatchMode       = QSPI_MATCH_MODE_AND;
 788              		.loc 1 204 28 discriminator 4
 789 0058 0023     		movs	r3, #0
 790 005a BB61     		str	r3, [r7, #24]
 205:./BSP/Components/Src/mt25tl01g.c ****     config.StatusBytesSize = 2;
 791              		.loc 1 205 28 discriminator 4
 792 005c 0223     		movs	r3, #2
 793 005e 7B61     		str	r3, [r7, #20]
 206:./BSP/Components/Src/mt25tl01g.c ****     config.Interval        = 0x10;
 794              		.loc 1 206 28 discriminator 4
 795 0060 1023     		movs	r3, #16
 796 0062 3B61     		str	r3, [r7, #16]
 207:./BSP/Components/Src/mt25tl01g.c ****     config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 797              		.loc 1 207 28 discriminator 4
 798 0064 4FF48003 		mov	r3, #4194304
 799 0068 FB61     		str	r3, [r7, #28]
 208:./BSP/Components/Src/mt25tl01g.c **** 
 209:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800              		.loc 1 209 28 discriminator 4
 801 006a 0523     		movs	r3, #5
 802 006c 3B62     		str	r3, [r7, #32]
 210:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode       = (mode==0)?QSPI_INSTRUCTION_4_LINES:QSPI_INSTRUCTION_1_LINE;
 803              		.loc 1 210 64 discriminator 4
 804 006e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 805 0070 002B     		cmp	r3, #0
 806 0072 02D1     		bne	.L24
 807              		.loc 1 210 64 is_stmt 0 discriminator 1
 808 0074 4FF44073 		mov	r3, #768
 809 0078 01E0     		b	.L25
 810              	.L24:
 811              		.loc 1 210 64 discriminator 2
 812 007a 4FF48073 		mov	r3, #256
 813              	.L25:
 814              		.loc 1 210 28 is_stmt 1 discriminator 4
 815 007e 7B64     		str	r3, [r7, #68]
 211:./BSP/Components/Src/mt25tl01g.c **** 
 212:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_autoPolling(object,&command,&config);
 816              		.loc 1 212 11 discriminator 4
 817 0080 7B68     		ldr	r3, [r7, #4]
 818 0082 D3F88030 		ldr	r3, [r3, #128]
 819              		.loc 1 212 5 discriminator 4
 820 0086 07F10802 		add	r2, r7, #8
 821 008a 07F12001 		add	r1, r7, #32
ARM GAS  /tmp/ccFsJsUS.s 			page 38


 822 008e 7868     		ldr	r0, [r7, #4]
 823 0090 9847     		blx	r3
 824              	.LVL10:
 213:./BSP/Components/Src/mt25tl01g.c **** }
 825              		.loc 1 213 1 discriminator 4
 826 0092 00BF     		nop
 827 0094 5837     		adds	r7, r7, #88
 828              	.LCFI38:
 829              		.cfi_def_cfa_offset 8
 830 0096 BD46     		mov	sp, r7
 831              	.LCFI39:
 832              		.cfi_def_cfa_register 13
 833              		@ sp needed
 834 0098 80BD     		pop	{r7, pc}
 835              		.cfi_endproc
 836              	.LFE345:
 838              		.section	.text.MT25TL01G_EnterQPIMode,"ax",%progbits
 839              		.align	1
 840              		.global	MT25TL01G_EnterQPIMode
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu fpv5-d16
 846              	MT25TL01G_EnterQPIMode:
 847              	.LFB346:
 214:./BSP/Components/Src/mt25tl01g.c **** 
 215:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_EnterQPIMode(QSPI_objectTypeDef *object)
 216:./BSP/Components/Src/mt25tl01g.c **** {
 848              		.loc 1 216 1
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 64
 851              		@ frame_needed = 1, uses_anonymous_args = 0
 852 0000 80B5     		push	{r7, lr}
 853              	.LCFI40:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 90B0     		sub	sp, sp, #64
 858              	.LCFI41:
 859              		.cfi_def_cfa_offset 72
 860 0004 00AF     		add	r7, sp, #0
 861              	.LCFI42:
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
 217:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 218:./BSP/Components/Src/mt25tl01g.c **** 
 219:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 864              		.loc 1 219 31
 865 0008 4FF48073 		mov	r3, #256
 866 000c 3B62     		str	r3, [r7, #32]
 220:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 867              		.loc 1 220 31
 868 000e 3523     		movs	r3, #53
 869 0010 BB60     		str	r3, [r7, #8]
 221:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 870              		.loc 1 221 31
 871 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccFsJsUS.s 			page 39


 872 0014 7B62     		str	r3, [r7, #36]
 222:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 873              		.loc 1 222 31
 874 0016 0023     		movs	r3, #0
 875 0018 BB62     		str	r3, [r7, #40]
 223:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 876              		.loc 1 223 31
 877 001a 0023     		movs	r3, #0
 878 001c FB62     		str	r3, [r7, #44]
 224:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 879              		.loc 1 224 31
 880 001e 0023     		movs	r3, #0
 881 0020 FB61     		str	r3, [r7, #28]
 225:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 882              		.loc 1 225 31
 883 0022 0023     		movs	r3, #0
 884 0024 7B63     		str	r3, [r7, #52]
 226:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 885              		.loc 1 226 31
 886 0026 0023     		movs	r3, #0
 887 0028 BB63     		str	r3, [r7, #56]
 227:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 888              		.loc 1 227 31
 889 002a 0023     		movs	r3, #0
 890 002c FB63     		str	r3, [r7, #60]
 228:./BSP/Components/Src/mt25tl01g.c **** 
 229:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 891              		.loc 1 229 11
 892 002e 7B68     		ldr	r3, [r7, #4]
 893 0030 5B6F     		ldr	r3, [r3, #116]
 894              		.loc 1 229 5
 895 0032 07F10802 		add	r2, r7, #8
 896 0036 1146     		mov	r1, r2
 897 0038 7868     		ldr	r0, [r7, #4]
 898 003a 9847     		blx	r3
 899              	.LVL11:
 230:./BSP/Components/Src/mt25tl01g.c **** }
 900              		.loc 1 230 1
 901 003c 00BF     		nop
 902 003e 4037     		adds	r7, r7, #64
 903              	.LCFI43:
 904              		.cfi_def_cfa_offset 8
 905 0040 BD46     		mov	sp, r7
 906              	.LCFI44:
 907              		.cfi_def_cfa_register 13
 908              		@ sp needed
 909 0042 80BD     		pop	{r7, pc}
 910              		.cfi_endproc
 911              	.LFE346:
 913              		.section	.text.MT25TL01G_ExitQPIMode,"ax",%progbits
 914              		.align	1
 915              		.global	MT25TL01G_ExitQPIMode
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv5-d16
 921              	MT25TL01G_ExitQPIMode:
ARM GAS  /tmp/ccFsJsUS.s 			page 40


 922              	.LFB347:
 231:./BSP/Components/Src/mt25tl01g.c **** 
 232:./BSP/Components/Src/mt25tl01g.c **** void MT25TL01G_ExitQPIMode(QSPI_objectTypeDef *object)
 233:./BSP/Components/Src/mt25tl01g.c **** {
 923              		.loc 1 233 1
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 64
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 927 0000 80B5     		push	{r7, lr}
 928              	.LCFI45:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 7, -8
 931              		.cfi_offset 14, -4
 932 0002 90B0     		sub	sp, sp, #64
 933              	.LCFI46:
 934              		.cfi_def_cfa_offset 72
 935 0004 00AF     		add	r7, sp, #0
 936              	.LCFI47:
 937              		.cfi_def_cfa_register 7
 938 0006 7860     		str	r0, [r7, #4]
 234:./BSP/Components/Src/mt25tl01g.c ****     QSPI_CommandTypeDef command;
 235:./BSP/Components/Src/mt25tl01g.c **** 
 236:./BSP/Components/Src/mt25tl01g.c ****     command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 939              		.loc 1 236 31
 940 0008 4FF48073 		mov	r3, #256
 941 000c 3B62     		str	r3, [r7, #32]
 237:./BSP/Components/Src/mt25tl01g.c ****     command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 942              		.loc 1 237 31
 943 000e F523     		movs	r3, #245
 944 0010 BB60     		str	r3, [r7, #8]
 238:./BSP/Components/Src/mt25tl01g.c ****     command.AddressMode       = QSPI_ADDRESS_NONE;
 945              		.loc 1 238 31
 946 0012 0023     		movs	r3, #0
 947 0014 7B62     		str	r3, [r7, #36]
 239:./BSP/Components/Src/mt25tl01g.c ****     command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 948              		.loc 1 239 31
 949 0016 0023     		movs	r3, #0
 950 0018 BB62     		str	r3, [r7, #40]
 240:./BSP/Components/Src/mt25tl01g.c ****     command.DataMode          = QSPI_DATA_NONE;
 951              		.loc 1 240 31
 952 001a 0023     		movs	r3, #0
 953 001c FB62     		str	r3, [r7, #44]
 241:./BSP/Components/Src/mt25tl01g.c ****     command.DummyCycles       = 0;
 954              		.loc 1 241 31
 955 001e 0023     		movs	r3, #0
 956 0020 FB61     		str	r3, [r7, #28]
 242:./BSP/Components/Src/mt25tl01g.c ****     command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 957              		.loc 1 242 31
 958 0022 0023     		movs	r3, #0
 959 0024 7B63     		str	r3, [r7, #52]
 243:./BSP/Components/Src/mt25tl01g.c ****     command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 960              		.loc 1 243 31
 961 0026 0023     		movs	r3, #0
 962 0028 BB63     		str	r3, [r7, #56]
 244:./BSP/Components/Src/mt25tl01g.c ****     command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 963              		.loc 1 244 31
 964 002a 0023     		movs	r3, #0
ARM GAS  /tmp/ccFsJsUS.s 			page 41


 965 002c FB63     		str	r3, [r7, #60]
 245:./BSP/Components/Src/mt25tl01g.c **** 
 246:./BSP/Components/Src/mt25tl01g.c ****     object->qspi_writeCmd(object,&command);
 966              		.loc 1 246 11
 967 002e 7B68     		ldr	r3, [r7, #4]
 968 0030 5B6F     		ldr	r3, [r3, #116]
 969              		.loc 1 246 5
 970 0032 07F10802 		add	r2, r7, #8
 971 0036 1146     		mov	r1, r2
 972 0038 7868     		ldr	r0, [r7, #4]
 973 003a 9847     		blx	r3
 974              	.LVL12:
 247:./BSP/Components/Src/mt25tl01g.c **** }...
 975              		.loc 1 247 1
 976 003c 00BF     		nop
 977 003e 4037     		adds	r7, r7, #64
 978              	.LCFI48:
 979              		.cfi_def_cfa_offset 8
 980 0040 BD46     		mov	sp, r7
 981              	.LCFI49:
 982              		.cfi_def_cfa_register 13
 983              		@ sp needed
 984 0042 80BD     		pop	{r7, pc}
 985              		.cfi_endproc
 986              	.LFE347:
 988              		.text
 989              	.Letext0:
 990              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 991              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 992              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 993              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 994              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 995              		.file 8 "/usr/include/newlib/sys/_types.h"
 996              		.file 9 "/usr/include/newlib/sys/reent.h"
 997              		.file 10 "/usr/include/newlib/sys/lock.h"
 998              		.file 11 "/usr/include/newlib/math.h"
 999              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1000              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 1001              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 1002              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
 1003              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1004              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1005              		.file 18 "/usr/include/newlib/stdlib.h"
 1006              		.file 19 "./BSP/Components/Src/../../Components/Inc/lcd.h"
 1007              		.file 20 "./BSP/Components/Src/../../Hardware/Inc/qspi.h"
ARM GAS  /tmp/ccFsJsUS.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mt25tl01g.c
                            *COM*:0000000000000084 qspi_object
     /tmp/ccFsJsUS.s:22     .data.qspi_attr:0000000000000000 qspi_attr
     /tmp/ccFsJsUS.s:19     .data.qspi_attr:0000000000000000 $d
     /tmp/ccFsJsUS.s:33     .text.mt25tl01g_Init:0000000000000000 $t
     /tmp/ccFsJsUS.s:41     .text.mt25tl01g_Init:0000000000000000 mt25tl01g_Init
     /tmp/ccFsJsUS.s:168    .text.MT25TL01G_ResetMemory:0000000000000000 MT25TL01G_ResetMemory
     /tmp/ccFsJsUS.s:623    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 MT25TL01G_AutoPollingMemReady
     /tmp/ccFsJsUS.s:354    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 MT25TL01G_Enter4BytesAddressMode
     /tmp/ccFsJsUS.s:226    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 MT25TL01G_DummyCyclesCfg
     /tmp/ccFsJsUS.s:921    .text.MT25TL01G_ExitQPIMode:0000000000000000 MT25TL01G_ExitQPIMode
     /tmp/ccFsJsUS.s:846    .text.MT25TL01G_EnterQPIMode:0000000000000000 MT25TL01G_EnterQPIMode
     /tmp/ccFsJsUS.s:155    .text.mt25tl01g_Init:0000000000000088 $d
     /tmp/ccFsJsUS.s:161    .text.MT25TL01G_ResetMemory:0000000000000000 $t
     /tmp/ccFsJsUS.s:449    .text.MT25TL01G_ResetEnable:0000000000000000 MT25TL01G_ResetEnable
     /tmp/ccFsJsUS.s:536    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 MT25TL01G_ResetMemoryCMD
     /tmp/ccFsJsUS.s:219    .text.MT25TL01G_DummyCyclesCfg:0000000000000000 $t
     /tmp/ccFsJsUS.s:716    .text.MT25TL01G_WriteEnable:0000000000000000 MT25TL01G_WriteEnable
     /tmp/ccFsJsUS.s:342    .text.MT25TL01G_DummyCyclesCfg:0000000000000098 $d
     /tmp/ccFsJsUS.s:347    .text.MT25TL01G_Enter4BytesAddressMode:0000000000000000 $t
     /tmp/ccFsJsUS.s:442    .text.MT25TL01G_ResetEnable:0000000000000000 $t
     /tmp/ccFsJsUS.s:529    .text.MT25TL01G_ResetMemoryCMD:0000000000000000 $t
     /tmp/ccFsJsUS.s:616    .text.MT25TL01G_AutoPollingMemReady:0000000000000000 $t
     /tmp/ccFsJsUS.s:709    .text.MT25TL01G_WriteEnable:0000000000000000 $t
     /tmp/ccFsJsUS.s:839    .text.MT25TL01G_EnterQPIMode:0000000000000000 $t
     /tmp/ccFsJsUS.s:914    .text.MT25TL01G_ExitQPIMode:0000000000000000 $t

UNDEFINED SYMBOLS
QSPI_object_Init
